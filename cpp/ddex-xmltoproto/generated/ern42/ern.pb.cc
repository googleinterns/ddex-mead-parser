// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ddex-xmltoproto/generated/ern42/ern.proto

#include "ddex-xmltoproto/generated/ern42/ern.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AdditionalTitleType_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AdministratingRecordCompanyRole_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AffiliationType_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AllTerritoryCode_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AspectRatioType_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AudioCodecType_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BinaryDataType_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CarrierType_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CodingType_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CommercialModelType_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CompositeMusicalWorkType_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ContainerFormat_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ContributorRole_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CueOrigin_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CueSheetType_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CueUseType_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CurrencyCode_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CurrentTerritoryCode_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DisplayArtistRole_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ExpressionType_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ExternallyLinkedResourceType_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FingerprintAlgorithmType_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HashSumAlgorithmType_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ImageCodecType_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ImageType_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InstrumentType_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IsoLanguageCode_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LabelType_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LinkDescription_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MessageControlType_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OperatingSystemType_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PLineType_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ParentalWarningType_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PartyRelationshipType_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PriceInformationType_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PriceType_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Purpose_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RatingAgency_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RatingReason_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RecordingMode_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReferenceCreation_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RelationalRelator_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReleaseProfileVariantVersionId_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReleaseProfileVersionId_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReleaseRelationshipType_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReleaseType_ERN4_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResourceGroupType_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResourceRelationshipType_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RightsClaimPolicyType_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RightsControllerRole_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RightsControllerType_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RightsCoverage_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SheetMusicCodecType_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SheetMusicType_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SoftwareType_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SoundRecordingType_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SubTitleType_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TerritoryCodeType_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TerritoryCodeTypeIncludingDeprecatedCodes_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TextCodecType_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TextType_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ThemeType_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TitleType_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UnitOfBitRate_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UnitOfConditionValue_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UnitOfExtent_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UnitOfFrameRate_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UnitOfFrequency_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UseType_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VersionType_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VideoCodecType_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VideoDefinitionType_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VideoType_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VisualPerceptionType_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VocalType_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_AdditionalTitle_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AdministratingRecordCompanyRole_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AdministratingRecordCompanyWithReference_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Affiliation_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AllTerritoryCode_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AspectRatio_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AudioCodecType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_AvRating_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BitRate_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CLine_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CLineWithDefault_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CarrierType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CatalogNumber_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_Chapter_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ChapterList_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Character_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CommercialModelType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ConditionForRightsClaimPolicy_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ContainerFormat_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Contributor_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ContributorRole_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CoreArea_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CourtesyLineWithDefault_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CueOrigin_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CueSheetType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CueThemeType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CueUseType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CueVisualPerceptionType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CueVocalType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CurrentTerritoryCode_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_DSP_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Deal_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DealList_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DealResourceReferenceList_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DealTechnicalResourceDetailsReferenceList_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<13> scc_info_DealTerms_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_DealTermsTechnicalInstantiation_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Deity_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_DelegatedUsageRights_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DescriptionWithTerritory_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<13> scc_info_DetailedCue_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_DetailedCueSheet_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DetailedCueSheetList_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DetailedHashSum_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DetailedPartyId_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_DetailedResourceContributor_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DiscoverableUseType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_DisplayArtist_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DisplayArtistNameWithDefault_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DisplayArtistRole_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DisplayCredits_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DisplaySubTitle_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DisplayTitle_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DisplayTitleText_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DistributionChannelPage_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_EventDate_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EventDateTime_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EventDateTimeWithoutFlags_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_EventDateWithDefault_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_EventDateWithoutFlags_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Extent_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ExternalResourceLink_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ExternallyLinkedResourceType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_File_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Fingerprint_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FingerprintAlgorithmType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_FirstPublicationDate_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FrameRate_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_FulfillmentDateWithTerritory_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GenreWithTerritory_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HashSumAlgorithmType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<20> scc_info_Image_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ImageCodecType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ImageType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InstrumentType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IsCredited_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_KeywordsWithTerritory_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LinkedReleaseResourceReference_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MarketingComment_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MessageAuditTrail_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MessageAuditTrailEvent_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_MessageHeader_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MessagingPartyWithoutCode_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MusicalWorkId_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Name_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OperatingSystemType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PLine_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PLineWithDefault_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ParentalWarningTypeWithTerritory_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Party_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PartyList_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PartyName_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PartyNameWithTerritory_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PartyNameWithoutCode_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PartyRelationshipType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Percentage_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Period_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PeriodWithoutFlags_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PhysicalReturns_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Prefix_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PreviewDetails_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Price_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_PriceInformationWithType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PriceType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PromotionalCode_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProprietaryId_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_PurgedRelease_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Purpose_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Raga_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RatingAgency_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Reason_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RelatedParty_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<8> scc_info_RelatedRelease_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_RelatedResource_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<25> scc_info_Release_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReleaseDeal_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ReleaseId_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ReleaseLabelReference_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ReleaseList_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReleaseRelationshipType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReleaseTypeForReleaseNotification_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ResourceContainedResourceReference_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ResourceContainedResourceReferenceList_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<9> scc_info_ResourceGroup_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ResourceGroupContentItem_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ResourceId_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_ResourceList_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ResourceProprietaryId_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ResourceRightsController_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<9> scc_info_ResourceSubGroup_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RightsClaimPolicy_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SamplingRate_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<22> scc_info_SheetMusic_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SheetMusicCodecType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SheetMusicId_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SheetMusicType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SimpleRightsType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<22> scc_info_Software_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SoftwareType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<28> scc_info_SoundRecording_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SoundRecordingId_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SoundRecordingPreviewDetails_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SoundRecordingType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SupplementalDocumentList_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SynopsisWithTerritory_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Tala_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_TechnicalImageDetails_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_TechnicalSheetMusicDetails_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_TechnicalSoftwareDetails_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_TechnicalSoundRecordingDetails_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_TechnicalTextDetails_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<14> scc_info_TechnicalVideoDetails_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<21> scc_info_Text_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TextCodecType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TextId_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TextType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timing_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Title_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TitleDisplayInformation_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<10> scc_info_TrackRelease_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UseType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ValidityPeriod_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VersionType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<28> scc_info_Video_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VideoCodecType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_VideoId_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VideoType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_WorkRightsController_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ddex_IsoDate_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ddex_LocalPartyAnchorReference_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ddex_LocalResourceAnchorReference_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto;
namespace ern411 {
namespace ern {
class AdditionalTitleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AdditionalTitle> _instance;
} _AdditionalTitle_default_instance_;
class AdministratingRecordCompanyRoleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AdministratingRecordCompanyRole> _instance;
} _AdministratingRecordCompanyRole_default_instance_;
class AdministratingRecordCompanyWithReferenceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AdministratingRecordCompanyWithReference> _instance;
} _AdministratingRecordCompanyWithReference_default_instance_;
class AffiliationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Affiliation> _instance;
} _Affiliation_default_instance_;
class AllTerritoryCodeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AllTerritoryCode> _instance;
} _AllTerritoryCode_default_instance_;
class AspectRatioDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AspectRatio> _instance;
} _AspectRatio_default_instance_;
class AudioCodecTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AudioCodecType> _instance;
} _AudioCodecType_default_instance_;
class AvRatingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AvRating> _instance;
} _AvRating_default_instance_;
class BitRateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BitRate> _instance;
} _BitRate_default_instance_;
class CLineDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CLine> _instance;
} _CLine_default_instance_;
class CLineWithDefaultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CLineWithDefault> _instance;
} _CLineWithDefault_default_instance_;
class CarrierTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CarrierType> _instance;
} _CarrierType_default_instance_;
class CatalogNumberDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CatalogNumber> _instance;
} _CatalogNumber_default_instance_;
class ChapterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Chapter> _instance;
} _Chapter_default_instance_;
class ChapterListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChapterList> _instance;
} _ChapterList_default_instance_;
class CharacterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Character> _instance;
} _Character_default_instance_;
class CommercialModelTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CommercialModelType> _instance;
} _CommercialModelType_default_instance_;
class ConditionForRightsClaimPolicyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConditionForRightsClaimPolicy> _instance;
} _ConditionForRightsClaimPolicy_default_instance_;
class ContainerFormatDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ContainerFormat> _instance;
} _ContainerFormat_default_instance_;
class ContributorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Contributor> _instance;
} _Contributor_default_instance_;
class ContributorRoleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ContributorRole> _instance;
} _ContributorRole_default_instance_;
class CoreAreaDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CoreArea> _instance;
} _CoreArea_default_instance_;
class CourtesyLineWithDefaultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CourtesyLineWithDefault> _instance;
} _CourtesyLineWithDefault_default_instance_;
class CueOriginDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CueOrigin> _instance;
} _CueOrigin_default_instance_;
class CueSheetTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CueSheetType> _instance;
} _CueSheetType_default_instance_;
class CueThemeTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CueThemeType> _instance;
} _CueThemeType_default_instance_;
class CueUseTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CueUseType> _instance;
} _CueUseType_default_instance_;
class CueVisualPerceptionTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CueVisualPerceptionType> _instance;
} _CueVisualPerceptionType_default_instance_;
class CueVocalTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CueVocalType> _instance;
} _CueVocalType_default_instance_;
class CurrentTerritoryCodeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CurrentTerritoryCode> _instance;
} _CurrentTerritoryCode_default_instance_;
class DSPDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DSP> _instance;
} _DSP_default_instance_;
class DealDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Deal> _instance;
} _Deal_default_instance_;
class DealListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DealList> _instance;
} _DealList_default_instance_;
class DealResourceReferenceListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DealResourceReferenceList> _instance;
} _DealResourceReferenceList_default_instance_;
class DealTechnicalResourceDetailsReferenceListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DealTechnicalResourceDetailsReferenceList> _instance;
} _DealTechnicalResourceDetailsReferenceList_default_instance_;
class DealTermsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DealTerms> _instance;
} _DealTerms_default_instance_;
class DealTermsTechnicalInstantiationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DealTermsTechnicalInstantiation> _instance;
} _DealTermsTechnicalInstantiation_default_instance_;
class DeityDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Deity> _instance;
} _Deity_default_instance_;
class DelegatedUsageRightsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DelegatedUsageRights> _instance;
} _DelegatedUsageRights_default_instance_;
class DescriptionWithTerritoryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DescriptionWithTerritory> _instance;
} _DescriptionWithTerritory_default_instance_;
class DetailedCueDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DetailedCue> _instance;
} _DetailedCue_default_instance_;
class DetailedCueSheetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DetailedCueSheet> _instance;
} _DetailedCueSheet_default_instance_;
class DetailedCueSheetListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DetailedCueSheetList> _instance;
} _DetailedCueSheetList_default_instance_;
class DetailedHashSumDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DetailedHashSum> _instance;
} _DetailedHashSum_default_instance_;
class DetailedPartyIdDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DetailedPartyId> _instance;
} _DetailedPartyId_default_instance_;
class DetailedResourceContributorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DetailedResourceContributor> _instance;
} _DetailedResourceContributor_default_instance_;
class DiscoverableUseTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DiscoverableUseType> _instance;
} _DiscoverableUseType_default_instance_;
class DisplayArtistDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DisplayArtist> _instance;
} _DisplayArtist_default_instance_;
class DisplayArtistNameWithDefaultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DisplayArtistNameWithDefault> _instance;
} _DisplayArtistNameWithDefault_default_instance_;
class DisplayArtistRoleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DisplayArtistRole> _instance;
} _DisplayArtistRole_default_instance_;
class DisplayCreditsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DisplayCredits> _instance;
} _DisplayCredits_default_instance_;
class DisplaySubTitleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DisplaySubTitle> _instance;
} _DisplaySubTitle_default_instance_;
class DisplayTitleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DisplayTitle> _instance;
} _DisplayTitle_default_instance_;
class DisplayTitleTextDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DisplayTitleText> _instance;
} _DisplayTitleText_default_instance_;
class DistributionChannelPageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DistributionChannelPage> _instance;
} _DistributionChannelPage_default_instance_;
class EventDateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EventDate> _instance;
} _EventDate_default_instance_;
class EventDateTimeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EventDateTime> _instance;
} _EventDateTime_default_instance_;
class EventDateTimeWithoutFlagsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EventDateTimeWithoutFlags> _instance;
} _EventDateTimeWithoutFlags_default_instance_;
class EventDateWithDefaultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EventDateWithDefault> _instance;
} _EventDateWithDefault_default_instance_;
class EventDateWithoutFlagsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EventDateWithoutFlags> _instance;
} _EventDateWithoutFlags_default_instance_;
class ExtentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Extent> _instance;
} _Extent_default_instance_;
class ExternalResourceLinkDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ExternalResourceLink> _instance;
} _ExternalResourceLink_default_instance_;
class ExternallyLinkedResourceTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ExternallyLinkedResourceType> _instance;
} _ExternallyLinkedResourceType_default_instance_;
class FileDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<File> _instance;
} _File_default_instance_;
class FingerprintDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Fingerprint> _instance;
} _Fingerprint_default_instance_;
class FingerprintAlgorithmTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FingerprintAlgorithmType> _instance;
} _FingerprintAlgorithmType_default_instance_;
class FirstPublicationDateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FirstPublicationDate> _instance;
} _FirstPublicationDate_default_instance_;
class FrameRateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FrameRate> _instance;
} _FrameRate_default_instance_;
class FulfillmentDateWithTerritoryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FulfillmentDateWithTerritory> _instance;
} _FulfillmentDateWithTerritory_default_instance_;
class GenreWithTerritoryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GenreWithTerritory> _instance;
} _GenreWithTerritory_default_instance_;
class HashSumAlgorithmTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HashSumAlgorithmType> _instance;
} _HashSumAlgorithmType_default_instance_;
class ImageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Image> _instance;
} _Image_default_instance_;
class ImageCodecTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ImageCodecType> _instance;
} _ImageCodecType_default_instance_;
class ImageTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ImageType> _instance;
} _ImageType_default_instance_;
class InstrumentTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InstrumentType> _instance;
} _InstrumentType_default_instance_;
class IsCreditedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IsCredited> _instance;
} _IsCredited_default_instance_;
class KeywordsWithTerritoryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KeywordsWithTerritory> _instance;
} _KeywordsWithTerritory_default_instance_;
class LinkedReleaseResourceReferenceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LinkedReleaseResourceReference> _instance;
} _LinkedReleaseResourceReference_default_instance_;
class MarketingCommentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MarketingComment> _instance;
} _MarketingComment_default_instance_;
class MessageAuditTrailDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MessageAuditTrail> _instance;
} _MessageAuditTrail_default_instance_;
class MessageAuditTrailEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MessageAuditTrailEvent> _instance;
} _MessageAuditTrailEvent_default_instance_;
class MessageHeaderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MessageHeader> _instance;
} _MessageHeader_default_instance_;
class MessagingPartyWithoutCodeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MessagingPartyWithoutCode> _instance;
} _MessagingPartyWithoutCode_default_instance_;
class MusicalWorkIdDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MusicalWorkId> _instance;
} _MusicalWorkId_default_instance_;
class NameDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Name> _instance;
} _Name_default_instance_;
class NewReleaseMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NewReleaseMessage> _instance;
} _NewReleaseMessage_default_instance_;
class OperatingSystemTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OperatingSystemType> _instance;
} _OperatingSystemType_default_instance_;
class PLineDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PLine> _instance;
} _PLine_default_instance_;
class PLineWithDefaultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PLineWithDefault> _instance;
} _PLineWithDefault_default_instance_;
class ParentalWarningTypeWithTerritoryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ParentalWarningTypeWithTerritory> _instance;
} _ParentalWarningTypeWithTerritory_default_instance_;
class PartyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Party> _instance;
} _Party_default_instance_;
class PartyListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PartyList> _instance;
} _PartyList_default_instance_;
class PartyNameDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PartyName> _instance;
} _PartyName_default_instance_;
class PartyNameWithTerritoryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PartyNameWithTerritory> _instance;
} _PartyNameWithTerritory_default_instance_;
class PartyNameWithoutCodeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PartyNameWithoutCode> _instance;
} _PartyNameWithoutCode_default_instance_;
class PartyRelationshipTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PartyRelationshipType> _instance;
} _PartyRelationshipType_default_instance_;
class PercentageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Percentage> _instance;
} _Percentage_default_instance_;
class PeriodDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Period> _instance;
} _Period_default_instance_;
class PeriodWithoutFlagsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PeriodWithoutFlags> _instance;
} _PeriodWithoutFlags_default_instance_;
class PhysicalReturnsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PhysicalReturns> _instance;
} _PhysicalReturns_default_instance_;
class PrefixDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Prefix> _instance;
} _Prefix_default_instance_;
class PreviewDetailsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PreviewDetails> _instance;
} _PreviewDetails_default_instance_;
class PriceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Price> _instance;
} _Price_default_instance_;
class PriceInformationWithTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PriceInformationWithType> _instance;
} _PriceInformationWithType_default_instance_;
class PriceTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PriceType> _instance;
} _PriceType_default_instance_;
class PromotionalCodeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PromotionalCode> _instance;
} _PromotionalCode_default_instance_;
class ProprietaryIdDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProprietaryId> _instance;
} _ProprietaryId_default_instance_;
class PurgeReleaseMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PurgeReleaseMessage> _instance;
} _PurgeReleaseMessage_default_instance_;
class PurgedReleaseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PurgedRelease> _instance;
} _PurgedRelease_default_instance_;
class PurposeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Purpose> _instance;
} _Purpose_default_instance_;
class RagaDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Raga> _instance;
} _Raga_default_instance_;
class RatingAgencyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RatingAgency> _instance;
} _RatingAgency_default_instance_;
class ReasonDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Reason> _instance;
} _Reason_default_instance_;
class RelatedPartyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RelatedParty> _instance;
} _RelatedParty_default_instance_;
class RelatedReleaseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RelatedRelease> _instance;
} _RelatedRelease_default_instance_;
class RelatedResourceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RelatedResource> _instance;
} _RelatedResource_default_instance_;
class ReleaseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Release> _instance;
} _Release_default_instance_;
class ReleaseDealDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReleaseDeal> _instance;
} _ReleaseDeal_default_instance_;
class ReleaseIdDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReleaseId> _instance;
} _ReleaseId_default_instance_;
class ReleaseLabelReferenceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReleaseLabelReference> _instance;
} _ReleaseLabelReference_default_instance_;
class ReleaseListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReleaseList> _instance;
} _ReleaseList_default_instance_;
class ReleaseRelationshipTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReleaseRelationshipType> _instance;
} _ReleaseRelationshipType_default_instance_;
class ReleaseTypeForReleaseNotificationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReleaseTypeForReleaseNotification> _instance;
} _ReleaseTypeForReleaseNotification_default_instance_;
class ResourceContainedResourceReferenceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResourceContainedResourceReference> _instance;
} _ResourceContainedResourceReference_default_instance_;
class ResourceContainedResourceReferenceListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResourceContainedResourceReferenceList> _instance;
} _ResourceContainedResourceReferenceList_default_instance_;
class ResourceGroupDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResourceGroup> _instance;
} _ResourceGroup_default_instance_;
class ResourceGroupContentItemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResourceGroupContentItem> _instance;
} _ResourceGroupContentItem_default_instance_;
class ResourceIdDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResourceId> _instance;
} _ResourceId_default_instance_;
class ResourceListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResourceList> _instance;
} _ResourceList_default_instance_;
class ResourceProprietaryIdDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResourceProprietaryId> _instance;
} _ResourceProprietaryId_default_instance_;
class ResourceRightsControllerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResourceRightsController> _instance;
} _ResourceRightsController_default_instance_;
class ResourceSubGroupDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResourceSubGroup> _instance;
} _ResourceSubGroup_default_instance_;
class RightsClaimPolicyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RightsClaimPolicy> _instance;
} _RightsClaimPolicy_default_instance_;
class SamplingRateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SamplingRate> _instance;
} _SamplingRate_default_instance_;
class SheetMusicDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SheetMusic> _instance;
} _SheetMusic_default_instance_;
class SheetMusicCodecTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SheetMusicCodecType> _instance;
} _SheetMusicCodecType_default_instance_;
class SheetMusicIdDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SheetMusicId> _instance;
} _SheetMusicId_default_instance_;
class SheetMusicTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SheetMusicType> _instance;
} _SheetMusicType_default_instance_;
class SimpleRightsTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SimpleRightsType> _instance;
} _SimpleRightsType_default_instance_;
class SoftwareDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Software> _instance;
} _Software_default_instance_;
class SoftwareTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SoftwareType> _instance;
} _SoftwareType_default_instance_;
class SoundRecordingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SoundRecording> _instance;
} _SoundRecording_default_instance_;
class SoundRecordingIdDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SoundRecordingId> _instance;
} _SoundRecordingId_default_instance_;
class SoundRecordingPreviewDetailsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SoundRecordingPreviewDetails> _instance;
} _SoundRecordingPreviewDetails_default_instance_;
class SoundRecordingTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SoundRecordingType> _instance;
} _SoundRecordingType_default_instance_;
class SupplementalDocumentListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SupplementalDocumentList> _instance;
} _SupplementalDocumentList_default_instance_;
class SynopsisWithTerritoryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SynopsisWithTerritory> _instance;
} _SynopsisWithTerritory_default_instance_;
class TalaDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Tala> _instance;
} _Tala_default_instance_;
class TechnicalImageDetailsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TechnicalImageDetails> _instance;
} _TechnicalImageDetails_default_instance_;
class TechnicalSheetMusicDetailsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TechnicalSheetMusicDetails> _instance;
} _TechnicalSheetMusicDetails_default_instance_;
class TechnicalSoftwareDetailsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TechnicalSoftwareDetails> _instance;
} _TechnicalSoftwareDetails_default_instance_;
class TechnicalSoundRecordingDetailsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TechnicalSoundRecordingDetails> _instance;
} _TechnicalSoundRecordingDetails_default_instance_;
class TechnicalTextDetailsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TechnicalTextDetails> _instance;
} _TechnicalTextDetails_default_instance_;
class TechnicalVideoDetailsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TechnicalVideoDetails> _instance;
} _TechnicalVideoDetails_default_instance_;
class TextDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Text> _instance;
} _Text_default_instance_;
class TextCodecTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TextCodecType> _instance;
} _TextCodecType_default_instance_;
class TextIdDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TextId> _instance;
} _TextId_default_instance_;
class TextTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TextType> _instance;
} _TextType_default_instance_;
class TimingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Timing> _instance;
} _Timing_default_instance_;
class TitleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Title> _instance;
} _Title_default_instance_;
class TitleDisplayInformationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TitleDisplayInformation> _instance;
} _TitleDisplayInformation_default_instance_;
class TrackReleaseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrackRelease> _instance;
} _TrackRelease_default_instance_;
class UseTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UseType> _instance;
} _UseType_default_instance_;
class ValidityPeriodDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ValidityPeriod> _instance;
} _ValidityPeriod_default_instance_;
class VersionTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VersionType> _instance;
} _VersionType_default_instance_;
class VideoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Video> _instance;
} _Video_default_instance_;
class VideoCodecTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VideoCodecType> _instance;
} _VideoCodecType_default_instance_;
class VideoIdDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VideoId> _instance;
} _VideoId_default_instance_;
class VideoTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VideoType> _instance;
} _VideoType_default_instance_;
class WorkRightsControllerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WorkRightsController> _instance;
} _WorkRightsController_default_instance_;
class ddex_IsoDateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ddex_IsoDate> _instance;
} _ddex_IsoDate_default_instance_;
class ddex_LocalPartyAnchorReferenceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ddex_LocalPartyAnchorReference> _instance;
} _ddex_LocalPartyAnchorReference_default_instance_;
class ddex_LocalResourceAnchorReferenceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ddex_LocalResourceAnchorReference> _instance;
} _ddex_LocalResourceAnchorReference_default_instance_;
}  // namespace ern
}  // namespace ern411
static void InitDefaultsscc_info_AdditionalTitle_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_AdditionalTitle_default_instance_;
    new (ptr) ::ern411::ern::AdditionalTitle();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::AdditionalTitle::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_AdditionalTitle_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_AdditionalTitle_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_CurrentTerritoryCode_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto.base,
      &scc_info_DisplaySubTitle_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_AdditionalTitleType_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto.base,}};

static void InitDefaultsscc_info_AdministratingRecordCompanyRole_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_AdministratingRecordCompanyRole_default_instance_;
    new (ptr) ::ern411::ern::AdministratingRecordCompanyRole();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::AdministratingRecordCompanyRole::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AdministratingRecordCompanyRole_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AdministratingRecordCompanyRole_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_AdministratingRecordCompanyRole_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto.base,}};

static void InitDefaultsscc_info_AdministratingRecordCompanyWithReference_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_AdministratingRecordCompanyWithReference_default_instance_;
    new (ptr) ::ern411::ern::AdministratingRecordCompanyWithReference();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::AdministratingRecordCompanyWithReference::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AdministratingRecordCompanyWithReference_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AdministratingRecordCompanyWithReference_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_AdministratingRecordCompanyRole_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,}};

static void InitDefaultsscc_info_Affiliation_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_Affiliation_default_instance_;
    new (ptr) ::ern411::ern::Affiliation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::Affiliation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Affiliation_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_Affiliation_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_CurrentTerritoryCode_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_SimpleRightsType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_AffiliationType_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto.base,
      &scc_info_ValidityPeriod_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,}};

static void InitDefaultsscc_info_AllTerritoryCode_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_AllTerritoryCode_default_instance_;
    new (ptr) ::ern411::ern::AllTerritoryCode();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::AllTerritoryCode::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AllTerritoryCode_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_AllTerritoryCode_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_TerritoryCodeTypeIncludingDeprecatedCodes_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto.base,
      &scc_info_AllTerritoryCode_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto.base,}};

static void InitDefaultsscc_info_AspectRatio_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_AspectRatio_default_instance_;
    new (ptr) ::ern411::ern::AspectRatio();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::AspectRatio::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AspectRatio_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AspectRatio_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_AspectRatioType_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto.base,}};

static void InitDefaultsscc_info_AudioCodecType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_AudioCodecType_default_instance_;
    new (ptr) ::ern411::ern::AudioCodecType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::AudioCodecType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AudioCodecType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AudioCodecType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_AudioCodecType_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto.base,}};

static void InitDefaultsscc_info_AvRating_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_AvRating_default_instance_;
    new (ptr) ::ern411::ern::AvRating();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::AvRating::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_AvRating_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_AvRating_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_RatingAgency_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_CurrentTerritoryCode_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto.base,
      &scc_info_RatingReason_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto.base,}};

static void InitDefaultsscc_info_BitRate_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_BitRate_default_instance_;
    new (ptr) ::ern411::ern::BitRate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::BitRate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BitRate_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_BitRate_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_UnitOfBitRate_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto.base,}};

static void InitDefaultsscc_info_CLine_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_CLine_default_instance_;
    new (ptr) ::ern411::ern::CLine();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::CLine::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CLine_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CLine_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {}};

static void InitDefaultsscc_info_CLineWithDefault_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_CLineWithDefault_default_instance_;
    new (ptr) ::ern411::ern::CLineWithDefault();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::CLineWithDefault::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CLineWithDefault_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CLineWithDefault_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_CurrentTerritoryCode_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto.base,}};

static void InitDefaultsscc_info_CarrierType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_CarrierType_default_instance_;
    new (ptr) ::ern411::ern::CarrierType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::CarrierType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CarrierType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CarrierType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_CarrierType_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto.base,}};

static void InitDefaultsscc_info_CatalogNumber_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_CatalogNumber_default_instance_;
    new (ptr) ::ern411::ern::CatalogNumber();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::CatalogNumber::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CatalogNumber_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CatalogNumber_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {}};

static void InitDefaultsscc_info_Chapter_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_Chapter_default_instance_;
    new (ptr) ::ern411::ern::Chapter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::Chapter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_Chapter_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 6, 0, InitDefaultsscc_info_Chapter_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_AdditionalTitle_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_ProprietaryId_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_Character_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_Contributor_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_DisplayTitle_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_DisplayTitleText_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,}};

static void InitDefaultsscc_info_ChapterList_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_ChapterList_default_instance_;
    new (ptr) ::ern411::ern::ChapterList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::ChapterList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ChapterList_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ChapterList_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_Chapter_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,}};

static void InitDefaultsscc_info_Character_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_Character_default_instance_;
    new (ptr) ::ern411::ern::Character();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::Character::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Character_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Character_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_Contributor_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,}};

static void InitDefaultsscc_info_CommercialModelType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_CommercialModelType_default_instance_;
    new (ptr) ::ern411::ern::CommercialModelType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::CommercialModelType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CommercialModelType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CommercialModelType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_CommercialModelType_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto.base,}};

static void InitDefaultsscc_info_ConditionForRightsClaimPolicy_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_ConditionForRightsClaimPolicy_default_instance_;
    new (ptr) ::ern411::ern::ConditionForRightsClaimPolicy();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::ConditionForRightsClaimPolicy::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ConditionForRightsClaimPolicy_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_ConditionForRightsClaimPolicy_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_ReferenceCreation_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto.base,
      &scc_info_RelationalRelator_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto.base,
      &scc_info_UnitOfConditionValue_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto.base,}};

static void InitDefaultsscc_info_ContainerFormat_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_ContainerFormat_default_instance_;
    new (ptr) ::ern411::ern::ContainerFormat();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::ContainerFormat::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ContainerFormat_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ContainerFormat_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_ContainerFormat_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto.base,}};

static void InitDefaultsscc_info_Contributor_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_Contributor_default_instance_;
    new (ptr) ::ern411::ern::Contributor();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::Contributor::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Contributor_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_Contributor_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_DisplayCredits_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_InstrumentType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_IsCredited_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_ContributorRole_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,}};

static void InitDefaultsscc_info_ContributorRole_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_ContributorRole_default_instance_;
    new (ptr) ::ern411::ern::ContributorRole();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::ContributorRole::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ContributorRole_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ContributorRole_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_ContributorRole_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto.base,}};

static void InitDefaultsscc_info_CoreArea_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_CoreArea_default_instance_;
    new (ptr) ::ern411::ern::CoreArea();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::CoreArea::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CoreArea_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CoreArea_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {}};

static void InitDefaultsscc_info_CourtesyLineWithDefault_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_CourtesyLineWithDefault_default_instance_;
    new (ptr) ::ern411::ern::CourtesyLineWithDefault();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::CourtesyLineWithDefault::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CourtesyLineWithDefault_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CourtesyLineWithDefault_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_CurrentTerritoryCode_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto.base,}};

static void InitDefaultsscc_info_CueOrigin_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_CueOrigin_default_instance_;
    new (ptr) ::ern411::ern::CueOrigin();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::CueOrigin::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CueOrigin_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CueOrigin_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_CueOrigin_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto.base,}};

static void InitDefaultsscc_info_CueSheetType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_CueSheetType_default_instance_;
    new (ptr) ::ern411::ern::CueSheetType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::CueSheetType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CueSheetType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CueSheetType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_CueSheetType_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto.base,}};

static void InitDefaultsscc_info_CueThemeType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_CueThemeType_default_instance_;
    new (ptr) ::ern411::ern::CueThemeType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::CueThemeType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CueThemeType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CueThemeType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_ThemeType_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto.base,}};

static void InitDefaultsscc_info_CueUseType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_CueUseType_default_instance_;
    new (ptr) ::ern411::ern::CueUseType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::CueUseType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CueUseType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CueUseType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_CueUseType_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto.base,}};

static void InitDefaultsscc_info_CueVisualPerceptionType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_CueVisualPerceptionType_default_instance_;
    new (ptr) ::ern411::ern::CueVisualPerceptionType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::CueVisualPerceptionType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CueVisualPerceptionType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CueVisualPerceptionType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_VisualPerceptionType_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto.base,}};

static void InitDefaultsscc_info_CueVocalType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_CueVocalType_default_instance_;
    new (ptr) ::ern411::ern::CueVocalType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::CueVocalType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CueVocalType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CueVocalType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_VocalType_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto.base,}};

static void InitDefaultsscc_info_CurrentTerritoryCode_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_CurrentTerritoryCode_default_instance_;
    new (ptr) ::ern411::ern::CurrentTerritoryCode();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::CurrentTerritoryCode::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CurrentTerritoryCode_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_CurrentTerritoryCode_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_TerritoryCodeType_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto.base,
      &scc_info_CurrentTerritoryCode_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto.base,}};

static void InitDefaultsscc_info_DSP_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_DSP_default_instance_;
    new (ptr) ::ern411::ern::DSP();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::DSP::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_DSP_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_DSP_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_DetailedPartyId_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_PartyName_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_Name_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,}};

static void InitDefaultsscc_info_Deal_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_Deal_default_instance_;
    new (ptr) ::ern411::ern::Deal();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::Deal::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Deal_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_Deal_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_DealTechnicalResourceDetailsReferenceList_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_DealTerms_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_DistributionChannelPage_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,}};

static void InitDefaultsscc_info_DealList_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_DealList_default_instance_;
    new (ptr) ::ern411::ern::DealList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::DealList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DealList_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DealList_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_ReleaseDeal_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,}};

static void InitDefaultsscc_info_DealResourceReferenceList_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_DealResourceReferenceList_default_instance_;
    new (ptr) ::ern411::ern::DealResourceReferenceList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::DealResourceReferenceList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DealResourceReferenceList_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DealResourceReferenceList_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {}};

static void InitDefaultsscc_info_DealTechnicalResourceDetailsReferenceList_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_DealTechnicalResourceDetailsReferenceList_default_instance_;
    new (ptr) ::ern411::ern::DealTechnicalResourceDetailsReferenceList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::DealTechnicalResourceDetailsReferenceList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DealTechnicalResourceDetailsReferenceList_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DealTechnicalResourceDetailsReferenceList_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {}};

static void InitDefaultsscc_info_DealTerms_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_DealTerms_default_instance_;
    new (ptr) ::ern411::ern::DealTerms();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::DealTerms::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<13> scc_info_DealTerms_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 13, 0, InitDefaultsscc_info_DealTerms_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_CarrierType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_ddex_IsoDate_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_CommercialModelType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_DSP_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_CurrentTerritoryCode_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_DealResourceReferenceList_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_PhysicalReturns_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_PriceInformationWithType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_PromotionalCode_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_RightsClaimPolicy_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_DealTermsTechnicalInstantiation_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_DiscoverableUseType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_PeriodWithoutFlags_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,}};

static void InitDefaultsscc_info_DealTermsTechnicalInstantiation_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_DealTermsTechnicalInstantiation_default_instance_;
    new (ptr) ::ern411::ern::DealTermsTechnicalInstantiation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::DealTermsTechnicalInstantiation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_DealTermsTechnicalInstantiation_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_DealTermsTechnicalInstantiation_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_BitRate_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_CodingType_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto.base,
      &scc_info_VideoDefinitionType_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto.base,}};

static void InitDefaultsscc_info_Deity_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_Deity_default_instance_;
    new (ptr) ::ern411::ern::Deity();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::Deity::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Deity_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Deity_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_CurrentTerritoryCode_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto.base,}};

static void InitDefaultsscc_info_DelegatedUsageRights_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_DelegatedUsageRights_default_instance_;
    new (ptr) ::ern411::ern::DelegatedUsageRights();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::DelegatedUsageRights::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_DelegatedUsageRights_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_DelegatedUsageRights_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_Period_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_CurrentTerritoryCode_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_UseType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,}};

static void InitDefaultsscc_info_DescriptionWithTerritory_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_DescriptionWithTerritory_default_instance_;
    new (ptr) ::ern411::ern::DescriptionWithTerritory();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::DescriptionWithTerritory::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DescriptionWithTerritory_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DescriptionWithTerritory_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_CurrentTerritoryCode_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto.base,}};

static void InitDefaultsscc_info_DetailedCue_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_DetailedCue_default_instance_;
    new (ptr) ::ern411::ern::DetailedCue();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::DetailedCue::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<13> scc_info_DetailedCue_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 13, 0, InitDefaultsscc_info_DetailedCue_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_AdditionalTitle_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_CLine_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_Contributor_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_CueOrigin_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_CueThemeType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_CueUseType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_CueVisualPerceptionType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_CueVocalType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_DisplayTitle_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_DisplayTitleText_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_PLine_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_ResourceId_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_MusicalWorkId_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,}};

static void InitDefaultsscc_info_DetailedCueSheet_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_DetailedCueSheet_default_instance_;
    new (ptr) ::ern411::ern::DetailedCueSheet();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::DetailedCueSheet::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_DetailedCueSheet_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_DetailedCueSheet_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_DetailedCue_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_ProprietaryId_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_CueSheetType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,}};

static void InitDefaultsscc_info_DetailedCueSheetList_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_DetailedCueSheetList_default_instance_;
    new (ptr) ::ern411::ern::DetailedCueSheetList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::DetailedCueSheetList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DetailedCueSheetList_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DetailedCueSheetList_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_DetailedCueSheet_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,}};

static void InitDefaultsscc_info_DetailedHashSum_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_DetailedHashSum_default_instance_;
    new (ptr) ::ern411::ern::DetailedHashSum();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::DetailedHashSum::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DetailedHashSum_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_DetailedHashSum_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_HashSumAlgorithmType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_BinaryDataType_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto.base,}};

static void InitDefaultsscc_info_DetailedPartyId_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_DetailedPartyId_default_instance_;
    new (ptr) ::ern411::ern::DetailedPartyId();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::DetailedPartyId::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DetailedPartyId_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DetailedPartyId_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_ProprietaryId_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,}};

static void InitDefaultsscc_info_DetailedResourceContributor_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_DetailedResourceContributor_default_instance_;
    new (ptr) ::ern411::ern::DetailedResourceContributor();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::DetailedResourceContributor::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_DetailedResourceContributor_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_DetailedResourceContributor_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_DisplayCredits_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_InstrumentType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_DetailedPartyId_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_PartyName_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_ContributorRole_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,}};

static void InitDefaultsscc_info_DiscoverableUseType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_DiscoverableUseType_default_instance_;
    new (ptr) ::ern411::ern::DiscoverableUseType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::DiscoverableUseType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DiscoverableUseType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DiscoverableUseType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_UseType_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto.base,}};

static void InitDefaultsscc_info_DisplayArtist_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_DisplayArtist_default_instance_;
    new (ptr) ::ern411::ern::DisplayArtist();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::DisplayArtist::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_DisplayArtist_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_DisplayArtist_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_ContributorRole_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_DisplayArtistRole_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_TitleDisplayInformation_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,}};

static void InitDefaultsscc_info_DisplayArtistNameWithDefault_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_DisplayArtistNameWithDefault_default_instance_;
    new (ptr) ::ern411::ern::DisplayArtistNameWithDefault();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::DisplayArtistNameWithDefault::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DisplayArtistNameWithDefault_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DisplayArtistNameWithDefault_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_CurrentTerritoryCode_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto.base,}};

static void InitDefaultsscc_info_DisplayArtistRole_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_DisplayArtistRole_default_instance_;
    new (ptr) ::ern411::ern::DisplayArtistRole();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::DisplayArtistRole::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DisplayArtistRole_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DisplayArtistRole_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_DisplayArtistRole_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto.base,}};

static void InitDefaultsscc_info_DisplayCredits_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_DisplayCredits_default_instance_;
    new (ptr) ::ern411::ern::DisplayCredits();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::DisplayCredits::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DisplayCredits_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DisplayCredits_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_CurrentTerritoryCode_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto.base,}};

static void InitDefaultsscc_info_DisplaySubTitle_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_DisplaySubTitle_default_instance_;
    new (ptr) ::ern411::ern::DisplaySubTitle();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::DisplaySubTitle::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DisplaySubTitle_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DisplaySubTitle_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_SubTitleType_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto.base,}};

static void InitDefaultsscc_info_DisplayTitle_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_DisplayTitle_default_instance_;
    new (ptr) ::ern411::ern::DisplayTitle();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::DisplayTitle::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DisplayTitle_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_DisplayTitle_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_CurrentTerritoryCode_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto.base,
      &scc_info_DisplaySubTitle_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,}};

static void InitDefaultsscc_info_DisplayTitleText_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_DisplayTitleText_default_instance_;
    new (ptr) ::ern411::ern::DisplayTitleText();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::DisplayTitleText::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DisplayTitleText_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DisplayTitleText_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_CurrentTerritoryCode_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto.base,}};

static void InitDefaultsscc_info_DistributionChannelPage_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_DistributionChannelPage_default_instance_;
    new (ptr) ::ern411::ern::DistributionChannelPage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::DistributionChannelPage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DistributionChannelPage_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_DistributionChannelPage_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_Name_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_DetailedPartyId_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,}};

static void InitDefaultsscc_info_EventDate_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_EventDate_default_instance_;
    new (ptr) ::ern411::ern::EventDate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::EventDate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_EventDate_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_EventDate_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_AllTerritoryCode_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto.base,
      &scc_info_ddex_IsoDate_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,}};

static void InitDefaultsscc_info_EventDateTime_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_EventDateTime_default_instance_;
    new (ptr) ::ern411::ern::EventDateTime();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::EventDateTime::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EventDateTime_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_EventDateTime_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_AllTerritoryCode_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto.base,}};

static void InitDefaultsscc_info_EventDateTimeWithoutFlags_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_EventDateTimeWithoutFlags_default_instance_;
    new (ptr) ::ern411::ern::EventDateTimeWithoutFlags();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::EventDateTimeWithoutFlags::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EventDateTimeWithoutFlags_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_EventDateTimeWithoutFlags_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_AllTerritoryCode_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto.base,}};

static void InitDefaultsscc_info_EventDateWithDefault_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_EventDateWithDefault_default_instance_;
    new (ptr) ::ern411::ern::EventDateWithDefault();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::EventDateWithDefault::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_EventDateWithDefault_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_EventDateWithDefault_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_AllTerritoryCode_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto.base,
      &scc_info_ddex_IsoDate_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,}};

static void InitDefaultsscc_info_EventDateWithoutFlags_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_EventDateWithoutFlags_default_instance_;
    new (ptr) ::ern411::ern::EventDateWithoutFlags();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::EventDateWithoutFlags::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_EventDateWithoutFlags_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_EventDateWithoutFlags_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_AllTerritoryCode_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto.base,
      &scc_info_ddex_IsoDate_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,}};

static void InitDefaultsscc_info_Extent_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_Extent_default_instance_;
    new (ptr) ::ern411::ern::Extent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::Extent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Extent_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Extent_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_UnitOfExtent_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto.base,}};

static void InitDefaultsscc_info_ExternalResourceLink_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_ExternalResourceLink_default_instance_;
    new (ptr) ::ern411::ern::ExternalResourceLink();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::ExternalResourceLink::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ExternalResourceLink_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ExternalResourceLink_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_ExternallyLinkedResourceType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_PeriodWithoutFlags_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,}};

static void InitDefaultsscc_info_ExternallyLinkedResourceType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_ExternallyLinkedResourceType_default_instance_;
    new (ptr) ::ern411::ern::ExternallyLinkedResourceType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::ExternallyLinkedResourceType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ExternallyLinkedResourceType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ExternallyLinkedResourceType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_ExternallyLinkedResourceType_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto.base,}};

static void InitDefaultsscc_info_File_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_File_default_instance_;
    new (ptr) ::ern411::ern::File();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::File::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_File_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_File_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_DetailedHashSum_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,}};

static void InitDefaultsscc_info_Fingerprint_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_Fingerprint_default_instance_;
    new (ptr) ::ern411::ern::Fingerprint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::Fingerprint::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Fingerprint_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_Fingerprint_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_FingerprintAlgorithmType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_BinaryDataType_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto.base,
      &scc_info_File_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,}};

static void InitDefaultsscc_info_FingerprintAlgorithmType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_FingerprintAlgorithmType_default_instance_;
    new (ptr) ::ern411::ern::FingerprintAlgorithmType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::FingerprintAlgorithmType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FingerprintAlgorithmType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FingerprintAlgorithmType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_FingerprintAlgorithmType_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto.base,}};

static void InitDefaultsscc_info_FirstPublicationDate_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_FirstPublicationDate_default_instance_;
    new (ptr) ::ern411::ern::FirstPublicationDate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::FirstPublicationDate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_FirstPublicationDate_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_FirstPublicationDate_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_CurrentTerritoryCode_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto.base,
      &scc_info_ddex_IsoDate_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,}};

static void InitDefaultsscc_info_FrameRate_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_FrameRate_default_instance_;
    new (ptr) ::ern411::ern::FrameRate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::FrameRate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FrameRate_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FrameRate_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_UnitOfFrameRate_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto.base,}};

static void InitDefaultsscc_info_FulfillmentDateWithTerritory_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_FulfillmentDateWithTerritory_default_instance_;
    new (ptr) ::ern411::ern::FulfillmentDateWithTerritory();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::FulfillmentDateWithTerritory::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_FulfillmentDateWithTerritory_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_FulfillmentDateWithTerritory_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_CurrentTerritoryCode_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto.base,
      &scc_info_ddex_IsoDate_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,}};

static void InitDefaultsscc_info_GenreWithTerritory_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_GenreWithTerritory_default_instance_;
    new (ptr) ::ern411::ern::GenreWithTerritory();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::GenreWithTerritory::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GenreWithTerritory_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GenreWithTerritory_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_CurrentTerritoryCode_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto.base,}};

static void InitDefaultsscc_info_HashSumAlgorithmType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_HashSumAlgorithmType_default_instance_;
    new (ptr) ::ern411::ern::HashSumAlgorithmType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::HashSumAlgorithmType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HashSumAlgorithmType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_HashSumAlgorithmType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_HashSumAlgorithmType_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto.base,}};

static void InitDefaultsscc_info_Image_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_Image_default_instance_;
    new (ptr) ::ern411::ern::Image();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::Image::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<20> scc_info_Image_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 20, 0, InitDefaultsscc_info_Image_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_AdditionalTitle_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_CLineWithDefault_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_Contributor_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_CourtesyLineWithDefault_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_EventDateWithoutFlags_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_DescriptionWithTerritory_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_DisplayArtist_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_DisplayArtistNameWithDefault_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_DisplayTitle_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_DisplayTitleText_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_FulfillmentDateWithTerritory_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_ParentalWarningTypeWithTerritory_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_RelatedRelease_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_RelatedResource_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_ResourceProprietaryId_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_ResourceRightsController_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_TechnicalImageDetails_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_ImageType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_VersionType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_WorkRightsController_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,}};

static void InitDefaultsscc_info_ImageCodecType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_ImageCodecType_default_instance_;
    new (ptr) ::ern411::ern::ImageCodecType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::ImageCodecType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ImageCodecType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ImageCodecType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_ImageCodecType_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto.base,}};

static void InitDefaultsscc_info_ImageType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_ImageType_default_instance_;
    new (ptr) ::ern411::ern::ImageType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::ImageType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ImageType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ImageType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_ImageType_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto.base,}};

static void InitDefaultsscc_info_InstrumentType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_InstrumentType_default_instance_;
    new (ptr) ::ern411::ern::InstrumentType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::InstrumentType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InstrumentType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_InstrumentType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_InstrumentType_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto.base,}};

static void InitDefaultsscc_info_IsCredited_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_IsCredited_default_instance_;
    new (ptr) ::ern411::ern::IsCredited();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::IsCredited::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IsCredited_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IsCredited_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {}};

static void InitDefaultsscc_info_KeywordsWithTerritory_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_KeywordsWithTerritory_default_instance_;
    new (ptr) ::ern411::ern::KeywordsWithTerritory();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::KeywordsWithTerritory::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_KeywordsWithTerritory_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_KeywordsWithTerritory_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_CurrentTerritoryCode_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto.base,}};

static void InitDefaultsscc_info_LinkedReleaseResourceReference_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_LinkedReleaseResourceReference_default_instance_;
    new (ptr) ::ern411::ern::LinkedReleaseResourceReference();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::LinkedReleaseResourceReference::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LinkedReleaseResourceReference_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_LinkedReleaseResourceReference_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_LinkDescription_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto.base,
      &scc_info_ddex_LocalResourceAnchorReference_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,}};

static void InitDefaultsscc_info_MarketingComment_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_MarketingComment_default_instance_;
    new (ptr) ::ern411::ern::MarketingComment();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::MarketingComment::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MarketingComment_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MarketingComment_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_CurrentTerritoryCode_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto.base,}};

static void InitDefaultsscc_info_MessageAuditTrail_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_MessageAuditTrail_default_instance_;
    new (ptr) ::ern411::ern::MessageAuditTrail();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::MessageAuditTrail::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MessageAuditTrail_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MessageAuditTrail_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_MessageAuditTrailEvent_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,}};

static void InitDefaultsscc_info_MessageAuditTrailEvent_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_MessageAuditTrailEvent_default_instance_;
    new (ptr) ::ern411::ern::MessageAuditTrailEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::MessageAuditTrailEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MessageAuditTrailEvent_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MessageAuditTrailEvent_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_MessagingPartyWithoutCode_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,}};

static void InitDefaultsscc_info_MessageHeader_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_MessageHeader_default_instance_;
    new (ptr) ::ern411::ern::MessageHeader();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::MessageHeader::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_MessageHeader_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_MessageHeader_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_MessageAuditTrail_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_MessageControlType_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto.base,
      &scc_info_MessagingPartyWithoutCode_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,}};

static void InitDefaultsscc_info_MessagingPartyWithoutCode_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_MessagingPartyWithoutCode_default_instance_;
    new (ptr) ::ern411::ern::MessagingPartyWithoutCode();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::MessagingPartyWithoutCode::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MessagingPartyWithoutCode_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MessagingPartyWithoutCode_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_PartyNameWithoutCode_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,}};

static void InitDefaultsscc_info_MusicalWorkId_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_MusicalWorkId_default_instance_;
    new (ptr) ::ern411::ern::MusicalWorkId();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::MusicalWorkId::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MusicalWorkId_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MusicalWorkId_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_ProprietaryId_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,}};

static void InitDefaultsscc_info_Name_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_Name_default_instance_;
    new (ptr) ::ern411::ern::Name();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::Name::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Name_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Name_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {}};

static void InitDefaultsscc_info_NewReleaseMessage_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_NewReleaseMessage_default_instance_;
    new (ptr) ::ern411::ern::NewReleaseMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::NewReleaseMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<10> scc_info_NewReleaseMessage_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 10, 0, InitDefaultsscc_info_NewReleaseMessage_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_ChapterList_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_DetailedCueSheetList_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_DealList_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_MessageHeader_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_PartyList_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_ReleaseList_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_ReleaseProfileVariantVersionId_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto.base,
      &scc_info_ReleaseProfileVersionId_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto.base,
      &scc_info_ResourceList_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_SupplementalDocumentList_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,}};

static void InitDefaultsscc_info_OperatingSystemType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_OperatingSystemType_default_instance_;
    new (ptr) ::ern411::ern::OperatingSystemType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::OperatingSystemType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OperatingSystemType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_OperatingSystemType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_OperatingSystemType_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto.base,}};

static void InitDefaultsscc_info_PLine_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_PLine_default_instance_;
    new (ptr) ::ern411::ern::PLine();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::PLine::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PLine_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PLine_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_PLineType_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto.base,}};

static void InitDefaultsscc_info_PLineWithDefault_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_PLineWithDefault_default_instance_;
    new (ptr) ::ern411::ern::PLineWithDefault();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::PLineWithDefault::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PLineWithDefault_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PLineWithDefault_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_CurrentTerritoryCode_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto.base,}};

static void InitDefaultsscc_info_ParentalWarningTypeWithTerritory_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_ParentalWarningTypeWithTerritory_default_instance_;
    new (ptr) ::ern411::ern::ParentalWarningTypeWithTerritory();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::ParentalWarningTypeWithTerritory::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ParentalWarningTypeWithTerritory_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ParentalWarningTypeWithTerritory_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_CurrentTerritoryCode_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto.base,
      &scc_info_ParentalWarningType_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto.base,}};

static void InitDefaultsscc_info_Party_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_Party_default_instance_;
    new (ptr) ::ern411::ern::Party();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::Party::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Party_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_Party_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_Affiliation_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_DetailedPartyId_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_PartyNameWithTerritory_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_RelatedParty_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,}};

static void InitDefaultsscc_info_PartyList_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_PartyList_default_instance_;
    new (ptr) ::ern411::ern::PartyList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::PartyList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PartyList_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PartyList_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_Party_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,}};

static void InitDefaultsscc_info_PartyName_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_PartyName_default_instance_;
    new (ptr) ::ern411::ern::PartyName();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::PartyName::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PartyName_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PartyName_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_Name_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,}};

static void InitDefaultsscc_info_PartyNameWithTerritory_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_PartyNameWithTerritory_default_instance_;
    new (ptr) ::ern411::ern::PartyNameWithTerritory();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::PartyNameWithTerritory::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PartyNameWithTerritory_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PartyNameWithTerritory_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_Name_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_CurrentTerritoryCode_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto.base,}};

static void InitDefaultsscc_info_PartyNameWithoutCode_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_PartyNameWithoutCode_default_instance_;
    new (ptr) ::ern411::ern::PartyNameWithoutCode();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::PartyNameWithoutCode::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PartyNameWithoutCode_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PartyNameWithoutCode_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {}};

static void InitDefaultsscc_info_PartyRelationshipType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_PartyRelationshipType_default_instance_;
    new (ptr) ::ern411::ern::PartyRelationshipType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::PartyRelationshipType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PartyRelationshipType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PartyRelationshipType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_PartyRelationshipType_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto.base,}};

static void InitDefaultsscc_info_Percentage_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_Percentage_default_instance_;
    new (ptr) ::ern411::ern::Percentage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::Percentage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Percentage_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Percentage_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {}};

static void InitDefaultsscc_info_Period_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_Period_default_instance_;
    new (ptr) ::ern411::ern::Period();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::Period::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Period_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Period_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_EventDate_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_EventDateTime_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,}};

static void InitDefaultsscc_info_PeriodWithoutFlags_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_PeriodWithoutFlags_default_instance_;
    new (ptr) ::ern411::ern::PeriodWithoutFlags();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::PeriodWithoutFlags::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PeriodWithoutFlags_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PeriodWithoutFlags_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_EventDateWithoutFlags_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_EventDateTimeWithoutFlags_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,}};

static void InitDefaultsscc_info_PhysicalReturns_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_PhysicalReturns_default_instance_;
    new (ptr) ::ern411::ern::PhysicalReturns();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::PhysicalReturns::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PhysicalReturns_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PhysicalReturns_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_ddex_IsoDate_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,}};

static void InitDefaultsscc_info_Prefix_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_Prefix_default_instance_;
    new (ptr) ::ern411::ern::Prefix();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::Prefix::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Prefix_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Prefix_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {}};

static void InitDefaultsscc_info_PreviewDetails_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_PreviewDetails_default_instance_;
    new (ptr) ::ern411::ern::PreviewDetails();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::PreviewDetails::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PreviewDetails_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PreviewDetails_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_ExpressionType_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto.base,}};

static void InitDefaultsscc_info_Price_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_Price_default_instance_;
    new (ptr) ::ern411::ern::Price();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::Price::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Price_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Price_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_CurrencyCode_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto.base,}};

static void InitDefaultsscc_info_PriceInformationWithType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_PriceInformationWithType_default_instance_;
    new (ptr) ::ern411::ern::PriceInformationWithType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::PriceInformationWithType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_PriceInformationWithType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_PriceInformationWithType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_Price_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_PriceType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_PriceInformationType_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto.base,}};

static void InitDefaultsscc_info_PriceType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_PriceType_default_instance_;
    new (ptr) ::ern411::ern::PriceType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::PriceType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PriceType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PriceType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_PriceType_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto.base,}};

static void InitDefaultsscc_info_PromotionalCode_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_PromotionalCode_default_instance_;
    new (ptr) ::ern411::ern::PromotionalCode();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::PromotionalCode::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PromotionalCode_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PromotionalCode_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {}};

static void InitDefaultsscc_info_ProprietaryId_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_ProprietaryId_default_instance_;
    new (ptr) ::ern411::ern::ProprietaryId();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::ProprietaryId::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProprietaryId_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ProprietaryId_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {}};

static void InitDefaultsscc_info_PurgeReleaseMessage_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_PurgeReleaseMessage_default_instance_;
    new (ptr) ::ern411::ern::PurgeReleaseMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::PurgeReleaseMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PurgeReleaseMessage_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PurgeReleaseMessage_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_MessageHeader_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_PurgedRelease_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,}};

static void InitDefaultsscc_info_PurgedRelease_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_PurgedRelease_default_instance_;
    new (ptr) ::ern411::ern::PurgedRelease();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::PurgedRelease::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_PurgedRelease_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_PurgedRelease_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_DetailedResourceContributor_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_ReleaseId_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_Title_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,}};

static void InitDefaultsscc_info_Purpose_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_Purpose_default_instance_;
    new (ptr) ::ern411::ern::Purpose();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::Purpose::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Purpose_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Purpose_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_Purpose_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto.base,}};

static void InitDefaultsscc_info_Raga_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_Raga_default_instance_;
    new (ptr) ::ern411::ern::Raga();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::Raga::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Raga_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Raga_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_CurrentTerritoryCode_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto.base,}};

static void InitDefaultsscc_info_RatingAgency_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_RatingAgency_default_instance_;
    new (ptr) ::ern411::ern::RatingAgency();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::RatingAgency::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RatingAgency_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RatingAgency_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_RatingAgency_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto.base,}};

static void InitDefaultsscc_info_Reason_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_Reason_default_instance_;
    new (ptr) ::ern411::ern::Reason();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::Reason::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Reason_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Reason_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {}};

static void InitDefaultsscc_info_RelatedParty_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_RelatedParty_default_instance_;
    new (ptr) ::ern411::ern::RelatedParty();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::RelatedParty::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RelatedParty_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RelatedParty_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_PartyRelationshipType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,}};

static void InitDefaultsscc_info_RelatedRelease_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_RelatedRelease_default_instance_;
    new (ptr) ::ern411::ern::RelatedRelease();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::RelatedRelease::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<8> scc_info_RelatedRelease_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 8, 0, InitDefaultsscc_info_RelatedRelease_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_AdditionalTitle_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_DisplayArtistNameWithDefault_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_DisplayTitle_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_DisplayTitleText_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_EventDateWithoutFlags_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_ReleaseId_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_ReleaseLabelReference_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_ReleaseRelationshipType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,}};

static void InitDefaultsscc_info_RelatedResource_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_RelatedResource_default_instance_;
    new (ptr) ::ern411::ern::RelatedResource();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::RelatedResource::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_RelatedResource_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_RelatedResource_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_ReleaseId_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_ResourceRelationshipType_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto.base,
      &scc_info_Timing_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,}};

static void InitDefaultsscc_info_Release_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_Release_default_instance_;
    new (ptr) ::ern411::ern::Release();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::Release::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<25> scc_info_Release_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 25, 0, InitDefaultsscc_info_Release_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_AdditionalTitle_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_AdministratingRecordCompanyWithReference_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_AvRating_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_CLineWithDefault_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_CourtesyLineWithDefault_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_Deity_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_DisplayArtist_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_DisplayArtistNameWithDefault_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_DisplayTitle_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_DisplayTitleText_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_ExternalResourceLink_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_GenreWithTerritory_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_KeywordsWithTerritory_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_MarketingComment_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_EventDateWithDefault_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_PLineWithDefault_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_ParentalWarningTypeWithTerritory_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_Raga_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_RelatedRelease_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_ReleaseId_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_ReleaseLabelReference_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_ReleaseTypeForReleaseNotification_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_ResourceGroup_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_SynopsisWithTerritory_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_Tala_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,}};

static void InitDefaultsscc_info_ReleaseDeal_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_ReleaseDeal_default_instance_;
    new (ptr) ::ern411::ern::ReleaseDeal();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::ReleaseDeal::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReleaseDeal_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ReleaseDeal_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_Deal_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,}};

static void InitDefaultsscc_info_ReleaseId_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_ReleaseId_default_instance_;
    new (ptr) ::ern411::ern::ReleaseId();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::ReleaseId::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ReleaseId_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ReleaseId_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_CatalogNumber_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_ProprietaryId_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,}};

static void InitDefaultsscc_info_ReleaseLabelReference_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_ReleaseLabelReference_default_instance_;
    new (ptr) ::ern411::ern::ReleaseLabelReference();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::ReleaseLabelReference::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ReleaseLabelReference_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_ReleaseLabelReference_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_CurrentTerritoryCode_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto.base,
      &scc_info_LabelType_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto.base,
      &scc_info_ddex_LocalPartyAnchorReference_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,}};

static void InitDefaultsscc_info_ReleaseList_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_ReleaseList_default_instance_;
    new (ptr) ::ern411::ern::ReleaseList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::ReleaseList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ReleaseList_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ReleaseList_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_Release_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_TrackRelease_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,}};

static void InitDefaultsscc_info_ReleaseRelationshipType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_ReleaseRelationshipType_default_instance_;
    new (ptr) ::ern411::ern::ReleaseRelationshipType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::ReleaseRelationshipType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReleaseRelationshipType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ReleaseRelationshipType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_ReleaseRelationshipType_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto.base,}};

static void InitDefaultsscc_info_ReleaseTypeForReleaseNotification_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_ReleaseTypeForReleaseNotification_default_instance_;
    new (ptr) ::ern411::ern::ReleaseTypeForReleaseNotification();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::ReleaseTypeForReleaseNotification::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReleaseTypeForReleaseNotification_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ReleaseTypeForReleaseNotification_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_ReleaseType_ERN4_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto.base,}};

static void InitDefaultsscc_info_ResourceContainedResourceReference_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_ResourceContainedResourceReference_default_instance_;
    new (ptr) ::ern411::ern::ResourceContainedResourceReference();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::ResourceContainedResourceReference::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ResourceContainedResourceReference_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ResourceContainedResourceReference_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_Purpose_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,}};

static void InitDefaultsscc_info_ResourceContainedResourceReferenceList_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_ResourceContainedResourceReferenceList_default_instance_;
    new (ptr) ::ern411::ern::ResourceContainedResourceReferenceList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::ResourceContainedResourceReferenceList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ResourceContainedResourceReferenceList_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ResourceContainedResourceReferenceList_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_ResourceContainedResourceReference_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,}};

static void InitDefaultsscc_info_ResourceGroup_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_ResourceGroup_default_instance_;
    new (ptr) ::ern411::ern::ResourceGroup();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::ResourceGroup::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<9> scc_info_ResourceGroup_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 9, 0, InitDefaultsscc_info_ResourceGroup_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_AdditionalTitle_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_CarrierType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_DisplayArtist_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_DisplayTitle_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_DisplayTitleText_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_LinkedReleaseResourceReference_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_ReleaseId_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_ResourceSubGroup_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_ResourceGroupContentItem_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,}};

static void InitDefaultsscc_info_ResourceGroupContentItem_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_ResourceGroupContentItem_default_instance_;
    new (ptr) ::ern411::ern::ResourceGroupContentItem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::ResourceGroupContentItem::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ResourceGroupContentItem_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ResourceGroupContentItem_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_LinkedReleaseResourceReference_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,}};

static void InitDefaultsscc_info_ResourceId_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_ResourceId_default_instance_;
    new (ptr) ::ern411::ern::ResourceId();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::ResourceId::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ResourceId_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ResourceId_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_CatalogNumber_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_ProprietaryId_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,}};

static void InitDefaultsscc_info_ResourceList_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_ResourceList_default_instance_;
    new (ptr) ::ern411::ern::ResourceList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::ResourceList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_ResourceList_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 6, 0, InitDefaultsscc_info_ResourceList_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_Image_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_SheetMusic_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_Software_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_SoundRecording_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_Text_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_Video_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,}};

static void InitDefaultsscc_info_ResourceProprietaryId_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_ResourceProprietaryId_default_instance_;
    new (ptr) ::ern411::ern::ResourceProprietaryId();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::ResourceProprietaryId::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ResourceProprietaryId_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ResourceProprietaryId_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_ProprietaryId_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,}};

static void InitDefaultsscc_info_ResourceRightsController_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_ResourceRightsController_default_instance_;
    new (ptr) ::ern411::ern::ResourceRightsController();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::ResourceRightsController::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ResourceRightsController_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_ResourceRightsController_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_DelegatedUsageRights_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_Percentage_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_RightsControllerRole_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto.base,}};

static void InitDefaultsscc_info_ResourceSubGroup_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_ResourceSubGroup_default_instance_;
    new (ptr) ::ern411::ern::ResourceSubGroup();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::ResourceSubGroup::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<9> scc_info_ResourceSubGroup_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 9, 0, InitDefaultsscc_info_ResourceSubGroup_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_AdditionalTitle_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_CarrierType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_DisplayArtist_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_DisplayTitle_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_DisplayTitleText_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_LinkedReleaseResourceReference_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_ReleaseId_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_ResourceGroupContentItem_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_ResourceGroupType_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto.base,}};

static void InitDefaultsscc_info_RightsClaimPolicy_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_RightsClaimPolicy_default_instance_;
    new (ptr) ::ern411::ern::RightsClaimPolicy();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::RightsClaimPolicy::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RightsClaimPolicy_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_RightsClaimPolicy_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_ConditionForRightsClaimPolicy_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_RightsClaimPolicyType_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto.base,}};

static void InitDefaultsscc_info_SamplingRate_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_SamplingRate_default_instance_;
    new (ptr) ::ern411::ern::SamplingRate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::SamplingRate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SamplingRate_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SamplingRate_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_UnitOfFrequency_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto.base,}};

static void InitDefaultsscc_info_SheetMusic_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_SheetMusic_default_instance_;
    new (ptr) ::ern411::ern::SheetMusic();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::SheetMusic::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<22> scc_info_SheetMusic_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 22, 0, InitDefaultsscc_info_SheetMusic_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_AdditionalTitle_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_CLineWithDefault_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_Contributor_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_CourtesyLineWithDefault_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_EventDateWithoutFlags_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_DisplayArtist_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_DisplayArtistNameWithDefault_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_DisplayTitle_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_DisplayTitleText_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_FulfillmentDateWithTerritory_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_IsoLanguageCode_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto.base,
      &scc_info_ParentalWarningTypeWithTerritory_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_RelatedRelease_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_RelatedResource_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_ResourceContainedResourceReferenceList_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_SheetMusicId_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_ResourceRightsController_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_TechnicalSheetMusicDetails_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_SheetMusicType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_VersionType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_MusicalWorkId_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_WorkRightsController_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,}};

static void InitDefaultsscc_info_SheetMusicCodecType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_SheetMusicCodecType_default_instance_;
    new (ptr) ::ern411::ern::SheetMusicCodecType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::SheetMusicCodecType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SheetMusicCodecType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SheetMusicCodecType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_SheetMusicCodecType_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto.base,}};

static void InitDefaultsscc_info_SheetMusicId_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_SheetMusicId_default_instance_;
    new (ptr) ::ern411::ern::SheetMusicId();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::SheetMusicId::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SheetMusicId_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SheetMusicId_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_ProprietaryId_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,}};

static void InitDefaultsscc_info_SheetMusicType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_SheetMusicType_default_instance_;
    new (ptr) ::ern411::ern::SheetMusicType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::SheetMusicType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SheetMusicType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SheetMusicType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_SheetMusicType_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto.base,}};

static void InitDefaultsscc_info_SimpleRightsType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_SimpleRightsType_default_instance_;
    new (ptr) ::ern411::ern::SimpleRightsType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::SimpleRightsType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SimpleRightsType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SimpleRightsType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_RightsCoverage_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto.base,}};

static void InitDefaultsscc_info_Software_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_Software_default_instance_;
    new (ptr) ::ern411::ern::Software();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::Software::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<22> scc_info_Software_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 22, 0, InitDefaultsscc_info_Software_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_AdditionalTitle_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_CLineWithDefault_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_Contributor_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_CourtesyLineWithDefault_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_EventDateWithoutFlags_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_DisplayArtist_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_DisplayArtistNameWithDefault_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_DisplayTitle_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_DisplayTitleText_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_FulfillmentDateWithTerritory_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_PLineWithDefault_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_ParentalWarningTypeWithTerritory_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_RelatedRelease_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_RelatedResource_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_ResourceContainedResourceReferenceList_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_ResourceProprietaryId_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_ResourceRightsController_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_TechnicalSoftwareDetails_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_SoftwareType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_VersionType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_MusicalWorkId_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_WorkRightsController_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,}};

static void InitDefaultsscc_info_SoftwareType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_SoftwareType_default_instance_;
    new (ptr) ::ern411::ern::SoftwareType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::SoftwareType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SoftwareType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SoftwareType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_SoftwareType_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto.base,}};

static void InitDefaultsscc_info_SoundRecording_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_SoundRecording_default_instance_;
    new (ptr) ::ern411::ern::SoundRecording();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::SoundRecording::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<28> scc_info_SoundRecording_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 28, 0, InitDefaultsscc_info_SoundRecording_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_AdditionalTitle_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_RecordingMode_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto.base,
      &scc_info_Character_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_CompositeMusicalWorkType_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto.base,
      &scc_info_Contributor_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_CourtesyLineWithDefault_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_EventDateWithoutFlags_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_Deity_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_DisplayArtist_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_DisplayArtistNameWithDefault_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_DisplayCredits_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_DisplayTitle_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_DisplayTitleText_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_FirstPublicationDate_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_IsoLanguageCode_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto.base,
      &scc_info_PLineWithDefault_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_ParentalWarningTypeWithTerritory_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_Raga_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_RelatedRelease_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_RelatedResource_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_SoundRecordingId_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_ResourceRightsController_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_Tala_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_TechnicalSoundRecordingDetails_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_SoundRecordingType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_VersionType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_MusicalWorkId_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_WorkRightsController_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,}};

static void InitDefaultsscc_info_SoundRecordingId_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_SoundRecordingId_default_instance_;
    new (ptr) ::ern411::ern::SoundRecordingId();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::SoundRecordingId::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SoundRecordingId_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SoundRecordingId_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_CatalogNumber_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_ProprietaryId_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,}};

static void InitDefaultsscc_info_SoundRecordingPreviewDetails_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_SoundRecordingPreviewDetails_default_instance_;
    new (ptr) ::ern411::ern::SoundRecordingPreviewDetails();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::SoundRecordingPreviewDetails::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SoundRecordingPreviewDetails_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SoundRecordingPreviewDetails_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_ExpressionType_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto.base,}};

static void InitDefaultsscc_info_SoundRecordingType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_SoundRecordingType_default_instance_;
    new (ptr) ::ern411::ern::SoundRecordingType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::SoundRecordingType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SoundRecordingType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SoundRecordingType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_SoundRecordingType_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto.base,}};

static void InitDefaultsscc_info_SupplementalDocumentList_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_SupplementalDocumentList_default_instance_;
    new (ptr) ::ern411::ern::SupplementalDocumentList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::SupplementalDocumentList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SupplementalDocumentList_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SupplementalDocumentList_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_File_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,}};

static void InitDefaultsscc_info_SynopsisWithTerritory_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_SynopsisWithTerritory_default_instance_;
    new (ptr) ::ern411::ern::SynopsisWithTerritory();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::SynopsisWithTerritory::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SynopsisWithTerritory_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SynopsisWithTerritory_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_CurrentTerritoryCode_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto.base,}};

static void InitDefaultsscc_info_Tala_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_Tala_default_instance_;
    new (ptr) ::ern411::ern::Tala();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::Tala::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Tala_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Tala_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_CurrentTerritoryCode_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto.base,}};

static void InitDefaultsscc_info_TechnicalImageDetails_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_TechnicalImageDetails_default_instance_;
    new (ptr) ::ern411::ern::TechnicalImageDetails();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::TechnicalImageDetails::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_TechnicalImageDetails_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 7, 0, InitDefaultsscc_info_TechnicalImageDetails_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_CurrentTerritoryCode_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto.base,
      &scc_info_AspectRatio_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_File_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_Fingerprint_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_ImageCodecType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_Extent_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_PreviewDetails_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,}};

static void InitDefaultsscc_info_TechnicalSheetMusicDetails_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_TechnicalSheetMusicDetails_default_instance_;
    new (ptr) ::ern411::ern::TechnicalSheetMusicDetails();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::TechnicalSheetMusicDetails::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_TechnicalSheetMusicDetails_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_TechnicalSheetMusicDetails_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_CurrentTerritoryCode_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto.base,
      &scc_info_File_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_Fingerprint_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_PreviewDetails_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_SheetMusicCodecType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,}};

static void InitDefaultsscc_info_TechnicalSoftwareDetails_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_TechnicalSoftwareDetails_default_instance_;
    new (ptr) ::ern411::ern::TechnicalSoftwareDetails();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::TechnicalSoftwareDetails::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_TechnicalSoftwareDetails_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_TechnicalSoftwareDetails_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_CurrentTerritoryCode_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto.base,
      &scc_info_File_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_Fingerprint_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_OperatingSystemType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_PreviewDetails_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,}};

static void InitDefaultsscc_info_TechnicalSoundRecordingDetails_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_TechnicalSoundRecordingDetails_default_instance_;
    new (ptr) ::ern411::ern::TechnicalSoundRecordingDetails();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::TechnicalSoundRecordingDetails::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_TechnicalSoundRecordingDetails_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 7, 0, InitDefaultsscc_info_TechnicalSoundRecordingDetails_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_CurrentTerritoryCode_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto.base,
      &scc_info_AudioCodecType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_BitRate_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_File_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_Fingerprint_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_SamplingRate_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_SoundRecordingPreviewDetails_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,}};

static void InitDefaultsscc_info_TechnicalTextDetails_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_TechnicalTextDetails_default_instance_;
    new (ptr) ::ern411::ern::TechnicalTextDetails();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::TechnicalTextDetails::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_TechnicalTextDetails_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_TechnicalTextDetails_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_CurrentTerritoryCode_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto.base,
      &scc_info_File_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_Fingerprint_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_PreviewDetails_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_TextCodecType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,}};

static void InitDefaultsscc_info_TechnicalVideoDetails_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_TechnicalVideoDetails_default_instance_;
    new (ptr) ::ern411::ern::TechnicalVideoDetails();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::TechnicalVideoDetails::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<14> scc_info_TechnicalVideoDetails_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 14, 0, InitDefaultsscc_info_TechnicalVideoDetails_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_CurrentTerritoryCode_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto.base,
      &scc_info_AspectRatio_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_BitRate_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_AudioCodecType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_SamplingRate_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_ContainerFormat_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_CoreArea_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_File_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_Fingerprint_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_FrameRate_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_Extent_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_SoundRecordingPreviewDetails_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_VideoCodecType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_VideoDefinitionType_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto.base,}};

static void InitDefaultsscc_info_Text_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_Text_default_instance_;
    new (ptr) ::ern411::ern::Text();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::Text::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<21> scc_info_Text_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 21, 0, InitDefaultsscc_info_Text_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_AdditionalTitle_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_CLineWithDefault_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_Contributor_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_CourtesyLineWithDefault_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_EventDateWithoutFlags_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_DisplayArtist_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_DisplayArtistNameWithDefault_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_DisplayTitle_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_DisplayTitleText_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_FulfillmentDateWithTerritory_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_ParentalWarningTypeWithTerritory_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_RelatedRelease_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_RelatedResource_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_ResourceContainedResourceReferenceList_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_TextId_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_ResourceRightsController_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_TechnicalTextDetails_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_TextType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_VersionType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_MusicalWorkId_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_WorkRightsController_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,}};

static void InitDefaultsscc_info_TextCodecType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_TextCodecType_default_instance_;
    new (ptr) ::ern411::ern::TextCodecType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::TextCodecType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TextCodecType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TextCodecType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_TextCodecType_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto.base,}};

static void InitDefaultsscc_info_TextId_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_TextId_default_instance_;
    new (ptr) ::ern411::ern::TextId();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::TextId::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TextId_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TextId_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_ProprietaryId_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,}};

static void InitDefaultsscc_info_TextType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_TextType_default_instance_;
    new (ptr) ::ern411::ern::TextType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::TextType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TextType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TextType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_TextType_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto.base,}};

static void InitDefaultsscc_info_Timing_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_Timing_default_instance_;
    new (ptr) ::ern411::ern::Timing();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::Timing::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timing_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Timing_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {}};

static void InitDefaultsscc_info_Title_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_Title_default_instance_;
    new (ptr) ::ern411::ern::Title();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::Title::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Title_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Title_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_TitleType_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto.base,}};

static void InitDefaultsscc_info_TitleDisplayInformation_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_TitleDisplayInformation_default_instance_;
    new (ptr) ::ern411::ern::TitleDisplayInformation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::TitleDisplayInformation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TitleDisplayInformation_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TitleDisplayInformation_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_Prefix_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,}};

static void InitDefaultsscc_info_TrackRelease_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_TrackRelease_default_instance_;
    new (ptr) ::ern411::ern::TrackRelease();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::TrackRelease::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<10> scc_info_TrackRelease_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 10, 0, InitDefaultsscc_info_TrackRelease_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_AdditionalTitle_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_DisplayTitle_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_DisplayTitleText_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_GenreWithTerritory_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_KeywordsWithTerritory_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_LinkedReleaseResourceReference_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_MarketingComment_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_ReleaseId_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_ReleaseLabelReference_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_SynopsisWithTerritory_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,}};

static void InitDefaultsscc_info_UseType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_UseType_default_instance_;
    new (ptr) ::ern411::ern::UseType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::UseType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UseType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UseType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_UseType_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto.base,}};

static void InitDefaultsscc_info_ValidityPeriod_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_ValidityPeriod_default_instance_;
    new (ptr) ::ern411::ern::ValidityPeriod();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::ValidityPeriod::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ValidityPeriod_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ValidityPeriod_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_EventDate_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,}};

static void InitDefaultsscc_info_VersionType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_VersionType_default_instance_;
    new (ptr) ::ern411::ern::VersionType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::VersionType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VersionType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_VersionType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_VersionType_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto.base,}};

static void InitDefaultsscc_info_Video_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_Video_default_instance_;
    new (ptr) ::ern411::ern::Video();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::Video::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<28> scc_info_Video_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 28, 0, InitDefaultsscc_info_Video_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_AdditionalTitle_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_AvRating_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_CLineWithDefault_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_Character_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_CompositeMusicalWorkType_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto.base,
      &scc_info_Contributor_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_CourtesyLineWithDefault_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_EventDateWithoutFlags_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_DisplayArtist_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_DisplayArtistNameWithDefault_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_DisplayCredits_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_DisplayTitle_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_DisplayTitleText_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_FulfillmentDateWithTerritory_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_IsoLanguageCode_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto.base,
      &scc_info_PLineWithDefault_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_ParentalWarningTypeWithTerritory_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_Reason_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_RelatedRelease_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_RelatedResource_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_ResourceContainedResourceReferenceList_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_VideoId_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_ResourceRightsController_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_TechnicalVideoDetails_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_VideoType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_VersionType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_MusicalWorkId_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_WorkRightsController_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,}};

static void InitDefaultsscc_info_VideoCodecType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_VideoCodecType_default_instance_;
    new (ptr) ::ern411::ern::VideoCodecType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::VideoCodecType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VideoCodecType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_VideoCodecType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_VideoCodecType_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto.base,}};

static void InitDefaultsscc_info_VideoId_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_VideoId_default_instance_;
    new (ptr) ::ern411::ern::VideoId();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::VideoId::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_VideoId_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_VideoId_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_CatalogNumber_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_ProprietaryId_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,}};

static void InitDefaultsscc_info_VideoType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_VideoType_default_instance_;
    new (ptr) ::ern411::ern::VideoType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::VideoType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VideoType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_VideoType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_VideoType_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto.base,}};

static void InitDefaultsscc_info_WorkRightsController_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_WorkRightsController_default_instance_;
    new (ptr) ::ern411::ern::WorkRightsController();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::WorkRightsController::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_WorkRightsController_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_WorkRightsController_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {
      &scc_info_ddex_IsoDate_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
      &scc_info_RightsControllerRole_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto.base,
      &scc_info_RightsControllerType_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto.base,
      &scc_info_AllTerritoryCode_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,}};

static void InitDefaultsscc_info_ddex_IsoDate_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_ddex_IsoDate_default_instance_;
    new (ptr) ::ern411::ern::ddex_IsoDate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::ddex_IsoDate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ddex_IsoDate_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ddex_IsoDate_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {}};

static void InitDefaultsscc_info_ddex_LocalPartyAnchorReference_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_ddex_LocalPartyAnchorReference_default_instance_;
    new (ptr) ::ern411::ern::ddex_LocalPartyAnchorReference();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::ddex_LocalPartyAnchorReference::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ddex_LocalPartyAnchorReference_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ddex_LocalPartyAnchorReference_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {}};

static void InitDefaultsscc_info_ddex_LocalResourceAnchorReference_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ern411::ern::_ddex_LocalResourceAnchorReference_default_instance_;
    new (ptr) ::ern411::ern::ddex_LocalResourceAnchorReference();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ern411::ern::ddex_LocalResourceAnchorReference::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ddex_LocalResourceAnchorReference_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ddex_LocalResourceAnchorReference_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto[173];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::ern411::ern::AdditionalTitle, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::AdditionalTitle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::AdditionalTitle, applicable_territory_code_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::AdditionalTitle, is_default_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::AdditionalTitle, language_and_script_code_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::AdditionalTitle, namespace__),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::AdditionalTitle, sub_title_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::AdditionalTitle, title_text_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::AdditionalTitle, title_type_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::AdditionalTitle, user_defined_value_),
  4,
  6,
  0,
  1,
  ~0u,
  2,
  5,
  3,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::AdministratingRecordCompanyRole, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::AdministratingRecordCompanyRole, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::AdministratingRecordCompanyRole, namespace__),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::AdministratingRecordCompanyRole, user_defined_value_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::AdministratingRecordCompanyRole, ext_value_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::AdministratingRecordCompanyWithReference, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::AdministratingRecordCompanyWithReference, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::AdministratingRecordCompanyWithReference, record_company_party_reference_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::AdministratingRecordCompanyWithReference, role_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Affiliation, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Affiliation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Affiliation, company_name_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Affiliation, excluded_territory_code_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Affiliation, party_affiliate_reference_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Affiliation, percentage_of_rights_assignment_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Affiliation, rights_type_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Affiliation, territory_code_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Affiliation, type_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Affiliation, validity_period_),
  0,
  ~0u,
  1,
  4,
  ~0u,
  ~0u,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::AllTerritoryCode, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::AllTerritoryCode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::AllTerritoryCode, identifier_type_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::AllTerritoryCode, ext_value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::AspectRatio, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::AspectRatio, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::AspectRatio, aspect_ratio_type_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::AspectRatio, ext_value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::AudioCodecType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::AudioCodecType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::AudioCodecType, namespace__),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::AudioCodecType, user_defined_value_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::AudioCodecType, version_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::AudioCodecType, ext_value_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::AvRating, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::AvRating, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::AvRating, agency_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::AvRating, applicable_territory_code_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::AvRating, is_default_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::AvRating, rating_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::AvRating, reason_),
  1,
  2,
  4,
  0,
  3,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::BitRate, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::BitRate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::BitRate, unit_of_measure_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::BitRate, ext_value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::CLine, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::CLine, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::CLine, c_line_company_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::CLine, c_line_text_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::CLine, language_and_script_code_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::CLine, year_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::CLineWithDefault, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::CLineWithDefault, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::CLineWithDefault, applicable_territory_code_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::CLineWithDefault, c_line_company_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::CLineWithDefault, c_line_text_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::CLineWithDefault, is_default_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::CLineWithDefault, language_and_script_code_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::CLineWithDefault, year_),
  3,
  0,
  1,
  4,
  2,
  5,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::CarrierType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::CarrierType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::CarrierType, namespace__),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::CarrierType, user_defined_value_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::CarrierType, ext_value_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::CatalogNumber, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::CatalogNumber, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::CatalogNumber, namespace__),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::CatalogNumber, ext_value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Chapter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Chapter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Chapter, additional_title_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Chapter, chapter_id_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Chapter, chapter_reference_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Chapter, character_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Chapter, contributor_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Chapter, display_title_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Chapter, display_title_text_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Chapter, duration_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Chapter, end_time_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Chapter, language_and_script_code_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Chapter, representative_image_reference_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Chapter, sequence_number_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Chapter, start_time_),
  ~0u,
  ~0u,
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  1,
  2,
  3,
  4,
  6,
  5,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ChapterList, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ChapterList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ChapterList, chapter_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ChapterList, language_and_script_code_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Character, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Character, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Character, character_party_reference_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Character, performer_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Character, sequence_number_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::CommercialModelType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::CommercialModelType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::CommercialModelType, namespace__),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::CommercialModelType, user_defined_value_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::CommercialModelType, ext_value_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ConditionForRightsClaimPolicy, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ConditionForRightsClaimPolicy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ConditionForRightsClaimPolicy, reference_creation_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ConditionForRightsClaimPolicy, relational_relator_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ConditionForRightsClaimPolicy, unit_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ConditionForRightsClaimPolicy, value_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ContainerFormat, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ContainerFormat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ContainerFormat, namespace__),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ContainerFormat, user_defined_value_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ContainerFormat, ext_value_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Contributor, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Contributor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Contributor, contributor_party_reference_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Contributor, display_credits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Contributor, has_made_contracted_contribution_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Contributor, has_made_featured_contribution_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Contributor, instrument_type_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Contributor, is_credited_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Contributor, role_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Contributor, sequence_number_),
  0,
  ~0u,
  2,
  3,
  ~0u,
  1,
  ~0u,
  4,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ContributorRole, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ContributorRole, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ContributorRole, namespace__),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ContributorRole, user_defined_value_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ContributorRole, ext_value_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::CoreArea, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::CoreArea, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::CoreArea, bottom_right_corner_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::CoreArea, top_left_corner_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::CourtesyLineWithDefault, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::CourtesyLineWithDefault, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::CourtesyLineWithDefault, applicable_territory_code_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::CourtesyLineWithDefault, is_default_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::CourtesyLineWithDefault, language_and_script_code_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::CourtesyLineWithDefault, ext_value_),
  2,
  3,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::CueOrigin, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::CueOrigin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::CueOrigin, namespace__),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::CueOrigin, user_defined_value_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::CueOrigin, ext_value_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::CueSheetType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::CueSheetType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::CueSheetType, namespace__),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::CueSheetType, user_defined_value_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::CueSheetType, ext_value_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::CueThemeType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::CueThemeType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::CueThemeType, namespace__),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::CueThemeType, user_defined_value_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::CueThemeType, ext_value_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::CueUseType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::CueUseType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::CueUseType, namespace__),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::CueUseType, user_defined_value_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::CueUseType, ext_value_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::CueVisualPerceptionType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::CueVisualPerceptionType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::CueVisualPerceptionType, namespace__),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::CueVisualPerceptionType, user_defined_value_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::CueVisualPerceptionType, ext_value_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::CueVocalType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::CueVocalType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::CueVocalType, namespace__),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::CueVocalType, user_defined_value_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::CueVocalType, ext_value_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::CurrentTerritoryCode, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::CurrentTerritoryCode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::CurrentTerritoryCode, identifier_type_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::CurrentTerritoryCode, ext_value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DSP, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DSP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DSP, party_id_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DSP, party_name_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DSP, trading_name_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DSP, u_r_l_),
  ~0u,
  ~0u,
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Deal, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Deal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Deal, deal_reference_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Deal, deal_technical_resource_details_reference_list_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Deal, deal_terms_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Deal, distribution_channel_page_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Deal, is_communicated_out_of_band_),
  ~0u,
  0,
  1,
  ~0u,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DealList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DealList, release_deal_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DealResourceReferenceList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DealResourceReferenceList, deal_resource_reference_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DealTechnicalResourceDetailsReferenceList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DealTechnicalResourceDetailsReferenceList, deal_technical_resource_details_reference_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DealTerms, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DealTerms, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DealTerms, carrier_type_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DealTerms, clip_preview_start_date_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DealTerms, clip_preview_start_date_time_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DealTerms, commercial_model_type_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DealTerms, cover_art_preview_start_date_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DealTerms, cover_art_preview_start_date_time_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DealTerms, distribution_channel_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DealTerms, excluded_distribution_channel_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DealTerms, excluded_territory_code_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DealTerms, instant_gratification_resource_list_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DealTerms, is_pre_order_deal_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DealTerms, is_promotional_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DealTerms, number_of_products_per_carton_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DealTerms, number_of_usages_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DealTerms, physical_returns_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DealTerms, price_information_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DealTerms, promotional_code_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DealTerms, release_display_start_date_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DealTerms, release_display_start_date_time_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DealTerms, rights_claim_policy_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DealTerms, technical_instantiation_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DealTerms, territory_code_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DealTerms, track_listing_preview_start_date_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DealTerms, track_listing_preview_start_date_time_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DealTerms, use_type_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DealTerms, validity_period_),
  ~0u,
  4,
  0,
  ~0u,
  5,
  1,
  ~0u,
  ~0u,
  ~0u,
  6,
  12,
  13,
  14,
  15,
  7,
  ~0u,
  8,
  9,
  2,
  ~0u,
  10,
  ~0u,
  11,
  3,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DealTermsTechnicalInstantiation, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DealTermsTechnicalInstantiation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DealTermsTechnicalInstantiation, bit_rate_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DealTermsTechnicalInstantiation, coding_type_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DealTermsTechnicalInstantiation, video_definition_type_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Deity, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Deity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Deity, applicable_territory_code_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Deity, is_default_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Deity, ext_value_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DelegatedUsageRights, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DelegatedUsageRights, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DelegatedUsageRights, period_of_rights_delegation_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DelegatedUsageRights, territory_of_rights_delegation_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DelegatedUsageRights, use_type_),
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DescriptionWithTerritory, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DescriptionWithTerritory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DescriptionWithTerritory, applicable_territory_code_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DescriptionWithTerritory, is_default_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DescriptionWithTerritory, language_and_script_code_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DescriptionWithTerritory, ext_value_),
  2,
  3,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DetailedCue, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DetailedCue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DetailedCue, additional_title_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DetailedCue, c_line_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DetailedCue, contributor_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DetailedCue, cue_origin_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DetailedCue, cue_theme_type_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DetailedCue, cue_use_type_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DetailedCue, cue_visual_perception_type_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DetailedCue, cue_vocal_type_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DetailedCue, display_title_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DetailedCue, display_title_text_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DetailedCue, duration_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DetailedCue, end_time_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DetailedCue, has_musical_content_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DetailedCue, is_dance_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DetailedCue, p_line_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DetailedCue, resource_id_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DetailedCue, start_time_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DetailedCue, work_id_),
  ~0u,
  ~0u,
  ~0u,
  3,
  4,
  5,
  6,
  7,
  ~0u,
  ~0u,
  0,
  1,
  10,
  11,
  ~0u,
  8,
  2,
  9,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DetailedCueSheet, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DetailedCueSheet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DetailedCueSheet, cue_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DetailedCueSheet, cue_sheet_id_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DetailedCueSheet, cue_sheet_reference_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DetailedCueSheet, cue_sheet_type_),
  ~0u,
  ~0u,
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DetailedCueSheetList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DetailedCueSheetList, cue_sheet_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DetailedHashSum, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DetailedHashSum, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DetailedHashSum, algorithm_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DetailedHashSum, data_type_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DetailedHashSum, hash_sum_value_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DetailedHashSum, parameter_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DetailedHashSum, version_),
  3,
  4,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DetailedPartyId, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DetailedPartyId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DetailedPartyId, cisac_society_id_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DetailedPartyId, d_p_i_d_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DetailedPartyId, i_p_n_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DetailedPartyId, i_s_n_i_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DetailedPartyId, ipi_name_number_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DetailedPartyId, proprietary_id_),
  0,
  1,
  2,
  3,
  4,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DetailedResourceContributor, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DetailedResourceContributor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DetailedResourceContributor, display_credits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DetailedResourceContributor, has_made_contracted_contribution_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DetailedResourceContributor, has_made_featured_contribution_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DetailedResourceContributor, instrument_type_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DetailedResourceContributor, party_id_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DetailedResourceContributor, party_name_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DetailedResourceContributor, role_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DetailedResourceContributor, sequence_number_),
  ~0u,
  0,
  1,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  2,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DiscoverableUseType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DiscoverableUseType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DiscoverableUseType, is_discoverable_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DiscoverableUseType, namespace__),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DiscoverableUseType, user_defined_value_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DiscoverableUseType, ext_value_),
  3,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DisplayArtist, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DisplayArtist, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DisplayArtist, artist_party_reference_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DisplayArtist, artistic_role_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DisplayArtist, display_artist_role_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DisplayArtist, sequence_number_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DisplayArtist, title_display_information_),
  0,
  ~0u,
  1,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DisplayArtistNameWithDefault, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DisplayArtistNameWithDefault, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DisplayArtistNameWithDefault, applicable_territory_code_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DisplayArtistNameWithDefault, is_default_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DisplayArtistNameWithDefault, language_and_script_code_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DisplayArtistNameWithDefault, ext_value_),
  2,
  3,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DisplayArtistRole, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DisplayArtistRole, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DisplayArtistRole, namespace__),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DisplayArtistRole, user_defined_value_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DisplayArtistRole, ext_value_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DisplayCredits, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DisplayCredits, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DisplayCredits, applicable_territory_code_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DisplayCredits, display_credit_party_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DisplayCredits, display_credit_text_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DisplayCredits, is_default_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DisplayCredits, language_and_script_code_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DisplayCredits, name_used_in_display_credit_),
  4,
  0,
  1,
  5,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DisplaySubTitle, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DisplaySubTitle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DisplaySubTitle, is_displayed_in_title_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DisplaySubTitle, sequence_number_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DisplaySubTitle, sub_title_type_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DisplaySubTitle, ext_value_),
  2,
  3,
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DisplayTitle, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DisplayTitle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DisplayTitle, applicable_territory_code_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DisplayTitle, is_default_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DisplayTitle, language_and_script_code_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DisplayTitle, sub_title_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DisplayTitle, title_text_),
  2,
  3,
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DisplayTitleText, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DisplayTitleText, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DisplayTitleText, applicable_territory_code_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DisplayTitleText, is_default_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DisplayTitleText, language_and_script_code_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DisplayTitleText, ext_value_),
  2,
  3,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DistributionChannelPage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DistributionChannelPage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DistributionChannelPage, page_name_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DistributionChannelPage, party_id_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DistributionChannelPage, u_r_l_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::DistributionChannelPage, user_name_),
  2,
  ~0u,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::EventDate, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::EventDate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::EventDate, applicable_territory_code_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::EventDate, is_after_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::EventDate, is_approximate_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::EventDate, is_before_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::EventDate, language_and_script_code_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::EventDate, location_description_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::EventDate, ext_value_),
  2,
  4,
  5,
  6,
  0,
  1,
  3,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::EventDateTime, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::EventDateTime, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::EventDateTime, is_after_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::EventDateTime, is_approximate_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::EventDateTime, is_before_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::EventDateTime, language_and_script_code_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::EventDateTime, location_description_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::EventDateTime, territory_code_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::EventDateTime, ext_value_),
  4,
  5,
  6,
  0,
  1,
  3,
  2,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::EventDateTimeWithoutFlags, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::EventDateTimeWithoutFlags, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::EventDateTimeWithoutFlags, applicable_territory_code_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::EventDateTimeWithoutFlags, is_approximate_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::EventDateTimeWithoutFlags, language_and_script_code_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::EventDateTimeWithoutFlags, location_description_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::EventDateTimeWithoutFlags, ext_value_),
  3,
  4,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::EventDateWithDefault, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::EventDateWithDefault, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::EventDateWithDefault, applicable_territory_code_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::EventDateWithDefault, is_approximate_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::EventDateWithDefault, is_default_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::EventDateWithDefault, ext_value_),
  0,
  2,
  3,
  1,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::EventDateWithoutFlags, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::EventDateWithoutFlags, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::EventDateWithoutFlags, applicable_territory_code_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::EventDateWithoutFlags, is_approximate_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::EventDateWithoutFlags, language_and_script_code_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::EventDateWithoutFlags, location_description_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::EventDateWithoutFlags, ext_value_),
  2,
  4,
  0,
  1,
  3,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Extent, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Extent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Extent, unit_of_measure_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Extent, ext_value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ExternalResourceLink, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ExternalResourceLink, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ExternalResourceLink, external_link_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ExternalResourceLink, externally_linked_resource_type_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ExternalResourceLink, file_format_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ExternalResourceLink, u_r_l_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ExternalResourceLink, validity_period_),
  0,
  ~0u,
  1,
  ~0u,
  2,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ExternallyLinkedResourceType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ExternallyLinkedResourceType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ExternallyLinkedResourceType, namespace__),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ExternallyLinkedResourceType, user_defined_value_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ExternallyLinkedResourceType, ext_value_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::File, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::File, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::File, file_size_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::File, hash_sum_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::File, u_r_i_),
  2,
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Fingerprint, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Fingerprint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Fingerprint, algorithm_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Fingerprint, data_type_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Fingerprint, file_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Fingerprint, fingerprint_value_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Fingerprint, parameter_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Fingerprint, version_),
  3,
  4,
  5,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::FingerprintAlgorithmType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::FingerprintAlgorithmType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::FingerprintAlgorithmType, namespace__),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::FingerprintAlgorithmType, user_defined_value_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::FingerprintAlgorithmType, ext_value_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::FirstPublicationDate, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::FirstPublicationDate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::FirstPublicationDate, applicable_territory_code_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::FirstPublicationDate, is_default_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::FirstPublicationDate, ext_value_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::FrameRate, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::FrameRate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::FrameRate, unit_of_measure_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::FrameRate, ext_value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::FulfillmentDateWithTerritory, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::FulfillmentDateWithTerritory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::FulfillmentDateWithTerritory, applicable_territory_code_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::FulfillmentDateWithTerritory, fulfillment_date_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::FulfillmentDateWithTerritory, is_default_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::FulfillmentDateWithTerritory, resource_release_reference_),
  0,
  1,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::GenreWithTerritory, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::GenreWithTerritory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::GenreWithTerritory, applicable_territory_code_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::GenreWithTerritory, genre_text_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::GenreWithTerritory, is_default_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::GenreWithTerritory, language_and_script_code_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::GenreWithTerritory, sub_genre_),
  3,
  0,
  4,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::HashSumAlgorithmType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::HashSumAlgorithmType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::HashSumAlgorithmType, namespace__),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::HashSumAlgorithmType, user_defined_value_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::HashSumAlgorithmType, ext_value_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Image, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Image, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Image, additional_title_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Image, c_line_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Image, contains_hidden_content_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Image, contributor_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Image, courtesy_line_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Image, creation_date_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Image, description_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Image, display_artist_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Image, display_artist_name_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Image, display_title_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Image, display_title_text_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Image, first_publication_date_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Image, is_supplemental_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Image, language_and_script_code_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Image, parental_warning_type_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Image, related_release_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Image, related_resource_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Image, resource_id_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Image, resource_reference_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Image, resource_rights_controller_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Image, technical_details_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Image, type_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Image, version_type_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Image, work_rights_controller_),
  ~0u,
  ~0u,
  4,
  ~0u,
  ~0u,
  2,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  5,
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  1,
  ~0u,
  ~0u,
  3,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ImageCodecType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ImageCodecType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ImageCodecType, namespace__),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ImageCodecType, user_defined_value_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ImageCodecType, version_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ImageCodecType, ext_value_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ImageType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ImageType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ImageType, namespace__),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ImageType, user_defined_value_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ImageType, ext_value_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::InstrumentType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::InstrumentType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::InstrumentType, namespace__),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::InstrumentType, user_defined_value_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::InstrumentType, ext_value_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::IsCredited, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::IsCredited, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::IsCredited, may_be_shared_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::IsCredited, ext_value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::KeywordsWithTerritory, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::KeywordsWithTerritory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::KeywordsWithTerritory, applicable_territory_code_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::KeywordsWithTerritory, is_default_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::KeywordsWithTerritory, language_and_script_code_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::KeywordsWithTerritory, ext_value_),
  2,
  3,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::LinkedReleaseResourceReference, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::LinkedReleaseResourceReference, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::LinkedReleaseResourceReference, language_and_script_code_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::LinkedReleaseResourceReference, link_description_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::LinkedReleaseResourceReference, namespace__),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::LinkedReleaseResourceReference, user_defined_value_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::LinkedReleaseResourceReference, ext_value_),
  0,
  3,
  1,
  2,
  4,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::MarketingComment, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::MarketingComment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::MarketingComment, applicable_territory_code_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::MarketingComment, is_default_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::MarketingComment, language_and_script_code_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::MarketingComment, ext_value_),
  2,
  3,
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::MessageAuditTrail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::MessageAuditTrail, message_audit_trail_event_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::MessageAuditTrailEvent, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::MessageAuditTrailEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::MessageAuditTrailEvent, date_time_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::MessageAuditTrailEvent, messaging_party_descriptor_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::MessageHeader, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::MessageHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::MessageHeader, message_audit_trail_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::MessageHeader, message_control_type_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::MessageHeader, message_created_date_time_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::MessageHeader, message_file_name_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::MessageHeader, message_id_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::MessageHeader, message_recipient_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::MessageHeader, message_sender_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::MessageHeader, message_thread_id_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::MessageHeader, sent_on_behalf_of_),
  4,
  5,
  0,
  1,
  2,
  ~0u,
  6,
  3,
  7,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::MessagingPartyWithoutCode, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::MessagingPartyWithoutCode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::MessagingPartyWithoutCode, party_id_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::MessagingPartyWithoutCode, party_name_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::MessagingPartyWithoutCode, trading_name_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::MusicalWorkId, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::MusicalWorkId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::MusicalWorkId, composer_catalog_number_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::MusicalWorkId, i_s_w_c_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::MusicalWorkId, is_replaced_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::MusicalWorkId, opus_number_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::MusicalWorkId, proprietary_id_),
  ~0u,
  0,
  2,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Name, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Name, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Name, language_and_script_code_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Name, ext_value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::NewReleaseMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::NewReleaseMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::NewReleaseMessage, chapter_list_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::NewReleaseMessage, cue_sheet_list_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::NewReleaseMessage, deal_list_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::NewReleaseMessage, language_and_script_code_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::NewReleaseMessage, message_header_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::NewReleaseMessage, party_list_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::NewReleaseMessage, release_list_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::NewReleaseMessage, release_profile_variant_version_id_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::NewReleaseMessage, release_profile_version_id_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::NewReleaseMessage, resource_list_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::NewReleaseMessage, supplemental_document_list_),
  1,
  2,
  3,
  0,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::OperatingSystemType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::OperatingSystemType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::OperatingSystemType, namespace__),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::OperatingSystemType, user_defined_value_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::OperatingSystemType, version_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::OperatingSystemType, ext_value_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::PLine, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::PLine, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::PLine, language_and_script_code_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::PLine, p_line_company_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::PLine, p_line_text_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::PLine, p_line_type_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::PLine, year_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::PLineWithDefault, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::PLineWithDefault, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::PLineWithDefault, applicable_territory_code_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::PLineWithDefault, is_default_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::PLineWithDefault, language_and_script_code_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::PLineWithDefault, p_line_company_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::PLineWithDefault, p_line_text_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::PLineWithDefault, year_),
  3,
  4,
  0,
  1,
  2,
  5,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ParentalWarningTypeWithTerritory, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ParentalWarningTypeWithTerritory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ParentalWarningTypeWithTerritory, applicable_territory_code_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ParentalWarningTypeWithTerritory, is_default_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ParentalWarningTypeWithTerritory, namespace__),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ParentalWarningTypeWithTerritory, user_defined_value_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ParentalWarningTypeWithTerritory, ext_value_),
  2,
  4,
  0,
  1,
  3,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Party, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Party, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Party, affiliation_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Party, artist_profile_page_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Party, party_id_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Party, party_name_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Party, party_reference_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Party, related_party_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::PartyList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::PartyList, party_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::PartyName, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::PartyName, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::PartyName, abbreviated_name_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::PartyName, full_name_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::PartyName, full_name_ascii_transcribed_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::PartyName, full_name_indexed_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::PartyName, key_name_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::PartyName, language_and_script_code_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::PartyName, names_after_key_name_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::PartyName, names_before_key_name_),
  2,
  3,
  0,
  4,
  5,
  1,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::PartyNameWithTerritory, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::PartyNameWithTerritory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::PartyNameWithTerritory, abbreviated_name_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::PartyNameWithTerritory, applicable_territory_code_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::PartyNameWithTerritory, full_name_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::PartyNameWithTerritory, full_name_ascii_transcribed_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::PartyNameWithTerritory, full_name_indexed_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::PartyNameWithTerritory, is_legal_name_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::PartyNameWithTerritory, is_nickname_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::PartyNameWithTerritory, is_stage_name_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::PartyNameWithTerritory, key_name_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::PartyNameWithTerritory, language_and_script_code_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::PartyNameWithTerritory, names_after_key_name_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::PartyNameWithTerritory, names_before_key_name_),
  2,
  3,
  4,
  0,
  5,
  9,
  10,
  11,
  6,
  1,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::PartyNameWithoutCode, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::PartyNameWithoutCode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::PartyNameWithoutCode, abbreviated_name_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::PartyNameWithoutCode, full_name_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::PartyNameWithoutCode, full_name_ascii_transcribed_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::PartyNameWithoutCode, full_name_indexed_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::PartyNameWithoutCode, key_name_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::PartyNameWithoutCode, names_after_key_name_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::PartyNameWithoutCode, names_before_key_name_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::PartyRelationshipType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::PartyRelationshipType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::PartyRelationshipType, may_be_shared_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::PartyRelationshipType, namespace__),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::PartyRelationshipType, user_defined_value_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::PartyRelationshipType, ext_value_),
  3,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Percentage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Percentage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Percentage, has_max_value_of_one_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Percentage, ext_value_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Period, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Period, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Period, end_date_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Period, end_date_time_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Period, start_date_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Period, start_date_time_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::PeriodWithoutFlags, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::PeriodWithoutFlags, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::PeriodWithoutFlags, end_date_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::PeriodWithoutFlags, end_date_time_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::PeriodWithoutFlags, start_date_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::PeriodWithoutFlags, start_date_time_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::PhysicalReturns, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::PhysicalReturns, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::PhysicalReturns, latest_date_for_physical_returns_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::PhysicalReturns, physical_returns_allowed_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Prefix, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Prefix, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Prefix, language_and_script_code_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Prefix, ext_value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::PreviewDetails, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::PreviewDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::PreviewDetails, bottom_right_corner_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::PreviewDetails, expression_type_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::PreviewDetails, top_left_corner_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Price, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Price, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Price, currency_code_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Price, ext_value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::PriceInformationWithType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::PriceInformationWithType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::PriceInformationWithType, bulk_order_wholesale_price_per_unit_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::PriceInformationWithType, price_code_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::PriceInformationWithType, price_type_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::PriceInformationWithType, suggested_retail_price_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::PriceInformationWithType, wholesale_price_per_unit_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::PriceType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::PriceType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::PriceType, namespace__),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::PriceType, ext_value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::PromotionalCode, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::PromotionalCode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::PromotionalCode, namespace__),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::PromotionalCode, ext_value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ProprietaryId, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ProprietaryId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ProprietaryId, namespace__),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ProprietaryId, ext_value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::PurgeReleaseMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::PurgeReleaseMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::PurgeReleaseMessage, language_and_script_code_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::PurgeReleaseMessage, message_header_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::PurgeReleaseMessage, purged_release_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::PurgedRelease, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::PurgedRelease, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::PurgedRelease, contributor_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::PurgedRelease, release_id_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::PurgedRelease, title_),
  ~0u,
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Purpose, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Purpose, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Purpose, namespace__),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Purpose, user_defined_value_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Purpose, ext_value_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Raga, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Raga, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Raga, applicable_territory_code_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Raga, is_default_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Raga, ext_value_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::RatingAgency, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::RatingAgency, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::RatingAgency, namespace__),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::RatingAgency, user_defined_value_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::RatingAgency, ext_value_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Reason, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Reason, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Reason, language_and_script_code_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Reason, ext_value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::RelatedParty, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::RelatedParty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::RelatedParty, party_related_party_reference_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::RelatedParty, party_relationship_type_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::RelatedRelease, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::RelatedRelease, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::RelatedRelease, additional_title_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::RelatedRelease, display_artist_name_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::RelatedRelease, display_title_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::RelatedRelease, display_title_text_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::RelatedRelease, original_release_date_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::RelatedRelease, release_date_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::RelatedRelease, release_id_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::RelatedRelease, release_label_reference_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::RelatedRelease, release_relationship_type_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  1,
  2,
  ~0u,
  3,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::RelatedResource, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::RelatedResource, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::RelatedResource, release_id_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::RelatedResource, resource_related_resource_reference_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::RelatedResource, resource_relationship_type_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::RelatedResource, timing_),
  1,
  0,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Release, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Release, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Release, additional_title_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Release, administrating_record_company_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Release, av_rating_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Release, c_line_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Release, courtesy_line_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Release, deity_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Release, display_artist_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Release, display_artist_name_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Release, display_title_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Release, display_title_text_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Release, duration_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Release, external_resource_link_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Release, genre_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Release, hi_res_music_description_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Release, is_compilation_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Release, is_hi_res_music_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Release, is_multi_artist_compilation_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Release, is_soundtrack_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Release, keywords_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Release, language_and_script_code_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Release, marketing_comment_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Release, original_release_date_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Release, p_line_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Release, parental_warning_type_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Release, raga_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Release, related_release_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Release, release_date_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Release, release_id_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Release, release_label_reference_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Release, release_reference_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Release, release_type_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Release, resource_group_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Release, synopsis_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Release, tala_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  ~0u,
  ~0u,
  1,
  6,
  7,
  8,
  9,
  ~0u,
  2,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  4,
  ~0u,
  3,
  ~0u,
  5,
  ~0u,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ReleaseDeal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ReleaseDeal, deal_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ReleaseDeal, deal_release_reference_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ReleaseId, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ReleaseId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ReleaseId, catalog_number_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ReleaseId, g_rid_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ReleaseId, i_c_p_n_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ReleaseId, i_s_r_c_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ReleaseId, proprietary_id_),
  3,
  0,
  1,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ReleaseLabelReference, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ReleaseLabelReference, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ReleaseLabelReference, applicable_territory_code_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ReleaseLabelReference, is_default_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ReleaseLabelReference, label_type_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ReleaseLabelReference, language_and_script_code_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ReleaseLabelReference, namespace__),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ReleaseLabelReference, user_defined_value_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ReleaseLabelReference, ext_value_),
  3,
  6,
  4,
  0,
  1,
  2,
  5,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ReleaseList, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ReleaseList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ReleaseList, release_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ReleaseList, track_release_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ReleaseRelationshipType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ReleaseRelationshipType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ReleaseRelationshipType, namespace__),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ReleaseRelationshipType, user_defined_value_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ReleaseRelationshipType, ext_value_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ReleaseTypeForReleaseNotification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ReleaseTypeForReleaseNotification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ReleaseTypeForReleaseNotification, namespace__),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ReleaseTypeForReleaseNotification, user_defined_value_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ReleaseTypeForReleaseNotification, ext_value_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ResourceContainedResourceReference, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ResourceContainedResourceReference, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ResourceContainedResourceReference, duration_used_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ResourceContainedResourceReference, purpose_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ResourceContainedResourceReference, resource_contained_resource_reference_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ResourceContainedResourceReference, start_point_),
  0,
  2,
  1,
  3,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ResourceContainedResourceReferenceList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ResourceContainedResourceReferenceList, resource_contained_resource_reference_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ResourceGroup, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ResourceGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ResourceGroup, additional_title_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ResourceGroup, carrier_type_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ResourceGroup, display_artist_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ResourceGroup, display_sequence_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ResourceGroup, display_title_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ResourceGroup, display_title_text_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ResourceGroup, duration_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ResourceGroup, linked_release_resource_reference_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ResourceGroup, no_display_sequence_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ResourceGroup, release_id_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ResourceGroup, resource_group_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ResourceGroup, resource_group_content_item_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ResourceGroup, resource_group_release_reference_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ResourceGroup, sequence_number_),
  ~0u,
  ~0u,
  ~0u,
  0,
  ~0u,
  ~0u,
  1,
  ~0u,
  4,
  3,
  ~0u,
  ~0u,
  2,
  5,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ResourceGroupContentItem, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ResourceGroupContentItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ResourceGroupContentItem, display_sequence_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ResourceGroupContentItem, is_bonus_resource_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ResourceGroupContentItem, is_instant_gratification_resource_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ResourceGroupContentItem, is_pre_order_incentive_resource_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ResourceGroupContentItem, linked_release_resource_reference_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ResourceGroupContentItem, no_display_sequence_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ResourceGroupContentItem, release_resource_reference_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ResourceGroupContentItem, sequence_number_),
  0,
  2,
  3,
  4,
  ~0u,
  5,
  1,
  6,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ResourceId, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ResourceId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ResourceId, catalog_number_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ResourceId, i_s_a_n_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ResourceId, i_s_b_n_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ResourceId, i_s_m_n_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ResourceId, i_s_r_c_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ResourceId, i_s_s_n_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ResourceId, is_replaced_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ResourceId, proprietary_id_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ResourceId, s_i_c_i_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ResourceId, v_i_s_a_n_),
  7,
  0,
  1,
  2,
  3,
  4,
  8,
  ~0u,
  5,
  6,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ResourceList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ResourceList, image_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ResourceList, sheet_music_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ResourceList, software_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ResourceList, sound_recording_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ResourceList, text_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ResourceList, video_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ResourceProprietaryId, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ResourceProprietaryId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ResourceProprietaryId, is_replaced_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ResourceProprietaryId, proprietary_id_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ResourceRightsController, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ResourceRightsController, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ResourceRightsController, delegated_usage_rights_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ResourceRightsController, right_share_percentage_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ResourceRightsController, right_share_unknown_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ResourceRightsController, rights_controller_party_reference_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ResourceRightsController, rights_controller_role_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ResourceRightsController, sequence_number_),
  ~0u,
  1,
  2,
  0,
  ~0u,
  3,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ResourceSubGroup, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ResourceSubGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ResourceSubGroup, additional_title_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ResourceSubGroup, carrier_type_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ResourceSubGroup, display_artist_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ResourceSubGroup, display_sequence_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ResourceSubGroup, display_title_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ResourceSubGroup, display_title_text_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ResourceSubGroup, duration_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ResourceSubGroup, linked_release_resource_reference_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ResourceSubGroup, no_display_sequence_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ResourceSubGroup, release_id_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ResourceSubGroup, resource_group_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ResourceSubGroup, resource_group_content_item_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ResourceSubGroup, resource_group_release_reference_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ResourceSubGroup, resource_group_type_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ResourceSubGroup, sequence_number_),
  ~0u,
  ~0u,
  ~0u,
  0,
  ~0u,
  ~0u,
  1,
  ~0u,
  5,
  3,
  ~0u,
  ~0u,
  2,
  4,
  6,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::RightsClaimPolicy, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::RightsClaimPolicy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::RightsClaimPolicy, condition_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::RightsClaimPolicy, rights_claim_policy_type_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::SamplingRate, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::SamplingRate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::SamplingRate, unit_of_measure_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::SamplingRate, ext_value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::SheetMusic, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::SheetMusic, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::SheetMusic, additional_title_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::SheetMusic, c_line_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::SheetMusic, contains_hidden_content_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::SheetMusic, contributor_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::SheetMusic, courtesy_line_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::SheetMusic, creation_date_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::SheetMusic, display_artist_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::SheetMusic, display_artist_name_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::SheetMusic, display_title_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::SheetMusic, display_title_text_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::SheetMusic, first_publication_date_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::SheetMusic, is_supplemental_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::SheetMusic, language_and_script_code_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::SheetMusic, language_of_lyrics_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::SheetMusic, parental_warning_type_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::SheetMusic, related_release_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::SheetMusic, related_resource_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::SheetMusic, resource_contained_resource_reference_list_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::SheetMusic, resource_id_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::SheetMusic, resource_reference_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::SheetMusic, resource_rights_controller_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::SheetMusic, technical_details_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::SheetMusic, type_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::SheetMusic, version_type_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::SheetMusic, work_id_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::SheetMusic, work_rights_controller_),
  ~0u,
  ~0u,
  6,
  ~0u,
  ~0u,
  2,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  7,
  0,
  3,
  ~0u,
  ~0u,
  ~0u,
  4,
  ~0u,
  1,
  ~0u,
  ~0u,
  5,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::SheetMusicCodecType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::SheetMusicCodecType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::SheetMusicCodecType, namespace__),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::SheetMusicCodecType, user_defined_value_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::SheetMusicCodecType, version_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::SheetMusicCodecType, ext_value_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::SheetMusicId, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::SheetMusicId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::SheetMusicId, i_s_m_n_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::SheetMusicId, is_replaced_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::SheetMusicId, proprietary_id_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::SheetMusicType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::SheetMusicType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::SheetMusicType, namespace__),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::SheetMusicType, user_defined_value_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::SheetMusicType, ext_value_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::SimpleRightsType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::SimpleRightsType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::SimpleRightsType, namespace__),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::SimpleRightsType, user_defined_value_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::SimpleRightsType, ext_value_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Software, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Software, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Software, additional_title_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Software, c_line_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Software, contains_hidden_content_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Software, contributor_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Software, courtesy_line_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Software, creation_date_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Software, display_artist_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Software, display_artist_name_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Software, display_title_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Software, display_title_text_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Software, first_publication_date_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Software, is_supplemental_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Software, language_and_script_code_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Software, p_line_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Software, parental_warning_type_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Software, related_release_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Software, related_resource_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Software, resource_contained_resource_reference_list_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Software, resource_id_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Software, resource_reference_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Software, resource_rights_controller_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Software, technical_details_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Software, type_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Software, version_type_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Software, work_id_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Software, work_rights_controller_),
  ~0u,
  ~0u,
  5,
  ~0u,
  ~0u,
  2,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  6,
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  3,
  ~0u,
  1,
  ~0u,
  ~0u,
  4,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::SoftwareType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::SoftwareType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::SoftwareType, namespace__),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::SoftwareType, user_defined_value_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::SoftwareType, ext_value_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::SoundRecording, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::SoundRecording, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::SoundRecording, additional_title_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::SoundRecording, audio_channel_configuration_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::SoundRecording, audio_chapter_reference_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::SoundRecording, character_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::SoundRecording, composite_musical_work_type_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::SoundRecording, contains_hidden_content_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::SoundRecording, contributor_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::SoundRecording, courtesy_line_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::SoundRecording, creation_date_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::SoundRecording, deity_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::SoundRecording, display_artist_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::SoundRecording, display_artist_name_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::SoundRecording, display_credits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::SoundRecording, display_title_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::SoundRecording, display_title_text_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::SoundRecording, duration_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::SoundRecording, first_publication_date_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::SoundRecording, is_cover_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::SoundRecording, is_hi_res_music_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::SoundRecording, is_instrumental_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::SoundRecording, is_remastered_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::SoundRecording, is_supplemental_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::SoundRecording, language_and_script_code_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::SoundRecording, language_of_performance_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::SoundRecording, mastered_date_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::SoundRecording, p_line_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::SoundRecording, parental_warning_type_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::SoundRecording, raga_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::SoundRecording, related_release_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::SoundRecording, related_resource_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::SoundRecording, remastered_date_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::SoundRecording, resource_id_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::SoundRecording, resource_reference_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::SoundRecording, resource_rights_controller_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::SoundRecording, tala_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::SoundRecording, technical_details_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::SoundRecording, type_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::SoundRecording, version_type_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::SoundRecording, work_id_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::SoundRecording, work_rights_controller_),
  ~0u,
  3,
  ~0u,
  ~0u,
  4,
  9,
  ~0u,
  ~0u,
  5,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  ~0u,
  10,
  11,
  12,
  13,
  14,
  1,
  ~0u,
  6,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  7,
  ~0u,
  2,
  ~0u,
  ~0u,
  ~0u,
  8,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::SoundRecordingId, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::SoundRecordingId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::SoundRecordingId, catalog_number_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::SoundRecordingId, i_s_r_c_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::SoundRecordingId, is_replaced_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::SoundRecordingId, proprietary_id_),
  1,
  0,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::SoundRecordingPreviewDetails, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::SoundRecordingPreviewDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::SoundRecordingPreviewDetails, bottom_right_corner_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::SoundRecordingPreviewDetails, duration_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::SoundRecordingPreviewDetails, end_point_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::SoundRecordingPreviewDetails, expression_type_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::SoundRecordingPreviewDetails, start_point_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::SoundRecordingPreviewDetails, top_left_corner_),
  0,
  1,
  4,
  3,
  5,
  2,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::SoundRecordingType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::SoundRecordingType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::SoundRecordingType, namespace__),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::SoundRecordingType, user_defined_value_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::SoundRecordingType, ext_value_),
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::SupplementalDocumentList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::SupplementalDocumentList, supplemental_document_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::SynopsisWithTerritory, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::SynopsisWithTerritory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::SynopsisWithTerritory, applicable_territory_code_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::SynopsisWithTerritory, is_default_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::SynopsisWithTerritory, is_short_synopsis_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::SynopsisWithTerritory, language_and_script_code_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::SynopsisWithTerritory, ext_value_),
  2,
  3,
  4,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Tala, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Tala, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Tala, applicable_territory_code_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Tala, is_default_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Tala, ext_value_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::TechnicalImageDetails, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::TechnicalImageDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::TechnicalImageDetails, applicable_territory_code_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::TechnicalImageDetails, aspect_ratio_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::TechnicalImageDetails, bit_depth_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::TechnicalImageDetails, color_depth_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::TechnicalImageDetails, file_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::TechnicalImageDetails, fingerprint_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::TechnicalImageDetails, image_codec_type_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::TechnicalImageDetails, image_height_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::TechnicalImageDetails, image_resolution_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::TechnicalImageDetails, image_width_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::TechnicalImageDetails, is_default_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::TechnicalImageDetails, is_preview_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::TechnicalImageDetails, language_and_script_code_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::TechnicalImageDetails, preview_details_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::TechnicalImageDetails, technical_resource_details_reference_),
  2,
  3,
  9,
  10,
  4,
  ~0u,
  5,
  6,
  11,
  7,
  12,
  13,
  0,
  8,
  1,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::TechnicalSheetMusicDetails, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::TechnicalSheetMusicDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::TechnicalSheetMusicDetails, applicable_territory_code_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::TechnicalSheetMusicDetails, bit_depth_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::TechnicalSheetMusicDetails, file_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::TechnicalSheetMusicDetails, fingerprint_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::TechnicalSheetMusicDetails, is_default_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::TechnicalSheetMusicDetails, is_preview_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::TechnicalSheetMusicDetails, language_and_script_code_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::TechnicalSheetMusicDetails, preview_details_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::TechnicalSheetMusicDetails, sheet_music_codec_type_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::TechnicalSheetMusicDetails, technical_resource_details_reference_),
  2,
  6,
  3,
  ~0u,
  7,
  8,
  0,
  4,
  5,
  1,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::TechnicalSoftwareDetails, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::TechnicalSoftwareDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::TechnicalSoftwareDetails, applicable_territory_code_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::TechnicalSoftwareDetails, bit_depth_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::TechnicalSoftwareDetails, file_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::TechnicalSoftwareDetails, fingerprint_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::TechnicalSoftwareDetails, is_default_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::TechnicalSoftwareDetails, is_preview_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::TechnicalSoftwareDetails, language_and_script_code_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::TechnicalSoftwareDetails, operating_system_type_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::TechnicalSoftwareDetails, preview_details_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::TechnicalSoftwareDetails, technical_resource_details_reference_),
  2,
  6,
  3,
  ~0u,
  7,
  8,
  0,
  4,
  5,
  1,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::TechnicalSoundRecordingDetails, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::TechnicalSoundRecordingDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::TechnicalSoundRecordingDetails, applicable_territory_code_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::TechnicalSoundRecordingDetails, audio_codec_type_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::TechnicalSoundRecordingDetails, bit_depth_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::TechnicalSoundRecordingDetails, bit_rate_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::TechnicalSoundRecordingDetails, bits_per_sample_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::TechnicalSoundRecordingDetails, duration_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::TechnicalSoundRecordingDetails, file_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::TechnicalSoundRecordingDetails, fingerprint_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::TechnicalSoundRecordingDetails, is_default_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::TechnicalSoundRecordingDetails, is_preview_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::TechnicalSoundRecordingDetails, language_and_script_code_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::TechnicalSoundRecordingDetails, number_of_channels_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::TechnicalSoundRecordingDetails, original_bit_rate_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::TechnicalSoundRecordingDetails, original_sampling_rate_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::TechnicalSoundRecordingDetails, preview_details_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::TechnicalSoundRecordingDetails, sampling_rate_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::TechnicalSoundRecordingDetails, technical_resource_details_reference_),
  3,
  4,
  11,
  5,
  12,
  0,
  6,
  ~0u,
  13,
  14,
  1,
  15,
  7,
  8,
  9,
  10,
  2,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::TechnicalTextDetails, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::TechnicalTextDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::TechnicalTextDetails, applicable_territory_code_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::TechnicalTextDetails, bit_depth_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::TechnicalTextDetails, file_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::TechnicalTextDetails, fingerprint_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::TechnicalTextDetails, is_default_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::TechnicalTextDetails, is_preview_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::TechnicalTextDetails, language_and_script_code_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::TechnicalTextDetails, preview_details_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::TechnicalTextDetails, technical_resource_details_reference_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::TechnicalTextDetails, text_codec_type_),
  2,
  6,
  3,
  ~0u,
  7,
  8,
  0,
  4,
  1,
  5,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::TechnicalVideoDetails, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::TechnicalVideoDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::TechnicalVideoDetails, applicable_territory_code_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::TechnicalVideoDetails, aspect_ratio_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::TechnicalVideoDetails, audio_bit_rate_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::TechnicalVideoDetails, audio_bits_per_sample_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::TechnicalVideoDetails, audio_codec_type_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::TechnicalVideoDetails, audio_sampling_rate_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::TechnicalVideoDetails, bit_depth_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::TechnicalVideoDetails, color_depth_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::TechnicalVideoDetails, container_format_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::TechnicalVideoDetails, core_area_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::TechnicalVideoDetails, duration_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::TechnicalVideoDetails, file_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::TechnicalVideoDetails, fingerprint_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::TechnicalVideoDetails, frame_rate_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::TechnicalVideoDetails, image_height_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::TechnicalVideoDetails, image_width_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::TechnicalVideoDetails, is_default_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::TechnicalVideoDetails, is_preview_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::TechnicalVideoDetails, language_and_script_code_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::TechnicalVideoDetails, number_of_audio_channels_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::TechnicalVideoDetails, overall_bit_rate_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::TechnicalVideoDetails, preview_details_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::TechnicalVideoDetails, technical_resource_details_reference_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::TechnicalVideoDetails, video_bit_rate_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::TechnicalVideoDetails, video_codec_type_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::TechnicalVideoDetails, video_definition_type_),
  3,
  4,
  5,
  19,
  6,
  7,
  20,
  21,
  8,
  9,
  0,
  10,
  ~0u,
  11,
  12,
  13,
  22,
  23,
  1,
  24,
  14,
  15,
  2,
  16,
  17,
  18,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Text, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Text, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Text, additional_title_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Text, c_line_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Text, contains_hidden_content_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Text, contributor_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Text, courtesy_line_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Text, creation_date_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Text, display_artist_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Text, display_artist_name_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Text, display_title_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Text, display_title_text_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Text, first_publication_date_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Text, is_supplemental_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Text, language_and_script_code_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Text, parental_warning_type_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Text, related_release_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Text, related_resource_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Text, resource_contained_resource_reference_list_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Text, resource_id_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Text, resource_reference_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Text, resource_rights_controller_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Text, technical_details_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Text, type_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Text, version_type_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Text, work_id_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Text, work_rights_controller_),
  ~0u,
  ~0u,
  5,
  ~0u,
  ~0u,
  2,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  6,
  0,
  ~0u,
  ~0u,
  ~0u,
  3,
  ~0u,
  1,
  ~0u,
  ~0u,
  4,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::TextCodecType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::TextCodecType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::TextCodecType, namespace__),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::TextCodecType, user_defined_value_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::TextCodecType, version_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::TextCodecType, ext_value_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::TextId, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::TextId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::TextId, i_s_b_n_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::TextId, i_s_s_n_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::TextId, is_replaced_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::TextId, proprietary_id_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::TextId, s_i_c_i_),
  0,
  1,
  3,
  ~0u,
  2,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::TextType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::TextType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::TextType, namespace__),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::TextType, user_defined_value_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::TextType, ext_value_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Timing, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Timing, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Timing, duration_used_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Timing, start_point_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Title, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Title, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Title, language_and_script_code_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Title, sub_title_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Title, title_text_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Title, title_type_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::TitleDisplayInformation, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::TitleDisplayInformation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::TitleDisplayInformation, is_displayed_in_title_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::TitleDisplayInformation, language_and_script_code_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::TitleDisplayInformation, prefix_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::TitleDisplayInformation, sequence_number_),
  1,
  0,
  ~0u,
  2,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::TrackRelease, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::TrackRelease, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::TrackRelease, additional_title_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::TrackRelease, display_title_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::TrackRelease, display_title_text_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::TrackRelease, genre_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::TrackRelease, is_main_release_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::TrackRelease, keywords_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::TrackRelease, linked_release_resource_reference_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::TrackRelease, marketing_comment_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::TrackRelease, release_id_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::TrackRelease, release_label_reference_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::TrackRelease, release_reference_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::TrackRelease, release_resource_reference_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::TrackRelease, synopsis_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  3,
  ~0u,
  ~0u,
  ~0u,
  2,
  ~0u,
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::UseType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::UseType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::UseType, namespace__),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::UseType, user_defined_value_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::UseType, ext_value_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ValidityPeriod, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ValidityPeriod, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ValidityPeriod, end_date_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ValidityPeriod, start_date_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::VersionType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::VersionType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::VersionType, namespace__),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::VersionType, user_defined_value_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::VersionType, ext_value_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Video, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Video, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Video, additional_title_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Video, av_rating_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Video, c_line_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Video, character_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Video, composite_musical_work_type_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Video, contains_hidden_content_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Video, contributor_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Video, courtesy_line_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Video, creation_date_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Video, deity_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Video, display_artist_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Video, display_artist_name_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Video, display_credits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Video, display_title_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Video, display_title_text_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Video, duration_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Video, first_publication_date_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Video, is_cover_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Video, is_instrumental_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Video, is_remastered_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Video, is_supplemental_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Video, language_and_script_code_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Video, language_of_dubbing_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Video, language_of_performance_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Video, mastered_date_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Video, p_line_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Video, parental_warning_type_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Video, raga_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Video, reason_for_cue_sheet_absence_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Video, related_release_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Video, related_resource_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Video, remastered_date_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Video, resource_contained_resource_reference_list_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Video, resource_id_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Video, resource_reference_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Video, resource_rights_controller_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Video, sub_title_language_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Video, tala_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Video, technical_details_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Video, type_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Video, version_type_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Video, video_chapter_reference_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Video, video_cue_sheet_reference_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Video, work_id_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::Video, work_rights_controller_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  3,
  9,
  ~0u,
  ~0u,
  4,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  ~0u,
  10,
  11,
  12,
  13,
  1,
  ~0u,
  ~0u,
  5,
  ~0u,
  ~0u,
  ~0u,
  6,
  ~0u,
  ~0u,
  ~0u,
  7,
  ~0u,
  2,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  8,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::VideoCodecType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::VideoCodecType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::VideoCodecType, namespace__),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::VideoCodecType, user_defined_value_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::VideoCodecType, version_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::VideoCodecType, ext_value_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::VideoId, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::VideoId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::VideoId, catalog_number_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::VideoId, e_i_d_r_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::VideoId, i_s_a_n_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::VideoId, i_s_r_c_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::VideoId, is_replaced_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::VideoId, proprietary_id_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::VideoId, v_i_s_a_n_),
  3,
  ~0u,
  0,
  1,
  4,
  ~0u,
  2,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::VideoType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::VideoType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::VideoType, namespace__),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::VideoType, user_defined_value_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::VideoType, ext_value_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::WorkRightsController, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::WorkRightsController, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::WorkRightsController, end_date_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::WorkRightsController, right_share_percentage_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::WorkRightsController, right_share_unknown_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::WorkRightsController, rights_controller_party_reference_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::WorkRightsController, rights_controller_role_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::WorkRightsController, rights_controller_type_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::WorkRightsController, start_date_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::WorkRightsController, territory_),
  1,
  4,
  5,
  0,
  ~0u,
  2,
  3,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ddex_IsoDate, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ddex_IsoDate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ddex_IsoDate, auto_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ddex_LocalPartyAnchorReference, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ddex_LocalPartyAnchorReference, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ddex_LocalPartyAnchorReference, auto_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ddex_LocalResourceAnchorReference, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ddex_LocalResourceAnchorReference, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ern411::ern::ddex_LocalResourceAnchorReference, auto_value_),
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 13, sizeof(::ern411::ern::AdditionalTitle)},
  { 21, 29, sizeof(::ern411::ern::AdministratingRecordCompanyRole)},
  { 32, 39, sizeof(::ern411::ern::AdministratingRecordCompanyWithReference)},
  { 41, 54, sizeof(::ern411::ern::Affiliation)},
  { 62, 69, sizeof(::ern411::ern::AllTerritoryCode)},
  { 71, 78, sizeof(::ern411::ern::AspectRatio)},
  { 80, 89, sizeof(::ern411::ern::AudioCodecType)},
  { 93, 103, sizeof(::ern411::ern::AvRating)},
  { 108, 115, sizeof(::ern411::ern::BitRate)},
  { 117, 126, sizeof(::ern411::ern::CLine)},
  { 130, 141, sizeof(::ern411::ern::CLineWithDefault)},
  { 147, 155, sizeof(::ern411::ern::CarrierType)},
  { 158, 165, sizeof(::ern411::ern::CatalogNumber)},
  { 167, 185, sizeof(::ern411::ern::Chapter)},
  { 198, 205, sizeof(::ern411::ern::ChapterList)},
  { 207, 215, sizeof(::ern411::ern::Character)},
  { 218, 226, sizeof(::ern411::ern::CommercialModelType)},
  { 229, 238, sizeof(::ern411::ern::ConditionForRightsClaimPolicy)},
  { 242, 250, sizeof(::ern411::ern::ContainerFormat)},
  { 253, 266, sizeof(::ern411::ern::Contributor)},
  { 274, 282, sizeof(::ern411::ern::ContributorRole)},
  { 285, 292, sizeof(::ern411::ern::CoreArea)},
  { 294, 303, sizeof(::ern411::ern::CourtesyLineWithDefault)},
  { 307, 315, sizeof(::ern411::ern::CueOrigin)},
  { 318, 326, sizeof(::ern411::ern::CueSheetType)},
  { 329, 337, sizeof(::ern411::ern::CueThemeType)},
  { 340, 348, sizeof(::ern411::ern::CueUseType)},
  { 351, 359, sizeof(::ern411::ern::CueVisualPerceptionType)},
  { 362, 370, sizeof(::ern411::ern::CueVocalType)},
  { 373, 380, sizeof(::ern411::ern::CurrentTerritoryCode)},
  { 382, 391, sizeof(::ern411::ern::DSP)},
  { 395, 405, sizeof(::ern411::ern::Deal)},
  { 410, -1, sizeof(::ern411::ern::DealList)},
  { 416, -1, sizeof(::ern411::ern::DealResourceReferenceList)},
  { 422, -1, sizeof(::ern411::ern::DealTechnicalResourceDetailsReferenceList)},
  { 428, 459, sizeof(::ern411::ern::DealTerms)},
  { 485, 493, sizeof(::ern411::ern::DealTermsTechnicalInstantiation)},
  { 496, 504, sizeof(::ern411::ern::Deity)},
  { 507, 515, sizeof(::ern411::ern::DelegatedUsageRights)},
  { 518, 527, sizeof(::ern411::ern::DescriptionWithTerritory)},
  { 531, 554, sizeof(::ern411::ern::DetailedCue)},
  { 572, 581, sizeof(::ern411::ern::DetailedCueSheet)},
  { 585, -1, sizeof(::ern411::ern::DetailedCueSheetList)},
  { 591, 601, sizeof(::ern411::ern::DetailedHashSum)},
  { 606, 617, sizeof(::ern411::ern::DetailedPartyId)},
  { 623, 636, sizeof(::ern411::ern::DetailedResourceContributor)},
  { 644, 653, sizeof(::ern411::ern::DiscoverableUseType)},
  { 657, 667, sizeof(::ern411::ern::DisplayArtist)},
  { 672, 681, sizeof(::ern411::ern::DisplayArtistNameWithDefault)},
  { 685, 693, sizeof(::ern411::ern::DisplayArtistRole)},
  { 696, 707, sizeof(::ern411::ern::DisplayCredits)},
  { 713, 722, sizeof(::ern411::ern::DisplaySubTitle)},
  { 726, 736, sizeof(::ern411::ern::DisplayTitle)},
  { 741, 750, sizeof(::ern411::ern::DisplayTitleText)},
  { 754, 763, sizeof(::ern411::ern::DistributionChannelPage)},
  { 767, 779, sizeof(::ern411::ern::EventDate)},
  { 786, 798, sizeof(::ern411::ern::EventDateTime)},
  { 805, 815, sizeof(::ern411::ern::EventDateTimeWithoutFlags)},
  { 820, 829, sizeof(::ern411::ern::EventDateWithDefault)},
  { 833, 843, sizeof(::ern411::ern::EventDateWithoutFlags)},
  { 848, 855, sizeof(::ern411::ern::Extent)},
  { 857, 867, sizeof(::ern411::ern::ExternalResourceLink)},
  { 872, 880, sizeof(::ern411::ern::ExternallyLinkedResourceType)},
  { 883, 891, sizeof(::ern411::ern::File)},
  { 894, 905, sizeof(::ern411::ern::Fingerprint)},
  { 911, 919, sizeof(::ern411::ern::FingerprintAlgorithmType)},
  { 922, 930, sizeof(::ern411::ern::FirstPublicationDate)},
  { 933, 940, sizeof(::ern411::ern::FrameRate)},
  { 942, 951, sizeof(::ern411::ern::FulfillmentDateWithTerritory)},
  { 955, 965, sizeof(::ern411::ern::GenreWithTerritory)},
  { 970, 978, sizeof(::ern411::ern::HashSumAlgorithmType)},
  { 981, 1010, sizeof(::ern411::ern::Image)},
  { 1034, 1043, sizeof(::ern411::ern::ImageCodecType)},
  { 1047, 1055, sizeof(::ern411::ern::ImageType)},
  { 1058, 1066, sizeof(::ern411::ern::InstrumentType)},
  { 1069, 1076, sizeof(::ern411::ern::IsCredited)},
  { 1078, 1087, sizeof(::ern411::ern::KeywordsWithTerritory)},
  { 1091, 1101, sizeof(::ern411::ern::LinkedReleaseResourceReference)},
  { 1106, 1115, sizeof(::ern411::ern::MarketingComment)},
  { 1119, -1, sizeof(::ern411::ern::MessageAuditTrail)},
  { 1125, 1132, sizeof(::ern411::ern::MessageAuditTrailEvent)},
  { 1134, 1148, sizeof(::ern411::ern::MessageHeader)},
  { 1157, 1165, sizeof(::ern411::ern::MessagingPartyWithoutCode)},
  { 1168, 1178, sizeof(::ern411::ern::MusicalWorkId)},
  { 1183, 1190, sizeof(::ern411::ern::Name)},
  { 1192, 1208, sizeof(::ern411::ern::NewReleaseMessage)},
  { 1219, 1228, sizeof(::ern411::ern::OperatingSystemType)},
  { 1232, 1242, sizeof(::ern411::ern::PLine)},
  { 1247, 1258, sizeof(::ern411::ern::PLineWithDefault)},
  { 1264, 1274, sizeof(::ern411::ern::ParentalWarningTypeWithTerritory)},
  { 1279, 1290, sizeof(::ern411::ern::Party)},
  { 1296, -1, sizeof(::ern411::ern::PartyList)},
  { 1302, 1315, sizeof(::ern411::ern::PartyName)},
  { 1323, 1340, sizeof(::ern411::ern::PartyNameWithTerritory)},
  { 1352, 1364, sizeof(::ern411::ern::PartyNameWithoutCode)},
  { 1371, 1380, sizeof(::ern411::ern::PartyRelationshipType)},
  { 1384, 1391, sizeof(::ern411::ern::Percentage)},
  { 1393, 1402, sizeof(::ern411::ern::Period)},
  { 1406, 1415, sizeof(::ern411::ern::PeriodWithoutFlags)},
  { 1419, 1426, sizeof(::ern411::ern::PhysicalReturns)},
  { 1428, 1435, sizeof(::ern411::ern::Prefix)},
  { 1437, 1445, sizeof(::ern411::ern::PreviewDetails)},
  { 1448, 1455, sizeof(::ern411::ern::Price)},
  { 1457, 1467, sizeof(::ern411::ern::PriceInformationWithType)},
  { 1472, 1479, sizeof(::ern411::ern::PriceType)},
  { 1481, 1488, sizeof(::ern411::ern::PromotionalCode)},
  { 1490, 1497, sizeof(::ern411::ern::ProprietaryId)},
  { 1499, 1507, sizeof(::ern411::ern::PurgeReleaseMessage)},
  { 1510, 1518, sizeof(::ern411::ern::PurgedRelease)},
  { 1521, 1529, sizeof(::ern411::ern::Purpose)},
  { 1532, 1540, sizeof(::ern411::ern::Raga)},
  { 1543, 1551, sizeof(::ern411::ern::RatingAgency)},
  { 1554, 1561, sizeof(::ern411::ern::Reason)},
  { 1563, 1570, sizeof(::ern411::ern::RelatedParty)},
  { 1572, 1586, sizeof(::ern411::ern::RelatedRelease)},
  { 1595, 1604, sizeof(::ern411::ern::RelatedResource)},
  { 1608, 1647, sizeof(::ern411::ern::Release)},
  { 1681, -1, sizeof(::ern411::ern::ReleaseDeal)},
  { 1688, 1698, sizeof(::ern411::ern::ReleaseId)},
  { 1703, 1715, sizeof(::ern411::ern::ReleaseLabelReference)},
  { 1722, 1729, sizeof(::ern411::ern::ReleaseList)},
  { 1731, 1739, sizeof(::ern411::ern::ReleaseRelationshipType)},
  { 1742, 1750, sizeof(::ern411::ern::ReleaseTypeForReleaseNotification)},
  { 1753, 1762, sizeof(::ern411::ern::ResourceContainedResourceReference)},
  { 1766, -1, sizeof(::ern411::ern::ResourceContainedResourceReferenceList)},
  { 1772, 1791, sizeof(::ern411::ern::ResourceGroup)},
  { 1805, 1818, sizeof(::ern411::ern::ResourceGroupContentItem)},
  { 1826, 1841, sizeof(::ern411::ern::ResourceId)},
  { 1851, -1, sizeof(::ern411::ern::ResourceList)},
  { 1862, 1869, sizeof(::ern411::ern::ResourceProprietaryId)},
  { 1871, 1882, sizeof(::ern411::ern::ResourceRightsController)},
  { 1888, 1908, sizeof(::ern411::ern::ResourceSubGroup)},
  { 1923, 1930, sizeof(::ern411::ern::RightsClaimPolicy)},
  { 1932, 1939, sizeof(::ern411::ern::SamplingRate)},
  { 1941, 1972, sizeof(::ern411::ern::SheetMusic)},
  { 1998, 2007, sizeof(::ern411::ern::SheetMusicCodecType)},
  { 2011, 2019, sizeof(::ern411::ern::SheetMusicId)},
  { 2022, 2030, sizeof(::ern411::ern::SheetMusicType)},
  { 2033, 2041, sizeof(::ern411::ern::SimpleRightsType)},
  { 2044, 2075, sizeof(::ern411::ern::Software)},
  { 2101, 2109, sizeof(::ern411::ern::SoftwareType)},
  { 2112, 2157, sizeof(::ern411::ern::SoundRecording)},
  { 2197, 2206, sizeof(::ern411::ern::SoundRecordingId)},
  { 2210, 2221, sizeof(::ern411::ern::SoundRecordingPreviewDetails)},
  { 2227, 2235, sizeof(::ern411::ern::SoundRecordingType)},
  { 2238, -1, sizeof(::ern411::ern::SupplementalDocumentList)},
  { 2244, 2254, sizeof(::ern411::ern::SynopsisWithTerritory)},
  { 2259, 2267, sizeof(::ern411::ern::Tala)},
  { 2270, 2290, sizeof(::ern411::ern::TechnicalImageDetails)},
  { 2305, 2320, sizeof(::ern411::ern::TechnicalSheetMusicDetails)},
  { 2330, 2345, sizeof(::ern411::ern::TechnicalSoftwareDetails)},
  { 2355, 2377, sizeof(::ern411::ern::TechnicalSoundRecordingDetails)},
  { 2394, 2409, sizeof(::ern411::ern::TechnicalTextDetails)},
  { 2419, 2450, sizeof(::ern411::ern::TechnicalVideoDetails)},
  { 2476, 2506, sizeof(::ern411::ern::Text)},
  { 2531, 2540, sizeof(::ern411::ern::TextCodecType)},
  { 2544, 2554, sizeof(::ern411::ern::TextId)},
  { 2559, 2567, sizeof(::ern411::ern::TextType)},
  { 2570, 2577, sizeof(::ern411::ern::Timing)},
  { 2579, 2588, sizeof(::ern411::ern::Title)},
  { 2592, 2601, sizeof(::ern411::ern::TitleDisplayInformation)},
  { 2605, 2623, sizeof(::ern411::ern::TrackRelease)},
  { 2636, 2644, sizeof(::ern411::ern::UseType)},
  { 2647, 2654, sizeof(::ern411::ern::ValidityPeriod)},
  { 2656, 2664, sizeof(::ern411::ern::VersionType)},
  { 2667, 2717, sizeof(::ern411::ern::Video)},
  { 2762, 2771, sizeof(::ern411::ern::VideoCodecType)},
  { 2775, 2787, sizeof(::ern411::ern::VideoId)},
  { 2794, 2802, sizeof(::ern411::ern::VideoType)},
  { 2805, 2818, sizeof(::ern411::ern::WorkRightsController)},
  { 2826, 2832, sizeof(::ern411::ern::ddex_IsoDate)},
  { 2833, 2839, sizeof(::ern411::ern::ddex_LocalPartyAnchorReference)},
  { 2840, 2846, sizeof(::ern411::ern::ddex_LocalResourceAnchorReference)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_AdditionalTitle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_AdministratingRecordCompanyRole_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_AdministratingRecordCompanyWithReference_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_Affiliation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_AllTerritoryCode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_AspectRatio_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_AudioCodecType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_AvRating_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_BitRate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_CLine_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_CLineWithDefault_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_CarrierType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_CatalogNumber_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_Chapter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_ChapterList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_Character_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_CommercialModelType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_ConditionForRightsClaimPolicy_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_ContainerFormat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_Contributor_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_ContributorRole_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_CoreArea_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_CourtesyLineWithDefault_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_CueOrigin_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_CueSheetType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_CueThemeType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_CueUseType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_CueVisualPerceptionType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_CueVocalType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_CurrentTerritoryCode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_DSP_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_Deal_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_DealList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_DealResourceReferenceList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_DealTechnicalResourceDetailsReferenceList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_DealTerms_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_DealTermsTechnicalInstantiation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_Deity_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_DelegatedUsageRights_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_DescriptionWithTerritory_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_DetailedCue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_DetailedCueSheet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_DetailedCueSheetList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_DetailedHashSum_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_DetailedPartyId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_DetailedResourceContributor_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_DiscoverableUseType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_DisplayArtist_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_DisplayArtistNameWithDefault_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_DisplayArtistRole_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_DisplayCredits_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_DisplaySubTitle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_DisplayTitle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_DisplayTitleText_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_DistributionChannelPage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_EventDate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_EventDateTime_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_EventDateTimeWithoutFlags_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_EventDateWithDefault_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_EventDateWithoutFlags_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_Extent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_ExternalResourceLink_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_ExternallyLinkedResourceType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_File_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_Fingerprint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_FingerprintAlgorithmType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_FirstPublicationDate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_FrameRate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_FulfillmentDateWithTerritory_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_GenreWithTerritory_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_HashSumAlgorithmType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_Image_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_ImageCodecType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_ImageType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_InstrumentType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_IsCredited_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_KeywordsWithTerritory_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_LinkedReleaseResourceReference_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_MarketingComment_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_MessageAuditTrail_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_MessageAuditTrailEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_MessageHeader_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_MessagingPartyWithoutCode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_MusicalWorkId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_Name_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_NewReleaseMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_OperatingSystemType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_PLine_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_PLineWithDefault_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_ParentalWarningTypeWithTerritory_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_Party_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_PartyList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_PartyName_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_PartyNameWithTerritory_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_PartyNameWithoutCode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_PartyRelationshipType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_Percentage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_Period_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_PeriodWithoutFlags_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_PhysicalReturns_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_Prefix_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_PreviewDetails_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_Price_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_PriceInformationWithType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_PriceType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_PromotionalCode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_ProprietaryId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_PurgeReleaseMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_PurgedRelease_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_Purpose_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_Raga_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_RatingAgency_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_Reason_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_RelatedParty_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_RelatedRelease_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_RelatedResource_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_Release_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_ReleaseDeal_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_ReleaseId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_ReleaseLabelReference_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_ReleaseList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_ReleaseRelationshipType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_ReleaseTypeForReleaseNotification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_ResourceContainedResourceReference_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_ResourceContainedResourceReferenceList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_ResourceGroup_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_ResourceGroupContentItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_ResourceId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_ResourceList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_ResourceProprietaryId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_ResourceRightsController_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_ResourceSubGroup_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_RightsClaimPolicy_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_SamplingRate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_SheetMusic_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_SheetMusicCodecType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_SheetMusicId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_SheetMusicType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_SimpleRightsType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_Software_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_SoftwareType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_SoundRecording_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_SoundRecordingId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_SoundRecordingPreviewDetails_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_SoundRecordingType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_SupplementalDocumentList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_SynopsisWithTerritory_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_Tala_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_TechnicalImageDetails_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_TechnicalSheetMusicDetails_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_TechnicalSoftwareDetails_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_TechnicalSoundRecordingDetails_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_TechnicalTextDetails_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_TechnicalVideoDetails_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_Text_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_TextCodecType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_TextId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_TextType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_Timing_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_Title_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_TitleDisplayInformation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_TrackRelease_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_UseType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_ValidityPeriod_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_VersionType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_Video_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_VideoCodecType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_VideoId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_VideoType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_WorkRightsController_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_ddex_IsoDate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_ddex_LocalPartyAnchorReference_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ern411::ern::_ddex_LocalResourceAnchorReference_default_instance_),
};

const char descriptor_table_protodef_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n)ddex-xmltoproto/generated/ern42/ern.pr"
  "oto\022\nern411.ern\032)ddex-xmltoproto/generat"
  "ed/ern42/avs.proto\"\264\002\n\017AdditionalTitle\022C"
  "\n\031applicable_territory_code\030\001 \001(\0132 .ern4"
  "11.avs.CurrentTerritoryCode\022\022\n\nis_defaul"
  "t\030\002 \001(\010\022 \n\030language_and_script_code\030\003 \001("
  "\t\022\021\n\tnamespace\030\004 \001(\t\022.\n\tsub_title\030\005 \003(\0132"
  "\033.ern411.ern.DisplaySubTitle\022\022\n\ntitle_te"
  "xt\030\006 \001(\t\0223\n\ntitle_type\030\007 \001(\0132\037.ern411.av"
  "s.AdditionalTitleType\022\032\n\022user_defined_va"
  "lue\030\010 \001(\t\"\220\001\n\037AdministratingRecordCompan"
  "yRole\022\021\n\tnamespace\030\001 \001(\t\022\032\n\022user_defined"
  "_value\030\002 \001(\t\022>\n\text_value\030\003 \001(\0132+.ern411"
  ".avs.AdministratingRecordCompanyRole\"\215\001\n"
  "(AdministratingRecordCompanyWithReferenc"
  "e\022&\n\036record_company_party_reference\030\001 \001("
  "\t\0229\n\004role\030\002 \001(\0132+.ern411.ern.Administrat"
  "ingRecordCompanyRole\"\377\002\n\013Affiliation\022\024\n\014"
  "company_name\030\001 \001(\t\022A\n\027excluded_territory"
  "_code\030\002 \003(\0132 .ern411.ern.CurrentTerritor"
  "yCode\022!\n\031party_affiliate_reference\030\003 \001(\t"
  "\022\'\n\037percentage_of_rights_assignment\030\004 \001("
  "\001\0221\n\013rights_type\030\005 \003(\0132\034.ern411.ern.Simp"
  "leRightsType\0228\n\016territory_code\030\006 \003(\0132 .e"
  "rn411.ern.CurrentTerritoryCode\022)\n\004type\030\007"
  " \001(\0132\033.ern411.avs.AffiliationType\0223\n\017val"
  "idity_period\030\010 \001(\0132\032.ern411.ern.Validity"
  "Period\"\223\001\n\020AllTerritoryCode\022N\n\017identifie"
  "r_type\030\001 \001(\01325.ern411.avs.TerritoryCodeT"
  "ypeIncludingDeprecatedCodes\022/\n\text_value"
  "\030\002 \001(\0132\034.ern411.avs.AllTerritoryCode\"X\n\013"
  "AspectRatio\0226\n\021aspect_ratio_type\030\001 \001(\0132\033"
  ".ern411.avs.AspectRatioType\022\021\n\text_value"
  "\030\002 \001(\001\"\177\n\016AudioCodecType\022\021\n\tnamespace\030\001 "
  "\001(\t\022\032\n\022user_defined_value\030\002 \001(\t\022\017\n\007versi"
  "on\030\003 \001(\t\022-\n\text_value\030\004 \001(\0132\032.ern411.avs"
  ".AudioCodecType\"\307\001\n\010AvRating\022(\n\006agency\030\001"
  " \001(\0132\030.ern411.ern.RatingAgency\022C\n\031applic"
  "able_territory_code\030\002 \001(\0132 .ern411.avs.C"
  "urrentTerritoryCode\022\022\n\nis_default\030\003 \001(\010\022"
  "\016\n\006rating\030\004 \001(\t\022(\n\006reason\030\005 \001(\0132\030.ern411"
  ".avs.RatingReason\"P\n\007BitRate\0222\n\017unit_of_"
  "measure\030\001 \001(\0132\031.ern411.avs.UnitOfBitRate"
  "\022\021\n\text_value\030\002 \001(\001\"d\n\005CLine\022\026\n\016c_line_c"
  "ompany\030\001 \001(\t\022\023\n\013c_line_text\030\002 \001(\t\022 \n\030lan"
  "guage_and_script_code\030\003 \001(\t\022\014\n\004year\030\004 \001("
  "\r\"\310\001\n\020CLineWithDefault\022C\n\031applicable_ter"
  "ritory_code\030\001 \001(\0132 .ern411.avs.CurrentTe"
  "rritoryCode\022\026\n\016c_line_company\030\002 \001(\t\022\023\n\013c"
  "_line_text\030\003 \001(\t\022\022\n\nis_default\030\004 \001(\010\022 \n\030"
  "language_and_script_code\030\005 \001(\t\022\014\n\004year\030\006"
  " \001(\r\"h\n\013CarrierType\022\021\n\tnamespace\030\001 \001(\t\022\032"
  "\n\022user_defined_value\030\002 \001(\t\022*\n\text_value\030"
  "\003 \001(\0132\027.ern411.avs.CarrierType\"5\n\rCatalo"
  "gNumber\022\021\n\tnamespace\030\001 \001(\t\022\021\n\text_value\030"
  "\002 \001(\t\"\350\003\n\007Chapter\0225\n\020additional_title\030\001 "
  "\003(\0132\033.ern411.ern.AdditionalTitle\022-\n\nchap"
  "ter_id\030\002 \003(\0132\031.ern411.ern.ProprietaryId\022"
  "\031\n\021chapter_reference\030\003 \001(\t\022(\n\tcharacter\030"
  "\004 \003(\0132\025.ern411.ern.Character\022,\n\013contribu"
  "tor\030\005 \003(\0132\027.ern411.ern.Contributor\022/\n\rdi"
  "splay_title\030\006 \003(\0132\030.ern411.ern.DisplayTi"
  "tle\0228\n\022display_title_text\030\007 \003(\0132\034.ern411"
  ".ern.DisplayTitleText\022\020\n\010duration\030\010 \001(\t\022"
  "\020\n\010end_time\030\t \001(\t\022 \n\030language_and_script"
  "_code\030\n \001(\t\022&\n\036representative_image_refe"
  "rence\030\013 \001(\t\022\027\n\017sequence_number\030\014 \001(\005\022\022\n\n"
  "start_time\030\r \001(\t\"U\n\013ChapterList\022$\n\007chapt"
  "er\030\001 \003(\0132\023.ern411.ern.Chapter\022 \n\030languag"
  "e_and_script_code\030\002 \001(\t\"s\n\tCharacter\022!\n\031"
  "character_party_reference\030\001 \001(\t\022*\n\tperfo"
  "rmer\030\002 \001(\0132\027.ern411.ern.Contributor\022\027\n\017s"
  "equence_number\030\003 \001(\005\"x\n\023CommercialModelT"
  "ype\022\021\n\tnamespace\030\001 \001(\t\022\032\n\022user_defined_v"
  "alue\030\002 \001(\t\0222\n\text_value\030\003 \001(\0132\037.ern411.a"
  "vs.CommercialModelType\"\324\001\n\035ConditionForR"
  "ightsClaimPolicy\0229\n\022reference_creation\030\001"
  " \001(\0132\035.ern411.avs.ReferenceCreation\0229\n\022r"
  "elational_relator\030\002 \001(\0132\035.ern411.avs.Rel"
  "ationalRelator\022.\n\004unit\030\003 \001(\0132 .ern411.av"
  "s.UnitOfConditionValue\022\r\n\005value\030\004 \001(\001\"p\n"
  "\017ContainerFormat\022\021\n\tnamespace\030\001 \001(\t\022\032\n\022u"
  "ser_defined_value\030\002 \001(\t\022.\n\text_value\030\003 \001"
  "(\0132\033.ern411.avs.ContainerFormat\"\337\002\n\013Cont"
  "ributor\022#\n\033contributor_party_reference\030\001"
  " \001(\t\0223\n\017display_credits\030\002 \003(\0132\032.ern411.e"
  "rn.DisplayCredits\022(\n has_made_contracted"
  "_contribution\030\003 \001(\010\022&\n\036has_made_featured"
  "_contribution\030\004 \001(\010\0223\n\017instrument_type\030\005"
  " \003(\0132\032.ern411.ern.InstrumentType\022+\n\013is_c"
  "redited\030\006 \001(\0132\026.ern411.ern.IsCredited\022)\n"
  "\004role\030\007 \003(\0132\033.ern411.ern.ContributorRole"
  "\022\027\n\017sequence_number\030\010 \001(\005\"p\n\017Contributor"
  "Role\022\021\n\tnamespace\030\001 \001(\t\022\032\n\022user_defined_"
  "value\030\002 \001(\t\022.\n\text_value\030\003 \001(\0132\033.ern411."
  "avs.ContributorRole\"@\n\010CoreArea\022\033\n\023botto"
  "m_right_corner\030\001 \001(\t\022\027\n\017top_left_corner\030"
  "\002 \001(\t\"\247\001\n\027CourtesyLineWithDefault\022C\n\031app"
  "licable_territory_code\030\001 \001(\0132 .ern411.av"
  "s.CurrentTerritoryCode\022\022\n\nis_default\030\002 \001"
  "(\010\022 \n\030language_and_script_code\030\003 \001(\t\022\021\n\t"
  "ext_value\030\004 \001(\t\"d\n\tCueOrigin\022\021\n\tnamespac"
  "e\030\001 \001(\t\022\032\n\022user_defined_value\030\002 \001(\t\022(\n\te"
  "xt_value\030\003 \001(\0132\025.ern411.avs.CueOrigin\"j\n"
  "\014CueSheetType\022\021\n\tnamespace\030\001 \001(\t\022\032\n\022user"
  "_defined_value\030\002 \001(\t\022+\n\text_value\030\003 \001(\0132"
  "\030.ern411.avs.CueSheetType\"g\n\014CueThemeTyp"
  "e\022\021\n\tnamespace\030\001 \001(\t\022\032\n\022user_defined_val"
  "ue\030\002 \001(\t\022(\n\text_value\030\003 \001(\0132\025.ern411.avs"
  ".ThemeType\"f\n\nCueUseType\022\021\n\tnamespace\030\001 "
  "\001(\t\022\032\n\022user_defined_value\030\002 \001(\t\022)\n\text_v"
  "alue\030\003 \001(\0132\026.ern411.avs.CueUseType\"}\n\027Cu"
  "eVisualPerceptionType\022\021\n\tnamespace\030\001 \001(\t"
  "\022\032\n\022user_defined_value\030\002 \001(\t\0223\n\text_valu"
  "e\030\003 \001(\0132 .ern411.avs.VisualPerceptionTyp"
  "e\"g\n\014CueVocalType\022\021\n\tnamespace\030\001 \001(\t\022\032\n\022"
  "user_defined_value\030\002 \001(\t\022(\n\text_value\030\003 "
  "\001(\0132\025.ern411.avs.VocalType\"\203\001\n\024CurrentTe"
  "rritoryCode\0226\n\017identifier_type\030\001 \001(\0132\035.e"
  "rn411.avs.TerritoryCodeType\0223\n\text_value"
  "\030\002 \001(\0132 .ern411.avs.CurrentTerritoryCode"
  "\"\226\001\n\003DSP\022-\n\010party_id\030\001 \003(\0132\033.ern411.ern."
  "DetailedPartyId\022)\n\nparty_name\030\002 \003(\0132\025.er"
  "n411.ern.PartyName\022&\n\014trading_name\030\003 \001(\013"
  "2\020.ern411.ern.Name\022\r\n\005u_r_l\030\004 \003(\t\"\245\002\n\004De"
  "al\022\026\n\016deal_reference\030\001 \003(\t\022m\n.deal_techn"
  "ical_resource_details_reference_list\030\002 \001"
  "(\01325.ern411.ern.DealTechnicalResourceDet"
  "ailsReferenceList\022)\n\ndeal_terms\030\003 \001(\0132\025."
  "ern411.ern.DealTerms\022F\n\031distribution_cha"
  "nnel_page\030\004 \003(\0132#.ern411.ern.Distributio"
  "nChannelPage\022#\n\033is_communicated_out_of_b"
  "and\030\005 \001(\010\"9\n\010DealList\022-\n\014release_deal\030\001 "
  "\003(\0132\027.ern411.ern.ReleaseDeal\"<\n\031DealReso"
  "urceReferenceList\022\037\n\027deal_resource_refer"
  "ence\030\001 \003(\t\"^\n)DealTechnicalResourceDetai"
  "lsReferenceList\0221\n)deal_technical_resour"
  "ce_details_reference\030\001 \003(\t\"\361\n\n\tDealTerms"
  "\022-\n\014carrier_type\030\001 \003(\0132\027.ern411.ern.Carr"
  "ierType\0229\n\027clip_preview_start_date\030\002 \001(\013"
  "2\030.ern411.ern.ddex_IsoDate\022$\n\034clip_previ"
  "ew_start_date_time\030\003 \001(\t\022>\n\025commercial_m"
  "odel_type\030\004 \003(\0132\037.ern411.ern.CommercialM"
  "odelType\022>\n\034cover_art_preview_start_date"
  "\030\005 \001(\0132\030.ern411.ern.ddex_IsoDate\022)\n!cove"
  "r_art_preview_start_date_time\030\006 \001(\t\022-\n\024d"
  "istribution_channel\030\007 \003(\0132\017.ern411.ern.D"
  "SP\0226\n\035excluded_distribution_channel\030\010 \003("
  "\0132\017.ern411.ern.DSP\022A\n\027excluded_territory"
  "_code\030\t \003(\0132 .ern411.ern.CurrentTerritor"
  "yCode\022R\n#instant_gratification_resource_"
  "list\030\n \001(\0132%.ern411.ern.DealResourceRefe"
  "renceList\022\031\n\021is_pre_order_deal\030\013 \001(\010\022\026\n\016"
  "is_promotional\030\014 \001(\010\022%\n\035number_of_produc"
  "ts_per_carton\030\r \001(\005\022\030\n\020number_of_usages\030"
  "\016 \001(\005\0225\n\020physical_returns\030\017 \001(\0132\033.ern411"
  ".ern.PhysicalReturns\022\?\n\021price_informatio"
  "n\030\020 \003(\0132$.ern411.ern.PriceInformationWit"
  "hType\0225\n\020promotional_code\030\021 \001(\0132\033.ern411"
  ".ern.PromotionalCode\022<\n\032release_display_"
  "start_date\030\022 \001(\0132\030.ern411.ern.ddex_IsoDa"
  "te\022\'\n\037release_display_start_date_time\030\023 "
  "\001(\t\022:\n\023rights_claim_policy\030\024 \003(\0132\035.ern41"
  "1.ern.RightsClaimPolicy\022L\n\027technical_ins"
  "tantiation\030\025 \001(\0132+.ern411.ern.DealTermsT"
  "echnicalInstantiation\0228\n\016territory_code\030"
  "\026 \003(\0132 .ern411.ern.CurrentTerritoryCode\022"
  "B\n track_listing_preview_start_date\030\027 \001("
  "\0132\030.ern411.ern.ddex_IsoDate\022-\n%track_lis"
  "ting_preview_start_date_time\030\030 \001(\t\0221\n\010us"
  "e_type\030\031 \003(\0132\037.ern411.ern.DiscoverableUs"
  "eType\0227\n\017validity_period\030\032 \003(\0132\036.ern411."
  "ern.PeriodWithoutFlags\"\265\001\n\037DealTermsTech"
  "nicalInstantiation\022%\n\010bit_rate\030\001 \001(\0132\023.e"
  "rn411.ern.BitRate\022+\n\013coding_type\030\002 \001(\0132\026"
  ".ern411.avs.CodingType\022>\n\025video_definiti"
  "on_type\030\003 \001(\0132\037.ern411.avs.VideoDefiniti"
  "onType\"s\n\005Deity\022C\n\031applicable_territory_"
  "code\030\001 \001(\0132 .ern411.avs.CurrentTerritory"
  "Code\022\022\n\nis_default\030\002 \001(\010\022\021\n\text_value\030\003 "
  "\001(\t\"\300\001\n\024DelegatedUsageRights\0227\n\033period_o"
  "f_rights_delegation\030\001 \001(\0132\022.ern411.ern.P"
  "eriod\022H\n\036territory_of_rights_delegation\030"
  "\002 \003(\0132 .ern411.ern.CurrentTerritoryCode\022"
  "%\n\010use_type\030\003 \003(\0132\023.ern411.ern.UseType\"\250"
  "\001\n\030DescriptionWithTerritory\022C\n\031applicabl"
  "e_territory_code\030\001 \001(\0132 .ern411.avs.Curr"
  "entTerritoryCode\022\022\n\nis_default\030\002 \001(\010\022 \n\030"
  "language_and_script_code\030\003 \001(\t\022\021\n\text_va"
  "lue\030\004 \001(\t\"\351\005\n\013DetailedCue\0225\n\020additional_"
  "title\030\001 \003(\0132\033.ern411.ern.AdditionalTitle"
  "\022!\n\006c_line\030\002 \003(\0132\021.ern411.ern.CLine\022,\n\013c"
  "ontributor\030\003 \003(\0132\027.ern411.ern.Contributo"
  "r\022)\n\ncue_origin\030\004 \001(\0132\025.ern411.ern.CueOr"
  "igin\0220\n\016cue_theme_type\030\005 \001(\0132\030.ern411.er"
  "n.CueThemeType\022,\n\014cue_use_type\030\006 \001(\0132\026.e"
  "rn411.ern.CueUseType\022G\n\032cue_visual_perce"
  "ption_type\030\007 \001(\0132#.ern411.ern.CueVisualP"
  "erceptionType\0220\n\016cue_vocal_type\030\010 \001(\0132\030."
  "ern411.ern.CueVocalType\022/\n\rdisplay_title"
  "\030\t \003(\0132\030.ern411.ern.DisplayTitle\0228\n\022disp"
  "lay_title_text\030\n \003(\0132\034.ern411.ern.Displa"
  "yTitleText\022\020\n\010duration\030\013 \001(\t\022\020\n\010end_time"
  "\030\014 \001(\t\022\033\n\023has_musical_content\030\r \001(\010\022\020\n\010i"
  "s_dance\030\016 \001(\010\022!\n\006p_line\030\017 \003(\0132\021.ern411.e"
  "rn.PLine\022+\n\013resource_id\030\020 \001(\0132\026.ern411.e"
  "rn.ResourceId\022\022\n\nstart_time\030\021 \001(\t\022*\n\007wor"
  "k_id\030\022 \001(\0132\031.ern411.ern.MusicalWorkId\"\270\001"
  "\n\020DetailedCueSheet\022$\n\003cue\030\001 \003(\0132\027.ern411"
  ".ern.DetailedCue\022/\n\014cue_sheet_id\030\002 \003(\0132\031"
  ".ern411.ern.ProprietaryId\022\033\n\023cue_sheet_r"
  "eference\030\003 \001(\t\0220\n\016cue_sheet_type\030\004 \001(\0132\030"
  ".ern411.ern.CueSheetType\"G\n\024DetailedCueS"
  "heetList\022/\n\tcue_sheet\030\001 \003(\0132\034.ern411.ern"
  ".DetailedCueSheet\"\261\001\n\017DetailedHashSum\0223\n"
  "\talgorithm\030\001 \001(\0132 .ern411.ern.HashSumAlg"
  "orithmType\022-\n\tdata_type\030\002 \001(\0132\032.ern411.a"
  "vs.BinaryDataType\022\026\n\016hash_sum_value\030\003 \001("
  "\t\022\021\n\tparameter\030\004 \001(\t\022\017\n\007version\030\005 \001(\t\"\250\001"
  "\n\017DetailedPartyId\022\030\n\020cisac_society_id\030\001 "
  "\001(\t\022\017\n\007d_p_i_d\030\002 \001(\t\022\r\n\005i_p_n\030\003 \001(\t\022\017\n\007i"
  "_s_n_i\030\004 \001(\t\022\027\n\017ipi_name_number\030\005 \001(\t\0221\n"
  "\016proprietary_id\030\006 \003(\0132\031.ern411.ern.Propr"
  "ietaryId\"\367\002\n\033DetailedResourceContributor"
  "\0223\n\017display_credits\030\001 \003(\0132\032.ern411.ern.D"
  "isplayCredits\022(\n has_made_contracted_con"
  "tribution\030\002 \001(\010\022&\n\036has_made_featured_con"
  "tribution\030\003 \001(\010\0223\n\017instrument_type\030\004 \003(\013"
  "2\032.ern411.ern.InstrumentType\022-\n\010party_id"
  "\030\005 \003(\0132\033.ern411.ern.DetailedPartyId\022)\n\np"
  "arty_name\030\006 \003(\0132\025.ern411.ern.PartyName\022)"
  "\n\004role\030\007 \003(\0132\033.ern411.ern.ContributorRol"
  "e\022\027\n\017sequence_number\030\010 \001(\005\"\205\001\n\023Discovera"
  "bleUseType\022\027\n\017is_discoverable\030\001 \001(\010\022\021\n\tn"
  "amespace\030\002 \001(\t\022\032\n\022user_defined_value\030\003 \001"
  "(\t\022&\n\text_value\030\004 \001(\0132\023.ern411.avs.UseTy"
  "pe\"\200\002\n\rDisplayArtist\022\036\n\026artist_party_ref"
  "erence\030\001 \001(\t\0222\n\rartistic_role\030\002 \003(\0132\033.er"
  "n411.ern.ContributorRole\022:\n\023display_arti"
  "st_role\030\003 \001(\0132\035.ern411.ern.DisplayArtist"
  "Role\022\027\n\017sequence_number\030\004 \001(\005\022F\n\031title_d"
  "isplay_information\030\005 \003(\0132#.ern411.ern.Ti"
  "tleDisplayInformation\"\254\001\n\034DisplayArtistN"
  "ameWithDefault\022C\n\031applicable_territory_c"
  "ode\030\001 \001(\0132 .ern411.avs.CurrentTerritoryC"
  "ode\022\022\n\nis_default\030\002 \001(\010\022 \n\030language_and_"
  "script_code\030\003 \001(\t\022\021\n\text_value\030\004 \001(\t\"t\n\021"
  "DisplayArtistRole\022\021\n\tnamespace\030\001 \001(\t\022\032\n\022"
  "user_defined_value\030\002 \001(\t\0220\n\text_value\030\003 "
  "\001(\0132\035.ern411.avs.DisplayArtistRole\"\353\001\n\016D"
  "isplayCredits\022C\n\031applicable_territory_co"
  "de\030\001 \001(\0132 .ern411.avs.CurrentTerritoryCo"
  "de\022\034\n\024display_credit_party\030\002 \001(\t\022\033\n\023disp"
  "lay_credit_text\030\003 \001(\t\022\022\n\nis_default\030\004 \001("
  "\010\022 \n\030language_and_script_code\030\005 \001(\t\022#\n\033n"
  "ame_used_in_display_credit\030\006 \001(\t\"\216\001\n\017Dis"
  "playSubTitle\022\035\n\025is_displayed_in_title\030\001 "
  "\001(\010\022\027\n\017sequence_number\030\002 \001(\005\0220\n\016sub_titl"
  "e_type\030\003 \001(\0132\030.ern411.avs.SubTitleType\022\021"
  "\n\text_value\030\004 \001(\t\"\315\001\n\014DisplayTitle\022C\n\031ap"
  "plicable_territory_code\030\001 \001(\0132 .ern411.a"
  "vs.CurrentTerritoryCode\022\022\n\nis_default\030\002 "
  "\001(\010\022 \n\030language_and_script_code\030\003 \001(\t\022.\n"
  "\tsub_title\030\004 \003(\0132\033.ern411.ern.DisplaySub"
  "Title\022\022\n\ntitle_text\030\005 \001(\t\"\240\001\n\020DisplayTit"
  "leText\022C\n\031applicable_territory_code\030\001 \001("
  "\0132 .ern411.avs.CurrentTerritoryCode\022\022\n\ni"
  "s_default\030\002 \001(\010\022 \n\030language_and_script_c"
  "ode\030\003 \001(\t\022\021\n\text_value\030\004 \001(\t\"\217\001\n\027Distrib"
  "utionChannelPage\022#\n\tpage_name\030\001 \001(\0132\020.er"
  "n411.ern.Name\022-\n\010party_id\030\002 \003(\0132\033.ern411"
  ".ern.DetailedPartyId\022\r\n\005u_r_l\030\003 \001(\t\022\021\n\tu"
  "ser_name\030\004 \001(\t\"\366\001\n\tEventDate\022\?\n\031applicab"
  "le_territory_code\030\001 \001(\0132\034.ern411.avs.All"
  "TerritoryCode\022\020\n\010is_after\030\002 \001(\010\022\026\n\016is_ap"
  "proximate\030\003 \001(\010\022\021\n\tis_before\030\004 \001(\010\022 \n\030la"
  "nguage_and_script_code\030\005 \001(\t\022\034\n\024location"
  "_description\030\006 \001(\t\022+\n\text_value\030\007 \001(\0132\030."
  "ern411.ern.ddex_IsoDate\"\325\001\n\rEventDateTim"
  "e\022\020\n\010is_after\030\001 \001(\010\022\026\n\016is_approximate\030\002 "
  "\001(\010\022\021\n\tis_before\030\003 \001(\010\022 \n\030language_and_s"
  "cript_code\030\004 \001(\t\022\034\n\024location_description"
  "\030\005 \001(\t\0224\n\016territory_code\030\006 \001(\0132\034.ern411."
  "avs.AllTerritoryCode\022\021\n\text_value\030\007 \001(\t\""
  "\307\001\n\031EventDateTimeWithoutFlags\022\?\n\031applica"
  "ble_territory_code\030\001 \001(\0132\034.ern411.avs.Al"
  "lTerritoryCode\022\026\n\016is_approximate\030\002 \001(\010\022 "
  "\n\030language_and_script_code\030\003 \001(\t\022\034\n\024loca"
  "tion_description\030\004 \001(\t\022\021\n\text_value\030\005 \001("
  "\t\"\260\001\n\024EventDateWithDefault\022\?\n\031applicable"
  "_territory_code\030\001 \001(\0132\034.ern411.avs.AllTe"
  "rritoryCode\022\026\n\016is_approximate\030\002 \001(\010\022\022\n\ni"
  "s_default\030\003 \001(\010\022+\n\text_value\030\004 \001(\0132\030.ern"
  "411.ern.ddex_IsoDate\"\335\001\n\025EventDateWithou"
  "tFlags\022\?\n\031applicable_territory_code\030\001 \001("
  "\0132\034.ern411.avs.AllTerritoryCode\022\026\n\016is_ap"
  "proximate\030\002 \001(\010\022 \n\030language_and_script_c"
  "ode\030\003 \001(\t\022\034\n\024location_description\030\004 \001(\t\022"
  "+\n\text_value\030\005 \001(\0132\030.ern411.ern.ddex_Iso"
  "Date\"N\n\006Extent\0221\n\017unit_of_measure\030\001 \001(\0132"
  "\030.ern411.avs.UnitOfExtent\022\021\n\text_value\030\002"
  " \001(\001\"\335\001\n\024ExternalResourceLink\022\025\n\rexterna"
  "l_link\030\001 \001(\t\022Q\n\037externally_linked_resour"
  "ce_type\030\002 \003(\0132(.ern411.ern.ExternallyLin"
  "kedResourceType\022\023\n\013file_format\030\003 \001(\t\022\r\n\005"
  "u_r_l\030\004 \003(\t\0227\n\017validity_period\030\005 \001(\0132\036.e"
  "rn411.ern.PeriodWithoutFlags\"\212\001\n\034Externa"
  "llyLinkedResourceType\022\021\n\tnamespace\030\001 \001(\t"
  "\022\032\n\022user_defined_value\030\002 \001(\t\022;\n\text_valu"
  "e\030\003 \001(\0132(.ern411.avs.ExternallyLinkedRes"
  "ourceType\"W\n\004File\022\021\n\tfile_size\030\001 \001(\001\022-\n\010"
  "hash_sum\030\002 \001(\0132\033.ern411.ern.DetailedHash"
  "Sum\022\r\n\005u_r_i\030\003 \001(\t\"\324\001\n\013Fingerprint\0227\n\tal"
  "gorithm\030\001 \001(\0132$.ern411.ern.FingerprintAl"
  "gorithmType\022-\n\tdata_type\030\002 \001(\0132\032.ern411."
  "avs.BinaryDataType\022\036\n\004file\030\003 \001(\0132\020.ern41"
  "1.ern.File\022\031\n\021fingerprint_value\030\004 \001(\t\022\021\n"
  "\tparameter\030\005 \001(\t\022\017\n\007version\030\006 \001(\t\"\202\001\n\030Fi"
  "ngerprintAlgorithmType\022\021\n\tnamespace\030\001 \001("
  "\t\022\032\n\022user_defined_value\030\002 \001(\t\0227\n\text_val"
  "ue\030\003 \001(\0132$.ern411.avs.FingerprintAlgorit"
  "hmType\"\234\001\n\024FirstPublicationDate\022C\n\031appli"
  "cable_territory_code\030\001 \001(\0132 .ern411.avs."
  "CurrentTerritoryCode\022\022\n\nis_default\030\002 \001(\010"
  "\022+\n\text_value\030\003 \001(\0132\030.ern411.ern.ddex_Is"
  "oDate\"T\n\tFrameRate\0224\n\017unit_of_measure\030\001 "
  "\001(\0132\033.ern411.avs.UnitOfFrameRate\022\021\n\text_"
  "value\030\002 \001(\001\"\317\001\n\034FulfillmentDateWithTerri"
  "tory\022C\n\031applicable_territory_code\030\001 \001(\0132"
  " .ern411.avs.CurrentTerritoryCode\0222\n\020ful"
  "fillment_date\030\002 \001(\0132\030.ern411.ern.ddex_Is"
  "oDate\022\022\n\nis_default\030\003 \001(\010\022\"\n\032resource_re"
  "lease_reference\030\004 \003(\t\"\266\001\n\022GenreWithTerri"
  "tory\022C\n\031applicable_territory_code\030\001 \001(\0132"
  " .ern411.avs.CurrentTerritoryCode\022\022\n\ngen"
  "re_text\030\002 \001(\t\022\022\n\nis_default\030\003 \001(\010\022 \n\030lan"
  "guage_and_script_code\030\004 \001(\t\022\021\n\tsub_genre"
  "\030\005 \001(\t\"z\n\024HashSumAlgorithmType\022\021\n\tnamesp"
  "ace\030\001 \001(\t\022\032\n\022user_defined_value\030\002 \001(\t\0223\n"
  "\text_value\030\003 \001(\0132 .ern411.avs.HashSumAlg"
  "orithmType\"\201\n\n\005Image\0225\n\020additional_title"
  "\030\001 \003(\0132\033.ern411.ern.AdditionalTitle\022,\n\006c"
  "_line\030\002 \003(\0132\034.ern411.ern.CLineWithDefaul"
  "t\022\037\n\027contains_hidden_content\030\003 \001(\010\022,\n\013co"
  "ntributor\030\004 \003(\0132\027.ern411.ern.Contributor"
  "\022:\n\rcourtesy_line\030\005 \003(\0132#.ern411.ern.Cou"
  "rtesyLineWithDefault\0228\n\rcreation_date\030\006 "
  "\001(\0132!.ern411.ern.EventDateWithoutFlags\0229"
  "\n\013description\030\007 \003(\0132$.ern411.ern.Descrip"
  "tionWithTerritory\0221\n\016display_artist\030\010 \003("
  "\0132\031.ern411.ern.DisplayArtist\022E\n\023display_"
  "artist_name\030\t \003(\0132(.ern411.ern.DisplayAr"
  "tistNameWithDefault\022/\n\rdisplay_title\030\n \003"
  "(\0132\030.ern411.ern.DisplayTitle\0228\n\022display_"
  "title_text\030\013 \003(\0132\034.ern411.ern.DisplayTit"
  "leText\022H\n\026first_publication_date\030\014 \003(\0132("
  ".ern411.ern.FulfillmentDateWithTerritory"
  "\022\027\n\017is_supplemental\030\r \001(\010\022 \n\030language_an"
  "d_script_code\030\016 \001(\t\022K\n\025parental_warning_"
  "type\030\017 \003(\0132,.ern411.ern.ParentalWarningT"
  "ypeWithTerritory\0223\n\017related_release\030\020 \003("
  "\0132\032.ern411.ern.RelatedRelease\0225\n\020related"
  "_resource\030\021 \003(\0132\033.ern411.ern.RelatedReso"
  "urce\0226\n\013resource_id\030\022 \003(\0132!.ern411.ern.R"
  "esourceProprietaryId\022\032\n\022resource_referen"
  "ce\030\023 \001(\t\022H\n\032resource_rights_controller\030\024"
  " \003(\0132$.ern411.ern.ResourceRightsControll"
  "er\022<\n\021technical_details\030\025 \003(\0132!.ern411.e"
  "rn.TechnicalImageDetails\022#\n\004type\030\026 \001(\0132\025"
  ".ern411.ern.ImageType\022-\n\014version_type\030\027 "
  "\003(\0132\027.ern411.ern.VersionType\022@\n\026work_rig"
  "hts_controller\030\030 \003(\0132 .ern411.ern.WorkRi"
  "ghtsController\"\177\n\016ImageCodecType\022\021\n\tname"
  "space\030\001 \001(\t\022\032\n\022user_defined_value\030\002 \001(\t\022"
  "\017\n\007version\030\003 \001(\t\022-\n\text_value\030\004 \001(\0132\032.er"
  "n411.avs.ImageCodecType\"d\n\tImageType\022\021\n\t"
  "namespace\030\001 \001(\t\022\032\n\022user_defined_value\030\002 "
  "\001(\t\022(\n\text_value\030\003 \001(\0132\025.ern411.avs.Imag"
  "eType\"n\n\016InstrumentType\022\021\n\tnamespace\030\001 \001"
  "(\t\022\032\n\022user_defined_value\030\002 \001(\t\022-\n\text_va"
  "lue\030\003 \001(\0132\032.ern411.avs.InstrumentType\"6\n"
  "\nIsCredited\022\025\n\rmay_be_shared\030\001 \001(\010\022\021\n\tex"
  "t_value\030\002 \001(\010\"\245\001\n\025KeywordsWithTerritory\022"
  "C\n\031applicable_territory_code\030\001 \001(\0132 .ern"
  "411.avs.CurrentTerritoryCode\022\022\n\nis_defau"
  "lt\030\002 \001(\010\022 \n\030language_and_script_code\030\003 \001"
  "(\t\022\021\n\text_value\030\004 \001(\t\"\352\001\n\036LinkedReleaseR"
  "esourceReference\022 \n\030language_and_script_"
  "code\030\001 \001(\t\0225\n\020link_description\030\002 \001(\0132\033.e"
  "rn411.avs.LinkDescription\022\021\n\tnamespace\030\003"
  " \001(\t\022\032\n\022user_defined_value\030\004 \001(\t\022@\n\text_"
  "value\030\005 \001(\0132-.ern411.ern.ddex_LocalResou"
  "rceAnchorReference\"\240\001\n\020MarketingComment\022"
  "C\n\031applicable_territory_code\030\001 \001(\0132 .ern"
  "411.avs.CurrentTerritoryCode\022\022\n\nis_defau"
  "lt\030\002 \001(\010\022 \n\030language_and_script_code\030\003 \001"
  "(\t\022\021\n\text_value\030\004 \001(\t\"Z\n\021MessageAuditTra"
  "il\022E\n\031message_audit_trail_event\030\001 \003(\0132\"."
  "ern411.ern.MessageAuditTrailEvent\"v\n\026Mes"
  "sageAuditTrailEvent\022\021\n\tdate_time\030\001 \001(\t\022I"
  "\n\032messaging_party_descriptor\030\002 \001(\0132%.ern"
  "411.ern.MessagingPartyWithoutCode\"\271\003\n\rMe"
  "ssageHeader\022:\n\023message_audit_trail\030\001 \001(\013"
  "2\035.ern411.ern.MessageAuditTrail\022<\n\024messa"
  "ge_control_type\030\002 \001(\0132\036.ern411.avs.Messa"
  "geControlType\022!\n\031message_created_date_ti"
  "me\030\003 \001(\t\022\031\n\021message_file_name\030\004 \001(\t\022\022\n\nm"
  "essage_id\030\005 \001(\t\022@\n\021message_recipient\030\006 \003"
  "(\0132%.ern411.ern.MessagingPartyWithoutCod"
  "e\022=\n\016message_sender\030\007 \001(\0132%.ern411.ern.M"
  "essagingPartyWithoutCode\022\031\n\021message_thre"
  "ad_id\030\010 \001(\t\022@\n\021sent_on_behalf_of\030\t \001(\0132%"
  ".ern411.ern.MessagingPartyWithoutCode\"y\n"
  "\031MessagingPartyWithoutCode\022\020\n\010party_id\030\001"
  " \001(\t\0224\n\nparty_name\030\002 \001(\0132 .ern411.ern.Pa"
  "rtyNameWithoutCode\022\024\n\014trading_name\030\003 \001(\t"
  "\"\236\001\n\rMusicalWorkId\022\037\n\027composer_catalog_n"
  "umber\030\001 \003(\t\022\017\n\007i_s_w_c\030\002 \001(\t\022\023\n\013is_repla"
  "ced\030\003 \001(\010\022\023\n\013opus_number\030\004 \001(\t\0221\n\016propri"
  "etary_id\030\005 \003(\0132\031.ern411.ern.ProprietaryI"
  "d\";\n\004Name\022 \n\030language_and_script_code\030\001 "
  "\001(\t\022\021\n\text_value\030\002 \001(\t\"\360\004\n\021NewReleaseMes"
  "sage\022-\n\014chapter_list\030\001 \001(\0132\027.ern411.ern."
  "ChapterList\0228\n\016cue_sheet_list\030\002 \001(\0132 .er"
  "n411.ern.DetailedCueSheetList\022\'\n\tdeal_li"
  "st\030\003 \001(\0132\024.ern411.ern.DealList\022 \n\030langua"
  "ge_and_script_code\030\004 \001(\t\0221\n\016message_head"
  "er\030\005 \001(\0132\031.ern411.ern.MessageHeader\022)\n\np"
  "arty_list\030\006 \001(\0132\025.ern411.ern.PartyList\022-"
  "\n\014release_list\030\007 \001(\0132\027.ern411.ern.Releas"
  "eList\022V\n\"release_profile_variant_version"
  "_id\030\010 \001(\0132*.ern411.avs.ReleaseProfileVar"
  "iantVersionId\022G\n\032release_profile_version"
  "_id\030\t \001(\0132#.ern411.avs.ReleaseProfileVer"
  "sionId\022/\n\rresource_list\030\n \001(\0132\030.ern411.e"
  "rn.ResourceList\022H\n\032supplemental_document"
  "_list\030\013 \001(\0132$.ern411.ern.SupplementalDoc"
  "umentList\"\211\001\n\023OperatingSystemType\022\021\n\tnam"
  "espace\030\001 \001(\t\022\032\n\022user_defined_value\030\002 \001(\t"
  "\022\017\n\007version\030\003 \001(\t\0222\n\text_value\030\004 \001(\0132\037.e"
  "rn411.avs.OperatingSystemType\"\220\001\n\005PLine\022"
  " \n\030language_and_script_code\030\001 \001(\t\022\026\n\016p_l"
  "ine_company\030\002 \001(\t\022\023\n\013p_line_text\030\003 \001(\t\022*"
  "\n\013p_line_type\030\004 \001(\0132\025.ern411.avs.PLineTy"
  "pe\022\014\n\004year\030\005 \001(\r\"\310\001\n\020PLineWithDefault\022C\n"
  "\031applicable_territory_code\030\001 \001(\0132 .ern41"
  "1.avs.CurrentTerritoryCode\022\022\n\nis_default"
  "\030\002 \001(\010\022 \n\030language_and_script_code\030\003 \001(\t"
  "\022\026\n\016p_line_company\030\004 \001(\t\022\023\n\013p_line_text\030"
  "\005 \001(\t\022\014\n\004year\030\006 \001(\r\"\336\001\n ParentalWarningT"
  "ypeWithTerritory\022C\n\031applicable_territory"
  "_code\030\001 \001(\0132 .ern411.avs.CurrentTerritor"
  "yCode\022\022\n\nis_default\030\002 \001(\010\022\021\n\tnamespace\030\003"
  " \001(\t\022\032\n\022user_defined_value\030\004 \001(\t\0222\n\text_"
  "value\030\005 \001(\0132\037.ern411.avs.ParentalWarning"
  "Type\"\203\002\n\005Party\022,\n\013affiliation\030\001 \003(\0132\027.er"
  "n411.ern.Affiliation\022\033\n\023artist_profile_p"
  "age\030\002 \003(\t\022-\n\010party_id\030\003 \003(\0132\033.ern411.ern"
  ".DetailedPartyId\0226\n\nparty_name\030\004 \003(\0132\".e"
  "rn411.ern.PartyNameWithTerritory\022\027\n\017part"
  "y_reference\030\005 \001(\t\022/\n\rrelated_party\030\006 \003(\013"
  "2\030.ern411.ern.RelatedParty\"-\n\tPartyList\022"
  " \n\005party\030\001 \003(\0132\021.ern411.ern.Party\"\325\002\n\tPa"
  "rtyName\022*\n\020abbreviated_name\030\001 \001(\0132\020.ern4"
  "11.ern.Name\022#\n\tfull_name\030\002 \001(\0132\020.ern411."
  "ern.Name\022#\n\033full_name_ascii_transcribed\030"
  "\003 \001(\t\022+\n\021full_name_indexed\030\004 \001(\0132\020.ern41"
  "1.ern.Name\022\"\n\010key_name\030\005 \001(\0132\020.ern411.er"
  "n.Name\022 \n\030language_and_script_code\030\006 \001(\t"
  "\022.\n\024names_after_key_name\030\007 \001(\0132\020.ern411."
  "ern.Name\022/\n\025names_before_key_name\030\010 \001(\0132"
  "\020.ern411.ern.Name\"\352\003\n\026PartyNameWithTerri"
  "tory\022*\n\020abbreviated_name\030\001 \001(\0132\020.ern411."
  "ern.Name\022C\n\031applicable_territory_code\030\002 "
  "\001(\0132 .ern411.avs.CurrentTerritoryCode\022#\n"
  "\tfull_name\030\003 \001(\0132\020.ern411.ern.Name\022#\n\033fu"
  "ll_name_ascii_transcribed\030\004 \001(\t\022+\n\021full_"
  "name_indexed\030\005 \001(\0132\020.ern411.ern.Name\022\025\n\r"
  "is_legal_name\030\006 \001(\010\022\023\n\013is_nickname\030\007 \001(\010"
  "\022\025\n\ris_stage_name\030\010 \001(\010\022\"\n\010key_name\030\t \001("
  "\0132\020.ern411.ern.Name\022 \n\030language_and_scri"
  "pt_code\030\n \001(\t\022.\n\024names_after_key_name\030\013 "
  "\001(\0132\020.ern411.ern.Name\022/\n\025names_before_ke"
  "y_name\030\014 \001(\0132\020.ern411.ern.Name\"\322\001\n\024Party"
  "NameWithoutCode\022\030\n\020abbreviated_name\030\001 \001("
  "\t\022\021\n\tfull_name\030\002 \001(\t\022#\n\033full_name_ascii_"
  "transcribed\030\003 \001(\t\022\031\n\021full_name_indexed\030\004"
  " \001(\t\022\020\n\010key_name\030\005 \001(\t\022\034\n\024names_after_ke"
  "y_name\030\006 \001(\t\022\035\n\025names_before_key_name\030\007 "
  "\001(\t\"\223\001\n\025PartyRelationshipType\022\025\n\rmay_be_"
  "shared\030\001 \001(\010\022\021\n\tnamespace\030\002 \001(\t\022\032\n\022user_"
  "defined_value\030\003 \001(\t\0224\n\text_value\030\004 \001(\0132!"
  ".ern411.avs.PartyRelationshipType\"=\n\nPer"
  "centage\022\034\n\024has_max_value_of_one\030\001 \001(\010\022\021\n"
  "\text_value\030\002 \001(\001\"\302\001\n\006Period\022\'\n\010end_date\030"
  "\001 \001(\0132\025.ern411.ern.EventDate\0220\n\rend_date"
  "_time\030\002 \001(\0132\031.ern411.ern.EventDateTime\022)"
  "\n\nstart_date\030\003 \001(\0132\025.ern411.ern.EventDat"
  "e\0222\n\017start_date_time\030\004 \001(\0132\031.ern411.ern."
  "EventDateTime\"\376\001\n\022PeriodWithoutFlags\0223\n\010"
  "end_date\030\001 \001(\0132!.ern411.ern.EventDateWit"
  "houtFlags\022<\n\rend_date_time\030\002 \001(\0132%.ern41"
  "1.ern.EventDateTimeWithoutFlags\0225\n\nstart"
  "_date\030\003 \001(\0132!.ern411.ern.EventDateWithou"
  "tFlags\022>\n\017start_date_time\030\004 \001(\0132%.ern411"
  ".ern.EventDateTimeWithoutFlags\"w\n\017Physic"
  "alReturns\022B\n latest_date_for_physical_re"
  "turns\030\001 \001(\0132\030.ern411.ern.ddex_IsoDate\022 \n"
  "\030physical_returns_allowed\030\002 \001(\010\"=\n\006Prefi"
  "x\022 \n\030language_and_script_code\030\001 \001(\t\022\021\n\te"
  "xt_value\030\002 \001(\t\"{\n\016PreviewDetails\022\033\n\023bott"
  "om_right_corner\030\001 \001(\t\0223\n\017expression_type"
  "\030\002 \001(\0132\032.ern411.avs.ExpressionType\022\027\n\017to"
  "p_left_corner\030\003 \001(\t\"K\n\005Price\022/\n\rcurrency"
  "_code\030\001 \001(\0132\030.ern411.avs.CurrencyCode\022\021\n"
  "\text_value\030\002 \001(\001\"\243\002\n\030PriceInformationWit"
  "hType\022>\n#bulk_order_wholesale_price_per_"
  "unit\030\001 \001(\0132\021.ern411.ern.Price\022)\n\nprice_c"
  "ode\030\002 \001(\0132\025.ern411.ern.PriceType\0224\n\npric"
  "e_type\030\003 \001(\0132 .ern411.avs.PriceInformati"
  "onType\0221\n\026suggested_retail_price\030\004 \001(\0132\021"
  ".ern411.ern.Price\0223\n\030wholesale_price_per"
  "_unit\030\005 \001(\0132\021.ern411.ern.Price\"H\n\tPriceT"
  "ype\022\021\n\tnamespace\030\001 \001(\t\022(\n\text_value\030\002 \001("
  "\0132\025.ern411.avs.PriceType\"7\n\017PromotionalC"
  "ode\022\021\n\tnamespace\030\001 \001(\t\022\021\n\text_value\030\002 \001("
  "\t\"5\n\rProprietaryId\022\021\n\tnamespace\030\001 \001(\t\022\021\n"
  "\text_value\030\002 \001(\t\"\235\001\n\023PurgeReleaseMessage"
  "\022 \n\030language_and_script_code\030\001 \001(\t\0221\n\016me"
  "ssage_header\030\002 \001(\0132\031.ern411.ern.MessageH"
  "eader\0221\n\016purged_release\030\003 \001(\0132\031.ern411.e"
  "rn.PurgedRelease\"\232\001\n\rPurgedRelease\022<\n\013co"
  "ntributor\030\001 \003(\0132\'.ern411.ern.DetailedRes"
  "ourceContributor\022)\n\nrelease_id\030\002 \001(\0132\025.e"
  "rn411.ern.ReleaseId\022 \n\005title\030\003 \003(\0132\021.ern"
  "411.ern.Title\"`\n\007Purpose\022\021\n\tnamespace\030\001 "
  "\001(\t\022\032\n\022user_defined_value\030\002 \001(\t\022&\n\text_v"
  "alue\030\003 \001(\0132\023.ern411.avs.Purpose\"r\n\004Raga\022"
  "C\n\031applicable_territory_code\030\001 \001(\0132 .ern"
  "411.avs.CurrentTerritoryCode\022\022\n\nis_defau"
  "lt\030\002 \001(\010\022\021\n\text_value\030\003 \001(\t\"j\n\014RatingAge"
  "ncy\022\021\n\tnamespace\030\001 \001(\t\022\032\n\022user_defined_v"
  "alue\030\002 \001(\t\022+\n\text_value\030\003 \001(\0132\030.ern411.a"
  "vs.RatingAgency\"=\n\006Reason\022 \n\030language_an"
  "d_script_code\030\001 \001(\t\022\021\n\text_value\030\002 \001(\t\"y"
  "\n\014RelatedParty\022%\n\035party_related_party_re"
  "ference\030\001 \001(\t\022B\n\027party_relationship_type"
  "\030\002 \001(\0132!.ern411.ern.PartyRelationshipTyp"
  "e\"\253\004\n\016RelatedRelease\0225\n\020additional_title"
  "\030\001 \003(\0132\033.ern411.ern.AdditionalTitle\022E\n\023d"
  "isplay_artist_name\030\002 \003(\0132(.ern411.ern.Di"
  "splayArtistNameWithDefault\022/\n\rdisplay_ti"
  "tle\030\003 \003(\0132\030.ern411.ern.DisplayTitle\0228\n\022d"
  "isplay_title_text\030\004 \003(\0132\034.ern411.ern.Dis"
  "playTitleText\022@\n\025original_release_date\030\005"
  " \001(\0132!.ern411.ern.EventDateWithoutFlags\022"
  "7\n\014release_date\030\006 \001(\0132!.ern411.ern.Event"
  "DateWithoutFlags\022)\n\nrelease_id\030\007 \001(\0132\025.e"
  "rn411.ern.ReleaseId\022B\n\027release_label_ref"
  "erence\030\010 \003(\0132!.ern411.ern.ReleaseLabelRe"
  "ference\022F\n\031release_relationship_type\030\t \001"
  "(\0132#.ern411.ern.ReleaseRelationshipType\""
  "\327\001\n\017RelatedResource\022)\n\nrelease_id\030\001 \001(\0132"
  "\025.ern411.ern.ReleaseId\022+\n#resource_relat"
  "ed_resource_reference\030\002 \001(\t\022H\n\032resource_"
  "relationship_type\030\003 \001(\0132$.ern411.avs.Res"
  "ourceRelationshipType\022\"\n\006timing\030\004 \003(\0132\022."
  "ern411.ern.Timing\"\371\014\n\007Release\0225\n\020additio"
  "nal_title\030\001 \003(\0132\033.ern411.ern.AdditionalT"
  "itle\022[\n\035administrating_record_company\030\002 "
  "\003(\01324.ern411.ern.AdministratingRecordCom"
  "panyWithReference\022\'\n\tav_rating\030\003 \003(\0132\024.e"
  "rn411.ern.AvRating\022,\n\006c_line\030\004 \003(\0132\034.ern"
  "411.ern.CLineWithDefault\022:\n\rcourtesy_lin"
  "e\030\005 \003(\0132#.ern411.ern.CourtesyLineWithDef"
  "ault\022 \n\005deity\030\006 \003(\0132\021.ern411.ern.Deity\0221"
  "\n\016display_artist\030\007 \003(\0132\031.ern411.ern.Disp"
  "layArtist\022E\n\023display_artist_name\030\010 \003(\0132("
  ".ern411.ern.DisplayArtistNameWithDefault"
  "\022/\n\rdisplay_title\030\t \003(\0132\030.ern411.ern.Dis"
  "playTitle\0228\n\022display_title_text\030\n \003(\0132\034."
  "ern411.ern.DisplayTitleText\022\020\n\010duration\030"
  "\013 \001(\t\022@\n\026external_resource_link\030\014 \003(\0132 ."
  "ern411.ern.ExternalResourceLink\022-\n\005genre"
  "\030\r \003(\0132\036.ern411.ern.GenreWithTerritory\022 "
  "\n\030hi_res_music_description\030\016 \001(\t\022\026\n\016is_c"
  "ompilation\030\017 \001(\010\022\027\n\017is_hi_res_music\030\020 \001("
  "\010\022#\n\033is_multi_artist_compilation\030\021 \001(\010\022\025"
  "\n\ris_soundtrack\030\022 \001(\010\0223\n\010keywords\030\023 \003(\0132"
  "!.ern411.ern.KeywordsWithTerritory\022 \n\030la"
  "nguage_and_script_code\030\024 \001(\t\0227\n\021marketin"
  "g_comment\030\025 \003(\0132\034.ern411.ern.MarketingCo"
  "mment\022\?\n\025original_release_date\030\026 \003(\0132 .e"
  "rn411.ern.EventDateWithDefault\022,\n\006p_line"
  "\030\027 \003(\0132\034.ern411.ern.PLineWithDefault\022K\n\025"
  "parental_warning_type\030\030 \003(\0132,.ern411.ern"
  ".ParentalWarningTypeWithTerritory\022\036\n\004rag"
  "a\030\031 \003(\0132\020.ern411.ern.Raga\0223\n\017related_rel"
  "ease\030\032 \003(\0132\032.ern411.ern.RelatedRelease\0226"
  "\n\014release_date\030\033 \003(\0132 .ern411.ern.EventD"
  "ateWithDefault\022)\n\nrelease_id\030\034 \001(\0132\025.ern"
  "411.ern.ReleaseId\022B\n\027release_label_refer"
  "ence\030\035 \003(\0132!.ern411.ern.ReleaseLabelRefe"
  "rence\022\031\n\021release_reference\030\036 \001(\t\022C\n\014rele"
  "ase_type\030\037 \003(\0132-.ern411.ern.ReleaseTypeF"
  "orReleaseNotification\0221\n\016resource_group\030"
  "  \001(\0132\031.ern411.ern.ResourceGroup\0223\n\010syno"
  "psis\030! \003(\0132!.ern411.ern.SynopsisWithTerr"
  "itory\022\036\n\004tala\030\" \003(\0132\020.ern411.ern.Tala\"M\n"
  "\013ReleaseDeal\022\036\n\004deal\030\001 \003(\0132\020.ern411.ern."
  "Deal\022\036\n\026deal_release_reference\030\002 \003(\t\"\242\001\n"
  "\tReleaseId\0221\n\016catalog_number\030\001 \001(\0132\031.ern"
  "411.ern.CatalogNumber\022\r\n\005g_rid\030\002 \001(\t\022\017\n\007"
  "i_c_p_n\030\003 \001(\t\022\017\n\007i_s_r_c\030\004 \001(\t\0221\n\016propri"
  "etary_id\030\005 \003(\0132\031.ern411.ern.ProprietaryI"
  "d\"\253\002\n\025ReleaseLabelReference\022C\n\031applicabl"
  "e_territory_code\030\001 \001(\0132 .ern411.avs.Curr"
  "entTerritoryCode\022\022\n\nis_default\030\002 \001(\010\022)\n\n"
  "label_type\030\003 \001(\0132\025.ern411.avs.LabelType\022"
  " \n\030language_and_script_code\030\004 \001(\t\022\021\n\tnam"
  "espace\030\005 \001(\t\022\032\n\022user_defined_value\030\006 \001(\t"
  "\022=\n\text_value\030\007 \001(\0132*.ern411.ern.ddex_Lo"
  "calPartyAnchorReference\"d\n\013ReleaseList\022$"
  "\n\007release\030\001 \001(\0132\023.ern411.ern.Release\022/\n\r"
  "track_release\030\002 \003(\0132\030.ern411.ern.TrackRe"
  "lease\"\200\001\n\027ReleaseRelationshipType\022\021\n\tnam"
  "espace\030\001 \001(\t\022\032\n\022user_defined_value\030\002 \001(\t"
  "\0226\n\text_value\030\003 \001(\0132#.ern411.avs.Release"
  "RelationshipType\"\203\001\n!ReleaseTypeForRelea"
  "seNotification\022\021\n\tnamespace\030\001 \001(\t\022\032\n\022use"
  "r_defined_value\030\002 \001(\t\022/\n\text_value\030\003 \001(\013"
  "2\034.ern411.avs.ReleaseType_ERN4\"\245\001\n\"Resou"
  "rceContainedResourceReference\022\025\n\rduratio"
  "n_used\030\001 \001(\t\022$\n\007purpose\030\002 \001(\0132\023.ern411.e"
  "rn.Purpose\022-\n%resource_contained_resourc"
  "e_reference\030\003 \001(\t\022\023\n\013start_point\030\004 \001(\001\"\207"
  "\001\n&ResourceContainedResourceReferenceLis"
  "t\022]\n%resource_contained_resource_referen"
  "ce\030\001 \003(\0132..ern411.ern.ResourceContainedR"
  "esourceReference\"\242\005\n\rResourceGroup\0225\n\020ad"
  "ditional_title\030\001 \003(\0132\033.ern411.ern.Additi"
  "onalTitle\022-\n\014carrier_type\030\002 \003(\0132\027.ern411"
  ".ern.CarrierType\0221\n\016display_artist\030\003 \003(\013"
  "2\031.ern411.ern.DisplayArtist\022\030\n\020display_s"
  "equence\030\004 \001(\t\022/\n\rdisplay_title\030\005 \003(\0132\030.e"
  "rn411.ern.DisplayTitle\0228\n\022display_title_"
  "text\030\006 \003(\0132\034.ern411.ern.DisplayTitleText"
  "\022\020\n\010duration\030\007 \001(\t\022U\n!linked_release_res"
  "ource_reference\030\010 \003(\0132*.ern411.ern.Linke"
  "dReleaseResourceReference\022\033\n\023no_display_"
  "sequence\030\t \001(\010\022)\n\nrelease_id\030\n \001(\0132\025.ern"
  "411.ern.ReleaseId\0224\n\016resource_group\030\013 \003("
  "\0132\034.ern411.ern.ResourceSubGroup\022I\n\033resou"
  "rce_group_content_item\030\014 \003(\0132$.ern411.er"
  "n.ResourceGroupContentItem\022(\n resource_g"
  "roup_release_reference\030\r \001(\t\022\027\n\017sequence"
  "_number\030\016 \001(\005\"\324\002\n\030ResourceGroupContentIt"
  "em\022\030\n\020display_sequence\030\001 \001(\t\022\031\n\021is_bonus"
  "_resource\030\002 \001(\010\022)\n!is_instant_gratificat"
  "ion_resource\030\003 \001(\010\022\'\n\037is_pre_order_incen"
  "tive_resource\030\004 \001(\010\022U\n!linked_release_re"
  "source_reference\030\005 \003(\0132*.ern411.ern.Link"
  "edReleaseResourceReference\022\033\n\023no_display"
  "_sequence\030\006 \001(\010\022\"\n\032release_resource_refe"
  "rence\030\007 \001(\t\022\027\n\017sequence_number\030\010 \001(\005\"\200\002\n"
  "\nResourceId\0221\n\016catalog_number\030\001 \001(\0132\031.er"
  "n411.ern.CatalogNumber\022\017\n\007i_s_a_n\030\002 \001(\t\022"
  "\017\n\007i_s_b_n\030\003 \001(\t\022\017\n\007i_s_m_n\030\004 \001(\t\022\017\n\007i_s"
  "_r_c\030\005 \001(\t\022\017\n\007i_s_s_n\030\006 \001(\t\022\023\n\013is_replac"
  "ed\030\007 \001(\010\0221\n\016proprietary_id\030\010 \003(\0132\031.ern41"
  "1.ern.ProprietaryId\022\017\n\007s_i_c_i\030\t \001(\t\022\021\n\t"
  "v_i_s_a_n\030\n \001(\t\"\374\001\n\014ResourceList\022 \n\005imag"
  "e\030\001 \003(\0132\021.ern411.ern.Image\022+\n\013sheet_musi"
  "c\030\002 \003(\0132\026.ern411.ern.SheetMusic\022&\n\010softw"
  "are\030\003 \003(\0132\024.ern411.ern.Software\0223\n\017sound"
  "_recording\030\004 \003(\0132\032.ern411.ern.SoundRecor"
  "ding\022\036\n\004text\030\005 \003(\0132\020.ern411.ern.Text\022 \n\005"
  "video\030\006 \003(\0132\021.ern411.ern.Video\"_\n\025Resour"
  "ceProprietaryId\022\023\n\013is_replaced\030\001 \001(\010\0221\n\016"
  "proprietary_id\030\002 \003(\0132\031.ern411.ern.Propri"
  "etaryId\"\267\002\n\030ResourceRightsController\022@\n\026"
  "delegated_usage_rights\030\001 \003(\0132 .ern411.er"
  "n.DelegatedUsageRights\0226\n\026right_share_pe"
  "rcentage\030\002 \001(\0132\026.ern411.ern.Percentage\022\033"
  "\n\023right_share_unknown\030\003 \001(\010\022)\n!rights_co"
  "ntroller_party_reference\030\004 \001(\t\022@\n\026rights"
  "_controller_role\030\005 \003(\0132 .ern411.avs.Righ"
  "tsControllerRole\022\027\n\017sequence_number\030\006 \001("
  "\005\"\341\005\n\020ResourceSubGroup\0225\n\020additional_tit"
  "le\030\001 \003(\0132\033.ern411.ern.AdditionalTitle\022-\n"
  "\014carrier_type\030\002 \003(\0132\027.ern411.ern.Carrier"
  "Type\0221\n\016display_artist\030\003 \003(\0132\031.ern411.er"
  "n.DisplayArtist\022\030\n\020display_sequence\030\004 \001("
  "\t\022/\n\rdisplay_title\030\005 \003(\0132\030.ern411.ern.Di"
  "splayTitle\0228\n\022display_title_text\030\006 \003(\0132\034"
  ".ern411.ern.DisplayTitleText\022\020\n\010duration"
  "\030\007 \001(\t\022U\n!linked_release_resource_refere"
  "nce\030\010 \003(\0132*.ern411.ern.LinkedReleaseReso"
  "urceReference\022\033\n\023no_display_sequence\030\t \001"
  "(\010\022)\n\nrelease_id\030\n \001(\0132\025.ern411.ern.Rele"
  "aseId\0224\n\016resource_group\030\013 \003(\0132\034.ern411.e"
  "rn.ResourceSubGroup\022I\n\033resource_group_co"
  "ntent_item\030\014 \003(\0132$.ern411.ern.ResourceGr"
  "oupContentItem\022(\n resource_group_release"
  "_reference\030\r \001(\t\022:\n\023resource_group_type\030"
  "\016 \001(\0132\035.ern411.avs.ResourceGroupType\022\027\n\017"
  "sequence_number\030\017 \001(\005\"\226\001\n\021RightsClaimPol"
  "icy\022<\n\tcondition\030\001 \003(\0132).ern411.ern.Cond"
  "itionForRightsClaimPolicy\022C\n\030rights_clai"
  "m_policy_type\030\002 \001(\0132!.ern411.avs.RightsC"
  "laimPolicyType\"W\n\014SamplingRate\0224\n\017unit_o"
  "f_measure\030\001 \001(\0132\033.ern411.avs.UnitOfFrequ"
  "ency\022\021\n\text_value\030\002 \001(\001\"\231\013\n\nSheetMusic\0225"
  "\n\020additional_title\030\001 \003(\0132\033.ern411.ern.Ad"
  "ditionalTitle\022,\n\006c_line\030\002 \003(\0132\034.ern411.e"
  "rn.CLineWithDefault\022\037\n\027contains_hidden_c"
  "ontent\030\003 \001(\010\022,\n\013contributor\030\004 \003(\0132\027.ern4"
  "11.ern.Contributor\022:\n\rcourtesy_line\030\005 \003("
  "\0132#.ern411.ern.CourtesyLineWithDefault\0228"
  "\n\rcreation_date\030\006 \001(\0132!.ern411.ern.Event"
  "DateWithoutFlags\0221\n\016display_artist\030\007 \003(\013"
  "2\031.ern411.ern.DisplayArtist\022E\n\023display_a"
  "rtist_name\030\010 \003(\0132(.ern411.ern.DisplayArt"
  "istNameWithDefault\022/\n\rdisplay_title\030\t \003("
  "\0132\030.ern411.ern.DisplayTitle\0228\n\022display_t"
  "itle_text\030\n \003(\0132\034.ern411.ern.DisplayTitl"
  "eText\022H\n\026first_publication_date\030\013 \003(\0132(."
  "ern411.ern.FulfillmentDateWithTerritory\022"
  "\027\n\017is_supplemental\030\014 \001(\010\022 \n\030language_and"
  "_script_code\030\r \001(\t\0227\n\022language_of_lyrics"
  "\030\016 \001(\0132\033.ern411.avs.IsoLanguageCode\022K\n\025p"
  "arental_warning_type\030\017 \003(\0132,.ern411.ern."
  "ParentalWarningTypeWithTerritory\0223\n\017rela"
  "ted_release\030\020 \003(\0132\032.ern411.ern.RelatedRe"
  "lease\0225\n\020related_resource\030\021 \003(\0132\033.ern411"
  ".ern.RelatedResource\022f\n*resource_contain"
  "ed_resource_reference_list\030\022 \001(\01322.ern41"
  "1.ern.ResourceContainedResourceReference"
  "List\022-\n\013resource_id\030\023 \003(\0132\030.ern411.ern.S"
  "heetMusicId\022\032\n\022resource_reference\030\024 \001(\t\022"
  "H\n\032resource_rights_controller\030\025 \003(\0132$.er"
  "n411.ern.ResourceRightsController\022A\n\021tec"
  "hnical_details\030\026 \003(\0132&.ern411.ern.Techni"
  "calSheetMusicDetails\022(\n\004type\030\027 \001(\0132\032.ern"
  "411.ern.SheetMusicType\022-\n\014version_type\030\030"
  " \003(\0132\027.ern411.ern.VersionType\022*\n\007work_id"
  "\030\031 \003(\0132\031.ern411.ern.MusicalWorkId\022@\n\026wor"
  "k_rights_controller\030\032 \003(\0132 .ern411.ern.W"
  "orkRightsController\"\211\001\n\023SheetMusicCodecT"
  "ype\022\021\n\tnamespace\030\001 \001(\t\022\032\n\022user_defined_v"
  "alue\030\002 \001(\t\022\017\n\007version\030\003 \001(\t\0222\n\text_value"
  "\030\004 \001(\0132\037.ern411.avs.SheetMusicCodecType\""
  "g\n\014SheetMusicId\022\017\n\007i_s_m_n\030\001 \001(\t\022\023\n\013is_r"
  "eplaced\030\002 \001(\010\0221\n\016proprietary_id\030\003 \003(\0132\031."
  "ern411.ern.ProprietaryId\"n\n\016SheetMusicTy"
  "pe\022\021\n\tnamespace\030\001 \001(\t\022\032\n\022user_defined_va"
  "lue\030\002 \001(\t\022-\n\text_value\030\003 \001(\0132\032.ern411.av"
  "s.SheetMusicType\"p\n\020SimpleRightsType\022\021\n\t"
  "namespace\030\001 \001(\t\022\032\n\022user_defined_value\030\002 "
  "\001(\t\022-\n\text_value\030\003 \001(\0132\032.ern411.avs.Righ"
  "tsCoverage\"\221\013\n\010Software\0225\n\020additional_ti"
  "tle\030\001 \003(\0132\033.ern411.ern.AdditionalTitle\022,"
  "\n\006c_line\030\002 \003(\0132\034.ern411.ern.CLineWithDef"
  "ault\022\037\n\027contains_hidden_content\030\003 \001(\010\022,\n"
  "\013contributor\030\004 \003(\0132\027.ern411.ern.Contribu"
  "tor\022:\n\rcourtesy_line\030\005 \003(\0132#.ern411.ern."
  "CourtesyLineWithDefault\0228\n\rcreation_date"
  "\030\006 \001(\0132!.ern411.ern.EventDateWithoutFlag"
  "s\0221\n\016display_artist\030\007 \003(\0132\031.ern411.ern.D"
  "isplayArtist\022E\n\023display_artist_name\030\010 \003("
  "\0132(.ern411.ern.DisplayArtistNameWithDefa"
  "ult\022/\n\rdisplay_title\030\t \003(\0132\030.ern411.ern."
  "DisplayTitle\0228\n\022display_title_text\030\n \003(\013"
  "2\034.ern411.ern.DisplayTitleText\022H\n\026first_"
  "publication_date\030\013 \003(\0132(.ern411.ern.Fulf"
  "illmentDateWithTerritory\022\027\n\017is_supplemen"
  "tal\030\014 \001(\010\022 \n\030language_and_script_code\030\r "
  "\001(\t\022,\n\006p_line\030\016 \003(\0132\034.ern411.ern.PLineWi"
  "thDefault\022K\n\025parental_warning_type\030\017 \003(\013"
  "2,.ern411.ern.ParentalWarningTypeWithTer"
  "ritory\0223\n\017related_release\030\020 \003(\0132\032.ern411"
  ".ern.RelatedRelease\0225\n\020related_resource\030"
  "\021 \003(\0132\033.ern411.ern.RelatedResource\022f\n*re"
  "source_contained_resource_reference_list"
  "\030\022 \001(\01322.ern411.ern.ResourceContainedRes"
  "ourceReferenceList\0226\n\013resource_id\030\023 \003(\0132"
  "!.ern411.ern.ResourceProprietaryId\022\032\n\022re"
  "source_reference\030\024 \001(\t\022H\n\032resource_right"
  "s_controller\030\025 \003(\0132$.ern411.ern.Resource"
  "RightsController\022\?\n\021technical_details\030\026 "
  "\003(\0132$.ern411.ern.TechnicalSoftwareDetail"
  "s\022&\n\004type\030\027 \001(\0132\030.ern411.ern.SoftwareTyp"
  "e\022-\n\014version_type\030\030 \003(\0132\027.ern411.ern.Ver"
  "sionType\022*\n\007work_id\030\031 \003(\0132\031.ern411.ern.M"
  "usicalWorkId\022@\n\026work_rights_controller\030\032"
  " \003(\0132 .ern411.ern.WorkRightsController\"j"
  "\n\014SoftwareType\022\021\n\tnamespace\030\001 \001(\t\022\032\n\022use"
  "r_defined_value\030\002 \001(\t\022+\n\text_value\030\003 \001(\013"
  "2\030.ern411.avs.SoftwareType\"\216\017\n\016SoundReco"
  "rding\0225\n\020additional_title\030\001 \003(\0132\033.ern411"
  ".ern.AdditionalTitle\022>\n\033audio_channel_co"
  "nfiguration\030\002 \001(\0132\031.ern411.avs.Recording"
  "Mode\022\037\n\027audio_chapter_reference\030\003 \003(\t\022(\n"
  "\tcharacter\030\004 \003(\0132\025.ern411.ern.Character\022"
  "I\n\033composite_musical_work_type\030\005 \001(\0132$.e"
  "rn411.avs.CompositeMusicalWorkType\022\037\n\027co"
  "ntains_hidden_content\030\006 \001(\010\022,\n\013contribut"
  "or\030\007 \003(\0132\027.ern411.ern.Contributor\022:\n\rcou"
  "rtesy_line\030\010 \003(\0132#.ern411.ern.CourtesyLi"
  "neWithDefault\0228\n\rcreation_date\030\t \001(\0132!.e"
  "rn411.ern.EventDateWithoutFlags\022 \n\005deity"
  "\030\n \003(\0132\021.ern411.ern.Deity\0221\n\016display_art"
  "ist\030\013 \003(\0132\031.ern411.ern.DisplayArtist\022E\n\023"
  "display_artist_name\030\014 \003(\0132(.ern411.ern.D"
  "isplayArtistNameWithDefault\0223\n\017display_c"
  "redits\030\r \003(\0132\032.ern411.ern.DisplayCredits"
  "\022/\n\rdisplay_title\030\016 \003(\0132\030.ern411.ern.Dis"
  "playTitle\0228\n\022display_title_text\030\017 \003(\0132\034."
  "ern411.ern.DisplayTitleText\022\020\n\010duration\030"
  "\020 \001(\t\022@\n\026first_publication_date\030\021 \003(\0132 ."
  "ern411.ern.FirstPublicationDate\022\020\n\010is_co"
  "ver\030\022 \001(\010\022\027\n\017is_hi_res_music\030\023 \001(\010\022\027\n\017is"
  "_instrumental\030\024 \001(\010\022\025\n\ris_remastered\030\025 \001"
  "(\010\022\027\n\017is_supplemental\030\026 \001(\010\022 \n\030language_"
  "and_script_code\030\027 \001(\t\022<\n\027language_of_per"
  "formance\030\030 \003(\0132\033.ern411.avs.IsoLanguageC"
  "ode\0228\n\rmastered_date\030\031 \001(\0132!.ern411.ern."
  "EventDateWithoutFlags\022,\n\006p_line\030\032 \003(\0132\034."
  "ern411.ern.PLineWithDefault\022K\n\025parental_"
  "warning_type\030\033 \003(\0132,.ern411.ern.Parental"
  "WarningTypeWithTerritory\022\036\n\004raga\030\034 \003(\0132\020"
  ".ern411.ern.Raga\0223\n\017related_release\030\035 \003("
  "\0132\032.ern411.ern.RelatedRelease\0225\n\020related"
  "_resource\030\036 \003(\0132\033.ern411.ern.RelatedReso"
  "urce\022:\n\017remastered_date\030\037 \001(\0132!.ern411.e"
  "rn.EventDateWithoutFlags\0221\n\013resource_id\030"
  "  \003(\0132\034.ern411.ern.SoundRecordingId\022\032\n\022r"
  "esource_reference\030! \001(\t\022H\n\032resource_righ"
  "ts_controller\030\" \003(\0132$.ern411.ern.Resourc"
  "eRightsController\022\036\n\004tala\030# \003(\0132\020.ern411"
  ".ern.Tala\022E\n\021technical_details\030$ \003(\0132*.e"
  "rn411.ern.TechnicalSoundRecordingDetails"
  "\022,\n\004type\030% \001(\0132\036.ern411.ern.SoundRecordi"
  "ngType\022-\n\014version_type\030& \003(\0132\027.ern411.er"
  "n.VersionType\022*\n\007work_id\030\' \003(\0132\031.ern411."
  "ern.MusicalWorkId\022@\n\026work_rights_control"
  "ler\030( \003(\0132 .ern411.ern.WorkRightsControl"
  "ler\"\236\001\n\020SoundRecordingId\0221\n\016catalog_numb"
  "er\030\001 \001(\0132\031.ern411.ern.CatalogNumber\022\017\n\007i"
  "_s_r_c\030\002 \001(\t\022\023\n\013is_replaced\030\003 \001(\010\0221\n\016pro"
  "prietary_id\030\004 \003(\0132\031.ern411.ern.Proprieta"
  "ryId\"\303\001\n\034SoundRecordingPreviewDetails\022\033\n"
  "\023bottom_right_corner\030\001 \001(\t\022\020\n\010duration\030\002"
  " \001(\t\022\021\n\tend_point\030\003 \001(\001\0223\n\017expression_ty"
  "pe\030\004 \001(\0132\032.ern411.avs.ExpressionType\022\023\n\013"
  "start_point\030\005 \001(\001\022\027\n\017top_left_corner\030\006 \001"
  "(\t\"v\n\022SoundRecordingType\022\021\n\tnamespace\030\001 "
  "\001(\t\022\032\n\022user_defined_value\030\002 \001(\t\0221\n\text_v"
  "alue\030\003 \001(\0132\036.ern411.avs.SoundRecordingTy"
  "pe\"K\n\030SupplementalDocumentList\022/\n\025supple"
  "mental_document\030\001 \003(\0132\020.ern411.ern.File\""
  "\300\001\n\025SynopsisWithTerritory\022C\n\031applicable_"
  "territory_code\030\001 \001(\0132 .ern411.avs.Curren"
  "tTerritoryCode\022\022\n\nis_default\030\002 \001(\010\022\031\n\021is"
  "_short_synopsis\030\003 \001(\010\022 \n\030language_and_sc"
  "ript_code\030\004 \001(\t\022\021\n\text_value\030\005 \001(\t\"r\n\004Ta"
  "la\022C\n\031applicable_territory_code\030\001 \001(\0132 ."
  "ern411.avs.CurrentTerritoryCode\022\022\n\nis_de"
  "fault\030\002 \001(\010\022\021\n\text_value\030\003 \001(\t\"\321\004\n\025Techn"
  "icalImageDetails\022C\n\031applicable_territory"
  "_code\030\001 \001(\0132 .ern411.avs.CurrentTerritor"
  "yCode\022-\n\014aspect_ratio\030\002 \001(\0132\027.ern411.ern"
  ".AspectRatio\022\021\n\tbit_depth\030\003 \001(\005\022\023\n\013color"
  "_depth\030\004 \001(\005\022\036\n\004file\030\005 \001(\0132\020.ern411.ern."
  "File\022,\n\013fingerprint\030\006 \003(\0132\027.ern411.ern.F"
  "ingerprint\0224\n\020image_codec_type\030\007 \001(\0132\032.e"
  "rn411.ern.ImageCodecType\022(\n\014image_height"
  "\030\010 \001(\0132\022.ern411.ern.Extent\022\030\n\020image_reso"
  "lution\030\t \001(\005\022\'\n\013image_width\030\n \001(\0132\022.ern4"
  "11.ern.Extent\022\022\n\nis_default\030\013 \001(\010\022\022\n\nis_"
  "preview\030\014 \001(\010\022 \n\030language_and_script_cod"
  "e\030\r \001(\t\0223\n\017preview_details\030\016 \001(\0132\032.ern41"
  "1.ern.PreviewDetails\022,\n$technical_resour"
  "ce_details_reference\030\017 \001(\t\"\260\003\n\032Technical"
  "SheetMusicDetails\022C\n\031applicable_territor"
  "y_code\030\001 \001(\0132 .ern411.avs.CurrentTerrito"
  "ryCode\022\021\n\tbit_depth\030\002 \001(\005\022\036\n\004file\030\003 \001(\0132"
  "\020.ern411.ern.File\022,\n\013fingerprint\030\004 \003(\0132\027"
  ".ern411.ern.Fingerprint\022\022\n\nis_default\030\005 "
  "\001(\010\022\022\n\nis_preview\030\006 \001(\010\022 \n\030language_and_"
  "script_code\030\007 \001(\t\0223\n\017preview_details\030\010 \001"
  "(\0132\032.ern411.ern.PreviewDetails\022\?\n\026sheet_"
  "music_codec_type\030\t \001(\0132\037.ern411.ern.Shee"
  "tMusicCodecType\022,\n$technical_resource_de"
  "tails_reference\030\n \001(\t\"\255\003\n\030TechnicalSoftw"
  "areDetails\022C\n\031applicable_territory_code\030"
  "\001 \001(\0132 .ern411.avs.CurrentTerritoryCode\022"
  "\021\n\tbit_depth\030\002 \001(\005\022\036\n\004file\030\003 \001(\0132\020.ern41"
  "1.ern.File\022,\n\013fingerprint\030\004 \003(\0132\027.ern411"
  ".ern.Fingerprint\022\022\n\nis_default\030\005 \001(\010\022\022\n\n"
  "is_preview\030\006 \001(\010\022 \n\030language_and_script_"
  "code\030\007 \001(\t\022>\n\025operating_system_type\030\010 \001("
  "\0132\037.ern411.ern.OperatingSystemType\0223\n\017pr"
  "eview_details\030\t \001(\0132\032.ern411.ern.Preview"
  "Details\022,\n$technical_resource_details_re"
  "ference\030\n \001(\t\"\300\005\n\036TechnicalSoundRecordin"
  "gDetails\022C\n\031applicable_territory_code\030\001 "
  "\001(\0132 .ern411.avs.CurrentTerritoryCode\0224\n"
  "\020audio_codec_type\030\002 \001(\0132\032.ern411.ern.Aud"
  "ioCodecType\022\021\n\tbit_depth\030\003 \001(\005\022%\n\010bit_ra"
  "te\030\004 \001(\0132\023.ern411.ern.BitRate\022\027\n\017bits_pe"
  "r_sample\030\005 \001(\005\022\020\n\010duration\030\006 \001(\t\022\036\n\004file"
  "\030\007 \001(\0132\020.ern411.ern.File\022,\n\013fingerprint\030"
  "\010 \003(\0132\027.ern411.ern.Fingerprint\022\022\n\nis_def"
  "ault\030\t \001(\010\022\022\n\nis_preview\030\n \001(\010\022 \n\030langua"
  "ge_and_script_code\030\013 \001(\t\022\032\n\022number_of_ch"
  "annels\030\014 \001(\005\022.\n\021original_bit_rate\030\r \001(\0132"
  "\023.ern411.ern.BitRate\0228\n\026original_samplin"
  "g_rate\030\016 \001(\0132\030.ern411.ern.SamplingRate\022A"
  "\n\017preview_details\030\017 \001(\0132(.ern411.ern.Sou"
  "ndRecordingPreviewDetails\022/\n\rsampling_ra"
  "te\030\020 \001(\0132\030.ern411.ern.SamplingRate\022,\n$te"
  "chnical_resource_details_reference\030\021 \001(\t"
  "\"\235\003\n\024TechnicalTextDetails\022C\n\031applicable_"
  "territory_code\030\001 \001(\0132 .ern411.avs.Curren"
  "tTerritoryCode\022\021\n\tbit_depth\030\002 \001(\005\022\036\n\004fil"
  "e\030\003 \001(\0132\020.ern411.ern.File\022,\n\013fingerprint"
  "\030\004 \003(\0132\027.ern411.ern.Fingerprint\022\022\n\nis_de"
  "fault\030\005 \001(\010\022\022\n\nis_preview\030\006 \001(\010\022 \n\030langu"
  "age_and_script_code\030\007 \001(\t\0223\n\017preview_det"
  "ails\030\010 \001(\0132\032.ern411.ern.PreviewDetails\022,"
  "\n$technical_resource_details_reference\030\t"
  " \001(\t\0222\n\017text_codec_type\030\n \001(\0132\031.ern411.e"
  "rn.TextCodecType\"\331\010\n\025TechnicalVideoDetai"
  "ls\022C\n\031applicable_territory_code\030\001 \001(\0132 ."
  "ern411.avs.CurrentTerritoryCode\022-\n\014aspec"
  "t_ratio\030\002 \001(\0132\027.ern411.ern.AspectRatio\022+"
  "\n\016audio_bit_rate\030\003 \001(\0132\023.ern411.ern.BitR"
  "ate\022\035\n\025audio_bits_per_sample\030\004 \001(\005\0224\n\020au"
  "dio_codec_type\030\005 \001(\0132\032.ern411.ern.AudioC"
  "odecType\0225\n\023audio_sampling_rate\030\006 \001(\0132\030."
  "ern411.ern.SamplingRate\022\021\n\tbit_depth\030\007 \001"
  "(\005\022\023\n\013color_depth\030\010 \001(\005\0225\n\020container_for"
  "mat\030\t \001(\0132\033.ern411.ern.ContainerFormat\022\'"
  "\n\tcore_area\030\n \001(\0132\024.ern411.ern.CoreArea\022"
  "\020\n\010duration\030\013 \001(\t\022\036\n\004file\030\014 \001(\0132\020.ern411"
  ".ern.File\022,\n\013fingerprint\030\r \003(\0132\027.ern411."
  "ern.Fingerprint\022)\n\nframe_rate\030\016 \001(\0132\025.er"
  "n411.ern.FrameRate\022(\n\014image_height\030\017 \001(\013"
  "2\022.ern411.ern.Extent\022\'\n\013image_width\030\020 \001("
  "\0132\022.ern411.ern.Extent\022\022\n\nis_default\030\021 \001("
  "\010\022\022\n\nis_preview\030\022 \001(\010\022 \n\030language_and_sc"
  "ript_code\030\023 \001(\t\022 \n\030number_of_audio_chann"
  "els\030\024 \001(\005\022-\n\020overall_bit_rate\030\025 \001(\0132\023.er"
  "n411.ern.BitRate\022A\n\017preview_details\030\026 \001("
  "\0132(.ern411.ern.SoundRecordingPreviewDeta"
  "ils\022,\n$technical_resource_details_refere"
  "nce\030\027 \001(\t\022+\n\016video_bit_rate\030\030 \001(\0132\023.ern4"
  "11.ern.BitRate\0224\n\020video_codec_type\030\031 \001(\013"
  "2\032.ern411.ern.VideoCodecType\022>\n\025video_de"
  "finition_type\030\032 \001(\0132\037.ern411.avs.VideoDe"
  "finitionType\"\310\n\n\004Text\0225\n\020additional_titl"
  "e\030\001 \003(\0132\033.ern411.ern.AdditionalTitle\022,\n\006"
  "c_line\030\002 \003(\0132\034.ern411.ern.CLineWithDefau"
  "lt\022\037\n\027contains_hidden_content\030\003 \001(\010\022,\n\013c"
  "ontributor\030\004 \003(\0132\027.ern411.ern.Contributo"
  "r\022:\n\rcourtesy_line\030\005 \003(\0132#.ern411.ern.Co"
  "urtesyLineWithDefault\0228\n\rcreation_date\030\006"
  " \001(\0132!.ern411.ern.EventDateWithoutFlags\022"
  "1\n\016display_artist\030\007 \003(\0132\031.ern411.ern.Dis"
  "playArtist\022E\n\023display_artist_name\030\010 \003(\0132"
  "(.ern411.ern.DisplayArtistNameWithDefaul"
  "t\022/\n\rdisplay_title\030\t \003(\0132\030.ern411.ern.Di"
  "splayTitle\0228\n\022display_title_text\030\n \003(\0132\034"
  ".ern411.ern.DisplayTitleText\022H\n\026first_pu"
  "blication_date\030\013 \003(\0132(.ern411.ern.Fulfil"
  "lmentDateWithTerritory\022\027\n\017is_supplementa"
  "l\030\014 \001(\010\022 \n\030language_and_script_code\030\r \001("
  "\t\022K\n\025parental_warning_type\030\016 \003(\0132,.ern41"
  "1.ern.ParentalWarningTypeWithTerritory\0223"
  "\n\017related_release\030\017 \003(\0132\032.ern411.ern.Rel"
  "atedRelease\0225\n\020related_resource\030\020 \003(\0132\033."
  "ern411.ern.RelatedResource\022f\n*resource_c"
  "ontained_resource_reference_list\030\021 \001(\01322"
  ".ern411.ern.ResourceContainedResourceRef"
  "erenceList\022\'\n\013resource_id\030\022 \003(\0132\022.ern411"
  ".ern.TextId\022\032\n\022resource_reference\030\023 \001(\t\022"
  "H\n\032resource_rights_controller\030\024 \003(\0132$.er"
  "n411.ern.ResourceRightsController\022;\n\021tec"
  "hnical_details\030\025 \003(\0132 .ern411.ern.Techni"
  "calTextDetails\022\"\n\004type\030\026 \001(\0132\024.ern411.er"
  "n.TextType\022-\n\014version_type\030\027 \003(\0132\027.ern41"
  "1.ern.VersionType\022*\n\007work_id\030\030 \003(\0132\031.ern"
  "411.ern.MusicalWorkId\022@\n\026work_rights_con"
  "troller\030\031 \003(\0132 .ern411.ern.WorkRightsCon"
  "troller\"}\n\rTextCodecType\022\021\n\tnamespace\030\001 "
  "\001(\t\022\032\n\022user_defined_value\030\002 \001(\t\022\017\n\007versi"
  "on\030\003 \001(\t\022,\n\text_value\030\004 \001(\0132\031.ern411.avs"
  ".TextCodecType\"\203\001\n\006TextId\022\017\n\007i_s_b_n\030\001 \001"
  "(\t\022\017\n\007i_s_s_n\030\002 \001(\t\022\023\n\013is_replaced\030\003 \001(\010"
  "\0221\n\016proprietary_id\030\004 \003(\0132\031.ern411.ern.Pr"
  "oprietaryId\022\017\n\007s_i_c_i\030\005 \001(\t\"b\n\010TextType"
  "\022\021\n\tnamespace\030\001 \001(\t\022\032\n\022user_defined_valu"
  "e\030\002 \001(\t\022\'\n\text_value\030\003 \001(\0132\024.ern411.avs."
  "TextType\"4\n\006Timing\022\025\n\rduration_used\030\001 \001("
  "\t\022\023\n\013start_point\030\002 \001(\t\"{\n\005Title\022 \n\030langu"
  "age_and_script_code\030\001 \001(\t\022\021\n\tsub_title\030\002"
  " \001(\t\022\022\n\ntitle_text\030\003 \001(\t\022)\n\ntitle_type\030\004"
  " \001(\0132\025.ern411.avs.TitleType\"\227\001\n\027TitleDis"
  "playInformation\022\035\n\025is_displayed_in_title"
  "\030\001 \001(\010\022 \n\030language_and_script_code\030\002 \001(\t"
  "\022\"\n\006prefix\030\003 \003(\0132\022.ern411.ern.Prefix\022\027\n\017"
  "sequence_number\030\004 \001(\005\"\240\005\n\014TrackRelease\0225"
  "\n\020additional_title\030\001 \003(\0132\033.ern411.ern.Ad"
  "ditionalTitle\022/\n\rdisplay_title\030\002 \003(\0132\030.e"
  "rn411.ern.DisplayTitle\0228\n\022display_title_"
  "text\030\003 \003(\0132\034.ern411.ern.DisplayTitleText"
  "\022-\n\005genre\030\004 \003(\0132\036.ern411.ern.GenreWithTe"
  "rritory\022\027\n\017is_main_release\030\005 \001(\010\0223\n\010keyw"
  "ords\030\006 \003(\0132!.ern411.ern.KeywordsWithTerr"
  "itory\022U\n!linked_release_resource_referen"
  "ce\030\007 \003(\0132*.ern411.ern.LinkedReleaseResou"
  "rceReference\0227\n\021marketing_comment\030\010 \003(\0132"
  "\034.ern411.ern.MarketingComment\022)\n\nrelease"
  "_id\030\t \001(\0132\025.ern411.ern.ReleaseId\022B\n\027rele"
  "ase_label_reference\030\n \003(\0132!.ern411.ern.R"
  "eleaseLabelReference\022\031\n\021release_referenc"
  "e\030\013 \001(\t\022\"\n\032release_resource_reference\030\014 "
  "\001(\t\0223\n\010synopsis\030\r \003(\0132!.ern411.ern.Synop"
  "sisWithTerritory\"`\n\007UseType\022\021\n\tnamespace"
  "\030\001 \001(\t\022\032\n\022user_defined_value\030\002 \001(\t\022&\n\tex"
  "t_value\030\003 \001(\0132\023.ern411.avs.UseType\"d\n\016Va"
  "lidityPeriod\022\'\n\010end_date\030\001 \001(\0132\025.ern411."
  "ern.EventDate\022)\n\nstart_date\030\002 \001(\0132\025.ern4"
  "11.ern.EventDate\"h\n\013VersionType\022\021\n\tnames"
  "pace\030\001 \001(\t\022\032\n\022user_defined_value\030\002 \001(\t\022*"
  "\n\text_value\030\003 \001(\0132\027.ern411.avs.VersionTy"
  "pe\"\361\020\n\005Video\0225\n\020additional_title\030\001 \003(\0132\033"
  ".ern411.ern.AdditionalTitle\022\'\n\tav_rating"
  "\030\002 \003(\0132\024.ern411.ern.AvRating\022,\n\006c_line\030\003"
  " \003(\0132\034.ern411.ern.CLineWithDefault\022(\n\tch"
  "aracter\030\004 \003(\0132\025.ern411.ern.Character\022I\n\033"
  "composite_musical_work_type\030\005 \001(\0132$.ern4"
  "11.avs.CompositeMusicalWorkType\022\037\n\027conta"
  "ins_hidden_content\030\006 \001(\010\022,\n\013contributor\030"
  "\007 \003(\0132\027.ern411.ern.Contributor\022:\n\rcourte"
  "sy_line\030\010 \003(\0132#.ern411.ern.CourtesyLineW"
  "ithDefault\0228\n\rcreation_date\030\t \001(\0132!.ern4"
  "11.ern.EventDateWithoutFlags\022\r\n\005deity\030\n "
  "\003(\t\0221\n\016display_artist\030\013 \003(\0132\031.ern411.ern"
  ".DisplayArtist\022E\n\023display_artist_name\030\014 "
  "\003(\0132(.ern411.ern.DisplayArtistNameWithDe"
  "fault\0223\n\017display_credits\030\r \003(\0132\032.ern411."
  "ern.DisplayCredits\022/\n\rdisplay_title\030\016 \003("
  "\0132\030.ern411.ern.DisplayTitle\0228\n\022display_t"
  "itle_text\030\017 \003(\0132\034.ern411.ern.DisplayTitl"
  "eText\022\020\n\010duration\030\020 \001(\t\022H\n\026first_publica"
  "tion_date\030\021 \003(\0132(.ern411.ern.Fulfillment"
  "DateWithTerritory\022\020\n\010is_cover\030\022 \001(\010\022\027\n\017i"
  "s_instrumental\030\023 \001(\010\022\025\n\ris_remastered\030\024 "
  "\001(\010\022\027\n\017is_supplemental\030\025 \001(\010\022 \n\030language"
  "_and_script_code\030\026 \001(\t\0228\n\023language_of_du"
  "bbing\030\027 \003(\0132\033.ern411.avs.IsoLanguageCode"
  "\022<\n\027language_of_performance\030\030 \003(\0132\033.ern4"
  "11.avs.IsoLanguageCode\0228\n\rmastered_date\030"
  "\031 \001(\0132!.ern411.ern.EventDateWithoutFlags"
  "\022,\n\006p_line\030\032 \003(\0132\034.ern411.ern.PLineWithD"
  "efault\022K\n\025parental_warning_type\030\033 \003(\0132,."
  "ern411.ern.ParentalWarningTypeWithTerrit"
  "ory\022\014\n\004raga\030\034 \003(\t\0228\n\034reason_for_cue_shee"
  "t_absence\030\035 \001(\0132\022.ern411.ern.Reason\0223\n\017r"
  "elated_release\030\036 \003(\0132\032.ern411.ern.Relate"
  "dRelease\0225\n\020related_resource\030\037 \003(\0132\033.ern"
  "411.ern.RelatedResource\022:\n\017remastered_da"
  "te\030  \003(\0132!.ern411.ern.EventDateWithoutFl"
  "ags\022f\n*resource_contained_resource_refer"
  "ence_list\030! \001(\01322.ern411.ern.ResourceCon"
  "tainedResourceReferenceList\022(\n\013resource_"
  "id\030\" \003(\0132\023.ern411.ern.VideoId\022\032\n\022resourc"
  "e_reference\030# \001(\t\022H\n\032resource_rights_con"
  "troller\030$ \003(\0132$.ern411.ern.ResourceRight"
  "sController\0227\n\022sub_title_language\030% \003(\0132"
  "\033.ern411.avs.IsoLanguageCode\022\014\n\004tala\030& \003"
  "(\t\022<\n\021technical_details\030\' \003(\0132!.ern411.e"
  "rn.TechnicalVideoDetails\022#\n\004type\030( \001(\0132\025"
  ".ern411.ern.VideoType\022-\n\014version_type\030) "
  "\003(\0132\027.ern411.ern.VersionType\022\037\n\027video_ch"
  "apter_reference\030* \003(\t\022!\n\031video_cue_sheet"
  "_reference\030+ \003(\t\022*\n\007work_id\030, \003(\0132\031.ern4"
  "11.ern.MusicalWorkId\022@\n\026work_rights_cont"
  "roller\030- \003(\0132 .ern411.ern.WorkRightsCont"
  "roller\"\177\n\016VideoCodecType\022\021\n\tnamespace\030\001 "
  "\001(\t\022\032\n\022user_defined_value\030\002 \001(\t\022\017\n\007versi"
  "on\030\003 \001(\t\022-\n\text_value\030\004 \001(\0132\032.ern411.avs"
  ".VideoCodecType\"\312\001\n\007VideoId\0221\n\016catalog_n"
  "umber\030\001 \001(\0132\031.ern411.ern.CatalogNumber\022\017"
  "\n\007e_i_d_r\030\002 \003(\t\022\017\n\007i_s_a_n\030\003 \001(\t\022\017\n\007i_s_"
  "r_c\030\004 \001(\t\022\023\n\013is_replaced\030\005 \001(\010\0221\n\016propri"
  "etary_id\030\006 \003(\0132\031.ern411.ern.ProprietaryI"
  "d\022\021\n\tv_i_s_a_n\030\007 \001(\t\"d\n\tVideoType\022\021\n\tnam"
  "espace\030\001 \001(\t\022\032\n\022user_defined_value\030\002 \001(\t"
  "\022(\n\text_value\030\003 \001(\0132\025.ern411.avs.VideoTy"
  "pe\"\215\003\n\024WorkRightsController\022*\n\010end_date\030"
  "\001 \001(\0132\030.ern411.ern.ddex_IsoDate\022\036\n\026right"
  "_share_percentage\030\002 \001(\001\022\033\n\023right_share_u"
  "nknown\030\003 \001(\010\022)\n!rights_controller_party_"
  "reference\030\004 \001(\t\022@\n\026rights_controller_rol"
  "e\030\005 \003(\0132 .ern411.avs.RightsControllerRol"
  "e\022@\n\026rights_controller_type\030\006 \001(\0132 .ern4"
  "11.avs.RightsControllerType\022,\n\nstart_dat"
  "e\030\007 \001(\0132\030.ern411.ern.ddex_IsoDate\022/\n\tter"
  "ritory\030\010 \003(\0132\034.ern411.ern.AllTerritoryCo"
  "de\"\"\n\014ddex_IsoDate\022\022\n\nauto_value\030\001 \001(\t\"4"
  "\n\036ddex_LocalPartyAnchorReference\022\022\n\nauto"
  "_value\030\001 \001(\t\"7\n!ddex_LocalResourceAnchor"
  "Reference\022\022\n\nauto_value\030\001 \001(\t"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto_deps[1] = {
  &::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fern42_2favs_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto_sccs[173] = {
  &scc_info_AdditionalTitle_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_AdministratingRecordCompanyRole_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_AdministratingRecordCompanyWithReference_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_Affiliation_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_AllTerritoryCode_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_AspectRatio_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_AudioCodecType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_AvRating_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_BitRate_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_CLine_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_CLineWithDefault_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_CarrierType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_CatalogNumber_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_Chapter_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_ChapterList_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_Character_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_CommercialModelType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_ConditionForRightsClaimPolicy_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_ContainerFormat_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_Contributor_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_ContributorRole_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_CoreArea_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_CourtesyLineWithDefault_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_CueOrigin_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_CueSheetType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_CueThemeType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_CueUseType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_CueVisualPerceptionType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_CueVocalType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_CurrentTerritoryCode_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_DSP_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_Deal_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_DealList_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_DealResourceReferenceList_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_DealTechnicalResourceDetailsReferenceList_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_DealTerms_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_DealTermsTechnicalInstantiation_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_Deity_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_DelegatedUsageRights_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_DescriptionWithTerritory_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_DetailedCue_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_DetailedCueSheet_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_DetailedCueSheetList_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_DetailedHashSum_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_DetailedPartyId_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_DetailedResourceContributor_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_DiscoverableUseType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_DisplayArtist_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_DisplayArtistNameWithDefault_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_DisplayArtistRole_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_DisplayCredits_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_DisplaySubTitle_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_DisplayTitle_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_DisplayTitleText_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_DistributionChannelPage_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_EventDate_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_EventDateTime_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_EventDateTimeWithoutFlags_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_EventDateWithDefault_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_EventDateWithoutFlags_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_Extent_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_ExternalResourceLink_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_ExternallyLinkedResourceType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_File_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_Fingerprint_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_FingerprintAlgorithmType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_FirstPublicationDate_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_FrameRate_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_FulfillmentDateWithTerritory_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_GenreWithTerritory_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_HashSumAlgorithmType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_Image_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_ImageCodecType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_ImageType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_InstrumentType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_IsCredited_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_KeywordsWithTerritory_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_LinkedReleaseResourceReference_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_MarketingComment_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_MessageAuditTrail_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_MessageAuditTrailEvent_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_MessageHeader_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_MessagingPartyWithoutCode_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_MusicalWorkId_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_Name_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_NewReleaseMessage_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_OperatingSystemType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_PLine_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_PLineWithDefault_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_ParentalWarningTypeWithTerritory_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_Party_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_PartyList_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_PartyName_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_PartyNameWithTerritory_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_PartyNameWithoutCode_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_PartyRelationshipType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_Percentage_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_Period_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_PeriodWithoutFlags_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_PhysicalReturns_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_Prefix_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_PreviewDetails_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_Price_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_PriceInformationWithType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_PriceType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_PromotionalCode_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_ProprietaryId_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_PurgeReleaseMessage_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_PurgedRelease_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_Purpose_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_Raga_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_RatingAgency_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_Reason_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_RelatedParty_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_RelatedRelease_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_RelatedResource_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_Release_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_ReleaseDeal_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_ReleaseId_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_ReleaseLabelReference_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_ReleaseList_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_ReleaseRelationshipType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_ReleaseTypeForReleaseNotification_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_ResourceContainedResourceReference_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_ResourceContainedResourceReferenceList_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_ResourceGroup_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_ResourceGroupContentItem_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_ResourceId_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_ResourceList_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_ResourceProprietaryId_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_ResourceRightsController_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_ResourceSubGroup_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_RightsClaimPolicy_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_SamplingRate_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_SheetMusic_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_SheetMusicCodecType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_SheetMusicId_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_SheetMusicType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_SimpleRightsType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_Software_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_SoftwareType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_SoundRecording_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_SoundRecordingId_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_SoundRecordingPreviewDetails_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_SoundRecordingType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_SupplementalDocumentList_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_SynopsisWithTerritory_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_Tala_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_TechnicalImageDetails_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_TechnicalSheetMusicDetails_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_TechnicalSoftwareDetails_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_TechnicalSoundRecordingDetails_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_TechnicalTextDetails_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_TechnicalVideoDetails_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_Text_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_TextCodecType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_TextId_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_TextType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_Timing_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_Title_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_TitleDisplayInformation_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_TrackRelease_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_UseType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_ValidityPeriod_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_VersionType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_Video_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_VideoCodecType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_VideoId_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_VideoType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_WorkRightsController_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_ddex_IsoDate_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_ddex_LocalPartyAnchorReference_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
  &scc_info_ddex_LocalResourceAnchorReference_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto = {
  false, false, descriptor_table_protodef_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto, "ddex-xmltoproto/generated/ern42/ern.proto", 44629,
  &descriptor_table_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto_once, descriptor_table_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto_sccs, descriptor_table_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto_deps, 173, 1,
  schemas, file_default_instances, TableStruct_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto::offsets,
  file_level_metadata_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto, 173, file_level_enum_descriptors_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto, file_level_service_descriptors_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto)), true);
namespace ern411 {
namespace ern {

// ===================================================================

void AdditionalTitle::InitAsDefaultInstance() {
  ::ern411::ern::_AdditionalTitle_default_instance_._instance.get_mutable()->applicable_territory_code_ = const_cast< ::ern411::avs::CurrentTerritoryCode*>(
      ::ern411::avs::CurrentTerritoryCode::internal_default_instance());
  ::ern411::ern::_AdditionalTitle_default_instance_._instance.get_mutable()->title_type_ = const_cast< ::ern411::avs::AdditionalTitleType*>(
      ::ern411::avs::AdditionalTitleType::internal_default_instance());
}
class AdditionalTitle::_Internal {
 public:
  using HasBits = decltype(std::declval<AdditionalTitle>()._has_bits_);
  static const ::ern411::avs::CurrentTerritoryCode& applicable_territory_code(const AdditionalTitle* msg);
  static void set_has_applicable_territory_code(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_is_default(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_language_and_script_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_namespace_(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_title_text(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::ern411::avs::AdditionalTitleType& title_type(const AdditionalTitle* msg);
  static void set_has_title_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_user_defined_value(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::ern411::avs::CurrentTerritoryCode&
AdditionalTitle::_Internal::applicable_territory_code(const AdditionalTitle* msg) {
  return *msg->applicable_territory_code_;
}
const ::ern411::avs::AdditionalTitleType&
AdditionalTitle::_Internal::title_type(const AdditionalTitle* msg) {
  return *msg->title_type_;
}
void AdditionalTitle::clear_applicable_territory_code() {
  if (applicable_territory_code_ != nullptr) applicable_territory_code_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void AdditionalTitle::clear_title_type() {
  if (title_type_ != nullptr) title_type_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
AdditionalTitle::AdditionalTitle(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  sub_title_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.AdditionalTitle)
}
AdditionalTitle::AdditionalTitle(const AdditionalTitle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      sub_title_(from.sub_title_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  language_and_script_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_language_and_script_code()) {
    language_and_script_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_language_and_script_code(),
      GetArena());
  }
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_namespace_()) {
    namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_namespace_(),
      GetArena());
  }
  title_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_title_text()) {
    title_text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_title_text(),
      GetArena());
  }
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_user_defined_value()) {
    user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_defined_value(),
      GetArena());
  }
  if (from._internal_has_applicable_territory_code()) {
    applicable_territory_code_ = new ::ern411::avs::CurrentTerritoryCode(*from.applicable_territory_code_);
  } else {
    applicable_territory_code_ = nullptr;
  }
  if (from._internal_has_title_type()) {
    title_type_ = new ::ern411::avs::AdditionalTitleType(*from.title_type_);
  } else {
    title_type_ = nullptr;
  }
  is_default_ = from.is_default_;
  // @@protoc_insertion_point(copy_constructor:ern411.ern.AdditionalTitle)
}

void AdditionalTitle::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AdditionalTitle_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  language_and_script_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  title_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&applicable_territory_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_default_) -
      reinterpret_cast<char*>(&applicable_territory_code_)) + sizeof(is_default_));
}

AdditionalTitle::~AdditionalTitle() {
  // @@protoc_insertion_point(destructor:ern411.ern.AdditionalTitle)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AdditionalTitle::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  language_and_script_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  namespace__.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  title_text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete applicable_territory_code_;
  if (this != internal_default_instance()) delete title_type_;
}

void AdditionalTitle::ArenaDtor(void* object) {
  AdditionalTitle* _this = reinterpret_cast< AdditionalTitle* >(object);
  (void)_this;
}
void AdditionalTitle::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AdditionalTitle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AdditionalTitle& AdditionalTitle::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AdditionalTitle_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void AdditionalTitle::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.AdditionalTitle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sub_title_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      language_and_script_code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      namespace__.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      title_text_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      user_defined_value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(applicable_territory_code_ != nullptr);
      applicable_territory_code_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(title_type_ != nullptr);
      title_type_->Clear();
    }
  }
  is_default_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AdditionalTitle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ern411.avs.CurrentTerritoryCode applicable_territory_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_applicable_territory_code(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_default = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_is_default(&has_bits);
          is_default_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string language_and_script_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_language_and_script_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.AdditionalTitle.language_and_script_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string namespace = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_namespace_();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.AdditionalTitle.namespace");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.DisplaySubTitle sub_title = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sub_title(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string title_text = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_title_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.AdditionalTitle.title_text");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.avs.AdditionalTitleType title_type = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_title_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string user_defined_value = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_user_defined_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.AdditionalTitle.user_defined_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AdditionalTitle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.AdditionalTitle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ern411.avs.CurrentTerritoryCode applicable_territory_code = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::applicable_territory_code(this), target, stream);
  }

  // optional bool is_default = 2;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_default(), target);
  }

  // optional string language_and_script_code = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_language_and_script_code().data(), static_cast<int>(this->_internal_language_and_script_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.AdditionalTitle.language_and_script_code");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_language_and_script_code(), target);
  }

  // optional string namespace = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_namespace_().data(), static_cast<int>(this->_internal_namespace_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.AdditionalTitle.namespace");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_namespace_(), target);
  }

  // repeated .ern411.ern.DisplaySubTitle sub_title = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sub_title_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_sub_title(i), target, stream);
  }

  // optional string title_text = 6;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_title_text().data(), static_cast<int>(this->_internal_title_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.AdditionalTitle.title_text");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_title_text(), target);
  }

  // optional .ern411.avs.AdditionalTitleType title_type = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::title_type(this), target, stream);
  }

  // optional string user_defined_value = 8;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_user_defined_value().data(), static_cast<int>(this->_internal_user_defined_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.AdditionalTitle.user_defined_value");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_user_defined_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.AdditionalTitle)
  return target;
}

size_t AdditionalTitle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.AdditionalTitle)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ern411.ern.DisplaySubTitle sub_title = 5;
  total_size += 1UL * this->_internal_sub_title_size();
  for (const auto& msg : this->sub_title_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string language_and_script_code = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_language_and_script_code());
    }

    // optional string namespace = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_namespace_());
    }

    // optional string title_text = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_title_text());
    }

    // optional string user_defined_value = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_defined_value());
    }

    // optional .ern411.avs.CurrentTerritoryCode applicable_territory_code = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *applicable_territory_code_);
    }

    // optional .ern411.avs.AdditionalTitleType title_type = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *title_type_);
    }

    // optional bool is_default = 2;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AdditionalTitle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.AdditionalTitle)
  GOOGLE_DCHECK_NE(&from, this);
  const AdditionalTitle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AdditionalTitle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.AdditionalTitle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.AdditionalTitle)
    MergeFrom(*source);
  }
}

void AdditionalTitle::MergeFrom(const AdditionalTitle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.AdditionalTitle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sub_title_.MergeFrom(from.sub_title_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_language_and_script_code(from._internal_language_and_script_code());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_namespace_(from._internal_namespace_());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_title_text(from._internal_title_text());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_user_defined_value(from._internal_user_defined_value());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_applicable_territory_code()->::ern411::avs::CurrentTerritoryCode::MergeFrom(from._internal_applicable_territory_code());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_title_type()->::ern411::avs::AdditionalTitleType::MergeFrom(from._internal_title_type());
    }
    if (cached_has_bits & 0x00000040u) {
      is_default_ = from.is_default_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AdditionalTitle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.AdditionalTitle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdditionalTitle::CopyFrom(const AdditionalTitle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.AdditionalTitle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdditionalTitle::IsInitialized() const {
  return true;
}

void AdditionalTitle::InternalSwap(AdditionalTitle* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  sub_title_.InternalSwap(&other->sub_title_);
  language_and_script_code_.Swap(&other->language_and_script_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  namespace__.Swap(&other->namespace__, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  title_text_.Swap(&other->title_text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_defined_value_.Swap(&other->user_defined_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AdditionalTitle, is_default_)
      + sizeof(AdditionalTitle::is_default_)
      - PROTOBUF_FIELD_OFFSET(AdditionalTitle, applicable_territory_code_)>(
          reinterpret_cast<char*>(&applicable_territory_code_),
          reinterpret_cast<char*>(&other->applicable_territory_code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AdditionalTitle::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AdministratingRecordCompanyRole::InitAsDefaultInstance() {
  ::ern411::ern::_AdministratingRecordCompanyRole_default_instance_._instance.get_mutable()->ext_value_ = const_cast< ::ern411::avs::AdministratingRecordCompanyRole*>(
      ::ern411::avs::AdministratingRecordCompanyRole::internal_default_instance());
}
class AdministratingRecordCompanyRole::_Internal {
 public:
  using HasBits = decltype(std::declval<AdministratingRecordCompanyRole>()._has_bits_);
  static void set_has_namespace_(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_user_defined_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::ern411::avs::AdministratingRecordCompanyRole& ext_value(const AdministratingRecordCompanyRole* msg);
  static void set_has_ext_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::ern411::avs::AdministratingRecordCompanyRole&
AdministratingRecordCompanyRole::_Internal::ext_value(const AdministratingRecordCompanyRole* msg) {
  return *msg->ext_value_;
}
void AdministratingRecordCompanyRole::clear_ext_value() {
  if (ext_value_ != nullptr) ext_value_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
AdministratingRecordCompanyRole::AdministratingRecordCompanyRole(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.AdministratingRecordCompanyRole)
}
AdministratingRecordCompanyRole::AdministratingRecordCompanyRole(const AdministratingRecordCompanyRole& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_namespace_()) {
    namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_namespace_(),
      GetArena());
  }
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_user_defined_value()) {
    user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_defined_value(),
      GetArena());
  }
  if (from._internal_has_ext_value()) {
    ext_value_ = new ::ern411::avs::AdministratingRecordCompanyRole(*from.ext_value_);
  } else {
    ext_value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ern411.ern.AdministratingRecordCompanyRole)
}

void AdministratingRecordCompanyRole::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AdministratingRecordCompanyRole_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ext_value_ = nullptr;
}

AdministratingRecordCompanyRole::~AdministratingRecordCompanyRole() {
  // @@protoc_insertion_point(destructor:ern411.ern.AdministratingRecordCompanyRole)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AdministratingRecordCompanyRole::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  namespace__.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ext_value_;
}

void AdministratingRecordCompanyRole::ArenaDtor(void* object) {
  AdministratingRecordCompanyRole* _this = reinterpret_cast< AdministratingRecordCompanyRole* >(object);
  (void)_this;
}
void AdministratingRecordCompanyRole::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AdministratingRecordCompanyRole::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AdministratingRecordCompanyRole& AdministratingRecordCompanyRole::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AdministratingRecordCompanyRole_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void AdministratingRecordCompanyRole::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.AdministratingRecordCompanyRole)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      namespace__.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      user_defined_value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(ext_value_ != nullptr);
      ext_value_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AdministratingRecordCompanyRole::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string namespace = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_namespace_();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.AdministratingRecordCompanyRole.namespace");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string user_defined_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_user_defined_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.AdministratingRecordCompanyRole.user_defined_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.avs.AdministratingRecordCompanyRole ext_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AdministratingRecordCompanyRole::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.AdministratingRecordCompanyRole)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string namespace = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_namespace_().data(), static_cast<int>(this->_internal_namespace_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.AdministratingRecordCompanyRole.namespace");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_namespace_(), target);
  }

  // optional string user_defined_value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_user_defined_value().data(), static_cast<int>(this->_internal_user_defined_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.AdministratingRecordCompanyRole.user_defined_value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_defined_value(), target);
  }

  // optional .ern411.avs.AdministratingRecordCompanyRole ext_value = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::ext_value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.AdministratingRecordCompanyRole)
  return target;
}

size_t AdministratingRecordCompanyRole::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.AdministratingRecordCompanyRole)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string namespace = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_namespace_());
    }

    // optional string user_defined_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_defined_value());
    }

    // optional .ern411.avs.AdministratingRecordCompanyRole ext_value = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ext_value_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AdministratingRecordCompanyRole::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.AdministratingRecordCompanyRole)
  GOOGLE_DCHECK_NE(&from, this);
  const AdministratingRecordCompanyRole* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AdministratingRecordCompanyRole>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.AdministratingRecordCompanyRole)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.AdministratingRecordCompanyRole)
    MergeFrom(*source);
  }
}

void AdministratingRecordCompanyRole::MergeFrom(const AdministratingRecordCompanyRole& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.AdministratingRecordCompanyRole)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_namespace_(from._internal_namespace_());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_user_defined_value(from._internal_user_defined_value());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_ext_value()->::ern411::avs::AdministratingRecordCompanyRole::MergeFrom(from._internal_ext_value());
    }
  }
}

void AdministratingRecordCompanyRole::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.AdministratingRecordCompanyRole)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdministratingRecordCompanyRole::CopyFrom(const AdministratingRecordCompanyRole& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.AdministratingRecordCompanyRole)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdministratingRecordCompanyRole::IsInitialized() const {
  return true;
}

void AdministratingRecordCompanyRole::InternalSwap(AdministratingRecordCompanyRole* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  namespace__.Swap(&other->namespace__, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_defined_value_.Swap(&other->user_defined_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(ext_value_, other->ext_value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AdministratingRecordCompanyRole::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AdministratingRecordCompanyWithReference::InitAsDefaultInstance() {
  ::ern411::ern::_AdministratingRecordCompanyWithReference_default_instance_._instance.get_mutable()->role_ = const_cast< ::ern411::ern::AdministratingRecordCompanyRole*>(
      ::ern411::ern::AdministratingRecordCompanyRole::internal_default_instance());
}
class AdministratingRecordCompanyWithReference::_Internal {
 public:
  using HasBits = decltype(std::declval<AdministratingRecordCompanyWithReference>()._has_bits_);
  static void set_has_record_company_party_reference(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ern411::ern::AdministratingRecordCompanyRole& role(const AdministratingRecordCompanyWithReference* msg);
  static void set_has_role(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::ern411::ern::AdministratingRecordCompanyRole&
AdministratingRecordCompanyWithReference::_Internal::role(const AdministratingRecordCompanyWithReference* msg) {
  return *msg->role_;
}
AdministratingRecordCompanyWithReference::AdministratingRecordCompanyWithReference(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.AdministratingRecordCompanyWithReference)
}
AdministratingRecordCompanyWithReference::AdministratingRecordCompanyWithReference(const AdministratingRecordCompanyWithReference& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  record_company_party_reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_record_company_party_reference()) {
    record_company_party_reference_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_record_company_party_reference(),
      GetArena());
  }
  if (from._internal_has_role()) {
    role_ = new ::ern411::ern::AdministratingRecordCompanyRole(*from.role_);
  } else {
    role_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ern411.ern.AdministratingRecordCompanyWithReference)
}

void AdministratingRecordCompanyWithReference::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AdministratingRecordCompanyWithReference_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  record_company_party_reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  role_ = nullptr;
}

AdministratingRecordCompanyWithReference::~AdministratingRecordCompanyWithReference() {
  // @@protoc_insertion_point(destructor:ern411.ern.AdministratingRecordCompanyWithReference)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AdministratingRecordCompanyWithReference::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  record_company_party_reference_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete role_;
}

void AdministratingRecordCompanyWithReference::ArenaDtor(void* object) {
  AdministratingRecordCompanyWithReference* _this = reinterpret_cast< AdministratingRecordCompanyWithReference* >(object);
  (void)_this;
}
void AdministratingRecordCompanyWithReference::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AdministratingRecordCompanyWithReference::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AdministratingRecordCompanyWithReference& AdministratingRecordCompanyWithReference::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AdministratingRecordCompanyWithReference_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void AdministratingRecordCompanyWithReference::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.AdministratingRecordCompanyWithReference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      record_company_party_reference_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(role_ != nullptr);
      role_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AdministratingRecordCompanyWithReference::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string record_company_party_reference = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_record_company_party_reference();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.AdministratingRecordCompanyWithReference.record_company_party_reference");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.ern.AdministratingRecordCompanyRole role = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_role(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AdministratingRecordCompanyWithReference::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.AdministratingRecordCompanyWithReference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string record_company_party_reference = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_record_company_party_reference().data(), static_cast<int>(this->_internal_record_company_party_reference().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.AdministratingRecordCompanyWithReference.record_company_party_reference");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_record_company_party_reference(), target);
  }

  // optional .ern411.ern.AdministratingRecordCompanyRole role = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::role(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.AdministratingRecordCompanyWithReference)
  return target;
}

size_t AdministratingRecordCompanyWithReference::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.AdministratingRecordCompanyWithReference)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string record_company_party_reference = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_record_company_party_reference());
    }

    // optional .ern411.ern.AdministratingRecordCompanyRole role = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *role_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AdministratingRecordCompanyWithReference::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.AdministratingRecordCompanyWithReference)
  GOOGLE_DCHECK_NE(&from, this);
  const AdministratingRecordCompanyWithReference* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AdministratingRecordCompanyWithReference>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.AdministratingRecordCompanyWithReference)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.AdministratingRecordCompanyWithReference)
    MergeFrom(*source);
  }
}

void AdministratingRecordCompanyWithReference::MergeFrom(const AdministratingRecordCompanyWithReference& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.AdministratingRecordCompanyWithReference)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_record_company_party_reference(from._internal_record_company_party_reference());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_role()->::ern411::ern::AdministratingRecordCompanyRole::MergeFrom(from._internal_role());
    }
  }
}

void AdministratingRecordCompanyWithReference::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.AdministratingRecordCompanyWithReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdministratingRecordCompanyWithReference::CopyFrom(const AdministratingRecordCompanyWithReference& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.AdministratingRecordCompanyWithReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdministratingRecordCompanyWithReference::IsInitialized() const {
  return true;
}

void AdministratingRecordCompanyWithReference::InternalSwap(AdministratingRecordCompanyWithReference* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  record_company_party_reference_.Swap(&other->record_company_party_reference_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(role_, other->role_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AdministratingRecordCompanyWithReference::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Affiliation::InitAsDefaultInstance() {
  ::ern411::ern::_Affiliation_default_instance_._instance.get_mutable()->type_ = const_cast< ::ern411::avs::AffiliationType*>(
      ::ern411::avs::AffiliationType::internal_default_instance());
  ::ern411::ern::_Affiliation_default_instance_._instance.get_mutable()->validity_period_ = const_cast< ::ern411::ern::ValidityPeriod*>(
      ::ern411::ern::ValidityPeriod::internal_default_instance());
}
class Affiliation::_Internal {
 public:
  using HasBits = decltype(std::declval<Affiliation>()._has_bits_);
  static void set_has_company_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_party_affiliate_reference(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_percentage_of_rights_assignment(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::ern411::avs::AffiliationType& type(const Affiliation* msg);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::ern411::ern::ValidityPeriod& validity_period(const Affiliation* msg);
  static void set_has_validity_period(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::ern411::avs::AffiliationType&
Affiliation::_Internal::type(const Affiliation* msg) {
  return *msg->type_;
}
const ::ern411::ern::ValidityPeriod&
Affiliation::_Internal::validity_period(const Affiliation* msg) {
  return *msg->validity_period_;
}
void Affiliation::clear_type() {
  if (type_ != nullptr) type_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
Affiliation::Affiliation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  excluded_territory_code_(arena),
  rights_type_(arena),
  territory_code_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.Affiliation)
}
Affiliation::Affiliation(const Affiliation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      excluded_territory_code_(from.excluded_territory_code_),
      rights_type_(from.rights_type_),
      territory_code_(from.territory_code_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  company_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_company_name()) {
    company_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_company_name(),
      GetArena());
  }
  party_affiliate_reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_party_affiliate_reference()) {
    party_affiliate_reference_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_party_affiliate_reference(),
      GetArena());
  }
  if (from._internal_has_type()) {
    type_ = new ::ern411::avs::AffiliationType(*from.type_);
  } else {
    type_ = nullptr;
  }
  if (from._internal_has_validity_period()) {
    validity_period_ = new ::ern411::ern::ValidityPeriod(*from.validity_period_);
  } else {
    validity_period_ = nullptr;
  }
  percentage_of_rights_assignment_ = from.percentage_of_rights_assignment_;
  // @@protoc_insertion_point(copy_constructor:ern411.ern.Affiliation)
}

void Affiliation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Affiliation_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  company_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  party_affiliate_reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&percentage_of_rights_assignment_) -
      reinterpret_cast<char*>(&type_)) + sizeof(percentage_of_rights_assignment_));
}

Affiliation::~Affiliation() {
  // @@protoc_insertion_point(destructor:ern411.ern.Affiliation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Affiliation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  company_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  party_affiliate_reference_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete type_;
  if (this != internal_default_instance()) delete validity_period_;
}

void Affiliation::ArenaDtor(void* object) {
  Affiliation* _this = reinterpret_cast< Affiliation* >(object);
  (void)_this;
}
void Affiliation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Affiliation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Affiliation& Affiliation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Affiliation_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void Affiliation::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.Affiliation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  excluded_territory_code_.Clear();
  rights_type_.Clear();
  territory_code_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      company_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      party_affiliate_reference_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(type_ != nullptr);
      type_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(validity_period_ != nullptr);
      validity_period_->Clear();
    }
  }
  percentage_of_rights_assignment_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Affiliation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string company_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_company_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.Affiliation.company_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.CurrentTerritoryCode excluded_territory_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_excluded_territory_code(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string party_affiliate_reference = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_party_affiliate_reference();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.Affiliation.party_affiliate_reference");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double percentage_of_rights_assignment = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_percentage_of_rights_assignment(&has_bits);
          percentage_of_rights_assignment_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.SimpleRightsType rights_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rights_type(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.CurrentTerritoryCode territory_code = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_territory_code(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .ern411.avs.AffiliationType type = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.ern.ValidityPeriod validity_period = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_validity_period(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Affiliation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.Affiliation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string company_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_company_name().data(), static_cast<int>(this->_internal_company_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.Affiliation.company_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_company_name(), target);
  }

  // repeated .ern411.ern.CurrentTerritoryCode excluded_territory_code = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_excluded_territory_code_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_excluded_territory_code(i), target, stream);
  }

  // optional string party_affiliate_reference = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_party_affiliate_reference().data(), static_cast<int>(this->_internal_party_affiliate_reference().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.Affiliation.party_affiliate_reference");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_party_affiliate_reference(), target);
  }

  // optional double percentage_of_rights_assignment = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_percentage_of_rights_assignment(), target);
  }

  // repeated .ern411.ern.SimpleRightsType rights_type = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_rights_type_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_rights_type(i), target, stream);
  }

  // repeated .ern411.ern.CurrentTerritoryCode territory_code = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_territory_code_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_territory_code(i), target, stream);
  }

  // optional .ern411.avs.AffiliationType type = 7;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::type(this), target, stream);
  }

  // optional .ern411.ern.ValidityPeriod validity_period = 8;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::validity_period(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.Affiliation)
  return target;
}

size_t Affiliation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.Affiliation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ern411.ern.CurrentTerritoryCode excluded_territory_code = 2;
  total_size += 1UL * this->_internal_excluded_territory_code_size();
  for (const auto& msg : this->excluded_territory_code_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.SimpleRightsType rights_type = 5;
  total_size += 1UL * this->_internal_rights_type_size();
  for (const auto& msg : this->rights_type_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.CurrentTerritoryCode territory_code = 6;
  total_size += 1UL * this->_internal_territory_code_size();
  for (const auto& msg : this->territory_code_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string company_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_company_name());
    }

    // optional string party_affiliate_reference = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_party_affiliate_reference());
    }

    // optional .ern411.avs.AffiliationType type = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_);
    }

    // optional .ern411.ern.ValidityPeriod validity_period = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *validity_period_);
    }

    // optional double percentage_of_rights_assignment = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Affiliation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.Affiliation)
  GOOGLE_DCHECK_NE(&from, this);
  const Affiliation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Affiliation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.Affiliation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.Affiliation)
    MergeFrom(*source);
  }
}

void Affiliation::MergeFrom(const Affiliation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.Affiliation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  excluded_territory_code_.MergeFrom(from.excluded_territory_code_);
  rights_type_.MergeFrom(from.rights_type_);
  territory_code_.MergeFrom(from.territory_code_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_company_name(from._internal_company_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_party_affiliate_reference(from._internal_party_affiliate_reference());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_type()->::ern411::avs::AffiliationType::MergeFrom(from._internal_type());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_validity_period()->::ern411::ern::ValidityPeriod::MergeFrom(from._internal_validity_period());
    }
    if (cached_has_bits & 0x00000010u) {
      percentage_of_rights_assignment_ = from.percentage_of_rights_assignment_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Affiliation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.Affiliation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Affiliation::CopyFrom(const Affiliation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.Affiliation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Affiliation::IsInitialized() const {
  return true;
}

void Affiliation::InternalSwap(Affiliation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  excluded_territory_code_.InternalSwap(&other->excluded_territory_code_);
  rights_type_.InternalSwap(&other->rights_type_);
  territory_code_.InternalSwap(&other->territory_code_);
  company_name_.Swap(&other->company_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  party_affiliate_reference_.Swap(&other->party_affiliate_reference_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Affiliation, percentage_of_rights_assignment_)
      + sizeof(Affiliation::percentage_of_rights_assignment_)
      - PROTOBUF_FIELD_OFFSET(Affiliation, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Affiliation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AllTerritoryCode::InitAsDefaultInstance() {
  ::ern411::ern::_AllTerritoryCode_default_instance_._instance.get_mutable()->identifier_type_ = const_cast< ::ern411::avs::TerritoryCodeTypeIncludingDeprecatedCodes*>(
      ::ern411::avs::TerritoryCodeTypeIncludingDeprecatedCodes::internal_default_instance());
  ::ern411::ern::_AllTerritoryCode_default_instance_._instance.get_mutable()->ext_value_ = const_cast< ::ern411::avs::AllTerritoryCode*>(
      ::ern411::avs::AllTerritoryCode::internal_default_instance());
}
class AllTerritoryCode::_Internal {
 public:
  using HasBits = decltype(std::declval<AllTerritoryCode>()._has_bits_);
  static const ::ern411::avs::TerritoryCodeTypeIncludingDeprecatedCodes& identifier_type(const AllTerritoryCode* msg);
  static void set_has_identifier_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ern411::avs::AllTerritoryCode& ext_value(const AllTerritoryCode* msg);
  static void set_has_ext_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::ern411::avs::TerritoryCodeTypeIncludingDeprecatedCodes&
AllTerritoryCode::_Internal::identifier_type(const AllTerritoryCode* msg) {
  return *msg->identifier_type_;
}
const ::ern411::avs::AllTerritoryCode&
AllTerritoryCode::_Internal::ext_value(const AllTerritoryCode* msg) {
  return *msg->ext_value_;
}
void AllTerritoryCode::clear_identifier_type() {
  if (identifier_type_ != nullptr) identifier_type_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void AllTerritoryCode::clear_ext_value() {
  if (ext_value_ != nullptr) ext_value_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
AllTerritoryCode::AllTerritoryCode(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.AllTerritoryCode)
}
AllTerritoryCode::AllTerritoryCode(const AllTerritoryCode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_identifier_type()) {
    identifier_type_ = new ::ern411::avs::TerritoryCodeTypeIncludingDeprecatedCodes(*from.identifier_type_);
  } else {
    identifier_type_ = nullptr;
  }
  if (from._internal_has_ext_value()) {
    ext_value_ = new ::ern411::avs::AllTerritoryCode(*from.ext_value_);
  } else {
    ext_value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ern411.ern.AllTerritoryCode)
}

void AllTerritoryCode::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AllTerritoryCode_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  ::memset(&identifier_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ext_value_) -
      reinterpret_cast<char*>(&identifier_type_)) + sizeof(ext_value_));
}

AllTerritoryCode::~AllTerritoryCode() {
  // @@protoc_insertion_point(destructor:ern411.ern.AllTerritoryCode)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AllTerritoryCode::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete identifier_type_;
  if (this != internal_default_instance()) delete ext_value_;
}

void AllTerritoryCode::ArenaDtor(void* object) {
  AllTerritoryCode* _this = reinterpret_cast< AllTerritoryCode* >(object);
  (void)_this;
}
void AllTerritoryCode::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AllTerritoryCode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AllTerritoryCode& AllTerritoryCode::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AllTerritoryCode_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void AllTerritoryCode::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.AllTerritoryCode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(identifier_type_ != nullptr);
      identifier_type_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(ext_value_ != nullptr);
      ext_value_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AllTerritoryCode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ern411.avs.TerritoryCodeTypeIncludingDeprecatedCodes identifier_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_identifier_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.avs.AllTerritoryCode ext_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AllTerritoryCode::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.AllTerritoryCode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ern411.avs.TerritoryCodeTypeIncludingDeprecatedCodes identifier_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::identifier_type(this), target, stream);
  }

  // optional .ern411.avs.AllTerritoryCode ext_value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::ext_value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.AllTerritoryCode)
  return target;
}

size_t AllTerritoryCode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.AllTerritoryCode)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .ern411.avs.TerritoryCodeTypeIncludingDeprecatedCodes identifier_type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *identifier_type_);
    }

    // optional .ern411.avs.AllTerritoryCode ext_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ext_value_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AllTerritoryCode::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.AllTerritoryCode)
  GOOGLE_DCHECK_NE(&from, this);
  const AllTerritoryCode* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AllTerritoryCode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.AllTerritoryCode)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.AllTerritoryCode)
    MergeFrom(*source);
  }
}

void AllTerritoryCode::MergeFrom(const AllTerritoryCode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.AllTerritoryCode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_identifier_type()->::ern411::avs::TerritoryCodeTypeIncludingDeprecatedCodes::MergeFrom(from._internal_identifier_type());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_ext_value()->::ern411::avs::AllTerritoryCode::MergeFrom(from._internal_ext_value());
    }
  }
}

void AllTerritoryCode::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.AllTerritoryCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllTerritoryCode::CopyFrom(const AllTerritoryCode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.AllTerritoryCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllTerritoryCode::IsInitialized() const {
  return true;
}

void AllTerritoryCode::InternalSwap(AllTerritoryCode* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AllTerritoryCode, ext_value_)
      + sizeof(AllTerritoryCode::ext_value_)
      - PROTOBUF_FIELD_OFFSET(AllTerritoryCode, identifier_type_)>(
          reinterpret_cast<char*>(&identifier_type_),
          reinterpret_cast<char*>(&other->identifier_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AllTerritoryCode::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AspectRatio::InitAsDefaultInstance() {
  ::ern411::ern::_AspectRatio_default_instance_._instance.get_mutable()->aspect_ratio_type_ = const_cast< ::ern411::avs::AspectRatioType*>(
      ::ern411::avs::AspectRatioType::internal_default_instance());
}
class AspectRatio::_Internal {
 public:
  using HasBits = decltype(std::declval<AspectRatio>()._has_bits_);
  static const ::ern411::avs::AspectRatioType& aspect_ratio_type(const AspectRatio* msg);
  static void set_has_aspect_ratio_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ext_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::ern411::avs::AspectRatioType&
AspectRatio::_Internal::aspect_ratio_type(const AspectRatio* msg) {
  return *msg->aspect_ratio_type_;
}
void AspectRatio::clear_aspect_ratio_type() {
  if (aspect_ratio_type_ != nullptr) aspect_ratio_type_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
AspectRatio::AspectRatio(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.AspectRatio)
}
AspectRatio::AspectRatio(const AspectRatio& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_aspect_ratio_type()) {
    aspect_ratio_type_ = new ::ern411::avs::AspectRatioType(*from.aspect_ratio_type_);
  } else {
    aspect_ratio_type_ = nullptr;
  }
  ext_value_ = from.ext_value_;
  // @@protoc_insertion_point(copy_constructor:ern411.ern.AspectRatio)
}

void AspectRatio::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AspectRatio_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  ::memset(&aspect_ratio_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ext_value_) -
      reinterpret_cast<char*>(&aspect_ratio_type_)) + sizeof(ext_value_));
}

AspectRatio::~AspectRatio() {
  // @@protoc_insertion_point(destructor:ern411.ern.AspectRatio)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AspectRatio::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete aspect_ratio_type_;
}

void AspectRatio::ArenaDtor(void* object) {
  AspectRatio* _this = reinterpret_cast< AspectRatio* >(object);
  (void)_this;
}
void AspectRatio::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AspectRatio::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AspectRatio& AspectRatio::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AspectRatio_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void AspectRatio::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.AspectRatio)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(aspect_ratio_type_ != nullptr);
    aspect_ratio_type_->Clear();
  }
  ext_value_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AspectRatio::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ern411.avs.AspectRatioType aspect_ratio_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_aspect_ratio_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double ext_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_ext_value(&has_bits);
          ext_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AspectRatio::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.AspectRatio)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ern411.avs.AspectRatioType aspect_ratio_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::aspect_ratio_type(this), target, stream);
  }

  // optional double ext_value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_ext_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.AspectRatio)
  return target;
}

size_t AspectRatio::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.AspectRatio)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .ern411.avs.AspectRatioType aspect_ratio_type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *aspect_ratio_type_);
    }

    // optional double ext_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AspectRatio::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.AspectRatio)
  GOOGLE_DCHECK_NE(&from, this);
  const AspectRatio* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AspectRatio>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.AspectRatio)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.AspectRatio)
    MergeFrom(*source);
  }
}

void AspectRatio::MergeFrom(const AspectRatio& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.AspectRatio)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_aspect_ratio_type()->::ern411::avs::AspectRatioType::MergeFrom(from._internal_aspect_ratio_type());
    }
    if (cached_has_bits & 0x00000002u) {
      ext_value_ = from.ext_value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AspectRatio::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.AspectRatio)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AspectRatio::CopyFrom(const AspectRatio& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.AspectRatio)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AspectRatio::IsInitialized() const {
  return true;
}

void AspectRatio::InternalSwap(AspectRatio* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AspectRatio, ext_value_)
      + sizeof(AspectRatio::ext_value_)
      - PROTOBUF_FIELD_OFFSET(AspectRatio, aspect_ratio_type_)>(
          reinterpret_cast<char*>(&aspect_ratio_type_),
          reinterpret_cast<char*>(&other->aspect_ratio_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AspectRatio::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AudioCodecType::InitAsDefaultInstance() {
  ::ern411::ern::_AudioCodecType_default_instance_._instance.get_mutable()->ext_value_ = const_cast< ::ern411::avs::AudioCodecType*>(
      ::ern411::avs::AudioCodecType::internal_default_instance());
}
class AudioCodecType::_Internal {
 public:
  using HasBits = decltype(std::declval<AudioCodecType>()._has_bits_);
  static void set_has_namespace_(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_user_defined_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::ern411::avs::AudioCodecType& ext_value(const AudioCodecType* msg);
  static void set_has_ext_value(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::ern411::avs::AudioCodecType&
AudioCodecType::_Internal::ext_value(const AudioCodecType* msg) {
  return *msg->ext_value_;
}
void AudioCodecType::clear_ext_value() {
  if (ext_value_ != nullptr) ext_value_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
AudioCodecType::AudioCodecType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.AudioCodecType)
}
AudioCodecType::AudioCodecType(const AudioCodecType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_namespace_()) {
    namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_namespace_(),
      GetArena());
  }
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_user_defined_value()) {
    user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_defined_value(),
      GetArena());
  }
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_version()) {
    version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_version(),
      GetArena());
  }
  if (from._internal_has_ext_value()) {
    ext_value_ = new ::ern411::avs::AudioCodecType(*from.ext_value_);
  } else {
    ext_value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ern411.ern.AudioCodecType)
}

void AudioCodecType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AudioCodecType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ext_value_ = nullptr;
}

AudioCodecType::~AudioCodecType() {
  // @@protoc_insertion_point(destructor:ern411.ern.AudioCodecType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AudioCodecType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  namespace__.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ext_value_;
}

void AudioCodecType::ArenaDtor(void* object) {
  AudioCodecType* _this = reinterpret_cast< AudioCodecType* >(object);
  (void)_this;
}
void AudioCodecType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AudioCodecType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AudioCodecType& AudioCodecType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AudioCodecType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void AudioCodecType::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.AudioCodecType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      namespace__.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      user_defined_value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      version_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(ext_value_ != nullptr);
      ext_value_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AudioCodecType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string namespace = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_namespace_();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.AudioCodecType.namespace");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string user_defined_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_user_defined_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.AudioCodecType.user_defined_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.AudioCodecType.version");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.avs.AudioCodecType ext_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AudioCodecType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.AudioCodecType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string namespace = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_namespace_().data(), static_cast<int>(this->_internal_namespace_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.AudioCodecType.namespace");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_namespace_(), target);
  }

  // optional string user_defined_value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_user_defined_value().data(), static_cast<int>(this->_internal_user_defined_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.AudioCodecType.user_defined_value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_defined_value(), target);
  }

  // optional string version = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.AudioCodecType.version");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_version(), target);
  }

  // optional .ern411.avs.AudioCodecType ext_value = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::ext_value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.AudioCodecType)
  return target;
}

size_t AudioCodecType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.AudioCodecType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string namespace = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_namespace_());
    }

    // optional string user_defined_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_defined_value());
    }

    // optional string version = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_version());
    }

    // optional .ern411.avs.AudioCodecType ext_value = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ext_value_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AudioCodecType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.AudioCodecType)
  GOOGLE_DCHECK_NE(&from, this);
  const AudioCodecType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AudioCodecType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.AudioCodecType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.AudioCodecType)
    MergeFrom(*source);
  }
}

void AudioCodecType::MergeFrom(const AudioCodecType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.AudioCodecType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_namespace_(from._internal_namespace_());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_user_defined_value(from._internal_user_defined_value());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_version(from._internal_version());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_ext_value()->::ern411::avs::AudioCodecType::MergeFrom(from._internal_ext_value());
    }
  }
}

void AudioCodecType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.AudioCodecType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AudioCodecType::CopyFrom(const AudioCodecType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.AudioCodecType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioCodecType::IsInitialized() const {
  return true;
}

void AudioCodecType::InternalSwap(AudioCodecType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  namespace__.Swap(&other->namespace__, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_defined_value_.Swap(&other->user_defined_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  version_.Swap(&other->version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(ext_value_, other->ext_value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AudioCodecType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AvRating::InitAsDefaultInstance() {
  ::ern411::ern::_AvRating_default_instance_._instance.get_mutable()->agency_ = const_cast< ::ern411::ern::RatingAgency*>(
      ::ern411::ern::RatingAgency::internal_default_instance());
  ::ern411::ern::_AvRating_default_instance_._instance.get_mutable()->applicable_territory_code_ = const_cast< ::ern411::avs::CurrentTerritoryCode*>(
      ::ern411::avs::CurrentTerritoryCode::internal_default_instance());
  ::ern411::ern::_AvRating_default_instance_._instance.get_mutable()->reason_ = const_cast< ::ern411::avs::RatingReason*>(
      ::ern411::avs::RatingReason::internal_default_instance());
}
class AvRating::_Internal {
 public:
  using HasBits = decltype(std::declval<AvRating>()._has_bits_);
  static const ::ern411::ern::RatingAgency& agency(const AvRating* msg);
  static void set_has_agency(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::ern411::avs::CurrentTerritoryCode& applicable_territory_code(const AvRating* msg);
  static void set_has_applicable_territory_code(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_default(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_rating(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ern411::avs::RatingReason& reason(const AvRating* msg);
  static void set_has_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::ern411::ern::RatingAgency&
AvRating::_Internal::agency(const AvRating* msg) {
  return *msg->agency_;
}
const ::ern411::avs::CurrentTerritoryCode&
AvRating::_Internal::applicable_territory_code(const AvRating* msg) {
  return *msg->applicable_territory_code_;
}
const ::ern411::avs::RatingReason&
AvRating::_Internal::reason(const AvRating* msg) {
  return *msg->reason_;
}
void AvRating::clear_applicable_territory_code() {
  if (applicable_territory_code_ != nullptr) applicable_territory_code_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void AvRating::clear_reason() {
  if (reason_ != nullptr) reason_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
AvRating::AvRating(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.AvRating)
}
AvRating::AvRating(const AvRating& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  rating_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_rating()) {
    rating_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_rating(),
      GetArena());
  }
  if (from._internal_has_agency()) {
    agency_ = new ::ern411::ern::RatingAgency(*from.agency_);
  } else {
    agency_ = nullptr;
  }
  if (from._internal_has_applicable_territory_code()) {
    applicable_territory_code_ = new ::ern411::avs::CurrentTerritoryCode(*from.applicable_territory_code_);
  } else {
    applicable_territory_code_ = nullptr;
  }
  if (from._internal_has_reason()) {
    reason_ = new ::ern411::avs::RatingReason(*from.reason_);
  } else {
    reason_ = nullptr;
  }
  is_default_ = from.is_default_;
  // @@protoc_insertion_point(copy_constructor:ern411.ern.AvRating)
}

void AvRating::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AvRating_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  rating_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&agency_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_default_) -
      reinterpret_cast<char*>(&agency_)) + sizeof(is_default_));
}

AvRating::~AvRating() {
  // @@protoc_insertion_point(destructor:ern411.ern.AvRating)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AvRating::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  rating_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete agency_;
  if (this != internal_default_instance()) delete applicable_territory_code_;
  if (this != internal_default_instance()) delete reason_;
}

void AvRating::ArenaDtor(void* object) {
  AvRating* _this = reinterpret_cast< AvRating* >(object);
  (void)_this;
}
void AvRating::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AvRating::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AvRating& AvRating::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AvRating_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void AvRating::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.AvRating)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      rating_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(agency_ != nullptr);
      agency_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(applicable_territory_code_ != nullptr);
      applicable_territory_code_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(reason_ != nullptr);
      reason_->Clear();
    }
  }
  is_default_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AvRating::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ern411.ern.RatingAgency agency = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_agency(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.avs.CurrentTerritoryCode applicable_territory_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_applicable_territory_code(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_default = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_is_default(&has_bits);
          is_default_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string rating = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_rating();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.AvRating.rating");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.avs.RatingReason reason = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_reason(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AvRating::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.AvRating)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ern411.ern.RatingAgency agency = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::agency(this), target, stream);
  }

  // optional .ern411.avs.CurrentTerritoryCode applicable_territory_code = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::applicable_territory_code(this), target, stream);
  }

  // optional bool is_default = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_default(), target);
  }

  // optional string rating = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_rating().data(), static_cast<int>(this->_internal_rating().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.AvRating.rating");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_rating(), target);
  }

  // optional .ern411.avs.RatingReason reason = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::reason(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.AvRating)
  return target;
}

size_t AvRating::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.AvRating)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string rating = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_rating());
    }

    // optional .ern411.ern.RatingAgency agency = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *agency_);
    }

    // optional .ern411.avs.CurrentTerritoryCode applicable_territory_code = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *applicable_territory_code_);
    }

    // optional .ern411.avs.RatingReason reason = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *reason_);
    }

    // optional bool is_default = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AvRating::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.AvRating)
  GOOGLE_DCHECK_NE(&from, this);
  const AvRating* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AvRating>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.AvRating)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.AvRating)
    MergeFrom(*source);
  }
}

void AvRating::MergeFrom(const AvRating& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.AvRating)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_rating(from._internal_rating());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_agency()->::ern411::ern::RatingAgency::MergeFrom(from._internal_agency());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_applicable_territory_code()->::ern411::avs::CurrentTerritoryCode::MergeFrom(from._internal_applicable_territory_code());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_reason()->::ern411::avs::RatingReason::MergeFrom(from._internal_reason());
    }
    if (cached_has_bits & 0x00000010u) {
      is_default_ = from.is_default_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AvRating::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.AvRating)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AvRating::CopyFrom(const AvRating& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.AvRating)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AvRating::IsInitialized() const {
  return true;
}

void AvRating::InternalSwap(AvRating* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  rating_.Swap(&other->rating_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AvRating, is_default_)
      + sizeof(AvRating::is_default_)
      - PROTOBUF_FIELD_OFFSET(AvRating, agency_)>(
          reinterpret_cast<char*>(&agency_),
          reinterpret_cast<char*>(&other->agency_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AvRating::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BitRate::InitAsDefaultInstance() {
  ::ern411::ern::_BitRate_default_instance_._instance.get_mutable()->unit_of_measure_ = const_cast< ::ern411::avs::UnitOfBitRate*>(
      ::ern411::avs::UnitOfBitRate::internal_default_instance());
}
class BitRate::_Internal {
 public:
  using HasBits = decltype(std::declval<BitRate>()._has_bits_);
  static const ::ern411::avs::UnitOfBitRate& unit_of_measure(const BitRate* msg);
  static void set_has_unit_of_measure(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ext_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::ern411::avs::UnitOfBitRate&
BitRate::_Internal::unit_of_measure(const BitRate* msg) {
  return *msg->unit_of_measure_;
}
void BitRate::clear_unit_of_measure() {
  if (unit_of_measure_ != nullptr) unit_of_measure_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
BitRate::BitRate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.BitRate)
}
BitRate::BitRate(const BitRate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_unit_of_measure()) {
    unit_of_measure_ = new ::ern411::avs::UnitOfBitRate(*from.unit_of_measure_);
  } else {
    unit_of_measure_ = nullptr;
  }
  ext_value_ = from.ext_value_;
  // @@protoc_insertion_point(copy_constructor:ern411.ern.BitRate)
}

void BitRate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BitRate_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  ::memset(&unit_of_measure_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ext_value_) -
      reinterpret_cast<char*>(&unit_of_measure_)) + sizeof(ext_value_));
}

BitRate::~BitRate() {
  // @@protoc_insertion_point(destructor:ern411.ern.BitRate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BitRate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete unit_of_measure_;
}

void BitRate::ArenaDtor(void* object) {
  BitRate* _this = reinterpret_cast< BitRate* >(object);
  (void)_this;
}
void BitRate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BitRate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BitRate& BitRate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BitRate_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void BitRate::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.BitRate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(unit_of_measure_ != nullptr);
    unit_of_measure_->Clear();
  }
  ext_value_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BitRate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ern411.avs.UnitOfBitRate unit_of_measure = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_unit_of_measure(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double ext_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_ext_value(&has_bits);
          ext_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BitRate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.BitRate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ern411.avs.UnitOfBitRate unit_of_measure = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::unit_of_measure(this), target, stream);
  }

  // optional double ext_value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_ext_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.BitRate)
  return target;
}

size_t BitRate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.BitRate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .ern411.avs.UnitOfBitRate unit_of_measure = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *unit_of_measure_);
    }

    // optional double ext_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BitRate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.BitRate)
  GOOGLE_DCHECK_NE(&from, this);
  const BitRate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BitRate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.BitRate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.BitRate)
    MergeFrom(*source);
  }
}

void BitRate::MergeFrom(const BitRate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.BitRate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_unit_of_measure()->::ern411::avs::UnitOfBitRate::MergeFrom(from._internal_unit_of_measure());
    }
    if (cached_has_bits & 0x00000002u) {
      ext_value_ = from.ext_value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BitRate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.BitRate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BitRate::CopyFrom(const BitRate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.BitRate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BitRate::IsInitialized() const {
  return true;
}

void BitRate::InternalSwap(BitRate* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BitRate, ext_value_)
      + sizeof(BitRate::ext_value_)
      - PROTOBUF_FIELD_OFFSET(BitRate, unit_of_measure_)>(
          reinterpret_cast<char*>(&unit_of_measure_),
          reinterpret_cast<char*>(&other->unit_of_measure_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BitRate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CLine::InitAsDefaultInstance() {
}
class CLine::_Internal {
 public:
  using HasBits = decltype(std::declval<CLine>()._has_bits_);
  static void set_has_c_line_company(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_c_line_text(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_language_and_script_code(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_year(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CLine::CLine(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.CLine)
}
CLine::CLine(const CLine& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  c_line_company_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_c_line_company()) {
    c_line_company_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_c_line_company(),
      GetArena());
  }
  c_line_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_c_line_text()) {
    c_line_text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_c_line_text(),
      GetArena());
  }
  language_and_script_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_language_and_script_code()) {
    language_and_script_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_language_and_script_code(),
      GetArena());
  }
  year_ = from.year_;
  // @@protoc_insertion_point(copy_constructor:ern411.ern.CLine)
}

void CLine::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CLine_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  c_line_company_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  c_line_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  language_and_script_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  year_ = 0u;
}

CLine::~CLine() {
  // @@protoc_insertion_point(destructor:ern411.ern.CLine)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CLine::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  c_line_company_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  c_line_text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  language_and_script_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CLine::ArenaDtor(void* object) {
  CLine* _this = reinterpret_cast< CLine* >(object);
  (void)_this;
}
void CLine::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CLine::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CLine& CLine::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CLine_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void CLine::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.CLine)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      c_line_company_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      c_line_text_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      language_and_script_code_.ClearNonDefaultToEmpty();
    }
  }
  year_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CLine::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string c_line_company = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_c_line_company();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.CLine.c_line_company");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string c_line_text = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_c_line_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.CLine.c_line_text");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string language_and_script_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_language_and_script_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.CLine.language_and_script_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 year = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_year(&has_bits);
          year_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CLine::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.CLine)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string c_line_company = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_c_line_company().data(), static_cast<int>(this->_internal_c_line_company().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.CLine.c_line_company");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_c_line_company(), target);
  }

  // optional string c_line_text = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_c_line_text().data(), static_cast<int>(this->_internal_c_line_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.CLine.c_line_text");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_c_line_text(), target);
  }

  // optional string language_and_script_code = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_language_and_script_code().data(), static_cast<int>(this->_internal_language_and_script_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.CLine.language_and_script_code");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_language_and_script_code(), target);
  }

  // optional uint32 year = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_year(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.CLine)
  return target;
}

size_t CLine::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.CLine)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string c_line_company = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_c_line_company());
    }

    // optional string c_line_text = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_c_line_text());
    }

    // optional string language_and_script_code = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_language_and_script_code());
    }

    // optional uint32 year = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_year());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CLine::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.CLine)
  GOOGLE_DCHECK_NE(&from, this);
  const CLine* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CLine>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.CLine)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.CLine)
    MergeFrom(*source);
  }
}

void CLine::MergeFrom(const CLine& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.CLine)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_c_line_company(from._internal_c_line_company());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_c_line_text(from._internal_c_line_text());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_language_and_script_code(from._internal_language_and_script_code());
    }
    if (cached_has_bits & 0x00000008u) {
      year_ = from.year_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CLine::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.CLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CLine::CopyFrom(const CLine& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.CLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CLine::IsInitialized() const {
  return true;
}

void CLine::InternalSwap(CLine* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  c_line_company_.Swap(&other->c_line_company_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  c_line_text_.Swap(&other->c_line_text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  language_and_script_code_.Swap(&other->language_and_script_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(year_, other->year_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CLine::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CLineWithDefault::InitAsDefaultInstance() {
  ::ern411::ern::_CLineWithDefault_default_instance_._instance.get_mutable()->applicable_territory_code_ = const_cast< ::ern411::avs::CurrentTerritoryCode*>(
      ::ern411::avs::CurrentTerritoryCode::internal_default_instance());
}
class CLineWithDefault::_Internal {
 public:
  using HasBits = decltype(std::declval<CLineWithDefault>()._has_bits_);
  static const ::ern411::avs::CurrentTerritoryCode& applicable_territory_code(const CLineWithDefault* msg);
  static void set_has_applicable_territory_code(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_c_line_company(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_c_line_text(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_default(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_language_and_script_code(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_year(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::ern411::avs::CurrentTerritoryCode&
CLineWithDefault::_Internal::applicable_territory_code(const CLineWithDefault* msg) {
  return *msg->applicable_territory_code_;
}
void CLineWithDefault::clear_applicable_territory_code() {
  if (applicable_territory_code_ != nullptr) applicable_territory_code_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
CLineWithDefault::CLineWithDefault(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.CLineWithDefault)
}
CLineWithDefault::CLineWithDefault(const CLineWithDefault& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  c_line_company_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_c_line_company()) {
    c_line_company_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_c_line_company(),
      GetArena());
  }
  c_line_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_c_line_text()) {
    c_line_text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_c_line_text(),
      GetArena());
  }
  language_and_script_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_language_and_script_code()) {
    language_and_script_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_language_and_script_code(),
      GetArena());
  }
  if (from._internal_has_applicable_territory_code()) {
    applicable_territory_code_ = new ::ern411::avs::CurrentTerritoryCode(*from.applicable_territory_code_);
  } else {
    applicable_territory_code_ = nullptr;
  }
  ::memcpy(&is_default_, &from.is_default_,
    static_cast<size_t>(reinterpret_cast<char*>(&year_) -
    reinterpret_cast<char*>(&is_default_)) + sizeof(year_));
  // @@protoc_insertion_point(copy_constructor:ern411.ern.CLineWithDefault)
}

void CLineWithDefault::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CLineWithDefault_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  c_line_company_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  c_line_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  language_and_script_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&applicable_territory_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&year_) -
      reinterpret_cast<char*>(&applicable_territory_code_)) + sizeof(year_));
}

CLineWithDefault::~CLineWithDefault() {
  // @@protoc_insertion_point(destructor:ern411.ern.CLineWithDefault)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CLineWithDefault::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  c_line_company_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  c_line_text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  language_and_script_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete applicable_territory_code_;
}

void CLineWithDefault::ArenaDtor(void* object) {
  CLineWithDefault* _this = reinterpret_cast< CLineWithDefault* >(object);
  (void)_this;
}
void CLineWithDefault::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CLineWithDefault::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CLineWithDefault& CLineWithDefault::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CLineWithDefault_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void CLineWithDefault::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.CLineWithDefault)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      c_line_company_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      c_line_text_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      language_and_script_code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(applicable_territory_code_ != nullptr);
      applicable_territory_code_->Clear();
    }
  }
  if (cached_has_bits & 0x00000030u) {
    ::memset(&is_default_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&year_) -
        reinterpret_cast<char*>(&is_default_)) + sizeof(year_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CLineWithDefault::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ern411.avs.CurrentTerritoryCode applicable_territory_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_applicable_territory_code(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string c_line_company = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_c_line_company();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.CLineWithDefault.c_line_company");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string c_line_text = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_c_line_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.CLineWithDefault.c_line_text");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_default = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_is_default(&has_bits);
          is_default_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string language_and_script_code = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_language_and_script_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.CLineWithDefault.language_and_script_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 year = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_year(&has_bits);
          year_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CLineWithDefault::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.CLineWithDefault)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ern411.avs.CurrentTerritoryCode applicable_territory_code = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::applicable_territory_code(this), target, stream);
  }

  // optional string c_line_company = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_c_line_company().data(), static_cast<int>(this->_internal_c_line_company().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.CLineWithDefault.c_line_company");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_c_line_company(), target);
  }

  // optional string c_line_text = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_c_line_text().data(), static_cast<int>(this->_internal_c_line_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.CLineWithDefault.c_line_text");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_c_line_text(), target);
  }

  // optional bool is_default = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_is_default(), target);
  }

  // optional string language_and_script_code = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_language_and_script_code().data(), static_cast<int>(this->_internal_language_and_script_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.CLineWithDefault.language_and_script_code");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_language_and_script_code(), target);
  }

  // optional uint32 year = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_year(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.CLineWithDefault)
  return target;
}

size_t CLineWithDefault::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.CLineWithDefault)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string c_line_company = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_c_line_company());
    }

    // optional string c_line_text = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_c_line_text());
    }

    // optional string language_and_script_code = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_language_and_script_code());
    }

    // optional .ern411.avs.CurrentTerritoryCode applicable_territory_code = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *applicable_territory_code_);
    }

    // optional bool is_default = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional uint32 year = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_year());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CLineWithDefault::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.CLineWithDefault)
  GOOGLE_DCHECK_NE(&from, this);
  const CLineWithDefault* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CLineWithDefault>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.CLineWithDefault)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.CLineWithDefault)
    MergeFrom(*source);
  }
}

void CLineWithDefault::MergeFrom(const CLineWithDefault& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.CLineWithDefault)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_c_line_company(from._internal_c_line_company());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_c_line_text(from._internal_c_line_text());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_language_and_script_code(from._internal_language_and_script_code());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_applicable_territory_code()->::ern411::avs::CurrentTerritoryCode::MergeFrom(from._internal_applicable_territory_code());
    }
    if (cached_has_bits & 0x00000010u) {
      is_default_ = from.is_default_;
    }
    if (cached_has_bits & 0x00000020u) {
      year_ = from.year_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CLineWithDefault::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.CLineWithDefault)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CLineWithDefault::CopyFrom(const CLineWithDefault& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.CLineWithDefault)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CLineWithDefault::IsInitialized() const {
  return true;
}

void CLineWithDefault::InternalSwap(CLineWithDefault* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  c_line_company_.Swap(&other->c_line_company_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  c_line_text_.Swap(&other->c_line_text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  language_and_script_code_.Swap(&other->language_and_script_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CLineWithDefault, year_)
      + sizeof(CLineWithDefault::year_)
      - PROTOBUF_FIELD_OFFSET(CLineWithDefault, applicable_territory_code_)>(
          reinterpret_cast<char*>(&applicable_territory_code_),
          reinterpret_cast<char*>(&other->applicable_territory_code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CLineWithDefault::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CarrierType::InitAsDefaultInstance() {
  ::ern411::ern::_CarrierType_default_instance_._instance.get_mutable()->ext_value_ = const_cast< ::ern411::avs::CarrierType*>(
      ::ern411::avs::CarrierType::internal_default_instance());
}
class CarrierType::_Internal {
 public:
  using HasBits = decltype(std::declval<CarrierType>()._has_bits_);
  static void set_has_namespace_(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_user_defined_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::ern411::avs::CarrierType& ext_value(const CarrierType* msg);
  static void set_has_ext_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::ern411::avs::CarrierType&
CarrierType::_Internal::ext_value(const CarrierType* msg) {
  return *msg->ext_value_;
}
void CarrierType::clear_ext_value() {
  if (ext_value_ != nullptr) ext_value_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
CarrierType::CarrierType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.CarrierType)
}
CarrierType::CarrierType(const CarrierType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_namespace_()) {
    namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_namespace_(),
      GetArena());
  }
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_user_defined_value()) {
    user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_defined_value(),
      GetArena());
  }
  if (from._internal_has_ext_value()) {
    ext_value_ = new ::ern411::avs::CarrierType(*from.ext_value_);
  } else {
    ext_value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ern411.ern.CarrierType)
}

void CarrierType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CarrierType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ext_value_ = nullptr;
}

CarrierType::~CarrierType() {
  // @@protoc_insertion_point(destructor:ern411.ern.CarrierType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CarrierType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  namespace__.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ext_value_;
}

void CarrierType::ArenaDtor(void* object) {
  CarrierType* _this = reinterpret_cast< CarrierType* >(object);
  (void)_this;
}
void CarrierType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CarrierType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CarrierType& CarrierType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CarrierType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void CarrierType::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.CarrierType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      namespace__.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      user_defined_value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(ext_value_ != nullptr);
      ext_value_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CarrierType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string namespace = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_namespace_();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.CarrierType.namespace");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string user_defined_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_user_defined_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.CarrierType.user_defined_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.avs.CarrierType ext_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CarrierType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.CarrierType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string namespace = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_namespace_().data(), static_cast<int>(this->_internal_namespace_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.CarrierType.namespace");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_namespace_(), target);
  }

  // optional string user_defined_value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_user_defined_value().data(), static_cast<int>(this->_internal_user_defined_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.CarrierType.user_defined_value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_defined_value(), target);
  }

  // optional .ern411.avs.CarrierType ext_value = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::ext_value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.CarrierType)
  return target;
}

size_t CarrierType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.CarrierType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string namespace = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_namespace_());
    }

    // optional string user_defined_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_defined_value());
    }

    // optional .ern411.avs.CarrierType ext_value = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ext_value_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CarrierType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.CarrierType)
  GOOGLE_DCHECK_NE(&from, this);
  const CarrierType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CarrierType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.CarrierType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.CarrierType)
    MergeFrom(*source);
  }
}

void CarrierType::MergeFrom(const CarrierType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.CarrierType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_namespace_(from._internal_namespace_());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_user_defined_value(from._internal_user_defined_value());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_ext_value()->::ern411::avs::CarrierType::MergeFrom(from._internal_ext_value());
    }
  }
}

void CarrierType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.CarrierType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CarrierType::CopyFrom(const CarrierType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.CarrierType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CarrierType::IsInitialized() const {
  return true;
}

void CarrierType::InternalSwap(CarrierType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  namespace__.Swap(&other->namespace__, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_defined_value_.Swap(&other->user_defined_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(ext_value_, other->ext_value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CarrierType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CatalogNumber::InitAsDefaultInstance() {
}
class CatalogNumber::_Internal {
 public:
  using HasBits = decltype(std::declval<CatalogNumber>()._has_bits_);
  static void set_has_namespace_(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ext_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CatalogNumber::CatalogNumber(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.CatalogNumber)
}
CatalogNumber::CatalogNumber(const CatalogNumber& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_namespace_()) {
    namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_namespace_(),
      GetArena());
  }
  ext_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ext_value()) {
    ext_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ext_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:ern411.ern.CatalogNumber)
}

void CatalogNumber::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CatalogNumber_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ext_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CatalogNumber::~CatalogNumber() {
  // @@protoc_insertion_point(destructor:ern411.ern.CatalogNumber)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CatalogNumber::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  namespace__.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ext_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CatalogNumber::ArenaDtor(void* object) {
  CatalogNumber* _this = reinterpret_cast< CatalogNumber* >(object);
  (void)_this;
}
void CatalogNumber::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CatalogNumber::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CatalogNumber& CatalogNumber::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CatalogNumber_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void CatalogNumber::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.CatalogNumber)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      namespace__.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      ext_value_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CatalogNumber::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string namespace = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_namespace_();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.CatalogNumber.namespace");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string ext_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_ext_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.CatalogNumber.ext_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CatalogNumber::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.CatalogNumber)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string namespace = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_namespace_().data(), static_cast<int>(this->_internal_namespace_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.CatalogNumber.namespace");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_namespace_(), target);
  }

  // optional string ext_value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ext_value().data(), static_cast<int>(this->_internal_ext_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.CatalogNumber.ext_value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ext_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.CatalogNumber)
  return target;
}

size_t CatalogNumber::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.CatalogNumber)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string namespace = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_namespace_());
    }

    // optional string ext_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ext_value());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CatalogNumber::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.CatalogNumber)
  GOOGLE_DCHECK_NE(&from, this);
  const CatalogNumber* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CatalogNumber>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.CatalogNumber)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.CatalogNumber)
    MergeFrom(*source);
  }
}

void CatalogNumber::MergeFrom(const CatalogNumber& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.CatalogNumber)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_namespace_(from._internal_namespace_());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_ext_value(from._internal_ext_value());
    }
  }
}

void CatalogNumber::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.CatalogNumber)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CatalogNumber::CopyFrom(const CatalogNumber& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.CatalogNumber)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CatalogNumber::IsInitialized() const {
  return true;
}

void CatalogNumber::InternalSwap(CatalogNumber* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  namespace__.Swap(&other->namespace__, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ext_value_.Swap(&other->ext_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CatalogNumber::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Chapter::InitAsDefaultInstance() {
}
class Chapter::_Internal {
 public:
  using HasBits = decltype(std::declval<Chapter>()._has_bits_);
  static void set_has_chapter_reference(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_end_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_language_and_script_code(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_representative_image_reference(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_sequence_number(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_start_time(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

Chapter::Chapter(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  additional_title_(arena),
  chapter_id_(arena),
  character_(arena),
  contributor_(arena),
  display_title_(arena),
  display_title_text_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.Chapter)
}
Chapter::Chapter(const Chapter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      additional_title_(from.additional_title_),
      chapter_id_(from.chapter_id_),
      character_(from.character_),
      contributor_(from.contributor_),
      display_title_(from.display_title_),
      display_title_text_(from.display_title_text_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  chapter_reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_chapter_reference()) {
    chapter_reference_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_chapter_reference(),
      GetArena());
  }
  duration_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_duration()) {
    duration_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_duration(),
      GetArena());
  }
  end_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_end_time()) {
    end_time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_end_time(),
      GetArena());
  }
  language_and_script_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_language_and_script_code()) {
    language_and_script_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_language_and_script_code(),
      GetArena());
  }
  representative_image_reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_representative_image_reference()) {
    representative_image_reference_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_representative_image_reference(),
      GetArena());
  }
  start_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_start_time()) {
    start_time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_start_time(),
      GetArena());
  }
  sequence_number_ = from.sequence_number_;
  // @@protoc_insertion_point(copy_constructor:ern411.ern.Chapter)
}

void Chapter::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Chapter_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  chapter_reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  duration_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  end_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  language_and_script_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  representative_image_reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  start_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sequence_number_ = 0;
}

Chapter::~Chapter() {
  // @@protoc_insertion_point(destructor:ern411.ern.Chapter)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Chapter::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  chapter_reference_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  duration_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  end_time_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  language_and_script_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  representative_image_reference_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  start_time_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Chapter::ArenaDtor(void* object) {
  Chapter* _this = reinterpret_cast< Chapter* >(object);
  (void)_this;
}
void Chapter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Chapter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Chapter& Chapter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Chapter_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void Chapter::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.Chapter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  additional_title_.Clear();
  chapter_id_.Clear();
  character_.Clear();
  contributor_.Clear();
  display_title_.Clear();
  display_title_text_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      chapter_reference_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      duration_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      end_time_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      language_and_script_code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      representative_image_reference_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      start_time_.ClearNonDefaultToEmpty();
    }
  }
  sequence_number_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Chapter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ern411.ern.AdditionalTitle additional_title = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_additional_title(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.ProprietaryId chapter_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_chapter_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string chapter_reference = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_chapter_reference();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.Chapter.chapter_reference");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.Character character = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_character(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.Contributor contributor = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_contributor(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.DisplayTitle display_title = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_display_title(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.DisplayTitleText display_title_text = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_display_title_text(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string duration = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_duration();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.Chapter.duration");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string end_time = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_end_time();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.Chapter.end_time");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string language_and_script_code = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_language_and_script_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.Chapter.language_and_script_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string representative_image_reference = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_representative_image_reference();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.Chapter.representative_image_reference");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 sequence_number = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_sequence_number(&has_bits);
          sequence_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string start_time = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_start_time();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.Chapter.start_time");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Chapter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.Chapter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ern411.ern.AdditionalTitle additional_title = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_additional_title_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_additional_title(i), target, stream);
  }

  // repeated .ern411.ern.ProprietaryId chapter_id = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_chapter_id_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_chapter_id(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional string chapter_reference = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_chapter_reference().data(), static_cast<int>(this->_internal_chapter_reference().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.Chapter.chapter_reference");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_chapter_reference(), target);
  }

  // repeated .ern411.ern.Character character = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_character_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_character(i), target, stream);
  }

  // repeated .ern411.ern.Contributor contributor = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_contributor_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_contributor(i), target, stream);
  }

  // repeated .ern411.ern.DisplayTitle display_title = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_display_title_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_display_title(i), target, stream);
  }

  // repeated .ern411.ern.DisplayTitleText display_title_text = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_display_title_text_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_display_title_text(i), target, stream);
  }

  // optional string duration = 8;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_duration().data(), static_cast<int>(this->_internal_duration().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.Chapter.duration");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_duration(), target);
  }

  // optional string end_time = 9;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_end_time().data(), static_cast<int>(this->_internal_end_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.Chapter.end_time");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_end_time(), target);
  }

  // optional string language_and_script_code = 10;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_language_and_script_code().data(), static_cast<int>(this->_internal_language_and_script_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.Chapter.language_and_script_code");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_language_and_script_code(), target);
  }

  // optional string representative_image_reference = 11;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_representative_image_reference().data(), static_cast<int>(this->_internal_representative_image_reference().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.Chapter.representative_image_reference");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_representative_image_reference(), target);
  }

  // optional int32 sequence_number = 12;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_sequence_number(), target);
  }

  // optional string start_time = 13;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_start_time().data(), static_cast<int>(this->_internal_start_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.Chapter.start_time");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_start_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.Chapter)
  return target;
}

size_t Chapter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.Chapter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ern411.ern.AdditionalTitle additional_title = 1;
  total_size += 1UL * this->_internal_additional_title_size();
  for (const auto& msg : this->additional_title_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.ProprietaryId chapter_id = 2;
  total_size += 1UL * this->_internal_chapter_id_size();
  for (const auto& msg : this->chapter_id_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.Character character = 4;
  total_size += 1UL * this->_internal_character_size();
  for (const auto& msg : this->character_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.Contributor contributor = 5;
  total_size += 1UL * this->_internal_contributor_size();
  for (const auto& msg : this->contributor_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.DisplayTitle display_title = 6;
  total_size += 1UL * this->_internal_display_title_size();
  for (const auto& msg : this->display_title_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.DisplayTitleText display_title_text = 7;
  total_size += 1UL * this->_internal_display_title_text_size();
  for (const auto& msg : this->display_title_text_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string chapter_reference = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_chapter_reference());
    }

    // optional string duration = 8;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_duration());
    }

    // optional string end_time = 9;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_end_time());
    }

    // optional string language_and_script_code = 10;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_language_and_script_code());
    }

    // optional string representative_image_reference = 11;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_representative_image_reference());
    }

    // optional string start_time = 13;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_start_time());
    }

    // optional int32 sequence_number = 12;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_sequence_number());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Chapter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.Chapter)
  GOOGLE_DCHECK_NE(&from, this);
  const Chapter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Chapter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.Chapter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.Chapter)
    MergeFrom(*source);
  }
}

void Chapter::MergeFrom(const Chapter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.Chapter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  additional_title_.MergeFrom(from.additional_title_);
  chapter_id_.MergeFrom(from.chapter_id_);
  character_.MergeFrom(from.character_);
  contributor_.MergeFrom(from.contributor_);
  display_title_.MergeFrom(from.display_title_);
  display_title_text_.MergeFrom(from.display_title_text_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_chapter_reference(from._internal_chapter_reference());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_duration(from._internal_duration());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_end_time(from._internal_end_time());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_language_and_script_code(from._internal_language_and_script_code());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_representative_image_reference(from._internal_representative_image_reference());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_start_time(from._internal_start_time());
    }
    if (cached_has_bits & 0x00000040u) {
      sequence_number_ = from.sequence_number_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Chapter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.Chapter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Chapter::CopyFrom(const Chapter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.Chapter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Chapter::IsInitialized() const {
  return true;
}

void Chapter::InternalSwap(Chapter* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  additional_title_.InternalSwap(&other->additional_title_);
  chapter_id_.InternalSwap(&other->chapter_id_);
  character_.InternalSwap(&other->character_);
  contributor_.InternalSwap(&other->contributor_);
  display_title_.InternalSwap(&other->display_title_);
  display_title_text_.InternalSwap(&other->display_title_text_);
  chapter_reference_.Swap(&other->chapter_reference_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  duration_.Swap(&other->duration_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  end_time_.Swap(&other->end_time_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  language_and_script_code_.Swap(&other->language_and_script_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  representative_image_reference_.Swap(&other->representative_image_reference_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  start_time_.Swap(&other->start_time_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(sequence_number_, other->sequence_number_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Chapter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ChapterList::InitAsDefaultInstance() {
}
class ChapterList::_Internal {
 public:
  using HasBits = decltype(std::declval<ChapterList>()._has_bits_);
  static void set_has_language_and_script_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ChapterList::ChapterList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  chapter_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.ChapterList)
}
ChapterList::ChapterList(const ChapterList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      chapter_(from.chapter_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  language_and_script_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_language_and_script_code()) {
    language_and_script_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_language_and_script_code(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:ern411.ern.ChapterList)
}

void ChapterList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChapterList_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  language_and_script_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ChapterList::~ChapterList() {
  // @@protoc_insertion_point(destructor:ern411.ern.ChapterList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChapterList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  language_and_script_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ChapterList::ArenaDtor(void* object) {
  ChapterList* _this = reinterpret_cast< ChapterList* >(object);
  (void)_this;
}
void ChapterList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChapterList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChapterList& ChapterList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChapterList_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void ChapterList::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.ChapterList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chapter_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    language_and_script_code_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChapterList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ern411.ern.Chapter chapter = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_chapter(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string language_and_script_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_language_and_script_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.ChapterList.language_and_script_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChapterList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.ChapterList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ern411.ern.Chapter chapter = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_chapter_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_chapter(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional string language_and_script_code = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_language_and_script_code().data(), static_cast<int>(this->_internal_language_and_script_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.ChapterList.language_and_script_code");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_language_and_script_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.ChapterList)
  return target;
}

size_t ChapterList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.ChapterList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ern411.ern.Chapter chapter = 1;
  total_size += 1UL * this->_internal_chapter_size();
  for (const auto& msg : this->chapter_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional string language_and_script_code = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_language_and_script_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChapterList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.ChapterList)
  GOOGLE_DCHECK_NE(&from, this);
  const ChapterList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChapterList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.ChapterList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.ChapterList)
    MergeFrom(*source);
  }
}

void ChapterList::MergeFrom(const ChapterList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.ChapterList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  chapter_.MergeFrom(from.chapter_);
  if (from._internal_has_language_and_script_code()) {
    _internal_set_language_and_script_code(from._internal_language_and_script_code());
  }
}

void ChapterList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.ChapterList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChapterList::CopyFrom(const ChapterList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.ChapterList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChapterList::IsInitialized() const {
  return true;
}

void ChapterList::InternalSwap(ChapterList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  chapter_.InternalSwap(&other->chapter_);
  language_and_script_code_.Swap(&other->language_and_script_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ChapterList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Character::InitAsDefaultInstance() {
  ::ern411::ern::_Character_default_instance_._instance.get_mutable()->performer_ = const_cast< ::ern411::ern::Contributor*>(
      ::ern411::ern::Contributor::internal_default_instance());
}
class Character::_Internal {
 public:
  using HasBits = decltype(std::declval<Character>()._has_bits_);
  static void set_has_character_party_reference(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ern411::ern::Contributor& performer(const Character* msg);
  static void set_has_performer(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_sequence_number(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::ern411::ern::Contributor&
Character::_Internal::performer(const Character* msg) {
  return *msg->performer_;
}
Character::Character(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.Character)
}
Character::Character(const Character& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  character_party_reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_character_party_reference()) {
    character_party_reference_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_character_party_reference(),
      GetArena());
  }
  if (from._internal_has_performer()) {
    performer_ = new ::ern411::ern::Contributor(*from.performer_);
  } else {
    performer_ = nullptr;
  }
  sequence_number_ = from.sequence_number_;
  // @@protoc_insertion_point(copy_constructor:ern411.ern.Character)
}

void Character::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Character_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  character_party_reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&performer_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sequence_number_) -
      reinterpret_cast<char*>(&performer_)) + sizeof(sequence_number_));
}

Character::~Character() {
  // @@protoc_insertion_point(destructor:ern411.ern.Character)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Character::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  character_party_reference_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete performer_;
}

void Character::ArenaDtor(void* object) {
  Character* _this = reinterpret_cast< Character* >(object);
  (void)_this;
}
void Character::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Character::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Character& Character::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Character_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void Character::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.Character)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      character_party_reference_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(performer_ != nullptr);
      performer_->Clear();
    }
  }
  sequence_number_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Character::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string character_party_reference = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_character_party_reference();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.Character.character_party_reference");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.ern.Contributor performer = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_performer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 sequence_number = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_sequence_number(&has_bits);
          sequence_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Character::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.Character)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string character_party_reference = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_character_party_reference().data(), static_cast<int>(this->_internal_character_party_reference().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.Character.character_party_reference");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_character_party_reference(), target);
  }

  // optional .ern411.ern.Contributor performer = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::performer(this), target, stream);
  }

  // optional int32 sequence_number = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_sequence_number(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.Character)
  return target;
}

size_t Character::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.Character)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string character_party_reference = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_character_party_reference());
    }

    // optional .ern411.ern.Contributor performer = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *performer_);
    }

    // optional int32 sequence_number = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_sequence_number());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Character::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.Character)
  GOOGLE_DCHECK_NE(&from, this);
  const Character* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Character>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.Character)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.Character)
    MergeFrom(*source);
  }
}

void Character::MergeFrom(const Character& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.Character)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_character_party_reference(from._internal_character_party_reference());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_performer()->::ern411::ern::Contributor::MergeFrom(from._internal_performer());
    }
    if (cached_has_bits & 0x00000004u) {
      sequence_number_ = from.sequence_number_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Character::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.Character)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Character::CopyFrom(const Character& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.Character)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Character::IsInitialized() const {
  return true;
}

void Character::InternalSwap(Character* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  character_party_reference_.Swap(&other->character_party_reference_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Character, sequence_number_)
      + sizeof(Character::sequence_number_)
      - PROTOBUF_FIELD_OFFSET(Character, performer_)>(
          reinterpret_cast<char*>(&performer_),
          reinterpret_cast<char*>(&other->performer_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Character::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CommercialModelType::InitAsDefaultInstance() {
  ::ern411::ern::_CommercialModelType_default_instance_._instance.get_mutable()->ext_value_ = const_cast< ::ern411::avs::CommercialModelType*>(
      ::ern411::avs::CommercialModelType::internal_default_instance());
}
class CommercialModelType::_Internal {
 public:
  using HasBits = decltype(std::declval<CommercialModelType>()._has_bits_);
  static void set_has_namespace_(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_user_defined_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::ern411::avs::CommercialModelType& ext_value(const CommercialModelType* msg);
  static void set_has_ext_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::ern411::avs::CommercialModelType&
CommercialModelType::_Internal::ext_value(const CommercialModelType* msg) {
  return *msg->ext_value_;
}
void CommercialModelType::clear_ext_value() {
  if (ext_value_ != nullptr) ext_value_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
CommercialModelType::CommercialModelType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.CommercialModelType)
}
CommercialModelType::CommercialModelType(const CommercialModelType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_namespace_()) {
    namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_namespace_(),
      GetArena());
  }
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_user_defined_value()) {
    user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_defined_value(),
      GetArena());
  }
  if (from._internal_has_ext_value()) {
    ext_value_ = new ::ern411::avs::CommercialModelType(*from.ext_value_);
  } else {
    ext_value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ern411.ern.CommercialModelType)
}

void CommercialModelType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CommercialModelType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ext_value_ = nullptr;
}

CommercialModelType::~CommercialModelType() {
  // @@protoc_insertion_point(destructor:ern411.ern.CommercialModelType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommercialModelType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  namespace__.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ext_value_;
}

void CommercialModelType::ArenaDtor(void* object) {
  CommercialModelType* _this = reinterpret_cast< CommercialModelType* >(object);
  (void)_this;
}
void CommercialModelType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommercialModelType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CommercialModelType& CommercialModelType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CommercialModelType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void CommercialModelType::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.CommercialModelType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      namespace__.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      user_defined_value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(ext_value_ != nullptr);
      ext_value_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommercialModelType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string namespace = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_namespace_();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.CommercialModelType.namespace");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string user_defined_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_user_defined_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.CommercialModelType.user_defined_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.avs.CommercialModelType ext_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommercialModelType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.CommercialModelType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string namespace = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_namespace_().data(), static_cast<int>(this->_internal_namespace_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.CommercialModelType.namespace");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_namespace_(), target);
  }

  // optional string user_defined_value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_user_defined_value().data(), static_cast<int>(this->_internal_user_defined_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.CommercialModelType.user_defined_value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_defined_value(), target);
  }

  // optional .ern411.avs.CommercialModelType ext_value = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::ext_value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.CommercialModelType)
  return target;
}

size_t CommercialModelType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.CommercialModelType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string namespace = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_namespace_());
    }

    // optional string user_defined_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_defined_value());
    }

    // optional .ern411.avs.CommercialModelType ext_value = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ext_value_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommercialModelType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.CommercialModelType)
  GOOGLE_DCHECK_NE(&from, this);
  const CommercialModelType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommercialModelType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.CommercialModelType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.CommercialModelType)
    MergeFrom(*source);
  }
}

void CommercialModelType::MergeFrom(const CommercialModelType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.CommercialModelType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_namespace_(from._internal_namespace_());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_user_defined_value(from._internal_user_defined_value());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_ext_value()->::ern411::avs::CommercialModelType::MergeFrom(from._internal_ext_value());
    }
  }
}

void CommercialModelType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.CommercialModelType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommercialModelType::CopyFrom(const CommercialModelType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.CommercialModelType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommercialModelType::IsInitialized() const {
  return true;
}

void CommercialModelType::InternalSwap(CommercialModelType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  namespace__.Swap(&other->namespace__, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_defined_value_.Swap(&other->user_defined_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(ext_value_, other->ext_value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommercialModelType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConditionForRightsClaimPolicy::InitAsDefaultInstance() {
  ::ern411::ern::_ConditionForRightsClaimPolicy_default_instance_._instance.get_mutable()->reference_creation_ = const_cast< ::ern411::avs::ReferenceCreation*>(
      ::ern411::avs::ReferenceCreation::internal_default_instance());
  ::ern411::ern::_ConditionForRightsClaimPolicy_default_instance_._instance.get_mutable()->relational_relator_ = const_cast< ::ern411::avs::RelationalRelator*>(
      ::ern411::avs::RelationalRelator::internal_default_instance());
  ::ern411::ern::_ConditionForRightsClaimPolicy_default_instance_._instance.get_mutable()->unit_ = const_cast< ::ern411::avs::UnitOfConditionValue*>(
      ::ern411::avs::UnitOfConditionValue::internal_default_instance());
}
class ConditionForRightsClaimPolicy::_Internal {
 public:
  using HasBits = decltype(std::declval<ConditionForRightsClaimPolicy>()._has_bits_);
  static const ::ern411::avs::ReferenceCreation& reference_creation(const ConditionForRightsClaimPolicy* msg);
  static void set_has_reference_creation(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ern411::avs::RelationalRelator& relational_relator(const ConditionForRightsClaimPolicy* msg);
  static void set_has_relational_relator(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::ern411::avs::UnitOfConditionValue& unit(const ConditionForRightsClaimPolicy* msg);
  static void set_has_unit(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::ern411::avs::ReferenceCreation&
ConditionForRightsClaimPolicy::_Internal::reference_creation(const ConditionForRightsClaimPolicy* msg) {
  return *msg->reference_creation_;
}
const ::ern411::avs::RelationalRelator&
ConditionForRightsClaimPolicy::_Internal::relational_relator(const ConditionForRightsClaimPolicy* msg) {
  return *msg->relational_relator_;
}
const ::ern411::avs::UnitOfConditionValue&
ConditionForRightsClaimPolicy::_Internal::unit(const ConditionForRightsClaimPolicy* msg) {
  return *msg->unit_;
}
void ConditionForRightsClaimPolicy::clear_reference_creation() {
  if (reference_creation_ != nullptr) reference_creation_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void ConditionForRightsClaimPolicy::clear_relational_relator() {
  if (relational_relator_ != nullptr) relational_relator_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void ConditionForRightsClaimPolicy::clear_unit() {
  if (unit_ != nullptr) unit_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
ConditionForRightsClaimPolicy::ConditionForRightsClaimPolicy(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.ConditionForRightsClaimPolicy)
}
ConditionForRightsClaimPolicy::ConditionForRightsClaimPolicy(const ConditionForRightsClaimPolicy& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_reference_creation()) {
    reference_creation_ = new ::ern411::avs::ReferenceCreation(*from.reference_creation_);
  } else {
    reference_creation_ = nullptr;
  }
  if (from._internal_has_relational_relator()) {
    relational_relator_ = new ::ern411::avs::RelationalRelator(*from.relational_relator_);
  } else {
    relational_relator_ = nullptr;
  }
  if (from._internal_has_unit()) {
    unit_ = new ::ern411::avs::UnitOfConditionValue(*from.unit_);
  } else {
    unit_ = nullptr;
  }
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:ern411.ern.ConditionForRightsClaimPolicy)
}

void ConditionForRightsClaimPolicy::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConditionForRightsClaimPolicy_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  ::memset(&reference_creation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&reference_creation_)) + sizeof(value_));
}

ConditionForRightsClaimPolicy::~ConditionForRightsClaimPolicy() {
  // @@protoc_insertion_point(destructor:ern411.ern.ConditionForRightsClaimPolicy)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ConditionForRightsClaimPolicy::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete reference_creation_;
  if (this != internal_default_instance()) delete relational_relator_;
  if (this != internal_default_instance()) delete unit_;
}

void ConditionForRightsClaimPolicy::ArenaDtor(void* object) {
  ConditionForRightsClaimPolicy* _this = reinterpret_cast< ConditionForRightsClaimPolicy* >(object);
  (void)_this;
}
void ConditionForRightsClaimPolicy::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConditionForRightsClaimPolicy::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConditionForRightsClaimPolicy& ConditionForRightsClaimPolicy::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConditionForRightsClaimPolicy_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void ConditionForRightsClaimPolicy::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.ConditionForRightsClaimPolicy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(reference_creation_ != nullptr);
      reference_creation_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(relational_relator_ != nullptr);
      relational_relator_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(unit_ != nullptr);
      unit_->Clear();
    }
  }
  value_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConditionForRightsClaimPolicy::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ern411.avs.ReferenceCreation reference_creation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_reference_creation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.avs.RelationalRelator relational_relator = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_relational_relator(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.avs.UnitOfConditionValue unit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_unit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_value(&has_bits);
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConditionForRightsClaimPolicy::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.ConditionForRightsClaimPolicy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ern411.avs.ReferenceCreation reference_creation = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::reference_creation(this), target, stream);
  }

  // optional .ern411.avs.RelationalRelator relational_relator = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::relational_relator(this), target, stream);
  }

  // optional .ern411.avs.UnitOfConditionValue unit = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::unit(this), target, stream);
  }

  // optional double value = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.ConditionForRightsClaimPolicy)
  return target;
}

size_t ConditionForRightsClaimPolicy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.ConditionForRightsClaimPolicy)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .ern411.avs.ReferenceCreation reference_creation = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *reference_creation_);
    }

    // optional .ern411.avs.RelationalRelator relational_relator = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *relational_relator_);
    }

    // optional .ern411.avs.UnitOfConditionValue unit = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *unit_);
    }

    // optional double value = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConditionForRightsClaimPolicy::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.ConditionForRightsClaimPolicy)
  GOOGLE_DCHECK_NE(&from, this);
  const ConditionForRightsClaimPolicy* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConditionForRightsClaimPolicy>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.ConditionForRightsClaimPolicy)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.ConditionForRightsClaimPolicy)
    MergeFrom(*source);
  }
}

void ConditionForRightsClaimPolicy::MergeFrom(const ConditionForRightsClaimPolicy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.ConditionForRightsClaimPolicy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_reference_creation()->::ern411::avs::ReferenceCreation::MergeFrom(from._internal_reference_creation());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_relational_relator()->::ern411::avs::RelationalRelator::MergeFrom(from._internal_relational_relator());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_unit()->::ern411::avs::UnitOfConditionValue::MergeFrom(from._internal_unit());
    }
    if (cached_has_bits & 0x00000008u) {
      value_ = from.value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ConditionForRightsClaimPolicy::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.ConditionForRightsClaimPolicy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConditionForRightsClaimPolicy::CopyFrom(const ConditionForRightsClaimPolicy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.ConditionForRightsClaimPolicy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConditionForRightsClaimPolicy::IsInitialized() const {
  return true;
}

void ConditionForRightsClaimPolicy::InternalSwap(ConditionForRightsClaimPolicy* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConditionForRightsClaimPolicy, value_)
      + sizeof(ConditionForRightsClaimPolicy::value_)
      - PROTOBUF_FIELD_OFFSET(ConditionForRightsClaimPolicy, reference_creation_)>(
          reinterpret_cast<char*>(&reference_creation_),
          reinterpret_cast<char*>(&other->reference_creation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ConditionForRightsClaimPolicy::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ContainerFormat::InitAsDefaultInstance() {
  ::ern411::ern::_ContainerFormat_default_instance_._instance.get_mutable()->ext_value_ = const_cast< ::ern411::avs::ContainerFormat*>(
      ::ern411::avs::ContainerFormat::internal_default_instance());
}
class ContainerFormat::_Internal {
 public:
  using HasBits = decltype(std::declval<ContainerFormat>()._has_bits_);
  static void set_has_namespace_(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_user_defined_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::ern411::avs::ContainerFormat& ext_value(const ContainerFormat* msg);
  static void set_has_ext_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::ern411::avs::ContainerFormat&
ContainerFormat::_Internal::ext_value(const ContainerFormat* msg) {
  return *msg->ext_value_;
}
void ContainerFormat::clear_ext_value() {
  if (ext_value_ != nullptr) ext_value_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
ContainerFormat::ContainerFormat(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.ContainerFormat)
}
ContainerFormat::ContainerFormat(const ContainerFormat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_namespace_()) {
    namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_namespace_(),
      GetArena());
  }
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_user_defined_value()) {
    user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_defined_value(),
      GetArena());
  }
  if (from._internal_has_ext_value()) {
    ext_value_ = new ::ern411::avs::ContainerFormat(*from.ext_value_);
  } else {
    ext_value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ern411.ern.ContainerFormat)
}

void ContainerFormat::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ContainerFormat_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ext_value_ = nullptr;
}

ContainerFormat::~ContainerFormat() {
  // @@protoc_insertion_point(destructor:ern411.ern.ContainerFormat)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ContainerFormat::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  namespace__.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ext_value_;
}

void ContainerFormat::ArenaDtor(void* object) {
  ContainerFormat* _this = reinterpret_cast< ContainerFormat* >(object);
  (void)_this;
}
void ContainerFormat::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ContainerFormat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ContainerFormat& ContainerFormat::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ContainerFormat_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void ContainerFormat::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.ContainerFormat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      namespace__.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      user_defined_value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(ext_value_ != nullptr);
      ext_value_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContainerFormat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string namespace = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_namespace_();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.ContainerFormat.namespace");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string user_defined_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_user_defined_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.ContainerFormat.user_defined_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.avs.ContainerFormat ext_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ContainerFormat::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.ContainerFormat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string namespace = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_namespace_().data(), static_cast<int>(this->_internal_namespace_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.ContainerFormat.namespace");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_namespace_(), target);
  }

  // optional string user_defined_value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_user_defined_value().data(), static_cast<int>(this->_internal_user_defined_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.ContainerFormat.user_defined_value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_defined_value(), target);
  }

  // optional .ern411.avs.ContainerFormat ext_value = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::ext_value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.ContainerFormat)
  return target;
}

size_t ContainerFormat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.ContainerFormat)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string namespace = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_namespace_());
    }

    // optional string user_defined_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_defined_value());
    }

    // optional .ern411.avs.ContainerFormat ext_value = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ext_value_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContainerFormat::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.ContainerFormat)
  GOOGLE_DCHECK_NE(&from, this);
  const ContainerFormat* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ContainerFormat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.ContainerFormat)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.ContainerFormat)
    MergeFrom(*source);
  }
}

void ContainerFormat::MergeFrom(const ContainerFormat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.ContainerFormat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_namespace_(from._internal_namespace_());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_user_defined_value(from._internal_user_defined_value());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_ext_value()->::ern411::avs::ContainerFormat::MergeFrom(from._internal_ext_value());
    }
  }
}

void ContainerFormat::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.ContainerFormat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContainerFormat::CopyFrom(const ContainerFormat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.ContainerFormat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContainerFormat::IsInitialized() const {
  return true;
}

void ContainerFormat::InternalSwap(ContainerFormat* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  namespace__.Swap(&other->namespace__, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_defined_value_.Swap(&other->user_defined_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(ext_value_, other->ext_value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ContainerFormat::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Contributor::InitAsDefaultInstance() {
  ::ern411::ern::_Contributor_default_instance_._instance.get_mutable()->is_credited_ = const_cast< ::ern411::ern::IsCredited*>(
      ::ern411::ern::IsCredited::internal_default_instance());
}
class Contributor::_Internal {
 public:
  using HasBits = decltype(std::declval<Contributor>()._has_bits_);
  static void set_has_contributor_party_reference(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_has_made_contracted_contribution(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_has_made_featured_contribution(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::ern411::ern::IsCredited& is_credited(const Contributor* msg);
  static void set_has_is_credited(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_sequence_number(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::ern411::ern::IsCredited&
Contributor::_Internal::is_credited(const Contributor* msg) {
  return *msg->is_credited_;
}
Contributor::Contributor(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  display_credits_(arena),
  instrument_type_(arena),
  role_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.Contributor)
}
Contributor::Contributor(const Contributor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      display_credits_(from.display_credits_),
      instrument_type_(from.instrument_type_),
      role_(from.role_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  contributor_party_reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_contributor_party_reference()) {
    contributor_party_reference_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_contributor_party_reference(),
      GetArena());
  }
  if (from._internal_has_is_credited()) {
    is_credited_ = new ::ern411::ern::IsCredited(*from.is_credited_);
  } else {
    is_credited_ = nullptr;
  }
  ::memcpy(&has_made_contracted_contribution_, &from.has_made_contracted_contribution_,
    static_cast<size_t>(reinterpret_cast<char*>(&sequence_number_) -
    reinterpret_cast<char*>(&has_made_contracted_contribution_)) + sizeof(sequence_number_));
  // @@protoc_insertion_point(copy_constructor:ern411.ern.Contributor)
}

void Contributor::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Contributor_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  contributor_party_reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&is_credited_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sequence_number_) -
      reinterpret_cast<char*>(&is_credited_)) + sizeof(sequence_number_));
}

Contributor::~Contributor() {
  // @@protoc_insertion_point(destructor:ern411.ern.Contributor)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Contributor::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  contributor_party_reference_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete is_credited_;
}

void Contributor::ArenaDtor(void* object) {
  Contributor* _this = reinterpret_cast< Contributor* >(object);
  (void)_this;
}
void Contributor::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Contributor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Contributor& Contributor::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Contributor_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void Contributor::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.Contributor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  display_credits_.Clear();
  instrument_type_.Clear();
  role_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      contributor_party_reference_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(is_credited_ != nullptr);
      is_credited_->Clear();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&has_made_contracted_contribution_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sequence_number_) -
        reinterpret_cast<char*>(&has_made_contracted_contribution_)) + sizeof(sequence_number_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Contributor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string contributor_party_reference = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_contributor_party_reference();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.Contributor.contributor_party_reference");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.DisplayCredits display_credits = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_display_credits(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool has_made_contracted_contribution = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_has_made_contracted_contribution(&has_bits);
          has_made_contracted_contribution_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool has_made_featured_contribution = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_has_made_featured_contribution(&has_bits);
          has_made_featured_contribution_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.InstrumentType instrument_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_instrument_type(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .ern411.ern.IsCredited is_credited = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_is_credited(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.ContributorRole role = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_role(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // optional int32 sequence_number = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_sequence_number(&has_bits);
          sequence_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Contributor::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.Contributor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string contributor_party_reference = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_contributor_party_reference().data(), static_cast<int>(this->_internal_contributor_party_reference().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.Contributor.contributor_party_reference");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_contributor_party_reference(), target);
  }

  // repeated .ern411.ern.DisplayCredits display_credits = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_display_credits_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_display_credits(i), target, stream);
  }

  // optional bool has_made_contracted_contribution = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_has_made_contracted_contribution(), target);
  }

  // optional bool has_made_featured_contribution = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_has_made_featured_contribution(), target);
  }

  // repeated .ern411.ern.InstrumentType instrument_type = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_instrument_type_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_instrument_type(i), target, stream);
  }

  // optional .ern411.ern.IsCredited is_credited = 6;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::is_credited(this), target, stream);
  }

  // repeated .ern411.ern.ContributorRole role = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_role_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_role(i), target, stream);
  }

  // optional int32 sequence_number = 8;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_sequence_number(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.Contributor)
  return target;
}

size_t Contributor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.Contributor)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ern411.ern.DisplayCredits display_credits = 2;
  total_size += 1UL * this->_internal_display_credits_size();
  for (const auto& msg : this->display_credits_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.InstrumentType instrument_type = 5;
  total_size += 1UL * this->_internal_instrument_type_size();
  for (const auto& msg : this->instrument_type_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.ContributorRole role = 7;
  total_size += 1UL * this->_internal_role_size();
  for (const auto& msg : this->role_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string contributor_party_reference = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_contributor_party_reference());
    }

    // optional .ern411.ern.IsCredited is_credited = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *is_credited_);
    }

    // optional bool has_made_contracted_contribution = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool has_made_featured_contribution = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional int32 sequence_number = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_sequence_number());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Contributor::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.Contributor)
  GOOGLE_DCHECK_NE(&from, this);
  const Contributor* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Contributor>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.Contributor)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.Contributor)
    MergeFrom(*source);
  }
}

void Contributor::MergeFrom(const Contributor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.Contributor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  display_credits_.MergeFrom(from.display_credits_);
  instrument_type_.MergeFrom(from.instrument_type_);
  role_.MergeFrom(from.role_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_contributor_party_reference(from._internal_contributor_party_reference());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_is_credited()->::ern411::ern::IsCredited::MergeFrom(from._internal_is_credited());
    }
    if (cached_has_bits & 0x00000004u) {
      has_made_contracted_contribution_ = from.has_made_contracted_contribution_;
    }
    if (cached_has_bits & 0x00000008u) {
      has_made_featured_contribution_ = from.has_made_featured_contribution_;
    }
    if (cached_has_bits & 0x00000010u) {
      sequence_number_ = from.sequence_number_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Contributor::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.Contributor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Contributor::CopyFrom(const Contributor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.Contributor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Contributor::IsInitialized() const {
  return true;
}

void Contributor::InternalSwap(Contributor* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  display_credits_.InternalSwap(&other->display_credits_);
  instrument_type_.InternalSwap(&other->instrument_type_);
  role_.InternalSwap(&other->role_);
  contributor_party_reference_.Swap(&other->contributor_party_reference_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Contributor, sequence_number_)
      + sizeof(Contributor::sequence_number_)
      - PROTOBUF_FIELD_OFFSET(Contributor, is_credited_)>(
          reinterpret_cast<char*>(&is_credited_),
          reinterpret_cast<char*>(&other->is_credited_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Contributor::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ContributorRole::InitAsDefaultInstance() {
  ::ern411::ern::_ContributorRole_default_instance_._instance.get_mutable()->ext_value_ = const_cast< ::ern411::avs::ContributorRole*>(
      ::ern411::avs::ContributorRole::internal_default_instance());
}
class ContributorRole::_Internal {
 public:
  using HasBits = decltype(std::declval<ContributorRole>()._has_bits_);
  static void set_has_namespace_(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_user_defined_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::ern411::avs::ContributorRole& ext_value(const ContributorRole* msg);
  static void set_has_ext_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::ern411::avs::ContributorRole&
ContributorRole::_Internal::ext_value(const ContributorRole* msg) {
  return *msg->ext_value_;
}
void ContributorRole::clear_ext_value() {
  if (ext_value_ != nullptr) ext_value_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
ContributorRole::ContributorRole(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.ContributorRole)
}
ContributorRole::ContributorRole(const ContributorRole& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_namespace_()) {
    namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_namespace_(),
      GetArena());
  }
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_user_defined_value()) {
    user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_defined_value(),
      GetArena());
  }
  if (from._internal_has_ext_value()) {
    ext_value_ = new ::ern411::avs::ContributorRole(*from.ext_value_);
  } else {
    ext_value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ern411.ern.ContributorRole)
}

void ContributorRole::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ContributorRole_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ext_value_ = nullptr;
}

ContributorRole::~ContributorRole() {
  // @@protoc_insertion_point(destructor:ern411.ern.ContributorRole)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ContributorRole::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  namespace__.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ext_value_;
}

void ContributorRole::ArenaDtor(void* object) {
  ContributorRole* _this = reinterpret_cast< ContributorRole* >(object);
  (void)_this;
}
void ContributorRole::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ContributorRole::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ContributorRole& ContributorRole::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ContributorRole_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void ContributorRole::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.ContributorRole)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      namespace__.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      user_defined_value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(ext_value_ != nullptr);
      ext_value_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContributorRole::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string namespace = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_namespace_();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.ContributorRole.namespace");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string user_defined_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_user_defined_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.ContributorRole.user_defined_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.avs.ContributorRole ext_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ContributorRole::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.ContributorRole)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string namespace = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_namespace_().data(), static_cast<int>(this->_internal_namespace_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.ContributorRole.namespace");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_namespace_(), target);
  }

  // optional string user_defined_value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_user_defined_value().data(), static_cast<int>(this->_internal_user_defined_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.ContributorRole.user_defined_value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_defined_value(), target);
  }

  // optional .ern411.avs.ContributorRole ext_value = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::ext_value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.ContributorRole)
  return target;
}

size_t ContributorRole::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.ContributorRole)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string namespace = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_namespace_());
    }

    // optional string user_defined_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_defined_value());
    }

    // optional .ern411.avs.ContributorRole ext_value = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ext_value_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContributorRole::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.ContributorRole)
  GOOGLE_DCHECK_NE(&from, this);
  const ContributorRole* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ContributorRole>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.ContributorRole)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.ContributorRole)
    MergeFrom(*source);
  }
}

void ContributorRole::MergeFrom(const ContributorRole& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.ContributorRole)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_namespace_(from._internal_namespace_());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_user_defined_value(from._internal_user_defined_value());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_ext_value()->::ern411::avs::ContributorRole::MergeFrom(from._internal_ext_value());
    }
  }
}

void ContributorRole::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.ContributorRole)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContributorRole::CopyFrom(const ContributorRole& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.ContributorRole)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContributorRole::IsInitialized() const {
  return true;
}

void ContributorRole::InternalSwap(ContributorRole* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  namespace__.Swap(&other->namespace__, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_defined_value_.Swap(&other->user_defined_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(ext_value_, other->ext_value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ContributorRole::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CoreArea::InitAsDefaultInstance() {
}
class CoreArea::_Internal {
 public:
  using HasBits = decltype(std::declval<CoreArea>()._has_bits_);
  static void set_has_bottom_right_corner(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_top_left_corner(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CoreArea::CoreArea(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.CoreArea)
}
CoreArea::CoreArea(const CoreArea& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  bottom_right_corner_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_bottom_right_corner()) {
    bottom_right_corner_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_bottom_right_corner(),
      GetArena());
  }
  top_left_corner_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_top_left_corner()) {
    top_left_corner_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_top_left_corner(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:ern411.ern.CoreArea)
}

void CoreArea::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CoreArea_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  bottom_right_corner_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  top_left_corner_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CoreArea::~CoreArea() {
  // @@protoc_insertion_point(destructor:ern411.ern.CoreArea)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CoreArea::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  bottom_right_corner_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  top_left_corner_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CoreArea::ArenaDtor(void* object) {
  CoreArea* _this = reinterpret_cast< CoreArea* >(object);
  (void)_this;
}
void CoreArea::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CoreArea::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CoreArea& CoreArea::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CoreArea_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void CoreArea::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.CoreArea)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      bottom_right_corner_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      top_left_corner_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CoreArea::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string bottom_right_corner = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_bottom_right_corner();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.CoreArea.bottom_right_corner");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string top_left_corner = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_top_left_corner();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.CoreArea.top_left_corner");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CoreArea::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.CoreArea)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string bottom_right_corner = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_bottom_right_corner().data(), static_cast<int>(this->_internal_bottom_right_corner().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.CoreArea.bottom_right_corner");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_bottom_right_corner(), target);
  }

  // optional string top_left_corner = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_top_left_corner().data(), static_cast<int>(this->_internal_top_left_corner().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.CoreArea.top_left_corner");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_top_left_corner(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.CoreArea)
  return target;
}

size_t CoreArea::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.CoreArea)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string bottom_right_corner = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_bottom_right_corner());
    }

    // optional string top_left_corner = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_top_left_corner());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CoreArea::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.CoreArea)
  GOOGLE_DCHECK_NE(&from, this);
  const CoreArea* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CoreArea>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.CoreArea)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.CoreArea)
    MergeFrom(*source);
  }
}

void CoreArea::MergeFrom(const CoreArea& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.CoreArea)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_bottom_right_corner(from._internal_bottom_right_corner());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_top_left_corner(from._internal_top_left_corner());
    }
  }
}

void CoreArea::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.CoreArea)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CoreArea::CopyFrom(const CoreArea& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.CoreArea)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CoreArea::IsInitialized() const {
  return true;
}

void CoreArea::InternalSwap(CoreArea* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  bottom_right_corner_.Swap(&other->bottom_right_corner_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  top_left_corner_.Swap(&other->top_left_corner_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CoreArea::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CourtesyLineWithDefault::InitAsDefaultInstance() {
  ::ern411::ern::_CourtesyLineWithDefault_default_instance_._instance.get_mutable()->applicable_territory_code_ = const_cast< ::ern411::avs::CurrentTerritoryCode*>(
      ::ern411::avs::CurrentTerritoryCode::internal_default_instance());
}
class CourtesyLineWithDefault::_Internal {
 public:
  using HasBits = decltype(std::declval<CourtesyLineWithDefault>()._has_bits_);
  static const ::ern411::avs::CurrentTerritoryCode& applicable_territory_code(const CourtesyLineWithDefault* msg);
  static void set_has_applicable_territory_code(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_default(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_language_and_script_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ext_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::ern411::avs::CurrentTerritoryCode&
CourtesyLineWithDefault::_Internal::applicable_territory_code(const CourtesyLineWithDefault* msg) {
  return *msg->applicable_territory_code_;
}
void CourtesyLineWithDefault::clear_applicable_territory_code() {
  if (applicable_territory_code_ != nullptr) applicable_territory_code_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
CourtesyLineWithDefault::CourtesyLineWithDefault(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.CourtesyLineWithDefault)
}
CourtesyLineWithDefault::CourtesyLineWithDefault(const CourtesyLineWithDefault& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  language_and_script_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_language_and_script_code()) {
    language_and_script_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_language_and_script_code(),
      GetArena());
  }
  ext_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ext_value()) {
    ext_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ext_value(),
      GetArena());
  }
  if (from._internal_has_applicable_territory_code()) {
    applicable_territory_code_ = new ::ern411::avs::CurrentTerritoryCode(*from.applicable_territory_code_);
  } else {
    applicable_territory_code_ = nullptr;
  }
  is_default_ = from.is_default_;
  // @@protoc_insertion_point(copy_constructor:ern411.ern.CourtesyLineWithDefault)
}

void CourtesyLineWithDefault::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CourtesyLineWithDefault_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  language_and_script_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ext_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&applicable_territory_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_default_) -
      reinterpret_cast<char*>(&applicable_territory_code_)) + sizeof(is_default_));
}

CourtesyLineWithDefault::~CourtesyLineWithDefault() {
  // @@protoc_insertion_point(destructor:ern411.ern.CourtesyLineWithDefault)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CourtesyLineWithDefault::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  language_and_script_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ext_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete applicable_territory_code_;
}

void CourtesyLineWithDefault::ArenaDtor(void* object) {
  CourtesyLineWithDefault* _this = reinterpret_cast< CourtesyLineWithDefault* >(object);
  (void)_this;
}
void CourtesyLineWithDefault::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CourtesyLineWithDefault::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CourtesyLineWithDefault& CourtesyLineWithDefault::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CourtesyLineWithDefault_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void CourtesyLineWithDefault::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.CourtesyLineWithDefault)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      language_and_script_code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      ext_value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(applicable_territory_code_ != nullptr);
      applicable_territory_code_->Clear();
    }
  }
  is_default_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CourtesyLineWithDefault::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ern411.avs.CurrentTerritoryCode applicable_territory_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_applicable_territory_code(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_default = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_is_default(&has_bits);
          is_default_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string language_and_script_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_language_and_script_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.CourtesyLineWithDefault.language_and_script_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string ext_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_ext_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.CourtesyLineWithDefault.ext_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CourtesyLineWithDefault::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.CourtesyLineWithDefault)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ern411.avs.CurrentTerritoryCode applicable_territory_code = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::applicable_territory_code(this), target, stream);
  }

  // optional bool is_default = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_default(), target);
  }

  // optional string language_and_script_code = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_language_and_script_code().data(), static_cast<int>(this->_internal_language_and_script_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.CourtesyLineWithDefault.language_and_script_code");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_language_and_script_code(), target);
  }

  // optional string ext_value = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ext_value().data(), static_cast<int>(this->_internal_ext_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.CourtesyLineWithDefault.ext_value");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_ext_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.CourtesyLineWithDefault)
  return target;
}

size_t CourtesyLineWithDefault::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.CourtesyLineWithDefault)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string language_and_script_code = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_language_and_script_code());
    }

    // optional string ext_value = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ext_value());
    }

    // optional .ern411.avs.CurrentTerritoryCode applicable_territory_code = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *applicable_territory_code_);
    }

    // optional bool is_default = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CourtesyLineWithDefault::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.CourtesyLineWithDefault)
  GOOGLE_DCHECK_NE(&from, this);
  const CourtesyLineWithDefault* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CourtesyLineWithDefault>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.CourtesyLineWithDefault)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.CourtesyLineWithDefault)
    MergeFrom(*source);
  }
}

void CourtesyLineWithDefault::MergeFrom(const CourtesyLineWithDefault& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.CourtesyLineWithDefault)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_language_and_script_code(from._internal_language_and_script_code());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_ext_value(from._internal_ext_value());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_applicable_territory_code()->::ern411::avs::CurrentTerritoryCode::MergeFrom(from._internal_applicable_territory_code());
    }
    if (cached_has_bits & 0x00000008u) {
      is_default_ = from.is_default_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CourtesyLineWithDefault::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.CourtesyLineWithDefault)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CourtesyLineWithDefault::CopyFrom(const CourtesyLineWithDefault& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.CourtesyLineWithDefault)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CourtesyLineWithDefault::IsInitialized() const {
  return true;
}

void CourtesyLineWithDefault::InternalSwap(CourtesyLineWithDefault* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  language_and_script_code_.Swap(&other->language_and_script_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ext_value_.Swap(&other->ext_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CourtesyLineWithDefault, is_default_)
      + sizeof(CourtesyLineWithDefault::is_default_)
      - PROTOBUF_FIELD_OFFSET(CourtesyLineWithDefault, applicable_territory_code_)>(
          reinterpret_cast<char*>(&applicable_territory_code_),
          reinterpret_cast<char*>(&other->applicable_territory_code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CourtesyLineWithDefault::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CueOrigin::InitAsDefaultInstance() {
  ::ern411::ern::_CueOrigin_default_instance_._instance.get_mutable()->ext_value_ = const_cast< ::ern411::avs::CueOrigin*>(
      ::ern411::avs::CueOrigin::internal_default_instance());
}
class CueOrigin::_Internal {
 public:
  using HasBits = decltype(std::declval<CueOrigin>()._has_bits_);
  static void set_has_namespace_(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_user_defined_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::ern411::avs::CueOrigin& ext_value(const CueOrigin* msg);
  static void set_has_ext_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::ern411::avs::CueOrigin&
CueOrigin::_Internal::ext_value(const CueOrigin* msg) {
  return *msg->ext_value_;
}
void CueOrigin::clear_ext_value() {
  if (ext_value_ != nullptr) ext_value_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
CueOrigin::CueOrigin(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.CueOrigin)
}
CueOrigin::CueOrigin(const CueOrigin& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_namespace_()) {
    namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_namespace_(),
      GetArena());
  }
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_user_defined_value()) {
    user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_defined_value(),
      GetArena());
  }
  if (from._internal_has_ext_value()) {
    ext_value_ = new ::ern411::avs::CueOrigin(*from.ext_value_);
  } else {
    ext_value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ern411.ern.CueOrigin)
}

void CueOrigin::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CueOrigin_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ext_value_ = nullptr;
}

CueOrigin::~CueOrigin() {
  // @@protoc_insertion_point(destructor:ern411.ern.CueOrigin)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CueOrigin::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  namespace__.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ext_value_;
}

void CueOrigin::ArenaDtor(void* object) {
  CueOrigin* _this = reinterpret_cast< CueOrigin* >(object);
  (void)_this;
}
void CueOrigin::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CueOrigin::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CueOrigin& CueOrigin::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CueOrigin_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void CueOrigin::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.CueOrigin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      namespace__.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      user_defined_value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(ext_value_ != nullptr);
      ext_value_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CueOrigin::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string namespace = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_namespace_();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.CueOrigin.namespace");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string user_defined_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_user_defined_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.CueOrigin.user_defined_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.avs.CueOrigin ext_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CueOrigin::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.CueOrigin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string namespace = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_namespace_().data(), static_cast<int>(this->_internal_namespace_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.CueOrigin.namespace");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_namespace_(), target);
  }

  // optional string user_defined_value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_user_defined_value().data(), static_cast<int>(this->_internal_user_defined_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.CueOrigin.user_defined_value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_defined_value(), target);
  }

  // optional .ern411.avs.CueOrigin ext_value = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::ext_value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.CueOrigin)
  return target;
}

size_t CueOrigin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.CueOrigin)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string namespace = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_namespace_());
    }

    // optional string user_defined_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_defined_value());
    }

    // optional .ern411.avs.CueOrigin ext_value = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ext_value_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CueOrigin::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.CueOrigin)
  GOOGLE_DCHECK_NE(&from, this);
  const CueOrigin* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CueOrigin>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.CueOrigin)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.CueOrigin)
    MergeFrom(*source);
  }
}

void CueOrigin::MergeFrom(const CueOrigin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.CueOrigin)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_namespace_(from._internal_namespace_());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_user_defined_value(from._internal_user_defined_value());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_ext_value()->::ern411::avs::CueOrigin::MergeFrom(from._internal_ext_value());
    }
  }
}

void CueOrigin::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.CueOrigin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CueOrigin::CopyFrom(const CueOrigin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.CueOrigin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CueOrigin::IsInitialized() const {
  return true;
}

void CueOrigin::InternalSwap(CueOrigin* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  namespace__.Swap(&other->namespace__, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_defined_value_.Swap(&other->user_defined_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(ext_value_, other->ext_value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CueOrigin::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CueSheetType::InitAsDefaultInstance() {
  ::ern411::ern::_CueSheetType_default_instance_._instance.get_mutable()->ext_value_ = const_cast< ::ern411::avs::CueSheetType*>(
      ::ern411::avs::CueSheetType::internal_default_instance());
}
class CueSheetType::_Internal {
 public:
  using HasBits = decltype(std::declval<CueSheetType>()._has_bits_);
  static void set_has_namespace_(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_user_defined_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::ern411::avs::CueSheetType& ext_value(const CueSheetType* msg);
  static void set_has_ext_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::ern411::avs::CueSheetType&
CueSheetType::_Internal::ext_value(const CueSheetType* msg) {
  return *msg->ext_value_;
}
void CueSheetType::clear_ext_value() {
  if (ext_value_ != nullptr) ext_value_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
CueSheetType::CueSheetType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.CueSheetType)
}
CueSheetType::CueSheetType(const CueSheetType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_namespace_()) {
    namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_namespace_(),
      GetArena());
  }
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_user_defined_value()) {
    user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_defined_value(),
      GetArena());
  }
  if (from._internal_has_ext_value()) {
    ext_value_ = new ::ern411::avs::CueSheetType(*from.ext_value_);
  } else {
    ext_value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ern411.ern.CueSheetType)
}

void CueSheetType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CueSheetType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ext_value_ = nullptr;
}

CueSheetType::~CueSheetType() {
  // @@protoc_insertion_point(destructor:ern411.ern.CueSheetType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CueSheetType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  namespace__.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ext_value_;
}

void CueSheetType::ArenaDtor(void* object) {
  CueSheetType* _this = reinterpret_cast< CueSheetType* >(object);
  (void)_this;
}
void CueSheetType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CueSheetType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CueSheetType& CueSheetType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CueSheetType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void CueSheetType::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.CueSheetType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      namespace__.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      user_defined_value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(ext_value_ != nullptr);
      ext_value_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CueSheetType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string namespace = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_namespace_();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.CueSheetType.namespace");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string user_defined_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_user_defined_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.CueSheetType.user_defined_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.avs.CueSheetType ext_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CueSheetType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.CueSheetType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string namespace = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_namespace_().data(), static_cast<int>(this->_internal_namespace_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.CueSheetType.namespace");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_namespace_(), target);
  }

  // optional string user_defined_value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_user_defined_value().data(), static_cast<int>(this->_internal_user_defined_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.CueSheetType.user_defined_value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_defined_value(), target);
  }

  // optional .ern411.avs.CueSheetType ext_value = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::ext_value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.CueSheetType)
  return target;
}

size_t CueSheetType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.CueSheetType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string namespace = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_namespace_());
    }

    // optional string user_defined_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_defined_value());
    }

    // optional .ern411.avs.CueSheetType ext_value = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ext_value_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CueSheetType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.CueSheetType)
  GOOGLE_DCHECK_NE(&from, this);
  const CueSheetType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CueSheetType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.CueSheetType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.CueSheetType)
    MergeFrom(*source);
  }
}

void CueSheetType::MergeFrom(const CueSheetType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.CueSheetType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_namespace_(from._internal_namespace_());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_user_defined_value(from._internal_user_defined_value());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_ext_value()->::ern411::avs::CueSheetType::MergeFrom(from._internal_ext_value());
    }
  }
}

void CueSheetType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.CueSheetType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CueSheetType::CopyFrom(const CueSheetType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.CueSheetType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CueSheetType::IsInitialized() const {
  return true;
}

void CueSheetType::InternalSwap(CueSheetType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  namespace__.Swap(&other->namespace__, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_defined_value_.Swap(&other->user_defined_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(ext_value_, other->ext_value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CueSheetType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CueThemeType::InitAsDefaultInstance() {
  ::ern411::ern::_CueThemeType_default_instance_._instance.get_mutable()->ext_value_ = const_cast< ::ern411::avs::ThemeType*>(
      ::ern411::avs::ThemeType::internal_default_instance());
}
class CueThemeType::_Internal {
 public:
  using HasBits = decltype(std::declval<CueThemeType>()._has_bits_);
  static void set_has_namespace_(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_user_defined_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::ern411::avs::ThemeType& ext_value(const CueThemeType* msg);
  static void set_has_ext_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::ern411::avs::ThemeType&
CueThemeType::_Internal::ext_value(const CueThemeType* msg) {
  return *msg->ext_value_;
}
void CueThemeType::clear_ext_value() {
  if (ext_value_ != nullptr) ext_value_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
CueThemeType::CueThemeType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.CueThemeType)
}
CueThemeType::CueThemeType(const CueThemeType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_namespace_()) {
    namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_namespace_(),
      GetArena());
  }
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_user_defined_value()) {
    user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_defined_value(),
      GetArena());
  }
  if (from._internal_has_ext_value()) {
    ext_value_ = new ::ern411::avs::ThemeType(*from.ext_value_);
  } else {
    ext_value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ern411.ern.CueThemeType)
}

void CueThemeType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CueThemeType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ext_value_ = nullptr;
}

CueThemeType::~CueThemeType() {
  // @@protoc_insertion_point(destructor:ern411.ern.CueThemeType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CueThemeType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  namespace__.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ext_value_;
}

void CueThemeType::ArenaDtor(void* object) {
  CueThemeType* _this = reinterpret_cast< CueThemeType* >(object);
  (void)_this;
}
void CueThemeType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CueThemeType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CueThemeType& CueThemeType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CueThemeType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void CueThemeType::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.CueThemeType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      namespace__.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      user_defined_value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(ext_value_ != nullptr);
      ext_value_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CueThemeType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string namespace = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_namespace_();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.CueThemeType.namespace");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string user_defined_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_user_defined_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.CueThemeType.user_defined_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.avs.ThemeType ext_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CueThemeType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.CueThemeType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string namespace = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_namespace_().data(), static_cast<int>(this->_internal_namespace_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.CueThemeType.namespace");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_namespace_(), target);
  }

  // optional string user_defined_value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_user_defined_value().data(), static_cast<int>(this->_internal_user_defined_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.CueThemeType.user_defined_value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_defined_value(), target);
  }

  // optional .ern411.avs.ThemeType ext_value = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::ext_value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.CueThemeType)
  return target;
}

size_t CueThemeType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.CueThemeType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string namespace = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_namespace_());
    }

    // optional string user_defined_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_defined_value());
    }

    // optional .ern411.avs.ThemeType ext_value = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ext_value_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CueThemeType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.CueThemeType)
  GOOGLE_DCHECK_NE(&from, this);
  const CueThemeType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CueThemeType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.CueThemeType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.CueThemeType)
    MergeFrom(*source);
  }
}

void CueThemeType::MergeFrom(const CueThemeType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.CueThemeType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_namespace_(from._internal_namespace_());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_user_defined_value(from._internal_user_defined_value());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_ext_value()->::ern411::avs::ThemeType::MergeFrom(from._internal_ext_value());
    }
  }
}

void CueThemeType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.CueThemeType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CueThemeType::CopyFrom(const CueThemeType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.CueThemeType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CueThemeType::IsInitialized() const {
  return true;
}

void CueThemeType::InternalSwap(CueThemeType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  namespace__.Swap(&other->namespace__, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_defined_value_.Swap(&other->user_defined_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(ext_value_, other->ext_value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CueThemeType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CueUseType::InitAsDefaultInstance() {
  ::ern411::ern::_CueUseType_default_instance_._instance.get_mutable()->ext_value_ = const_cast< ::ern411::avs::CueUseType*>(
      ::ern411::avs::CueUseType::internal_default_instance());
}
class CueUseType::_Internal {
 public:
  using HasBits = decltype(std::declval<CueUseType>()._has_bits_);
  static void set_has_namespace_(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_user_defined_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::ern411::avs::CueUseType& ext_value(const CueUseType* msg);
  static void set_has_ext_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::ern411::avs::CueUseType&
CueUseType::_Internal::ext_value(const CueUseType* msg) {
  return *msg->ext_value_;
}
void CueUseType::clear_ext_value() {
  if (ext_value_ != nullptr) ext_value_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
CueUseType::CueUseType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.CueUseType)
}
CueUseType::CueUseType(const CueUseType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_namespace_()) {
    namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_namespace_(),
      GetArena());
  }
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_user_defined_value()) {
    user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_defined_value(),
      GetArena());
  }
  if (from._internal_has_ext_value()) {
    ext_value_ = new ::ern411::avs::CueUseType(*from.ext_value_);
  } else {
    ext_value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ern411.ern.CueUseType)
}

void CueUseType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CueUseType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ext_value_ = nullptr;
}

CueUseType::~CueUseType() {
  // @@protoc_insertion_point(destructor:ern411.ern.CueUseType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CueUseType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  namespace__.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ext_value_;
}

void CueUseType::ArenaDtor(void* object) {
  CueUseType* _this = reinterpret_cast< CueUseType* >(object);
  (void)_this;
}
void CueUseType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CueUseType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CueUseType& CueUseType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CueUseType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void CueUseType::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.CueUseType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      namespace__.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      user_defined_value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(ext_value_ != nullptr);
      ext_value_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CueUseType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string namespace = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_namespace_();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.CueUseType.namespace");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string user_defined_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_user_defined_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.CueUseType.user_defined_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.avs.CueUseType ext_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CueUseType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.CueUseType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string namespace = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_namespace_().data(), static_cast<int>(this->_internal_namespace_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.CueUseType.namespace");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_namespace_(), target);
  }

  // optional string user_defined_value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_user_defined_value().data(), static_cast<int>(this->_internal_user_defined_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.CueUseType.user_defined_value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_defined_value(), target);
  }

  // optional .ern411.avs.CueUseType ext_value = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::ext_value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.CueUseType)
  return target;
}

size_t CueUseType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.CueUseType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string namespace = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_namespace_());
    }

    // optional string user_defined_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_defined_value());
    }

    // optional .ern411.avs.CueUseType ext_value = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ext_value_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CueUseType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.CueUseType)
  GOOGLE_DCHECK_NE(&from, this);
  const CueUseType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CueUseType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.CueUseType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.CueUseType)
    MergeFrom(*source);
  }
}

void CueUseType::MergeFrom(const CueUseType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.CueUseType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_namespace_(from._internal_namespace_());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_user_defined_value(from._internal_user_defined_value());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_ext_value()->::ern411::avs::CueUseType::MergeFrom(from._internal_ext_value());
    }
  }
}

void CueUseType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.CueUseType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CueUseType::CopyFrom(const CueUseType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.CueUseType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CueUseType::IsInitialized() const {
  return true;
}

void CueUseType::InternalSwap(CueUseType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  namespace__.Swap(&other->namespace__, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_defined_value_.Swap(&other->user_defined_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(ext_value_, other->ext_value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CueUseType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CueVisualPerceptionType::InitAsDefaultInstance() {
  ::ern411::ern::_CueVisualPerceptionType_default_instance_._instance.get_mutable()->ext_value_ = const_cast< ::ern411::avs::VisualPerceptionType*>(
      ::ern411::avs::VisualPerceptionType::internal_default_instance());
}
class CueVisualPerceptionType::_Internal {
 public:
  using HasBits = decltype(std::declval<CueVisualPerceptionType>()._has_bits_);
  static void set_has_namespace_(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_user_defined_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::ern411::avs::VisualPerceptionType& ext_value(const CueVisualPerceptionType* msg);
  static void set_has_ext_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::ern411::avs::VisualPerceptionType&
CueVisualPerceptionType::_Internal::ext_value(const CueVisualPerceptionType* msg) {
  return *msg->ext_value_;
}
void CueVisualPerceptionType::clear_ext_value() {
  if (ext_value_ != nullptr) ext_value_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
CueVisualPerceptionType::CueVisualPerceptionType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.CueVisualPerceptionType)
}
CueVisualPerceptionType::CueVisualPerceptionType(const CueVisualPerceptionType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_namespace_()) {
    namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_namespace_(),
      GetArena());
  }
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_user_defined_value()) {
    user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_defined_value(),
      GetArena());
  }
  if (from._internal_has_ext_value()) {
    ext_value_ = new ::ern411::avs::VisualPerceptionType(*from.ext_value_);
  } else {
    ext_value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ern411.ern.CueVisualPerceptionType)
}

void CueVisualPerceptionType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CueVisualPerceptionType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ext_value_ = nullptr;
}

CueVisualPerceptionType::~CueVisualPerceptionType() {
  // @@protoc_insertion_point(destructor:ern411.ern.CueVisualPerceptionType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CueVisualPerceptionType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  namespace__.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ext_value_;
}

void CueVisualPerceptionType::ArenaDtor(void* object) {
  CueVisualPerceptionType* _this = reinterpret_cast< CueVisualPerceptionType* >(object);
  (void)_this;
}
void CueVisualPerceptionType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CueVisualPerceptionType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CueVisualPerceptionType& CueVisualPerceptionType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CueVisualPerceptionType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void CueVisualPerceptionType::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.CueVisualPerceptionType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      namespace__.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      user_defined_value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(ext_value_ != nullptr);
      ext_value_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CueVisualPerceptionType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string namespace = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_namespace_();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.CueVisualPerceptionType.namespace");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string user_defined_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_user_defined_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.CueVisualPerceptionType.user_defined_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.avs.VisualPerceptionType ext_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CueVisualPerceptionType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.CueVisualPerceptionType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string namespace = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_namespace_().data(), static_cast<int>(this->_internal_namespace_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.CueVisualPerceptionType.namespace");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_namespace_(), target);
  }

  // optional string user_defined_value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_user_defined_value().data(), static_cast<int>(this->_internal_user_defined_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.CueVisualPerceptionType.user_defined_value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_defined_value(), target);
  }

  // optional .ern411.avs.VisualPerceptionType ext_value = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::ext_value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.CueVisualPerceptionType)
  return target;
}

size_t CueVisualPerceptionType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.CueVisualPerceptionType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string namespace = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_namespace_());
    }

    // optional string user_defined_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_defined_value());
    }

    // optional .ern411.avs.VisualPerceptionType ext_value = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ext_value_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CueVisualPerceptionType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.CueVisualPerceptionType)
  GOOGLE_DCHECK_NE(&from, this);
  const CueVisualPerceptionType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CueVisualPerceptionType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.CueVisualPerceptionType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.CueVisualPerceptionType)
    MergeFrom(*source);
  }
}

void CueVisualPerceptionType::MergeFrom(const CueVisualPerceptionType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.CueVisualPerceptionType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_namespace_(from._internal_namespace_());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_user_defined_value(from._internal_user_defined_value());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_ext_value()->::ern411::avs::VisualPerceptionType::MergeFrom(from._internal_ext_value());
    }
  }
}

void CueVisualPerceptionType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.CueVisualPerceptionType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CueVisualPerceptionType::CopyFrom(const CueVisualPerceptionType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.CueVisualPerceptionType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CueVisualPerceptionType::IsInitialized() const {
  return true;
}

void CueVisualPerceptionType::InternalSwap(CueVisualPerceptionType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  namespace__.Swap(&other->namespace__, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_defined_value_.Swap(&other->user_defined_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(ext_value_, other->ext_value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CueVisualPerceptionType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CueVocalType::InitAsDefaultInstance() {
  ::ern411::ern::_CueVocalType_default_instance_._instance.get_mutable()->ext_value_ = const_cast< ::ern411::avs::VocalType*>(
      ::ern411::avs::VocalType::internal_default_instance());
}
class CueVocalType::_Internal {
 public:
  using HasBits = decltype(std::declval<CueVocalType>()._has_bits_);
  static void set_has_namespace_(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_user_defined_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::ern411::avs::VocalType& ext_value(const CueVocalType* msg);
  static void set_has_ext_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::ern411::avs::VocalType&
CueVocalType::_Internal::ext_value(const CueVocalType* msg) {
  return *msg->ext_value_;
}
void CueVocalType::clear_ext_value() {
  if (ext_value_ != nullptr) ext_value_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
CueVocalType::CueVocalType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.CueVocalType)
}
CueVocalType::CueVocalType(const CueVocalType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_namespace_()) {
    namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_namespace_(),
      GetArena());
  }
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_user_defined_value()) {
    user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_defined_value(),
      GetArena());
  }
  if (from._internal_has_ext_value()) {
    ext_value_ = new ::ern411::avs::VocalType(*from.ext_value_);
  } else {
    ext_value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ern411.ern.CueVocalType)
}

void CueVocalType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CueVocalType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ext_value_ = nullptr;
}

CueVocalType::~CueVocalType() {
  // @@protoc_insertion_point(destructor:ern411.ern.CueVocalType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CueVocalType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  namespace__.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ext_value_;
}

void CueVocalType::ArenaDtor(void* object) {
  CueVocalType* _this = reinterpret_cast< CueVocalType* >(object);
  (void)_this;
}
void CueVocalType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CueVocalType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CueVocalType& CueVocalType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CueVocalType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void CueVocalType::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.CueVocalType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      namespace__.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      user_defined_value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(ext_value_ != nullptr);
      ext_value_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CueVocalType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string namespace = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_namespace_();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.CueVocalType.namespace");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string user_defined_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_user_defined_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.CueVocalType.user_defined_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.avs.VocalType ext_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CueVocalType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.CueVocalType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string namespace = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_namespace_().data(), static_cast<int>(this->_internal_namespace_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.CueVocalType.namespace");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_namespace_(), target);
  }

  // optional string user_defined_value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_user_defined_value().data(), static_cast<int>(this->_internal_user_defined_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.CueVocalType.user_defined_value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_defined_value(), target);
  }

  // optional .ern411.avs.VocalType ext_value = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::ext_value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.CueVocalType)
  return target;
}

size_t CueVocalType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.CueVocalType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string namespace = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_namespace_());
    }

    // optional string user_defined_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_defined_value());
    }

    // optional .ern411.avs.VocalType ext_value = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ext_value_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CueVocalType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.CueVocalType)
  GOOGLE_DCHECK_NE(&from, this);
  const CueVocalType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CueVocalType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.CueVocalType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.CueVocalType)
    MergeFrom(*source);
  }
}

void CueVocalType::MergeFrom(const CueVocalType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.CueVocalType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_namespace_(from._internal_namespace_());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_user_defined_value(from._internal_user_defined_value());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_ext_value()->::ern411::avs::VocalType::MergeFrom(from._internal_ext_value());
    }
  }
}

void CueVocalType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.CueVocalType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CueVocalType::CopyFrom(const CueVocalType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.CueVocalType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CueVocalType::IsInitialized() const {
  return true;
}

void CueVocalType::InternalSwap(CueVocalType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  namespace__.Swap(&other->namespace__, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_defined_value_.Swap(&other->user_defined_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(ext_value_, other->ext_value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CueVocalType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CurrentTerritoryCode::InitAsDefaultInstance() {
  ::ern411::ern::_CurrentTerritoryCode_default_instance_._instance.get_mutable()->identifier_type_ = const_cast< ::ern411::avs::TerritoryCodeType*>(
      ::ern411::avs::TerritoryCodeType::internal_default_instance());
  ::ern411::ern::_CurrentTerritoryCode_default_instance_._instance.get_mutable()->ext_value_ = const_cast< ::ern411::avs::CurrentTerritoryCode*>(
      ::ern411::avs::CurrentTerritoryCode::internal_default_instance());
}
class CurrentTerritoryCode::_Internal {
 public:
  using HasBits = decltype(std::declval<CurrentTerritoryCode>()._has_bits_);
  static const ::ern411::avs::TerritoryCodeType& identifier_type(const CurrentTerritoryCode* msg);
  static void set_has_identifier_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ern411::avs::CurrentTerritoryCode& ext_value(const CurrentTerritoryCode* msg);
  static void set_has_ext_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::ern411::avs::TerritoryCodeType&
CurrentTerritoryCode::_Internal::identifier_type(const CurrentTerritoryCode* msg) {
  return *msg->identifier_type_;
}
const ::ern411::avs::CurrentTerritoryCode&
CurrentTerritoryCode::_Internal::ext_value(const CurrentTerritoryCode* msg) {
  return *msg->ext_value_;
}
void CurrentTerritoryCode::clear_identifier_type() {
  if (identifier_type_ != nullptr) identifier_type_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void CurrentTerritoryCode::clear_ext_value() {
  if (ext_value_ != nullptr) ext_value_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
CurrentTerritoryCode::CurrentTerritoryCode(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.CurrentTerritoryCode)
}
CurrentTerritoryCode::CurrentTerritoryCode(const CurrentTerritoryCode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_identifier_type()) {
    identifier_type_ = new ::ern411::avs::TerritoryCodeType(*from.identifier_type_);
  } else {
    identifier_type_ = nullptr;
  }
  if (from._internal_has_ext_value()) {
    ext_value_ = new ::ern411::avs::CurrentTerritoryCode(*from.ext_value_);
  } else {
    ext_value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ern411.ern.CurrentTerritoryCode)
}

void CurrentTerritoryCode::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CurrentTerritoryCode_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  ::memset(&identifier_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ext_value_) -
      reinterpret_cast<char*>(&identifier_type_)) + sizeof(ext_value_));
}

CurrentTerritoryCode::~CurrentTerritoryCode() {
  // @@protoc_insertion_point(destructor:ern411.ern.CurrentTerritoryCode)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CurrentTerritoryCode::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete identifier_type_;
  if (this != internal_default_instance()) delete ext_value_;
}

void CurrentTerritoryCode::ArenaDtor(void* object) {
  CurrentTerritoryCode* _this = reinterpret_cast< CurrentTerritoryCode* >(object);
  (void)_this;
}
void CurrentTerritoryCode::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CurrentTerritoryCode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CurrentTerritoryCode& CurrentTerritoryCode::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CurrentTerritoryCode_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void CurrentTerritoryCode::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.CurrentTerritoryCode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(identifier_type_ != nullptr);
      identifier_type_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(ext_value_ != nullptr);
      ext_value_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CurrentTerritoryCode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ern411.avs.TerritoryCodeType identifier_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_identifier_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.avs.CurrentTerritoryCode ext_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CurrentTerritoryCode::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.CurrentTerritoryCode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ern411.avs.TerritoryCodeType identifier_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::identifier_type(this), target, stream);
  }

  // optional .ern411.avs.CurrentTerritoryCode ext_value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::ext_value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.CurrentTerritoryCode)
  return target;
}

size_t CurrentTerritoryCode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.CurrentTerritoryCode)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .ern411.avs.TerritoryCodeType identifier_type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *identifier_type_);
    }

    // optional .ern411.avs.CurrentTerritoryCode ext_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ext_value_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CurrentTerritoryCode::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.CurrentTerritoryCode)
  GOOGLE_DCHECK_NE(&from, this);
  const CurrentTerritoryCode* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CurrentTerritoryCode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.CurrentTerritoryCode)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.CurrentTerritoryCode)
    MergeFrom(*source);
  }
}

void CurrentTerritoryCode::MergeFrom(const CurrentTerritoryCode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.CurrentTerritoryCode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_identifier_type()->::ern411::avs::TerritoryCodeType::MergeFrom(from._internal_identifier_type());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_ext_value()->::ern411::avs::CurrentTerritoryCode::MergeFrom(from._internal_ext_value());
    }
  }
}

void CurrentTerritoryCode::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.CurrentTerritoryCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CurrentTerritoryCode::CopyFrom(const CurrentTerritoryCode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.CurrentTerritoryCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CurrentTerritoryCode::IsInitialized() const {
  return true;
}

void CurrentTerritoryCode::InternalSwap(CurrentTerritoryCode* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CurrentTerritoryCode, ext_value_)
      + sizeof(CurrentTerritoryCode::ext_value_)
      - PROTOBUF_FIELD_OFFSET(CurrentTerritoryCode, identifier_type_)>(
          reinterpret_cast<char*>(&identifier_type_),
          reinterpret_cast<char*>(&other->identifier_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CurrentTerritoryCode::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DSP::InitAsDefaultInstance() {
  ::ern411::ern::_DSP_default_instance_._instance.get_mutable()->trading_name_ = const_cast< ::ern411::ern::Name*>(
      ::ern411::ern::Name::internal_default_instance());
}
class DSP::_Internal {
 public:
  using HasBits = decltype(std::declval<DSP>()._has_bits_);
  static const ::ern411::ern::Name& trading_name(const DSP* msg);
  static void set_has_trading_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::ern411::ern::Name&
DSP::_Internal::trading_name(const DSP* msg) {
  return *msg->trading_name_;
}
DSP::DSP(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  party_id_(arena),
  party_name_(arena),
  u_r_l_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.DSP)
}
DSP::DSP(const DSP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      party_id_(from.party_id_),
      party_name_(from.party_name_),
      u_r_l_(from.u_r_l_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_trading_name()) {
    trading_name_ = new ::ern411::ern::Name(*from.trading_name_);
  } else {
    trading_name_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ern411.ern.DSP)
}

void DSP::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DSP_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  trading_name_ = nullptr;
}

DSP::~DSP() {
  // @@protoc_insertion_point(destructor:ern411.ern.DSP)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DSP::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete trading_name_;
}

void DSP::ArenaDtor(void* object) {
  DSP* _this = reinterpret_cast< DSP* >(object);
  (void)_this;
}
void DSP::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DSP::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DSP& DSP::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DSP_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void DSP::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.DSP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  party_id_.Clear();
  party_name_.Clear();
  u_r_l_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(trading_name_ != nullptr);
    trading_name_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DSP::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ern411.ern.DetailedPartyId party_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_party_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.PartyName party_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_party_name(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .ern411.ern.Name trading_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_trading_name(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string u_r_l = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_u_r_l();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.DSP.u_r_l");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DSP::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.DSP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ern411.ern.DetailedPartyId party_id = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_party_id_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_party_id(i), target, stream);
  }

  // repeated .ern411.ern.PartyName party_name = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_party_name_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_party_name(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional .ern411.ern.Name trading_name = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::trading_name(this), target, stream);
  }

  // repeated string u_r_l = 4;
  for (int i = 0, n = this->_internal_u_r_l_size(); i < n; i++) {
    const auto& s = this->_internal_u_r_l(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.DSP.u_r_l");
    target = stream->WriteString(4, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.DSP)
  return target;
}

size_t DSP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.DSP)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ern411.ern.DetailedPartyId party_id = 1;
  total_size += 1UL * this->_internal_party_id_size();
  for (const auto& msg : this->party_id_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.PartyName party_name = 2;
  total_size += 1UL * this->_internal_party_name_size();
  for (const auto& msg : this->party_name_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string u_r_l = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(u_r_l_.size());
  for (int i = 0, n = u_r_l_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      u_r_l_.Get(i));
  }

  // optional .ern411.ern.Name trading_name = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *trading_name_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DSP::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.DSP)
  GOOGLE_DCHECK_NE(&from, this);
  const DSP* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DSP>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.DSP)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.DSP)
    MergeFrom(*source);
  }
}

void DSP::MergeFrom(const DSP& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.DSP)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  party_id_.MergeFrom(from.party_id_);
  party_name_.MergeFrom(from.party_name_);
  u_r_l_.MergeFrom(from.u_r_l_);
  if (from._internal_has_trading_name()) {
    _internal_mutable_trading_name()->::ern411::ern::Name::MergeFrom(from._internal_trading_name());
  }
}

void DSP::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.DSP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DSP::CopyFrom(const DSP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.DSP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DSP::IsInitialized() const {
  return true;
}

void DSP::InternalSwap(DSP* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  party_id_.InternalSwap(&other->party_id_);
  party_name_.InternalSwap(&other->party_name_);
  u_r_l_.InternalSwap(&other->u_r_l_);
  swap(trading_name_, other->trading_name_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DSP::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Deal::InitAsDefaultInstance() {
  ::ern411::ern::_Deal_default_instance_._instance.get_mutable()->deal_technical_resource_details_reference_list_ = const_cast< ::ern411::ern::DealTechnicalResourceDetailsReferenceList*>(
      ::ern411::ern::DealTechnicalResourceDetailsReferenceList::internal_default_instance());
  ::ern411::ern::_Deal_default_instance_._instance.get_mutable()->deal_terms_ = const_cast< ::ern411::ern::DealTerms*>(
      ::ern411::ern::DealTerms::internal_default_instance());
}
class Deal::_Internal {
 public:
  using HasBits = decltype(std::declval<Deal>()._has_bits_);
  static const ::ern411::ern::DealTechnicalResourceDetailsReferenceList& deal_technical_resource_details_reference_list(const Deal* msg);
  static void set_has_deal_technical_resource_details_reference_list(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ern411::ern::DealTerms& deal_terms(const Deal* msg);
  static void set_has_deal_terms(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_communicated_out_of_band(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::ern411::ern::DealTechnicalResourceDetailsReferenceList&
Deal::_Internal::deal_technical_resource_details_reference_list(const Deal* msg) {
  return *msg->deal_technical_resource_details_reference_list_;
}
const ::ern411::ern::DealTerms&
Deal::_Internal::deal_terms(const Deal* msg) {
  return *msg->deal_terms_;
}
Deal::Deal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  deal_reference_(arena),
  distribution_channel_page_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.Deal)
}
Deal::Deal(const Deal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      deal_reference_(from.deal_reference_),
      distribution_channel_page_(from.distribution_channel_page_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_deal_technical_resource_details_reference_list()) {
    deal_technical_resource_details_reference_list_ = new ::ern411::ern::DealTechnicalResourceDetailsReferenceList(*from.deal_technical_resource_details_reference_list_);
  } else {
    deal_technical_resource_details_reference_list_ = nullptr;
  }
  if (from._internal_has_deal_terms()) {
    deal_terms_ = new ::ern411::ern::DealTerms(*from.deal_terms_);
  } else {
    deal_terms_ = nullptr;
  }
  is_communicated_out_of_band_ = from.is_communicated_out_of_band_;
  // @@protoc_insertion_point(copy_constructor:ern411.ern.Deal)
}

void Deal::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Deal_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  ::memset(&deal_technical_resource_details_reference_list_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_communicated_out_of_band_) -
      reinterpret_cast<char*>(&deal_technical_resource_details_reference_list_)) + sizeof(is_communicated_out_of_band_));
}

Deal::~Deal() {
  // @@protoc_insertion_point(destructor:ern411.ern.Deal)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Deal::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete deal_technical_resource_details_reference_list_;
  if (this != internal_default_instance()) delete deal_terms_;
}

void Deal::ArenaDtor(void* object) {
  Deal* _this = reinterpret_cast< Deal* >(object);
  (void)_this;
}
void Deal::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Deal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Deal& Deal::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Deal_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void Deal::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.Deal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  deal_reference_.Clear();
  distribution_channel_page_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(deal_technical_resource_details_reference_list_ != nullptr);
      deal_technical_resource_details_reference_list_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(deal_terms_ != nullptr);
      deal_terms_->Clear();
    }
  }
  is_communicated_out_of_band_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Deal::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string deal_reference = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_deal_reference();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.Deal.deal_reference");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .ern411.ern.DealTechnicalResourceDetailsReferenceList deal_technical_resource_details_reference_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_deal_technical_resource_details_reference_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.ern.DealTerms deal_terms = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_deal_terms(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.DistributionChannelPage distribution_channel_page = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_distribution_channel_page(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool is_communicated_out_of_band = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_is_communicated_out_of_band(&has_bits);
          is_communicated_out_of_band_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Deal::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.Deal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string deal_reference = 1;
  for (int i = 0, n = this->_internal_deal_reference_size(); i < n; i++) {
    const auto& s = this->_internal_deal_reference(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.Deal.deal_reference");
    target = stream->WriteString(1, s, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .ern411.ern.DealTechnicalResourceDetailsReferenceList deal_technical_resource_details_reference_list = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::deal_technical_resource_details_reference_list(this), target, stream);
  }

  // optional .ern411.ern.DealTerms deal_terms = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::deal_terms(this), target, stream);
  }

  // repeated .ern411.ern.DistributionChannelPage distribution_channel_page = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_distribution_channel_page_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_distribution_channel_page(i), target, stream);
  }

  // optional bool is_communicated_out_of_band = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_is_communicated_out_of_band(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.Deal)
  return target;
}

size_t Deal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.Deal)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string deal_reference = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(deal_reference_.size());
  for (int i = 0, n = deal_reference_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      deal_reference_.Get(i));
  }

  // repeated .ern411.ern.DistributionChannelPage distribution_channel_page = 4;
  total_size += 1UL * this->_internal_distribution_channel_page_size();
  for (const auto& msg : this->distribution_channel_page_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .ern411.ern.DealTechnicalResourceDetailsReferenceList deal_technical_resource_details_reference_list = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *deal_technical_resource_details_reference_list_);
    }

    // optional .ern411.ern.DealTerms deal_terms = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *deal_terms_);
    }

    // optional bool is_communicated_out_of_band = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Deal::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.Deal)
  GOOGLE_DCHECK_NE(&from, this);
  const Deal* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Deal>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.Deal)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.Deal)
    MergeFrom(*source);
  }
}

void Deal::MergeFrom(const Deal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.Deal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  deal_reference_.MergeFrom(from.deal_reference_);
  distribution_channel_page_.MergeFrom(from.distribution_channel_page_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_deal_technical_resource_details_reference_list()->::ern411::ern::DealTechnicalResourceDetailsReferenceList::MergeFrom(from._internal_deal_technical_resource_details_reference_list());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_deal_terms()->::ern411::ern::DealTerms::MergeFrom(from._internal_deal_terms());
    }
    if (cached_has_bits & 0x00000004u) {
      is_communicated_out_of_band_ = from.is_communicated_out_of_band_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Deal::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.Deal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Deal::CopyFrom(const Deal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.Deal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Deal::IsInitialized() const {
  return true;
}

void Deal::InternalSwap(Deal* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  deal_reference_.InternalSwap(&other->deal_reference_);
  distribution_channel_page_.InternalSwap(&other->distribution_channel_page_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Deal, is_communicated_out_of_band_)
      + sizeof(Deal::is_communicated_out_of_band_)
      - PROTOBUF_FIELD_OFFSET(Deal, deal_technical_resource_details_reference_list_)>(
          reinterpret_cast<char*>(&deal_technical_resource_details_reference_list_),
          reinterpret_cast<char*>(&other->deal_technical_resource_details_reference_list_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Deal::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DealList::InitAsDefaultInstance() {
}
class DealList::_Internal {
 public:
};

DealList::DealList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  release_deal_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.DealList)
}
DealList::DealList(const DealList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      release_deal_(from.release_deal_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ern411.ern.DealList)
}

void DealList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DealList_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
}

DealList::~DealList() {
  // @@protoc_insertion_point(destructor:ern411.ern.DealList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DealList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DealList::ArenaDtor(void* object) {
  DealList* _this = reinterpret_cast< DealList* >(object);
  (void)_this;
}
void DealList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DealList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DealList& DealList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DealList_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void DealList::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.DealList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  release_deal_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DealList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ern411.ern.ReleaseDeal release_deal = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_release_deal(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DealList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.DealList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ern411.ern.ReleaseDeal release_deal = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_release_deal_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_release_deal(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.DealList)
  return target;
}

size_t DealList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.DealList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ern411.ern.ReleaseDeal release_deal = 1;
  total_size += 1UL * this->_internal_release_deal_size();
  for (const auto& msg : this->release_deal_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DealList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.DealList)
  GOOGLE_DCHECK_NE(&from, this);
  const DealList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DealList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.DealList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.DealList)
    MergeFrom(*source);
  }
}

void DealList::MergeFrom(const DealList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.DealList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  release_deal_.MergeFrom(from.release_deal_);
}

void DealList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.DealList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DealList::CopyFrom(const DealList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.DealList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DealList::IsInitialized() const {
  return true;
}

void DealList::InternalSwap(DealList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  release_deal_.InternalSwap(&other->release_deal_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DealList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DealResourceReferenceList::InitAsDefaultInstance() {
}
class DealResourceReferenceList::_Internal {
 public:
};

DealResourceReferenceList::DealResourceReferenceList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  deal_resource_reference_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.DealResourceReferenceList)
}
DealResourceReferenceList::DealResourceReferenceList(const DealResourceReferenceList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      deal_resource_reference_(from.deal_resource_reference_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ern411.ern.DealResourceReferenceList)
}

void DealResourceReferenceList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DealResourceReferenceList_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
}

DealResourceReferenceList::~DealResourceReferenceList() {
  // @@protoc_insertion_point(destructor:ern411.ern.DealResourceReferenceList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DealResourceReferenceList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DealResourceReferenceList::ArenaDtor(void* object) {
  DealResourceReferenceList* _this = reinterpret_cast< DealResourceReferenceList* >(object);
  (void)_this;
}
void DealResourceReferenceList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DealResourceReferenceList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DealResourceReferenceList& DealResourceReferenceList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DealResourceReferenceList_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void DealResourceReferenceList::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.DealResourceReferenceList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  deal_resource_reference_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DealResourceReferenceList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string deal_resource_reference = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_deal_resource_reference();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.DealResourceReferenceList.deal_resource_reference");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DealResourceReferenceList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.DealResourceReferenceList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string deal_resource_reference = 1;
  for (int i = 0, n = this->_internal_deal_resource_reference_size(); i < n; i++) {
    const auto& s = this->_internal_deal_resource_reference(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.DealResourceReferenceList.deal_resource_reference");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.DealResourceReferenceList)
  return target;
}

size_t DealResourceReferenceList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.DealResourceReferenceList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string deal_resource_reference = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(deal_resource_reference_.size());
  for (int i = 0, n = deal_resource_reference_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      deal_resource_reference_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DealResourceReferenceList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.DealResourceReferenceList)
  GOOGLE_DCHECK_NE(&from, this);
  const DealResourceReferenceList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DealResourceReferenceList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.DealResourceReferenceList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.DealResourceReferenceList)
    MergeFrom(*source);
  }
}

void DealResourceReferenceList::MergeFrom(const DealResourceReferenceList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.DealResourceReferenceList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  deal_resource_reference_.MergeFrom(from.deal_resource_reference_);
}

void DealResourceReferenceList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.DealResourceReferenceList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DealResourceReferenceList::CopyFrom(const DealResourceReferenceList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.DealResourceReferenceList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DealResourceReferenceList::IsInitialized() const {
  return true;
}

void DealResourceReferenceList::InternalSwap(DealResourceReferenceList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  deal_resource_reference_.InternalSwap(&other->deal_resource_reference_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DealResourceReferenceList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DealTechnicalResourceDetailsReferenceList::InitAsDefaultInstance() {
}
class DealTechnicalResourceDetailsReferenceList::_Internal {
 public:
};

DealTechnicalResourceDetailsReferenceList::DealTechnicalResourceDetailsReferenceList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  deal_technical_resource_details_reference_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.DealTechnicalResourceDetailsReferenceList)
}
DealTechnicalResourceDetailsReferenceList::DealTechnicalResourceDetailsReferenceList(const DealTechnicalResourceDetailsReferenceList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      deal_technical_resource_details_reference_(from.deal_technical_resource_details_reference_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ern411.ern.DealTechnicalResourceDetailsReferenceList)
}

void DealTechnicalResourceDetailsReferenceList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DealTechnicalResourceDetailsReferenceList_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
}

DealTechnicalResourceDetailsReferenceList::~DealTechnicalResourceDetailsReferenceList() {
  // @@protoc_insertion_point(destructor:ern411.ern.DealTechnicalResourceDetailsReferenceList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DealTechnicalResourceDetailsReferenceList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DealTechnicalResourceDetailsReferenceList::ArenaDtor(void* object) {
  DealTechnicalResourceDetailsReferenceList* _this = reinterpret_cast< DealTechnicalResourceDetailsReferenceList* >(object);
  (void)_this;
}
void DealTechnicalResourceDetailsReferenceList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DealTechnicalResourceDetailsReferenceList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DealTechnicalResourceDetailsReferenceList& DealTechnicalResourceDetailsReferenceList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DealTechnicalResourceDetailsReferenceList_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void DealTechnicalResourceDetailsReferenceList::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.DealTechnicalResourceDetailsReferenceList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  deal_technical_resource_details_reference_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DealTechnicalResourceDetailsReferenceList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string deal_technical_resource_details_reference = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_deal_technical_resource_details_reference();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.DealTechnicalResourceDetailsReferenceList.deal_technical_resource_details_reference");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DealTechnicalResourceDetailsReferenceList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.DealTechnicalResourceDetailsReferenceList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string deal_technical_resource_details_reference = 1;
  for (int i = 0, n = this->_internal_deal_technical_resource_details_reference_size(); i < n; i++) {
    const auto& s = this->_internal_deal_technical_resource_details_reference(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.DealTechnicalResourceDetailsReferenceList.deal_technical_resource_details_reference");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.DealTechnicalResourceDetailsReferenceList)
  return target;
}

size_t DealTechnicalResourceDetailsReferenceList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.DealTechnicalResourceDetailsReferenceList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string deal_technical_resource_details_reference = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(deal_technical_resource_details_reference_.size());
  for (int i = 0, n = deal_technical_resource_details_reference_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      deal_technical_resource_details_reference_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DealTechnicalResourceDetailsReferenceList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.DealTechnicalResourceDetailsReferenceList)
  GOOGLE_DCHECK_NE(&from, this);
  const DealTechnicalResourceDetailsReferenceList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DealTechnicalResourceDetailsReferenceList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.DealTechnicalResourceDetailsReferenceList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.DealTechnicalResourceDetailsReferenceList)
    MergeFrom(*source);
  }
}

void DealTechnicalResourceDetailsReferenceList::MergeFrom(const DealTechnicalResourceDetailsReferenceList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.DealTechnicalResourceDetailsReferenceList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  deal_technical_resource_details_reference_.MergeFrom(from.deal_technical_resource_details_reference_);
}

void DealTechnicalResourceDetailsReferenceList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.DealTechnicalResourceDetailsReferenceList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DealTechnicalResourceDetailsReferenceList::CopyFrom(const DealTechnicalResourceDetailsReferenceList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.DealTechnicalResourceDetailsReferenceList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DealTechnicalResourceDetailsReferenceList::IsInitialized() const {
  return true;
}

void DealTechnicalResourceDetailsReferenceList::InternalSwap(DealTechnicalResourceDetailsReferenceList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  deal_technical_resource_details_reference_.InternalSwap(&other->deal_technical_resource_details_reference_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DealTechnicalResourceDetailsReferenceList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DealTerms::InitAsDefaultInstance() {
  ::ern411::ern::_DealTerms_default_instance_._instance.get_mutable()->clip_preview_start_date_ = const_cast< ::ern411::ern::ddex_IsoDate*>(
      ::ern411::ern::ddex_IsoDate::internal_default_instance());
  ::ern411::ern::_DealTerms_default_instance_._instance.get_mutable()->cover_art_preview_start_date_ = const_cast< ::ern411::ern::ddex_IsoDate*>(
      ::ern411::ern::ddex_IsoDate::internal_default_instance());
  ::ern411::ern::_DealTerms_default_instance_._instance.get_mutable()->instant_gratification_resource_list_ = const_cast< ::ern411::ern::DealResourceReferenceList*>(
      ::ern411::ern::DealResourceReferenceList::internal_default_instance());
  ::ern411::ern::_DealTerms_default_instance_._instance.get_mutable()->physical_returns_ = const_cast< ::ern411::ern::PhysicalReturns*>(
      ::ern411::ern::PhysicalReturns::internal_default_instance());
  ::ern411::ern::_DealTerms_default_instance_._instance.get_mutable()->promotional_code_ = const_cast< ::ern411::ern::PromotionalCode*>(
      ::ern411::ern::PromotionalCode::internal_default_instance());
  ::ern411::ern::_DealTerms_default_instance_._instance.get_mutable()->release_display_start_date_ = const_cast< ::ern411::ern::ddex_IsoDate*>(
      ::ern411::ern::ddex_IsoDate::internal_default_instance());
  ::ern411::ern::_DealTerms_default_instance_._instance.get_mutable()->technical_instantiation_ = const_cast< ::ern411::ern::DealTermsTechnicalInstantiation*>(
      ::ern411::ern::DealTermsTechnicalInstantiation::internal_default_instance());
  ::ern411::ern::_DealTerms_default_instance_._instance.get_mutable()->track_listing_preview_start_date_ = const_cast< ::ern411::ern::ddex_IsoDate*>(
      ::ern411::ern::ddex_IsoDate::internal_default_instance());
}
class DealTerms::_Internal {
 public:
  using HasBits = decltype(std::declval<DealTerms>()._has_bits_);
  static const ::ern411::ern::ddex_IsoDate& clip_preview_start_date(const DealTerms* msg);
  static void set_has_clip_preview_start_date(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_clip_preview_start_date_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ern411::ern::ddex_IsoDate& cover_art_preview_start_date(const DealTerms* msg);
  static void set_has_cover_art_preview_start_date(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_cover_art_preview_start_date_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::ern411::ern::DealResourceReferenceList& instant_gratification_resource_list(const DealTerms* msg);
  static void set_has_instant_gratification_resource_list(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_is_pre_order_deal(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_is_promotional(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_number_of_products_per_carton(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_number_of_usages(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::ern411::ern::PhysicalReturns& physical_returns(const DealTerms* msg);
  static void set_has_physical_returns(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::ern411::ern::PromotionalCode& promotional_code(const DealTerms* msg);
  static void set_has_promotional_code(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::ern411::ern::ddex_IsoDate& release_display_start_date(const DealTerms* msg);
  static void set_has_release_display_start_date(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_release_display_start_date_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::ern411::ern::DealTermsTechnicalInstantiation& technical_instantiation(const DealTerms* msg);
  static void set_has_technical_instantiation(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::ern411::ern::ddex_IsoDate& track_listing_preview_start_date(const DealTerms* msg);
  static void set_has_track_listing_preview_start_date(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_track_listing_preview_start_date_time(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::ern411::ern::ddex_IsoDate&
DealTerms::_Internal::clip_preview_start_date(const DealTerms* msg) {
  return *msg->clip_preview_start_date_;
}
const ::ern411::ern::ddex_IsoDate&
DealTerms::_Internal::cover_art_preview_start_date(const DealTerms* msg) {
  return *msg->cover_art_preview_start_date_;
}
const ::ern411::ern::DealResourceReferenceList&
DealTerms::_Internal::instant_gratification_resource_list(const DealTerms* msg) {
  return *msg->instant_gratification_resource_list_;
}
const ::ern411::ern::PhysicalReturns&
DealTerms::_Internal::physical_returns(const DealTerms* msg) {
  return *msg->physical_returns_;
}
const ::ern411::ern::PromotionalCode&
DealTerms::_Internal::promotional_code(const DealTerms* msg) {
  return *msg->promotional_code_;
}
const ::ern411::ern::ddex_IsoDate&
DealTerms::_Internal::release_display_start_date(const DealTerms* msg) {
  return *msg->release_display_start_date_;
}
const ::ern411::ern::DealTermsTechnicalInstantiation&
DealTerms::_Internal::technical_instantiation(const DealTerms* msg) {
  return *msg->technical_instantiation_;
}
const ::ern411::ern::ddex_IsoDate&
DealTerms::_Internal::track_listing_preview_start_date(const DealTerms* msg) {
  return *msg->track_listing_preview_start_date_;
}
DealTerms::DealTerms(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  carrier_type_(arena),
  commercial_model_type_(arena),
  distribution_channel_(arena),
  excluded_distribution_channel_(arena),
  excluded_territory_code_(arena),
  price_information_(arena),
  rights_claim_policy_(arena),
  territory_code_(arena),
  use_type_(arena),
  validity_period_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.DealTerms)
}
DealTerms::DealTerms(const DealTerms& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      carrier_type_(from.carrier_type_),
      commercial_model_type_(from.commercial_model_type_),
      distribution_channel_(from.distribution_channel_),
      excluded_distribution_channel_(from.excluded_distribution_channel_),
      excluded_territory_code_(from.excluded_territory_code_),
      price_information_(from.price_information_),
      rights_claim_policy_(from.rights_claim_policy_),
      territory_code_(from.territory_code_),
      use_type_(from.use_type_),
      validity_period_(from.validity_period_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clip_preview_start_date_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_clip_preview_start_date_time()) {
    clip_preview_start_date_time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_clip_preview_start_date_time(),
      GetArena());
  }
  cover_art_preview_start_date_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_cover_art_preview_start_date_time()) {
    cover_art_preview_start_date_time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_cover_art_preview_start_date_time(),
      GetArena());
  }
  release_display_start_date_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_release_display_start_date_time()) {
    release_display_start_date_time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_release_display_start_date_time(),
      GetArena());
  }
  track_listing_preview_start_date_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_track_listing_preview_start_date_time()) {
    track_listing_preview_start_date_time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_track_listing_preview_start_date_time(),
      GetArena());
  }
  if (from._internal_has_clip_preview_start_date()) {
    clip_preview_start_date_ = new ::ern411::ern::ddex_IsoDate(*from.clip_preview_start_date_);
  } else {
    clip_preview_start_date_ = nullptr;
  }
  if (from._internal_has_cover_art_preview_start_date()) {
    cover_art_preview_start_date_ = new ::ern411::ern::ddex_IsoDate(*from.cover_art_preview_start_date_);
  } else {
    cover_art_preview_start_date_ = nullptr;
  }
  if (from._internal_has_instant_gratification_resource_list()) {
    instant_gratification_resource_list_ = new ::ern411::ern::DealResourceReferenceList(*from.instant_gratification_resource_list_);
  } else {
    instant_gratification_resource_list_ = nullptr;
  }
  if (from._internal_has_physical_returns()) {
    physical_returns_ = new ::ern411::ern::PhysicalReturns(*from.physical_returns_);
  } else {
    physical_returns_ = nullptr;
  }
  if (from._internal_has_promotional_code()) {
    promotional_code_ = new ::ern411::ern::PromotionalCode(*from.promotional_code_);
  } else {
    promotional_code_ = nullptr;
  }
  if (from._internal_has_release_display_start_date()) {
    release_display_start_date_ = new ::ern411::ern::ddex_IsoDate(*from.release_display_start_date_);
  } else {
    release_display_start_date_ = nullptr;
  }
  if (from._internal_has_technical_instantiation()) {
    technical_instantiation_ = new ::ern411::ern::DealTermsTechnicalInstantiation(*from.technical_instantiation_);
  } else {
    technical_instantiation_ = nullptr;
  }
  if (from._internal_has_track_listing_preview_start_date()) {
    track_listing_preview_start_date_ = new ::ern411::ern::ddex_IsoDate(*from.track_listing_preview_start_date_);
  } else {
    track_listing_preview_start_date_ = nullptr;
  }
  ::memcpy(&is_pre_order_deal_, &from.is_pre_order_deal_,
    static_cast<size_t>(reinterpret_cast<char*>(&number_of_usages_) -
    reinterpret_cast<char*>(&is_pre_order_deal_)) + sizeof(number_of_usages_));
  // @@protoc_insertion_point(copy_constructor:ern411.ern.DealTerms)
}

void DealTerms::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DealTerms_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  clip_preview_start_date_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cover_art_preview_start_date_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  release_display_start_date_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  track_listing_preview_start_date_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&clip_preview_start_date_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&number_of_usages_) -
      reinterpret_cast<char*>(&clip_preview_start_date_)) + sizeof(number_of_usages_));
}

DealTerms::~DealTerms() {
  // @@protoc_insertion_point(destructor:ern411.ern.DealTerms)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DealTerms::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  clip_preview_start_date_time_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cover_art_preview_start_date_time_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  release_display_start_date_time_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  track_listing_preview_start_date_time_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete clip_preview_start_date_;
  if (this != internal_default_instance()) delete cover_art_preview_start_date_;
  if (this != internal_default_instance()) delete instant_gratification_resource_list_;
  if (this != internal_default_instance()) delete physical_returns_;
  if (this != internal_default_instance()) delete promotional_code_;
  if (this != internal_default_instance()) delete release_display_start_date_;
  if (this != internal_default_instance()) delete technical_instantiation_;
  if (this != internal_default_instance()) delete track_listing_preview_start_date_;
}

void DealTerms::ArenaDtor(void* object) {
  DealTerms* _this = reinterpret_cast< DealTerms* >(object);
  (void)_this;
}
void DealTerms::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DealTerms::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DealTerms& DealTerms::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DealTerms_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void DealTerms::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.DealTerms)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  carrier_type_.Clear();
  commercial_model_type_.Clear();
  distribution_channel_.Clear();
  excluded_distribution_channel_.Clear();
  excluded_territory_code_.Clear();
  price_information_.Clear();
  rights_claim_policy_.Clear();
  territory_code_.Clear();
  use_type_.Clear();
  validity_period_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      clip_preview_start_date_time_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      cover_art_preview_start_date_time_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      release_display_start_date_time_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      track_listing_preview_start_date_time_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(clip_preview_start_date_ != nullptr);
      clip_preview_start_date_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(cover_art_preview_start_date_ != nullptr);
      cover_art_preview_start_date_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(instant_gratification_resource_list_ != nullptr);
      instant_gratification_resource_list_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(physical_returns_ != nullptr);
      physical_returns_->Clear();
    }
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(promotional_code_ != nullptr);
      promotional_code_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(release_display_start_date_ != nullptr);
      release_display_start_date_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(technical_instantiation_ != nullptr);
      technical_instantiation_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(track_listing_preview_start_date_ != nullptr);
      track_listing_preview_start_date_->Clear();
    }
  }
  if (cached_has_bits & 0x0000f000u) {
    ::memset(&is_pre_order_deal_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&number_of_usages_) -
        reinterpret_cast<char*>(&is_pre_order_deal_)) + sizeof(number_of_usages_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DealTerms::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ern411.ern.CarrierType carrier_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_carrier_type(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .ern411.ern.ddex_IsoDate clip_preview_start_date = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_clip_preview_start_date(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string clip_preview_start_date_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_clip_preview_start_date_time();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.DealTerms.clip_preview_start_date_time");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.CommercialModelType commercial_model_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_commercial_model_type(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .ern411.ern.ddex_IsoDate cover_art_preview_start_date = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_cover_art_preview_start_date(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string cover_art_preview_start_date_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_cover_art_preview_start_date_time();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.DealTerms.cover_art_preview_start_date_time");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.DSP distribution_channel = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_distribution_channel(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.DSP excluded_distribution_channel = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_excluded_distribution_channel(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.CurrentTerritoryCode excluded_territory_code = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_excluded_territory_code(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .ern411.ern.DealResourceReferenceList instant_gratification_resource_list = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_instant_gratification_resource_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_pre_order_deal = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_is_pre_order_deal(&has_bits);
          is_pre_order_deal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_promotional = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_is_promotional(&has_bits);
          is_promotional_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 number_of_products_per_carton = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_number_of_products_per_carton(&has_bits);
          number_of_products_per_carton_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 number_of_usages = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_number_of_usages(&has_bits);
          number_of_usages_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.ern.PhysicalReturns physical_returns = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_physical_returns(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.PriceInformationWithType price_information = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_price_information(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<130>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .ern411.ern.PromotionalCode promotional_code = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_promotional_code(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.ern.ddex_IsoDate release_display_start_date = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_release_display_start_date(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string release_display_start_date_time = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          auto str = _internal_mutable_release_display_start_date_time();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.DealTerms.release_display_start_date_time");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.RightsClaimPolicy rights_claim_policy = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_rights_claim_policy(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<162>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .ern411.ern.DealTermsTechnicalInstantiation technical_instantiation = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_technical_instantiation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.CurrentTerritoryCode territory_code = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_territory_code(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<178>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .ern411.ern.ddex_IsoDate track_listing_preview_start_date = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_track_listing_preview_start_date(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string track_listing_preview_start_date_time = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          auto str = _internal_mutable_track_listing_preview_start_date_time();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.DealTerms.track_listing_preview_start_date_time");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.DiscoverableUseType use_type = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_use_type(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<202>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.PeriodWithoutFlags validity_period = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_validity_period(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<210>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DealTerms::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.DealTerms)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ern411.ern.CarrierType carrier_type = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_carrier_type_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_carrier_type(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional .ern411.ern.ddex_IsoDate clip_preview_start_date = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::clip_preview_start_date(this), target, stream);
  }

  // optional string clip_preview_start_date_time = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_clip_preview_start_date_time().data(), static_cast<int>(this->_internal_clip_preview_start_date_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.DealTerms.clip_preview_start_date_time");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_clip_preview_start_date_time(), target);
  }

  // repeated .ern411.ern.CommercialModelType commercial_model_type = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_commercial_model_type_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_commercial_model_type(i), target, stream);
  }

  // optional .ern411.ern.ddex_IsoDate cover_art_preview_start_date = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::cover_art_preview_start_date(this), target, stream);
  }

  // optional string cover_art_preview_start_date_time = 6;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_cover_art_preview_start_date_time().data(), static_cast<int>(this->_internal_cover_art_preview_start_date_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.DealTerms.cover_art_preview_start_date_time");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_cover_art_preview_start_date_time(), target);
  }

  // repeated .ern411.ern.DSP distribution_channel = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_distribution_channel_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_distribution_channel(i), target, stream);
  }

  // repeated .ern411.ern.DSP excluded_distribution_channel = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_excluded_distribution_channel_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_excluded_distribution_channel(i), target, stream);
  }

  // repeated .ern411.ern.CurrentTerritoryCode excluded_territory_code = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_excluded_territory_code_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_excluded_territory_code(i), target, stream);
  }

  // optional .ern411.ern.DealResourceReferenceList instant_gratification_resource_list = 10;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::instant_gratification_resource_list(this), target, stream);
  }

  // optional bool is_pre_order_deal = 11;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_is_pre_order_deal(), target);
  }

  // optional bool is_promotional = 12;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_is_promotional(), target);
  }

  // optional int32 number_of_products_per_carton = 13;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_number_of_products_per_carton(), target);
  }

  // optional int32 number_of_usages = 14;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_number_of_usages(), target);
  }

  // optional .ern411.ern.PhysicalReturns physical_returns = 15;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::physical_returns(this), target, stream);
  }

  // repeated .ern411.ern.PriceInformationWithType price_information = 16;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_price_information_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, this->_internal_price_information(i), target, stream);
  }

  // optional .ern411.ern.PromotionalCode promotional_code = 17;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::promotional_code(this), target, stream);
  }

  // optional .ern411.ern.ddex_IsoDate release_display_start_date = 18;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::release_display_start_date(this), target, stream);
  }

  // optional string release_display_start_date_time = 19;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_release_display_start_date_time().data(), static_cast<int>(this->_internal_release_display_start_date_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.DealTerms.release_display_start_date_time");
    target = stream->WriteStringMaybeAliased(
        19, this->_internal_release_display_start_date_time(), target);
  }

  // repeated .ern411.ern.RightsClaimPolicy rights_claim_policy = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_rights_claim_policy_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, this->_internal_rights_claim_policy(i), target, stream);
  }

  // optional .ern411.ern.DealTermsTechnicalInstantiation technical_instantiation = 21;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::technical_instantiation(this), target, stream);
  }

  // repeated .ern411.ern.CurrentTerritoryCode territory_code = 22;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_territory_code_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(22, this->_internal_territory_code(i), target, stream);
  }

  // optional .ern411.ern.ddex_IsoDate track_listing_preview_start_date = 23;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        23, _Internal::track_listing_preview_start_date(this), target, stream);
  }

  // optional string track_listing_preview_start_date_time = 24;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_track_listing_preview_start_date_time().data(), static_cast<int>(this->_internal_track_listing_preview_start_date_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.DealTerms.track_listing_preview_start_date_time");
    target = stream->WriteStringMaybeAliased(
        24, this->_internal_track_listing_preview_start_date_time(), target);
  }

  // repeated .ern411.ern.DiscoverableUseType use_type = 25;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_use_type_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(25, this->_internal_use_type(i), target, stream);
  }

  // repeated .ern411.ern.PeriodWithoutFlags validity_period = 26;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_validity_period_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(26, this->_internal_validity_period(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.DealTerms)
  return target;
}

size_t DealTerms::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.DealTerms)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ern411.ern.CarrierType carrier_type = 1;
  total_size += 1UL * this->_internal_carrier_type_size();
  for (const auto& msg : this->carrier_type_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.CommercialModelType commercial_model_type = 4;
  total_size += 1UL * this->_internal_commercial_model_type_size();
  for (const auto& msg : this->commercial_model_type_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.DSP distribution_channel = 7;
  total_size += 1UL * this->_internal_distribution_channel_size();
  for (const auto& msg : this->distribution_channel_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.DSP excluded_distribution_channel = 8;
  total_size += 1UL * this->_internal_excluded_distribution_channel_size();
  for (const auto& msg : this->excluded_distribution_channel_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.CurrentTerritoryCode excluded_territory_code = 9;
  total_size += 1UL * this->_internal_excluded_territory_code_size();
  for (const auto& msg : this->excluded_territory_code_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.PriceInformationWithType price_information = 16;
  total_size += 2UL * this->_internal_price_information_size();
  for (const auto& msg : this->price_information_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.RightsClaimPolicy rights_claim_policy = 20;
  total_size += 2UL * this->_internal_rights_claim_policy_size();
  for (const auto& msg : this->rights_claim_policy_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.CurrentTerritoryCode territory_code = 22;
  total_size += 2UL * this->_internal_territory_code_size();
  for (const auto& msg : this->territory_code_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.DiscoverableUseType use_type = 25;
  total_size += 2UL * this->_internal_use_type_size();
  for (const auto& msg : this->use_type_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.PeriodWithoutFlags validity_period = 26;
  total_size += 2UL * this->_internal_validity_period_size();
  for (const auto& msg : this->validity_period_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string clip_preview_start_date_time = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_clip_preview_start_date_time());
    }

    // optional string cover_art_preview_start_date_time = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_cover_art_preview_start_date_time());
    }

    // optional string release_display_start_date_time = 19;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_release_display_start_date_time());
    }

    // optional string track_listing_preview_start_date_time = 24;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_track_listing_preview_start_date_time());
    }

    // optional .ern411.ern.ddex_IsoDate clip_preview_start_date = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *clip_preview_start_date_);
    }

    // optional .ern411.ern.ddex_IsoDate cover_art_preview_start_date = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cover_art_preview_start_date_);
    }

    // optional .ern411.ern.DealResourceReferenceList instant_gratification_resource_list = 10;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *instant_gratification_resource_list_);
    }

    // optional .ern411.ern.PhysicalReturns physical_returns = 15;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *physical_returns_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .ern411.ern.PromotionalCode promotional_code = 17;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *promotional_code_);
    }

    // optional .ern411.ern.ddex_IsoDate release_display_start_date = 18;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *release_display_start_date_);
    }

    // optional .ern411.ern.DealTermsTechnicalInstantiation technical_instantiation = 21;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *technical_instantiation_);
    }

    // optional .ern411.ern.ddex_IsoDate track_listing_preview_start_date = 23;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *track_listing_preview_start_date_);
    }

    // optional bool is_pre_order_deal = 11;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

    // optional bool is_promotional = 12;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 1;
    }

    // optional int32 number_of_products_per_carton = 13;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_number_of_products_per_carton());
    }

    // optional int32 number_of_usages = 14;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_number_of_usages());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DealTerms::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.DealTerms)
  GOOGLE_DCHECK_NE(&from, this);
  const DealTerms* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DealTerms>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.DealTerms)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.DealTerms)
    MergeFrom(*source);
  }
}

void DealTerms::MergeFrom(const DealTerms& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.DealTerms)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  carrier_type_.MergeFrom(from.carrier_type_);
  commercial_model_type_.MergeFrom(from.commercial_model_type_);
  distribution_channel_.MergeFrom(from.distribution_channel_);
  excluded_distribution_channel_.MergeFrom(from.excluded_distribution_channel_);
  excluded_territory_code_.MergeFrom(from.excluded_territory_code_);
  price_information_.MergeFrom(from.price_information_);
  rights_claim_policy_.MergeFrom(from.rights_claim_policy_);
  territory_code_.MergeFrom(from.territory_code_);
  use_type_.MergeFrom(from.use_type_);
  validity_period_.MergeFrom(from.validity_period_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_clip_preview_start_date_time(from._internal_clip_preview_start_date_time());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_cover_art_preview_start_date_time(from._internal_cover_art_preview_start_date_time());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_release_display_start_date_time(from._internal_release_display_start_date_time());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_track_listing_preview_start_date_time(from._internal_track_listing_preview_start_date_time());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_clip_preview_start_date()->::ern411::ern::ddex_IsoDate::MergeFrom(from._internal_clip_preview_start_date());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_cover_art_preview_start_date()->::ern411::ern::ddex_IsoDate::MergeFrom(from._internal_cover_art_preview_start_date());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_instant_gratification_resource_list()->::ern411::ern::DealResourceReferenceList::MergeFrom(from._internal_instant_gratification_resource_list());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_physical_returns()->::ern411::ern::PhysicalReturns::MergeFrom(from._internal_physical_returns());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_promotional_code()->::ern411::ern::PromotionalCode::MergeFrom(from._internal_promotional_code());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_release_display_start_date()->::ern411::ern::ddex_IsoDate::MergeFrom(from._internal_release_display_start_date());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_technical_instantiation()->::ern411::ern::DealTermsTechnicalInstantiation::MergeFrom(from._internal_technical_instantiation());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_mutable_track_listing_preview_start_date()->::ern411::ern::ddex_IsoDate::MergeFrom(from._internal_track_listing_preview_start_date());
    }
    if (cached_has_bits & 0x00001000u) {
      is_pre_order_deal_ = from.is_pre_order_deal_;
    }
    if (cached_has_bits & 0x00002000u) {
      is_promotional_ = from.is_promotional_;
    }
    if (cached_has_bits & 0x00004000u) {
      number_of_products_per_carton_ = from.number_of_products_per_carton_;
    }
    if (cached_has_bits & 0x00008000u) {
      number_of_usages_ = from.number_of_usages_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DealTerms::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.DealTerms)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DealTerms::CopyFrom(const DealTerms& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.DealTerms)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DealTerms::IsInitialized() const {
  return true;
}

void DealTerms::InternalSwap(DealTerms* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  carrier_type_.InternalSwap(&other->carrier_type_);
  commercial_model_type_.InternalSwap(&other->commercial_model_type_);
  distribution_channel_.InternalSwap(&other->distribution_channel_);
  excluded_distribution_channel_.InternalSwap(&other->excluded_distribution_channel_);
  excluded_territory_code_.InternalSwap(&other->excluded_territory_code_);
  price_information_.InternalSwap(&other->price_information_);
  rights_claim_policy_.InternalSwap(&other->rights_claim_policy_);
  territory_code_.InternalSwap(&other->territory_code_);
  use_type_.InternalSwap(&other->use_type_);
  validity_period_.InternalSwap(&other->validity_period_);
  clip_preview_start_date_time_.Swap(&other->clip_preview_start_date_time_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  cover_art_preview_start_date_time_.Swap(&other->cover_art_preview_start_date_time_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  release_display_start_date_time_.Swap(&other->release_display_start_date_time_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  track_listing_preview_start_date_time_.Swap(&other->track_listing_preview_start_date_time_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DealTerms, number_of_usages_)
      + sizeof(DealTerms::number_of_usages_)
      - PROTOBUF_FIELD_OFFSET(DealTerms, clip_preview_start_date_)>(
          reinterpret_cast<char*>(&clip_preview_start_date_),
          reinterpret_cast<char*>(&other->clip_preview_start_date_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DealTerms::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DealTermsTechnicalInstantiation::InitAsDefaultInstance() {
  ::ern411::ern::_DealTermsTechnicalInstantiation_default_instance_._instance.get_mutable()->bit_rate_ = const_cast< ::ern411::ern::BitRate*>(
      ::ern411::ern::BitRate::internal_default_instance());
  ::ern411::ern::_DealTermsTechnicalInstantiation_default_instance_._instance.get_mutable()->coding_type_ = const_cast< ::ern411::avs::CodingType*>(
      ::ern411::avs::CodingType::internal_default_instance());
  ::ern411::ern::_DealTermsTechnicalInstantiation_default_instance_._instance.get_mutable()->video_definition_type_ = const_cast< ::ern411::avs::VideoDefinitionType*>(
      ::ern411::avs::VideoDefinitionType::internal_default_instance());
}
class DealTermsTechnicalInstantiation::_Internal {
 public:
  using HasBits = decltype(std::declval<DealTermsTechnicalInstantiation>()._has_bits_);
  static const ::ern411::ern::BitRate& bit_rate(const DealTermsTechnicalInstantiation* msg);
  static void set_has_bit_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ern411::avs::CodingType& coding_type(const DealTermsTechnicalInstantiation* msg);
  static void set_has_coding_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::ern411::avs::VideoDefinitionType& video_definition_type(const DealTermsTechnicalInstantiation* msg);
  static void set_has_video_definition_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::ern411::ern::BitRate&
DealTermsTechnicalInstantiation::_Internal::bit_rate(const DealTermsTechnicalInstantiation* msg) {
  return *msg->bit_rate_;
}
const ::ern411::avs::CodingType&
DealTermsTechnicalInstantiation::_Internal::coding_type(const DealTermsTechnicalInstantiation* msg) {
  return *msg->coding_type_;
}
const ::ern411::avs::VideoDefinitionType&
DealTermsTechnicalInstantiation::_Internal::video_definition_type(const DealTermsTechnicalInstantiation* msg) {
  return *msg->video_definition_type_;
}
void DealTermsTechnicalInstantiation::clear_coding_type() {
  if (coding_type_ != nullptr) coding_type_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void DealTermsTechnicalInstantiation::clear_video_definition_type() {
  if (video_definition_type_ != nullptr) video_definition_type_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
DealTermsTechnicalInstantiation::DealTermsTechnicalInstantiation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.DealTermsTechnicalInstantiation)
}
DealTermsTechnicalInstantiation::DealTermsTechnicalInstantiation(const DealTermsTechnicalInstantiation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_bit_rate()) {
    bit_rate_ = new ::ern411::ern::BitRate(*from.bit_rate_);
  } else {
    bit_rate_ = nullptr;
  }
  if (from._internal_has_coding_type()) {
    coding_type_ = new ::ern411::avs::CodingType(*from.coding_type_);
  } else {
    coding_type_ = nullptr;
  }
  if (from._internal_has_video_definition_type()) {
    video_definition_type_ = new ::ern411::avs::VideoDefinitionType(*from.video_definition_type_);
  } else {
    video_definition_type_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ern411.ern.DealTermsTechnicalInstantiation)
}

void DealTermsTechnicalInstantiation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DealTermsTechnicalInstantiation_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  ::memset(&bit_rate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&video_definition_type_) -
      reinterpret_cast<char*>(&bit_rate_)) + sizeof(video_definition_type_));
}

DealTermsTechnicalInstantiation::~DealTermsTechnicalInstantiation() {
  // @@protoc_insertion_point(destructor:ern411.ern.DealTermsTechnicalInstantiation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DealTermsTechnicalInstantiation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete bit_rate_;
  if (this != internal_default_instance()) delete coding_type_;
  if (this != internal_default_instance()) delete video_definition_type_;
}

void DealTermsTechnicalInstantiation::ArenaDtor(void* object) {
  DealTermsTechnicalInstantiation* _this = reinterpret_cast< DealTermsTechnicalInstantiation* >(object);
  (void)_this;
}
void DealTermsTechnicalInstantiation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DealTermsTechnicalInstantiation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DealTermsTechnicalInstantiation& DealTermsTechnicalInstantiation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DealTermsTechnicalInstantiation_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void DealTermsTechnicalInstantiation::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.DealTermsTechnicalInstantiation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(bit_rate_ != nullptr);
      bit_rate_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(coding_type_ != nullptr);
      coding_type_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(video_definition_type_ != nullptr);
      video_definition_type_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DealTermsTechnicalInstantiation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ern411.ern.BitRate bit_rate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_bit_rate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.avs.CodingType coding_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_coding_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.avs.VideoDefinitionType video_definition_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_video_definition_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DealTermsTechnicalInstantiation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.DealTermsTechnicalInstantiation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ern411.ern.BitRate bit_rate = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::bit_rate(this), target, stream);
  }

  // optional .ern411.avs.CodingType coding_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::coding_type(this), target, stream);
  }

  // optional .ern411.avs.VideoDefinitionType video_definition_type = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::video_definition_type(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.DealTermsTechnicalInstantiation)
  return target;
}

size_t DealTermsTechnicalInstantiation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.DealTermsTechnicalInstantiation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .ern411.ern.BitRate bit_rate = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *bit_rate_);
    }

    // optional .ern411.avs.CodingType coding_type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *coding_type_);
    }

    // optional .ern411.avs.VideoDefinitionType video_definition_type = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *video_definition_type_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DealTermsTechnicalInstantiation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.DealTermsTechnicalInstantiation)
  GOOGLE_DCHECK_NE(&from, this);
  const DealTermsTechnicalInstantiation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DealTermsTechnicalInstantiation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.DealTermsTechnicalInstantiation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.DealTermsTechnicalInstantiation)
    MergeFrom(*source);
  }
}

void DealTermsTechnicalInstantiation::MergeFrom(const DealTermsTechnicalInstantiation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.DealTermsTechnicalInstantiation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_bit_rate()->::ern411::ern::BitRate::MergeFrom(from._internal_bit_rate());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_coding_type()->::ern411::avs::CodingType::MergeFrom(from._internal_coding_type());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_video_definition_type()->::ern411::avs::VideoDefinitionType::MergeFrom(from._internal_video_definition_type());
    }
  }
}

void DealTermsTechnicalInstantiation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.DealTermsTechnicalInstantiation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DealTermsTechnicalInstantiation::CopyFrom(const DealTermsTechnicalInstantiation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.DealTermsTechnicalInstantiation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DealTermsTechnicalInstantiation::IsInitialized() const {
  return true;
}

void DealTermsTechnicalInstantiation::InternalSwap(DealTermsTechnicalInstantiation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DealTermsTechnicalInstantiation, video_definition_type_)
      + sizeof(DealTermsTechnicalInstantiation::video_definition_type_)
      - PROTOBUF_FIELD_OFFSET(DealTermsTechnicalInstantiation, bit_rate_)>(
          reinterpret_cast<char*>(&bit_rate_),
          reinterpret_cast<char*>(&other->bit_rate_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DealTermsTechnicalInstantiation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Deity::InitAsDefaultInstance() {
  ::ern411::ern::_Deity_default_instance_._instance.get_mutable()->applicable_territory_code_ = const_cast< ::ern411::avs::CurrentTerritoryCode*>(
      ::ern411::avs::CurrentTerritoryCode::internal_default_instance());
}
class Deity::_Internal {
 public:
  using HasBits = decltype(std::declval<Deity>()._has_bits_);
  static const ::ern411::avs::CurrentTerritoryCode& applicable_territory_code(const Deity* msg);
  static void set_has_applicable_territory_code(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_default(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ext_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::ern411::avs::CurrentTerritoryCode&
Deity::_Internal::applicable_territory_code(const Deity* msg) {
  return *msg->applicable_territory_code_;
}
void Deity::clear_applicable_territory_code() {
  if (applicable_territory_code_ != nullptr) applicable_territory_code_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
Deity::Deity(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.Deity)
}
Deity::Deity(const Deity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ext_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ext_value()) {
    ext_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ext_value(),
      GetArena());
  }
  if (from._internal_has_applicable_territory_code()) {
    applicable_territory_code_ = new ::ern411::avs::CurrentTerritoryCode(*from.applicable_territory_code_);
  } else {
    applicable_territory_code_ = nullptr;
  }
  is_default_ = from.is_default_;
  // @@protoc_insertion_point(copy_constructor:ern411.ern.Deity)
}

void Deity::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Deity_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  ext_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&applicable_territory_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_default_) -
      reinterpret_cast<char*>(&applicable_territory_code_)) + sizeof(is_default_));
}

Deity::~Deity() {
  // @@protoc_insertion_point(destructor:ern411.ern.Deity)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Deity::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  ext_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete applicable_territory_code_;
}

void Deity::ArenaDtor(void* object) {
  Deity* _this = reinterpret_cast< Deity* >(object);
  (void)_this;
}
void Deity::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Deity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Deity& Deity::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Deity_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void Deity::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.Deity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ext_value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(applicable_territory_code_ != nullptr);
      applicable_territory_code_->Clear();
    }
  }
  is_default_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Deity::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ern411.avs.CurrentTerritoryCode applicable_territory_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_applicable_territory_code(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_default = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_is_default(&has_bits);
          is_default_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string ext_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_ext_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.Deity.ext_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Deity::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.Deity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ern411.avs.CurrentTerritoryCode applicable_territory_code = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::applicable_territory_code(this), target, stream);
  }

  // optional bool is_default = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_default(), target);
  }

  // optional string ext_value = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ext_value().data(), static_cast<int>(this->_internal_ext_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.Deity.ext_value");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_ext_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.Deity)
  return target;
}

size_t Deity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.Deity)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string ext_value = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ext_value());
    }

    // optional .ern411.avs.CurrentTerritoryCode applicable_territory_code = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *applicable_territory_code_);
    }

    // optional bool is_default = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Deity::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.Deity)
  GOOGLE_DCHECK_NE(&from, this);
  const Deity* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Deity>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.Deity)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.Deity)
    MergeFrom(*source);
  }
}

void Deity::MergeFrom(const Deity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.Deity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_ext_value(from._internal_ext_value());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_applicable_territory_code()->::ern411::avs::CurrentTerritoryCode::MergeFrom(from._internal_applicable_territory_code());
    }
    if (cached_has_bits & 0x00000004u) {
      is_default_ = from.is_default_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Deity::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.Deity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Deity::CopyFrom(const Deity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.Deity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Deity::IsInitialized() const {
  return true;
}

void Deity::InternalSwap(Deity* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ext_value_.Swap(&other->ext_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Deity, is_default_)
      + sizeof(Deity::is_default_)
      - PROTOBUF_FIELD_OFFSET(Deity, applicable_territory_code_)>(
          reinterpret_cast<char*>(&applicable_territory_code_),
          reinterpret_cast<char*>(&other->applicable_territory_code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Deity::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DelegatedUsageRights::InitAsDefaultInstance() {
  ::ern411::ern::_DelegatedUsageRights_default_instance_._instance.get_mutable()->period_of_rights_delegation_ = const_cast< ::ern411::ern::Period*>(
      ::ern411::ern::Period::internal_default_instance());
}
class DelegatedUsageRights::_Internal {
 public:
  using HasBits = decltype(std::declval<DelegatedUsageRights>()._has_bits_);
  static const ::ern411::ern::Period& period_of_rights_delegation(const DelegatedUsageRights* msg);
  static void set_has_period_of_rights_delegation(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::ern411::ern::Period&
DelegatedUsageRights::_Internal::period_of_rights_delegation(const DelegatedUsageRights* msg) {
  return *msg->period_of_rights_delegation_;
}
DelegatedUsageRights::DelegatedUsageRights(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  territory_of_rights_delegation_(arena),
  use_type_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.DelegatedUsageRights)
}
DelegatedUsageRights::DelegatedUsageRights(const DelegatedUsageRights& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      territory_of_rights_delegation_(from.territory_of_rights_delegation_),
      use_type_(from.use_type_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_period_of_rights_delegation()) {
    period_of_rights_delegation_ = new ::ern411::ern::Period(*from.period_of_rights_delegation_);
  } else {
    period_of_rights_delegation_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ern411.ern.DelegatedUsageRights)
}

void DelegatedUsageRights::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DelegatedUsageRights_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  period_of_rights_delegation_ = nullptr;
}

DelegatedUsageRights::~DelegatedUsageRights() {
  // @@protoc_insertion_point(destructor:ern411.ern.DelegatedUsageRights)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DelegatedUsageRights::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete period_of_rights_delegation_;
}

void DelegatedUsageRights::ArenaDtor(void* object) {
  DelegatedUsageRights* _this = reinterpret_cast< DelegatedUsageRights* >(object);
  (void)_this;
}
void DelegatedUsageRights::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DelegatedUsageRights::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DelegatedUsageRights& DelegatedUsageRights::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DelegatedUsageRights_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void DelegatedUsageRights::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.DelegatedUsageRights)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  territory_of_rights_delegation_.Clear();
  use_type_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(period_of_rights_delegation_ != nullptr);
    period_of_rights_delegation_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DelegatedUsageRights::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ern411.ern.Period period_of_rights_delegation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_period_of_rights_delegation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.CurrentTerritoryCode territory_of_rights_delegation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_territory_of_rights_delegation(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.UseType use_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_use_type(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DelegatedUsageRights::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.DelegatedUsageRights)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ern411.ern.Period period_of_rights_delegation = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::period_of_rights_delegation(this), target, stream);
  }

  // repeated .ern411.ern.CurrentTerritoryCode territory_of_rights_delegation = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_territory_of_rights_delegation_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_territory_of_rights_delegation(i), target, stream);
  }

  // repeated .ern411.ern.UseType use_type = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_use_type_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_use_type(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.DelegatedUsageRights)
  return target;
}

size_t DelegatedUsageRights::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.DelegatedUsageRights)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ern411.ern.CurrentTerritoryCode territory_of_rights_delegation = 2;
  total_size += 1UL * this->_internal_territory_of_rights_delegation_size();
  for (const auto& msg : this->territory_of_rights_delegation_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.UseType use_type = 3;
  total_size += 1UL * this->_internal_use_type_size();
  for (const auto& msg : this->use_type_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .ern411.ern.Period period_of_rights_delegation = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *period_of_rights_delegation_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DelegatedUsageRights::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.DelegatedUsageRights)
  GOOGLE_DCHECK_NE(&from, this);
  const DelegatedUsageRights* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DelegatedUsageRights>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.DelegatedUsageRights)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.DelegatedUsageRights)
    MergeFrom(*source);
  }
}

void DelegatedUsageRights::MergeFrom(const DelegatedUsageRights& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.DelegatedUsageRights)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  territory_of_rights_delegation_.MergeFrom(from.territory_of_rights_delegation_);
  use_type_.MergeFrom(from.use_type_);
  if (from._internal_has_period_of_rights_delegation()) {
    _internal_mutable_period_of_rights_delegation()->::ern411::ern::Period::MergeFrom(from._internal_period_of_rights_delegation());
  }
}

void DelegatedUsageRights::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.DelegatedUsageRights)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DelegatedUsageRights::CopyFrom(const DelegatedUsageRights& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.DelegatedUsageRights)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelegatedUsageRights::IsInitialized() const {
  return true;
}

void DelegatedUsageRights::InternalSwap(DelegatedUsageRights* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  territory_of_rights_delegation_.InternalSwap(&other->territory_of_rights_delegation_);
  use_type_.InternalSwap(&other->use_type_);
  swap(period_of_rights_delegation_, other->period_of_rights_delegation_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DelegatedUsageRights::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DescriptionWithTerritory::InitAsDefaultInstance() {
  ::ern411::ern::_DescriptionWithTerritory_default_instance_._instance.get_mutable()->applicable_territory_code_ = const_cast< ::ern411::avs::CurrentTerritoryCode*>(
      ::ern411::avs::CurrentTerritoryCode::internal_default_instance());
}
class DescriptionWithTerritory::_Internal {
 public:
  using HasBits = decltype(std::declval<DescriptionWithTerritory>()._has_bits_);
  static const ::ern411::avs::CurrentTerritoryCode& applicable_territory_code(const DescriptionWithTerritory* msg);
  static void set_has_applicable_territory_code(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_default(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_language_and_script_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ext_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::ern411::avs::CurrentTerritoryCode&
DescriptionWithTerritory::_Internal::applicable_territory_code(const DescriptionWithTerritory* msg) {
  return *msg->applicable_territory_code_;
}
void DescriptionWithTerritory::clear_applicable_territory_code() {
  if (applicable_territory_code_ != nullptr) applicable_territory_code_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
DescriptionWithTerritory::DescriptionWithTerritory(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.DescriptionWithTerritory)
}
DescriptionWithTerritory::DescriptionWithTerritory(const DescriptionWithTerritory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  language_and_script_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_language_and_script_code()) {
    language_and_script_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_language_and_script_code(),
      GetArena());
  }
  ext_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ext_value()) {
    ext_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ext_value(),
      GetArena());
  }
  if (from._internal_has_applicable_territory_code()) {
    applicable_territory_code_ = new ::ern411::avs::CurrentTerritoryCode(*from.applicable_territory_code_);
  } else {
    applicable_territory_code_ = nullptr;
  }
  is_default_ = from.is_default_;
  // @@protoc_insertion_point(copy_constructor:ern411.ern.DescriptionWithTerritory)
}

void DescriptionWithTerritory::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DescriptionWithTerritory_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  language_and_script_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ext_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&applicable_territory_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_default_) -
      reinterpret_cast<char*>(&applicable_territory_code_)) + sizeof(is_default_));
}

DescriptionWithTerritory::~DescriptionWithTerritory() {
  // @@protoc_insertion_point(destructor:ern411.ern.DescriptionWithTerritory)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DescriptionWithTerritory::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  language_and_script_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ext_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete applicable_territory_code_;
}

void DescriptionWithTerritory::ArenaDtor(void* object) {
  DescriptionWithTerritory* _this = reinterpret_cast< DescriptionWithTerritory* >(object);
  (void)_this;
}
void DescriptionWithTerritory::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DescriptionWithTerritory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DescriptionWithTerritory& DescriptionWithTerritory::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DescriptionWithTerritory_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void DescriptionWithTerritory::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.DescriptionWithTerritory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      language_and_script_code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      ext_value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(applicable_territory_code_ != nullptr);
      applicable_territory_code_->Clear();
    }
  }
  is_default_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DescriptionWithTerritory::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ern411.avs.CurrentTerritoryCode applicable_territory_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_applicable_territory_code(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_default = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_is_default(&has_bits);
          is_default_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string language_and_script_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_language_and_script_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.DescriptionWithTerritory.language_and_script_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string ext_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_ext_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.DescriptionWithTerritory.ext_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DescriptionWithTerritory::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.DescriptionWithTerritory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ern411.avs.CurrentTerritoryCode applicable_territory_code = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::applicable_territory_code(this), target, stream);
  }

  // optional bool is_default = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_default(), target);
  }

  // optional string language_and_script_code = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_language_and_script_code().data(), static_cast<int>(this->_internal_language_and_script_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.DescriptionWithTerritory.language_and_script_code");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_language_and_script_code(), target);
  }

  // optional string ext_value = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ext_value().data(), static_cast<int>(this->_internal_ext_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.DescriptionWithTerritory.ext_value");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_ext_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.DescriptionWithTerritory)
  return target;
}

size_t DescriptionWithTerritory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.DescriptionWithTerritory)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string language_and_script_code = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_language_and_script_code());
    }

    // optional string ext_value = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ext_value());
    }

    // optional .ern411.avs.CurrentTerritoryCode applicable_territory_code = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *applicable_territory_code_);
    }

    // optional bool is_default = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DescriptionWithTerritory::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.DescriptionWithTerritory)
  GOOGLE_DCHECK_NE(&from, this);
  const DescriptionWithTerritory* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DescriptionWithTerritory>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.DescriptionWithTerritory)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.DescriptionWithTerritory)
    MergeFrom(*source);
  }
}

void DescriptionWithTerritory::MergeFrom(const DescriptionWithTerritory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.DescriptionWithTerritory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_language_and_script_code(from._internal_language_and_script_code());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_ext_value(from._internal_ext_value());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_applicable_territory_code()->::ern411::avs::CurrentTerritoryCode::MergeFrom(from._internal_applicable_territory_code());
    }
    if (cached_has_bits & 0x00000008u) {
      is_default_ = from.is_default_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DescriptionWithTerritory::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.DescriptionWithTerritory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DescriptionWithTerritory::CopyFrom(const DescriptionWithTerritory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.DescriptionWithTerritory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DescriptionWithTerritory::IsInitialized() const {
  return true;
}

void DescriptionWithTerritory::InternalSwap(DescriptionWithTerritory* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  language_and_script_code_.Swap(&other->language_and_script_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ext_value_.Swap(&other->ext_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DescriptionWithTerritory, is_default_)
      + sizeof(DescriptionWithTerritory::is_default_)
      - PROTOBUF_FIELD_OFFSET(DescriptionWithTerritory, applicable_territory_code_)>(
          reinterpret_cast<char*>(&applicable_territory_code_),
          reinterpret_cast<char*>(&other->applicable_territory_code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DescriptionWithTerritory::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DetailedCue::InitAsDefaultInstance() {
  ::ern411::ern::_DetailedCue_default_instance_._instance.get_mutable()->cue_origin_ = const_cast< ::ern411::ern::CueOrigin*>(
      ::ern411::ern::CueOrigin::internal_default_instance());
  ::ern411::ern::_DetailedCue_default_instance_._instance.get_mutable()->cue_theme_type_ = const_cast< ::ern411::ern::CueThemeType*>(
      ::ern411::ern::CueThemeType::internal_default_instance());
  ::ern411::ern::_DetailedCue_default_instance_._instance.get_mutable()->cue_use_type_ = const_cast< ::ern411::ern::CueUseType*>(
      ::ern411::ern::CueUseType::internal_default_instance());
  ::ern411::ern::_DetailedCue_default_instance_._instance.get_mutable()->cue_visual_perception_type_ = const_cast< ::ern411::ern::CueVisualPerceptionType*>(
      ::ern411::ern::CueVisualPerceptionType::internal_default_instance());
  ::ern411::ern::_DetailedCue_default_instance_._instance.get_mutable()->cue_vocal_type_ = const_cast< ::ern411::ern::CueVocalType*>(
      ::ern411::ern::CueVocalType::internal_default_instance());
  ::ern411::ern::_DetailedCue_default_instance_._instance.get_mutable()->resource_id_ = const_cast< ::ern411::ern::ResourceId*>(
      ::ern411::ern::ResourceId::internal_default_instance());
  ::ern411::ern::_DetailedCue_default_instance_._instance.get_mutable()->work_id_ = const_cast< ::ern411::ern::MusicalWorkId*>(
      ::ern411::ern::MusicalWorkId::internal_default_instance());
}
class DetailedCue::_Internal {
 public:
  using HasBits = decltype(std::declval<DetailedCue>()._has_bits_);
  static const ::ern411::ern::CueOrigin& cue_origin(const DetailedCue* msg);
  static void set_has_cue_origin(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::ern411::ern::CueThemeType& cue_theme_type(const DetailedCue* msg);
  static void set_has_cue_theme_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::ern411::ern::CueUseType& cue_use_type(const DetailedCue* msg);
  static void set_has_cue_use_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::ern411::ern::CueVisualPerceptionType& cue_visual_perception_type(const DetailedCue* msg);
  static void set_has_cue_visual_perception_type(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::ern411::ern::CueVocalType& cue_vocal_type(const DetailedCue* msg);
  static void set_has_cue_vocal_type(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_end_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_has_musical_content(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_is_dance(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::ern411::ern::ResourceId& resource_id(const DetailedCue* msg);
  static void set_has_resource_id(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_start_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::ern411::ern::MusicalWorkId& work_id(const DetailedCue* msg);
  static void set_has_work_id(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

const ::ern411::ern::CueOrigin&
DetailedCue::_Internal::cue_origin(const DetailedCue* msg) {
  return *msg->cue_origin_;
}
const ::ern411::ern::CueThemeType&
DetailedCue::_Internal::cue_theme_type(const DetailedCue* msg) {
  return *msg->cue_theme_type_;
}
const ::ern411::ern::CueUseType&
DetailedCue::_Internal::cue_use_type(const DetailedCue* msg) {
  return *msg->cue_use_type_;
}
const ::ern411::ern::CueVisualPerceptionType&
DetailedCue::_Internal::cue_visual_perception_type(const DetailedCue* msg) {
  return *msg->cue_visual_perception_type_;
}
const ::ern411::ern::CueVocalType&
DetailedCue::_Internal::cue_vocal_type(const DetailedCue* msg) {
  return *msg->cue_vocal_type_;
}
const ::ern411::ern::ResourceId&
DetailedCue::_Internal::resource_id(const DetailedCue* msg) {
  return *msg->resource_id_;
}
const ::ern411::ern::MusicalWorkId&
DetailedCue::_Internal::work_id(const DetailedCue* msg) {
  return *msg->work_id_;
}
DetailedCue::DetailedCue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  additional_title_(arena),
  c_line_(arena),
  contributor_(arena),
  display_title_(arena),
  display_title_text_(arena),
  p_line_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.DetailedCue)
}
DetailedCue::DetailedCue(const DetailedCue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      additional_title_(from.additional_title_),
      c_line_(from.c_line_),
      contributor_(from.contributor_),
      display_title_(from.display_title_),
      display_title_text_(from.display_title_text_),
      p_line_(from.p_line_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  duration_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_duration()) {
    duration_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_duration(),
      GetArena());
  }
  end_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_end_time()) {
    end_time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_end_time(),
      GetArena());
  }
  start_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_start_time()) {
    start_time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_start_time(),
      GetArena());
  }
  if (from._internal_has_cue_origin()) {
    cue_origin_ = new ::ern411::ern::CueOrigin(*from.cue_origin_);
  } else {
    cue_origin_ = nullptr;
  }
  if (from._internal_has_cue_theme_type()) {
    cue_theme_type_ = new ::ern411::ern::CueThemeType(*from.cue_theme_type_);
  } else {
    cue_theme_type_ = nullptr;
  }
  if (from._internal_has_cue_use_type()) {
    cue_use_type_ = new ::ern411::ern::CueUseType(*from.cue_use_type_);
  } else {
    cue_use_type_ = nullptr;
  }
  if (from._internal_has_cue_visual_perception_type()) {
    cue_visual_perception_type_ = new ::ern411::ern::CueVisualPerceptionType(*from.cue_visual_perception_type_);
  } else {
    cue_visual_perception_type_ = nullptr;
  }
  if (from._internal_has_cue_vocal_type()) {
    cue_vocal_type_ = new ::ern411::ern::CueVocalType(*from.cue_vocal_type_);
  } else {
    cue_vocal_type_ = nullptr;
  }
  if (from._internal_has_resource_id()) {
    resource_id_ = new ::ern411::ern::ResourceId(*from.resource_id_);
  } else {
    resource_id_ = nullptr;
  }
  if (from._internal_has_work_id()) {
    work_id_ = new ::ern411::ern::MusicalWorkId(*from.work_id_);
  } else {
    work_id_ = nullptr;
  }
  ::memcpy(&has_musical_content_, &from.has_musical_content_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_dance_) -
    reinterpret_cast<char*>(&has_musical_content_)) + sizeof(is_dance_));
  // @@protoc_insertion_point(copy_constructor:ern411.ern.DetailedCue)
}

void DetailedCue::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DetailedCue_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  duration_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  end_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  start_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&cue_origin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_dance_) -
      reinterpret_cast<char*>(&cue_origin_)) + sizeof(is_dance_));
}

DetailedCue::~DetailedCue() {
  // @@protoc_insertion_point(destructor:ern411.ern.DetailedCue)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DetailedCue::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  duration_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  end_time_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  start_time_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete cue_origin_;
  if (this != internal_default_instance()) delete cue_theme_type_;
  if (this != internal_default_instance()) delete cue_use_type_;
  if (this != internal_default_instance()) delete cue_visual_perception_type_;
  if (this != internal_default_instance()) delete cue_vocal_type_;
  if (this != internal_default_instance()) delete resource_id_;
  if (this != internal_default_instance()) delete work_id_;
}

void DetailedCue::ArenaDtor(void* object) {
  DetailedCue* _this = reinterpret_cast< DetailedCue* >(object);
  (void)_this;
}
void DetailedCue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DetailedCue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DetailedCue& DetailedCue::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DetailedCue_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void DetailedCue::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.DetailedCue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  additional_title_.Clear();
  c_line_.Clear();
  contributor_.Clear();
  display_title_.Clear();
  display_title_text_.Clear();
  p_line_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      duration_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      end_time_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      start_time_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(cue_origin_ != nullptr);
      cue_origin_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(cue_theme_type_ != nullptr);
      cue_theme_type_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(cue_use_type_ != nullptr);
      cue_use_type_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(cue_visual_perception_type_ != nullptr);
      cue_visual_perception_type_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(cue_vocal_type_ != nullptr);
      cue_vocal_type_->Clear();
    }
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(resource_id_ != nullptr);
      resource_id_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(work_id_ != nullptr);
      work_id_->Clear();
    }
  }
  ::memset(&has_musical_content_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_dance_) -
      reinterpret_cast<char*>(&has_musical_content_)) + sizeof(is_dance_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DetailedCue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ern411.ern.AdditionalTitle additional_title = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_additional_title(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.CLine c_line = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_c_line(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.Contributor contributor = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_contributor(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .ern411.ern.CueOrigin cue_origin = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_cue_origin(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.ern.CueThemeType cue_theme_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_cue_theme_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.ern.CueUseType cue_use_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_cue_use_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.ern.CueVisualPerceptionType cue_visual_perception_type = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_cue_visual_perception_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.ern.CueVocalType cue_vocal_type = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_cue_vocal_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.DisplayTitle display_title = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_display_title(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.DisplayTitleText display_title_text = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_display_title_text(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string duration = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_duration();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.DetailedCue.duration");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string end_time = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_end_time();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.DetailedCue.end_time");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool has_musical_content = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_has_musical_content(&has_bits);
          has_musical_content_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_dance = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_is_dance(&has_bits);
          is_dance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.PLine p_line = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_p_line(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .ern411.ern.ResourceId resource_id = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_resource_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string start_time = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          auto str = _internal_mutable_start_time();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.DetailedCue.start_time");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.ern.MusicalWorkId work_id = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_work_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DetailedCue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.DetailedCue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ern411.ern.AdditionalTitle additional_title = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_additional_title_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_additional_title(i), target, stream);
  }

  // repeated .ern411.ern.CLine c_line = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_c_line_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_c_line(i), target, stream);
  }

  // repeated .ern411.ern.Contributor contributor = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_contributor_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_contributor(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional .ern411.ern.CueOrigin cue_origin = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::cue_origin(this), target, stream);
  }

  // optional .ern411.ern.CueThemeType cue_theme_type = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::cue_theme_type(this), target, stream);
  }

  // optional .ern411.ern.CueUseType cue_use_type = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::cue_use_type(this), target, stream);
  }

  // optional .ern411.ern.CueVisualPerceptionType cue_visual_perception_type = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::cue_visual_perception_type(this), target, stream);
  }

  // optional .ern411.ern.CueVocalType cue_vocal_type = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::cue_vocal_type(this), target, stream);
  }

  // repeated .ern411.ern.DisplayTitle display_title = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_display_title_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_display_title(i), target, stream);
  }

  // repeated .ern411.ern.DisplayTitleText display_title_text = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_display_title_text_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_display_title_text(i), target, stream);
  }

  // optional string duration = 11;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_duration().data(), static_cast<int>(this->_internal_duration().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.DetailedCue.duration");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_duration(), target);
  }

  // optional string end_time = 12;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_end_time().data(), static_cast<int>(this->_internal_end_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.DetailedCue.end_time");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_end_time(), target);
  }

  // optional bool has_musical_content = 13;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_has_musical_content(), target);
  }

  // optional bool is_dance = 14;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_is_dance(), target);
  }

  // repeated .ern411.ern.PLine p_line = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_p_line_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, this->_internal_p_line(i), target, stream);
  }

  // optional .ern411.ern.ResourceId resource_id = 16;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::resource_id(this), target, stream);
  }

  // optional string start_time = 17;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_start_time().data(), static_cast<int>(this->_internal_start_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.DetailedCue.start_time");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_start_time(), target);
  }

  // optional .ern411.ern.MusicalWorkId work_id = 18;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::work_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.DetailedCue)
  return target;
}

size_t DetailedCue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.DetailedCue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ern411.ern.AdditionalTitle additional_title = 1;
  total_size += 1UL * this->_internal_additional_title_size();
  for (const auto& msg : this->additional_title_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.CLine c_line = 2;
  total_size += 1UL * this->_internal_c_line_size();
  for (const auto& msg : this->c_line_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.Contributor contributor = 3;
  total_size += 1UL * this->_internal_contributor_size();
  for (const auto& msg : this->contributor_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.DisplayTitle display_title = 9;
  total_size += 1UL * this->_internal_display_title_size();
  for (const auto& msg : this->display_title_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.DisplayTitleText display_title_text = 10;
  total_size += 1UL * this->_internal_display_title_text_size();
  for (const auto& msg : this->display_title_text_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.PLine p_line = 15;
  total_size += 1UL * this->_internal_p_line_size();
  for (const auto& msg : this->p_line_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string duration = 11;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_duration());
    }

    // optional string end_time = 12;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_end_time());
    }

    // optional string start_time = 17;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_start_time());
    }

    // optional .ern411.ern.CueOrigin cue_origin = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cue_origin_);
    }

    // optional .ern411.ern.CueThemeType cue_theme_type = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cue_theme_type_);
    }

    // optional .ern411.ern.CueUseType cue_use_type = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cue_use_type_);
    }

    // optional .ern411.ern.CueVisualPerceptionType cue_visual_perception_type = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cue_visual_perception_type_);
    }

    // optional .ern411.ern.CueVocalType cue_vocal_type = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cue_vocal_type_);
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional .ern411.ern.ResourceId resource_id = 16;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *resource_id_);
    }

    // optional .ern411.ern.MusicalWorkId work_id = 18;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *work_id_);
    }

    // optional bool has_musical_content = 13;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool is_dance = 14;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DetailedCue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.DetailedCue)
  GOOGLE_DCHECK_NE(&from, this);
  const DetailedCue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DetailedCue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.DetailedCue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.DetailedCue)
    MergeFrom(*source);
  }
}

void DetailedCue::MergeFrom(const DetailedCue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.DetailedCue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  additional_title_.MergeFrom(from.additional_title_);
  c_line_.MergeFrom(from.c_line_);
  contributor_.MergeFrom(from.contributor_);
  display_title_.MergeFrom(from.display_title_);
  display_title_text_.MergeFrom(from.display_title_text_);
  p_line_.MergeFrom(from.p_line_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_duration(from._internal_duration());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_end_time(from._internal_end_time());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_start_time(from._internal_start_time());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_cue_origin()->::ern411::ern::CueOrigin::MergeFrom(from._internal_cue_origin());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_cue_theme_type()->::ern411::ern::CueThemeType::MergeFrom(from._internal_cue_theme_type());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_cue_use_type()->::ern411::ern::CueUseType::MergeFrom(from._internal_cue_use_type());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_cue_visual_perception_type()->::ern411::ern::CueVisualPerceptionType::MergeFrom(from._internal_cue_visual_perception_type());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_cue_vocal_type()->::ern411::ern::CueVocalType::MergeFrom(from._internal_cue_vocal_type());
    }
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_resource_id()->::ern411::ern::ResourceId::MergeFrom(from._internal_resource_id());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_work_id()->::ern411::ern::MusicalWorkId::MergeFrom(from._internal_work_id());
    }
    if (cached_has_bits & 0x00000400u) {
      has_musical_content_ = from.has_musical_content_;
    }
    if (cached_has_bits & 0x00000800u) {
      is_dance_ = from.is_dance_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DetailedCue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.DetailedCue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DetailedCue::CopyFrom(const DetailedCue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.DetailedCue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetailedCue::IsInitialized() const {
  return true;
}

void DetailedCue::InternalSwap(DetailedCue* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  additional_title_.InternalSwap(&other->additional_title_);
  c_line_.InternalSwap(&other->c_line_);
  contributor_.InternalSwap(&other->contributor_);
  display_title_.InternalSwap(&other->display_title_);
  display_title_text_.InternalSwap(&other->display_title_text_);
  p_line_.InternalSwap(&other->p_line_);
  duration_.Swap(&other->duration_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  end_time_.Swap(&other->end_time_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  start_time_.Swap(&other->start_time_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DetailedCue, is_dance_)
      + sizeof(DetailedCue::is_dance_)
      - PROTOBUF_FIELD_OFFSET(DetailedCue, cue_origin_)>(
          reinterpret_cast<char*>(&cue_origin_),
          reinterpret_cast<char*>(&other->cue_origin_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DetailedCue::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DetailedCueSheet::InitAsDefaultInstance() {
  ::ern411::ern::_DetailedCueSheet_default_instance_._instance.get_mutable()->cue_sheet_type_ = const_cast< ::ern411::ern::CueSheetType*>(
      ::ern411::ern::CueSheetType::internal_default_instance());
}
class DetailedCueSheet::_Internal {
 public:
  using HasBits = decltype(std::declval<DetailedCueSheet>()._has_bits_);
  static void set_has_cue_sheet_reference(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ern411::ern::CueSheetType& cue_sheet_type(const DetailedCueSheet* msg);
  static void set_has_cue_sheet_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::ern411::ern::CueSheetType&
DetailedCueSheet::_Internal::cue_sheet_type(const DetailedCueSheet* msg) {
  return *msg->cue_sheet_type_;
}
DetailedCueSheet::DetailedCueSheet(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  cue_(arena),
  cue_sheet_id_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.DetailedCueSheet)
}
DetailedCueSheet::DetailedCueSheet(const DetailedCueSheet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      cue_(from.cue_),
      cue_sheet_id_(from.cue_sheet_id_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  cue_sheet_reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_cue_sheet_reference()) {
    cue_sheet_reference_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_cue_sheet_reference(),
      GetArena());
  }
  if (from._internal_has_cue_sheet_type()) {
    cue_sheet_type_ = new ::ern411::ern::CueSheetType(*from.cue_sheet_type_);
  } else {
    cue_sheet_type_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ern411.ern.DetailedCueSheet)
}

void DetailedCueSheet::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DetailedCueSheet_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  cue_sheet_reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cue_sheet_type_ = nullptr;
}

DetailedCueSheet::~DetailedCueSheet() {
  // @@protoc_insertion_point(destructor:ern411.ern.DetailedCueSheet)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DetailedCueSheet::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  cue_sheet_reference_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete cue_sheet_type_;
}

void DetailedCueSheet::ArenaDtor(void* object) {
  DetailedCueSheet* _this = reinterpret_cast< DetailedCueSheet* >(object);
  (void)_this;
}
void DetailedCueSheet::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DetailedCueSheet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DetailedCueSheet& DetailedCueSheet::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DetailedCueSheet_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void DetailedCueSheet::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.DetailedCueSheet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cue_.Clear();
  cue_sheet_id_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      cue_sheet_reference_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(cue_sheet_type_ != nullptr);
      cue_sheet_type_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DetailedCueSheet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ern411.ern.DetailedCue cue = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cue(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.ProprietaryId cue_sheet_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cue_sheet_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string cue_sheet_reference = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_cue_sheet_reference();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.DetailedCueSheet.cue_sheet_reference");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.ern.CueSheetType cue_sheet_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_cue_sheet_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DetailedCueSheet::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.DetailedCueSheet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ern411.ern.DetailedCue cue = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_cue_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_cue(i), target, stream);
  }

  // repeated .ern411.ern.ProprietaryId cue_sheet_id = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_cue_sheet_id_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_cue_sheet_id(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional string cue_sheet_reference = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_cue_sheet_reference().data(), static_cast<int>(this->_internal_cue_sheet_reference().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.DetailedCueSheet.cue_sheet_reference");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_cue_sheet_reference(), target);
  }

  // optional .ern411.ern.CueSheetType cue_sheet_type = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::cue_sheet_type(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.DetailedCueSheet)
  return target;
}

size_t DetailedCueSheet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.DetailedCueSheet)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ern411.ern.DetailedCue cue = 1;
  total_size += 1UL * this->_internal_cue_size();
  for (const auto& msg : this->cue_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.ProprietaryId cue_sheet_id = 2;
  total_size += 1UL * this->_internal_cue_sheet_id_size();
  for (const auto& msg : this->cue_sheet_id_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string cue_sheet_reference = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_cue_sheet_reference());
    }

    // optional .ern411.ern.CueSheetType cue_sheet_type = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cue_sheet_type_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DetailedCueSheet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.DetailedCueSheet)
  GOOGLE_DCHECK_NE(&from, this);
  const DetailedCueSheet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DetailedCueSheet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.DetailedCueSheet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.DetailedCueSheet)
    MergeFrom(*source);
  }
}

void DetailedCueSheet::MergeFrom(const DetailedCueSheet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.DetailedCueSheet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cue_.MergeFrom(from.cue_);
  cue_sheet_id_.MergeFrom(from.cue_sheet_id_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_cue_sheet_reference(from._internal_cue_sheet_reference());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_cue_sheet_type()->::ern411::ern::CueSheetType::MergeFrom(from._internal_cue_sheet_type());
    }
  }
}

void DetailedCueSheet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.DetailedCueSheet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DetailedCueSheet::CopyFrom(const DetailedCueSheet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.DetailedCueSheet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetailedCueSheet::IsInitialized() const {
  return true;
}

void DetailedCueSheet::InternalSwap(DetailedCueSheet* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  cue_.InternalSwap(&other->cue_);
  cue_sheet_id_.InternalSwap(&other->cue_sheet_id_);
  cue_sheet_reference_.Swap(&other->cue_sheet_reference_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(cue_sheet_type_, other->cue_sheet_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DetailedCueSheet::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DetailedCueSheetList::InitAsDefaultInstance() {
}
class DetailedCueSheetList::_Internal {
 public:
};

DetailedCueSheetList::DetailedCueSheetList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  cue_sheet_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.DetailedCueSheetList)
}
DetailedCueSheetList::DetailedCueSheetList(const DetailedCueSheetList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      cue_sheet_(from.cue_sheet_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ern411.ern.DetailedCueSheetList)
}

void DetailedCueSheetList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DetailedCueSheetList_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
}

DetailedCueSheetList::~DetailedCueSheetList() {
  // @@protoc_insertion_point(destructor:ern411.ern.DetailedCueSheetList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DetailedCueSheetList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DetailedCueSheetList::ArenaDtor(void* object) {
  DetailedCueSheetList* _this = reinterpret_cast< DetailedCueSheetList* >(object);
  (void)_this;
}
void DetailedCueSheetList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DetailedCueSheetList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DetailedCueSheetList& DetailedCueSheetList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DetailedCueSheetList_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void DetailedCueSheetList::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.DetailedCueSheetList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cue_sheet_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DetailedCueSheetList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ern411.ern.DetailedCueSheet cue_sheet = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cue_sheet(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DetailedCueSheetList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.DetailedCueSheetList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ern411.ern.DetailedCueSheet cue_sheet = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_cue_sheet_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_cue_sheet(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.DetailedCueSheetList)
  return target;
}

size_t DetailedCueSheetList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.DetailedCueSheetList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ern411.ern.DetailedCueSheet cue_sheet = 1;
  total_size += 1UL * this->_internal_cue_sheet_size();
  for (const auto& msg : this->cue_sheet_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DetailedCueSheetList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.DetailedCueSheetList)
  GOOGLE_DCHECK_NE(&from, this);
  const DetailedCueSheetList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DetailedCueSheetList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.DetailedCueSheetList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.DetailedCueSheetList)
    MergeFrom(*source);
  }
}

void DetailedCueSheetList::MergeFrom(const DetailedCueSheetList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.DetailedCueSheetList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cue_sheet_.MergeFrom(from.cue_sheet_);
}

void DetailedCueSheetList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.DetailedCueSheetList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DetailedCueSheetList::CopyFrom(const DetailedCueSheetList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.DetailedCueSheetList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetailedCueSheetList::IsInitialized() const {
  return true;
}

void DetailedCueSheetList::InternalSwap(DetailedCueSheetList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  cue_sheet_.InternalSwap(&other->cue_sheet_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DetailedCueSheetList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DetailedHashSum::InitAsDefaultInstance() {
  ::ern411::ern::_DetailedHashSum_default_instance_._instance.get_mutable()->algorithm_ = const_cast< ::ern411::ern::HashSumAlgorithmType*>(
      ::ern411::ern::HashSumAlgorithmType::internal_default_instance());
  ::ern411::ern::_DetailedHashSum_default_instance_._instance.get_mutable()->data_type_ = const_cast< ::ern411::avs::BinaryDataType*>(
      ::ern411::avs::BinaryDataType::internal_default_instance());
}
class DetailedHashSum::_Internal {
 public:
  using HasBits = decltype(std::declval<DetailedHashSum>()._has_bits_);
  static const ::ern411::ern::HashSumAlgorithmType& algorithm(const DetailedHashSum* msg);
  static void set_has_algorithm(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::ern411::avs::BinaryDataType& data_type(const DetailedHashSum* msg);
  static void set_has_data_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_hash_sum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_parameter(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::ern411::ern::HashSumAlgorithmType&
DetailedHashSum::_Internal::algorithm(const DetailedHashSum* msg) {
  return *msg->algorithm_;
}
const ::ern411::avs::BinaryDataType&
DetailedHashSum::_Internal::data_type(const DetailedHashSum* msg) {
  return *msg->data_type_;
}
void DetailedHashSum::clear_data_type() {
  if (data_type_ != nullptr) data_type_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
DetailedHashSum::DetailedHashSum(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.DetailedHashSum)
}
DetailedHashSum::DetailedHashSum(const DetailedHashSum& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  hash_sum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_hash_sum_value()) {
    hash_sum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_hash_sum_value(),
      GetArena());
  }
  parameter_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_parameter()) {
    parameter_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_parameter(),
      GetArena());
  }
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_version()) {
    version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_version(),
      GetArena());
  }
  if (from._internal_has_algorithm()) {
    algorithm_ = new ::ern411::ern::HashSumAlgorithmType(*from.algorithm_);
  } else {
    algorithm_ = nullptr;
  }
  if (from._internal_has_data_type()) {
    data_type_ = new ::ern411::avs::BinaryDataType(*from.data_type_);
  } else {
    data_type_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ern411.ern.DetailedHashSum)
}

void DetailedHashSum::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DetailedHashSum_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  hash_sum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  parameter_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&algorithm_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&data_type_) -
      reinterpret_cast<char*>(&algorithm_)) + sizeof(data_type_));
}

DetailedHashSum::~DetailedHashSum() {
  // @@protoc_insertion_point(destructor:ern411.ern.DetailedHashSum)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DetailedHashSum::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  hash_sum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  parameter_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete algorithm_;
  if (this != internal_default_instance()) delete data_type_;
}

void DetailedHashSum::ArenaDtor(void* object) {
  DetailedHashSum* _this = reinterpret_cast< DetailedHashSum* >(object);
  (void)_this;
}
void DetailedHashSum::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DetailedHashSum::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DetailedHashSum& DetailedHashSum::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DetailedHashSum_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void DetailedHashSum::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.DetailedHashSum)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      hash_sum_value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      parameter_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      version_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(algorithm_ != nullptr);
      algorithm_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(data_type_ != nullptr);
      data_type_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DetailedHashSum::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ern411.ern.HashSumAlgorithmType algorithm = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_algorithm(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.avs.BinaryDataType data_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_data_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string hash_sum_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_hash_sum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.DetailedHashSum.hash_sum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string parameter = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_parameter();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.DetailedHashSum.parameter");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string version = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.DetailedHashSum.version");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DetailedHashSum::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.DetailedHashSum)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ern411.ern.HashSumAlgorithmType algorithm = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::algorithm(this), target, stream);
  }

  // optional .ern411.avs.BinaryDataType data_type = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::data_type(this), target, stream);
  }

  // optional string hash_sum_value = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_hash_sum_value().data(), static_cast<int>(this->_internal_hash_sum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.DetailedHashSum.hash_sum_value");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_hash_sum_value(), target);
  }

  // optional string parameter = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_parameter().data(), static_cast<int>(this->_internal_parameter().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.DetailedHashSum.parameter");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_parameter(), target);
  }

  // optional string version = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.DetailedHashSum.version");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.DetailedHashSum)
  return target;
}

size_t DetailedHashSum::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.DetailedHashSum)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string hash_sum_value = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_hash_sum_value());
    }

    // optional string parameter = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_parameter());
    }

    // optional string version = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_version());
    }

    // optional .ern411.ern.HashSumAlgorithmType algorithm = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *algorithm_);
    }

    // optional .ern411.avs.BinaryDataType data_type = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_type_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DetailedHashSum::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.DetailedHashSum)
  GOOGLE_DCHECK_NE(&from, this);
  const DetailedHashSum* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DetailedHashSum>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.DetailedHashSum)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.DetailedHashSum)
    MergeFrom(*source);
  }
}

void DetailedHashSum::MergeFrom(const DetailedHashSum& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.DetailedHashSum)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_hash_sum_value(from._internal_hash_sum_value());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_parameter(from._internal_parameter());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_version(from._internal_version());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_algorithm()->::ern411::ern::HashSumAlgorithmType::MergeFrom(from._internal_algorithm());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_data_type()->::ern411::avs::BinaryDataType::MergeFrom(from._internal_data_type());
    }
  }
}

void DetailedHashSum::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.DetailedHashSum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DetailedHashSum::CopyFrom(const DetailedHashSum& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.DetailedHashSum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetailedHashSum::IsInitialized() const {
  return true;
}

void DetailedHashSum::InternalSwap(DetailedHashSum* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  hash_sum_value_.Swap(&other->hash_sum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  parameter_.Swap(&other->parameter_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  version_.Swap(&other->version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DetailedHashSum, data_type_)
      + sizeof(DetailedHashSum::data_type_)
      - PROTOBUF_FIELD_OFFSET(DetailedHashSum, algorithm_)>(
          reinterpret_cast<char*>(&algorithm_),
          reinterpret_cast<char*>(&other->algorithm_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DetailedHashSum::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DetailedPartyId::InitAsDefaultInstance() {
}
class DetailedPartyId::_Internal {
 public:
  using HasBits = decltype(std::declval<DetailedPartyId>()._has_bits_);
  static void set_has_cisac_society_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_d_p_i_d(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_i_p_n(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_i_s_n_i(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_ipi_name_number(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

DetailedPartyId::DetailedPartyId(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  proprietary_id_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.DetailedPartyId)
}
DetailedPartyId::DetailedPartyId(const DetailedPartyId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      proprietary_id_(from.proprietary_id_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  cisac_society_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_cisac_society_id()) {
    cisac_society_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_cisac_society_id(),
      GetArena());
  }
  d_p_i_d_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_d_p_i_d()) {
    d_p_i_d_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_d_p_i_d(),
      GetArena());
  }
  i_p_n_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_i_p_n()) {
    i_p_n_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_i_p_n(),
      GetArena());
  }
  i_s_n_i_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_i_s_n_i()) {
    i_s_n_i_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_i_s_n_i(),
      GetArena());
  }
  ipi_name_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ipi_name_number()) {
    ipi_name_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ipi_name_number(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:ern411.ern.DetailedPartyId)
}

void DetailedPartyId::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DetailedPartyId_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  cisac_society_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  d_p_i_d_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  i_p_n_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  i_s_n_i_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ipi_name_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DetailedPartyId::~DetailedPartyId() {
  // @@protoc_insertion_point(destructor:ern411.ern.DetailedPartyId)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DetailedPartyId::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  cisac_society_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  d_p_i_d_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  i_p_n_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  i_s_n_i_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ipi_name_number_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DetailedPartyId::ArenaDtor(void* object) {
  DetailedPartyId* _this = reinterpret_cast< DetailedPartyId* >(object);
  (void)_this;
}
void DetailedPartyId::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DetailedPartyId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DetailedPartyId& DetailedPartyId::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DetailedPartyId_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void DetailedPartyId::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.DetailedPartyId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  proprietary_id_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      cisac_society_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      d_p_i_d_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      i_p_n_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      i_s_n_i_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      ipi_name_number_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DetailedPartyId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string cisac_society_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_cisac_society_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.DetailedPartyId.cisac_society_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string d_p_i_d = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_d_p_i_d();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.DetailedPartyId.d_p_i_d");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string i_p_n = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_i_p_n();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.DetailedPartyId.i_p_n");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string i_s_n_i = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_i_s_n_i();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.DetailedPartyId.i_s_n_i");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string ipi_name_number = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_ipi_name_number();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.DetailedPartyId.ipi_name_number");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.ProprietaryId proprietary_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_proprietary_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DetailedPartyId::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.DetailedPartyId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string cisac_society_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_cisac_society_id().data(), static_cast<int>(this->_internal_cisac_society_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.DetailedPartyId.cisac_society_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_cisac_society_id(), target);
  }

  // optional string d_p_i_d = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_d_p_i_d().data(), static_cast<int>(this->_internal_d_p_i_d().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.DetailedPartyId.d_p_i_d");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_d_p_i_d(), target);
  }

  // optional string i_p_n = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_i_p_n().data(), static_cast<int>(this->_internal_i_p_n().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.DetailedPartyId.i_p_n");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_i_p_n(), target);
  }

  // optional string i_s_n_i = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_i_s_n_i().data(), static_cast<int>(this->_internal_i_s_n_i().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.DetailedPartyId.i_s_n_i");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_i_s_n_i(), target);
  }

  // optional string ipi_name_number = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ipi_name_number().data(), static_cast<int>(this->_internal_ipi_name_number().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.DetailedPartyId.ipi_name_number");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_ipi_name_number(), target);
  }

  // repeated .ern411.ern.ProprietaryId proprietary_id = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_proprietary_id_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_proprietary_id(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.DetailedPartyId)
  return target;
}

size_t DetailedPartyId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.DetailedPartyId)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ern411.ern.ProprietaryId proprietary_id = 6;
  total_size += 1UL * this->_internal_proprietary_id_size();
  for (const auto& msg : this->proprietary_id_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string cisac_society_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_cisac_society_id());
    }

    // optional string d_p_i_d = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_d_p_i_d());
    }

    // optional string i_p_n = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_i_p_n());
    }

    // optional string i_s_n_i = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_i_s_n_i());
    }

    // optional string ipi_name_number = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ipi_name_number());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DetailedPartyId::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.DetailedPartyId)
  GOOGLE_DCHECK_NE(&from, this);
  const DetailedPartyId* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DetailedPartyId>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.DetailedPartyId)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.DetailedPartyId)
    MergeFrom(*source);
  }
}

void DetailedPartyId::MergeFrom(const DetailedPartyId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.DetailedPartyId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  proprietary_id_.MergeFrom(from.proprietary_id_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_cisac_society_id(from._internal_cisac_society_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_d_p_i_d(from._internal_d_p_i_d());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_i_p_n(from._internal_i_p_n());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_i_s_n_i(from._internal_i_s_n_i());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_ipi_name_number(from._internal_ipi_name_number());
    }
  }
}

void DetailedPartyId::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.DetailedPartyId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DetailedPartyId::CopyFrom(const DetailedPartyId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.DetailedPartyId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetailedPartyId::IsInitialized() const {
  return true;
}

void DetailedPartyId::InternalSwap(DetailedPartyId* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  proprietary_id_.InternalSwap(&other->proprietary_id_);
  cisac_society_id_.Swap(&other->cisac_society_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  d_p_i_d_.Swap(&other->d_p_i_d_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  i_p_n_.Swap(&other->i_p_n_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  i_s_n_i_.Swap(&other->i_s_n_i_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ipi_name_number_.Swap(&other->ipi_name_number_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata DetailedPartyId::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DetailedResourceContributor::InitAsDefaultInstance() {
}
class DetailedResourceContributor::_Internal {
 public:
  using HasBits = decltype(std::declval<DetailedResourceContributor>()._has_bits_);
  static void set_has_has_made_contracted_contribution(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_has_made_featured_contribution(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_sequence_number(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

DetailedResourceContributor::DetailedResourceContributor(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  display_credits_(arena),
  instrument_type_(arena),
  party_id_(arena),
  party_name_(arena),
  role_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.DetailedResourceContributor)
}
DetailedResourceContributor::DetailedResourceContributor(const DetailedResourceContributor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      display_credits_(from.display_credits_),
      instrument_type_(from.instrument_type_),
      party_id_(from.party_id_),
      party_name_(from.party_name_),
      role_(from.role_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&has_made_contracted_contribution_, &from.has_made_contracted_contribution_,
    static_cast<size_t>(reinterpret_cast<char*>(&sequence_number_) -
    reinterpret_cast<char*>(&has_made_contracted_contribution_)) + sizeof(sequence_number_));
  // @@protoc_insertion_point(copy_constructor:ern411.ern.DetailedResourceContributor)
}

void DetailedResourceContributor::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DetailedResourceContributor_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  ::memset(&has_made_contracted_contribution_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sequence_number_) -
      reinterpret_cast<char*>(&has_made_contracted_contribution_)) + sizeof(sequence_number_));
}

DetailedResourceContributor::~DetailedResourceContributor() {
  // @@protoc_insertion_point(destructor:ern411.ern.DetailedResourceContributor)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DetailedResourceContributor::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DetailedResourceContributor::ArenaDtor(void* object) {
  DetailedResourceContributor* _this = reinterpret_cast< DetailedResourceContributor* >(object);
  (void)_this;
}
void DetailedResourceContributor::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DetailedResourceContributor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DetailedResourceContributor& DetailedResourceContributor::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DetailedResourceContributor_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void DetailedResourceContributor::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.DetailedResourceContributor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  display_credits_.Clear();
  instrument_type_.Clear();
  party_id_.Clear();
  party_name_.Clear();
  role_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&has_made_contracted_contribution_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sequence_number_) -
        reinterpret_cast<char*>(&has_made_contracted_contribution_)) + sizeof(sequence_number_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DetailedResourceContributor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ern411.ern.DisplayCredits display_credits = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_display_credits(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool has_made_contracted_contribution = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_has_made_contracted_contribution(&has_bits);
          has_made_contracted_contribution_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool has_made_featured_contribution = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_has_made_featured_contribution(&has_bits);
          has_made_featured_contribution_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.InstrumentType instrument_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_instrument_type(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.DetailedPartyId party_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_party_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.PartyName party_name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_party_name(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.ContributorRole role = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_role(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // optional int32 sequence_number = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_sequence_number(&has_bits);
          sequence_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DetailedResourceContributor::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.DetailedResourceContributor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ern411.ern.DisplayCredits display_credits = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_display_credits_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_display_credits(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool has_made_contracted_contribution = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_has_made_contracted_contribution(), target);
  }

  // optional bool has_made_featured_contribution = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_has_made_featured_contribution(), target);
  }

  // repeated .ern411.ern.InstrumentType instrument_type = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_instrument_type_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_instrument_type(i), target, stream);
  }

  // repeated .ern411.ern.DetailedPartyId party_id = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_party_id_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_party_id(i), target, stream);
  }

  // repeated .ern411.ern.PartyName party_name = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_party_name_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_party_name(i), target, stream);
  }

  // repeated .ern411.ern.ContributorRole role = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_role_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_role(i), target, stream);
  }

  // optional int32 sequence_number = 8;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_sequence_number(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.DetailedResourceContributor)
  return target;
}

size_t DetailedResourceContributor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.DetailedResourceContributor)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ern411.ern.DisplayCredits display_credits = 1;
  total_size += 1UL * this->_internal_display_credits_size();
  for (const auto& msg : this->display_credits_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.InstrumentType instrument_type = 4;
  total_size += 1UL * this->_internal_instrument_type_size();
  for (const auto& msg : this->instrument_type_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.DetailedPartyId party_id = 5;
  total_size += 1UL * this->_internal_party_id_size();
  for (const auto& msg : this->party_id_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.PartyName party_name = 6;
  total_size += 1UL * this->_internal_party_name_size();
  for (const auto& msg : this->party_name_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.ContributorRole role = 7;
  total_size += 1UL * this->_internal_role_size();
  for (const auto& msg : this->role_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bool has_made_contracted_contribution = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool has_made_featured_contribution = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional int32 sequence_number = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_sequence_number());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DetailedResourceContributor::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.DetailedResourceContributor)
  GOOGLE_DCHECK_NE(&from, this);
  const DetailedResourceContributor* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DetailedResourceContributor>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.DetailedResourceContributor)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.DetailedResourceContributor)
    MergeFrom(*source);
  }
}

void DetailedResourceContributor::MergeFrom(const DetailedResourceContributor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.DetailedResourceContributor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  display_credits_.MergeFrom(from.display_credits_);
  instrument_type_.MergeFrom(from.instrument_type_);
  party_id_.MergeFrom(from.party_id_);
  party_name_.MergeFrom(from.party_name_);
  role_.MergeFrom(from.role_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      has_made_contracted_contribution_ = from.has_made_contracted_contribution_;
    }
    if (cached_has_bits & 0x00000002u) {
      has_made_featured_contribution_ = from.has_made_featured_contribution_;
    }
    if (cached_has_bits & 0x00000004u) {
      sequence_number_ = from.sequence_number_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DetailedResourceContributor::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.DetailedResourceContributor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DetailedResourceContributor::CopyFrom(const DetailedResourceContributor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.DetailedResourceContributor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetailedResourceContributor::IsInitialized() const {
  return true;
}

void DetailedResourceContributor::InternalSwap(DetailedResourceContributor* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  display_credits_.InternalSwap(&other->display_credits_);
  instrument_type_.InternalSwap(&other->instrument_type_);
  party_id_.InternalSwap(&other->party_id_);
  party_name_.InternalSwap(&other->party_name_);
  role_.InternalSwap(&other->role_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DetailedResourceContributor, sequence_number_)
      + sizeof(DetailedResourceContributor::sequence_number_)
      - PROTOBUF_FIELD_OFFSET(DetailedResourceContributor, has_made_contracted_contribution_)>(
          reinterpret_cast<char*>(&has_made_contracted_contribution_),
          reinterpret_cast<char*>(&other->has_made_contracted_contribution_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DetailedResourceContributor::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DiscoverableUseType::InitAsDefaultInstance() {
  ::ern411::ern::_DiscoverableUseType_default_instance_._instance.get_mutable()->ext_value_ = const_cast< ::ern411::avs::UseType*>(
      ::ern411::avs::UseType::internal_default_instance());
}
class DiscoverableUseType::_Internal {
 public:
  using HasBits = decltype(std::declval<DiscoverableUseType>()._has_bits_);
  static void set_has_is_discoverable(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_namespace_(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_user_defined_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::ern411::avs::UseType& ext_value(const DiscoverableUseType* msg);
  static void set_has_ext_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::ern411::avs::UseType&
DiscoverableUseType::_Internal::ext_value(const DiscoverableUseType* msg) {
  return *msg->ext_value_;
}
void DiscoverableUseType::clear_ext_value() {
  if (ext_value_ != nullptr) ext_value_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
DiscoverableUseType::DiscoverableUseType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.DiscoverableUseType)
}
DiscoverableUseType::DiscoverableUseType(const DiscoverableUseType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_namespace_()) {
    namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_namespace_(),
      GetArena());
  }
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_user_defined_value()) {
    user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_defined_value(),
      GetArena());
  }
  if (from._internal_has_ext_value()) {
    ext_value_ = new ::ern411::avs::UseType(*from.ext_value_);
  } else {
    ext_value_ = nullptr;
  }
  is_discoverable_ = from.is_discoverable_;
  // @@protoc_insertion_point(copy_constructor:ern411.ern.DiscoverableUseType)
}

void DiscoverableUseType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DiscoverableUseType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&ext_value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_discoverable_) -
      reinterpret_cast<char*>(&ext_value_)) + sizeof(is_discoverable_));
}

DiscoverableUseType::~DiscoverableUseType() {
  // @@protoc_insertion_point(destructor:ern411.ern.DiscoverableUseType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DiscoverableUseType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  namespace__.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ext_value_;
}

void DiscoverableUseType::ArenaDtor(void* object) {
  DiscoverableUseType* _this = reinterpret_cast< DiscoverableUseType* >(object);
  (void)_this;
}
void DiscoverableUseType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DiscoverableUseType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DiscoverableUseType& DiscoverableUseType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DiscoverableUseType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void DiscoverableUseType::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.DiscoverableUseType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      namespace__.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      user_defined_value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(ext_value_ != nullptr);
      ext_value_->Clear();
    }
  }
  is_discoverable_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DiscoverableUseType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool is_discoverable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_is_discoverable(&has_bits);
          is_discoverable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string namespace = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_namespace_();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.DiscoverableUseType.namespace");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string user_defined_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_user_defined_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.DiscoverableUseType.user_defined_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.avs.UseType ext_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DiscoverableUseType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.DiscoverableUseType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_discoverable = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_discoverable(), target);
  }

  // optional string namespace = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_namespace_().data(), static_cast<int>(this->_internal_namespace_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.DiscoverableUseType.namespace");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_namespace_(), target);
  }

  // optional string user_defined_value = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_user_defined_value().data(), static_cast<int>(this->_internal_user_defined_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.DiscoverableUseType.user_defined_value");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_user_defined_value(), target);
  }

  // optional .ern411.avs.UseType ext_value = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::ext_value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.DiscoverableUseType)
  return target;
}

size_t DiscoverableUseType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.DiscoverableUseType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string namespace = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_namespace_());
    }

    // optional string user_defined_value = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_defined_value());
    }

    // optional .ern411.avs.UseType ext_value = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ext_value_);
    }

    // optional bool is_discoverable = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DiscoverableUseType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.DiscoverableUseType)
  GOOGLE_DCHECK_NE(&from, this);
  const DiscoverableUseType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DiscoverableUseType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.DiscoverableUseType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.DiscoverableUseType)
    MergeFrom(*source);
  }
}

void DiscoverableUseType::MergeFrom(const DiscoverableUseType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.DiscoverableUseType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_namespace_(from._internal_namespace_());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_user_defined_value(from._internal_user_defined_value());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_ext_value()->::ern411::avs::UseType::MergeFrom(from._internal_ext_value());
    }
    if (cached_has_bits & 0x00000008u) {
      is_discoverable_ = from.is_discoverable_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DiscoverableUseType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.DiscoverableUseType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DiscoverableUseType::CopyFrom(const DiscoverableUseType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.DiscoverableUseType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiscoverableUseType::IsInitialized() const {
  return true;
}

void DiscoverableUseType::InternalSwap(DiscoverableUseType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  namespace__.Swap(&other->namespace__, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_defined_value_.Swap(&other->user_defined_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DiscoverableUseType, is_discoverable_)
      + sizeof(DiscoverableUseType::is_discoverable_)
      - PROTOBUF_FIELD_OFFSET(DiscoverableUseType, ext_value_)>(
          reinterpret_cast<char*>(&ext_value_),
          reinterpret_cast<char*>(&other->ext_value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DiscoverableUseType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DisplayArtist::InitAsDefaultInstance() {
  ::ern411::ern::_DisplayArtist_default_instance_._instance.get_mutable()->display_artist_role_ = const_cast< ::ern411::ern::DisplayArtistRole*>(
      ::ern411::ern::DisplayArtistRole::internal_default_instance());
}
class DisplayArtist::_Internal {
 public:
  using HasBits = decltype(std::declval<DisplayArtist>()._has_bits_);
  static void set_has_artist_party_reference(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ern411::ern::DisplayArtistRole& display_artist_role(const DisplayArtist* msg);
  static void set_has_display_artist_role(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_sequence_number(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::ern411::ern::DisplayArtistRole&
DisplayArtist::_Internal::display_artist_role(const DisplayArtist* msg) {
  return *msg->display_artist_role_;
}
DisplayArtist::DisplayArtist(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  artistic_role_(arena),
  title_display_information_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.DisplayArtist)
}
DisplayArtist::DisplayArtist(const DisplayArtist& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      artistic_role_(from.artistic_role_),
      title_display_information_(from.title_display_information_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  artist_party_reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_artist_party_reference()) {
    artist_party_reference_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_artist_party_reference(),
      GetArena());
  }
  if (from._internal_has_display_artist_role()) {
    display_artist_role_ = new ::ern411::ern::DisplayArtistRole(*from.display_artist_role_);
  } else {
    display_artist_role_ = nullptr;
  }
  sequence_number_ = from.sequence_number_;
  // @@protoc_insertion_point(copy_constructor:ern411.ern.DisplayArtist)
}

void DisplayArtist::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DisplayArtist_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  artist_party_reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&display_artist_role_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sequence_number_) -
      reinterpret_cast<char*>(&display_artist_role_)) + sizeof(sequence_number_));
}

DisplayArtist::~DisplayArtist() {
  // @@protoc_insertion_point(destructor:ern411.ern.DisplayArtist)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DisplayArtist::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  artist_party_reference_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete display_artist_role_;
}

void DisplayArtist::ArenaDtor(void* object) {
  DisplayArtist* _this = reinterpret_cast< DisplayArtist* >(object);
  (void)_this;
}
void DisplayArtist::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DisplayArtist::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DisplayArtist& DisplayArtist::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DisplayArtist_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void DisplayArtist::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.DisplayArtist)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  artistic_role_.Clear();
  title_display_information_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      artist_party_reference_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(display_artist_role_ != nullptr);
      display_artist_role_->Clear();
    }
  }
  sequence_number_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DisplayArtist::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string artist_party_reference = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_artist_party_reference();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.DisplayArtist.artist_party_reference");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.ContributorRole artistic_role = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_artistic_role(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .ern411.ern.DisplayArtistRole display_artist_role = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_display_artist_role(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 sequence_number = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_sequence_number(&has_bits);
          sequence_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.TitleDisplayInformation title_display_information = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_title_display_information(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DisplayArtist::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.DisplayArtist)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string artist_party_reference = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_artist_party_reference().data(), static_cast<int>(this->_internal_artist_party_reference().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.DisplayArtist.artist_party_reference");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_artist_party_reference(), target);
  }

  // repeated .ern411.ern.ContributorRole artistic_role = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_artistic_role_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_artistic_role(i), target, stream);
  }

  // optional .ern411.ern.DisplayArtistRole display_artist_role = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::display_artist_role(this), target, stream);
  }

  // optional int32 sequence_number = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_sequence_number(), target);
  }

  // repeated .ern411.ern.TitleDisplayInformation title_display_information = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_title_display_information_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_title_display_information(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.DisplayArtist)
  return target;
}

size_t DisplayArtist::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.DisplayArtist)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ern411.ern.ContributorRole artistic_role = 2;
  total_size += 1UL * this->_internal_artistic_role_size();
  for (const auto& msg : this->artistic_role_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.TitleDisplayInformation title_display_information = 5;
  total_size += 1UL * this->_internal_title_display_information_size();
  for (const auto& msg : this->title_display_information_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string artist_party_reference = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_artist_party_reference());
    }

    // optional .ern411.ern.DisplayArtistRole display_artist_role = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *display_artist_role_);
    }

    // optional int32 sequence_number = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_sequence_number());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DisplayArtist::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.DisplayArtist)
  GOOGLE_DCHECK_NE(&from, this);
  const DisplayArtist* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DisplayArtist>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.DisplayArtist)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.DisplayArtist)
    MergeFrom(*source);
  }
}

void DisplayArtist::MergeFrom(const DisplayArtist& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.DisplayArtist)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  artistic_role_.MergeFrom(from.artistic_role_);
  title_display_information_.MergeFrom(from.title_display_information_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_artist_party_reference(from._internal_artist_party_reference());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_display_artist_role()->::ern411::ern::DisplayArtistRole::MergeFrom(from._internal_display_artist_role());
    }
    if (cached_has_bits & 0x00000004u) {
      sequence_number_ = from.sequence_number_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DisplayArtist::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.DisplayArtist)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DisplayArtist::CopyFrom(const DisplayArtist& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.DisplayArtist)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DisplayArtist::IsInitialized() const {
  return true;
}

void DisplayArtist::InternalSwap(DisplayArtist* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  artistic_role_.InternalSwap(&other->artistic_role_);
  title_display_information_.InternalSwap(&other->title_display_information_);
  artist_party_reference_.Swap(&other->artist_party_reference_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DisplayArtist, sequence_number_)
      + sizeof(DisplayArtist::sequence_number_)
      - PROTOBUF_FIELD_OFFSET(DisplayArtist, display_artist_role_)>(
          reinterpret_cast<char*>(&display_artist_role_),
          reinterpret_cast<char*>(&other->display_artist_role_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DisplayArtist::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DisplayArtistNameWithDefault::InitAsDefaultInstance() {
  ::ern411::ern::_DisplayArtistNameWithDefault_default_instance_._instance.get_mutable()->applicable_territory_code_ = const_cast< ::ern411::avs::CurrentTerritoryCode*>(
      ::ern411::avs::CurrentTerritoryCode::internal_default_instance());
}
class DisplayArtistNameWithDefault::_Internal {
 public:
  using HasBits = decltype(std::declval<DisplayArtistNameWithDefault>()._has_bits_);
  static const ::ern411::avs::CurrentTerritoryCode& applicable_territory_code(const DisplayArtistNameWithDefault* msg);
  static void set_has_applicable_territory_code(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_default(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_language_and_script_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ext_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::ern411::avs::CurrentTerritoryCode&
DisplayArtistNameWithDefault::_Internal::applicable_territory_code(const DisplayArtistNameWithDefault* msg) {
  return *msg->applicable_territory_code_;
}
void DisplayArtistNameWithDefault::clear_applicable_territory_code() {
  if (applicable_territory_code_ != nullptr) applicable_territory_code_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
DisplayArtistNameWithDefault::DisplayArtistNameWithDefault(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.DisplayArtistNameWithDefault)
}
DisplayArtistNameWithDefault::DisplayArtistNameWithDefault(const DisplayArtistNameWithDefault& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  language_and_script_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_language_and_script_code()) {
    language_and_script_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_language_and_script_code(),
      GetArena());
  }
  ext_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ext_value()) {
    ext_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ext_value(),
      GetArena());
  }
  if (from._internal_has_applicable_territory_code()) {
    applicable_territory_code_ = new ::ern411::avs::CurrentTerritoryCode(*from.applicable_territory_code_);
  } else {
    applicable_territory_code_ = nullptr;
  }
  is_default_ = from.is_default_;
  // @@protoc_insertion_point(copy_constructor:ern411.ern.DisplayArtistNameWithDefault)
}

void DisplayArtistNameWithDefault::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DisplayArtistNameWithDefault_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  language_and_script_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ext_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&applicable_territory_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_default_) -
      reinterpret_cast<char*>(&applicable_territory_code_)) + sizeof(is_default_));
}

DisplayArtistNameWithDefault::~DisplayArtistNameWithDefault() {
  // @@protoc_insertion_point(destructor:ern411.ern.DisplayArtistNameWithDefault)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DisplayArtistNameWithDefault::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  language_and_script_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ext_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete applicable_territory_code_;
}

void DisplayArtistNameWithDefault::ArenaDtor(void* object) {
  DisplayArtistNameWithDefault* _this = reinterpret_cast< DisplayArtistNameWithDefault* >(object);
  (void)_this;
}
void DisplayArtistNameWithDefault::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DisplayArtistNameWithDefault::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DisplayArtistNameWithDefault& DisplayArtistNameWithDefault::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DisplayArtistNameWithDefault_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void DisplayArtistNameWithDefault::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.DisplayArtistNameWithDefault)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      language_and_script_code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      ext_value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(applicable_territory_code_ != nullptr);
      applicable_territory_code_->Clear();
    }
  }
  is_default_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DisplayArtistNameWithDefault::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ern411.avs.CurrentTerritoryCode applicable_territory_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_applicable_territory_code(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_default = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_is_default(&has_bits);
          is_default_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string language_and_script_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_language_and_script_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.DisplayArtistNameWithDefault.language_and_script_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string ext_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_ext_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.DisplayArtistNameWithDefault.ext_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DisplayArtistNameWithDefault::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.DisplayArtistNameWithDefault)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ern411.avs.CurrentTerritoryCode applicable_territory_code = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::applicable_territory_code(this), target, stream);
  }

  // optional bool is_default = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_default(), target);
  }

  // optional string language_and_script_code = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_language_and_script_code().data(), static_cast<int>(this->_internal_language_and_script_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.DisplayArtistNameWithDefault.language_and_script_code");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_language_and_script_code(), target);
  }

  // optional string ext_value = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ext_value().data(), static_cast<int>(this->_internal_ext_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.DisplayArtistNameWithDefault.ext_value");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_ext_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.DisplayArtistNameWithDefault)
  return target;
}

size_t DisplayArtistNameWithDefault::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.DisplayArtistNameWithDefault)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string language_and_script_code = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_language_and_script_code());
    }

    // optional string ext_value = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ext_value());
    }

    // optional .ern411.avs.CurrentTerritoryCode applicable_territory_code = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *applicable_territory_code_);
    }

    // optional bool is_default = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DisplayArtistNameWithDefault::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.DisplayArtistNameWithDefault)
  GOOGLE_DCHECK_NE(&from, this);
  const DisplayArtistNameWithDefault* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DisplayArtistNameWithDefault>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.DisplayArtistNameWithDefault)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.DisplayArtistNameWithDefault)
    MergeFrom(*source);
  }
}

void DisplayArtistNameWithDefault::MergeFrom(const DisplayArtistNameWithDefault& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.DisplayArtistNameWithDefault)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_language_and_script_code(from._internal_language_and_script_code());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_ext_value(from._internal_ext_value());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_applicable_territory_code()->::ern411::avs::CurrentTerritoryCode::MergeFrom(from._internal_applicable_territory_code());
    }
    if (cached_has_bits & 0x00000008u) {
      is_default_ = from.is_default_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DisplayArtistNameWithDefault::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.DisplayArtistNameWithDefault)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DisplayArtistNameWithDefault::CopyFrom(const DisplayArtistNameWithDefault& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.DisplayArtistNameWithDefault)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DisplayArtistNameWithDefault::IsInitialized() const {
  return true;
}

void DisplayArtistNameWithDefault::InternalSwap(DisplayArtistNameWithDefault* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  language_and_script_code_.Swap(&other->language_and_script_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ext_value_.Swap(&other->ext_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DisplayArtistNameWithDefault, is_default_)
      + sizeof(DisplayArtistNameWithDefault::is_default_)
      - PROTOBUF_FIELD_OFFSET(DisplayArtistNameWithDefault, applicable_territory_code_)>(
          reinterpret_cast<char*>(&applicable_territory_code_),
          reinterpret_cast<char*>(&other->applicable_territory_code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DisplayArtistNameWithDefault::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DisplayArtistRole::InitAsDefaultInstance() {
  ::ern411::ern::_DisplayArtistRole_default_instance_._instance.get_mutable()->ext_value_ = const_cast< ::ern411::avs::DisplayArtistRole*>(
      ::ern411::avs::DisplayArtistRole::internal_default_instance());
}
class DisplayArtistRole::_Internal {
 public:
  using HasBits = decltype(std::declval<DisplayArtistRole>()._has_bits_);
  static void set_has_namespace_(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_user_defined_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::ern411::avs::DisplayArtistRole& ext_value(const DisplayArtistRole* msg);
  static void set_has_ext_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::ern411::avs::DisplayArtistRole&
DisplayArtistRole::_Internal::ext_value(const DisplayArtistRole* msg) {
  return *msg->ext_value_;
}
void DisplayArtistRole::clear_ext_value() {
  if (ext_value_ != nullptr) ext_value_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
DisplayArtistRole::DisplayArtistRole(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.DisplayArtistRole)
}
DisplayArtistRole::DisplayArtistRole(const DisplayArtistRole& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_namespace_()) {
    namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_namespace_(),
      GetArena());
  }
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_user_defined_value()) {
    user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_defined_value(),
      GetArena());
  }
  if (from._internal_has_ext_value()) {
    ext_value_ = new ::ern411::avs::DisplayArtistRole(*from.ext_value_);
  } else {
    ext_value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ern411.ern.DisplayArtistRole)
}

void DisplayArtistRole::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DisplayArtistRole_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ext_value_ = nullptr;
}

DisplayArtistRole::~DisplayArtistRole() {
  // @@protoc_insertion_point(destructor:ern411.ern.DisplayArtistRole)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DisplayArtistRole::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  namespace__.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ext_value_;
}

void DisplayArtistRole::ArenaDtor(void* object) {
  DisplayArtistRole* _this = reinterpret_cast< DisplayArtistRole* >(object);
  (void)_this;
}
void DisplayArtistRole::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DisplayArtistRole::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DisplayArtistRole& DisplayArtistRole::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DisplayArtistRole_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void DisplayArtistRole::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.DisplayArtistRole)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      namespace__.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      user_defined_value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(ext_value_ != nullptr);
      ext_value_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DisplayArtistRole::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string namespace = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_namespace_();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.DisplayArtistRole.namespace");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string user_defined_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_user_defined_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.DisplayArtistRole.user_defined_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.avs.DisplayArtistRole ext_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DisplayArtistRole::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.DisplayArtistRole)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string namespace = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_namespace_().data(), static_cast<int>(this->_internal_namespace_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.DisplayArtistRole.namespace");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_namespace_(), target);
  }

  // optional string user_defined_value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_user_defined_value().data(), static_cast<int>(this->_internal_user_defined_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.DisplayArtistRole.user_defined_value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_defined_value(), target);
  }

  // optional .ern411.avs.DisplayArtistRole ext_value = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::ext_value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.DisplayArtistRole)
  return target;
}

size_t DisplayArtistRole::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.DisplayArtistRole)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string namespace = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_namespace_());
    }

    // optional string user_defined_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_defined_value());
    }

    // optional .ern411.avs.DisplayArtistRole ext_value = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ext_value_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DisplayArtistRole::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.DisplayArtistRole)
  GOOGLE_DCHECK_NE(&from, this);
  const DisplayArtistRole* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DisplayArtistRole>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.DisplayArtistRole)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.DisplayArtistRole)
    MergeFrom(*source);
  }
}

void DisplayArtistRole::MergeFrom(const DisplayArtistRole& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.DisplayArtistRole)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_namespace_(from._internal_namespace_());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_user_defined_value(from._internal_user_defined_value());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_ext_value()->::ern411::avs::DisplayArtistRole::MergeFrom(from._internal_ext_value());
    }
  }
}

void DisplayArtistRole::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.DisplayArtistRole)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DisplayArtistRole::CopyFrom(const DisplayArtistRole& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.DisplayArtistRole)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DisplayArtistRole::IsInitialized() const {
  return true;
}

void DisplayArtistRole::InternalSwap(DisplayArtistRole* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  namespace__.Swap(&other->namespace__, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_defined_value_.Swap(&other->user_defined_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(ext_value_, other->ext_value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DisplayArtistRole::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DisplayCredits::InitAsDefaultInstance() {
  ::ern411::ern::_DisplayCredits_default_instance_._instance.get_mutable()->applicable_territory_code_ = const_cast< ::ern411::avs::CurrentTerritoryCode*>(
      ::ern411::avs::CurrentTerritoryCode::internal_default_instance());
}
class DisplayCredits::_Internal {
 public:
  using HasBits = decltype(std::declval<DisplayCredits>()._has_bits_);
  static const ::ern411::avs::CurrentTerritoryCode& applicable_territory_code(const DisplayCredits* msg);
  static void set_has_applicable_territory_code(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_display_credit_party(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_display_credit_text(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_default(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_language_and_script_code(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_name_used_in_display_credit(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::ern411::avs::CurrentTerritoryCode&
DisplayCredits::_Internal::applicable_territory_code(const DisplayCredits* msg) {
  return *msg->applicable_territory_code_;
}
void DisplayCredits::clear_applicable_territory_code() {
  if (applicable_territory_code_ != nullptr) applicable_territory_code_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
DisplayCredits::DisplayCredits(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.DisplayCredits)
}
DisplayCredits::DisplayCredits(const DisplayCredits& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  display_credit_party_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_display_credit_party()) {
    display_credit_party_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_display_credit_party(),
      GetArena());
  }
  display_credit_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_display_credit_text()) {
    display_credit_text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_display_credit_text(),
      GetArena());
  }
  language_and_script_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_language_and_script_code()) {
    language_and_script_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_language_and_script_code(),
      GetArena());
  }
  name_used_in_display_credit_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name_used_in_display_credit()) {
    name_used_in_display_credit_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name_used_in_display_credit(),
      GetArena());
  }
  if (from._internal_has_applicable_territory_code()) {
    applicable_territory_code_ = new ::ern411::avs::CurrentTerritoryCode(*from.applicable_territory_code_);
  } else {
    applicable_territory_code_ = nullptr;
  }
  is_default_ = from.is_default_;
  // @@protoc_insertion_point(copy_constructor:ern411.ern.DisplayCredits)
}

void DisplayCredits::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DisplayCredits_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  display_credit_party_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  display_credit_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  language_and_script_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_used_in_display_credit_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&applicable_territory_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_default_) -
      reinterpret_cast<char*>(&applicable_territory_code_)) + sizeof(is_default_));
}

DisplayCredits::~DisplayCredits() {
  // @@protoc_insertion_point(destructor:ern411.ern.DisplayCredits)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DisplayCredits::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  display_credit_party_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  display_credit_text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  language_and_script_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_used_in_display_credit_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete applicable_territory_code_;
}

void DisplayCredits::ArenaDtor(void* object) {
  DisplayCredits* _this = reinterpret_cast< DisplayCredits* >(object);
  (void)_this;
}
void DisplayCredits::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DisplayCredits::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DisplayCredits& DisplayCredits::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DisplayCredits_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void DisplayCredits::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.DisplayCredits)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      display_credit_party_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      display_credit_text_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      language_and_script_code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      name_used_in_display_credit_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(applicable_territory_code_ != nullptr);
      applicable_territory_code_->Clear();
    }
  }
  is_default_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DisplayCredits::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ern411.avs.CurrentTerritoryCode applicable_territory_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_applicable_territory_code(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string display_credit_party = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_display_credit_party();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.DisplayCredits.display_credit_party");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string display_credit_text = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_display_credit_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.DisplayCredits.display_credit_text");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_default = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_is_default(&has_bits);
          is_default_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string language_and_script_code = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_language_and_script_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.DisplayCredits.language_and_script_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name_used_in_display_credit = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_name_used_in_display_credit();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.DisplayCredits.name_used_in_display_credit");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DisplayCredits::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.DisplayCredits)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ern411.avs.CurrentTerritoryCode applicable_territory_code = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::applicable_territory_code(this), target, stream);
  }

  // optional string display_credit_party = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_display_credit_party().data(), static_cast<int>(this->_internal_display_credit_party().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.DisplayCredits.display_credit_party");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_display_credit_party(), target);
  }

  // optional string display_credit_text = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_display_credit_text().data(), static_cast<int>(this->_internal_display_credit_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.DisplayCredits.display_credit_text");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_display_credit_text(), target);
  }

  // optional bool is_default = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_is_default(), target);
  }

  // optional string language_and_script_code = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_language_and_script_code().data(), static_cast<int>(this->_internal_language_and_script_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.DisplayCredits.language_and_script_code");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_language_and_script_code(), target);
  }

  // optional string name_used_in_display_credit = 6;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name_used_in_display_credit().data(), static_cast<int>(this->_internal_name_used_in_display_credit().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.DisplayCredits.name_used_in_display_credit");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_name_used_in_display_credit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.DisplayCredits)
  return target;
}

size_t DisplayCredits::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.DisplayCredits)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string display_credit_party = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_display_credit_party());
    }

    // optional string display_credit_text = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_display_credit_text());
    }

    // optional string language_and_script_code = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_language_and_script_code());
    }

    // optional string name_used_in_display_credit = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name_used_in_display_credit());
    }

    // optional .ern411.avs.CurrentTerritoryCode applicable_territory_code = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *applicable_territory_code_);
    }

    // optional bool is_default = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DisplayCredits::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.DisplayCredits)
  GOOGLE_DCHECK_NE(&from, this);
  const DisplayCredits* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DisplayCredits>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.DisplayCredits)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.DisplayCredits)
    MergeFrom(*source);
  }
}

void DisplayCredits::MergeFrom(const DisplayCredits& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.DisplayCredits)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_display_credit_party(from._internal_display_credit_party());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_display_credit_text(from._internal_display_credit_text());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_language_and_script_code(from._internal_language_and_script_code());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_name_used_in_display_credit(from._internal_name_used_in_display_credit());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_applicable_territory_code()->::ern411::avs::CurrentTerritoryCode::MergeFrom(from._internal_applicable_territory_code());
    }
    if (cached_has_bits & 0x00000020u) {
      is_default_ = from.is_default_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DisplayCredits::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.DisplayCredits)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DisplayCredits::CopyFrom(const DisplayCredits& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.DisplayCredits)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DisplayCredits::IsInitialized() const {
  return true;
}

void DisplayCredits::InternalSwap(DisplayCredits* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  display_credit_party_.Swap(&other->display_credit_party_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  display_credit_text_.Swap(&other->display_credit_text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  language_and_script_code_.Swap(&other->language_and_script_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_used_in_display_credit_.Swap(&other->name_used_in_display_credit_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DisplayCredits, is_default_)
      + sizeof(DisplayCredits::is_default_)
      - PROTOBUF_FIELD_OFFSET(DisplayCredits, applicable_territory_code_)>(
          reinterpret_cast<char*>(&applicable_territory_code_),
          reinterpret_cast<char*>(&other->applicable_territory_code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DisplayCredits::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DisplaySubTitle::InitAsDefaultInstance() {
  ::ern411::ern::_DisplaySubTitle_default_instance_._instance.get_mutable()->sub_title_type_ = const_cast< ::ern411::avs::SubTitleType*>(
      ::ern411::avs::SubTitleType::internal_default_instance());
}
class DisplaySubTitle::_Internal {
 public:
  using HasBits = decltype(std::declval<DisplaySubTitle>()._has_bits_);
  static void set_has_is_displayed_in_title(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_sequence_number(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::ern411::avs::SubTitleType& sub_title_type(const DisplaySubTitle* msg);
  static void set_has_sub_title_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ext_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::ern411::avs::SubTitleType&
DisplaySubTitle::_Internal::sub_title_type(const DisplaySubTitle* msg) {
  return *msg->sub_title_type_;
}
void DisplaySubTitle::clear_sub_title_type() {
  if (sub_title_type_ != nullptr) sub_title_type_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
DisplaySubTitle::DisplaySubTitle(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.DisplaySubTitle)
}
DisplaySubTitle::DisplaySubTitle(const DisplaySubTitle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ext_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ext_value()) {
    ext_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ext_value(),
      GetArena());
  }
  if (from._internal_has_sub_title_type()) {
    sub_title_type_ = new ::ern411::avs::SubTitleType(*from.sub_title_type_);
  } else {
    sub_title_type_ = nullptr;
  }
  ::memcpy(&is_displayed_in_title_, &from.is_displayed_in_title_,
    static_cast<size_t>(reinterpret_cast<char*>(&sequence_number_) -
    reinterpret_cast<char*>(&is_displayed_in_title_)) + sizeof(sequence_number_));
  // @@protoc_insertion_point(copy_constructor:ern411.ern.DisplaySubTitle)
}

void DisplaySubTitle::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DisplaySubTitle_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  ext_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&sub_title_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sequence_number_) -
      reinterpret_cast<char*>(&sub_title_type_)) + sizeof(sequence_number_));
}

DisplaySubTitle::~DisplaySubTitle() {
  // @@protoc_insertion_point(destructor:ern411.ern.DisplaySubTitle)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DisplaySubTitle::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  ext_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete sub_title_type_;
}

void DisplaySubTitle::ArenaDtor(void* object) {
  DisplaySubTitle* _this = reinterpret_cast< DisplaySubTitle* >(object);
  (void)_this;
}
void DisplaySubTitle::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DisplaySubTitle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DisplaySubTitle& DisplaySubTitle::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DisplaySubTitle_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void DisplaySubTitle::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.DisplaySubTitle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ext_value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(sub_title_type_ != nullptr);
      sub_title_type_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&is_displayed_in_title_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sequence_number_) -
        reinterpret_cast<char*>(&is_displayed_in_title_)) + sizeof(sequence_number_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DisplaySubTitle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool is_displayed_in_title = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_is_displayed_in_title(&has_bits);
          is_displayed_in_title_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 sequence_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_sequence_number(&has_bits);
          sequence_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.avs.SubTitleType sub_title_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_sub_title_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string ext_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_ext_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.DisplaySubTitle.ext_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DisplaySubTitle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.DisplaySubTitle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_displayed_in_title = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_displayed_in_title(), target);
  }

  // optional int32 sequence_number = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_sequence_number(), target);
  }

  // optional .ern411.avs.SubTitleType sub_title_type = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::sub_title_type(this), target, stream);
  }

  // optional string ext_value = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ext_value().data(), static_cast<int>(this->_internal_ext_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.DisplaySubTitle.ext_value");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_ext_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.DisplaySubTitle)
  return target;
}

size_t DisplaySubTitle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.DisplaySubTitle)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string ext_value = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ext_value());
    }

    // optional .ern411.avs.SubTitleType sub_title_type = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sub_title_type_);
    }

    // optional bool is_displayed_in_title = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional int32 sequence_number = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_sequence_number());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DisplaySubTitle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.DisplaySubTitle)
  GOOGLE_DCHECK_NE(&from, this);
  const DisplaySubTitle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DisplaySubTitle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.DisplaySubTitle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.DisplaySubTitle)
    MergeFrom(*source);
  }
}

void DisplaySubTitle::MergeFrom(const DisplaySubTitle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.DisplaySubTitle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_ext_value(from._internal_ext_value());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_sub_title_type()->::ern411::avs::SubTitleType::MergeFrom(from._internal_sub_title_type());
    }
    if (cached_has_bits & 0x00000004u) {
      is_displayed_in_title_ = from.is_displayed_in_title_;
    }
    if (cached_has_bits & 0x00000008u) {
      sequence_number_ = from.sequence_number_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DisplaySubTitle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.DisplaySubTitle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DisplaySubTitle::CopyFrom(const DisplaySubTitle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.DisplaySubTitle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DisplaySubTitle::IsInitialized() const {
  return true;
}

void DisplaySubTitle::InternalSwap(DisplaySubTitle* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ext_value_.Swap(&other->ext_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DisplaySubTitle, sequence_number_)
      + sizeof(DisplaySubTitle::sequence_number_)
      - PROTOBUF_FIELD_OFFSET(DisplaySubTitle, sub_title_type_)>(
          reinterpret_cast<char*>(&sub_title_type_),
          reinterpret_cast<char*>(&other->sub_title_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DisplaySubTitle::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DisplayTitle::InitAsDefaultInstance() {
  ::ern411::ern::_DisplayTitle_default_instance_._instance.get_mutable()->applicable_territory_code_ = const_cast< ::ern411::avs::CurrentTerritoryCode*>(
      ::ern411::avs::CurrentTerritoryCode::internal_default_instance());
}
class DisplayTitle::_Internal {
 public:
  using HasBits = decltype(std::declval<DisplayTitle>()._has_bits_);
  static const ::ern411::avs::CurrentTerritoryCode& applicable_territory_code(const DisplayTitle* msg);
  static void set_has_applicable_territory_code(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_default(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_language_and_script_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_title_text(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::ern411::avs::CurrentTerritoryCode&
DisplayTitle::_Internal::applicable_territory_code(const DisplayTitle* msg) {
  return *msg->applicable_territory_code_;
}
void DisplayTitle::clear_applicable_territory_code() {
  if (applicable_territory_code_ != nullptr) applicable_territory_code_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
DisplayTitle::DisplayTitle(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  sub_title_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.DisplayTitle)
}
DisplayTitle::DisplayTitle(const DisplayTitle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      sub_title_(from.sub_title_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  language_and_script_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_language_and_script_code()) {
    language_and_script_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_language_and_script_code(),
      GetArena());
  }
  title_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_title_text()) {
    title_text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_title_text(),
      GetArena());
  }
  if (from._internal_has_applicable_territory_code()) {
    applicable_territory_code_ = new ::ern411::avs::CurrentTerritoryCode(*from.applicable_territory_code_);
  } else {
    applicable_territory_code_ = nullptr;
  }
  is_default_ = from.is_default_;
  // @@protoc_insertion_point(copy_constructor:ern411.ern.DisplayTitle)
}

void DisplayTitle::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DisplayTitle_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  language_and_script_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  title_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&applicable_territory_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_default_) -
      reinterpret_cast<char*>(&applicable_territory_code_)) + sizeof(is_default_));
}

DisplayTitle::~DisplayTitle() {
  // @@protoc_insertion_point(destructor:ern411.ern.DisplayTitle)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DisplayTitle::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  language_and_script_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  title_text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete applicable_territory_code_;
}

void DisplayTitle::ArenaDtor(void* object) {
  DisplayTitle* _this = reinterpret_cast< DisplayTitle* >(object);
  (void)_this;
}
void DisplayTitle::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DisplayTitle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DisplayTitle& DisplayTitle::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DisplayTitle_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void DisplayTitle::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.DisplayTitle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sub_title_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      language_and_script_code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      title_text_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(applicable_territory_code_ != nullptr);
      applicable_territory_code_->Clear();
    }
  }
  is_default_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DisplayTitle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ern411.avs.CurrentTerritoryCode applicable_territory_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_applicable_territory_code(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_default = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_is_default(&has_bits);
          is_default_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string language_and_script_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_language_and_script_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.DisplayTitle.language_and_script_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.DisplaySubTitle sub_title = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sub_title(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string title_text = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_title_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.DisplayTitle.title_text");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DisplayTitle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.DisplayTitle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ern411.avs.CurrentTerritoryCode applicable_territory_code = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::applicable_territory_code(this), target, stream);
  }

  // optional bool is_default = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_default(), target);
  }

  // optional string language_and_script_code = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_language_and_script_code().data(), static_cast<int>(this->_internal_language_and_script_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.DisplayTitle.language_and_script_code");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_language_and_script_code(), target);
  }

  // repeated .ern411.ern.DisplaySubTitle sub_title = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sub_title_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_sub_title(i), target, stream);
  }

  // optional string title_text = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_title_text().data(), static_cast<int>(this->_internal_title_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.DisplayTitle.title_text");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_title_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.DisplayTitle)
  return target;
}

size_t DisplayTitle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.DisplayTitle)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ern411.ern.DisplaySubTitle sub_title = 4;
  total_size += 1UL * this->_internal_sub_title_size();
  for (const auto& msg : this->sub_title_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string language_and_script_code = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_language_and_script_code());
    }

    // optional string title_text = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_title_text());
    }

    // optional .ern411.avs.CurrentTerritoryCode applicable_territory_code = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *applicable_territory_code_);
    }

    // optional bool is_default = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DisplayTitle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.DisplayTitle)
  GOOGLE_DCHECK_NE(&from, this);
  const DisplayTitle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DisplayTitle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.DisplayTitle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.DisplayTitle)
    MergeFrom(*source);
  }
}

void DisplayTitle::MergeFrom(const DisplayTitle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.DisplayTitle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sub_title_.MergeFrom(from.sub_title_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_language_and_script_code(from._internal_language_and_script_code());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_title_text(from._internal_title_text());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_applicable_territory_code()->::ern411::avs::CurrentTerritoryCode::MergeFrom(from._internal_applicable_territory_code());
    }
    if (cached_has_bits & 0x00000008u) {
      is_default_ = from.is_default_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DisplayTitle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.DisplayTitle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DisplayTitle::CopyFrom(const DisplayTitle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.DisplayTitle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DisplayTitle::IsInitialized() const {
  return true;
}

void DisplayTitle::InternalSwap(DisplayTitle* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  sub_title_.InternalSwap(&other->sub_title_);
  language_and_script_code_.Swap(&other->language_and_script_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  title_text_.Swap(&other->title_text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DisplayTitle, is_default_)
      + sizeof(DisplayTitle::is_default_)
      - PROTOBUF_FIELD_OFFSET(DisplayTitle, applicable_territory_code_)>(
          reinterpret_cast<char*>(&applicable_territory_code_),
          reinterpret_cast<char*>(&other->applicable_territory_code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DisplayTitle::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DisplayTitleText::InitAsDefaultInstance() {
  ::ern411::ern::_DisplayTitleText_default_instance_._instance.get_mutable()->applicable_territory_code_ = const_cast< ::ern411::avs::CurrentTerritoryCode*>(
      ::ern411::avs::CurrentTerritoryCode::internal_default_instance());
}
class DisplayTitleText::_Internal {
 public:
  using HasBits = decltype(std::declval<DisplayTitleText>()._has_bits_);
  static const ::ern411::avs::CurrentTerritoryCode& applicable_territory_code(const DisplayTitleText* msg);
  static void set_has_applicable_territory_code(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_default(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_language_and_script_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ext_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::ern411::avs::CurrentTerritoryCode&
DisplayTitleText::_Internal::applicable_territory_code(const DisplayTitleText* msg) {
  return *msg->applicable_territory_code_;
}
void DisplayTitleText::clear_applicable_territory_code() {
  if (applicable_territory_code_ != nullptr) applicable_territory_code_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
DisplayTitleText::DisplayTitleText(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.DisplayTitleText)
}
DisplayTitleText::DisplayTitleText(const DisplayTitleText& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  language_and_script_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_language_and_script_code()) {
    language_and_script_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_language_and_script_code(),
      GetArena());
  }
  ext_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ext_value()) {
    ext_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ext_value(),
      GetArena());
  }
  if (from._internal_has_applicable_territory_code()) {
    applicable_territory_code_ = new ::ern411::avs::CurrentTerritoryCode(*from.applicable_territory_code_);
  } else {
    applicable_territory_code_ = nullptr;
  }
  is_default_ = from.is_default_;
  // @@protoc_insertion_point(copy_constructor:ern411.ern.DisplayTitleText)
}

void DisplayTitleText::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DisplayTitleText_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  language_and_script_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ext_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&applicable_territory_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_default_) -
      reinterpret_cast<char*>(&applicable_territory_code_)) + sizeof(is_default_));
}

DisplayTitleText::~DisplayTitleText() {
  // @@protoc_insertion_point(destructor:ern411.ern.DisplayTitleText)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DisplayTitleText::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  language_and_script_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ext_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete applicable_territory_code_;
}

void DisplayTitleText::ArenaDtor(void* object) {
  DisplayTitleText* _this = reinterpret_cast< DisplayTitleText* >(object);
  (void)_this;
}
void DisplayTitleText::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DisplayTitleText::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DisplayTitleText& DisplayTitleText::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DisplayTitleText_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void DisplayTitleText::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.DisplayTitleText)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      language_and_script_code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      ext_value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(applicable_territory_code_ != nullptr);
      applicable_territory_code_->Clear();
    }
  }
  is_default_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DisplayTitleText::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ern411.avs.CurrentTerritoryCode applicable_territory_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_applicable_territory_code(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_default = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_is_default(&has_bits);
          is_default_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string language_and_script_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_language_and_script_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.DisplayTitleText.language_and_script_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string ext_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_ext_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.DisplayTitleText.ext_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DisplayTitleText::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.DisplayTitleText)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ern411.avs.CurrentTerritoryCode applicable_territory_code = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::applicable_territory_code(this), target, stream);
  }

  // optional bool is_default = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_default(), target);
  }

  // optional string language_and_script_code = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_language_and_script_code().data(), static_cast<int>(this->_internal_language_and_script_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.DisplayTitleText.language_and_script_code");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_language_and_script_code(), target);
  }

  // optional string ext_value = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ext_value().data(), static_cast<int>(this->_internal_ext_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.DisplayTitleText.ext_value");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_ext_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.DisplayTitleText)
  return target;
}

size_t DisplayTitleText::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.DisplayTitleText)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string language_and_script_code = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_language_and_script_code());
    }

    // optional string ext_value = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ext_value());
    }

    // optional .ern411.avs.CurrentTerritoryCode applicable_territory_code = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *applicable_territory_code_);
    }

    // optional bool is_default = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DisplayTitleText::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.DisplayTitleText)
  GOOGLE_DCHECK_NE(&from, this);
  const DisplayTitleText* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DisplayTitleText>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.DisplayTitleText)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.DisplayTitleText)
    MergeFrom(*source);
  }
}

void DisplayTitleText::MergeFrom(const DisplayTitleText& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.DisplayTitleText)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_language_and_script_code(from._internal_language_and_script_code());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_ext_value(from._internal_ext_value());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_applicable_territory_code()->::ern411::avs::CurrentTerritoryCode::MergeFrom(from._internal_applicable_territory_code());
    }
    if (cached_has_bits & 0x00000008u) {
      is_default_ = from.is_default_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DisplayTitleText::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.DisplayTitleText)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DisplayTitleText::CopyFrom(const DisplayTitleText& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.DisplayTitleText)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DisplayTitleText::IsInitialized() const {
  return true;
}

void DisplayTitleText::InternalSwap(DisplayTitleText* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  language_and_script_code_.Swap(&other->language_and_script_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ext_value_.Swap(&other->ext_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DisplayTitleText, is_default_)
      + sizeof(DisplayTitleText::is_default_)
      - PROTOBUF_FIELD_OFFSET(DisplayTitleText, applicable_territory_code_)>(
          reinterpret_cast<char*>(&applicable_territory_code_),
          reinterpret_cast<char*>(&other->applicable_territory_code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DisplayTitleText::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DistributionChannelPage::InitAsDefaultInstance() {
  ::ern411::ern::_DistributionChannelPage_default_instance_._instance.get_mutable()->page_name_ = const_cast< ::ern411::ern::Name*>(
      ::ern411::ern::Name::internal_default_instance());
}
class DistributionChannelPage::_Internal {
 public:
  using HasBits = decltype(std::declval<DistributionChannelPage>()._has_bits_);
  static const ::ern411::ern::Name& page_name(const DistributionChannelPage* msg);
  static void set_has_page_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_u_r_l(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_user_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::ern411::ern::Name&
DistributionChannelPage::_Internal::page_name(const DistributionChannelPage* msg) {
  return *msg->page_name_;
}
DistributionChannelPage::DistributionChannelPage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  party_id_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.DistributionChannelPage)
}
DistributionChannelPage::DistributionChannelPage(const DistributionChannelPage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      party_id_(from.party_id_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  u_r_l_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_u_r_l()) {
    u_r_l_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_u_r_l(),
      GetArena());
  }
  user_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_user_name()) {
    user_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_name(),
      GetArena());
  }
  if (from._internal_has_page_name()) {
    page_name_ = new ::ern411::ern::Name(*from.page_name_);
  } else {
    page_name_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ern411.ern.DistributionChannelPage)
}

void DistributionChannelPage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DistributionChannelPage_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  u_r_l_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  page_name_ = nullptr;
}

DistributionChannelPage::~DistributionChannelPage() {
  // @@protoc_insertion_point(destructor:ern411.ern.DistributionChannelPage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DistributionChannelPage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  u_r_l_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete page_name_;
}

void DistributionChannelPage::ArenaDtor(void* object) {
  DistributionChannelPage* _this = reinterpret_cast< DistributionChannelPage* >(object);
  (void)_this;
}
void DistributionChannelPage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DistributionChannelPage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DistributionChannelPage& DistributionChannelPage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DistributionChannelPage_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void DistributionChannelPage::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.DistributionChannelPage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  party_id_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      u_r_l_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      user_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(page_name_ != nullptr);
      page_name_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DistributionChannelPage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ern411.ern.Name page_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_page_name(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.DetailedPartyId party_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_party_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string u_r_l = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_u_r_l();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.DistributionChannelPage.u_r_l");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string user_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_user_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.DistributionChannelPage.user_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DistributionChannelPage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.DistributionChannelPage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ern411.ern.Name page_name = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::page_name(this), target, stream);
  }

  // repeated .ern411.ern.DetailedPartyId party_id = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_party_id_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_party_id(i), target, stream);
  }

  // optional string u_r_l = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_u_r_l().data(), static_cast<int>(this->_internal_u_r_l().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.DistributionChannelPage.u_r_l");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_u_r_l(), target);
  }

  // optional string user_name = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_user_name().data(), static_cast<int>(this->_internal_user_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.DistributionChannelPage.user_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_user_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.DistributionChannelPage)
  return target;
}

size_t DistributionChannelPage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.DistributionChannelPage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ern411.ern.DetailedPartyId party_id = 2;
  total_size += 1UL * this->_internal_party_id_size();
  for (const auto& msg : this->party_id_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string u_r_l = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_u_r_l());
    }

    // optional string user_name = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_name());
    }

    // optional .ern411.ern.Name page_name = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *page_name_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DistributionChannelPage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.DistributionChannelPage)
  GOOGLE_DCHECK_NE(&from, this);
  const DistributionChannelPage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DistributionChannelPage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.DistributionChannelPage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.DistributionChannelPage)
    MergeFrom(*source);
  }
}

void DistributionChannelPage::MergeFrom(const DistributionChannelPage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.DistributionChannelPage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  party_id_.MergeFrom(from.party_id_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_u_r_l(from._internal_u_r_l());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_user_name(from._internal_user_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_page_name()->::ern411::ern::Name::MergeFrom(from._internal_page_name());
    }
  }
}

void DistributionChannelPage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.DistributionChannelPage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DistributionChannelPage::CopyFrom(const DistributionChannelPage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.DistributionChannelPage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DistributionChannelPage::IsInitialized() const {
  return true;
}

void DistributionChannelPage::InternalSwap(DistributionChannelPage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  party_id_.InternalSwap(&other->party_id_);
  u_r_l_.Swap(&other->u_r_l_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_name_.Swap(&other->user_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(page_name_, other->page_name_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DistributionChannelPage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EventDate::InitAsDefaultInstance() {
  ::ern411::ern::_EventDate_default_instance_._instance.get_mutable()->applicable_territory_code_ = const_cast< ::ern411::avs::AllTerritoryCode*>(
      ::ern411::avs::AllTerritoryCode::internal_default_instance());
  ::ern411::ern::_EventDate_default_instance_._instance.get_mutable()->ext_value_ = const_cast< ::ern411::ern::ddex_IsoDate*>(
      ::ern411::ern::ddex_IsoDate::internal_default_instance());
}
class EventDate::_Internal {
 public:
  using HasBits = decltype(std::declval<EventDate>()._has_bits_);
  static const ::ern411::avs::AllTerritoryCode& applicable_territory_code(const EventDate* msg);
  static void set_has_applicable_territory_code(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_after(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_is_approximate(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_is_before(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_language_and_script_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_location_description(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::ern411::ern::ddex_IsoDate& ext_value(const EventDate* msg);
  static void set_has_ext_value(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::ern411::avs::AllTerritoryCode&
EventDate::_Internal::applicable_territory_code(const EventDate* msg) {
  return *msg->applicable_territory_code_;
}
const ::ern411::ern::ddex_IsoDate&
EventDate::_Internal::ext_value(const EventDate* msg) {
  return *msg->ext_value_;
}
void EventDate::clear_applicable_territory_code() {
  if (applicable_territory_code_ != nullptr) applicable_territory_code_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
EventDate::EventDate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.EventDate)
}
EventDate::EventDate(const EventDate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  language_and_script_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_language_and_script_code()) {
    language_and_script_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_language_and_script_code(),
      GetArena());
  }
  location_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_location_description()) {
    location_description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_location_description(),
      GetArena());
  }
  if (from._internal_has_applicable_territory_code()) {
    applicable_territory_code_ = new ::ern411::avs::AllTerritoryCode(*from.applicable_territory_code_);
  } else {
    applicable_territory_code_ = nullptr;
  }
  if (from._internal_has_ext_value()) {
    ext_value_ = new ::ern411::ern::ddex_IsoDate(*from.ext_value_);
  } else {
    ext_value_ = nullptr;
  }
  ::memcpy(&is_after_, &from.is_after_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_before_) -
    reinterpret_cast<char*>(&is_after_)) + sizeof(is_before_));
  // @@protoc_insertion_point(copy_constructor:ern411.ern.EventDate)
}

void EventDate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EventDate_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  language_and_script_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  location_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&applicable_territory_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_before_) -
      reinterpret_cast<char*>(&applicable_territory_code_)) + sizeof(is_before_));
}

EventDate::~EventDate() {
  // @@protoc_insertion_point(destructor:ern411.ern.EventDate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EventDate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  language_and_script_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  location_description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete applicable_territory_code_;
  if (this != internal_default_instance()) delete ext_value_;
}

void EventDate::ArenaDtor(void* object) {
  EventDate* _this = reinterpret_cast< EventDate* >(object);
  (void)_this;
}
void EventDate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EventDate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EventDate& EventDate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EventDate_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void EventDate::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.EventDate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      language_and_script_code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      location_description_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(applicable_territory_code_ != nullptr);
      applicable_territory_code_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(ext_value_ != nullptr);
      ext_value_->Clear();
    }
  }
  ::memset(&is_after_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_before_) -
      reinterpret_cast<char*>(&is_after_)) + sizeof(is_before_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EventDate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ern411.avs.AllTerritoryCode applicable_territory_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_applicable_territory_code(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_after = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_is_after(&has_bits);
          is_after_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_approximate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_is_approximate(&has_bits);
          is_approximate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_before = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_is_before(&has_bits);
          is_before_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string language_and_script_code = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_language_and_script_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.EventDate.language_and_script_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string location_description = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_location_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.EventDate.location_description");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.ern.ddex_IsoDate ext_value = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EventDate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.EventDate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ern411.avs.AllTerritoryCode applicable_territory_code = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::applicable_territory_code(this), target, stream);
  }

  // optional bool is_after = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_after(), target);
  }

  // optional bool is_approximate = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_approximate(), target);
  }

  // optional bool is_before = 4;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_is_before(), target);
  }

  // optional string language_and_script_code = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_language_and_script_code().data(), static_cast<int>(this->_internal_language_and_script_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.EventDate.language_and_script_code");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_language_and_script_code(), target);
  }

  // optional string location_description = 6;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_location_description().data(), static_cast<int>(this->_internal_location_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.EventDate.location_description");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_location_description(), target);
  }

  // optional .ern411.ern.ddex_IsoDate ext_value = 7;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::ext_value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.EventDate)
  return target;
}

size_t EventDate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.EventDate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string language_and_script_code = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_language_and_script_code());
    }

    // optional string location_description = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_location_description());
    }

    // optional .ern411.avs.AllTerritoryCode applicable_territory_code = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *applicable_territory_code_);
    }

    // optional .ern411.ern.ddex_IsoDate ext_value = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ext_value_);
    }

    // optional bool is_after = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool is_approximate = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool is_before = 4;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EventDate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.EventDate)
  GOOGLE_DCHECK_NE(&from, this);
  const EventDate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EventDate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.EventDate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.EventDate)
    MergeFrom(*source);
  }
}

void EventDate::MergeFrom(const EventDate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.EventDate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_language_and_script_code(from._internal_language_and_script_code());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_location_description(from._internal_location_description());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_applicable_territory_code()->::ern411::avs::AllTerritoryCode::MergeFrom(from._internal_applicable_territory_code());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_ext_value()->::ern411::ern::ddex_IsoDate::MergeFrom(from._internal_ext_value());
    }
    if (cached_has_bits & 0x00000010u) {
      is_after_ = from.is_after_;
    }
    if (cached_has_bits & 0x00000020u) {
      is_approximate_ = from.is_approximate_;
    }
    if (cached_has_bits & 0x00000040u) {
      is_before_ = from.is_before_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EventDate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.EventDate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventDate::CopyFrom(const EventDate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.EventDate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventDate::IsInitialized() const {
  return true;
}

void EventDate::InternalSwap(EventDate* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  language_and_script_code_.Swap(&other->language_and_script_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  location_description_.Swap(&other->location_description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EventDate, is_before_)
      + sizeof(EventDate::is_before_)
      - PROTOBUF_FIELD_OFFSET(EventDate, applicable_territory_code_)>(
          reinterpret_cast<char*>(&applicable_territory_code_),
          reinterpret_cast<char*>(&other->applicable_territory_code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EventDate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EventDateTime::InitAsDefaultInstance() {
  ::ern411::ern::_EventDateTime_default_instance_._instance.get_mutable()->territory_code_ = const_cast< ::ern411::avs::AllTerritoryCode*>(
      ::ern411::avs::AllTerritoryCode::internal_default_instance());
}
class EventDateTime::_Internal {
 public:
  using HasBits = decltype(std::declval<EventDateTime>()._has_bits_);
  static void set_has_is_after(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_is_approximate(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_is_before(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_language_and_script_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_location_description(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::ern411::avs::AllTerritoryCode& territory_code(const EventDateTime* msg);
  static void set_has_territory_code(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_ext_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::ern411::avs::AllTerritoryCode&
EventDateTime::_Internal::territory_code(const EventDateTime* msg) {
  return *msg->territory_code_;
}
void EventDateTime::clear_territory_code() {
  if (territory_code_ != nullptr) territory_code_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
EventDateTime::EventDateTime(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.EventDateTime)
}
EventDateTime::EventDateTime(const EventDateTime& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  language_and_script_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_language_and_script_code()) {
    language_and_script_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_language_and_script_code(),
      GetArena());
  }
  location_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_location_description()) {
    location_description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_location_description(),
      GetArena());
  }
  ext_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ext_value()) {
    ext_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ext_value(),
      GetArena());
  }
  if (from._internal_has_territory_code()) {
    territory_code_ = new ::ern411::avs::AllTerritoryCode(*from.territory_code_);
  } else {
    territory_code_ = nullptr;
  }
  ::memcpy(&is_after_, &from.is_after_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_before_) -
    reinterpret_cast<char*>(&is_after_)) + sizeof(is_before_));
  // @@protoc_insertion_point(copy_constructor:ern411.ern.EventDateTime)
}

void EventDateTime::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EventDateTime_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  language_and_script_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  location_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ext_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&territory_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_before_) -
      reinterpret_cast<char*>(&territory_code_)) + sizeof(is_before_));
}

EventDateTime::~EventDateTime() {
  // @@protoc_insertion_point(destructor:ern411.ern.EventDateTime)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EventDateTime::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  language_and_script_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  location_description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ext_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete territory_code_;
}

void EventDateTime::ArenaDtor(void* object) {
  EventDateTime* _this = reinterpret_cast< EventDateTime* >(object);
  (void)_this;
}
void EventDateTime::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EventDateTime::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EventDateTime& EventDateTime::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EventDateTime_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void EventDateTime::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.EventDateTime)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      language_and_script_code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      location_description_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      ext_value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(territory_code_ != nullptr);
      territory_code_->Clear();
    }
  }
  ::memset(&is_after_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_before_) -
      reinterpret_cast<char*>(&is_after_)) + sizeof(is_before_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EventDateTime::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool is_after = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_is_after(&has_bits);
          is_after_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_approximate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_is_approximate(&has_bits);
          is_approximate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_before = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_is_before(&has_bits);
          is_before_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string language_and_script_code = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_language_and_script_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.EventDateTime.language_and_script_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string location_description = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_location_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.EventDateTime.location_description");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.avs.AllTerritoryCode territory_code = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_territory_code(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string ext_value = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_ext_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.EventDateTime.ext_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EventDateTime::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.EventDateTime)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_after = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_after(), target);
  }

  // optional bool is_approximate = 2;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_approximate(), target);
  }

  // optional bool is_before = 3;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_before(), target);
  }

  // optional string language_and_script_code = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_language_and_script_code().data(), static_cast<int>(this->_internal_language_and_script_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.EventDateTime.language_and_script_code");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_language_and_script_code(), target);
  }

  // optional string location_description = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_location_description().data(), static_cast<int>(this->_internal_location_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.EventDateTime.location_description");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_location_description(), target);
  }

  // optional .ern411.avs.AllTerritoryCode territory_code = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::territory_code(this), target, stream);
  }

  // optional string ext_value = 7;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ext_value().data(), static_cast<int>(this->_internal_ext_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.EventDateTime.ext_value");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_ext_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.EventDateTime)
  return target;
}

size_t EventDateTime::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.EventDateTime)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string language_and_script_code = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_language_and_script_code());
    }

    // optional string location_description = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_location_description());
    }

    // optional string ext_value = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ext_value());
    }

    // optional .ern411.avs.AllTerritoryCode territory_code = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *territory_code_);
    }

    // optional bool is_after = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool is_approximate = 2;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool is_before = 3;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EventDateTime::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.EventDateTime)
  GOOGLE_DCHECK_NE(&from, this);
  const EventDateTime* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EventDateTime>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.EventDateTime)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.EventDateTime)
    MergeFrom(*source);
  }
}

void EventDateTime::MergeFrom(const EventDateTime& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.EventDateTime)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_language_and_script_code(from._internal_language_and_script_code());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_location_description(from._internal_location_description());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_ext_value(from._internal_ext_value());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_territory_code()->::ern411::avs::AllTerritoryCode::MergeFrom(from._internal_territory_code());
    }
    if (cached_has_bits & 0x00000010u) {
      is_after_ = from.is_after_;
    }
    if (cached_has_bits & 0x00000020u) {
      is_approximate_ = from.is_approximate_;
    }
    if (cached_has_bits & 0x00000040u) {
      is_before_ = from.is_before_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EventDateTime::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.EventDateTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventDateTime::CopyFrom(const EventDateTime& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.EventDateTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventDateTime::IsInitialized() const {
  return true;
}

void EventDateTime::InternalSwap(EventDateTime* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  language_and_script_code_.Swap(&other->language_and_script_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  location_description_.Swap(&other->location_description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ext_value_.Swap(&other->ext_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EventDateTime, is_before_)
      + sizeof(EventDateTime::is_before_)
      - PROTOBUF_FIELD_OFFSET(EventDateTime, territory_code_)>(
          reinterpret_cast<char*>(&territory_code_),
          reinterpret_cast<char*>(&other->territory_code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EventDateTime::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EventDateTimeWithoutFlags::InitAsDefaultInstance() {
  ::ern411::ern::_EventDateTimeWithoutFlags_default_instance_._instance.get_mutable()->applicable_territory_code_ = const_cast< ::ern411::avs::AllTerritoryCode*>(
      ::ern411::avs::AllTerritoryCode::internal_default_instance());
}
class EventDateTimeWithoutFlags::_Internal {
 public:
  using HasBits = decltype(std::declval<EventDateTimeWithoutFlags>()._has_bits_);
  static const ::ern411::avs::AllTerritoryCode& applicable_territory_code(const EventDateTimeWithoutFlags* msg);
  static void set_has_applicable_territory_code(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_is_approximate(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_language_and_script_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_location_description(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ext_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::ern411::avs::AllTerritoryCode&
EventDateTimeWithoutFlags::_Internal::applicable_territory_code(const EventDateTimeWithoutFlags* msg) {
  return *msg->applicable_territory_code_;
}
void EventDateTimeWithoutFlags::clear_applicable_territory_code() {
  if (applicable_territory_code_ != nullptr) applicable_territory_code_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
EventDateTimeWithoutFlags::EventDateTimeWithoutFlags(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.EventDateTimeWithoutFlags)
}
EventDateTimeWithoutFlags::EventDateTimeWithoutFlags(const EventDateTimeWithoutFlags& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  language_and_script_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_language_and_script_code()) {
    language_and_script_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_language_and_script_code(),
      GetArena());
  }
  location_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_location_description()) {
    location_description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_location_description(),
      GetArena());
  }
  ext_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ext_value()) {
    ext_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ext_value(),
      GetArena());
  }
  if (from._internal_has_applicable_territory_code()) {
    applicable_territory_code_ = new ::ern411::avs::AllTerritoryCode(*from.applicable_territory_code_);
  } else {
    applicable_territory_code_ = nullptr;
  }
  is_approximate_ = from.is_approximate_;
  // @@protoc_insertion_point(copy_constructor:ern411.ern.EventDateTimeWithoutFlags)
}

void EventDateTimeWithoutFlags::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EventDateTimeWithoutFlags_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  language_and_script_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  location_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ext_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&applicable_territory_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_approximate_) -
      reinterpret_cast<char*>(&applicable_territory_code_)) + sizeof(is_approximate_));
}

EventDateTimeWithoutFlags::~EventDateTimeWithoutFlags() {
  // @@protoc_insertion_point(destructor:ern411.ern.EventDateTimeWithoutFlags)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EventDateTimeWithoutFlags::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  language_and_script_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  location_description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ext_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete applicable_territory_code_;
}

void EventDateTimeWithoutFlags::ArenaDtor(void* object) {
  EventDateTimeWithoutFlags* _this = reinterpret_cast< EventDateTimeWithoutFlags* >(object);
  (void)_this;
}
void EventDateTimeWithoutFlags::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EventDateTimeWithoutFlags::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EventDateTimeWithoutFlags& EventDateTimeWithoutFlags::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EventDateTimeWithoutFlags_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void EventDateTimeWithoutFlags::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.EventDateTimeWithoutFlags)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      language_and_script_code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      location_description_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      ext_value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(applicable_territory_code_ != nullptr);
      applicable_territory_code_->Clear();
    }
  }
  is_approximate_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EventDateTimeWithoutFlags::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ern411.avs.AllTerritoryCode applicable_territory_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_applicable_territory_code(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_approximate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_is_approximate(&has_bits);
          is_approximate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string language_and_script_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_language_and_script_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.EventDateTimeWithoutFlags.language_and_script_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string location_description = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_location_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.EventDateTimeWithoutFlags.location_description");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string ext_value = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_ext_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.EventDateTimeWithoutFlags.ext_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EventDateTimeWithoutFlags::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.EventDateTimeWithoutFlags)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ern411.avs.AllTerritoryCode applicable_territory_code = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::applicable_territory_code(this), target, stream);
  }

  // optional bool is_approximate = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_approximate(), target);
  }

  // optional string language_and_script_code = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_language_and_script_code().data(), static_cast<int>(this->_internal_language_and_script_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.EventDateTimeWithoutFlags.language_and_script_code");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_language_and_script_code(), target);
  }

  // optional string location_description = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_location_description().data(), static_cast<int>(this->_internal_location_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.EventDateTimeWithoutFlags.location_description");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_location_description(), target);
  }

  // optional string ext_value = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ext_value().data(), static_cast<int>(this->_internal_ext_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.EventDateTimeWithoutFlags.ext_value");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_ext_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.EventDateTimeWithoutFlags)
  return target;
}

size_t EventDateTimeWithoutFlags::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.EventDateTimeWithoutFlags)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string language_and_script_code = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_language_and_script_code());
    }

    // optional string location_description = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_location_description());
    }

    // optional string ext_value = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ext_value());
    }

    // optional .ern411.avs.AllTerritoryCode applicable_territory_code = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *applicable_territory_code_);
    }

    // optional bool is_approximate = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EventDateTimeWithoutFlags::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.EventDateTimeWithoutFlags)
  GOOGLE_DCHECK_NE(&from, this);
  const EventDateTimeWithoutFlags* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EventDateTimeWithoutFlags>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.EventDateTimeWithoutFlags)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.EventDateTimeWithoutFlags)
    MergeFrom(*source);
  }
}

void EventDateTimeWithoutFlags::MergeFrom(const EventDateTimeWithoutFlags& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.EventDateTimeWithoutFlags)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_language_and_script_code(from._internal_language_and_script_code());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_location_description(from._internal_location_description());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_ext_value(from._internal_ext_value());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_applicable_territory_code()->::ern411::avs::AllTerritoryCode::MergeFrom(from._internal_applicable_territory_code());
    }
    if (cached_has_bits & 0x00000010u) {
      is_approximate_ = from.is_approximate_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EventDateTimeWithoutFlags::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.EventDateTimeWithoutFlags)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventDateTimeWithoutFlags::CopyFrom(const EventDateTimeWithoutFlags& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.EventDateTimeWithoutFlags)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventDateTimeWithoutFlags::IsInitialized() const {
  return true;
}

void EventDateTimeWithoutFlags::InternalSwap(EventDateTimeWithoutFlags* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  language_and_script_code_.Swap(&other->language_and_script_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  location_description_.Swap(&other->location_description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ext_value_.Swap(&other->ext_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EventDateTimeWithoutFlags, is_approximate_)
      + sizeof(EventDateTimeWithoutFlags::is_approximate_)
      - PROTOBUF_FIELD_OFFSET(EventDateTimeWithoutFlags, applicable_territory_code_)>(
          reinterpret_cast<char*>(&applicable_territory_code_),
          reinterpret_cast<char*>(&other->applicable_territory_code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EventDateTimeWithoutFlags::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EventDateWithDefault::InitAsDefaultInstance() {
  ::ern411::ern::_EventDateWithDefault_default_instance_._instance.get_mutable()->applicable_territory_code_ = const_cast< ::ern411::avs::AllTerritoryCode*>(
      ::ern411::avs::AllTerritoryCode::internal_default_instance());
  ::ern411::ern::_EventDateWithDefault_default_instance_._instance.get_mutable()->ext_value_ = const_cast< ::ern411::ern::ddex_IsoDate*>(
      ::ern411::ern::ddex_IsoDate::internal_default_instance());
}
class EventDateWithDefault::_Internal {
 public:
  using HasBits = decltype(std::declval<EventDateWithDefault>()._has_bits_);
  static const ::ern411::avs::AllTerritoryCode& applicable_territory_code(const EventDateWithDefault* msg);
  static void set_has_applicable_territory_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_approximate(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_default(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::ern411::ern::ddex_IsoDate& ext_value(const EventDateWithDefault* msg);
  static void set_has_ext_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::ern411::avs::AllTerritoryCode&
EventDateWithDefault::_Internal::applicable_territory_code(const EventDateWithDefault* msg) {
  return *msg->applicable_territory_code_;
}
const ::ern411::ern::ddex_IsoDate&
EventDateWithDefault::_Internal::ext_value(const EventDateWithDefault* msg) {
  return *msg->ext_value_;
}
void EventDateWithDefault::clear_applicable_territory_code() {
  if (applicable_territory_code_ != nullptr) applicable_territory_code_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
EventDateWithDefault::EventDateWithDefault(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.EventDateWithDefault)
}
EventDateWithDefault::EventDateWithDefault(const EventDateWithDefault& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_applicable_territory_code()) {
    applicable_territory_code_ = new ::ern411::avs::AllTerritoryCode(*from.applicable_territory_code_);
  } else {
    applicable_territory_code_ = nullptr;
  }
  if (from._internal_has_ext_value()) {
    ext_value_ = new ::ern411::ern::ddex_IsoDate(*from.ext_value_);
  } else {
    ext_value_ = nullptr;
  }
  ::memcpy(&is_approximate_, &from.is_approximate_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_default_) -
    reinterpret_cast<char*>(&is_approximate_)) + sizeof(is_default_));
  // @@protoc_insertion_point(copy_constructor:ern411.ern.EventDateWithDefault)
}

void EventDateWithDefault::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EventDateWithDefault_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  ::memset(&applicable_territory_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_default_) -
      reinterpret_cast<char*>(&applicable_territory_code_)) + sizeof(is_default_));
}

EventDateWithDefault::~EventDateWithDefault() {
  // @@protoc_insertion_point(destructor:ern411.ern.EventDateWithDefault)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EventDateWithDefault::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete applicable_territory_code_;
  if (this != internal_default_instance()) delete ext_value_;
}

void EventDateWithDefault::ArenaDtor(void* object) {
  EventDateWithDefault* _this = reinterpret_cast< EventDateWithDefault* >(object);
  (void)_this;
}
void EventDateWithDefault::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EventDateWithDefault::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EventDateWithDefault& EventDateWithDefault::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EventDateWithDefault_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void EventDateWithDefault::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.EventDateWithDefault)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(applicable_territory_code_ != nullptr);
      applicable_territory_code_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(ext_value_ != nullptr);
      ext_value_->Clear();
    }
  }
  ::memset(&is_approximate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_default_) -
      reinterpret_cast<char*>(&is_approximate_)) + sizeof(is_default_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EventDateWithDefault::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ern411.avs.AllTerritoryCode applicable_territory_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_applicable_territory_code(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_approximate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_is_approximate(&has_bits);
          is_approximate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_default = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_is_default(&has_bits);
          is_default_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.ern.ddex_IsoDate ext_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EventDateWithDefault::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.EventDateWithDefault)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ern411.avs.AllTerritoryCode applicable_territory_code = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::applicable_territory_code(this), target, stream);
  }

  // optional bool is_approximate = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_approximate(), target);
  }

  // optional bool is_default = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_default(), target);
  }

  // optional .ern411.ern.ddex_IsoDate ext_value = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::ext_value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.EventDateWithDefault)
  return target;
}

size_t EventDateWithDefault::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.EventDateWithDefault)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .ern411.avs.AllTerritoryCode applicable_territory_code = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *applicable_territory_code_);
    }

    // optional .ern411.ern.ddex_IsoDate ext_value = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ext_value_);
    }

    // optional bool is_approximate = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool is_default = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EventDateWithDefault::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.EventDateWithDefault)
  GOOGLE_DCHECK_NE(&from, this);
  const EventDateWithDefault* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EventDateWithDefault>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.EventDateWithDefault)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.EventDateWithDefault)
    MergeFrom(*source);
  }
}

void EventDateWithDefault::MergeFrom(const EventDateWithDefault& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.EventDateWithDefault)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_applicable_territory_code()->::ern411::avs::AllTerritoryCode::MergeFrom(from._internal_applicable_territory_code());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_ext_value()->::ern411::ern::ddex_IsoDate::MergeFrom(from._internal_ext_value());
    }
    if (cached_has_bits & 0x00000004u) {
      is_approximate_ = from.is_approximate_;
    }
    if (cached_has_bits & 0x00000008u) {
      is_default_ = from.is_default_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EventDateWithDefault::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.EventDateWithDefault)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventDateWithDefault::CopyFrom(const EventDateWithDefault& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.EventDateWithDefault)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventDateWithDefault::IsInitialized() const {
  return true;
}

void EventDateWithDefault::InternalSwap(EventDateWithDefault* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EventDateWithDefault, is_default_)
      + sizeof(EventDateWithDefault::is_default_)
      - PROTOBUF_FIELD_OFFSET(EventDateWithDefault, applicable_territory_code_)>(
          reinterpret_cast<char*>(&applicable_territory_code_),
          reinterpret_cast<char*>(&other->applicable_territory_code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EventDateWithDefault::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EventDateWithoutFlags::InitAsDefaultInstance() {
  ::ern411::ern::_EventDateWithoutFlags_default_instance_._instance.get_mutable()->applicable_territory_code_ = const_cast< ::ern411::avs::AllTerritoryCode*>(
      ::ern411::avs::AllTerritoryCode::internal_default_instance());
  ::ern411::ern::_EventDateWithoutFlags_default_instance_._instance.get_mutable()->ext_value_ = const_cast< ::ern411::ern::ddex_IsoDate*>(
      ::ern411::ern::ddex_IsoDate::internal_default_instance());
}
class EventDateWithoutFlags::_Internal {
 public:
  using HasBits = decltype(std::declval<EventDateWithoutFlags>()._has_bits_);
  static const ::ern411::avs::AllTerritoryCode& applicable_territory_code(const EventDateWithoutFlags* msg);
  static void set_has_applicable_territory_code(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_approximate(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_language_and_script_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_location_description(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::ern411::ern::ddex_IsoDate& ext_value(const EventDateWithoutFlags* msg);
  static void set_has_ext_value(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::ern411::avs::AllTerritoryCode&
EventDateWithoutFlags::_Internal::applicable_territory_code(const EventDateWithoutFlags* msg) {
  return *msg->applicable_territory_code_;
}
const ::ern411::ern::ddex_IsoDate&
EventDateWithoutFlags::_Internal::ext_value(const EventDateWithoutFlags* msg) {
  return *msg->ext_value_;
}
void EventDateWithoutFlags::clear_applicable_territory_code() {
  if (applicable_territory_code_ != nullptr) applicable_territory_code_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
EventDateWithoutFlags::EventDateWithoutFlags(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.EventDateWithoutFlags)
}
EventDateWithoutFlags::EventDateWithoutFlags(const EventDateWithoutFlags& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  language_and_script_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_language_and_script_code()) {
    language_and_script_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_language_and_script_code(),
      GetArena());
  }
  location_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_location_description()) {
    location_description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_location_description(),
      GetArena());
  }
  if (from._internal_has_applicable_territory_code()) {
    applicable_territory_code_ = new ::ern411::avs::AllTerritoryCode(*from.applicable_territory_code_);
  } else {
    applicable_territory_code_ = nullptr;
  }
  if (from._internal_has_ext_value()) {
    ext_value_ = new ::ern411::ern::ddex_IsoDate(*from.ext_value_);
  } else {
    ext_value_ = nullptr;
  }
  is_approximate_ = from.is_approximate_;
  // @@protoc_insertion_point(copy_constructor:ern411.ern.EventDateWithoutFlags)
}

void EventDateWithoutFlags::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EventDateWithoutFlags_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  language_and_script_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  location_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&applicable_territory_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_approximate_) -
      reinterpret_cast<char*>(&applicable_territory_code_)) + sizeof(is_approximate_));
}

EventDateWithoutFlags::~EventDateWithoutFlags() {
  // @@protoc_insertion_point(destructor:ern411.ern.EventDateWithoutFlags)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EventDateWithoutFlags::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  language_and_script_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  location_description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete applicable_territory_code_;
  if (this != internal_default_instance()) delete ext_value_;
}

void EventDateWithoutFlags::ArenaDtor(void* object) {
  EventDateWithoutFlags* _this = reinterpret_cast< EventDateWithoutFlags* >(object);
  (void)_this;
}
void EventDateWithoutFlags::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EventDateWithoutFlags::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EventDateWithoutFlags& EventDateWithoutFlags::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EventDateWithoutFlags_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void EventDateWithoutFlags::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.EventDateWithoutFlags)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      language_and_script_code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      location_description_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(applicable_territory_code_ != nullptr);
      applicable_territory_code_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(ext_value_ != nullptr);
      ext_value_->Clear();
    }
  }
  is_approximate_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EventDateWithoutFlags::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ern411.avs.AllTerritoryCode applicable_territory_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_applicable_territory_code(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_approximate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_is_approximate(&has_bits);
          is_approximate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string language_and_script_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_language_and_script_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.EventDateWithoutFlags.language_and_script_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string location_description = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_location_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.EventDateWithoutFlags.location_description");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.ern.ddex_IsoDate ext_value = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EventDateWithoutFlags::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.EventDateWithoutFlags)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ern411.avs.AllTerritoryCode applicable_territory_code = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::applicable_territory_code(this), target, stream);
  }

  // optional bool is_approximate = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_approximate(), target);
  }

  // optional string language_and_script_code = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_language_and_script_code().data(), static_cast<int>(this->_internal_language_and_script_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.EventDateWithoutFlags.language_and_script_code");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_language_and_script_code(), target);
  }

  // optional string location_description = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_location_description().data(), static_cast<int>(this->_internal_location_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.EventDateWithoutFlags.location_description");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_location_description(), target);
  }

  // optional .ern411.ern.ddex_IsoDate ext_value = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::ext_value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.EventDateWithoutFlags)
  return target;
}

size_t EventDateWithoutFlags::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.EventDateWithoutFlags)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string language_and_script_code = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_language_and_script_code());
    }

    // optional string location_description = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_location_description());
    }

    // optional .ern411.avs.AllTerritoryCode applicable_territory_code = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *applicable_territory_code_);
    }

    // optional .ern411.ern.ddex_IsoDate ext_value = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ext_value_);
    }

    // optional bool is_approximate = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EventDateWithoutFlags::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.EventDateWithoutFlags)
  GOOGLE_DCHECK_NE(&from, this);
  const EventDateWithoutFlags* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EventDateWithoutFlags>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.EventDateWithoutFlags)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.EventDateWithoutFlags)
    MergeFrom(*source);
  }
}

void EventDateWithoutFlags::MergeFrom(const EventDateWithoutFlags& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.EventDateWithoutFlags)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_language_and_script_code(from._internal_language_and_script_code());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_location_description(from._internal_location_description());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_applicable_territory_code()->::ern411::avs::AllTerritoryCode::MergeFrom(from._internal_applicable_territory_code());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_ext_value()->::ern411::ern::ddex_IsoDate::MergeFrom(from._internal_ext_value());
    }
    if (cached_has_bits & 0x00000010u) {
      is_approximate_ = from.is_approximate_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EventDateWithoutFlags::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.EventDateWithoutFlags)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventDateWithoutFlags::CopyFrom(const EventDateWithoutFlags& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.EventDateWithoutFlags)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventDateWithoutFlags::IsInitialized() const {
  return true;
}

void EventDateWithoutFlags::InternalSwap(EventDateWithoutFlags* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  language_and_script_code_.Swap(&other->language_and_script_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  location_description_.Swap(&other->location_description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EventDateWithoutFlags, is_approximate_)
      + sizeof(EventDateWithoutFlags::is_approximate_)
      - PROTOBUF_FIELD_OFFSET(EventDateWithoutFlags, applicable_territory_code_)>(
          reinterpret_cast<char*>(&applicable_territory_code_),
          reinterpret_cast<char*>(&other->applicable_territory_code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EventDateWithoutFlags::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Extent::InitAsDefaultInstance() {
  ::ern411::ern::_Extent_default_instance_._instance.get_mutable()->unit_of_measure_ = const_cast< ::ern411::avs::UnitOfExtent*>(
      ::ern411::avs::UnitOfExtent::internal_default_instance());
}
class Extent::_Internal {
 public:
  using HasBits = decltype(std::declval<Extent>()._has_bits_);
  static const ::ern411::avs::UnitOfExtent& unit_of_measure(const Extent* msg);
  static void set_has_unit_of_measure(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ext_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::ern411::avs::UnitOfExtent&
Extent::_Internal::unit_of_measure(const Extent* msg) {
  return *msg->unit_of_measure_;
}
void Extent::clear_unit_of_measure() {
  if (unit_of_measure_ != nullptr) unit_of_measure_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
Extent::Extent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.Extent)
}
Extent::Extent(const Extent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_unit_of_measure()) {
    unit_of_measure_ = new ::ern411::avs::UnitOfExtent(*from.unit_of_measure_);
  } else {
    unit_of_measure_ = nullptr;
  }
  ext_value_ = from.ext_value_;
  // @@protoc_insertion_point(copy_constructor:ern411.ern.Extent)
}

void Extent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Extent_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  ::memset(&unit_of_measure_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ext_value_) -
      reinterpret_cast<char*>(&unit_of_measure_)) + sizeof(ext_value_));
}

Extent::~Extent() {
  // @@protoc_insertion_point(destructor:ern411.ern.Extent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Extent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete unit_of_measure_;
}

void Extent::ArenaDtor(void* object) {
  Extent* _this = reinterpret_cast< Extent* >(object);
  (void)_this;
}
void Extent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Extent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Extent& Extent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Extent_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void Extent::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.Extent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(unit_of_measure_ != nullptr);
    unit_of_measure_->Clear();
  }
  ext_value_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Extent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ern411.avs.UnitOfExtent unit_of_measure = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_unit_of_measure(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double ext_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_ext_value(&has_bits);
          ext_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Extent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.Extent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ern411.avs.UnitOfExtent unit_of_measure = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::unit_of_measure(this), target, stream);
  }

  // optional double ext_value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_ext_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.Extent)
  return target;
}

size_t Extent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.Extent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .ern411.avs.UnitOfExtent unit_of_measure = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *unit_of_measure_);
    }

    // optional double ext_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Extent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.Extent)
  GOOGLE_DCHECK_NE(&from, this);
  const Extent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Extent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.Extent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.Extent)
    MergeFrom(*source);
  }
}

void Extent::MergeFrom(const Extent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.Extent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_unit_of_measure()->::ern411::avs::UnitOfExtent::MergeFrom(from._internal_unit_of_measure());
    }
    if (cached_has_bits & 0x00000002u) {
      ext_value_ = from.ext_value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Extent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.Extent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Extent::CopyFrom(const Extent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.Extent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Extent::IsInitialized() const {
  return true;
}

void Extent::InternalSwap(Extent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Extent, ext_value_)
      + sizeof(Extent::ext_value_)
      - PROTOBUF_FIELD_OFFSET(Extent, unit_of_measure_)>(
          reinterpret_cast<char*>(&unit_of_measure_),
          reinterpret_cast<char*>(&other->unit_of_measure_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Extent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ExternalResourceLink::InitAsDefaultInstance() {
  ::ern411::ern::_ExternalResourceLink_default_instance_._instance.get_mutable()->validity_period_ = const_cast< ::ern411::ern::PeriodWithoutFlags*>(
      ::ern411::ern::PeriodWithoutFlags::internal_default_instance());
}
class ExternalResourceLink::_Internal {
 public:
  using HasBits = decltype(std::declval<ExternalResourceLink>()._has_bits_);
  static void set_has_external_link(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_file_format(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::ern411::ern::PeriodWithoutFlags& validity_period(const ExternalResourceLink* msg);
  static void set_has_validity_period(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::ern411::ern::PeriodWithoutFlags&
ExternalResourceLink::_Internal::validity_period(const ExternalResourceLink* msg) {
  return *msg->validity_period_;
}
ExternalResourceLink::ExternalResourceLink(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  externally_linked_resource_type_(arena),
  u_r_l_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.ExternalResourceLink)
}
ExternalResourceLink::ExternalResourceLink(const ExternalResourceLink& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      externally_linked_resource_type_(from.externally_linked_resource_type_),
      u_r_l_(from.u_r_l_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  external_link_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_external_link()) {
    external_link_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_external_link(),
      GetArena());
  }
  file_format_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_file_format()) {
    file_format_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_file_format(),
      GetArena());
  }
  if (from._internal_has_validity_period()) {
    validity_period_ = new ::ern411::ern::PeriodWithoutFlags(*from.validity_period_);
  } else {
    validity_period_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ern411.ern.ExternalResourceLink)
}

void ExternalResourceLink::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ExternalResourceLink_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  external_link_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_format_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  validity_period_ = nullptr;
}

ExternalResourceLink::~ExternalResourceLink() {
  // @@protoc_insertion_point(destructor:ern411.ern.ExternalResourceLink)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ExternalResourceLink::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  external_link_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_format_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete validity_period_;
}

void ExternalResourceLink::ArenaDtor(void* object) {
  ExternalResourceLink* _this = reinterpret_cast< ExternalResourceLink* >(object);
  (void)_this;
}
void ExternalResourceLink::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExternalResourceLink::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExternalResourceLink& ExternalResourceLink::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ExternalResourceLink_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void ExternalResourceLink::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.ExternalResourceLink)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  externally_linked_resource_type_.Clear();
  u_r_l_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      external_link_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      file_format_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(validity_period_ != nullptr);
      validity_period_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExternalResourceLink::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string external_link = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_external_link();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.ExternalResourceLink.external_link");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.ExternallyLinkedResourceType externally_linked_resource_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_externally_linked_resource_type(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string file_format = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_file_format();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.ExternalResourceLink.file_format");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string u_r_l = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_u_r_l();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.ExternalResourceLink.u_r_l");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .ern411.ern.PeriodWithoutFlags validity_period = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_validity_period(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExternalResourceLink::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.ExternalResourceLink)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string external_link = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_external_link().data(), static_cast<int>(this->_internal_external_link().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.ExternalResourceLink.external_link");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_external_link(), target);
  }

  // repeated .ern411.ern.ExternallyLinkedResourceType externally_linked_resource_type = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_externally_linked_resource_type_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_externally_linked_resource_type(i), target, stream);
  }

  // optional string file_format = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_file_format().data(), static_cast<int>(this->_internal_file_format().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.ExternalResourceLink.file_format");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_file_format(), target);
  }

  // repeated string u_r_l = 4;
  for (int i = 0, n = this->_internal_u_r_l_size(); i < n; i++) {
    const auto& s = this->_internal_u_r_l(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.ExternalResourceLink.u_r_l");
    target = stream->WriteString(4, s, target);
  }

  // optional .ern411.ern.PeriodWithoutFlags validity_period = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::validity_period(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.ExternalResourceLink)
  return target;
}

size_t ExternalResourceLink::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.ExternalResourceLink)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ern411.ern.ExternallyLinkedResourceType externally_linked_resource_type = 2;
  total_size += 1UL * this->_internal_externally_linked_resource_type_size();
  for (const auto& msg : this->externally_linked_resource_type_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string u_r_l = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(u_r_l_.size());
  for (int i = 0, n = u_r_l_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      u_r_l_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string external_link = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_external_link());
    }

    // optional string file_format = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_file_format());
    }

    // optional .ern411.ern.PeriodWithoutFlags validity_period = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *validity_period_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExternalResourceLink::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.ExternalResourceLink)
  GOOGLE_DCHECK_NE(&from, this);
  const ExternalResourceLink* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ExternalResourceLink>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.ExternalResourceLink)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.ExternalResourceLink)
    MergeFrom(*source);
  }
}

void ExternalResourceLink::MergeFrom(const ExternalResourceLink& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.ExternalResourceLink)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  externally_linked_resource_type_.MergeFrom(from.externally_linked_resource_type_);
  u_r_l_.MergeFrom(from.u_r_l_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_external_link(from._internal_external_link());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_file_format(from._internal_file_format());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_validity_period()->::ern411::ern::PeriodWithoutFlags::MergeFrom(from._internal_validity_period());
    }
  }
}

void ExternalResourceLink::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.ExternalResourceLink)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExternalResourceLink::CopyFrom(const ExternalResourceLink& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.ExternalResourceLink)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExternalResourceLink::IsInitialized() const {
  return true;
}

void ExternalResourceLink::InternalSwap(ExternalResourceLink* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  externally_linked_resource_type_.InternalSwap(&other->externally_linked_resource_type_);
  u_r_l_.InternalSwap(&other->u_r_l_);
  external_link_.Swap(&other->external_link_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  file_format_.Swap(&other->file_format_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(validity_period_, other->validity_period_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ExternalResourceLink::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ExternallyLinkedResourceType::InitAsDefaultInstance() {
  ::ern411::ern::_ExternallyLinkedResourceType_default_instance_._instance.get_mutable()->ext_value_ = const_cast< ::ern411::avs::ExternallyLinkedResourceType*>(
      ::ern411::avs::ExternallyLinkedResourceType::internal_default_instance());
}
class ExternallyLinkedResourceType::_Internal {
 public:
  using HasBits = decltype(std::declval<ExternallyLinkedResourceType>()._has_bits_);
  static void set_has_namespace_(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_user_defined_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::ern411::avs::ExternallyLinkedResourceType& ext_value(const ExternallyLinkedResourceType* msg);
  static void set_has_ext_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::ern411::avs::ExternallyLinkedResourceType&
ExternallyLinkedResourceType::_Internal::ext_value(const ExternallyLinkedResourceType* msg) {
  return *msg->ext_value_;
}
void ExternallyLinkedResourceType::clear_ext_value() {
  if (ext_value_ != nullptr) ext_value_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
ExternallyLinkedResourceType::ExternallyLinkedResourceType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.ExternallyLinkedResourceType)
}
ExternallyLinkedResourceType::ExternallyLinkedResourceType(const ExternallyLinkedResourceType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_namespace_()) {
    namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_namespace_(),
      GetArena());
  }
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_user_defined_value()) {
    user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_defined_value(),
      GetArena());
  }
  if (from._internal_has_ext_value()) {
    ext_value_ = new ::ern411::avs::ExternallyLinkedResourceType(*from.ext_value_);
  } else {
    ext_value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ern411.ern.ExternallyLinkedResourceType)
}

void ExternallyLinkedResourceType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ExternallyLinkedResourceType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ext_value_ = nullptr;
}

ExternallyLinkedResourceType::~ExternallyLinkedResourceType() {
  // @@protoc_insertion_point(destructor:ern411.ern.ExternallyLinkedResourceType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ExternallyLinkedResourceType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  namespace__.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ext_value_;
}

void ExternallyLinkedResourceType::ArenaDtor(void* object) {
  ExternallyLinkedResourceType* _this = reinterpret_cast< ExternallyLinkedResourceType* >(object);
  (void)_this;
}
void ExternallyLinkedResourceType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExternallyLinkedResourceType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExternallyLinkedResourceType& ExternallyLinkedResourceType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ExternallyLinkedResourceType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void ExternallyLinkedResourceType::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.ExternallyLinkedResourceType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      namespace__.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      user_defined_value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(ext_value_ != nullptr);
      ext_value_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExternallyLinkedResourceType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string namespace = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_namespace_();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.ExternallyLinkedResourceType.namespace");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string user_defined_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_user_defined_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.ExternallyLinkedResourceType.user_defined_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.avs.ExternallyLinkedResourceType ext_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExternallyLinkedResourceType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.ExternallyLinkedResourceType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string namespace = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_namespace_().data(), static_cast<int>(this->_internal_namespace_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.ExternallyLinkedResourceType.namespace");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_namespace_(), target);
  }

  // optional string user_defined_value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_user_defined_value().data(), static_cast<int>(this->_internal_user_defined_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.ExternallyLinkedResourceType.user_defined_value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_defined_value(), target);
  }

  // optional .ern411.avs.ExternallyLinkedResourceType ext_value = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::ext_value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.ExternallyLinkedResourceType)
  return target;
}

size_t ExternallyLinkedResourceType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.ExternallyLinkedResourceType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string namespace = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_namespace_());
    }

    // optional string user_defined_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_defined_value());
    }

    // optional .ern411.avs.ExternallyLinkedResourceType ext_value = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ext_value_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExternallyLinkedResourceType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.ExternallyLinkedResourceType)
  GOOGLE_DCHECK_NE(&from, this);
  const ExternallyLinkedResourceType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ExternallyLinkedResourceType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.ExternallyLinkedResourceType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.ExternallyLinkedResourceType)
    MergeFrom(*source);
  }
}

void ExternallyLinkedResourceType::MergeFrom(const ExternallyLinkedResourceType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.ExternallyLinkedResourceType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_namespace_(from._internal_namespace_());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_user_defined_value(from._internal_user_defined_value());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_ext_value()->::ern411::avs::ExternallyLinkedResourceType::MergeFrom(from._internal_ext_value());
    }
  }
}

void ExternallyLinkedResourceType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.ExternallyLinkedResourceType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExternallyLinkedResourceType::CopyFrom(const ExternallyLinkedResourceType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.ExternallyLinkedResourceType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExternallyLinkedResourceType::IsInitialized() const {
  return true;
}

void ExternallyLinkedResourceType::InternalSwap(ExternallyLinkedResourceType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  namespace__.Swap(&other->namespace__, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_defined_value_.Swap(&other->user_defined_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(ext_value_, other->ext_value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ExternallyLinkedResourceType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void File::InitAsDefaultInstance() {
  ::ern411::ern::_File_default_instance_._instance.get_mutable()->hash_sum_ = const_cast< ::ern411::ern::DetailedHashSum*>(
      ::ern411::ern::DetailedHashSum::internal_default_instance());
}
class File::_Internal {
 public:
  using HasBits = decltype(std::declval<File>()._has_bits_);
  static void set_has_file_size(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::ern411::ern::DetailedHashSum& hash_sum(const File* msg);
  static void set_has_hash_sum(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_u_r_i(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::ern411::ern::DetailedHashSum&
File::_Internal::hash_sum(const File* msg) {
  return *msg->hash_sum_;
}
File::File(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.File)
}
File::File(const File& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  u_r_i_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_u_r_i()) {
    u_r_i_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_u_r_i(),
      GetArena());
  }
  if (from._internal_has_hash_sum()) {
    hash_sum_ = new ::ern411::ern::DetailedHashSum(*from.hash_sum_);
  } else {
    hash_sum_ = nullptr;
  }
  file_size_ = from.file_size_;
  // @@protoc_insertion_point(copy_constructor:ern411.ern.File)
}

void File::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_File_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  u_r_i_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&hash_sum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&file_size_) -
      reinterpret_cast<char*>(&hash_sum_)) + sizeof(file_size_));
}

File::~File() {
  // @@protoc_insertion_point(destructor:ern411.ern.File)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void File::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  u_r_i_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete hash_sum_;
}

void File::ArenaDtor(void* object) {
  File* _this = reinterpret_cast< File* >(object);
  (void)_this;
}
void File::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void File::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const File& File::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_File_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void File::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.File)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      u_r_i_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(hash_sum_ != nullptr);
      hash_sum_->Clear();
    }
  }
  file_size_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* File::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double file_size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_file_size(&has_bits);
          file_size_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .ern411.ern.DetailedHashSum hash_sum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_hash_sum(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string u_r_i = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_u_r_i();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.File.u_r_i");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* File::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.File)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double file_size = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_file_size(), target);
  }

  // optional .ern411.ern.DetailedHashSum hash_sum = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::hash_sum(this), target, stream);
  }

  // optional string u_r_i = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_u_r_i().data(), static_cast<int>(this->_internal_u_r_i().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.File.u_r_i");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_u_r_i(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.File)
  return target;
}

size_t File::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.File)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string u_r_i = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_u_r_i());
    }

    // optional .ern411.ern.DetailedHashSum hash_sum = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *hash_sum_);
    }

    // optional double file_size = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void File::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.File)
  GOOGLE_DCHECK_NE(&from, this);
  const File* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<File>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.File)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.File)
    MergeFrom(*source);
  }
}

void File::MergeFrom(const File& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.File)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_u_r_i(from._internal_u_r_i());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_hash_sum()->::ern411::ern::DetailedHashSum::MergeFrom(from._internal_hash_sum());
    }
    if (cached_has_bits & 0x00000004u) {
      file_size_ = from.file_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void File::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.File)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void File::CopyFrom(const File& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.File)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool File::IsInitialized() const {
  return true;
}

void File::InternalSwap(File* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  u_r_i_.Swap(&other->u_r_i_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(File, file_size_)
      + sizeof(File::file_size_)
      - PROTOBUF_FIELD_OFFSET(File, hash_sum_)>(
          reinterpret_cast<char*>(&hash_sum_),
          reinterpret_cast<char*>(&other->hash_sum_));
}

::PROTOBUF_NAMESPACE_ID::Metadata File::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Fingerprint::InitAsDefaultInstance() {
  ::ern411::ern::_Fingerprint_default_instance_._instance.get_mutable()->algorithm_ = const_cast< ::ern411::ern::FingerprintAlgorithmType*>(
      ::ern411::ern::FingerprintAlgorithmType::internal_default_instance());
  ::ern411::ern::_Fingerprint_default_instance_._instance.get_mutable()->data_type_ = const_cast< ::ern411::avs::BinaryDataType*>(
      ::ern411::avs::BinaryDataType::internal_default_instance());
  ::ern411::ern::_Fingerprint_default_instance_._instance.get_mutable()->file_ = const_cast< ::ern411::ern::File*>(
      ::ern411::ern::File::internal_default_instance());
}
class Fingerprint::_Internal {
 public:
  using HasBits = decltype(std::declval<Fingerprint>()._has_bits_);
  static const ::ern411::ern::FingerprintAlgorithmType& algorithm(const Fingerprint* msg);
  static void set_has_algorithm(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::ern411::avs::BinaryDataType& data_type(const Fingerprint* msg);
  static void set_has_data_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::ern411::ern::File& file(const Fingerprint* msg);
  static void set_has_file(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_fingerprint_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_parameter(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::ern411::ern::FingerprintAlgorithmType&
Fingerprint::_Internal::algorithm(const Fingerprint* msg) {
  return *msg->algorithm_;
}
const ::ern411::avs::BinaryDataType&
Fingerprint::_Internal::data_type(const Fingerprint* msg) {
  return *msg->data_type_;
}
const ::ern411::ern::File&
Fingerprint::_Internal::file(const Fingerprint* msg) {
  return *msg->file_;
}
void Fingerprint::clear_data_type() {
  if (data_type_ != nullptr) data_type_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
Fingerprint::Fingerprint(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.Fingerprint)
}
Fingerprint::Fingerprint(const Fingerprint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  fingerprint_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_fingerprint_value()) {
    fingerprint_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_fingerprint_value(),
      GetArena());
  }
  parameter_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_parameter()) {
    parameter_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_parameter(),
      GetArena());
  }
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_version()) {
    version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_version(),
      GetArena());
  }
  if (from._internal_has_algorithm()) {
    algorithm_ = new ::ern411::ern::FingerprintAlgorithmType(*from.algorithm_);
  } else {
    algorithm_ = nullptr;
  }
  if (from._internal_has_data_type()) {
    data_type_ = new ::ern411::avs::BinaryDataType(*from.data_type_);
  } else {
    data_type_ = nullptr;
  }
  if (from._internal_has_file()) {
    file_ = new ::ern411::ern::File(*from.file_);
  } else {
    file_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ern411.ern.Fingerprint)
}

void Fingerprint::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Fingerprint_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  fingerprint_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  parameter_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&algorithm_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&file_) -
      reinterpret_cast<char*>(&algorithm_)) + sizeof(file_));
}

Fingerprint::~Fingerprint() {
  // @@protoc_insertion_point(destructor:ern411.ern.Fingerprint)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Fingerprint::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  fingerprint_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  parameter_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete algorithm_;
  if (this != internal_default_instance()) delete data_type_;
  if (this != internal_default_instance()) delete file_;
}

void Fingerprint::ArenaDtor(void* object) {
  Fingerprint* _this = reinterpret_cast< Fingerprint* >(object);
  (void)_this;
}
void Fingerprint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Fingerprint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Fingerprint& Fingerprint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Fingerprint_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void Fingerprint::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.Fingerprint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      fingerprint_value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      parameter_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      version_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(algorithm_ != nullptr);
      algorithm_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(data_type_ != nullptr);
      data_type_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(file_ != nullptr);
      file_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Fingerprint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ern411.ern.FingerprintAlgorithmType algorithm = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_algorithm(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.avs.BinaryDataType data_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_data_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.ern.File file = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_file(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string fingerprint_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_fingerprint_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.Fingerprint.fingerprint_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string parameter = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_parameter();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.Fingerprint.parameter");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string version = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.Fingerprint.version");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Fingerprint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.Fingerprint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ern411.ern.FingerprintAlgorithmType algorithm = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::algorithm(this), target, stream);
  }

  // optional .ern411.avs.BinaryDataType data_type = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::data_type(this), target, stream);
  }

  // optional .ern411.ern.File file = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::file(this), target, stream);
  }

  // optional string fingerprint_value = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_fingerprint_value().data(), static_cast<int>(this->_internal_fingerprint_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.Fingerprint.fingerprint_value");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_fingerprint_value(), target);
  }

  // optional string parameter = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_parameter().data(), static_cast<int>(this->_internal_parameter().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.Fingerprint.parameter");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_parameter(), target);
  }

  // optional string version = 6;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.Fingerprint.version");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.Fingerprint)
  return target;
}

size_t Fingerprint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.Fingerprint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string fingerprint_value = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_fingerprint_value());
    }

    // optional string parameter = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_parameter());
    }

    // optional string version = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_version());
    }

    // optional .ern411.ern.FingerprintAlgorithmType algorithm = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *algorithm_);
    }

    // optional .ern411.avs.BinaryDataType data_type = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_type_);
    }

    // optional .ern411.ern.File file = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *file_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Fingerprint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.Fingerprint)
  GOOGLE_DCHECK_NE(&from, this);
  const Fingerprint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Fingerprint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.Fingerprint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.Fingerprint)
    MergeFrom(*source);
  }
}

void Fingerprint::MergeFrom(const Fingerprint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.Fingerprint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_fingerprint_value(from._internal_fingerprint_value());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_parameter(from._internal_parameter());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_version(from._internal_version());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_algorithm()->::ern411::ern::FingerprintAlgorithmType::MergeFrom(from._internal_algorithm());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_data_type()->::ern411::avs::BinaryDataType::MergeFrom(from._internal_data_type());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_file()->::ern411::ern::File::MergeFrom(from._internal_file());
    }
  }
}

void Fingerprint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.Fingerprint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Fingerprint::CopyFrom(const Fingerprint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.Fingerprint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fingerprint::IsInitialized() const {
  return true;
}

void Fingerprint::InternalSwap(Fingerprint* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  fingerprint_value_.Swap(&other->fingerprint_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  parameter_.Swap(&other->parameter_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  version_.Swap(&other->version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Fingerprint, file_)
      + sizeof(Fingerprint::file_)
      - PROTOBUF_FIELD_OFFSET(Fingerprint, algorithm_)>(
          reinterpret_cast<char*>(&algorithm_),
          reinterpret_cast<char*>(&other->algorithm_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Fingerprint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FingerprintAlgorithmType::InitAsDefaultInstance() {
  ::ern411::ern::_FingerprintAlgorithmType_default_instance_._instance.get_mutable()->ext_value_ = const_cast< ::ern411::avs::FingerprintAlgorithmType*>(
      ::ern411::avs::FingerprintAlgorithmType::internal_default_instance());
}
class FingerprintAlgorithmType::_Internal {
 public:
  using HasBits = decltype(std::declval<FingerprintAlgorithmType>()._has_bits_);
  static void set_has_namespace_(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_user_defined_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::ern411::avs::FingerprintAlgorithmType& ext_value(const FingerprintAlgorithmType* msg);
  static void set_has_ext_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::ern411::avs::FingerprintAlgorithmType&
FingerprintAlgorithmType::_Internal::ext_value(const FingerprintAlgorithmType* msg) {
  return *msg->ext_value_;
}
void FingerprintAlgorithmType::clear_ext_value() {
  if (ext_value_ != nullptr) ext_value_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
FingerprintAlgorithmType::FingerprintAlgorithmType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.FingerprintAlgorithmType)
}
FingerprintAlgorithmType::FingerprintAlgorithmType(const FingerprintAlgorithmType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_namespace_()) {
    namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_namespace_(),
      GetArena());
  }
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_user_defined_value()) {
    user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_defined_value(),
      GetArena());
  }
  if (from._internal_has_ext_value()) {
    ext_value_ = new ::ern411::avs::FingerprintAlgorithmType(*from.ext_value_);
  } else {
    ext_value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ern411.ern.FingerprintAlgorithmType)
}

void FingerprintAlgorithmType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FingerprintAlgorithmType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ext_value_ = nullptr;
}

FingerprintAlgorithmType::~FingerprintAlgorithmType() {
  // @@protoc_insertion_point(destructor:ern411.ern.FingerprintAlgorithmType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FingerprintAlgorithmType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  namespace__.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ext_value_;
}

void FingerprintAlgorithmType::ArenaDtor(void* object) {
  FingerprintAlgorithmType* _this = reinterpret_cast< FingerprintAlgorithmType* >(object);
  (void)_this;
}
void FingerprintAlgorithmType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FingerprintAlgorithmType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FingerprintAlgorithmType& FingerprintAlgorithmType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FingerprintAlgorithmType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void FingerprintAlgorithmType::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.FingerprintAlgorithmType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      namespace__.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      user_defined_value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(ext_value_ != nullptr);
      ext_value_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FingerprintAlgorithmType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string namespace = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_namespace_();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.FingerprintAlgorithmType.namespace");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string user_defined_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_user_defined_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.FingerprintAlgorithmType.user_defined_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.avs.FingerprintAlgorithmType ext_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FingerprintAlgorithmType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.FingerprintAlgorithmType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string namespace = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_namespace_().data(), static_cast<int>(this->_internal_namespace_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.FingerprintAlgorithmType.namespace");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_namespace_(), target);
  }

  // optional string user_defined_value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_user_defined_value().data(), static_cast<int>(this->_internal_user_defined_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.FingerprintAlgorithmType.user_defined_value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_defined_value(), target);
  }

  // optional .ern411.avs.FingerprintAlgorithmType ext_value = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::ext_value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.FingerprintAlgorithmType)
  return target;
}

size_t FingerprintAlgorithmType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.FingerprintAlgorithmType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string namespace = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_namespace_());
    }

    // optional string user_defined_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_defined_value());
    }

    // optional .ern411.avs.FingerprintAlgorithmType ext_value = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ext_value_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FingerprintAlgorithmType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.FingerprintAlgorithmType)
  GOOGLE_DCHECK_NE(&from, this);
  const FingerprintAlgorithmType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FingerprintAlgorithmType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.FingerprintAlgorithmType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.FingerprintAlgorithmType)
    MergeFrom(*source);
  }
}

void FingerprintAlgorithmType::MergeFrom(const FingerprintAlgorithmType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.FingerprintAlgorithmType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_namespace_(from._internal_namespace_());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_user_defined_value(from._internal_user_defined_value());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_ext_value()->::ern411::avs::FingerprintAlgorithmType::MergeFrom(from._internal_ext_value());
    }
  }
}

void FingerprintAlgorithmType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.FingerprintAlgorithmType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FingerprintAlgorithmType::CopyFrom(const FingerprintAlgorithmType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.FingerprintAlgorithmType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FingerprintAlgorithmType::IsInitialized() const {
  return true;
}

void FingerprintAlgorithmType::InternalSwap(FingerprintAlgorithmType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  namespace__.Swap(&other->namespace__, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_defined_value_.Swap(&other->user_defined_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(ext_value_, other->ext_value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FingerprintAlgorithmType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FirstPublicationDate::InitAsDefaultInstance() {
  ::ern411::ern::_FirstPublicationDate_default_instance_._instance.get_mutable()->applicable_territory_code_ = const_cast< ::ern411::avs::CurrentTerritoryCode*>(
      ::ern411::avs::CurrentTerritoryCode::internal_default_instance());
  ::ern411::ern::_FirstPublicationDate_default_instance_._instance.get_mutable()->ext_value_ = const_cast< ::ern411::ern::ddex_IsoDate*>(
      ::ern411::ern::ddex_IsoDate::internal_default_instance());
}
class FirstPublicationDate::_Internal {
 public:
  using HasBits = decltype(std::declval<FirstPublicationDate>()._has_bits_);
  static const ::ern411::avs::CurrentTerritoryCode& applicable_territory_code(const FirstPublicationDate* msg);
  static void set_has_applicable_territory_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_default(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::ern411::ern::ddex_IsoDate& ext_value(const FirstPublicationDate* msg);
  static void set_has_ext_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::ern411::avs::CurrentTerritoryCode&
FirstPublicationDate::_Internal::applicable_territory_code(const FirstPublicationDate* msg) {
  return *msg->applicable_territory_code_;
}
const ::ern411::ern::ddex_IsoDate&
FirstPublicationDate::_Internal::ext_value(const FirstPublicationDate* msg) {
  return *msg->ext_value_;
}
void FirstPublicationDate::clear_applicable_territory_code() {
  if (applicable_territory_code_ != nullptr) applicable_territory_code_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
FirstPublicationDate::FirstPublicationDate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.FirstPublicationDate)
}
FirstPublicationDate::FirstPublicationDate(const FirstPublicationDate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_applicable_territory_code()) {
    applicable_territory_code_ = new ::ern411::avs::CurrentTerritoryCode(*from.applicable_territory_code_);
  } else {
    applicable_territory_code_ = nullptr;
  }
  if (from._internal_has_ext_value()) {
    ext_value_ = new ::ern411::ern::ddex_IsoDate(*from.ext_value_);
  } else {
    ext_value_ = nullptr;
  }
  is_default_ = from.is_default_;
  // @@protoc_insertion_point(copy_constructor:ern411.ern.FirstPublicationDate)
}

void FirstPublicationDate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FirstPublicationDate_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  ::memset(&applicable_territory_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_default_) -
      reinterpret_cast<char*>(&applicable_territory_code_)) + sizeof(is_default_));
}

FirstPublicationDate::~FirstPublicationDate() {
  // @@protoc_insertion_point(destructor:ern411.ern.FirstPublicationDate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FirstPublicationDate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete applicable_territory_code_;
  if (this != internal_default_instance()) delete ext_value_;
}

void FirstPublicationDate::ArenaDtor(void* object) {
  FirstPublicationDate* _this = reinterpret_cast< FirstPublicationDate* >(object);
  (void)_this;
}
void FirstPublicationDate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FirstPublicationDate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FirstPublicationDate& FirstPublicationDate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FirstPublicationDate_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void FirstPublicationDate::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.FirstPublicationDate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(applicable_territory_code_ != nullptr);
      applicable_territory_code_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(ext_value_ != nullptr);
      ext_value_->Clear();
    }
  }
  is_default_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FirstPublicationDate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ern411.avs.CurrentTerritoryCode applicable_territory_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_applicable_territory_code(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_default = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_is_default(&has_bits);
          is_default_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.ern.ddex_IsoDate ext_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FirstPublicationDate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.FirstPublicationDate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ern411.avs.CurrentTerritoryCode applicable_territory_code = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::applicable_territory_code(this), target, stream);
  }

  // optional bool is_default = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_default(), target);
  }

  // optional .ern411.ern.ddex_IsoDate ext_value = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::ext_value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.FirstPublicationDate)
  return target;
}

size_t FirstPublicationDate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.FirstPublicationDate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .ern411.avs.CurrentTerritoryCode applicable_territory_code = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *applicable_territory_code_);
    }

    // optional .ern411.ern.ddex_IsoDate ext_value = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ext_value_);
    }

    // optional bool is_default = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FirstPublicationDate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.FirstPublicationDate)
  GOOGLE_DCHECK_NE(&from, this);
  const FirstPublicationDate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FirstPublicationDate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.FirstPublicationDate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.FirstPublicationDate)
    MergeFrom(*source);
  }
}

void FirstPublicationDate::MergeFrom(const FirstPublicationDate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.FirstPublicationDate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_applicable_territory_code()->::ern411::avs::CurrentTerritoryCode::MergeFrom(from._internal_applicable_territory_code());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_ext_value()->::ern411::ern::ddex_IsoDate::MergeFrom(from._internal_ext_value());
    }
    if (cached_has_bits & 0x00000004u) {
      is_default_ = from.is_default_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FirstPublicationDate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.FirstPublicationDate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FirstPublicationDate::CopyFrom(const FirstPublicationDate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.FirstPublicationDate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FirstPublicationDate::IsInitialized() const {
  return true;
}

void FirstPublicationDate::InternalSwap(FirstPublicationDate* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FirstPublicationDate, is_default_)
      + sizeof(FirstPublicationDate::is_default_)
      - PROTOBUF_FIELD_OFFSET(FirstPublicationDate, applicable_territory_code_)>(
          reinterpret_cast<char*>(&applicable_territory_code_),
          reinterpret_cast<char*>(&other->applicable_territory_code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FirstPublicationDate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FrameRate::InitAsDefaultInstance() {
  ::ern411::ern::_FrameRate_default_instance_._instance.get_mutable()->unit_of_measure_ = const_cast< ::ern411::avs::UnitOfFrameRate*>(
      ::ern411::avs::UnitOfFrameRate::internal_default_instance());
}
class FrameRate::_Internal {
 public:
  using HasBits = decltype(std::declval<FrameRate>()._has_bits_);
  static const ::ern411::avs::UnitOfFrameRate& unit_of_measure(const FrameRate* msg);
  static void set_has_unit_of_measure(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ext_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::ern411::avs::UnitOfFrameRate&
FrameRate::_Internal::unit_of_measure(const FrameRate* msg) {
  return *msg->unit_of_measure_;
}
void FrameRate::clear_unit_of_measure() {
  if (unit_of_measure_ != nullptr) unit_of_measure_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
FrameRate::FrameRate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.FrameRate)
}
FrameRate::FrameRate(const FrameRate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_unit_of_measure()) {
    unit_of_measure_ = new ::ern411::avs::UnitOfFrameRate(*from.unit_of_measure_);
  } else {
    unit_of_measure_ = nullptr;
  }
  ext_value_ = from.ext_value_;
  // @@protoc_insertion_point(copy_constructor:ern411.ern.FrameRate)
}

void FrameRate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FrameRate_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  ::memset(&unit_of_measure_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ext_value_) -
      reinterpret_cast<char*>(&unit_of_measure_)) + sizeof(ext_value_));
}

FrameRate::~FrameRate() {
  // @@protoc_insertion_point(destructor:ern411.ern.FrameRate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FrameRate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete unit_of_measure_;
}

void FrameRate::ArenaDtor(void* object) {
  FrameRate* _this = reinterpret_cast< FrameRate* >(object);
  (void)_this;
}
void FrameRate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FrameRate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FrameRate& FrameRate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FrameRate_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void FrameRate::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.FrameRate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(unit_of_measure_ != nullptr);
    unit_of_measure_->Clear();
  }
  ext_value_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FrameRate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ern411.avs.UnitOfFrameRate unit_of_measure = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_unit_of_measure(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double ext_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_ext_value(&has_bits);
          ext_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FrameRate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.FrameRate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ern411.avs.UnitOfFrameRate unit_of_measure = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::unit_of_measure(this), target, stream);
  }

  // optional double ext_value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_ext_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.FrameRate)
  return target;
}

size_t FrameRate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.FrameRate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .ern411.avs.UnitOfFrameRate unit_of_measure = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *unit_of_measure_);
    }

    // optional double ext_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FrameRate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.FrameRate)
  GOOGLE_DCHECK_NE(&from, this);
  const FrameRate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FrameRate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.FrameRate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.FrameRate)
    MergeFrom(*source);
  }
}

void FrameRate::MergeFrom(const FrameRate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.FrameRate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_unit_of_measure()->::ern411::avs::UnitOfFrameRate::MergeFrom(from._internal_unit_of_measure());
    }
    if (cached_has_bits & 0x00000002u) {
      ext_value_ = from.ext_value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FrameRate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.FrameRate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FrameRate::CopyFrom(const FrameRate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.FrameRate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameRate::IsInitialized() const {
  return true;
}

void FrameRate::InternalSwap(FrameRate* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FrameRate, ext_value_)
      + sizeof(FrameRate::ext_value_)
      - PROTOBUF_FIELD_OFFSET(FrameRate, unit_of_measure_)>(
          reinterpret_cast<char*>(&unit_of_measure_),
          reinterpret_cast<char*>(&other->unit_of_measure_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FrameRate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FulfillmentDateWithTerritory::InitAsDefaultInstance() {
  ::ern411::ern::_FulfillmentDateWithTerritory_default_instance_._instance.get_mutable()->applicable_territory_code_ = const_cast< ::ern411::avs::CurrentTerritoryCode*>(
      ::ern411::avs::CurrentTerritoryCode::internal_default_instance());
  ::ern411::ern::_FulfillmentDateWithTerritory_default_instance_._instance.get_mutable()->fulfillment_date_ = const_cast< ::ern411::ern::ddex_IsoDate*>(
      ::ern411::ern::ddex_IsoDate::internal_default_instance());
}
class FulfillmentDateWithTerritory::_Internal {
 public:
  using HasBits = decltype(std::declval<FulfillmentDateWithTerritory>()._has_bits_);
  static const ::ern411::avs::CurrentTerritoryCode& applicable_territory_code(const FulfillmentDateWithTerritory* msg);
  static void set_has_applicable_territory_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ern411::ern::ddex_IsoDate& fulfillment_date(const FulfillmentDateWithTerritory* msg);
  static void set_has_fulfillment_date(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_default(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::ern411::avs::CurrentTerritoryCode&
FulfillmentDateWithTerritory::_Internal::applicable_territory_code(const FulfillmentDateWithTerritory* msg) {
  return *msg->applicable_territory_code_;
}
const ::ern411::ern::ddex_IsoDate&
FulfillmentDateWithTerritory::_Internal::fulfillment_date(const FulfillmentDateWithTerritory* msg) {
  return *msg->fulfillment_date_;
}
void FulfillmentDateWithTerritory::clear_applicable_territory_code() {
  if (applicable_territory_code_ != nullptr) applicable_territory_code_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
FulfillmentDateWithTerritory::FulfillmentDateWithTerritory(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  resource_release_reference_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.FulfillmentDateWithTerritory)
}
FulfillmentDateWithTerritory::FulfillmentDateWithTerritory(const FulfillmentDateWithTerritory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      resource_release_reference_(from.resource_release_reference_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_applicable_territory_code()) {
    applicable_territory_code_ = new ::ern411::avs::CurrentTerritoryCode(*from.applicable_territory_code_);
  } else {
    applicable_territory_code_ = nullptr;
  }
  if (from._internal_has_fulfillment_date()) {
    fulfillment_date_ = new ::ern411::ern::ddex_IsoDate(*from.fulfillment_date_);
  } else {
    fulfillment_date_ = nullptr;
  }
  is_default_ = from.is_default_;
  // @@protoc_insertion_point(copy_constructor:ern411.ern.FulfillmentDateWithTerritory)
}

void FulfillmentDateWithTerritory::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FulfillmentDateWithTerritory_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  ::memset(&applicable_territory_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_default_) -
      reinterpret_cast<char*>(&applicable_territory_code_)) + sizeof(is_default_));
}

FulfillmentDateWithTerritory::~FulfillmentDateWithTerritory() {
  // @@protoc_insertion_point(destructor:ern411.ern.FulfillmentDateWithTerritory)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FulfillmentDateWithTerritory::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete applicable_territory_code_;
  if (this != internal_default_instance()) delete fulfillment_date_;
}

void FulfillmentDateWithTerritory::ArenaDtor(void* object) {
  FulfillmentDateWithTerritory* _this = reinterpret_cast< FulfillmentDateWithTerritory* >(object);
  (void)_this;
}
void FulfillmentDateWithTerritory::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FulfillmentDateWithTerritory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FulfillmentDateWithTerritory& FulfillmentDateWithTerritory::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FulfillmentDateWithTerritory_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void FulfillmentDateWithTerritory::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.FulfillmentDateWithTerritory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  resource_release_reference_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(applicable_territory_code_ != nullptr);
      applicable_territory_code_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(fulfillment_date_ != nullptr);
      fulfillment_date_->Clear();
    }
  }
  is_default_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FulfillmentDateWithTerritory::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ern411.avs.CurrentTerritoryCode applicable_territory_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_applicable_territory_code(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.ern.ddex_IsoDate fulfillment_date = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_fulfillment_date(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_default = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_is_default(&has_bits);
          is_default_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string resource_release_reference = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_resource_release_reference();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.FulfillmentDateWithTerritory.resource_release_reference");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FulfillmentDateWithTerritory::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.FulfillmentDateWithTerritory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ern411.avs.CurrentTerritoryCode applicable_territory_code = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::applicable_territory_code(this), target, stream);
  }

  // optional .ern411.ern.ddex_IsoDate fulfillment_date = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::fulfillment_date(this), target, stream);
  }

  // optional bool is_default = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_default(), target);
  }

  // repeated string resource_release_reference = 4;
  for (int i = 0, n = this->_internal_resource_release_reference_size(); i < n; i++) {
    const auto& s = this->_internal_resource_release_reference(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.FulfillmentDateWithTerritory.resource_release_reference");
    target = stream->WriteString(4, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.FulfillmentDateWithTerritory)
  return target;
}

size_t FulfillmentDateWithTerritory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.FulfillmentDateWithTerritory)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string resource_release_reference = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(resource_release_reference_.size());
  for (int i = 0, n = resource_release_reference_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      resource_release_reference_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .ern411.avs.CurrentTerritoryCode applicable_territory_code = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *applicable_territory_code_);
    }

    // optional .ern411.ern.ddex_IsoDate fulfillment_date = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *fulfillment_date_);
    }

    // optional bool is_default = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FulfillmentDateWithTerritory::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.FulfillmentDateWithTerritory)
  GOOGLE_DCHECK_NE(&from, this);
  const FulfillmentDateWithTerritory* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FulfillmentDateWithTerritory>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.FulfillmentDateWithTerritory)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.FulfillmentDateWithTerritory)
    MergeFrom(*source);
  }
}

void FulfillmentDateWithTerritory::MergeFrom(const FulfillmentDateWithTerritory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.FulfillmentDateWithTerritory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  resource_release_reference_.MergeFrom(from.resource_release_reference_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_applicable_territory_code()->::ern411::avs::CurrentTerritoryCode::MergeFrom(from._internal_applicable_territory_code());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_fulfillment_date()->::ern411::ern::ddex_IsoDate::MergeFrom(from._internal_fulfillment_date());
    }
    if (cached_has_bits & 0x00000004u) {
      is_default_ = from.is_default_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FulfillmentDateWithTerritory::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.FulfillmentDateWithTerritory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FulfillmentDateWithTerritory::CopyFrom(const FulfillmentDateWithTerritory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.FulfillmentDateWithTerritory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FulfillmentDateWithTerritory::IsInitialized() const {
  return true;
}

void FulfillmentDateWithTerritory::InternalSwap(FulfillmentDateWithTerritory* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  resource_release_reference_.InternalSwap(&other->resource_release_reference_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FulfillmentDateWithTerritory, is_default_)
      + sizeof(FulfillmentDateWithTerritory::is_default_)
      - PROTOBUF_FIELD_OFFSET(FulfillmentDateWithTerritory, applicable_territory_code_)>(
          reinterpret_cast<char*>(&applicable_territory_code_),
          reinterpret_cast<char*>(&other->applicable_territory_code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FulfillmentDateWithTerritory::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GenreWithTerritory::InitAsDefaultInstance() {
  ::ern411::ern::_GenreWithTerritory_default_instance_._instance.get_mutable()->applicable_territory_code_ = const_cast< ::ern411::avs::CurrentTerritoryCode*>(
      ::ern411::avs::CurrentTerritoryCode::internal_default_instance());
}
class GenreWithTerritory::_Internal {
 public:
  using HasBits = decltype(std::declval<GenreWithTerritory>()._has_bits_);
  static const ::ern411::avs::CurrentTerritoryCode& applicable_territory_code(const GenreWithTerritory* msg);
  static void set_has_applicable_territory_code(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_genre_text(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_default(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_language_and_script_code(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_sub_genre(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::ern411::avs::CurrentTerritoryCode&
GenreWithTerritory::_Internal::applicable_territory_code(const GenreWithTerritory* msg) {
  return *msg->applicable_territory_code_;
}
void GenreWithTerritory::clear_applicable_territory_code() {
  if (applicable_territory_code_ != nullptr) applicable_territory_code_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
GenreWithTerritory::GenreWithTerritory(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.GenreWithTerritory)
}
GenreWithTerritory::GenreWithTerritory(const GenreWithTerritory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  genre_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_genre_text()) {
    genre_text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_genre_text(),
      GetArena());
  }
  language_and_script_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_language_and_script_code()) {
    language_and_script_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_language_and_script_code(),
      GetArena());
  }
  sub_genre_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_sub_genre()) {
    sub_genre_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_sub_genre(),
      GetArena());
  }
  if (from._internal_has_applicable_territory_code()) {
    applicable_territory_code_ = new ::ern411::avs::CurrentTerritoryCode(*from.applicable_territory_code_);
  } else {
    applicable_territory_code_ = nullptr;
  }
  is_default_ = from.is_default_;
  // @@protoc_insertion_point(copy_constructor:ern411.ern.GenreWithTerritory)
}

void GenreWithTerritory::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GenreWithTerritory_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  genre_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  language_and_script_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sub_genre_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&applicable_territory_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_default_) -
      reinterpret_cast<char*>(&applicable_territory_code_)) + sizeof(is_default_));
}

GenreWithTerritory::~GenreWithTerritory() {
  // @@protoc_insertion_point(destructor:ern411.ern.GenreWithTerritory)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GenreWithTerritory::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  genre_text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  language_and_script_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sub_genre_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete applicable_territory_code_;
}

void GenreWithTerritory::ArenaDtor(void* object) {
  GenreWithTerritory* _this = reinterpret_cast< GenreWithTerritory* >(object);
  (void)_this;
}
void GenreWithTerritory::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GenreWithTerritory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GenreWithTerritory& GenreWithTerritory::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GenreWithTerritory_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void GenreWithTerritory::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.GenreWithTerritory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      genre_text_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      language_and_script_code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      sub_genre_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(applicable_territory_code_ != nullptr);
      applicable_territory_code_->Clear();
    }
  }
  is_default_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GenreWithTerritory::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ern411.avs.CurrentTerritoryCode applicable_territory_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_applicable_territory_code(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string genre_text = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_genre_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.GenreWithTerritory.genre_text");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_default = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_is_default(&has_bits);
          is_default_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string language_and_script_code = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_language_and_script_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.GenreWithTerritory.language_and_script_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string sub_genre = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_sub_genre();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.GenreWithTerritory.sub_genre");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GenreWithTerritory::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.GenreWithTerritory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ern411.avs.CurrentTerritoryCode applicable_territory_code = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::applicable_territory_code(this), target, stream);
  }

  // optional string genre_text = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_genre_text().data(), static_cast<int>(this->_internal_genre_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.GenreWithTerritory.genre_text");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_genre_text(), target);
  }

  // optional bool is_default = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_default(), target);
  }

  // optional string language_and_script_code = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_language_and_script_code().data(), static_cast<int>(this->_internal_language_and_script_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.GenreWithTerritory.language_and_script_code");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_language_and_script_code(), target);
  }

  // optional string sub_genre = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_sub_genre().data(), static_cast<int>(this->_internal_sub_genre().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.GenreWithTerritory.sub_genre");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_sub_genre(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.GenreWithTerritory)
  return target;
}

size_t GenreWithTerritory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.GenreWithTerritory)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string genre_text = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_genre_text());
    }

    // optional string language_and_script_code = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_language_and_script_code());
    }

    // optional string sub_genre = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_sub_genre());
    }

    // optional .ern411.avs.CurrentTerritoryCode applicable_territory_code = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *applicable_territory_code_);
    }

    // optional bool is_default = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GenreWithTerritory::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.GenreWithTerritory)
  GOOGLE_DCHECK_NE(&from, this);
  const GenreWithTerritory* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GenreWithTerritory>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.GenreWithTerritory)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.GenreWithTerritory)
    MergeFrom(*source);
  }
}

void GenreWithTerritory::MergeFrom(const GenreWithTerritory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.GenreWithTerritory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_genre_text(from._internal_genre_text());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_language_and_script_code(from._internal_language_and_script_code());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_sub_genre(from._internal_sub_genre());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_applicable_territory_code()->::ern411::avs::CurrentTerritoryCode::MergeFrom(from._internal_applicable_territory_code());
    }
    if (cached_has_bits & 0x00000010u) {
      is_default_ = from.is_default_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GenreWithTerritory::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.GenreWithTerritory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GenreWithTerritory::CopyFrom(const GenreWithTerritory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.GenreWithTerritory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenreWithTerritory::IsInitialized() const {
  return true;
}

void GenreWithTerritory::InternalSwap(GenreWithTerritory* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  genre_text_.Swap(&other->genre_text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  language_and_script_code_.Swap(&other->language_and_script_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sub_genre_.Swap(&other->sub_genre_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GenreWithTerritory, is_default_)
      + sizeof(GenreWithTerritory::is_default_)
      - PROTOBUF_FIELD_OFFSET(GenreWithTerritory, applicable_territory_code_)>(
          reinterpret_cast<char*>(&applicable_territory_code_),
          reinterpret_cast<char*>(&other->applicable_territory_code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GenreWithTerritory::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HashSumAlgorithmType::InitAsDefaultInstance() {
  ::ern411::ern::_HashSumAlgorithmType_default_instance_._instance.get_mutable()->ext_value_ = const_cast< ::ern411::avs::HashSumAlgorithmType*>(
      ::ern411::avs::HashSumAlgorithmType::internal_default_instance());
}
class HashSumAlgorithmType::_Internal {
 public:
  using HasBits = decltype(std::declval<HashSumAlgorithmType>()._has_bits_);
  static void set_has_namespace_(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_user_defined_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::ern411::avs::HashSumAlgorithmType& ext_value(const HashSumAlgorithmType* msg);
  static void set_has_ext_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::ern411::avs::HashSumAlgorithmType&
HashSumAlgorithmType::_Internal::ext_value(const HashSumAlgorithmType* msg) {
  return *msg->ext_value_;
}
void HashSumAlgorithmType::clear_ext_value() {
  if (ext_value_ != nullptr) ext_value_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
HashSumAlgorithmType::HashSumAlgorithmType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.HashSumAlgorithmType)
}
HashSumAlgorithmType::HashSumAlgorithmType(const HashSumAlgorithmType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_namespace_()) {
    namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_namespace_(),
      GetArena());
  }
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_user_defined_value()) {
    user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_defined_value(),
      GetArena());
  }
  if (from._internal_has_ext_value()) {
    ext_value_ = new ::ern411::avs::HashSumAlgorithmType(*from.ext_value_);
  } else {
    ext_value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ern411.ern.HashSumAlgorithmType)
}

void HashSumAlgorithmType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HashSumAlgorithmType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ext_value_ = nullptr;
}

HashSumAlgorithmType::~HashSumAlgorithmType() {
  // @@protoc_insertion_point(destructor:ern411.ern.HashSumAlgorithmType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HashSumAlgorithmType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  namespace__.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ext_value_;
}

void HashSumAlgorithmType::ArenaDtor(void* object) {
  HashSumAlgorithmType* _this = reinterpret_cast< HashSumAlgorithmType* >(object);
  (void)_this;
}
void HashSumAlgorithmType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HashSumAlgorithmType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HashSumAlgorithmType& HashSumAlgorithmType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HashSumAlgorithmType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void HashSumAlgorithmType::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.HashSumAlgorithmType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      namespace__.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      user_defined_value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(ext_value_ != nullptr);
      ext_value_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HashSumAlgorithmType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string namespace = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_namespace_();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.HashSumAlgorithmType.namespace");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string user_defined_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_user_defined_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.HashSumAlgorithmType.user_defined_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.avs.HashSumAlgorithmType ext_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HashSumAlgorithmType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.HashSumAlgorithmType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string namespace = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_namespace_().data(), static_cast<int>(this->_internal_namespace_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.HashSumAlgorithmType.namespace");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_namespace_(), target);
  }

  // optional string user_defined_value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_user_defined_value().data(), static_cast<int>(this->_internal_user_defined_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.HashSumAlgorithmType.user_defined_value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_defined_value(), target);
  }

  // optional .ern411.avs.HashSumAlgorithmType ext_value = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::ext_value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.HashSumAlgorithmType)
  return target;
}

size_t HashSumAlgorithmType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.HashSumAlgorithmType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string namespace = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_namespace_());
    }

    // optional string user_defined_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_defined_value());
    }

    // optional .ern411.avs.HashSumAlgorithmType ext_value = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ext_value_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HashSumAlgorithmType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.HashSumAlgorithmType)
  GOOGLE_DCHECK_NE(&from, this);
  const HashSumAlgorithmType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HashSumAlgorithmType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.HashSumAlgorithmType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.HashSumAlgorithmType)
    MergeFrom(*source);
  }
}

void HashSumAlgorithmType::MergeFrom(const HashSumAlgorithmType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.HashSumAlgorithmType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_namespace_(from._internal_namespace_());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_user_defined_value(from._internal_user_defined_value());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_ext_value()->::ern411::avs::HashSumAlgorithmType::MergeFrom(from._internal_ext_value());
    }
  }
}

void HashSumAlgorithmType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.HashSumAlgorithmType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HashSumAlgorithmType::CopyFrom(const HashSumAlgorithmType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.HashSumAlgorithmType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HashSumAlgorithmType::IsInitialized() const {
  return true;
}

void HashSumAlgorithmType::InternalSwap(HashSumAlgorithmType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  namespace__.Swap(&other->namespace__, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_defined_value_.Swap(&other->user_defined_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(ext_value_, other->ext_value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HashSumAlgorithmType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Image::InitAsDefaultInstance() {
  ::ern411::ern::_Image_default_instance_._instance.get_mutable()->creation_date_ = const_cast< ::ern411::ern::EventDateWithoutFlags*>(
      ::ern411::ern::EventDateWithoutFlags::internal_default_instance());
  ::ern411::ern::_Image_default_instance_._instance.get_mutable()->type_ = const_cast< ::ern411::ern::ImageType*>(
      ::ern411::ern::ImageType::internal_default_instance());
}
class Image::_Internal {
 public:
  using HasBits = decltype(std::declval<Image>()._has_bits_);
  static void set_has_contains_hidden_content(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::ern411::ern::EventDateWithoutFlags& creation_date(const Image* msg);
  static void set_has_creation_date(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_supplemental(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_language_and_script_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_resource_reference(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::ern411::ern::ImageType& type(const Image* msg);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::ern411::ern::EventDateWithoutFlags&
Image::_Internal::creation_date(const Image* msg) {
  return *msg->creation_date_;
}
const ::ern411::ern::ImageType&
Image::_Internal::type(const Image* msg) {
  return *msg->type_;
}
Image::Image(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  additional_title_(arena),
  c_line_(arena),
  contributor_(arena),
  courtesy_line_(arena),
  description_(arena),
  display_artist_(arena),
  display_artist_name_(arena),
  display_title_(arena),
  display_title_text_(arena),
  first_publication_date_(arena),
  parental_warning_type_(arena),
  related_release_(arena),
  related_resource_(arena),
  resource_id_(arena),
  resource_rights_controller_(arena),
  technical_details_(arena),
  version_type_(arena),
  work_rights_controller_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.Image)
}
Image::Image(const Image& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      additional_title_(from.additional_title_),
      c_line_(from.c_line_),
      contributor_(from.contributor_),
      courtesy_line_(from.courtesy_line_),
      description_(from.description_),
      display_artist_(from.display_artist_),
      display_artist_name_(from.display_artist_name_),
      display_title_(from.display_title_),
      display_title_text_(from.display_title_text_),
      first_publication_date_(from.first_publication_date_),
      parental_warning_type_(from.parental_warning_type_),
      related_release_(from.related_release_),
      related_resource_(from.related_resource_),
      resource_id_(from.resource_id_),
      resource_rights_controller_(from.resource_rights_controller_),
      technical_details_(from.technical_details_),
      version_type_(from.version_type_),
      work_rights_controller_(from.work_rights_controller_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  language_and_script_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_language_and_script_code()) {
    language_and_script_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_language_and_script_code(),
      GetArena());
  }
  resource_reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_resource_reference()) {
    resource_reference_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_resource_reference(),
      GetArena());
  }
  if (from._internal_has_creation_date()) {
    creation_date_ = new ::ern411::ern::EventDateWithoutFlags(*from.creation_date_);
  } else {
    creation_date_ = nullptr;
  }
  if (from._internal_has_type()) {
    type_ = new ::ern411::ern::ImageType(*from.type_);
  } else {
    type_ = nullptr;
  }
  ::memcpy(&contains_hidden_content_, &from.contains_hidden_content_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_supplemental_) -
    reinterpret_cast<char*>(&contains_hidden_content_)) + sizeof(is_supplemental_));
  // @@protoc_insertion_point(copy_constructor:ern411.ern.Image)
}

void Image::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Image_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  language_and_script_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resource_reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&creation_date_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_supplemental_) -
      reinterpret_cast<char*>(&creation_date_)) + sizeof(is_supplemental_));
}

Image::~Image() {
  // @@protoc_insertion_point(destructor:ern411.ern.Image)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Image::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  language_and_script_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resource_reference_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete creation_date_;
  if (this != internal_default_instance()) delete type_;
}

void Image::ArenaDtor(void* object) {
  Image* _this = reinterpret_cast< Image* >(object);
  (void)_this;
}
void Image::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Image::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Image& Image::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Image_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void Image::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.Image)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  additional_title_.Clear();
  c_line_.Clear();
  contributor_.Clear();
  courtesy_line_.Clear();
  description_.Clear();
  display_artist_.Clear();
  display_artist_name_.Clear();
  display_title_.Clear();
  display_title_text_.Clear();
  first_publication_date_.Clear();
  parental_warning_type_.Clear();
  related_release_.Clear();
  related_resource_.Clear();
  resource_id_.Clear();
  resource_rights_controller_.Clear();
  technical_details_.Clear();
  version_type_.Clear();
  work_rights_controller_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      language_and_script_code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      resource_reference_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(creation_date_ != nullptr);
      creation_date_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(type_ != nullptr);
      type_->Clear();
    }
  }
  ::memset(&contains_hidden_content_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_supplemental_) -
      reinterpret_cast<char*>(&contains_hidden_content_)) + sizeof(is_supplemental_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Image::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ern411.ern.AdditionalTitle additional_title = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_additional_title(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.CLineWithDefault c_line = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_c_line(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool contains_hidden_content = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_contains_hidden_content(&has_bits);
          contains_hidden_content_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.Contributor contributor = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_contributor(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.CourtesyLineWithDefault courtesy_line = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_courtesy_line(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .ern411.ern.EventDateWithoutFlags creation_date = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_creation_date(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.DescriptionWithTerritory description = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_description(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.DisplayArtist display_artist = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_display_artist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.DisplayArtistNameWithDefault display_artist_name = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_display_artist_name(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.DisplayTitle display_title = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_display_title(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.DisplayTitleText display_title_text = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_display_title_text(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.FulfillmentDateWithTerritory first_publication_date = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_first_publication_date(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool is_supplemental = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_is_supplemental(&has_bits);
          is_supplemental_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string language_and_script_code = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_language_and_script_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.Image.language_and_script_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.ParentalWarningTypeWithTerritory parental_warning_type = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_parental_warning_type(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.RelatedRelease related_release = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_related_release(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<130>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.RelatedResource related_resource = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_related_resource(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<138>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.ResourceProprietaryId resource_id = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_resource_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<146>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string resource_reference = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          auto str = _internal_mutable_resource_reference();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.Image.resource_reference");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.ResourceRightsController resource_rights_controller = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_resource_rights_controller(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<162>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.TechnicalImageDetails technical_details = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_technical_details(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<170>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .ern411.ern.ImageType type = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.VersionType version_type = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_version_type(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<186>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.WorkRightsController work_rights_controller = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_work_rights_controller(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<194>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Image::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.Image)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ern411.ern.AdditionalTitle additional_title = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_additional_title_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_additional_title(i), target, stream);
  }

  // repeated .ern411.ern.CLineWithDefault c_line = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_c_line_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_c_line(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool contains_hidden_content = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_contains_hidden_content(), target);
  }

  // repeated .ern411.ern.Contributor contributor = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_contributor_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_contributor(i), target, stream);
  }

  // repeated .ern411.ern.CourtesyLineWithDefault courtesy_line = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_courtesy_line_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_courtesy_line(i), target, stream);
  }

  // optional .ern411.ern.EventDateWithoutFlags creation_date = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::creation_date(this), target, stream);
  }

  // repeated .ern411.ern.DescriptionWithTerritory description = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_description_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_description(i), target, stream);
  }

  // repeated .ern411.ern.DisplayArtist display_artist = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_display_artist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_display_artist(i), target, stream);
  }

  // repeated .ern411.ern.DisplayArtistNameWithDefault display_artist_name = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_display_artist_name_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_display_artist_name(i), target, stream);
  }

  // repeated .ern411.ern.DisplayTitle display_title = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_display_title_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_display_title(i), target, stream);
  }

  // repeated .ern411.ern.DisplayTitleText display_title_text = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_display_title_text_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_display_title_text(i), target, stream);
  }

  // repeated .ern411.ern.FulfillmentDateWithTerritory first_publication_date = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_first_publication_date_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, this->_internal_first_publication_date(i), target, stream);
  }

  // optional bool is_supplemental = 13;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_is_supplemental(), target);
  }

  // optional string language_and_script_code = 14;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_language_and_script_code().data(), static_cast<int>(this->_internal_language_and_script_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.Image.language_and_script_code");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_language_and_script_code(), target);
  }

  // repeated .ern411.ern.ParentalWarningTypeWithTerritory parental_warning_type = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_parental_warning_type_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, this->_internal_parental_warning_type(i), target, stream);
  }

  // repeated .ern411.ern.RelatedRelease related_release = 16;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_related_release_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, this->_internal_related_release(i), target, stream);
  }

  // repeated .ern411.ern.RelatedResource related_resource = 17;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_related_resource_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, this->_internal_related_resource(i), target, stream);
  }

  // repeated .ern411.ern.ResourceProprietaryId resource_id = 18;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_resource_id_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, this->_internal_resource_id(i), target, stream);
  }

  // optional string resource_reference = 19;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_resource_reference().data(), static_cast<int>(this->_internal_resource_reference().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.Image.resource_reference");
    target = stream->WriteStringMaybeAliased(
        19, this->_internal_resource_reference(), target);
  }

  // repeated .ern411.ern.ResourceRightsController resource_rights_controller = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_resource_rights_controller_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, this->_internal_resource_rights_controller(i), target, stream);
  }

  // repeated .ern411.ern.TechnicalImageDetails technical_details = 21;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_technical_details_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, this->_internal_technical_details(i), target, stream);
  }

  // optional .ern411.ern.ImageType type = 22;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        22, _Internal::type(this), target, stream);
  }

  // repeated .ern411.ern.VersionType version_type = 23;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_version_type_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(23, this->_internal_version_type(i), target, stream);
  }

  // repeated .ern411.ern.WorkRightsController work_rights_controller = 24;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_work_rights_controller_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(24, this->_internal_work_rights_controller(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.Image)
  return target;
}

size_t Image::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.Image)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ern411.ern.AdditionalTitle additional_title = 1;
  total_size += 1UL * this->_internal_additional_title_size();
  for (const auto& msg : this->additional_title_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.CLineWithDefault c_line = 2;
  total_size += 1UL * this->_internal_c_line_size();
  for (const auto& msg : this->c_line_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.Contributor contributor = 4;
  total_size += 1UL * this->_internal_contributor_size();
  for (const auto& msg : this->contributor_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.CourtesyLineWithDefault courtesy_line = 5;
  total_size += 1UL * this->_internal_courtesy_line_size();
  for (const auto& msg : this->courtesy_line_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.DescriptionWithTerritory description = 7;
  total_size += 1UL * this->_internal_description_size();
  for (const auto& msg : this->description_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.DisplayArtist display_artist = 8;
  total_size += 1UL * this->_internal_display_artist_size();
  for (const auto& msg : this->display_artist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.DisplayArtistNameWithDefault display_artist_name = 9;
  total_size += 1UL * this->_internal_display_artist_name_size();
  for (const auto& msg : this->display_artist_name_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.DisplayTitle display_title = 10;
  total_size += 1UL * this->_internal_display_title_size();
  for (const auto& msg : this->display_title_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.DisplayTitleText display_title_text = 11;
  total_size += 1UL * this->_internal_display_title_text_size();
  for (const auto& msg : this->display_title_text_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.FulfillmentDateWithTerritory first_publication_date = 12;
  total_size += 1UL * this->_internal_first_publication_date_size();
  for (const auto& msg : this->first_publication_date_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.ParentalWarningTypeWithTerritory parental_warning_type = 15;
  total_size += 1UL * this->_internal_parental_warning_type_size();
  for (const auto& msg : this->parental_warning_type_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.RelatedRelease related_release = 16;
  total_size += 2UL * this->_internal_related_release_size();
  for (const auto& msg : this->related_release_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.RelatedResource related_resource = 17;
  total_size += 2UL * this->_internal_related_resource_size();
  for (const auto& msg : this->related_resource_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.ResourceProprietaryId resource_id = 18;
  total_size += 2UL * this->_internal_resource_id_size();
  for (const auto& msg : this->resource_id_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.ResourceRightsController resource_rights_controller = 20;
  total_size += 2UL * this->_internal_resource_rights_controller_size();
  for (const auto& msg : this->resource_rights_controller_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.TechnicalImageDetails technical_details = 21;
  total_size += 2UL * this->_internal_technical_details_size();
  for (const auto& msg : this->technical_details_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.VersionType version_type = 23;
  total_size += 2UL * this->_internal_version_type_size();
  for (const auto& msg : this->version_type_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.WorkRightsController work_rights_controller = 24;
  total_size += 2UL * this->_internal_work_rights_controller_size();
  for (const auto& msg : this->work_rights_controller_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string language_and_script_code = 14;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_language_and_script_code());
    }

    // optional string resource_reference = 19;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_resource_reference());
    }

    // optional .ern411.ern.EventDateWithoutFlags creation_date = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *creation_date_);
    }

    // optional .ern411.ern.ImageType type = 22;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_);
    }

    // optional bool contains_hidden_content = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool is_supplemental = 13;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Image::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.Image)
  GOOGLE_DCHECK_NE(&from, this);
  const Image* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Image>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.Image)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.Image)
    MergeFrom(*source);
  }
}

void Image::MergeFrom(const Image& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.Image)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  additional_title_.MergeFrom(from.additional_title_);
  c_line_.MergeFrom(from.c_line_);
  contributor_.MergeFrom(from.contributor_);
  courtesy_line_.MergeFrom(from.courtesy_line_);
  description_.MergeFrom(from.description_);
  display_artist_.MergeFrom(from.display_artist_);
  display_artist_name_.MergeFrom(from.display_artist_name_);
  display_title_.MergeFrom(from.display_title_);
  display_title_text_.MergeFrom(from.display_title_text_);
  first_publication_date_.MergeFrom(from.first_publication_date_);
  parental_warning_type_.MergeFrom(from.parental_warning_type_);
  related_release_.MergeFrom(from.related_release_);
  related_resource_.MergeFrom(from.related_resource_);
  resource_id_.MergeFrom(from.resource_id_);
  resource_rights_controller_.MergeFrom(from.resource_rights_controller_);
  technical_details_.MergeFrom(from.technical_details_);
  version_type_.MergeFrom(from.version_type_);
  work_rights_controller_.MergeFrom(from.work_rights_controller_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_language_and_script_code(from._internal_language_and_script_code());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_resource_reference(from._internal_resource_reference());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_creation_date()->::ern411::ern::EventDateWithoutFlags::MergeFrom(from._internal_creation_date());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_type()->::ern411::ern::ImageType::MergeFrom(from._internal_type());
    }
    if (cached_has_bits & 0x00000010u) {
      contains_hidden_content_ = from.contains_hidden_content_;
    }
    if (cached_has_bits & 0x00000020u) {
      is_supplemental_ = from.is_supplemental_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Image::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.Image)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Image::CopyFrom(const Image& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.Image)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Image::IsInitialized() const {
  return true;
}

void Image::InternalSwap(Image* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  additional_title_.InternalSwap(&other->additional_title_);
  c_line_.InternalSwap(&other->c_line_);
  contributor_.InternalSwap(&other->contributor_);
  courtesy_line_.InternalSwap(&other->courtesy_line_);
  description_.InternalSwap(&other->description_);
  display_artist_.InternalSwap(&other->display_artist_);
  display_artist_name_.InternalSwap(&other->display_artist_name_);
  display_title_.InternalSwap(&other->display_title_);
  display_title_text_.InternalSwap(&other->display_title_text_);
  first_publication_date_.InternalSwap(&other->first_publication_date_);
  parental_warning_type_.InternalSwap(&other->parental_warning_type_);
  related_release_.InternalSwap(&other->related_release_);
  related_resource_.InternalSwap(&other->related_resource_);
  resource_id_.InternalSwap(&other->resource_id_);
  resource_rights_controller_.InternalSwap(&other->resource_rights_controller_);
  technical_details_.InternalSwap(&other->technical_details_);
  version_type_.InternalSwap(&other->version_type_);
  work_rights_controller_.InternalSwap(&other->work_rights_controller_);
  language_and_script_code_.Swap(&other->language_and_script_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  resource_reference_.Swap(&other->resource_reference_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Image, is_supplemental_)
      + sizeof(Image::is_supplemental_)
      - PROTOBUF_FIELD_OFFSET(Image, creation_date_)>(
          reinterpret_cast<char*>(&creation_date_),
          reinterpret_cast<char*>(&other->creation_date_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Image::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ImageCodecType::InitAsDefaultInstance() {
  ::ern411::ern::_ImageCodecType_default_instance_._instance.get_mutable()->ext_value_ = const_cast< ::ern411::avs::ImageCodecType*>(
      ::ern411::avs::ImageCodecType::internal_default_instance());
}
class ImageCodecType::_Internal {
 public:
  using HasBits = decltype(std::declval<ImageCodecType>()._has_bits_);
  static void set_has_namespace_(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_user_defined_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::ern411::avs::ImageCodecType& ext_value(const ImageCodecType* msg);
  static void set_has_ext_value(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::ern411::avs::ImageCodecType&
ImageCodecType::_Internal::ext_value(const ImageCodecType* msg) {
  return *msg->ext_value_;
}
void ImageCodecType::clear_ext_value() {
  if (ext_value_ != nullptr) ext_value_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
ImageCodecType::ImageCodecType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.ImageCodecType)
}
ImageCodecType::ImageCodecType(const ImageCodecType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_namespace_()) {
    namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_namespace_(),
      GetArena());
  }
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_user_defined_value()) {
    user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_defined_value(),
      GetArena());
  }
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_version()) {
    version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_version(),
      GetArena());
  }
  if (from._internal_has_ext_value()) {
    ext_value_ = new ::ern411::avs::ImageCodecType(*from.ext_value_);
  } else {
    ext_value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ern411.ern.ImageCodecType)
}

void ImageCodecType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ImageCodecType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ext_value_ = nullptr;
}

ImageCodecType::~ImageCodecType() {
  // @@protoc_insertion_point(destructor:ern411.ern.ImageCodecType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ImageCodecType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  namespace__.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ext_value_;
}

void ImageCodecType::ArenaDtor(void* object) {
  ImageCodecType* _this = reinterpret_cast< ImageCodecType* >(object);
  (void)_this;
}
void ImageCodecType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ImageCodecType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ImageCodecType& ImageCodecType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ImageCodecType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void ImageCodecType::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.ImageCodecType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      namespace__.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      user_defined_value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      version_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(ext_value_ != nullptr);
      ext_value_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImageCodecType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string namespace = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_namespace_();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.ImageCodecType.namespace");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string user_defined_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_user_defined_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.ImageCodecType.user_defined_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.ImageCodecType.version");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.avs.ImageCodecType ext_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ImageCodecType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.ImageCodecType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string namespace = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_namespace_().data(), static_cast<int>(this->_internal_namespace_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.ImageCodecType.namespace");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_namespace_(), target);
  }

  // optional string user_defined_value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_user_defined_value().data(), static_cast<int>(this->_internal_user_defined_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.ImageCodecType.user_defined_value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_defined_value(), target);
  }

  // optional string version = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.ImageCodecType.version");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_version(), target);
  }

  // optional .ern411.avs.ImageCodecType ext_value = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::ext_value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.ImageCodecType)
  return target;
}

size_t ImageCodecType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.ImageCodecType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string namespace = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_namespace_());
    }

    // optional string user_defined_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_defined_value());
    }

    // optional string version = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_version());
    }

    // optional .ern411.avs.ImageCodecType ext_value = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ext_value_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ImageCodecType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.ImageCodecType)
  GOOGLE_DCHECK_NE(&from, this);
  const ImageCodecType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ImageCodecType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.ImageCodecType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.ImageCodecType)
    MergeFrom(*source);
  }
}

void ImageCodecType::MergeFrom(const ImageCodecType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.ImageCodecType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_namespace_(from._internal_namespace_());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_user_defined_value(from._internal_user_defined_value());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_version(from._internal_version());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_ext_value()->::ern411::avs::ImageCodecType::MergeFrom(from._internal_ext_value());
    }
  }
}

void ImageCodecType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.ImageCodecType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageCodecType::CopyFrom(const ImageCodecType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.ImageCodecType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageCodecType::IsInitialized() const {
  return true;
}

void ImageCodecType::InternalSwap(ImageCodecType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  namespace__.Swap(&other->namespace__, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_defined_value_.Swap(&other->user_defined_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  version_.Swap(&other->version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(ext_value_, other->ext_value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ImageCodecType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ImageType::InitAsDefaultInstance() {
  ::ern411::ern::_ImageType_default_instance_._instance.get_mutable()->ext_value_ = const_cast< ::ern411::avs::ImageType*>(
      ::ern411::avs::ImageType::internal_default_instance());
}
class ImageType::_Internal {
 public:
  using HasBits = decltype(std::declval<ImageType>()._has_bits_);
  static void set_has_namespace_(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_user_defined_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::ern411::avs::ImageType& ext_value(const ImageType* msg);
  static void set_has_ext_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::ern411::avs::ImageType&
ImageType::_Internal::ext_value(const ImageType* msg) {
  return *msg->ext_value_;
}
void ImageType::clear_ext_value() {
  if (ext_value_ != nullptr) ext_value_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
ImageType::ImageType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.ImageType)
}
ImageType::ImageType(const ImageType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_namespace_()) {
    namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_namespace_(),
      GetArena());
  }
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_user_defined_value()) {
    user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_defined_value(),
      GetArena());
  }
  if (from._internal_has_ext_value()) {
    ext_value_ = new ::ern411::avs::ImageType(*from.ext_value_);
  } else {
    ext_value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ern411.ern.ImageType)
}

void ImageType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ImageType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ext_value_ = nullptr;
}

ImageType::~ImageType() {
  // @@protoc_insertion_point(destructor:ern411.ern.ImageType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ImageType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  namespace__.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ext_value_;
}

void ImageType::ArenaDtor(void* object) {
  ImageType* _this = reinterpret_cast< ImageType* >(object);
  (void)_this;
}
void ImageType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ImageType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ImageType& ImageType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ImageType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void ImageType::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.ImageType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      namespace__.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      user_defined_value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(ext_value_ != nullptr);
      ext_value_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImageType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string namespace = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_namespace_();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.ImageType.namespace");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string user_defined_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_user_defined_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.ImageType.user_defined_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.avs.ImageType ext_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ImageType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.ImageType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string namespace = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_namespace_().data(), static_cast<int>(this->_internal_namespace_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.ImageType.namespace");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_namespace_(), target);
  }

  // optional string user_defined_value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_user_defined_value().data(), static_cast<int>(this->_internal_user_defined_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.ImageType.user_defined_value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_defined_value(), target);
  }

  // optional .ern411.avs.ImageType ext_value = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::ext_value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.ImageType)
  return target;
}

size_t ImageType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.ImageType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string namespace = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_namespace_());
    }

    // optional string user_defined_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_defined_value());
    }

    // optional .ern411.avs.ImageType ext_value = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ext_value_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ImageType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.ImageType)
  GOOGLE_DCHECK_NE(&from, this);
  const ImageType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ImageType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.ImageType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.ImageType)
    MergeFrom(*source);
  }
}

void ImageType::MergeFrom(const ImageType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.ImageType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_namespace_(from._internal_namespace_());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_user_defined_value(from._internal_user_defined_value());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_ext_value()->::ern411::avs::ImageType::MergeFrom(from._internal_ext_value());
    }
  }
}

void ImageType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.ImageType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageType::CopyFrom(const ImageType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.ImageType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageType::IsInitialized() const {
  return true;
}

void ImageType::InternalSwap(ImageType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  namespace__.Swap(&other->namespace__, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_defined_value_.Swap(&other->user_defined_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(ext_value_, other->ext_value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ImageType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InstrumentType::InitAsDefaultInstance() {
  ::ern411::ern::_InstrumentType_default_instance_._instance.get_mutable()->ext_value_ = const_cast< ::ern411::avs::InstrumentType*>(
      ::ern411::avs::InstrumentType::internal_default_instance());
}
class InstrumentType::_Internal {
 public:
  using HasBits = decltype(std::declval<InstrumentType>()._has_bits_);
  static void set_has_namespace_(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_user_defined_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::ern411::avs::InstrumentType& ext_value(const InstrumentType* msg);
  static void set_has_ext_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::ern411::avs::InstrumentType&
InstrumentType::_Internal::ext_value(const InstrumentType* msg) {
  return *msg->ext_value_;
}
void InstrumentType::clear_ext_value() {
  if (ext_value_ != nullptr) ext_value_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
InstrumentType::InstrumentType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.InstrumentType)
}
InstrumentType::InstrumentType(const InstrumentType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_namespace_()) {
    namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_namespace_(),
      GetArena());
  }
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_user_defined_value()) {
    user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_defined_value(),
      GetArena());
  }
  if (from._internal_has_ext_value()) {
    ext_value_ = new ::ern411::avs::InstrumentType(*from.ext_value_);
  } else {
    ext_value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ern411.ern.InstrumentType)
}

void InstrumentType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InstrumentType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ext_value_ = nullptr;
}

InstrumentType::~InstrumentType() {
  // @@protoc_insertion_point(destructor:ern411.ern.InstrumentType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InstrumentType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  namespace__.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ext_value_;
}

void InstrumentType::ArenaDtor(void* object) {
  InstrumentType* _this = reinterpret_cast< InstrumentType* >(object);
  (void)_this;
}
void InstrumentType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InstrumentType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InstrumentType& InstrumentType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InstrumentType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void InstrumentType::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.InstrumentType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      namespace__.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      user_defined_value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(ext_value_ != nullptr);
      ext_value_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InstrumentType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string namespace = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_namespace_();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.InstrumentType.namespace");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string user_defined_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_user_defined_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.InstrumentType.user_defined_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.avs.InstrumentType ext_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InstrumentType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.InstrumentType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string namespace = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_namespace_().data(), static_cast<int>(this->_internal_namespace_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.InstrumentType.namespace");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_namespace_(), target);
  }

  // optional string user_defined_value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_user_defined_value().data(), static_cast<int>(this->_internal_user_defined_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.InstrumentType.user_defined_value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_defined_value(), target);
  }

  // optional .ern411.avs.InstrumentType ext_value = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::ext_value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.InstrumentType)
  return target;
}

size_t InstrumentType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.InstrumentType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string namespace = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_namespace_());
    }

    // optional string user_defined_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_defined_value());
    }

    // optional .ern411.avs.InstrumentType ext_value = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ext_value_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InstrumentType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.InstrumentType)
  GOOGLE_DCHECK_NE(&from, this);
  const InstrumentType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InstrumentType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.InstrumentType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.InstrumentType)
    MergeFrom(*source);
  }
}

void InstrumentType::MergeFrom(const InstrumentType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.InstrumentType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_namespace_(from._internal_namespace_());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_user_defined_value(from._internal_user_defined_value());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_ext_value()->::ern411::avs::InstrumentType::MergeFrom(from._internal_ext_value());
    }
  }
}

void InstrumentType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.InstrumentType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstrumentType::CopyFrom(const InstrumentType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.InstrumentType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstrumentType::IsInitialized() const {
  return true;
}

void InstrumentType::InternalSwap(InstrumentType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  namespace__.Swap(&other->namespace__, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_defined_value_.Swap(&other->user_defined_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(ext_value_, other->ext_value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InstrumentType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IsCredited::InitAsDefaultInstance() {
}
class IsCredited::_Internal {
 public:
  using HasBits = decltype(std::declval<IsCredited>()._has_bits_);
  static void set_has_may_be_shared(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ext_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

IsCredited::IsCredited(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.IsCredited)
}
IsCredited::IsCredited(const IsCredited& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&may_be_shared_, &from.may_be_shared_,
    static_cast<size_t>(reinterpret_cast<char*>(&ext_value_) -
    reinterpret_cast<char*>(&may_be_shared_)) + sizeof(ext_value_));
  // @@protoc_insertion_point(copy_constructor:ern411.ern.IsCredited)
}

void IsCredited::SharedCtor() {
  ::memset(&may_be_shared_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ext_value_) -
      reinterpret_cast<char*>(&may_be_shared_)) + sizeof(ext_value_));
}

IsCredited::~IsCredited() {
  // @@protoc_insertion_point(destructor:ern411.ern.IsCredited)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IsCredited::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void IsCredited::ArenaDtor(void* object) {
  IsCredited* _this = reinterpret_cast< IsCredited* >(object);
  (void)_this;
}
void IsCredited::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IsCredited::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IsCredited& IsCredited::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IsCredited_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void IsCredited::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.IsCredited)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&may_be_shared_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ext_value_) -
      reinterpret_cast<char*>(&may_be_shared_)) + sizeof(ext_value_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IsCredited::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool may_be_shared = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_may_be_shared(&has_bits);
          may_be_shared_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool ext_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_ext_value(&has_bits);
          ext_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IsCredited::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.IsCredited)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool may_be_shared = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_may_be_shared(), target);
  }

  // optional bool ext_value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_ext_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.IsCredited)
  return target;
}

size_t IsCredited::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.IsCredited)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bool may_be_shared = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool ext_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IsCredited::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.IsCredited)
  GOOGLE_DCHECK_NE(&from, this);
  const IsCredited* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IsCredited>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.IsCredited)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.IsCredited)
    MergeFrom(*source);
  }
}

void IsCredited::MergeFrom(const IsCredited& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.IsCredited)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      may_be_shared_ = from.may_be_shared_;
    }
    if (cached_has_bits & 0x00000002u) {
      ext_value_ = from.ext_value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void IsCredited::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.IsCredited)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IsCredited::CopyFrom(const IsCredited& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.IsCredited)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IsCredited::IsInitialized() const {
  return true;
}

void IsCredited::InternalSwap(IsCredited* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IsCredited, ext_value_)
      + sizeof(IsCredited::ext_value_)
      - PROTOBUF_FIELD_OFFSET(IsCredited, may_be_shared_)>(
          reinterpret_cast<char*>(&may_be_shared_),
          reinterpret_cast<char*>(&other->may_be_shared_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IsCredited::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void KeywordsWithTerritory::InitAsDefaultInstance() {
  ::ern411::ern::_KeywordsWithTerritory_default_instance_._instance.get_mutable()->applicable_territory_code_ = const_cast< ::ern411::avs::CurrentTerritoryCode*>(
      ::ern411::avs::CurrentTerritoryCode::internal_default_instance());
}
class KeywordsWithTerritory::_Internal {
 public:
  using HasBits = decltype(std::declval<KeywordsWithTerritory>()._has_bits_);
  static const ::ern411::avs::CurrentTerritoryCode& applicable_territory_code(const KeywordsWithTerritory* msg);
  static void set_has_applicable_territory_code(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_default(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_language_and_script_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ext_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::ern411::avs::CurrentTerritoryCode&
KeywordsWithTerritory::_Internal::applicable_territory_code(const KeywordsWithTerritory* msg) {
  return *msg->applicable_territory_code_;
}
void KeywordsWithTerritory::clear_applicable_territory_code() {
  if (applicable_territory_code_ != nullptr) applicable_territory_code_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
KeywordsWithTerritory::KeywordsWithTerritory(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.KeywordsWithTerritory)
}
KeywordsWithTerritory::KeywordsWithTerritory(const KeywordsWithTerritory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  language_and_script_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_language_and_script_code()) {
    language_and_script_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_language_and_script_code(),
      GetArena());
  }
  ext_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ext_value()) {
    ext_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ext_value(),
      GetArena());
  }
  if (from._internal_has_applicable_territory_code()) {
    applicable_territory_code_ = new ::ern411::avs::CurrentTerritoryCode(*from.applicable_territory_code_);
  } else {
    applicable_territory_code_ = nullptr;
  }
  is_default_ = from.is_default_;
  // @@protoc_insertion_point(copy_constructor:ern411.ern.KeywordsWithTerritory)
}

void KeywordsWithTerritory::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_KeywordsWithTerritory_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  language_and_script_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ext_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&applicable_territory_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_default_) -
      reinterpret_cast<char*>(&applicable_territory_code_)) + sizeof(is_default_));
}

KeywordsWithTerritory::~KeywordsWithTerritory() {
  // @@protoc_insertion_point(destructor:ern411.ern.KeywordsWithTerritory)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void KeywordsWithTerritory::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  language_and_script_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ext_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete applicable_territory_code_;
}

void KeywordsWithTerritory::ArenaDtor(void* object) {
  KeywordsWithTerritory* _this = reinterpret_cast< KeywordsWithTerritory* >(object);
  (void)_this;
}
void KeywordsWithTerritory::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KeywordsWithTerritory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KeywordsWithTerritory& KeywordsWithTerritory::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KeywordsWithTerritory_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void KeywordsWithTerritory::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.KeywordsWithTerritory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      language_and_script_code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      ext_value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(applicable_territory_code_ != nullptr);
      applicable_territory_code_->Clear();
    }
  }
  is_default_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KeywordsWithTerritory::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ern411.avs.CurrentTerritoryCode applicable_territory_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_applicable_territory_code(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_default = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_is_default(&has_bits);
          is_default_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string language_and_script_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_language_and_script_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.KeywordsWithTerritory.language_and_script_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string ext_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_ext_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.KeywordsWithTerritory.ext_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KeywordsWithTerritory::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.KeywordsWithTerritory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ern411.avs.CurrentTerritoryCode applicable_territory_code = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::applicable_territory_code(this), target, stream);
  }

  // optional bool is_default = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_default(), target);
  }

  // optional string language_and_script_code = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_language_and_script_code().data(), static_cast<int>(this->_internal_language_and_script_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.KeywordsWithTerritory.language_and_script_code");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_language_and_script_code(), target);
  }

  // optional string ext_value = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ext_value().data(), static_cast<int>(this->_internal_ext_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.KeywordsWithTerritory.ext_value");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_ext_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.KeywordsWithTerritory)
  return target;
}

size_t KeywordsWithTerritory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.KeywordsWithTerritory)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string language_and_script_code = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_language_and_script_code());
    }

    // optional string ext_value = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ext_value());
    }

    // optional .ern411.avs.CurrentTerritoryCode applicable_territory_code = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *applicable_territory_code_);
    }

    // optional bool is_default = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KeywordsWithTerritory::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.KeywordsWithTerritory)
  GOOGLE_DCHECK_NE(&from, this);
  const KeywordsWithTerritory* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<KeywordsWithTerritory>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.KeywordsWithTerritory)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.KeywordsWithTerritory)
    MergeFrom(*source);
  }
}

void KeywordsWithTerritory::MergeFrom(const KeywordsWithTerritory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.KeywordsWithTerritory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_language_and_script_code(from._internal_language_and_script_code());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_ext_value(from._internal_ext_value());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_applicable_territory_code()->::ern411::avs::CurrentTerritoryCode::MergeFrom(from._internal_applicable_territory_code());
    }
    if (cached_has_bits & 0x00000008u) {
      is_default_ = from.is_default_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void KeywordsWithTerritory::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.KeywordsWithTerritory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeywordsWithTerritory::CopyFrom(const KeywordsWithTerritory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.KeywordsWithTerritory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeywordsWithTerritory::IsInitialized() const {
  return true;
}

void KeywordsWithTerritory::InternalSwap(KeywordsWithTerritory* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  language_and_script_code_.Swap(&other->language_and_script_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ext_value_.Swap(&other->ext_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(KeywordsWithTerritory, is_default_)
      + sizeof(KeywordsWithTerritory::is_default_)
      - PROTOBUF_FIELD_OFFSET(KeywordsWithTerritory, applicable_territory_code_)>(
          reinterpret_cast<char*>(&applicable_territory_code_),
          reinterpret_cast<char*>(&other->applicable_territory_code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata KeywordsWithTerritory::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LinkedReleaseResourceReference::InitAsDefaultInstance() {
  ::ern411::ern::_LinkedReleaseResourceReference_default_instance_._instance.get_mutable()->link_description_ = const_cast< ::ern411::avs::LinkDescription*>(
      ::ern411::avs::LinkDescription::internal_default_instance());
  ::ern411::ern::_LinkedReleaseResourceReference_default_instance_._instance.get_mutable()->ext_value_ = const_cast< ::ern411::ern::ddex_LocalResourceAnchorReference*>(
      ::ern411::ern::ddex_LocalResourceAnchorReference::internal_default_instance());
}
class LinkedReleaseResourceReference::_Internal {
 public:
  using HasBits = decltype(std::declval<LinkedReleaseResourceReference>()._has_bits_);
  static void set_has_language_and_script_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ern411::avs::LinkDescription& link_description(const LinkedReleaseResourceReference* msg);
  static void set_has_link_description(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_namespace_(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_user_defined_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::ern411::ern::ddex_LocalResourceAnchorReference& ext_value(const LinkedReleaseResourceReference* msg);
  static void set_has_ext_value(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::ern411::avs::LinkDescription&
LinkedReleaseResourceReference::_Internal::link_description(const LinkedReleaseResourceReference* msg) {
  return *msg->link_description_;
}
const ::ern411::ern::ddex_LocalResourceAnchorReference&
LinkedReleaseResourceReference::_Internal::ext_value(const LinkedReleaseResourceReference* msg) {
  return *msg->ext_value_;
}
void LinkedReleaseResourceReference::clear_link_description() {
  if (link_description_ != nullptr) link_description_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
LinkedReleaseResourceReference::LinkedReleaseResourceReference(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.LinkedReleaseResourceReference)
}
LinkedReleaseResourceReference::LinkedReleaseResourceReference(const LinkedReleaseResourceReference& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  language_and_script_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_language_and_script_code()) {
    language_and_script_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_language_and_script_code(),
      GetArena());
  }
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_namespace_()) {
    namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_namespace_(),
      GetArena());
  }
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_user_defined_value()) {
    user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_defined_value(),
      GetArena());
  }
  if (from._internal_has_link_description()) {
    link_description_ = new ::ern411::avs::LinkDescription(*from.link_description_);
  } else {
    link_description_ = nullptr;
  }
  if (from._internal_has_ext_value()) {
    ext_value_ = new ::ern411::ern::ddex_LocalResourceAnchorReference(*from.ext_value_);
  } else {
    ext_value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ern411.ern.LinkedReleaseResourceReference)
}

void LinkedReleaseResourceReference::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LinkedReleaseResourceReference_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  language_and_script_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&link_description_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ext_value_) -
      reinterpret_cast<char*>(&link_description_)) + sizeof(ext_value_));
}

LinkedReleaseResourceReference::~LinkedReleaseResourceReference() {
  // @@protoc_insertion_point(destructor:ern411.ern.LinkedReleaseResourceReference)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LinkedReleaseResourceReference::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  language_and_script_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  namespace__.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete link_description_;
  if (this != internal_default_instance()) delete ext_value_;
}

void LinkedReleaseResourceReference::ArenaDtor(void* object) {
  LinkedReleaseResourceReference* _this = reinterpret_cast< LinkedReleaseResourceReference* >(object);
  (void)_this;
}
void LinkedReleaseResourceReference::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LinkedReleaseResourceReference::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LinkedReleaseResourceReference& LinkedReleaseResourceReference::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LinkedReleaseResourceReference_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void LinkedReleaseResourceReference::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.LinkedReleaseResourceReference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      language_and_script_code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      namespace__.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      user_defined_value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(link_description_ != nullptr);
      link_description_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(ext_value_ != nullptr);
      ext_value_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LinkedReleaseResourceReference::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string language_and_script_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_language_and_script_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.LinkedReleaseResourceReference.language_and_script_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.avs.LinkDescription link_description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_link_description(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string namespace = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_namespace_();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.LinkedReleaseResourceReference.namespace");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string user_defined_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_user_defined_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.LinkedReleaseResourceReference.user_defined_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.ern.ddex_LocalResourceAnchorReference ext_value = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LinkedReleaseResourceReference::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.LinkedReleaseResourceReference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string language_and_script_code = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_language_and_script_code().data(), static_cast<int>(this->_internal_language_and_script_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.LinkedReleaseResourceReference.language_and_script_code");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_language_and_script_code(), target);
  }

  // optional .ern411.avs.LinkDescription link_description = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::link_description(this), target, stream);
  }

  // optional string namespace = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_namespace_().data(), static_cast<int>(this->_internal_namespace_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.LinkedReleaseResourceReference.namespace");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_namespace_(), target);
  }

  // optional string user_defined_value = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_user_defined_value().data(), static_cast<int>(this->_internal_user_defined_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.LinkedReleaseResourceReference.user_defined_value");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_user_defined_value(), target);
  }

  // optional .ern411.ern.ddex_LocalResourceAnchorReference ext_value = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::ext_value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.LinkedReleaseResourceReference)
  return target;
}

size_t LinkedReleaseResourceReference::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.LinkedReleaseResourceReference)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string language_and_script_code = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_language_and_script_code());
    }

    // optional string namespace = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_namespace_());
    }

    // optional string user_defined_value = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_defined_value());
    }

    // optional .ern411.avs.LinkDescription link_description = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *link_description_);
    }

    // optional .ern411.ern.ddex_LocalResourceAnchorReference ext_value = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ext_value_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LinkedReleaseResourceReference::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.LinkedReleaseResourceReference)
  GOOGLE_DCHECK_NE(&from, this);
  const LinkedReleaseResourceReference* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LinkedReleaseResourceReference>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.LinkedReleaseResourceReference)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.LinkedReleaseResourceReference)
    MergeFrom(*source);
  }
}

void LinkedReleaseResourceReference::MergeFrom(const LinkedReleaseResourceReference& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.LinkedReleaseResourceReference)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_language_and_script_code(from._internal_language_and_script_code());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_namespace_(from._internal_namespace_());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_user_defined_value(from._internal_user_defined_value());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_link_description()->::ern411::avs::LinkDescription::MergeFrom(from._internal_link_description());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_ext_value()->::ern411::ern::ddex_LocalResourceAnchorReference::MergeFrom(from._internal_ext_value());
    }
  }
}

void LinkedReleaseResourceReference::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.LinkedReleaseResourceReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LinkedReleaseResourceReference::CopyFrom(const LinkedReleaseResourceReference& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.LinkedReleaseResourceReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinkedReleaseResourceReference::IsInitialized() const {
  return true;
}

void LinkedReleaseResourceReference::InternalSwap(LinkedReleaseResourceReference* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  language_and_script_code_.Swap(&other->language_and_script_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  namespace__.Swap(&other->namespace__, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_defined_value_.Swap(&other->user_defined_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LinkedReleaseResourceReference, ext_value_)
      + sizeof(LinkedReleaseResourceReference::ext_value_)
      - PROTOBUF_FIELD_OFFSET(LinkedReleaseResourceReference, link_description_)>(
          reinterpret_cast<char*>(&link_description_),
          reinterpret_cast<char*>(&other->link_description_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LinkedReleaseResourceReference::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MarketingComment::InitAsDefaultInstance() {
  ::ern411::ern::_MarketingComment_default_instance_._instance.get_mutable()->applicable_territory_code_ = const_cast< ::ern411::avs::CurrentTerritoryCode*>(
      ::ern411::avs::CurrentTerritoryCode::internal_default_instance());
}
class MarketingComment::_Internal {
 public:
  using HasBits = decltype(std::declval<MarketingComment>()._has_bits_);
  static const ::ern411::avs::CurrentTerritoryCode& applicable_territory_code(const MarketingComment* msg);
  static void set_has_applicable_territory_code(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_default(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_language_and_script_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ext_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::ern411::avs::CurrentTerritoryCode&
MarketingComment::_Internal::applicable_territory_code(const MarketingComment* msg) {
  return *msg->applicable_territory_code_;
}
void MarketingComment::clear_applicable_territory_code() {
  if (applicable_territory_code_ != nullptr) applicable_territory_code_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
MarketingComment::MarketingComment(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.MarketingComment)
}
MarketingComment::MarketingComment(const MarketingComment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  language_and_script_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_language_and_script_code()) {
    language_and_script_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_language_and_script_code(),
      GetArena());
  }
  ext_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ext_value()) {
    ext_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ext_value(),
      GetArena());
  }
  if (from._internal_has_applicable_territory_code()) {
    applicable_territory_code_ = new ::ern411::avs::CurrentTerritoryCode(*from.applicable_territory_code_);
  } else {
    applicable_territory_code_ = nullptr;
  }
  is_default_ = from.is_default_;
  // @@protoc_insertion_point(copy_constructor:ern411.ern.MarketingComment)
}

void MarketingComment::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MarketingComment_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  language_and_script_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ext_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&applicable_territory_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_default_) -
      reinterpret_cast<char*>(&applicable_territory_code_)) + sizeof(is_default_));
}

MarketingComment::~MarketingComment() {
  // @@protoc_insertion_point(destructor:ern411.ern.MarketingComment)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MarketingComment::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  language_and_script_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ext_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete applicable_territory_code_;
}

void MarketingComment::ArenaDtor(void* object) {
  MarketingComment* _this = reinterpret_cast< MarketingComment* >(object);
  (void)_this;
}
void MarketingComment::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MarketingComment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MarketingComment& MarketingComment::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MarketingComment_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void MarketingComment::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.MarketingComment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      language_and_script_code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      ext_value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(applicable_territory_code_ != nullptr);
      applicable_territory_code_->Clear();
    }
  }
  is_default_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MarketingComment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ern411.avs.CurrentTerritoryCode applicable_territory_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_applicable_territory_code(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_default = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_is_default(&has_bits);
          is_default_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string language_and_script_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_language_and_script_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.MarketingComment.language_and_script_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string ext_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_ext_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.MarketingComment.ext_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MarketingComment::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.MarketingComment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ern411.avs.CurrentTerritoryCode applicable_territory_code = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::applicable_territory_code(this), target, stream);
  }

  // optional bool is_default = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_default(), target);
  }

  // optional string language_and_script_code = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_language_and_script_code().data(), static_cast<int>(this->_internal_language_and_script_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.MarketingComment.language_and_script_code");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_language_and_script_code(), target);
  }

  // optional string ext_value = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ext_value().data(), static_cast<int>(this->_internal_ext_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.MarketingComment.ext_value");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_ext_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.MarketingComment)
  return target;
}

size_t MarketingComment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.MarketingComment)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string language_and_script_code = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_language_and_script_code());
    }

    // optional string ext_value = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ext_value());
    }

    // optional .ern411.avs.CurrentTerritoryCode applicable_territory_code = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *applicable_territory_code_);
    }

    // optional bool is_default = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketingComment::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.MarketingComment)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketingComment* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MarketingComment>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.MarketingComment)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.MarketingComment)
    MergeFrom(*source);
  }
}

void MarketingComment::MergeFrom(const MarketingComment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.MarketingComment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_language_and_script_code(from._internal_language_and_script_code());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_ext_value(from._internal_ext_value());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_applicable_territory_code()->::ern411::avs::CurrentTerritoryCode::MergeFrom(from._internal_applicable_territory_code());
    }
    if (cached_has_bits & 0x00000008u) {
      is_default_ = from.is_default_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MarketingComment::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.MarketingComment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketingComment::CopyFrom(const MarketingComment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.MarketingComment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketingComment::IsInitialized() const {
  return true;
}

void MarketingComment::InternalSwap(MarketingComment* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  language_and_script_code_.Swap(&other->language_and_script_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ext_value_.Swap(&other->ext_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MarketingComment, is_default_)
      + sizeof(MarketingComment::is_default_)
      - PROTOBUF_FIELD_OFFSET(MarketingComment, applicable_territory_code_)>(
          reinterpret_cast<char*>(&applicable_territory_code_),
          reinterpret_cast<char*>(&other->applicable_territory_code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MarketingComment::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MessageAuditTrail::InitAsDefaultInstance() {
}
class MessageAuditTrail::_Internal {
 public:
};

MessageAuditTrail::MessageAuditTrail(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  message_audit_trail_event_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.MessageAuditTrail)
}
MessageAuditTrail::MessageAuditTrail(const MessageAuditTrail& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      message_audit_trail_event_(from.message_audit_trail_event_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ern411.ern.MessageAuditTrail)
}

void MessageAuditTrail::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MessageAuditTrail_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
}

MessageAuditTrail::~MessageAuditTrail() {
  // @@protoc_insertion_point(destructor:ern411.ern.MessageAuditTrail)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MessageAuditTrail::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MessageAuditTrail::ArenaDtor(void* object) {
  MessageAuditTrail* _this = reinterpret_cast< MessageAuditTrail* >(object);
  (void)_this;
}
void MessageAuditTrail::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MessageAuditTrail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MessageAuditTrail& MessageAuditTrail::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MessageAuditTrail_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void MessageAuditTrail::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.MessageAuditTrail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_audit_trail_event_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MessageAuditTrail::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ern411.ern.MessageAuditTrailEvent message_audit_trail_event = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_message_audit_trail_event(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MessageAuditTrail::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.MessageAuditTrail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ern411.ern.MessageAuditTrailEvent message_audit_trail_event = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_message_audit_trail_event_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_message_audit_trail_event(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.MessageAuditTrail)
  return target;
}

size_t MessageAuditTrail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.MessageAuditTrail)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ern411.ern.MessageAuditTrailEvent message_audit_trail_event = 1;
  total_size += 1UL * this->_internal_message_audit_trail_event_size();
  for (const auto& msg : this->message_audit_trail_event_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MessageAuditTrail::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.MessageAuditTrail)
  GOOGLE_DCHECK_NE(&from, this);
  const MessageAuditTrail* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MessageAuditTrail>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.MessageAuditTrail)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.MessageAuditTrail)
    MergeFrom(*source);
  }
}

void MessageAuditTrail::MergeFrom(const MessageAuditTrail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.MessageAuditTrail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  message_audit_trail_event_.MergeFrom(from.message_audit_trail_event_);
}

void MessageAuditTrail::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.MessageAuditTrail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageAuditTrail::CopyFrom(const MessageAuditTrail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.MessageAuditTrail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageAuditTrail::IsInitialized() const {
  return true;
}

void MessageAuditTrail::InternalSwap(MessageAuditTrail* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  message_audit_trail_event_.InternalSwap(&other->message_audit_trail_event_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageAuditTrail::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MessageAuditTrailEvent::InitAsDefaultInstance() {
  ::ern411::ern::_MessageAuditTrailEvent_default_instance_._instance.get_mutable()->messaging_party_descriptor_ = const_cast< ::ern411::ern::MessagingPartyWithoutCode*>(
      ::ern411::ern::MessagingPartyWithoutCode::internal_default_instance());
}
class MessageAuditTrailEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<MessageAuditTrailEvent>()._has_bits_);
  static void set_has_date_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ern411::ern::MessagingPartyWithoutCode& messaging_party_descriptor(const MessageAuditTrailEvent* msg);
  static void set_has_messaging_party_descriptor(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::ern411::ern::MessagingPartyWithoutCode&
MessageAuditTrailEvent::_Internal::messaging_party_descriptor(const MessageAuditTrailEvent* msg) {
  return *msg->messaging_party_descriptor_;
}
MessageAuditTrailEvent::MessageAuditTrailEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.MessageAuditTrailEvent)
}
MessageAuditTrailEvent::MessageAuditTrailEvent(const MessageAuditTrailEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  date_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_date_time()) {
    date_time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_date_time(),
      GetArena());
  }
  if (from._internal_has_messaging_party_descriptor()) {
    messaging_party_descriptor_ = new ::ern411::ern::MessagingPartyWithoutCode(*from.messaging_party_descriptor_);
  } else {
    messaging_party_descriptor_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ern411.ern.MessageAuditTrailEvent)
}

void MessageAuditTrailEvent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MessageAuditTrailEvent_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  date_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  messaging_party_descriptor_ = nullptr;
}

MessageAuditTrailEvent::~MessageAuditTrailEvent() {
  // @@protoc_insertion_point(destructor:ern411.ern.MessageAuditTrailEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MessageAuditTrailEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  date_time_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete messaging_party_descriptor_;
}

void MessageAuditTrailEvent::ArenaDtor(void* object) {
  MessageAuditTrailEvent* _this = reinterpret_cast< MessageAuditTrailEvent* >(object);
  (void)_this;
}
void MessageAuditTrailEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MessageAuditTrailEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MessageAuditTrailEvent& MessageAuditTrailEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MessageAuditTrailEvent_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void MessageAuditTrailEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.MessageAuditTrailEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      date_time_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(messaging_party_descriptor_ != nullptr);
      messaging_party_descriptor_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MessageAuditTrailEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string date_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_date_time();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.MessageAuditTrailEvent.date_time");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.ern.MessagingPartyWithoutCode messaging_party_descriptor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_messaging_party_descriptor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MessageAuditTrailEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.MessageAuditTrailEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string date_time = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_date_time().data(), static_cast<int>(this->_internal_date_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.MessageAuditTrailEvent.date_time");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_date_time(), target);
  }

  // optional .ern411.ern.MessagingPartyWithoutCode messaging_party_descriptor = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::messaging_party_descriptor(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.MessageAuditTrailEvent)
  return target;
}

size_t MessageAuditTrailEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.MessageAuditTrailEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string date_time = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_date_time());
    }

    // optional .ern411.ern.MessagingPartyWithoutCode messaging_party_descriptor = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *messaging_party_descriptor_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MessageAuditTrailEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.MessageAuditTrailEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const MessageAuditTrailEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MessageAuditTrailEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.MessageAuditTrailEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.MessageAuditTrailEvent)
    MergeFrom(*source);
  }
}

void MessageAuditTrailEvent::MergeFrom(const MessageAuditTrailEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.MessageAuditTrailEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_date_time(from._internal_date_time());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_messaging_party_descriptor()->::ern411::ern::MessagingPartyWithoutCode::MergeFrom(from._internal_messaging_party_descriptor());
    }
  }
}

void MessageAuditTrailEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.MessageAuditTrailEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageAuditTrailEvent::CopyFrom(const MessageAuditTrailEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.MessageAuditTrailEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageAuditTrailEvent::IsInitialized() const {
  return true;
}

void MessageAuditTrailEvent::InternalSwap(MessageAuditTrailEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  date_time_.Swap(&other->date_time_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(messaging_party_descriptor_, other->messaging_party_descriptor_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageAuditTrailEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MessageHeader::InitAsDefaultInstance() {
  ::ern411::ern::_MessageHeader_default_instance_._instance.get_mutable()->message_audit_trail_ = const_cast< ::ern411::ern::MessageAuditTrail*>(
      ::ern411::ern::MessageAuditTrail::internal_default_instance());
  ::ern411::ern::_MessageHeader_default_instance_._instance.get_mutable()->message_control_type_ = const_cast< ::ern411::avs::MessageControlType*>(
      ::ern411::avs::MessageControlType::internal_default_instance());
  ::ern411::ern::_MessageHeader_default_instance_._instance.get_mutable()->message_sender_ = const_cast< ::ern411::ern::MessagingPartyWithoutCode*>(
      ::ern411::ern::MessagingPartyWithoutCode::internal_default_instance());
  ::ern411::ern::_MessageHeader_default_instance_._instance.get_mutable()->sent_on_behalf_of_ = const_cast< ::ern411::ern::MessagingPartyWithoutCode*>(
      ::ern411::ern::MessagingPartyWithoutCode::internal_default_instance());
}
class MessageHeader::_Internal {
 public:
  using HasBits = decltype(std::declval<MessageHeader>()._has_bits_);
  static const ::ern411::ern::MessageAuditTrail& message_audit_trail(const MessageHeader* msg);
  static void set_has_message_audit_trail(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::ern411::avs::MessageControlType& message_control_type(const MessageHeader* msg);
  static void set_has_message_control_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_message_created_date_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_message_file_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_message_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::ern411::ern::MessagingPartyWithoutCode& message_sender(const MessageHeader* msg);
  static void set_has_message_sender(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_message_thread_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::ern411::ern::MessagingPartyWithoutCode& sent_on_behalf_of(const MessageHeader* msg);
  static void set_has_sent_on_behalf_of(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

const ::ern411::ern::MessageAuditTrail&
MessageHeader::_Internal::message_audit_trail(const MessageHeader* msg) {
  return *msg->message_audit_trail_;
}
const ::ern411::avs::MessageControlType&
MessageHeader::_Internal::message_control_type(const MessageHeader* msg) {
  return *msg->message_control_type_;
}
const ::ern411::ern::MessagingPartyWithoutCode&
MessageHeader::_Internal::message_sender(const MessageHeader* msg) {
  return *msg->message_sender_;
}
const ::ern411::ern::MessagingPartyWithoutCode&
MessageHeader::_Internal::sent_on_behalf_of(const MessageHeader* msg) {
  return *msg->sent_on_behalf_of_;
}
void MessageHeader::clear_message_control_type() {
  if (message_control_type_ != nullptr) message_control_type_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
MessageHeader::MessageHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  message_recipient_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.MessageHeader)
}
MessageHeader::MessageHeader(const MessageHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      message_recipient_(from.message_recipient_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_created_date_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_message_created_date_time()) {
    message_created_date_time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_message_created_date_time(),
      GetArena());
  }
  message_file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_message_file_name()) {
    message_file_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_message_file_name(),
      GetArena());
  }
  message_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_message_id()) {
    message_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_message_id(),
      GetArena());
  }
  message_thread_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_message_thread_id()) {
    message_thread_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_message_thread_id(),
      GetArena());
  }
  if (from._internal_has_message_audit_trail()) {
    message_audit_trail_ = new ::ern411::ern::MessageAuditTrail(*from.message_audit_trail_);
  } else {
    message_audit_trail_ = nullptr;
  }
  if (from._internal_has_message_control_type()) {
    message_control_type_ = new ::ern411::avs::MessageControlType(*from.message_control_type_);
  } else {
    message_control_type_ = nullptr;
  }
  if (from._internal_has_message_sender()) {
    message_sender_ = new ::ern411::ern::MessagingPartyWithoutCode(*from.message_sender_);
  } else {
    message_sender_ = nullptr;
  }
  if (from._internal_has_sent_on_behalf_of()) {
    sent_on_behalf_of_ = new ::ern411::ern::MessagingPartyWithoutCode(*from.sent_on_behalf_of_);
  } else {
    sent_on_behalf_of_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ern411.ern.MessageHeader)
}

void MessageHeader::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MessageHeader_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  message_created_date_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_thread_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&message_audit_trail_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sent_on_behalf_of_) -
      reinterpret_cast<char*>(&message_audit_trail_)) + sizeof(sent_on_behalf_of_));
}

MessageHeader::~MessageHeader() {
  // @@protoc_insertion_point(destructor:ern411.ern.MessageHeader)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MessageHeader::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_created_date_time_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_file_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_thread_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete message_audit_trail_;
  if (this != internal_default_instance()) delete message_control_type_;
  if (this != internal_default_instance()) delete message_sender_;
  if (this != internal_default_instance()) delete sent_on_behalf_of_;
}

void MessageHeader::ArenaDtor(void* object) {
  MessageHeader* _this = reinterpret_cast< MessageHeader* >(object);
  (void)_this;
}
void MessageHeader::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MessageHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MessageHeader& MessageHeader::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MessageHeader_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void MessageHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.MessageHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_recipient_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      message_created_date_time_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      message_file_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      message_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      message_thread_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(message_audit_trail_ != nullptr);
      message_audit_trail_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(message_control_type_ != nullptr);
      message_control_type_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(message_sender_ != nullptr);
      message_sender_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(sent_on_behalf_of_ != nullptr);
      sent_on_behalf_of_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MessageHeader::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ern411.ern.MessageAuditTrail message_audit_trail = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_message_audit_trail(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.avs.MessageControlType message_control_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_message_control_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string message_created_date_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_message_created_date_time();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.MessageHeader.message_created_date_time");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string message_file_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_message_file_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.MessageHeader.message_file_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string message_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_message_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.MessageHeader.message_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.MessagingPartyWithoutCode message_recipient = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_message_recipient(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .ern411.ern.MessagingPartyWithoutCode message_sender = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_message_sender(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string message_thread_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_message_thread_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.MessageHeader.message_thread_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.ern.MessagingPartyWithoutCode sent_on_behalf_of = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_sent_on_behalf_of(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MessageHeader::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.MessageHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ern411.ern.MessageAuditTrail message_audit_trail = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::message_audit_trail(this), target, stream);
  }

  // optional .ern411.avs.MessageControlType message_control_type = 2;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::message_control_type(this), target, stream);
  }

  // optional string message_created_date_time = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_message_created_date_time().data(), static_cast<int>(this->_internal_message_created_date_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.MessageHeader.message_created_date_time");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_message_created_date_time(), target);
  }

  // optional string message_file_name = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_message_file_name().data(), static_cast<int>(this->_internal_message_file_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.MessageHeader.message_file_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_message_file_name(), target);
  }

  // optional string message_id = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_message_id().data(), static_cast<int>(this->_internal_message_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.MessageHeader.message_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_message_id(), target);
  }

  // repeated .ern411.ern.MessagingPartyWithoutCode message_recipient = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_message_recipient_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_message_recipient(i), target, stream);
  }

  // optional .ern411.ern.MessagingPartyWithoutCode message_sender = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::message_sender(this), target, stream);
  }

  // optional string message_thread_id = 8;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_message_thread_id().data(), static_cast<int>(this->_internal_message_thread_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.MessageHeader.message_thread_id");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_message_thread_id(), target);
  }

  // optional .ern411.ern.MessagingPartyWithoutCode sent_on_behalf_of = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::sent_on_behalf_of(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.MessageHeader)
  return target;
}

size_t MessageHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.MessageHeader)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ern411.ern.MessagingPartyWithoutCode message_recipient = 6;
  total_size += 1UL * this->_internal_message_recipient_size();
  for (const auto& msg : this->message_recipient_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string message_created_date_time = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_message_created_date_time());
    }

    // optional string message_file_name = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_message_file_name());
    }

    // optional string message_id = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_message_id());
    }

    // optional string message_thread_id = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_message_thread_id());
    }

    // optional .ern411.ern.MessageAuditTrail message_audit_trail = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_audit_trail_);
    }

    // optional .ern411.avs.MessageControlType message_control_type = 2;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_control_type_);
    }

    // optional .ern411.ern.MessagingPartyWithoutCode message_sender = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_sender_);
    }

    // optional .ern411.ern.MessagingPartyWithoutCode sent_on_behalf_of = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sent_on_behalf_of_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MessageHeader::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.MessageHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const MessageHeader* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MessageHeader>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.MessageHeader)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.MessageHeader)
    MergeFrom(*source);
  }
}

void MessageHeader::MergeFrom(const MessageHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.MessageHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  message_recipient_.MergeFrom(from.message_recipient_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_message_created_date_time(from._internal_message_created_date_time());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_message_file_name(from._internal_message_file_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_message_id(from._internal_message_id());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_message_thread_id(from._internal_message_thread_id());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_message_audit_trail()->::ern411::ern::MessageAuditTrail::MergeFrom(from._internal_message_audit_trail());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_message_control_type()->::ern411::avs::MessageControlType::MergeFrom(from._internal_message_control_type());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_message_sender()->::ern411::ern::MessagingPartyWithoutCode::MergeFrom(from._internal_message_sender());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_sent_on_behalf_of()->::ern411::ern::MessagingPartyWithoutCode::MergeFrom(from._internal_sent_on_behalf_of());
    }
  }
}

void MessageHeader::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.MessageHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageHeader::CopyFrom(const MessageHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.MessageHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageHeader::IsInitialized() const {
  return true;
}

void MessageHeader::InternalSwap(MessageHeader* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  message_recipient_.InternalSwap(&other->message_recipient_);
  message_created_date_time_.Swap(&other->message_created_date_time_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  message_file_name_.Swap(&other->message_file_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  message_id_.Swap(&other->message_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  message_thread_id_.Swap(&other->message_thread_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MessageHeader, sent_on_behalf_of_)
      + sizeof(MessageHeader::sent_on_behalf_of_)
      - PROTOBUF_FIELD_OFFSET(MessageHeader, message_audit_trail_)>(
          reinterpret_cast<char*>(&message_audit_trail_),
          reinterpret_cast<char*>(&other->message_audit_trail_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageHeader::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MessagingPartyWithoutCode::InitAsDefaultInstance() {
  ::ern411::ern::_MessagingPartyWithoutCode_default_instance_._instance.get_mutable()->party_name_ = const_cast< ::ern411::ern::PartyNameWithoutCode*>(
      ::ern411::ern::PartyNameWithoutCode::internal_default_instance());
}
class MessagingPartyWithoutCode::_Internal {
 public:
  using HasBits = decltype(std::declval<MessagingPartyWithoutCode>()._has_bits_);
  static void set_has_party_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ern411::ern::PartyNameWithoutCode& party_name(const MessagingPartyWithoutCode* msg);
  static void set_has_party_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_trading_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::ern411::ern::PartyNameWithoutCode&
MessagingPartyWithoutCode::_Internal::party_name(const MessagingPartyWithoutCode* msg) {
  return *msg->party_name_;
}
MessagingPartyWithoutCode::MessagingPartyWithoutCode(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.MessagingPartyWithoutCode)
}
MessagingPartyWithoutCode::MessagingPartyWithoutCode(const MessagingPartyWithoutCode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  party_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_party_id()) {
    party_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_party_id(),
      GetArena());
  }
  trading_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_trading_name()) {
    trading_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_trading_name(),
      GetArena());
  }
  if (from._internal_has_party_name()) {
    party_name_ = new ::ern411::ern::PartyNameWithoutCode(*from.party_name_);
  } else {
    party_name_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ern411.ern.MessagingPartyWithoutCode)
}

void MessagingPartyWithoutCode::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MessagingPartyWithoutCode_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  party_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  trading_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  party_name_ = nullptr;
}

MessagingPartyWithoutCode::~MessagingPartyWithoutCode() {
  // @@protoc_insertion_point(destructor:ern411.ern.MessagingPartyWithoutCode)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MessagingPartyWithoutCode::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  party_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  trading_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete party_name_;
}

void MessagingPartyWithoutCode::ArenaDtor(void* object) {
  MessagingPartyWithoutCode* _this = reinterpret_cast< MessagingPartyWithoutCode* >(object);
  (void)_this;
}
void MessagingPartyWithoutCode::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MessagingPartyWithoutCode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MessagingPartyWithoutCode& MessagingPartyWithoutCode::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MessagingPartyWithoutCode_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void MessagingPartyWithoutCode::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.MessagingPartyWithoutCode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      party_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      trading_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(party_name_ != nullptr);
      party_name_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MessagingPartyWithoutCode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string party_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_party_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.MessagingPartyWithoutCode.party_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.ern.PartyNameWithoutCode party_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_party_name(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string trading_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_trading_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.MessagingPartyWithoutCode.trading_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MessagingPartyWithoutCode::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.MessagingPartyWithoutCode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string party_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_party_id().data(), static_cast<int>(this->_internal_party_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.MessagingPartyWithoutCode.party_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_party_id(), target);
  }

  // optional .ern411.ern.PartyNameWithoutCode party_name = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::party_name(this), target, stream);
  }

  // optional string trading_name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_trading_name().data(), static_cast<int>(this->_internal_trading_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.MessagingPartyWithoutCode.trading_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_trading_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.MessagingPartyWithoutCode)
  return target;
}

size_t MessagingPartyWithoutCode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.MessagingPartyWithoutCode)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string party_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_party_id());
    }

    // optional string trading_name = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_trading_name());
    }

    // optional .ern411.ern.PartyNameWithoutCode party_name = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *party_name_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MessagingPartyWithoutCode::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.MessagingPartyWithoutCode)
  GOOGLE_DCHECK_NE(&from, this);
  const MessagingPartyWithoutCode* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MessagingPartyWithoutCode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.MessagingPartyWithoutCode)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.MessagingPartyWithoutCode)
    MergeFrom(*source);
  }
}

void MessagingPartyWithoutCode::MergeFrom(const MessagingPartyWithoutCode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.MessagingPartyWithoutCode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_party_id(from._internal_party_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_trading_name(from._internal_trading_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_party_name()->::ern411::ern::PartyNameWithoutCode::MergeFrom(from._internal_party_name());
    }
  }
}

void MessagingPartyWithoutCode::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.MessagingPartyWithoutCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessagingPartyWithoutCode::CopyFrom(const MessagingPartyWithoutCode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.MessagingPartyWithoutCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessagingPartyWithoutCode::IsInitialized() const {
  return true;
}

void MessagingPartyWithoutCode::InternalSwap(MessagingPartyWithoutCode* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  party_id_.Swap(&other->party_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  trading_name_.Swap(&other->trading_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(party_name_, other->party_name_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MessagingPartyWithoutCode::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MusicalWorkId::InitAsDefaultInstance() {
}
class MusicalWorkId::_Internal {
 public:
  using HasBits = decltype(std::declval<MusicalWorkId>()._has_bits_);
  static void set_has_i_s_w_c(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_replaced(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_opus_number(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MusicalWorkId::MusicalWorkId(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  composer_catalog_number_(arena),
  proprietary_id_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.MusicalWorkId)
}
MusicalWorkId::MusicalWorkId(const MusicalWorkId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      composer_catalog_number_(from.composer_catalog_number_),
      proprietary_id_(from.proprietary_id_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  i_s_w_c_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_i_s_w_c()) {
    i_s_w_c_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_i_s_w_c(),
      GetArena());
  }
  opus_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_opus_number()) {
    opus_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_opus_number(),
      GetArena());
  }
  is_replaced_ = from.is_replaced_;
  // @@protoc_insertion_point(copy_constructor:ern411.ern.MusicalWorkId)
}

void MusicalWorkId::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MusicalWorkId_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  i_s_w_c_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  opus_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  is_replaced_ = false;
}

MusicalWorkId::~MusicalWorkId() {
  // @@protoc_insertion_point(destructor:ern411.ern.MusicalWorkId)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MusicalWorkId::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  i_s_w_c_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  opus_number_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MusicalWorkId::ArenaDtor(void* object) {
  MusicalWorkId* _this = reinterpret_cast< MusicalWorkId* >(object);
  (void)_this;
}
void MusicalWorkId::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MusicalWorkId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MusicalWorkId& MusicalWorkId::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MusicalWorkId_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void MusicalWorkId::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.MusicalWorkId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  composer_catalog_number_.Clear();
  proprietary_id_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      i_s_w_c_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      opus_number_.ClearNonDefaultToEmpty();
    }
  }
  is_replaced_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MusicalWorkId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string composer_catalog_number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_composer_catalog_number();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.MusicalWorkId.composer_catalog_number");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string i_s_w_c = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_i_s_w_c();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.MusicalWorkId.i_s_w_c");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_replaced = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_is_replaced(&has_bits);
          is_replaced_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string opus_number = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_opus_number();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.MusicalWorkId.opus_number");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.ProprietaryId proprietary_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_proprietary_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MusicalWorkId::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.MusicalWorkId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string composer_catalog_number = 1;
  for (int i = 0, n = this->_internal_composer_catalog_number_size(); i < n; i++) {
    const auto& s = this->_internal_composer_catalog_number(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.MusicalWorkId.composer_catalog_number");
    target = stream->WriteString(1, s, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string i_s_w_c = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_i_s_w_c().data(), static_cast<int>(this->_internal_i_s_w_c().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.MusicalWorkId.i_s_w_c");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_i_s_w_c(), target);
  }

  // optional bool is_replaced = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_replaced(), target);
  }

  // optional string opus_number = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_opus_number().data(), static_cast<int>(this->_internal_opus_number().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.MusicalWorkId.opus_number");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_opus_number(), target);
  }

  // repeated .ern411.ern.ProprietaryId proprietary_id = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_proprietary_id_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_proprietary_id(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.MusicalWorkId)
  return target;
}

size_t MusicalWorkId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.MusicalWorkId)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string composer_catalog_number = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(composer_catalog_number_.size());
  for (int i = 0, n = composer_catalog_number_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      composer_catalog_number_.Get(i));
  }

  // repeated .ern411.ern.ProprietaryId proprietary_id = 5;
  total_size += 1UL * this->_internal_proprietary_id_size();
  for (const auto& msg : this->proprietary_id_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string i_s_w_c = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_i_s_w_c());
    }

    // optional string opus_number = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_opus_number());
    }

    // optional bool is_replaced = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MusicalWorkId::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.MusicalWorkId)
  GOOGLE_DCHECK_NE(&from, this);
  const MusicalWorkId* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MusicalWorkId>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.MusicalWorkId)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.MusicalWorkId)
    MergeFrom(*source);
  }
}

void MusicalWorkId::MergeFrom(const MusicalWorkId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.MusicalWorkId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  composer_catalog_number_.MergeFrom(from.composer_catalog_number_);
  proprietary_id_.MergeFrom(from.proprietary_id_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_i_s_w_c(from._internal_i_s_w_c());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_opus_number(from._internal_opus_number());
    }
    if (cached_has_bits & 0x00000004u) {
      is_replaced_ = from.is_replaced_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MusicalWorkId::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.MusicalWorkId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MusicalWorkId::CopyFrom(const MusicalWorkId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.MusicalWorkId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MusicalWorkId::IsInitialized() const {
  return true;
}

void MusicalWorkId::InternalSwap(MusicalWorkId* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  composer_catalog_number_.InternalSwap(&other->composer_catalog_number_);
  proprietary_id_.InternalSwap(&other->proprietary_id_);
  i_s_w_c_.Swap(&other->i_s_w_c_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  opus_number_.Swap(&other->opus_number_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(is_replaced_, other->is_replaced_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MusicalWorkId::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Name::InitAsDefaultInstance() {
}
class Name::_Internal {
 public:
  using HasBits = decltype(std::declval<Name>()._has_bits_);
  static void set_has_language_and_script_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ext_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Name::Name(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.Name)
}
Name::Name(const Name& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  language_and_script_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_language_and_script_code()) {
    language_and_script_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_language_and_script_code(),
      GetArena());
  }
  ext_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ext_value()) {
    ext_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ext_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:ern411.ern.Name)
}

void Name::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Name_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  language_and_script_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ext_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Name::~Name() {
  // @@protoc_insertion_point(destructor:ern411.ern.Name)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Name::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  language_and_script_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ext_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Name::ArenaDtor(void* object) {
  Name* _this = reinterpret_cast< Name* >(object);
  (void)_this;
}
void Name::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Name::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Name& Name::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Name_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void Name::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.Name)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      language_and_script_code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      ext_value_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Name::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string language_and_script_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_language_and_script_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.Name.language_and_script_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string ext_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_ext_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.Name.ext_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Name::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.Name)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string language_and_script_code = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_language_and_script_code().data(), static_cast<int>(this->_internal_language_and_script_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.Name.language_and_script_code");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_language_and_script_code(), target);
  }

  // optional string ext_value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ext_value().data(), static_cast<int>(this->_internal_ext_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.Name.ext_value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ext_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.Name)
  return target;
}

size_t Name::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.Name)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string language_and_script_code = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_language_and_script_code());
    }

    // optional string ext_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ext_value());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Name::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.Name)
  GOOGLE_DCHECK_NE(&from, this);
  const Name* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Name>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.Name)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.Name)
    MergeFrom(*source);
  }
}

void Name::MergeFrom(const Name& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.Name)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_language_and_script_code(from._internal_language_and_script_code());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_ext_value(from._internal_ext_value());
    }
  }
}

void Name::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.Name)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Name::CopyFrom(const Name& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.Name)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Name::IsInitialized() const {
  return true;
}

void Name::InternalSwap(Name* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  language_and_script_code_.Swap(&other->language_and_script_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ext_value_.Swap(&other->ext_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Name::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NewReleaseMessage::InitAsDefaultInstance() {
  ::ern411::ern::_NewReleaseMessage_default_instance_._instance.get_mutable()->chapter_list_ = const_cast< ::ern411::ern::ChapterList*>(
      ::ern411::ern::ChapterList::internal_default_instance());
  ::ern411::ern::_NewReleaseMessage_default_instance_._instance.get_mutable()->cue_sheet_list_ = const_cast< ::ern411::ern::DetailedCueSheetList*>(
      ::ern411::ern::DetailedCueSheetList::internal_default_instance());
  ::ern411::ern::_NewReleaseMessage_default_instance_._instance.get_mutable()->deal_list_ = const_cast< ::ern411::ern::DealList*>(
      ::ern411::ern::DealList::internal_default_instance());
  ::ern411::ern::_NewReleaseMessage_default_instance_._instance.get_mutable()->message_header_ = const_cast< ::ern411::ern::MessageHeader*>(
      ::ern411::ern::MessageHeader::internal_default_instance());
  ::ern411::ern::_NewReleaseMessage_default_instance_._instance.get_mutable()->party_list_ = const_cast< ::ern411::ern::PartyList*>(
      ::ern411::ern::PartyList::internal_default_instance());
  ::ern411::ern::_NewReleaseMessage_default_instance_._instance.get_mutable()->release_list_ = const_cast< ::ern411::ern::ReleaseList*>(
      ::ern411::ern::ReleaseList::internal_default_instance());
  ::ern411::ern::_NewReleaseMessage_default_instance_._instance.get_mutable()->release_profile_variant_version_id_ = const_cast< ::ern411::avs::ReleaseProfileVariantVersionId*>(
      ::ern411::avs::ReleaseProfileVariantVersionId::internal_default_instance());
  ::ern411::ern::_NewReleaseMessage_default_instance_._instance.get_mutable()->release_profile_version_id_ = const_cast< ::ern411::avs::ReleaseProfileVersionId*>(
      ::ern411::avs::ReleaseProfileVersionId::internal_default_instance());
  ::ern411::ern::_NewReleaseMessage_default_instance_._instance.get_mutable()->resource_list_ = const_cast< ::ern411::ern::ResourceList*>(
      ::ern411::ern::ResourceList::internal_default_instance());
  ::ern411::ern::_NewReleaseMessage_default_instance_._instance.get_mutable()->supplemental_document_list_ = const_cast< ::ern411::ern::SupplementalDocumentList*>(
      ::ern411::ern::SupplementalDocumentList::internal_default_instance());
}
class NewReleaseMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<NewReleaseMessage>()._has_bits_);
  static const ::ern411::ern::ChapterList& chapter_list(const NewReleaseMessage* msg);
  static void set_has_chapter_list(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::ern411::ern::DetailedCueSheetList& cue_sheet_list(const NewReleaseMessage* msg);
  static void set_has_cue_sheet_list(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::ern411::ern::DealList& deal_list(const NewReleaseMessage* msg);
  static void set_has_deal_list(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_language_and_script_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ern411::ern::MessageHeader& message_header(const NewReleaseMessage* msg);
  static void set_has_message_header(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::ern411::ern::PartyList& party_list(const NewReleaseMessage* msg);
  static void set_has_party_list(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::ern411::ern::ReleaseList& release_list(const NewReleaseMessage* msg);
  static void set_has_release_list(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::ern411::avs::ReleaseProfileVariantVersionId& release_profile_variant_version_id(const NewReleaseMessage* msg);
  static void set_has_release_profile_variant_version_id(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::ern411::avs::ReleaseProfileVersionId& release_profile_version_id(const NewReleaseMessage* msg);
  static void set_has_release_profile_version_id(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::ern411::ern::ResourceList& resource_list(const NewReleaseMessage* msg);
  static void set_has_resource_list(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::ern411::ern::SupplementalDocumentList& supplemental_document_list(const NewReleaseMessage* msg);
  static void set_has_supplemental_document_list(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

const ::ern411::ern::ChapterList&
NewReleaseMessage::_Internal::chapter_list(const NewReleaseMessage* msg) {
  return *msg->chapter_list_;
}
const ::ern411::ern::DetailedCueSheetList&
NewReleaseMessage::_Internal::cue_sheet_list(const NewReleaseMessage* msg) {
  return *msg->cue_sheet_list_;
}
const ::ern411::ern::DealList&
NewReleaseMessage::_Internal::deal_list(const NewReleaseMessage* msg) {
  return *msg->deal_list_;
}
const ::ern411::ern::MessageHeader&
NewReleaseMessage::_Internal::message_header(const NewReleaseMessage* msg) {
  return *msg->message_header_;
}
const ::ern411::ern::PartyList&
NewReleaseMessage::_Internal::party_list(const NewReleaseMessage* msg) {
  return *msg->party_list_;
}
const ::ern411::ern::ReleaseList&
NewReleaseMessage::_Internal::release_list(const NewReleaseMessage* msg) {
  return *msg->release_list_;
}
const ::ern411::avs::ReleaseProfileVariantVersionId&
NewReleaseMessage::_Internal::release_profile_variant_version_id(const NewReleaseMessage* msg) {
  return *msg->release_profile_variant_version_id_;
}
const ::ern411::avs::ReleaseProfileVersionId&
NewReleaseMessage::_Internal::release_profile_version_id(const NewReleaseMessage* msg) {
  return *msg->release_profile_version_id_;
}
const ::ern411::ern::ResourceList&
NewReleaseMessage::_Internal::resource_list(const NewReleaseMessage* msg) {
  return *msg->resource_list_;
}
const ::ern411::ern::SupplementalDocumentList&
NewReleaseMessage::_Internal::supplemental_document_list(const NewReleaseMessage* msg) {
  return *msg->supplemental_document_list_;
}
void NewReleaseMessage::clear_release_profile_variant_version_id() {
  if (release_profile_variant_version_id_ != nullptr) release_profile_variant_version_id_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
void NewReleaseMessage::clear_release_profile_version_id() {
  if (release_profile_version_id_ != nullptr) release_profile_version_id_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
NewReleaseMessage::NewReleaseMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.NewReleaseMessage)
}
NewReleaseMessage::NewReleaseMessage(const NewReleaseMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  language_and_script_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_language_and_script_code()) {
    language_and_script_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_language_and_script_code(),
      GetArena());
  }
  if (from._internal_has_chapter_list()) {
    chapter_list_ = new ::ern411::ern::ChapterList(*from.chapter_list_);
  } else {
    chapter_list_ = nullptr;
  }
  if (from._internal_has_cue_sheet_list()) {
    cue_sheet_list_ = new ::ern411::ern::DetailedCueSheetList(*from.cue_sheet_list_);
  } else {
    cue_sheet_list_ = nullptr;
  }
  if (from._internal_has_deal_list()) {
    deal_list_ = new ::ern411::ern::DealList(*from.deal_list_);
  } else {
    deal_list_ = nullptr;
  }
  if (from._internal_has_message_header()) {
    message_header_ = new ::ern411::ern::MessageHeader(*from.message_header_);
  } else {
    message_header_ = nullptr;
  }
  if (from._internal_has_party_list()) {
    party_list_ = new ::ern411::ern::PartyList(*from.party_list_);
  } else {
    party_list_ = nullptr;
  }
  if (from._internal_has_release_list()) {
    release_list_ = new ::ern411::ern::ReleaseList(*from.release_list_);
  } else {
    release_list_ = nullptr;
  }
  if (from._internal_has_release_profile_variant_version_id()) {
    release_profile_variant_version_id_ = new ::ern411::avs::ReleaseProfileVariantVersionId(*from.release_profile_variant_version_id_);
  } else {
    release_profile_variant_version_id_ = nullptr;
  }
  if (from._internal_has_release_profile_version_id()) {
    release_profile_version_id_ = new ::ern411::avs::ReleaseProfileVersionId(*from.release_profile_version_id_);
  } else {
    release_profile_version_id_ = nullptr;
  }
  if (from._internal_has_resource_list()) {
    resource_list_ = new ::ern411::ern::ResourceList(*from.resource_list_);
  } else {
    resource_list_ = nullptr;
  }
  if (from._internal_has_supplemental_document_list()) {
    supplemental_document_list_ = new ::ern411::ern::SupplementalDocumentList(*from.supplemental_document_list_);
  } else {
    supplemental_document_list_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ern411.ern.NewReleaseMessage)
}

void NewReleaseMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NewReleaseMessage_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  language_and_script_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&chapter_list_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&supplemental_document_list_) -
      reinterpret_cast<char*>(&chapter_list_)) + sizeof(supplemental_document_list_));
}

NewReleaseMessage::~NewReleaseMessage() {
  // @@protoc_insertion_point(destructor:ern411.ern.NewReleaseMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NewReleaseMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  language_and_script_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete chapter_list_;
  if (this != internal_default_instance()) delete cue_sheet_list_;
  if (this != internal_default_instance()) delete deal_list_;
  if (this != internal_default_instance()) delete message_header_;
  if (this != internal_default_instance()) delete party_list_;
  if (this != internal_default_instance()) delete release_list_;
  if (this != internal_default_instance()) delete release_profile_variant_version_id_;
  if (this != internal_default_instance()) delete release_profile_version_id_;
  if (this != internal_default_instance()) delete resource_list_;
  if (this != internal_default_instance()) delete supplemental_document_list_;
}

void NewReleaseMessage::ArenaDtor(void* object) {
  NewReleaseMessage* _this = reinterpret_cast< NewReleaseMessage* >(object);
  (void)_this;
}
void NewReleaseMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NewReleaseMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NewReleaseMessage& NewReleaseMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NewReleaseMessage_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void NewReleaseMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.NewReleaseMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      language_and_script_code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(chapter_list_ != nullptr);
      chapter_list_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(cue_sheet_list_ != nullptr);
      cue_sheet_list_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(deal_list_ != nullptr);
      deal_list_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(message_header_ != nullptr);
      message_header_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(party_list_ != nullptr);
      party_list_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(release_list_ != nullptr);
      release_list_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(release_profile_variant_version_id_ != nullptr);
      release_profile_variant_version_id_->Clear();
    }
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(release_profile_version_id_ != nullptr);
      release_profile_version_id_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(resource_list_ != nullptr);
      resource_list_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(supplemental_document_list_ != nullptr);
      supplemental_document_list_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NewReleaseMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ern411.ern.ChapterList chapter_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_chapter_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.ern.DetailedCueSheetList cue_sheet_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_cue_sheet_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.ern.DealList deal_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_deal_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string language_and_script_code = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_language_and_script_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.NewReleaseMessage.language_and_script_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.ern.MessageHeader message_header = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_message_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.ern.PartyList party_list = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_party_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.ern.ReleaseList release_list = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_release_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.avs.ReleaseProfileVariantVersionId release_profile_variant_version_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_release_profile_variant_version_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.avs.ReleaseProfileVersionId release_profile_version_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_release_profile_version_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.ern.ResourceList resource_list = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_resource_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.ern.SupplementalDocumentList supplemental_document_list = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_supplemental_document_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NewReleaseMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.NewReleaseMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ern411.ern.ChapterList chapter_list = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::chapter_list(this), target, stream);
  }

  // optional .ern411.ern.DetailedCueSheetList cue_sheet_list = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::cue_sheet_list(this), target, stream);
  }

  // optional .ern411.ern.DealList deal_list = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::deal_list(this), target, stream);
  }

  // optional string language_and_script_code = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_language_and_script_code().data(), static_cast<int>(this->_internal_language_and_script_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.NewReleaseMessage.language_and_script_code");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_language_and_script_code(), target);
  }

  // optional .ern411.ern.MessageHeader message_header = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::message_header(this), target, stream);
  }

  // optional .ern411.ern.PartyList party_list = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::party_list(this), target, stream);
  }

  // optional .ern411.ern.ReleaseList release_list = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::release_list(this), target, stream);
  }

  // optional .ern411.avs.ReleaseProfileVariantVersionId release_profile_variant_version_id = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::release_profile_variant_version_id(this), target, stream);
  }

  // optional .ern411.avs.ReleaseProfileVersionId release_profile_version_id = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::release_profile_version_id(this), target, stream);
  }

  // optional .ern411.ern.ResourceList resource_list = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::resource_list(this), target, stream);
  }

  // optional .ern411.ern.SupplementalDocumentList supplemental_document_list = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::supplemental_document_list(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.NewReleaseMessage)
  return target;
}

size_t NewReleaseMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.NewReleaseMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string language_and_script_code = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_language_and_script_code());
    }

    // optional .ern411.ern.ChapterList chapter_list = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *chapter_list_);
    }

    // optional .ern411.ern.DetailedCueSheetList cue_sheet_list = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cue_sheet_list_);
    }

    // optional .ern411.ern.DealList deal_list = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *deal_list_);
    }

    // optional .ern411.ern.MessageHeader message_header = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_header_);
    }

    // optional .ern411.ern.PartyList party_list = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *party_list_);
    }

    // optional .ern411.ern.ReleaseList release_list = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *release_list_);
    }

    // optional .ern411.avs.ReleaseProfileVariantVersionId release_profile_variant_version_id = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *release_profile_variant_version_id_);
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional .ern411.avs.ReleaseProfileVersionId release_profile_version_id = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *release_profile_version_id_);
    }

    // optional .ern411.ern.ResourceList resource_list = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *resource_list_);
    }

    // optional .ern411.ern.SupplementalDocumentList supplemental_document_list = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *supplemental_document_list_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NewReleaseMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.NewReleaseMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const NewReleaseMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NewReleaseMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.NewReleaseMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.NewReleaseMessage)
    MergeFrom(*source);
  }
}

void NewReleaseMessage::MergeFrom(const NewReleaseMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.NewReleaseMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_language_and_script_code(from._internal_language_and_script_code());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_chapter_list()->::ern411::ern::ChapterList::MergeFrom(from._internal_chapter_list());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_cue_sheet_list()->::ern411::ern::DetailedCueSheetList::MergeFrom(from._internal_cue_sheet_list());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_deal_list()->::ern411::ern::DealList::MergeFrom(from._internal_deal_list());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_message_header()->::ern411::ern::MessageHeader::MergeFrom(from._internal_message_header());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_party_list()->::ern411::ern::PartyList::MergeFrom(from._internal_party_list());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_release_list()->::ern411::ern::ReleaseList::MergeFrom(from._internal_release_list());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_release_profile_variant_version_id()->::ern411::avs::ReleaseProfileVariantVersionId::MergeFrom(from._internal_release_profile_variant_version_id());
    }
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_release_profile_version_id()->::ern411::avs::ReleaseProfileVersionId::MergeFrom(from._internal_release_profile_version_id());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_resource_list()->::ern411::ern::ResourceList::MergeFrom(from._internal_resource_list());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_supplemental_document_list()->::ern411::ern::SupplementalDocumentList::MergeFrom(from._internal_supplemental_document_list());
    }
  }
}

void NewReleaseMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.NewReleaseMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewReleaseMessage::CopyFrom(const NewReleaseMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.NewReleaseMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewReleaseMessage::IsInitialized() const {
  return true;
}

void NewReleaseMessage::InternalSwap(NewReleaseMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  language_and_script_code_.Swap(&other->language_and_script_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NewReleaseMessage, supplemental_document_list_)
      + sizeof(NewReleaseMessage::supplemental_document_list_)
      - PROTOBUF_FIELD_OFFSET(NewReleaseMessage, chapter_list_)>(
          reinterpret_cast<char*>(&chapter_list_),
          reinterpret_cast<char*>(&other->chapter_list_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NewReleaseMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OperatingSystemType::InitAsDefaultInstance() {
  ::ern411::ern::_OperatingSystemType_default_instance_._instance.get_mutable()->ext_value_ = const_cast< ::ern411::avs::OperatingSystemType*>(
      ::ern411::avs::OperatingSystemType::internal_default_instance());
}
class OperatingSystemType::_Internal {
 public:
  using HasBits = decltype(std::declval<OperatingSystemType>()._has_bits_);
  static void set_has_namespace_(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_user_defined_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::ern411::avs::OperatingSystemType& ext_value(const OperatingSystemType* msg);
  static void set_has_ext_value(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::ern411::avs::OperatingSystemType&
OperatingSystemType::_Internal::ext_value(const OperatingSystemType* msg) {
  return *msg->ext_value_;
}
void OperatingSystemType::clear_ext_value() {
  if (ext_value_ != nullptr) ext_value_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
OperatingSystemType::OperatingSystemType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.OperatingSystemType)
}
OperatingSystemType::OperatingSystemType(const OperatingSystemType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_namespace_()) {
    namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_namespace_(),
      GetArena());
  }
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_user_defined_value()) {
    user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_defined_value(),
      GetArena());
  }
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_version()) {
    version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_version(),
      GetArena());
  }
  if (from._internal_has_ext_value()) {
    ext_value_ = new ::ern411::avs::OperatingSystemType(*from.ext_value_);
  } else {
    ext_value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ern411.ern.OperatingSystemType)
}

void OperatingSystemType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OperatingSystemType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ext_value_ = nullptr;
}

OperatingSystemType::~OperatingSystemType() {
  // @@protoc_insertion_point(destructor:ern411.ern.OperatingSystemType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OperatingSystemType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  namespace__.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ext_value_;
}

void OperatingSystemType::ArenaDtor(void* object) {
  OperatingSystemType* _this = reinterpret_cast< OperatingSystemType* >(object);
  (void)_this;
}
void OperatingSystemType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OperatingSystemType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OperatingSystemType& OperatingSystemType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OperatingSystemType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void OperatingSystemType::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.OperatingSystemType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      namespace__.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      user_defined_value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      version_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(ext_value_ != nullptr);
      ext_value_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OperatingSystemType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string namespace = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_namespace_();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.OperatingSystemType.namespace");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string user_defined_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_user_defined_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.OperatingSystemType.user_defined_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.OperatingSystemType.version");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.avs.OperatingSystemType ext_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OperatingSystemType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.OperatingSystemType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string namespace = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_namespace_().data(), static_cast<int>(this->_internal_namespace_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.OperatingSystemType.namespace");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_namespace_(), target);
  }

  // optional string user_defined_value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_user_defined_value().data(), static_cast<int>(this->_internal_user_defined_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.OperatingSystemType.user_defined_value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_defined_value(), target);
  }

  // optional string version = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.OperatingSystemType.version");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_version(), target);
  }

  // optional .ern411.avs.OperatingSystemType ext_value = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::ext_value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.OperatingSystemType)
  return target;
}

size_t OperatingSystemType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.OperatingSystemType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string namespace = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_namespace_());
    }

    // optional string user_defined_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_defined_value());
    }

    // optional string version = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_version());
    }

    // optional .ern411.avs.OperatingSystemType ext_value = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ext_value_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OperatingSystemType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.OperatingSystemType)
  GOOGLE_DCHECK_NE(&from, this);
  const OperatingSystemType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OperatingSystemType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.OperatingSystemType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.OperatingSystemType)
    MergeFrom(*source);
  }
}

void OperatingSystemType::MergeFrom(const OperatingSystemType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.OperatingSystemType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_namespace_(from._internal_namespace_());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_user_defined_value(from._internal_user_defined_value());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_version(from._internal_version());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_ext_value()->::ern411::avs::OperatingSystemType::MergeFrom(from._internal_ext_value());
    }
  }
}

void OperatingSystemType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.OperatingSystemType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OperatingSystemType::CopyFrom(const OperatingSystemType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.OperatingSystemType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperatingSystemType::IsInitialized() const {
  return true;
}

void OperatingSystemType::InternalSwap(OperatingSystemType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  namespace__.Swap(&other->namespace__, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_defined_value_.Swap(&other->user_defined_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  version_.Swap(&other->version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(ext_value_, other->ext_value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OperatingSystemType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PLine::InitAsDefaultInstance() {
  ::ern411::ern::_PLine_default_instance_._instance.get_mutable()->p_line_type_ = const_cast< ::ern411::avs::PLineType*>(
      ::ern411::avs::PLineType::internal_default_instance());
}
class PLine::_Internal {
 public:
  using HasBits = decltype(std::declval<PLine>()._has_bits_);
  static void set_has_language_and_script_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_p_line_company(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_p_line_text(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::ern411::avs::PLineType& p_line_type(const PLine* msg);
  static void set_has_p_line_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_year(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::ern411::avs::PLineType&
PLine::_Internal::p_line_type(const PLine* msg) {
  return *msg->p_line_type_;
}
void PLine::clear_p_line_type() {
  if (p_line_type_ != nullptr) p_line_type_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
PLine::PLine(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.PLine)
}
PLine::PLine(const PLine& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  language_and_script_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_language_and_script_code()) {
    language_and_script_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_language_and_script_code(),
      GetArena());
  }
  p_line_company_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_p_line_company()) {
    p_line_company_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_p_line_company(),
      GetArena());
  }
  p_line_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_p_line_text()) {
    p_line_text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_p_line_text(),
      GetArena());
  }
  if (from._internal_has_p_line_type()) {
    p_line_type_ = new ::ern411::avs::PLineType(*from.p_line_type_);
  } else {
    p_line_type_ = nullptr;
  }
  year_ = from.year_;
  // @@protoc_insertion_point(copy_constructor:ern411.ern.PLine)
}

void PLine::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PLine_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  language_and_script_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  p_line_company_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  p_line_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&p_line_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&year_) -
      reinterpret_cast<char*>(&p_line_type_)) + sizeof(year_));
}

PLine::~PLine() {
  // @@protoc_insertion_point(destructor:ern411.ern.PLine)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PLine::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  language_and_script_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  p_line_company_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  p_line_text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete p_line_type_;
}

void PLine::ArenaDtor(void* object) {
  PLine* _this = reinterpret_cast< PLine* >(object);
  (void)_this;
}
void PLine::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PLine::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PLine& PLine::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PLine_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void PLine::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.PLine)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      language_and_script_code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      p_line_company_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      p_line_text_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(p_line_type_ != nullptr);
      p_line_type_->Clear();
    }
  }
  year_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PLine::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string language_and_script_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_language_and_script_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.PLine.language_and_script_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string p_line_company = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_p_line_company();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.PLine.p_line_company");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string p_line_text = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_p_line_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.PLine.p_line_text");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.avs.PLineType p_line_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_p_line_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 year = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_year(&has_bits);
          year_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PLine::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.PLine)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string language_and_script_code = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_language_and_script_code().data(), static_cast<int>(this->_internal_language_and_script_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.PLine.language_and_script_code");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_language_and_script_code(), target);
  }

  // optional string p_line_company = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_p_line_company().data(), static_cast<int>(this->_internal_p_line_company().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.PLine.p_line_company");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_p_line_company(), target);
  }

  // optional string p_line_text = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_p_line_text().data(), static_cast<int>(this->_internal_p_line_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.PLine.p_line_text");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_p_line_text(), target);
  }

  // optional .ern411.avs.PLineType p_line_type = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::p_line_type(this), target, stream);
  }

  // optional uint32 year = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_year(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.PLine)
  return target;
}

size_t PLine::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.PLine)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string language_and_script_code = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_language_and_script_code());
    }

    // optional string p_line_company = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_p_line_company());
    }

    // optional string p_line_text = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_p_line_text());
    }

    // optional .ern411.avs.PLineType p_line_type = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *p_line_type_);
    }

    // optional uint32 year = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_year());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PLine::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.PLine)
  GOOGLE_DCHECK_NE(&from, this);
  const PLine* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PLine>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.PLine)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.PLine)
    MergeFrom(*source);
  }
}

void PLine::MergeFrom(const PLine& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.PLine)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_language_and_script_code(from._internal_language_and_script_code());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_p_line_company(from._internal_p_line_company());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_p_line_text(from._internal_p_line_text());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_p_line_type()->::ern411::avs::PLineType::MergeFrom(from._internal_p_line_type());
    }
    if (cached_has_bits & 0x00000010u) {
      year_ = from.year_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PLine::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.PLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PLine::CopyFrom(const PLine& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.PLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PLine::IsInitialized() const {
  return true;
}

void PLine::InternalSwap(PLine* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  language_and_script_code_.Swap(&other->language_and_script_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  p_line_company_.Swap(&other->p_line_company_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  p_line_text_.Swap(&other->p_line_text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PLine, year_)
      + sizeof(PLine::year_)
      - PROTOBUF_FIELD_OFFSET(PLine, p_line_type_)>(
          reinterpret_cast<char*>(&p_line_type_),
          reinterpret_cast<char*>(&other->p_line_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PLine::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PLineWithDefault::InitAsDefaultInstance() {
  ::ern411::ern::_PLineWithDefault_default_instance_._instance.get_mutable()->applicable_territory_code_ = const_cast< ::ern411::avs::CurrentTerritoryCode*>(
      ::ern411::avs::CurrentTerritoryCode::internal_default_instance());
}
class PLineWithDefault::_Internal {
 public:
  using HasBits = decltype(std::declval<PLineWithDefault>()._has_bits_);
  static const ::ern411::avs::CurrentTerritoryCode& applicable_territory_code(const PLineWithDefault* msg);
  static void set_has_applicable_territory_code(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_is_default(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_language_and_script_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_p_line_company(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_p_line_text(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_year(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::ern411::avs::CurrentTerritoryCode&
PLineWithDefault::_Internal::applicable_territory_code(const PLineWithDefault* msg) {
  return *msg->applicable_territory_code_;
}
void PLineWithDefault::clear_applicable_territory_code() {
  if (applicable_territory_code_ != nullptr) applicable_territory_code_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
PLineWithDefault::PLineWithDefault(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.PLineWithDefault)
}
PLineWithDefault::PLineWithDefault(const PLineWithDefault& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  language_and_script_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_language_and_script_code()) {
    language_and_script_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_language_and_script_code(),
      GetArena());
  }
  p_line_company_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_p_line_company()) {
    p_line_company_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_p_line_company(),
      GetArena());
  }
  p_line_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_p_line_text()) {
    p_line_text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_p_line_text(),
      GetArena());
  }
  if (from._internal_has_applicable_territory_code()) {
    applicable_territory_code_ = new ::ern411::avs::CurrentTerritoryCode(*from.applicable_territory_code_);
  } else {
    applicable_territory_code_ = nullptr;
  }
  ::memcpy(&is_default_, &from.is_default_,
    static_cast<size_t>(reinterpret_cast<char*>(&year_) -
    reinterpret_cast<char*>(&is_default_)) + sizeof(year_));
  // @@protoc_insertion_point(copy_constructor:ern411.ern.PLineWithDefault)
}

void PLineWithDefault::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PLineWithDefault_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  language_and_script_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  p_line_company_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  p_line_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&applicable_territory_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&year_) -
      reinterpret_cast<char*>(&applicable_territory_code_)) + sizeof(year_));
}

PLineWithDefault::~PLineWithDefault() {
  // @@protoc_insertion_point(destructor:ern411.ern.PLineWithDefault)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PLineWithDefault::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  language_and_script_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  p_line_company_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  p_line_text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete applicable_territory_code_;
}

void PLineWithDefault::ArenaDtor(void* object) {
  PLineWithDefault* _this = reinterpret_cast< PLineWithDefault* >(object);
  (void)_this;
}
void PLineWithDefault::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PLineWithDefault::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PLineWithDefault& PLineWithDefault::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PLineWithDefault_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void PLineWithDefault::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.PLineWithDefault)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      language_and_script_code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      p_line_company_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      p_line_text_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(applicable_territory_code_ != nullptr);
      applicable_territory_code_->Clear();
    }
  }
  if (cached_has_bits & 0x00000030u) {
    ::memset(&is_default_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&year_) -
        reinterpret_cast<char*>(&is_default_)) + sizeof(year_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PLineWithDefault::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ern411.avs.CurrentTerritoryCode applicable_territory_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_applicable_territory_code(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_default = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_is_default(&has_bits);
          is_default_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string language_and_script_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_language_and_script_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.PLineWithDefault.language_and_script_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string p_line_company = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_p_line_company();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.PLineWithDefault.p_line_company");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string p_line_text = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_p_line_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.PLineWithDefault.p_line_text");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 year = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_year(&has_bits);
          year_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PLineWithDefault::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.PLineWithDefault)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ern411.avs.CurrentTerritoryCode applicable_territory_code = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::applicable_territory_code(this), target, stream);
  }

  // optional bool is_default = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_default(), target);
  }

  // optional string language_and_script_code = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_language_and_script_code().data(), static_cast<int>(this->_internal_language_and_script_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.PLineWithDefault.language_and_script_code");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_language_and_script_code(), target);
  }

  // optional string p_line_company = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_p_line_company().data(), static_cast<int>(this->_internal_p_line_company().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.PLineWithDefault.p_line_company");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_p_line_company(), target);
  }

  // optional string p_line_text = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_p_line_text().data(), static_cast<int>(this->_internal_p_line_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.PLineWithDefault.p_line_text");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_p_line_text(), target);
  }

  // optional uint32 year = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_year(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.PLineWithDefault)
  return target;
}

size_t PLineWithDefault::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.PLineWithDefault)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string language_and_script_code = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_language_and_script_code());
    }

    // optional string p_line_company = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_p_line_company());
    }

    // optional string p_line_text = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_p_line_text());
    }

    // optional .ern411.avs.CurrentTerritoryCode applicable_territory_code = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *applicable_territory_code_);
    }

    // optional bool is_default = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional uint32 year = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_year());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PLineWithDefault::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.PLineWithDefault)
  GOOGLE_DCHECK_NE(&from, this);
  const PLineWithDefault* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PLineWithDefault>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.PLineWithDefault)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.PLineWithDefault)
    MergeFrom(*source);
  }
}

void PLineWithDefault::MergeFrom(const PLineWithDefault& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.PLineWithDefault)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_language_and_script_code(from._internal_language_and_script_code());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_p_line_company(from._internal_p_line_company());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_p_line_text(from._internal_p_line_text());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_applicable_territory_code()->::ern411::avs::CurrentTerritoryCode::MergeFrom(from._internal_applicable_territory_code());
    }
    if (cached_has_bits & 0x00000010u) {
      is_default_ = from.is_default_;
    }
    if (cached_has_bits & 0x00000020u) {
      year_ = from.year_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PLineWithDefault::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.PLineWithDefault)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PLineWithDefault::CopyFrom(const PLineWithDefault& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.PLineWithDefault)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PLineWithDefault::IsInitialized() const {
  return true;
}

void PLineWithDefault::InternalSwap(PLineWithDefault* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  language_and_script_code_.Swap(&other->language_and_script_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  p_line_company_.Swap(&other->p_line_company_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  p_line_text_.Swap(&other->p_line_text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PLineWithDefault, year_)
      + sizeof(PLineWithDefault::year_)
      - PROTOBUF_FIELD_OFFSET(PLineWithDefault, applicable_territory_code_)>(
          reinterpret_cast<char*>(&applicable_territory_code_),
          reinterpret_cast<char*>(&other->applicable_territory_code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PLineWithDefault::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ParentalWarningTypeWithTerritory::InitAsDefaultInstance() {
  ::ern411::ern::_ParentalWarningTypeWithTerritory_default_instance_._instance.get_mutable()->applicable_territory_code_ = const_cast< ::ern411::avs::CurrentTerritoryCode*>(
      ::ern411::avs::CurrentTerritoryCode::internal_default_instance());
  ::ern411::ern::_ParentalWarningTypeWithTerritory_default_instance_._instance.get_mutable()->ext_value_ = const_cast< ::ern411::avs::ParentalWarningType*>(
      ::ern411::avs::ParentalWarningType::internal_default_instance());
}
class ParentalWarningTypeWithTerritory::_Internal {
 public:
  using HasBits = decltype(std::declval<ParentalWarningTypeWithTerritory>()._has_bits_);
  static const ::ern411::avs::CurrentTerritoryCode& applicable_territory_code(const ParentalWarningTypeWithTerritory* msg);
  static void set_has_applicable_territory_code(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_default(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_namespace_(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_user_defined_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::ern411::avs::ParentalWarningType& ext_value(const ParentalWarningTypeWithTerritory* msg);
  static void set_has_ext_value(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::ern411::avs::CurrentTerritoryCode&
ParentalWarningTypeWithTerritory::_Internal::applicable_territory_code(const ParentalWarningTypeWithTerritory* msg) {
  return *msg->applicable_territory_code_;
}
const ::ern411::avs::ParentalWarningType&
ParentalWarningTypeWithTerritory::_Internal::ext_value(const ParentalWarningTypeWithTerritory* msg) {
  return *msg->ext_value_;
}
void ParentalWarningTypeWithTerritory::clear_applicable_territory_code() {
  if (applicable_territory_code_ != nullptr) applicable_territory_code_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void ParentalWarningTypeWithTerritory::clear_ext_value() {
  if (ext_value_ != nullptr) ext_value_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
ParentalWarningTypeWithTerritory::ParentalWarningTypeWithTerritory(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.ParentalWarningTypeWithTerritory)
}
ParentalWarningTypeWithTerritory::ParentalWarningTypeWithTerritory(const ParentalWarningTypeWithTerritory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_namespace_()) {
    namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_namespace_(),
      GetArena());
  }
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_user_defined_value()) {
    user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_defined_value(),
      GetArena());
  }
  if (from._internal_has_applicable_territory_code()) {
    applicable_territory_code_ = new ::ern411::avs::CurrentTerritoryCode(*from.applicable_territory_code_);
  } else {
    applicable_territory_code_ = nullptr;
  }
  if (from._internal_has_ext_value()) {
    ext_value_ = new ::ern411::avs::ParentalWarningType(*from.ext_value_);
  } else {
    ext_value_ = nullptr;
  }
  is_default_ = from.is_default_;
  // @@protoc_insertion_point(copy_constructor:ern411.ern.ParentalWarningTypeWithTerritory)
}

void ParentalWarningTypeWithTerritory::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ParentalWarningTypeWithTerritory_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&applicable_territory_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_default_) -
      reinterpret_cast<char*>(&applicable_territory_code_)) + sizeof(is_default_));
}

ParentalWarningTypeWithTerritory::~ParentalWarningTypeWithTerritory() {
  // @@protoc_insertion_point(destructor:ern411.ern.ParentalWarningTypeWithTerritory)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ParentalWarningTypeWithTerritory::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  namespace__.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete applicable_territory_code_;
  if (this != internal_default_instance()) delete ext_value_;
}

void ParentalWarningTypeWithTerritory::ArenaDtor(void* object) {
  ParentalWarningTypeWithTerritory* _this = reinterpret_cast< ParentalWarningTypeWithTerritory* >(object);
  (void)_this;
}
void ParentalWarningTypeWithTerritory::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ParentalWarningTypeWithTerritory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ParentalWarningTypeWithTerritory& ParentalWarningTypeWithTerritory::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ParentalWarningTypeWithTerritory_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void ParentalWarningTypeWithTerritory::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.ParentalWarningTypeWithTerritory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      namespace__.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      user_defined_value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(applicable_territory_code_ != nullptr);
      applicable_territory_code_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(ext_value_ != nullptr);
      ext_value_->Clear();
    }
  }
  is_default_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ParentalWarningTypeWithTerritory::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ern411.avs.CurrentTerritoryCode applicable_territory_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_applicable_territory_code(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_default = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_is_default(&has_bits);
          is_default_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string namespace = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_namespace_();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.ParentalWarningTypeWithTerritory.namespace");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string user_defined_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_user_defined_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.ParentalWarningTypeWithTerritory.user_defined_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.avs.ParentalWarningType ext_value = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ParentalWarningTypeWithTerritory::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.ParentalWarningTypeWithTerritory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ern411.avs.CurrentTerritoryCode applicable_territory_code = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::applicable_territory_code(this), target, stream);
  }

  // optional bool is_default = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_default(), target);
  }

  // optional string namespace = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_namespace_().data(), static_cast<int>(this->_internal_namespace_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.ParentalWarningTypeWithTerritory.namespace");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_namespace_(), target);
  }

  // optional string user_defined_value = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_user_defined_value().data(), static_cast<int>(this->_internal_user_defined_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.ParentalWarningTypeWithTerritory.user_defined_value");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_user_defined_value(), target);
  }

  // optional .ern411.avs.ParentalWarningType ext_value = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::ext_value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.ParentalWarningTypeWithTerritory)
  return target;
}

size_t ParentalWarningTypeWithTerritory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.ParentalWarningTypeWithTerritory)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string namespace = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_namespace_());
    }

    // optional string user_defined_value = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_defined_value());
    }

    // optional .ern411.avs.CurrentTerritoryCode applicable_territory_code = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *applicable_territory_code_);
    }

    // optional .ern411.avs.ParentalWarningType ext_value = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ext_value_);
    }

    // optional bool is_default = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ParentalWarningTypeWithTerritory::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.ParentalWarningTypeWithTerritory)
  GOOGLE_DCHECK_NE(&from, this);
  const ParentalWarningTypeWithTerritory* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ParentalWarningTypeWithTerritory>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.ParentalWarningTypeWithTerritory)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.ParentalWarningTypeWithTerritory)
    MergeFrom(*source);
  }
}

void ParentalWarningTypeWithTerritory::MergeFrom(const ParentalWarningTypeWithTerritory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.ParentalWarningTypeWithTerritory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_namespace_(from._internal_namespace_());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_user_defined_value(from._internal_user_defined_value());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_applicable_territory_code()->::ern411::avs::CurrentTerritoryCode::MergeFrom(from._internal_applicable_territory_code());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_ext_value()->::ern411::avs::ParentalWarningType::MergeFrom(from._internal_ext_value());
    }
    if (cached_has_bits & 0x00000010u) {
      is_default_ = from.is_default_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ParentalWarningTypeWithTerritory::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.ParentalWarningTypeWithTerritory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParentalWarningTypeWithTerritory::CopyFrom(const ParentalWarningTypeWithTerritory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.ParentalWarningTypeWithTerritory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParentalWarningTypeWithTerritory::IsInitialized() const {
  return true;
}

void ParentalWarningTypeWithTerritory::InternalSwap(ParentalWarningTypeWithTerritory* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  namespace__.Swap(&other->namespace__, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_defined_value_.Swap(&other->user_defined_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ParentalWarningTypeWithTerritory, is_default_)
      + sizeof(ParentalWarningTypeWithTerritory::is_default_)
      - PROTOBUF_FIELD_OFFSET(ParentalWarningTypeWithTerritory, applicable_territory_code_)>(
          reinterpret_cast<char*>(&applicable_territory_code_),
          reinterpret_cast<char*>(&other->applicable_territory_code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ParentalWarningTypeWithTerritory::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Party::InitAsDefaultInstance() {
}
class Party::_Internal {
 public:
  using HasBits = decltype(std::declval<Party>()._has_bits_);
  static void set_has_party_reference(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Party::Party(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  affiliation_(arena),
  artist_profile_page_(arena),
  party_id_(arena),
  party_name_(arena),
  related_party_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.Party)
}
Party::Party(const Party& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      affiliation_(from.affiliation_),
      artist_profile_page_(from.artist_profile_page_),
      party_id_(from.party_id_),
      party_name_(from.party_name_),
      related_party_(from.related_party_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  party_reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_party_reference()) {
    party_reference_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_party_reference(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:ern411.ern.Party)
}

void Party::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Party_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  party_reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Party::~Party() {
  // @@protoc_insertion_point(destructor:ern411.ern.Party)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Party::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  party_reference_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Party::ArenaDtor(void* object) {
  Party* _this = reinterpret_cast< Party* >(object);
  (void)_this;
}
void Party::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Party::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Party& Party::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Party_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void Party::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.Party)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  affiliation_.Clear();
  artist_profile_page_.Clear();
  party_id_.Clear();
  party_name_.Clear();
  related_party_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    party_reference_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Party::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ern411.ern.Affiliation affiliation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_affiliation(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string artist_profile_page = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_artist_profile_page();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.Party.artist_profile_page");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.DetailedPartyId party_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_party_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.PartyNameWithTerritory party_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_party_name(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string party_reference = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_party_reference();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.Party.party_reference");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.RelatedParty related_party = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_related_party(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Party::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.Party)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ern411.ern.Affiliation affiliation = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_affiliation_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_affiliation(i), target, stream);
  }

  // repeated string artist_profile_page = 2;
  for (int i = 0, n = this->_internal_artist_profile_page_size(); i < n; i++) {
    const auto& s = this->_internal_artist_profile_page(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.Party.artist_profile_page");
    target = stream->WriteString(2, s, target);
  }

  // repeated .ern411.ern.DetailedPartyId party_id = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_party_id_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_party_id(i), target, stream);
  }

  // repeated .ern411.ern.PartyNameWithTerritory party_name = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_party_name_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_party_name(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional string party_reference = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_party_reference().data(), static_cast<int>(this->_internal_party_reference().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.Party.party_reference");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_party_reference(), target);
  }

  // repeated .ern411.ern.RelatedParty related_party = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_related_party_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_related_party(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.Party)
  return target;
}

size_t Party::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.Party)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ern411.ern.Affiliation affiliation = 1;
  total_size += 1UL * this->_internal_affiliation_size();
  for (const auto& msg : this->affiliation_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string artist_profile_page = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(artist_profile_page_.size());
  for (int i = 0, n = artist_profile_page_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      artist_profile_page_.Get(i));
  }

  // repeated .ern411.ern.DetailedPartyId party_id = 3;
  total_size += 1UL * this->_internal_party_id_size();
  for (const auto& msg : this->party_id_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.PartyNameWithTerritory party_name = 4;
  total_size += 1UL * this->_internal_party_name_size();
  for (const auto& msg : this->party_name_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.RelatedParty related_party = 6;
  total_size += 1UL * this->_internal_related_party_size();
  for (const auto& msg : this->related_party_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional string party_reference = 5;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_party_reference());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Party::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.Party)
  GOOGLE_DCHECK_NE(&from, this);
  const Party* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Party>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.Party)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.Party)
    MergeFrom(*source);
  }
}

void Party::MergeFrom(const Party& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.Party)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  affiliation_.MergeFrom(from.affiliation_);
  artist_profile_page_.MergeFrom(from.artist_profile_page_);
  party_id_.MergeFrom(from.party_id_);
  party_name_.MergeFrom(from.party_name_);
  related_party_.MergeFrom(from.related_party_);
  if (from._internal_has_party_reference()) {
    _internal_set_party_reference(from._internal_party_reference());
  }
}

void Party::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.Party)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Party::CopyFrom(const Party& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.Party)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Party::IsInitialized() const {
  return true;
}

void Party::InternalSwap(Party* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  affiliation_.InternalSwap(&other->affiliation_);
  artist_profile_page_.InternalSwap(&other->artist_profile_page_);
  party_id_.InternalSwap(&other->party_id_);
  party_name_.InternalSwap(&other->party_name_);
  related_party_.InternalSwap(&other->related_party_);
  party_reference_.Swap(&other->party_reference_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Party::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PartyList::InitAsDefaultInstance() {
}
class PartyList::_Internal {
 public:
};

PartyList::PartyList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  party_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.PartyList)
}
PartyList::PartyList(const PartyList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      party_(from.party_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ern411.ern.PartyList)
}

void PartyList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PartyList_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
}

PartyList::~PartyList() {
  // @@protoc_insertion_point(destructor:ern411.ern.PartyList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PartyList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PartyList::ArenaDtor(void* object) {
  PartyList* _this = reinterpret_cast< PartyList* >(object);
  (void)_this;
}
void PartyList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PartyList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PartyList& PartyList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PartyList_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void PartyList::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.PartyList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  party_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PartyList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ern411.ern.Party party = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_party(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PartyList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.PartyList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ern411.ern.Party party = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_party_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_party(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.PartyList)
  return target;
}

size_t PartyList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.PartyList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ern411.ern.Party party = 1;
  total_size += 1UL * this->_internal_party_size();
  for (const auto& msg : this->party_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PartyList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.PartyList)
  GOOGLE_DCHECK_NE(&from, this);
  const PartyList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PartyList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.PartyList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.PartyList)
    MergeFrom(*source);
  }
}

void PartyList::MergeFrom(const PartyList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.PartyList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  party_.MergeFrom(from.party_);
}

void PartyList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.PartyList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PartyList::CopyFrom(const PartyList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.PartyList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PartyList::IsInitialized() const {
  return true;
}

void PartyList::InternalSwap(PartyList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  party_.InternalSwap(&other->party_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PartyList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PartyName::InitAsDefaultInstance() {
  ::ern411::ern::_PartyName_default_instance_._instance.get_mutable()->abbreviated_name_ = const_cast< ::ern411::ern::Name*>(
      ::ern411::ern::Name::internal_default_instance());
  ::ern411::ern::_PartyName_default_instance_._instance.get_mutable()->full_name_ = const_cast< ::ern411::ern::Name*>(
      ::ern411::ern::Name::internal_default_instance());
  ::ern411::ern::_PartyName_default_instance_._instance.get_mutable()->full_name_indexed_ = const_cast< ::ern411::ern::Name*>(
      ::ern411::ern::Name::internal_default_instance());
  ::ern411::ern::_PartyName_default_instance_._instance.get_mutable()->key_name_ = const_cast< ::ern411::ern::Name*>(
      ::ern411::ern::Name::internal_default_instance());
  ::ern411::ern::_PartyName_default_instance_._instance.get_mutable()->names_after_key_name_ = const_cast< ::ern411::ern::Name*>(
      ::ern411::ern::Name::internal_default_instance());
  ::ern411::ern::_PartyName_default_instance_._instance.get_mutable()->names_before_key_name_ = const_cast< ::ern411::ern::Name*>(
      ::ern411::ern::Name::internal_default_instance());
}
class PartyName::_Internal {
 public:
  using HasBits = decltype(std::declval<PartyName>()._has_bits_);
  static const ::ern411::ern::Name& abbreviated_name(const PartyName* msg);
  static void set_has_abbreviated_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::ern411::ern::Name& full_name(const PartyName* msg);
  static void set_has_full_name(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_full_name_ascii_transcribed(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ern411::ern::Name& full_name_indexed(const PartyName* msg);
  static void set_has_full_name_indexed(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::ern411::ern::Name& key_name(const PartyName* msg);
  static void set_has_key_name(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_language_and_script_code(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::ern411::ern::Name& names_after_key_name(const PartyName* msg);
  static void set_has_names_after_key_name(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::ern411::ern::Name& names_before_key_name(const PartyName* msg);
  static void set_has_names_before_key_name(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

const ::ern411::ern::Name&
PartyName::_Internal::abbreviated_name(const PartyName* msg) {
  return *msg->abbreviated_name_;
}
const ::ern411::ern::Name&
PartyName::_Internal::full_name(const PartyName* msg) {
  return *msg->full_name_;
}
const ::ern411::ern::Name&
PartyName::_Internal::full_name_indexed(const PartyName* msg) {
  return *msg->full_name_indexed_;
}
const ::ern411::ern::Name&
PartyName::_Internal::key_name(const PartyName* msg) {
  return *msg->key_name_;
}
const ::ern411::ern::Name&
PartyName::_Internal::names_after_key_name(const PartyName* msg) {
  return *msg->names_after_key_name_;
}
const ::ern411::ern::Name&
PartyName::_Internal::names_before_key_name(const PartyName* msg) {
  return *msg->names_before_key_name_;
}
PartyName::PartyName(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.PartyName)
}
PartyName::PartyName(const PartyName& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  full_name_ascii_transcribed_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_full_name_ascii_transcribed()) {
    full_name_ascii_transcribed_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_full_name_ascii_transcribed(),
      GetArena());
  }
  language_and_script_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_language_and_script_code()) {
    language_and_script_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_language_and_script_code(),
      GetArena());
  }
  if (from._internal_has_abbreviated_name()) {
    abbreviated_name_ = new ::ern411::ern::Name(*from.abbreviated_name_);
  } else {
    abbreviated_name_ = nullptr;
  }
  if (from._internal_has_full_name()) {
    full_name_ = new ::ern411::ern::Name(*from.full_name_);
  } else {
    full_name_ = nullptr;
  }
  if (from._internal_has_full_name_indexed()) {
    full_name_indexed_ = new ::ern411::ern::Name(*from.full_name_indexed_);
  } else {
    full_name_indexed_ = nullptr;
  }
  if (from._internal_has_key_name()) {
    key_name_ = new ::ern411::ern::Name(*from.key_name_);
  } else {
    key_name_ = nullptr;
  }
  if (from._internal_has_names_after_key_name()) {
    names_after_key_name_ = new ::ern411::ern::Name(*from.names_after_key_name_);
  } else {
    names_after_key_name_ = nullptr;
  }
  if (from._internal_has_names_before_key_name()) {
    names_before_key_name_ = new ::ern411::ern::Name(*from.names_before_key_name_);
  } else {
    names_before_key_name_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ern411.ern.PartyName)
}

void PartyName::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PartyName_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  full_name_ascii_transcribed_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  language_and_script_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&abbreviated_name_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&names_before_key_name_) -
      reinterpret_cast<char*>(&abbreviated_name_)) + sizeof(names_before_key_name_));
}

PartyName::~PartyName() {
  // @@protoc_insertion_point(destructor:ern411.ern.PartyName)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PartyName::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  full_name_ascii_transcribed_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  language_and_script_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete abbreviated_name_;
  if (this != internal_default_instance()) delete full_name_;
  if (this != internal_default_instance()) delete full_name_indexed_;
  if (this != internal_default_instance()) delete key_name_;
  if (this != internal_default_instance()) delete names_after_key_name_;
  if (this != internal_default_instance()) delete names_before_key_name_;
}

void PartyName::ArenaDtor(void* object) {
  PartyName* _this = reinterpret_cast< PartyName* >(object);
  (void)_this;
}
void PartyName::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PartyName::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PartyName& PartyName::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PartyName_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void PartyName::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.PartyName)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      full_name_ascii_transcribed_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      language_and_script_code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(abbreviated_name_ != nullptr);
      abbreviated_name_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(full_name_ != nullptr);
      full_name_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(full_name_indexed_ != nullptr);
      full_name_indexed_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(key_name_ != nullptr);
      key_name_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(names_after_key_name_ != nullptr);
      names_after_key_name_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(names_before_key_name_ != nullptr);
      names_before_key_name_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PartyName::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ern411.ern.Name abbreviated_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_abbreviated_name(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.ern.Name full_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_full_name(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string full_name_ascii_transcribed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_full_name_ascii_transcribed();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.PartyName.full_name_ascii_transcribed");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.ern.Name full_name_indexed = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_full_name_indexed(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.ern.Name key_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_key_name(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string language_and_script_code = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_language_and_script_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.PartyName.language_and_script_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.ern.Name names_after_key_name = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_names_after_key_name(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.ern.Name names_before_key_name = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_names_before_key_name(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PartyName::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.PartyName)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ern411.ern.Name abbreviated_name = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::abbreviated_name(this), target, stream);
  }

  // optional .ern411.ern.Name full_name = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::full_name(this), target, stream);
  }

  // optional string full_name_ascii_transcribed = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_full_name_ascii_transcribed().data(), static_cast<int>(this->_internal_full_name_ascii_transcribed().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.PartyName.full_name_ascii_transcribed");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_full_name_ascii_transcribed(), target);
  }

  // optional .ern411.ern.Name full_name_indexed = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::full_name_indexed(this), target, stream);
  }

  // optional .ern411.ern.Name key_name = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::key_name(this), target, stream);
  }

  // optional string language_and_script_code = 6;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_language_and_script_code().data(), static_cast<int>(this->_internal_language_and_script_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.PartyName.language_and_script_code");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_language_and_script_code(), target);
  }

  // optional .ern411.ern.Name names_after_key_name = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::names_after_key_name(this), target, stream);
  }

  // optional .ern411.ern.Name names_before_key_name = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::names_before_key_name(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.PartyName)
  return target;
}

size_t PartyName::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.PartyName)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string full_name_ascii_transcribed = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_full_name_ascii_transcribed());
    }

    // optional string language_and_script_code = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_language_and_script_code());
    }

    // optional .ern411.ern.Name abbreviated_name = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *abbreviated_name_);
    }

    // optional .ern411.ern.Name full_name = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *full_name_);
    }

    // optional .ern411.ern.Name full_name_indexed = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *full_name_indexed_);
    }

    // optional .ern411.ern.Name key_name = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *key_name_);
    }

    // optional .ern411.ern.Name names_after_key_name = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *names_after_key_name_);
    }

    // optional .ern411.ern.Name names_before_key_name = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *names_before_key_name_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PartyName::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.PartyName)
  GOOGLE_DCHECK_NE(&from, this);
  const PartyName* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PartyName>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.PartyName)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.PartyName)
    MergeFrom(*source);
  }
}

void PartyName::MergeFrom(const PartyName& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.PartyName)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_full_name_ascii_transcribed(from._internal_full_name_ascii_transcribed());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_language_and_script_code(from._internal_language_and_script_code());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_abbreviated_name()->::ern411::ern::Name::MergeFrom(from._internal_abbreviated_name());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_full_name()->::ern411::ern::Name::MergeFrom(from._internal_full_name());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_full_name_indexed()->::ern411::ern::Name::MergeFrom(from._internal_full_name_indexed());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_key_name()->::ern411::ern::Name::MergeFrom(from._internal_key_name());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_names_after_key_name()->::ern411::ern::Name::MergeFrom(from._internal_names_after_key_name());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_names_before_key_name()->::ern411::ern::Name::MergeFrom(from._internal_names_before_key_name());
    }
  }
}

void PartyName::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.PartyName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PartyName::CopyFrom(const PartyName& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.PartyName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PartyName::IsInitialized() const {
  return true;
}

void PartyName::InternalSwap(PartyName* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  full_name_ascii_transcribed_.Swap(&other->full_name_ascii_transcribed_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  language_and_script_code_.Swap(&other->language_and_script_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PartyName, names_before_key_name_)
      + sizeof(PartyName::names_before_key_name_)
      - PROTOBUF_FIELD_OFFSET(PartyName, abbreviated_name_)>(
          reinterpret_cast<char*>(&abbreviated_name_),
          reinterpret_cast<char*>(&other->abbreviated_name_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PartyName::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PartyNameWithTerritory::InitAsDefaultInstance() {
  ::ern411::ern::_PartyNameWithTerritory_default_instance_._instance.get_mutable()->abbreviated_name_ = const_cast< ::ern411::ern::Name*>(
      ::ern411::ern::Name::internal_default_instance());
  ::ern411::ern::_PartyNameWithTerritory_default_instance_._instance.get_mutable()->applicable_territory_code_ = const_cast< ::ern411::avs::CurrentTerritoryCode*>(
      ::ern411::avs::CurrentTerritoryCode::internal_default_instance());
  ::ern411::ern::_PartyNameWithTerritory_default_instance_._instance.get_mutable()->full_name_ = const_cast< ::ern411::ern::Name*>(
      ::ern411::ern::Name::internal_default_instance());
  ::ern411::ern::_PartyNameWithTerritory_default_instance_._instance.get_mutable()->full_name_indexed_ = const_cast< ::ern411::ern::Name*>(
      ::ern411::ern::Name::internal_default_instance());
  ::ern411::ern::_PartyNameWithTerritory_default_instance_._instance.get_mutable()->key_name_ = const_cast< ::ern411::ern::Name*>(
      ::ern411::ern::Name::internal_default_instance());
  ::ern411::ern::_PartyNameWithTerritory_default_instance_._instance.get_mutable()->names_after_key_name_ = const_cast< ::ern411::ern::Name*>(
      ::ern411::ern::Name::internal_default_instance());
  ::ern411::ern::_PartyNameWithTerritory_default_instance_._instance.get_mutable()->names_before_key_name_ = const_cast< ::ern411::ern::Name*>(
      ::ern411::ern::Name::internal_default_instance());
}
class PartyNameWithTerritory::_Internal {
 public:
  using HasBits = decltype(std::declval<PartyNameWithTerritory>()._has_bits_);
  static const ::ern411::ern::Name& abbreviated_name(const PartyNameWithTerritory* msg);
  static void set_has_abbreviated_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::ern411::avs::CurrentTerritoryCode& applicable_territory_code(const PartyNameWithTerritory* msg);
  static void set_has_applicable_territory_code(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::ern411::ern::Name& full_name(const PartyNameWithTerritory* msg);
  static void set_has_full_name(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_full_name_ascii_transcribed(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ern411::ern::Name& full_name_indexed(const PartyNameWithTerritory* msg);
  static void set_has_full_name_indexed(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_is_legal_name(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_is_nickname(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_is_stage_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::ern411::ern::Name& key_name(const PartyNameWithTerritory* msg);
  static void set_has_key_name(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_language_and_script_code(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::ern411::ern::Name& names_after_key_name(const PartyNameWithTerritory* msg);
  static void set_has_names_after_key_name(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::ern411::ern::Name& names_before_key_name(const PartyNameWithTerritory* msg);
  static void set_has_names_before_key_name(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

const ::ern411::ern::Name&
PartyNameWithTerritory::_Internal::abbreviated_name(const PartyNameWithTerritory* msg) {
  return *msg->abbreviated_name_;
}
const ::ern411::avs::CurrentTerritoryCode&
PartyNameWithTerritory::_Internal::applicable_territory_code(const PartyNameWithTerritory* msg) {
  return *msg->applicable_territory_code_;
}
const ::ern411::ern::Name&
PartyNameWithTerritory::_Internal::full_name(const PartyNameWithTerritory* msg) {
  return *msg->full_name_;
}
const ::ern411::ern::Name&
PartyNameWithTerritory::_Internal::full_name_indexed(const PartyNameWithTerritory* msg) {
  return *msg->full_name_indexed_;
}
const ::ern411::ern::Name&
PartyNameWithTerritory::_Internal::key_name(const PartyNameWithTerritory* msg) {
  return *msg->key_name_;
}
const ::ern411::ern::Name&
PartyNameWithTerritory::_Internal::names_after_key_name(const PartyNameWithTerritory* msg) {
  return *msg->names_after_key_name_;
}
const ::ern411::ern::Name&
PartyNameWithTerritory::_Internal::names_before_key_name(const PartyNameWithTerritory* msg) {
  return *msg->names_before_key_name_;
}
void PartyNameWithTerritory::clear_applicable_territory_code() {
  if (applicable_territory_code_ != nullptr) applicable_territory_code_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
PartyNameWithTerritory::PartyNameWithTerritory(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.PartyNameWithTerritory)
}
PartyNameWithTerritory::PartyNameWithTerritory(const PartyNameWithTerritory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  full_name_ascii_transcribed_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_full_name_ascii_transcribed()) {
    full_name_ascii_transcribed_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_full_name_ascii_transcribed(),
      GetArena());
  }
  language_and_script_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_language_and_script_code()) {
    language_and_script_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_language_and_script_code(),
      GetArena());
  }
  if (from._internal_has_abbreviated_name()) {
    abbreviated_name_ = new ::ern411::ern::Name(*from.abbreviated_name_);
  } else {
    abbreviated_name_ = nullptr;
  }
  if (from._internal_has_applicable_territory_code()) {
    applicable_territory_code_ = new ::ern411::avs::CurrentTerritoryCode(*from.applicable_territory_code_);
  } else {
    applicable_territory_code_ = nullptr;
  }
  if (from._internal_has_full_name()) {
    full_name_ = new ::ern411::ern::Name(*from.full_name_);
  } else {
    full_name_ = nullptr;
  }
  if (from._internal_has_full_name_indexed()) {
    full_name_indexed_ = new ::ern411::ern::Name(*from.full_name_indexed_);
  } else {
    full_name_indexed_ = nullptr;
  }
  if (from._internal_has_key_name()) {
    key_name_ = new ::ern411::ern::Name(*from.key_name_);
  } else {
    key_name_ = nullptr;
  }
  if (from._internal_has_names_after_key_name()) {
    names_after_key_name_ = new ::ern411::ern::Name(*from.names_after_key_name_);
  } else {
    names_after_key_name_ = nullptr;
  }
  if (from._internal_has_names_before_key_name()) {
    names_before_key_name_ = new ::ern411::ern::Name(*from.names_before_key_name_);
  } else {
    names_before_key_name_ = nullptr;
  }
  ::memcpy(&is_legal_name_, &from.is_legal_name_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_stage_name_) -
    reinterpret_cast<char*>(&is_legal_name_)) + sizeof(is_stage_name_));
  // @@protoc_insertion_point(copy_constructor:ern411.ern.PartyNameWithTerritory)
}

void PartyNameWithTerritory::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PartyNameWithTerritory_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  full_name_ascii_transcribed_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  language_and_script_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&abbreviated_name_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_stage_name_) -
      reinterpret_cast<char*>(&abbreviated_name_)) + sizeof(is_stage_name_));
}

PartyNameWithTerritory::~PartyNameWithTerritory() {
  // @@protoc_insertion_point(destructor:ern411.ern.PartyNameWithTerritory)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PartyNameWithTerritory::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  full_name_ascii_transcribed_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  language_and_script_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete abbreviated_name_;
  if (this != internal_default_instance()) delete applicable_territory_code_;
  if (this != internal_default_instance()) delete full_name_;
  if (this != internal_default_instance()) delete full_name_indexed_;
  if (this != internal_default_instance()) delete key_name_;
  if (this != internal_default_instance()) delete names_after_key_name_;
  if (this != internal_default_instance()) delete names_before_key_name_;
}

void PartyNameWithTerritory::ArenaDtor(void* object) {
  PartyNameWithTerritory* _this = reinterpret_cast< PartyNameWithTerritory* >(object);
  (void)_this;
}
void PartyNameWithTerritory::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PartyNameWithTerritory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PartyNameWithTerritory& PartyNameWithTerritory::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PartyNameWithTerritory_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void PartyNameWithTerritory::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.PartyNameWithTerritory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      full_name_ascii_transcribed_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      language_and_script_code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(abbreviated_name_ != nullptr);
      abbreviated_name_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(applicable_territory_code_ != nullptr);
      applicable_territory_code_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(full_name_ != nullptr);
      full_name_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(full_name_indexed_ != nullptr);
      full_name_indexed_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(key_name_ != nullptr);
      key_name_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(names_after_key_name_ != nullptr);
      names_after_key_name_->Clear();
    }
  }
  if (cached_has_bits & 0x00000100u) {
    GOOGLE_DCHECK(names_before_key_name_ != nullptr);
    names_before_key_name_->Clear();
  }
  ::memset(&is_legal_name_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_stage_name_) -
      reinterpret_cast<char*>(&is_legal_name_)) + sizeof(is_stage_name_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PartyNameWithTerritory::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ern411.ern.Name abbreviated_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_abbreviated_name(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.avs.CurrentTerritoryCode applicable_territory_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_applicable_territory_code(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.ern.Name full_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_full_name(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string full_name_ascii_transcribed = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_full_name_ascii_transcribed();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.PartyNameWithTerritory.full_name_ascii_transcribed");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.ern.Name full_name_indexed = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_full_name_indexed(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_legal_name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_is_legal_name(&has_bits);
          is_legal_name_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_nickname = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_is_nickname(&has_bits);
          is_nickname_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_stage_name = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_is_stage_name(&has_bits);
          is_stage_name_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.ern.Name key_name = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_key_name(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string language_and_script_code = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_language_and_script_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.PartyNameWithTerritory.language_and_script_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.ern.Name names_after_key_name = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_names_after_key_name(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.ern.Name names_before_key_name = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_names_before_key_name(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PartyNameWithTerritory::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.PartyNameWithTerritory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ern411.ern.Name abbreviated_name = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::abbreviated_name(this), target, stream);
  }

  // optional .ern411.avs.CurrentTerritoryCode applicable_territory_code = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::applicable_territory_code(this), target, stream);
  }

  // optional .ern411.ern.Name full_name = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::full_name(this), target, stream);
  }

  // optional string full_name_ascii_transcribed = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_full_name_ascii_transcribed().data(), static_cast<int>(this->_internal_full_name_ascii_transcribed().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.PartyNameWithTerritory.full_name_ascii_transcribed");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_full_name_ascii_transcribed(), target);
  }

  // optional .ern411.ern.Name full_name_indexed = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::full_name_indexed(this), target, stream);
  }

  // optional bool is_legal_name = 6;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_is_legal_name(), target);
  }

  // optional bool is_nickname = 7;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_is_nickname(), target);
  }

  // optional bool is_stage_name = 8;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_is_stage_name(), target);
  }

  // optional .ern411.ern.Name key_name = 9;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::key_name(this), target, stream);
  }

  // optional string language_and_script_code = 10;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_language_and_script_code().data(), static_cast<int>(this->_internal_language_and_script_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.PartyNameWithTerritory.language_and_script_code");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_language_and_script_code(), target);
  }

  // optional .ern411.ern.Name names_after_key_name = 11;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::names_after_key_name(this), target, stream);
  }

  // optional .ern411.ern.Name names_before_key_name = 12;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::names_before_key_name(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.PartyNameWithTerritory)
  return target;
}

size_t PartyNameWithTerritory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.PartyNameWithTerritory)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string full_name_ascii_transcribed = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_full_name_ascii_transcribed());
    }

    // optional string language_and_script_code = 10;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_language_and_script_code());
    }

    // optional .ern411.ern.Name abbreviated_name = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *abbreviated_name_);
    }

    // optional .ern411.avs.CurrentTerritoryCode applicable_territory_code = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *applicable_territory_code_);
    }

    // optional .ern411.ern.Name full_name = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *full_name_);
    }

    // optional .ern411.ern.Name full_name_indexed = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *full_name_indexed_);
    }

    // optional .ern411.ern.Name key_name = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *key_name_);
    }

    // optional .ern411.ern.Name names_after_key_name = 11;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *names_after_key_name_);
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional .ern411.ern.Name names_before_key_name = 12;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *names_before_key_name_);
    }

    // optional bool is_legal_name = 6;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool is_nickname = 7;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool is_stage_name = 8;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PartyNameWithTerritory::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.PartyNameWithTerritory)
  GOOGLE_DCHECK_NE(&from, this);
  const PartyNameWithTerritory* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PartyNameWithTerritory>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.PartyNameWithTerritory)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.PartyNameWithTerritory)
    MergeFrom(*source);
  }
}

void PartyNameWithTerritory::MergeFrom(const PartyNameWithTerritory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.PartyNameWithTerritory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_full_name_ascii_transcribed(from._internal_full_name_ascii_transcribed());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_language_and_script_code(from._internal_language_and_script_code());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_abbreviated_name()->::ern411::ern::Name::MergeFrom(from._internal_abbreviated_name());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_applicable_territory_code()->::ern411::avs::CurrentTerritoryCode::MergeFrom(from._internal_applicable_territory_code());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_full_name()->::ern411::ern::Name::MergeFrom(from._internal_full_name());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_full_name_indexed()->::ern411::ern::Name::MergeFrom(from._internal_full_name_indexed());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_key_name()->::ern411::ern::Name::MergeFrom(from._internal_key_name());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_names_after_key_name()->::ern411::ern::Name::MergeFrom(from._internal_names_after_key_name());
    }
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_names_before_key_name()->::ern411::ern::Name::MergeFrom(from._internal_names_before_key_name());
    }
    if (cached_has_bits & 0x00000200u) {
      is_legal_name_ = from.is_legal_name_;
    }
    if (cached_has_bits & 0x00000400u) {
      is_nickname_ = from.is_nickname_;
    }
    if (cached_has_bits & 0x00000800u) {
      is_stage_name_ = from.is_stage_name_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PartyNameWithTerritory::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.PartyNameWithTerritory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PartyNameWithTerritory::CopyFrom(const PartyNameWithTerritory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.PartyNameWithTerritory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PartyNameWithTerritory::IsInitialized() const {
  return true;
}

void PartyNameWithTerritory::InternalSwap(PartyNameWithTerritory* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  full_name_ascii_transcribed_.Swap(&other->full_name_ascii_transcribed_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  language_and_script_code_.Swap(&other->language_and_script_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PartyNameWithTerritory, is_stage_name_)
      + sizeof(PartyNameWithTerritory::is_stage_name_)
      - PROTOBUF_FIELD_OFFSET(PartyNameWithTerritory, abbreviated_name_)>(
          reinterpret_cast<char*>(&abbreviated_name_),
          reinterpret_cast<char*>(&other->abbreviated_name_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PartyNameWithTerritory::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PartyNameWithoutCode::InitAsDefaultInstance() {
}
class PartyNameWithoutCode::_Internal {
 public:
  using HasBits = decltype(std::declval<PartyNameWithoutCode>()._has_bits_);
  static void set_has_abbreviated_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_full_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_full_name_ascii_transcribed(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_full_name_indexed(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_key_name(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_names_after_key_name(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_names_before_key_name(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

PartyNameWithoutCode::PartyNameWithoutCode(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.PartyNameWithoutCode)
}
PartyNameWithoutCode::PartyNameWithoutCode(const PartyNameWithoutCode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  abbreviated_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_abbreviated_name()) {
    abbreviated_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_abbreviated_name(),
      GetArena());
  }
  full_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_full_name()) {
    full_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_full_name(),
      GetArena());
  }
  full_name_ascii_transcribed_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_full_name_ascii_transcribed()) {
    full_name_ascii_transcribed_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_full_name_ascii_transcribed(),
      GetArena());
  }
  full_name_indexed_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_full_name_indexed()) {
    full_name_indexed_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_full_name_indexed(),
      GetArena());
  }
  key_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_key_name()) {
    key_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_key_name(),
      GetArena());
  }
  names_after_key_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_names_after_key_name()) {
    names_after_key_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_names_after_key_name(),
      GetArena());
  }
  names_before_key_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_names_before_key_name()) {
    names_before_key_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_names_before_key_name(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:ern411.ern.PartyNameWithoutCode)
}

void PartyNameWithoutCode::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PartyNameWithoutCode_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  abbreviated_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  full_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  full_name_ascii_transcribed_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  full_name_indexed_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  names_after_key_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  names_before_key_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PartyNameWithoutCode::~PartyNameWithoutCode() {
  // @@protoc_insertion_point(destructor:ern411.ern.PartyNameWithoutCode)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PartyNameWithoutCode::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  abbreviated_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  full_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  full_name_ascii_transcribed_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  full_name_indexed_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  names_after_key_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  names_before_key_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PartyNameWithoutCode::ArenaDtor(void* object) {
  PartyNameWithoutCode* _this = reinterpret_cast< PartyNameWithoutCode* >(object);
  (void)_this;
}
void PartyNameWithoutCode::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PartyNameWithoutCode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PartyNameWithoutCode& PartyNameWithoutCode::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PartyNameWithoutCode_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void PartyNameWithoutCode::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.PartyNameWithoutCode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      abbreviated_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      full_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      full_name_ascii_transcribed_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      full_name_indexed_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      key_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      names_after_key_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      names_before_key_name_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PartyNameWithoutCode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string abbreviated_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_abbreviated_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.PartyNameWithoutCode.abbreviated_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string full_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_full_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.PartyNameWithoutCode.full_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string full_name_ascii_transcribed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_full_name_ascii_transcribed();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.PartyNameWithoutCode.full_name_ascii_transcribed");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string full_name_indexed = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_full_name_indexed();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.PartyNameWithoutCode.full_name_indexed");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string key_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_key_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.PartyNameWithoutCode.key_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string names_after_key_name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_names_after_key_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.PartyNameWithoutCode.names_after_key_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string names_before_key_name = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_names_before_key_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.PartyNameWithoutCode.names_before_key_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PartyNameWithoutCode::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.PartyNameWithoutCode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string abbreviated_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_abbreviated_name().data(), static_cast<int>(this->_internal_abbreviated_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.PartyNameWithoutCode.abbreviated_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_abbreviated_name(), target);
  }

  // optional string full_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_full_name().data(), static_cast<int>(this->_internal_full_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.PartyNameWithoutCode.full_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_full_name(), target);
  }

  // optional string full_name_ascii_transcribed = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_full_name_ascii_transcribed().data(), static_cast<int>(this->_internal_full_name_ascii_transcribed().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.PartyNameWithoutCode.full_name_ascii_transcribed");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_full_name_ascii_transcribed(), target);
  }

  // optional string full_name_indexed = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_full_name_indexed().data(), static_cast<int>(this->_internal_full_name_indexed().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.PartyNameWithoutCode.full_name_indexed");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_full_name_indexed(), target);
  }

  // optional string key_name = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_key_name().data(), static_cast<int>(this->_internal_key_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.PartyNameWithoutCode.key_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_key_name(), target);
  }

  // optional string names_after_key_name = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_names_after_key_name().data(), static_cast<int>(this->_internal_names_after_key_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.PartyNameWithoutCode.names_after_key_name");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_names_after_key_name(), target);
  }

  // optional string names_before_key_name = 7;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_names_before_key_name().data(), static_cast<int>(this->_internal_names_before_key_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.PartyNameWithoutCode.names_before_key_name");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_names_before_key_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.PartyNameWithoutCode)
  return target;
}

size_t PartyNameWithoutCode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.PartyNameWithoutCode)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string abbreviated_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_abbreviated_name());
    }

    // optional string full_name = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_full_name());
    }

    // optional string full_name_ascii_transcribed = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_full_name_ascii_transcribed());
    }

    // optional string full_name_indexed = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_full_name_indexed());
    }

    // optional string key_name = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_key_name());
    }

    // optional string names_after_key_name = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_names_after_key_name());
    }

    // optional string names_before_key_name = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_names_before_key_name());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PartyNameWithoutCode::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.PartyNameWithoutCode)
  GOOGLE_DCHECK_NE(&from, this);
  const PartyNameWithoutCode* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PartyNameWithoutCode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.PartyNameWithoutCode)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.PartyNameWithoutCode)
    MergeFrom(*source);
  }
}

void PartyNameWithoutCode::MergeFrom(const PartyNameWithoutCode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.PartyNameWithoutCode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_abbreviated_name(from._internal_abbreviated_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_full_name(from._internal_full_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_full_name_ascii_transcribed(from._internal_full_name_ascii_transcribed());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_full_name_indexed(from._internal_full_name_indexed());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_key_name(from._internal_key_name());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_names_after_key_name(from._internal_names_after_key_name());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_names_before_key_name(from._internal_names_before_key_name());
    }
  }
}

void PartyNameWithoutCode::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.PartyNameWithoutCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PartyNameWithoutCode::CopyFrom(const PartyNameWithoutCode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.PartyNameWithoutCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PartyNameWithoutCode::IsInitialized() const {
  return true;
}

void PartyNameWithoutCode::InternalSwap(PartyNameWithoutCode* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  abbreviated_name_.Swap(&other->abbreviated_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  full_name_.Swap(&other->full_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  full_name_ascii_transcribed_.Swap(&other->full_name_ascii_transcribed_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  full_name_indexed_.Swap(&other->full_name_indexed_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  key_name_.Swap(&other->key_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  names_after_key_name_.Swap(&other->names_after_key_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  names_before_key_name_.Swap(&other->names_before_key_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata PartyNameWithoutCode::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PartyRelationshipType::InitAsDefaultInstance() {
  ::ern411::ern::_PartyRelationshipType_default_instance_._instance.get_mutable()->ext_value_ = const_cast< ::ern411::avs::PartyRelationshipType*>(
      ::ern411::avs::PartyRelationshipType::internal_default_instance());
}
class PartyRelationshipType::_Internal {
 public:
  using HasBits = decltype(std::declval<PartyRelationshipType>()._has_bits_);
  static void set_has_may_be_shared(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_namespace_(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_user_defined_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::ern411::avs::PartyRelationshipType& ext_value(const PartyRelationshipType* msg);
  static void set_has_ext_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::ern411::avs::PartyRelationshipType&
PartyRelationshipType::_Internal::ext_value(const PartyRelationshipType* msg) {
  return *msg->ext_value_;
}
void PartyRelationshipType::clear_ext_value() {
  if (ext_value_ != nullptr) ext_value_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
PartyRelationshipType::PartyRelationshipType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.PartyRelationshipType)
}
PartyRelationshipType::PartyRelationshipType(const PartyRelationshipType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_namespace_()) {
    namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_namespace_(),
      GetArena());
  }
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_user_defined_value()) {
    user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_defined_value(),
      GetArena());
  }
  if (from._internal_has_ext_value()) {
    ext_value_ = new ::ern411::avs::PartyRelationshipType(*from.ext_value_);
  } else {
    ext_value_ = nullptr;
  }
  may_be_shared_ = from.may_be_shared_;
  // @@protoc_insertion_point(copy_constructor:ern411.ern.PartyRelationshipType)
}

void PartyRelationshipType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PartyRelationshipType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&ext_value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&may_be_shared_) -
      reinterpret_cast<char*>(&ext_value_)) + sizeof(may_be_shared_));
}

PartyRelationshipType::~PartyRelationshipType() {
  // @@protoc_insertion_point(destructor:ern411.ern.PartyRelationshipType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PartyRelationshipType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  namespace__.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ext_value_;
}

void PartyRelationshipType::ArenaDtor(void* object) {
  PartyRelationshipType* _this = reinterpret_cast< PartyRelationshipType* >(object);
  (void)_this;
}
void PartyRelationshipType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PartyRelationshipType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PartyRelationshipType& PartyRelationshipType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PartyRelationshipType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void PartyRelationshipType::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.PartyRelationshipType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      namespace__.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      user_defined_value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(ext_value_ != nullptr);
      ext_value_->Clear();
    }
  }
  may_be_shared_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PartyRelationshipType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool may_be_shared = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_may_be_shared(&has_bits);
          may_be_shared_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string namespace = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_namespace_();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.PartyRelationshipType.namespace");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string user_defined_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_user_defined_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.PartyRelationshipType.user_defined_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.avs.PartyRelationshipType ext_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PartyRelationshipType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.PartyRelationshipType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool may_be_shared = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_may_be_shared(), target);
  }

  // optional string namespace = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_namespace_().data(), static_cast<int>(this->_internal_namespace_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.PartyRelationshipType.namespace");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_namespace_(), target);
  }

  // optional string user_defined_value = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_user_defined_value().data(), static_cast<int>(this->_internal_user_defined_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.PartyRelationshipType.user_defined_value");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_user_defined_value(), target);
  }

  // optional .ern411.avs.PartyRelationshipType ext_value = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::ext_value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.PartyRelationshipType)
  return target;
}

size_t PartyRelationshipType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.PartyRelationshipType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string namespace = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_namespace_());
    }

    // optional string user_defined_value = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_defined_value());
    }

    // optional .ern411.avs.PartyRelationshipType ext_value = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ext_value_);
    }

    // optional bool may_be_shared = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PartyRelationshipType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.PartyRelationshipType)
  GOOGLE_DCHECK_NE(&from, this);
  const PartyRelationshipType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PartyRelationshipType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.PartyRelationshipType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.PartyRelationshipType)
    MergeFrom(*source);
  }
}

void PartyRelationshipType::MergeFrom(const PartyRelationshipType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.PartyRelationshipType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_namespace_(from._internal_namespace_());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_user_defined_value(from._internal_user_defined_value());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_ext_value()->::ern411::avs::PartyRelationshipType::MergeFrom(from._internal_ext_value());
    }
    if (cached_has_bits & 0x00000008u) {
      may_be_shared_ = from.may_be_shared_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PartyRelationshipType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.PartyRelationshipType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PartyRelationshipType::CopyFrom(const PartyRelationshipType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.PartyRelationshipType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PartyRelationshipType::IsInitialized() const {
  return true;
}

void PartyRelationshipType::InternalSwap(PartyRelationshipType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  namespace__.Swap(&other->namespace__, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_defined_value_.Swap(&other->user_defined_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PartyRelationshipType, may_be_shared_)
      + sizeof(PartyRelationshipType::may_be_shared_)
      - PROTOBUF_FIELD_OFFSET(PartyRelationshipType, ext_value_)>(
          reinterpret_cast<char*>(&ext_value_),
          reinterpret_cast<char*>(&other->ext_value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PartyRelationshipType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Percentage::InitAsDefaultInstance() {
}
class Percentage::_Internal {
 public:
  using HasBits = decltype(std::declval<Percentage>()._has_bits_);
  static void set_has_has_max_value_of_one(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ext_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Percentage::Percentage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.Percentage)
}
Percentage::Percentage(const Percentage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&ext_value_, &from.ext_value_,
    static_cast<size_t>(reinterpret_cast<char*>(&has_max_value_of_one_) -
    reinterpret_cast<char*>(&ext_value_)) + sizeof(has_max_value_of_one_));
  // @@protoc_insertion_point(copy_constructor:ern411.ern.Percentage)
}

void Percentage::SharedCtor() {
  ::memset(&ext_value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&has_max_value_of_one_) -
      reinterpret_cast<char*>(&ext_value_)) + sizeof(has_max_value_of_one_));
}

Percentage::~Percentage() {
  // @@protoc_insertion_point(destructor:ern411.ern.Percentage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Percentage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Percentage::ArenaDtor(void* object) {
  Percentage* _this = reinterpret_cast< Percentage* >(object);
  (void)_this;
}
void Percentage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Percentage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Percentage& Percentage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Percentage_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void Percentage::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.Percentage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&ext_value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&has_max_value_of_one_) -
        reinterpret_cast<char*>(&ext_value_)) + sizeof(has_max_value_of_one_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Percentage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool has_max_value_of_one = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_has_max_value_of_one(&has_bits);
          has_max_value_of_one_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double ext_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_ext_value(&has_bits);
          ext_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Percentage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.Percentage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool has_max_value_of_one = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_has_max_value_of_one(), target);
  }

  // optional double ext_value = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_ext_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.Percentage)
  return target;
}

size_t Percentage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.Percentage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double ext_value = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional bool has_max_value_of_one = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Percentage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.Percentage)
  GOOGLE_DCHECK_NE(&from, this);
  const Percentage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Percentage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.Percentage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.Percentage)
    MergeFrom(*source);
  }
}

void Percentage::MergeFrom(const Percentage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.Percentage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ext_value_ = from.ext_value_;
    }
    if (cached_has_bits & 0x00000002u) {
      has_max_value_of_one_ = from.has_max_value_of_one_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Percentage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.Percentage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Percentage::CopyFrom(const Percentage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.Percentage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Percentage::IsInitialized() const {
  return true;
}

void Percentage::InternalSwap(Percentage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Percentage, has_max_value_of_one_)
      + sizeof(Percentage::has_max_value_of_one_)
      - PROTOBUF_FIELD_OFFSET(Percentage, ext_value_)>(
          reinterpret_cast<char*>(&ext_value_),
          reinterpret_cast<char*>(&other->ext_value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Percentage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Period::InitAsDefaultInstance() {
  ::ern411::ern::_Period_default_instance_._instance.get_mutable()->end_date_ = const_cast< ::ern411::ern::EventDate*>(
      ::ern411::ern::EventDate::internal_default_instance());
  ::ern411::ern::_Period_default_instance_._instance.get_mutable()->end_date_time_ = const_cast< ::ern411::ern::EventDateTime*>(
      ::ern411::ern::EventDateTime::internal_default_instance());
  ::ern411::ern::_Period_default_instance_._instance.get_mutable()->start_date_ = const_cast< ::ern411::ern::EventDate*>(
      ::ern411::ern::EventDate::internal_default_instance());
  ::ern411::ern::_Period_default_instance_._instance.get_mutable()->start_date_time_ = const_cast< ::ern411::ern::EventDateTime*>(
      ::ern411::ern::EventDateTime::internal_default_instance());
}
class Period::_Internal {
 public:
  using HasBits = decltype(std::declval<Period>()._has_bits_);
  static const ::ern411::ern::EventDate& end_date(const Period* msg);
  static void set_has_end_date(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ern411::ern::EventDateTime& end_date_time(const Period* msg);
  static void set_has_end_date_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::ern411::ern::EventDate& start_date(const Period* msg);
  static void set_has_start_date(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::ern411::ern::EventDateTime& start_date_time(const Period* msg);
  static void set_has_start_date_time(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::ern411::ern::EventDate&
Period::_Internal::end_date(const Period* msg) {
  return *msg->end_date_;
}
const ::ern411::ern::EventDateTime&
Period::_Internal::end_date_time(const Period* msg) {
  return *msg->end_date_time_;
}
const ::ern411::ern::EventDate&
Period::_Internal::start_date(const Period* msg) {
  return *msg->start_date_;
}
const ::ern411::ern::EventDateTime&
Period::_Internal::start_date_time(const Period* msg) {
  return *msg->start_date_time_;
}
Period::Period(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.Period)
}
Period::Period(const Period& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_end_date()) {
    end_date_ = new ::ern411::ern::EventDate(*from.end_date_);
  } else {
    end_date_ = nullptr;
  }
  if (from._internal_has_end_date_time()) {
    end_date_time_ = new ::ern411::ern::EventDateTime(*from.end_date_time_);
  } else {
    end_date_time_ = nullptr;
  }
  if (from._internal_has_start_date()) {
    start_date_ = new ::ern411::ern::EventDate(*from.start_date_);
  } else {
    start_date_ = nullptr;
  }
  if (from._internal_has_start_date_time()) {
    start_date_time_ = new ::ern411::ern::EventDateTime(*from.start_date_time_);
  } else {
    start_date_time_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ern411.ern.Period)
}

void Period::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Period_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  ::memset(&end_date_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&start_date_time_) -
      reinterpret_cast<char*>(&end_date_)) + sizeof(start_date_time_));
}

Period::~Period() {
  // @@protoc_insertion_point(destructor:ern411.ern.Period)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Period::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete end_date_;
  if (this != internal_default_instance()) delete end_date_time_;
  if (this != internal_default_instance()) delete start_date_;
  if (this != internal_default_instance()) delete start_date_time_;
}

void Period::ArenaDtor(void* object) {
  Period* _this = reinterpret_cast< Period* >(object);
  (void)_this;
}
void Period::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Period::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Period& Period::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Period_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void Period::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.Period)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(end_date_ != nullptr);
      end_date_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(end_date_time_ != nullptr);
      end_date_time_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(start_date_ != nullptr);
      start_date_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(start_date_time_ != nullptr);
      start_date_time_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Period::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ern411.ern.EventDate end_date = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_end_date(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.ern.EventDateTime end_date_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_end_date_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.ern.EventDate start_date = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_start_date(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.ern.EventDateTime start_date_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_start_date_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Period::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.Period)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ern411.ern.EventDate end_date = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::end_date(this), target, stream);
  }

  // optional .ern411.ern.EventDateTime end_date_time = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::end_date_time(this), target, stream);
  }

  // optional .ern411.ern.EventDate start_date = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::start_date(this), target, stream);
  }

  // optional .ern411.ern.EventDateTime start_date_time = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::start_date_time(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.Period)
  return target;
}

size_t Period::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.Period)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .ern411.ern.EventDate end_date = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *end_date_);
    }

    // optional .ern411.ern.EventDateTime end_date_time = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *end_date_time_);
    }

    // optional .ern411.ern.EventDate start_date = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *start_date_);
    }

    // optional .ern411.ern.EventDateTime start_date_time = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *start_date_time_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Period::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.Period)
  GOOGLE_DCHECK_NE(&from, this);
  const Period* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Period>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.Period)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.Period)
    MergeFrom(*source);
  }
}

void Period::MergeFrom(const Period& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.Period)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_end_date()->::ern411::ern::EventDate::MergeFrom(from._internal_end_date());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_end_date_time()->::ern411::ern::EventDateTime::MergeFrom(from._internal_end_date_time());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_start_date()->::ern411::ern::EventDate::MergeFrom(from._internal_start_date());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_start_date_time()->::ern411::ern::EventDateTime::MergeFrom(from._internal_start_date_time());
    }
  }
}

void Period::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.Period)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Period::CopyFrom(const Period& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.Period)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Period::IsInitialized() const {
  return true;
}

void Period::InternalSwap(Period* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Period, start_date_time_)
      + sizeof(Period::start_date_time_)
      - PROTOBUF_FIELD_OFFSET(Period, end_date_)>(
          reinterpret_cast<char*>(&end_date_),
          reinterpret_cast<char*>(&other->end_date_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Period::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PeriodWithoutFlags::InitAsDefaultInstance() {
  ::ern411::ern::_PeriodWithoutFlags_default_instance_._instance.get_mutable()->end_date_ = const_cast< ::ern411::ern::EventDateWithoutFlags*>(
      ::ern411::ern::EventDateWithoutFlags::internal_default_instance());
  ::ern411::ern::_PeriodWithoutFlags_default_instance_._instance.get_mutable()->end_date_time_ = const_cast< ::ern411::ern::EventDateTimeWithoutFlags*>(
      ::ern411::ern::EventDateTimeWithoutFlags::internal_default_instance());
  ::ern411::ern::_PeriodWithoutFlags_default_instance_._instance.get_mutable()->start_date_ = const_cast< ::ern411::ern::EventDateWithoutFlags*>(
      ::ern411::ern::EventDateWithoutFlags::internal_default_instance());
  ::ern411::ern::_PeriodWithoutFlags_default_instance_._instance.get_mutable()->start_date_time_ = const_cast< ::ern411::ern::EventDateTimeWithoutFlags*>(
      ::ern411::ern::EventDateTimeWithoutFlags::internal_default_instance());
}
class PeriodWithoutFlags::_Internal {
 public:
  using HasBits = decltype(std::declval<PeriodWithoutFlags>()._has_bits_);
  static const ::ern411::ern::EventDateWithoutFlags& end_date(const PeriodWithoutFlags* msg);
  static void set_has_end_date(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ern411::ern::EventDateTimeWithoutFlags& end_date_time(const PeriodWithoutFlags* msg);
  static void set_has_end_date_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::ern411::ern::EventDateWithoutFlags& start_date(const PeriodWithoutFlags* msg);
  static void set_has_start_date(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::ern411::ern::EventDateTimeWithoutFlags& start_date_time(const PeriodWithoutFlags* msg);
  static void set_has_start_date_time(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::ern411::ern::EventDateWithoutFlags&
PeriodWithoutFlags::_Internal::end_date(const PeriodWithoutFlags* msg) {
  return *msg->end_date_;
}
const ::ern411::ern::EventDateTimeWithoutFlags&
PeriodWithoutFlags::_Internal::end_date_time(const PeriodWithoutFlags* msg) {
  return *msg->end_date_time_;
}
const ::ern411::ern::EventDateWithoutFlags&
PeriodWithoutFlags::_Internal::start_date(const PeriodWithoutFlags* msg) {
  return *msg->start_date_;
}
const ::ern411::ern::EventDateTimeWithoutFlags&
PeriodWithoutFlags::_Internal::start_date_time(const PeriodWithoutFlags* msg) {
  return *msg->start_date_time_;
}
PeriodWithoutFlags::PeriodWithoutFlags(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.PeriodWithoutFlags)
}
PeriodWithoutFlags::PeriodWithoutFlags(const PeriodWithoutFlags& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_end_date()) {
    end_date_ = new ::ern411::ern::EventDateWithoutFlags(*from.end_date_);
  } else {
    end_date_ = nullptr;
  }
  if (from._internal_has_end_date_time()) {
    end_date_time_ = new ::ern411::ern::EventDateTimeWithoutFlags(*from.end_date_time_);
  } else {
    end_date_time_ = nullptr;
  }
  if (from._internal_has_start_date()) {
    start_date_ = new ::ern411::ern::EventDateWithoutFlags(*from.start_date_);
  } else {
    start_date_ = nullptr;
  }
  if (from._internal_has_start_date_time()) {
    start_date_time_ = new ::ern411::ern::EventDateTimeWithoutFlags(*from.start_date_time_);
  } else {
    start_date_time_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ern411.ern.PeriodWithoutFlags)
}

void PeriodWithoutFlags::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PeriodWithoutFlags_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  ::memset(&end_date_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&start_date_time_) -
      reinterpret_cast<char*>(&end_date_)) + sizeof(start_date_time_));
}

PeriodWithoutFlags::~PeriodWithoutFlags() {
  // @@protoc_insertion_point(destructor:ern411.ern.PeriodWithoutFlags)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PeriodWithoutFlags::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete end_date_;
  if (this != internal_default_instance()) delete end_date_time_;
  if (this != internal_default_instance()) delete start_date_;
  if (this != internal_default_instance()) delete start_date_time_;
}

void PeriodWithoutFlags::ArenaDtor(void* object) {
  PeriodWithoutFlags* _this = reinterpret_cast< PeriodWithoutFlags* >(object);
  (void)_this;
}
void PeriodWithoutFlags::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PeriodWithoutFlags::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PeriodWithoutFlags& PeriodWithoutFlags::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PeriodWithoutFlags_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void PeriodWithoutFlags::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.PeriodWithoutFlags)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(end_date_ != nullptr);
      end_date_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(end_date_time_ != nullptr);
      end_date_time_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(start_date_ != nullptr);
      start_date_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(start_date_time_ != nullptr);
      start_date_time_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PeriodWithoutFlags::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ern411.ern.EventDateWithoutFlags end_date = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_end_date(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.ern.EventDateTimeWithoutFlags end_date_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_end_date_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.ern.EventDateWithoutFlags start_date = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_start_date(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.ern.EventDateTimeWithoutFlags start_date_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_start_date_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PeriodWithoutFlags::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.PeriodWithoutFlags)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ern411.ern.EventDateWithoutFlags end_date = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::end_date(this), target, stream);
  }

  // optional .ern411.ern.EventDateTimeWithoutFlags end_date_time = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::end_date_time(this), target, stream);
  }

  // optional .ern411.ern.EventDateWithoutFlags start_date = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::start_date(this), target, stream);
  }

  // optional .ern411.ern.EventDateTimeWithoutFlags start_date_time = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::start_date_time(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.PeriodWithoutFlags)
  return target;
}

size_t PeriodWithoutFlags::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.PeriodWithoutFlags)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .ern411.ern.EventDateWithoutFlags end_date = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *end_date_);
    }

    // optional .ern411.ern.EventDateTimeWithoutFlags end_date_time = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *end_date_time_);
    }

    // optional .ern411.ern.EventDateWithoutFlags start_date = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *start_date_);
    }

    // optional .ern411.ern.EventDateTimeWithoutFlags start_date_time = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *start_date_time_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PeriodWithoutFlags::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.PeriodWithoutFlags)
  GOOGLE_DCHECK_NE(&from, this);
  const PeriodWithoutFlags* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PeriodWithoutFlags>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.PeriodWithoutFlags)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.PeriodWithoutFlags)
    MergeFrom(*source);
  }
}

void PeriodWithoutFlags::MergeFrom(const PeriodWithoutFlags& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.PeriodWithoutFlags)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_end_date()->::ern411::ern::EventDateWithoutFlags::MergeFrom(from._internal_end_date());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_end_date_time()->::ern411::ern::EventDateTimeWithoutFlags::MergeFrom(from._internal_end_date_time());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_start_date()->::ern411::ern::EventDateWithoutFlags::MergeFrom(from._internal_start_date());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_start_date_time()->::ern411::ern::EventDateTimeWithoutFlags::MergeFrom(from._internal_start_date_time());
    }
  }
}

void PeriodWithoutFlags::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.PeriodWithoutFlags)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PeriodWithoutFlags::CopyFrom(const PeriodWithoutFlags& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.PeriodWithoutFlags)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeriodWithoutFlags::IsInitialized() const {
  return true;
}

void PeriodWithoutFlags::InternalSwap(PeriodWithoutFlags* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PeriodWithoutFlags, start_date_time_)
      + sizeof(PeriodWithoutFlags::start_date_time_)
      - PROTOBUF_FIELD_OFFSET(PeriodWithoutFlags, end_date_)>(
          reinterpret_cast<char*>(&end_date_),
          reinterpret_cast<char*>(&other->end_date_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PeriodWithoutFlags::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PhysicalReturns::InitAsDefaultInstance() {
  ::ern411::ern::_PhysicalReturns_default_instance_._instance.get_mutable()->latest_date_for_physical_returns_ = const_cast< ::ern411::ern::ddex_IsoDate*>(
      ::ern411::ern::ddex_IsoDate::internal_default_instance());
}
class PhysicalReturns::_Internal {
 public:
  using HasBits = decltype(std::declval<PhysicalReturns>()._has_bits_);
  static const ::ern411::ern::ddex_IsoDate& latest_date_for_physical_returns(const PhysicalReturns* msg);
  static void set_has_latest_date_for_physical_returns(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_physical_returns_allowed(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::ern411::ern::ddex_IsoDate&
PhysicalReturns::_Internal::latest_date_for_physical_returns(const PhysicalReturns* msg) {
  return *msg->latest_date_for_physical_returns_;
}
PhysicalReturns::PhysicalReturns(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.PhysicalReturns)
}
PhysicalReturns::PhysicalReturns(const PhysicalReturns& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_latest_date_for_physical_returns()) {
    latest_date_for_physical_returns_ = new ::ern411::ern::ddex_IsoDate(*from.latest_date_for_physical_returns_);
  } else {
    latest_date_for_physical_returns_ = nullptr;
  }
  physical_returns_allowed_ = from.physical_returns_allowed_;
  // @@protoc_insertion_point(copy_constructor:ern411.ern.PhysicalReturns)
}

void PhysicalReturns::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PhysicalReturns_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  ::memset(&latest_date_for_physical_returns_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&physical_returns_allowed_) -
      reinterpret_cast<char*>(&latest_date_for_physical_returns_)) + sizeof(physical_returns_allowed_));
}

PhysicalReturns::~PhysicalReturns() {
  // @@protoc_insertion_point(destructor:ern411.ern.PhysicalReturns)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PhysicalReturns::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete latest_date_for_physical_returns_;
}

void PhysicalReturns::ArenaDtor(void* object) {
  PhysicalReturns* _this = reinterpret_cast< PhysicalReturns* >(object);
  (void)_this;
}
void PhysicalReturns::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PhysicalReturns::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PhysicalReturns& PhysicalReturns::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PhysicalReturns_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void PhysicalReturns::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.PhysicalReturns)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(latest_date_for_physical_returns_ != nullptr);
    latest_date_for_physical_returns_->Clear();
  }
  physical_returns_allowed_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PhysicalReturns::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ern411.ern.ddex_IsoDate latest_date_for_physical_returns = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_latest_date_for_physical_returns(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool physical_returns_allowed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_physical_returns_allowed(&has_bits);
          physical_returns_allowed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PhysicalReturns::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.PhysicalReturns)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ern411.ern.ddex_IsoDate latest_date_for_physical_returns = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::latest_date_for_physical_returns(this), target, stream);
  }

  // optional bool physical_returns_allowed = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_physical_returns_allowed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.PhysicalReturns)
  return target;
}

size_t PhysicalReturns::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.PhysicalReturns)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .ern411.ern.ddex_IsoDate latest_date_for_physical_returns = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *latest_date_for_physical_returns_);
    }

    // optional bool physical_returns_allowed = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PhysicalReturns::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.PhysicalReturns)
  GOOGLE_DCHECK_NE(&from, this);
  const PhysicalReturns* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PhysicalReturns>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.PhysicalReturns)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.PhysicalReturns)
    MergeFrom(*source);
  }
}

void PhysicalReturns::MergeFrom(const PhysicalReturns& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.PhysicalReturns)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_latest_date_for_physical_returns()->::ern411::ern::ddex_IsoDate::MergeFrom(from._internal_latest_date_for_physical_returns());
    }
    if (cached_has_bits & 0x00000002u) {
      physical_returns_allowed_ = from.physical_returns_allowed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PhysicalReturns::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.PhysicalReturns)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PhysicalReturns::CopyFrom(const PhysicalReturns& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.PhysicalReturns)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PhysicalReturns::IsInitialized() const {
  return true;
}

void PhysicalReturns::InternalSwap(PhysicalReturns* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PhysicalReturns, physical_returns_allowed_)
      + sizeof(PhysicalReturns::physical_returns_allowed_)
      - PROTOBUF_FIELD_OFFSET(PhysicalReturns, latest_date_for_physical_returns_)>(
          reinterpret_cast<char*>(&latest_date_for_physical_returns_),
          reinterpret_cast<char*>(&other->latest_date_for_physical_returns_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PhysicalReturns::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Prefix::InitAsDefaultInstance() {
}
class Prefix::_Internal {
 public:
  using HasBits = decltype(std::declval<Prefix>()._has_bits_);
  static void set_has_language_and_script_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ext_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Prefix::Prefix(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.Prefix)
}
Prefix::Prefix(const Prefix& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  language_and_script_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_language_and_script_code()) {
    language_and_script_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_language_and_script_code(),
      GetArena());
  }
  ext_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ext_value()) {
    ext_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ext_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:ern411.ern.Prefix)
}

void Prefix::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Prefix_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  language_and_script_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ext_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Prefix::~Prefix() {
  // @@protoc_insertion_point(destructor:ern411.ern.Prefix)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Prefix::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  language_and_script_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ext_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Prefix::ArenaDtor(void* object) {
  Prefix* _this = reinterpret_cast< Prefix* >(object);
  (void)_this;
}
void Prefix::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Prefix::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Prefix& Prefix::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Prefix_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void Prefix::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.Prefix)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      language_and_script_code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      ext_value_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Prefix::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string language_and_script_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_language_and_script_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.Prefix.language_and_script_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string ext_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_ext_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.Prefix.ext_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Prefix::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.Prefix)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string language_and_script_code = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_language_and_script_code().data(), static_cast<int>(this->_internal_language_and_script_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.Prefix.language_and_script_code");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_language_and_script_code(), target);
  }

  // optional string ext_value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ext_value().data(), static_cast<int>(this->_internal_ext_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.Prefix.ext_value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ext_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.Prefix)
  return target;
}

size_t Prefix::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.Prefix)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string language_and_script_code = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_language_and_script_code());
    }

    // optional string ext_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ext_value());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Prefix::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.Prefix)
  GOOGLE_DCHECK_NE(&from, this);
  const Prefix* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Prefix>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.Prefix)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.Prefix)
    MergeFrom(*source);
  }
}

void Prefix::MergeFrom(const Prefix& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.Prefix)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_language_and_script_code(from._internal_language_and_script_code());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_ext_value(from._internal_ext_value());
    }
  }
}

void Prefix::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.Prefix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Prefix::CopyFrom(const Prefix& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.Prefix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Prefix::IsInitialized() const {
  return true;
}

void Prefix::InternalSwap(Prefix* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  language_and_script_code_.Swap(&other->language_and_script_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ext_value_.Swap(&other->ext_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Prefix::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PreviewDetails::InitAsDefaultInstance() {
  ::ern411::ern::_PreviewDetails_default_instance_._instance.get_mutable()->expression_type_ = const_cast< ::ern411::avs::ExpressionType*>(
      ::ern411::avs::ExpressionType::internal_default_instance());
}
class PreviewDetails::_Internal {
 public:
  using HasBits = decltype(std::declval<PreviewDetails>()._has_bits_);
  static void set_has_bottom_right_corner(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ern411::avs::ExpressionType& expression_type(const PreviewDetails* msg);
  static void set_has_expression_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_top_left_corner(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::ern411::avs::ExpressionType&
PreviewDetails::_Internal::expression_type(const PreviewDetails* msg) {
  return *msg->expression_type_;
}
void PreviewDetails::clear_expression_type() {
  if (expression_type_ != nullptr) expression_type_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
PreviewDetails::PreviewDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.PreviewDetails)
}
PreviewDetails::PreviewDetails(const PreviewDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  bottom_right_corner_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_bottom_right_corner()) {
    bottom_right_corner_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_bottom_right_corner(),
      GetArena());
  }
  top_left_corner_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_top_left_corner()) {
    top_left_corner_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_top_left_corner(),
      GetArena());
  }
  if (from._internal_has_expression_type()) {
    expression_type_ = new ::ern411::avs::ExpressionType(*from.expression_type_);
  } else {
    expression_type_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ern411.ern.PreviewDetails)
}

void PreviewDetails::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PreviewDetails_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  bottom_right_corner_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  top_left_corner_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  expression_type_ = nullptr;
}

PreviewDetails::~PreviewDetails() {
  // @@protoc_insertion_point(destructor:ern411.ern.PreviewDetails)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PreviewDetails::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  bottom_right_corner_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  top_left_corner_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete expression_type_;
}

void PreviewDetails::ArenaDtor(void* object) {
  PreviewDetails* _this = reinterpret_cast< PreviewDetails* >(object);
  (void)_this;
}
void PreviewDetails::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PreviewDetails::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PreviewDetails& PreviewDetails::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PreviewDetails_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void PreviewDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.PreviewDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      bottom_right_corner_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      top_left_corner_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(expression_type_ != nullptr);
      expression_type_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PreviewDetails::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string bottom_right_corner = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_bottom_right_corner();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.PreviewDetails.bottom_right_corner");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.avs.ExpressionType expression_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_expression_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string top_left_corner = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_top_left_corner();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.PreviewDetails.top_left_corner");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PreviewDetails::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.PreviewDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string bottom_right_corner = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_bottom_right_corner().data(), static_cast<int>(this->_internal_bottom_right_corner().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.PreviewDetails.bottom_right_corner");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_bottom_right_corner(), target);
  }

  // optional .ern411.avs.ExpressionType expression_type = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::expression_type(this), target, stream);
  }

  // optional string top_left_corner = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_top_left_corner().data(), static_cast<int>(this->_internal_top_left_corner().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.PreviewDetails.top_left_corner");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_top_left_corner(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.PreviewDetails)
  return target;
}

size_t PreviewDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.PreviewDetails)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string bottom_right_corner = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_bottom_right_corner());
    }

    // optional string top_left_corner = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_top_left_corner());
    }

    // optional .ern411.avs.ExpressionType expression_type = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *expression_type_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PreviewDetails::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.PreviewDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const PreviewDetails* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PreviewDetails>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.PreviewDetails)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.PreviewDetails)
    MergeFrom(*source);
  }
}

void PreviewDetails::MergeFrom(const PreviewDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.PreviewDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_bottom_right_corner(from._internal_bottom_right_corner());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_top_left_corner(from._internal_top_left_corner());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_expression_type()->::ern411::avs::ExpressionType::MergeFrom(from._internal_expression_type());
    }
  }
}

void PreviewDetails::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.PreviewDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PreviewDetails::CopyFrom(const PreviewDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.PreviewDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PreviewDetails::IsInitialized() const {
  return true;
}

void PreviewDetails::InternalSwap(PreviewDetails* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  bottom_right_corner_.Swap(&other->bottom_right_corner_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  top_left_corner_.Swap(&other->top_left_corner_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(expression_type_, other->expression_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PreviewDetails::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Price::InitAsDefaultInstance() {
  ::ern411::ern::_Price_default_instance_._instance.get_mutable()->currency_code_ = const_cast< ::ern411::avs::CurrencyCode*>(
      ::ern411::avs::CurrencyCode::internal_default_instance());
}
class Price::_Internal {
 public:
  using HasBits = decltype(std::declval<Price>()._has_bits_);
  static const ::ern411::avs::CurrencyCode& currency_code(const Price* msg);
  static void set_has_currency_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ext_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::ern411::avs::CurrencyCode&
Price::_Internal::currency_code(const Price* msg) {
  return *msg->currency_code_;
}
void Price::clear_currency_code() {
  if (currency_code_ != nullptr) currency_code_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
Price::Price(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.Price)
}
Price::Price(const Price& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_currency_code()) {
    currency_code_ = new ::ern411::avs::CurrencyCode(*from.currency_code_);
  } else {
    currency_code_ = nullptr;
  }
  ext_value_ = from.ext_value_;
  // @@protoc_insertion_point(copy_constructor:ern411.ern.Price)
}

void Price::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Price_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  ::memset(&currency_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ext_value_) -
      reinterpret_cast<char*>(&currency_code_)) + sizeof(ext_value_));
}

Price::~Price() {
  // @@protoc_insertion_point(destructor:ern411.ern.Price)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Price::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete currency_code_;
}

void Price::ArenaDtor(void* object) {
  Price* _this = reinterpret_cast< Price* >(object);
  (void)_this;
}
void Price::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Price::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Price& Price::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Price_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void Price::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.Price)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(currency_code_ != nullptr);
    currency_code_->Clear();
  }
  ext_value_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Price::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ern411.avs.CurrencyCode currency_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_currency_code(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double ext_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_ext_value(&has_bits);
          ext_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Price::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.Price)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ern411.avs.CurrencyCode currency_code = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::currency_code(this), target, stream);
  }

  // optional double ext_value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_ext_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.Price)
  return target;
}

size_t Price::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.Price)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .ern411.avs.CurrencyCode currency_code = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *currency_code_);
    }

    // optional double ext_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Price::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.Price)
  GOOGLE_DCHECK_NE(&from, this);
  const Price* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Price>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.Price)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.Price)
    MergeFrom(*source);
  }
}

void Price::MergeFrom(const Price& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.Price)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_currency_code()->::ern411::avs::CurrencyCode::MergeFrom(from._internal_currency_code());
    }
    if (cached_has_bits & 0x00000002u) {
      ext_value_ = from.ext_value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Price::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.Price)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Price::CopyFrom(const Price& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.Price)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Price::IsInitialized() const {
  return true;
}

void Price::InternalSwap(Price* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Price, ext_value_)
      + sizeof(Price::ext_value_)
      - PROTOBUF_FIELD_OFFSET(Price, currency_code_)>(
          reinterpret_cast<char*>(&currency_code_),
          reinterpret_cast<char*>(&other->currency_code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Price::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PriceInformationWithType::InitAsDefaultInstance() {
  ::ern411::ern::_PriceInformationWithType_default_instance_._instance.get_mutable()->bulk_order_wholesale_price_per_unit_ = const_cast< ::ern411::ern::Price*>(
      ::ern411::ern::Price::internal_default_instance());
  ::ern411::ern::_PriceInformationWithType_default_instance_._instance.get_mutable()->price_code_ = const_cast< ::ern411::ern::PriceType*>(
      ::ern411::ern::PriceType::internal_default_instance());
  ::ern411::ern::_PriceInformationWithType_default_instance_._instance.get_mutable()->price_type_ = const_cast< ::ern411::avs::PriceInformationType*>(
      ::ern411::avs::PriceInformationType::internal_default_instance());
  ::ern411::ern::_PriceInformationWithType_default_instance_._instance.get_mutable()->suggested_retail_price_ = const_cast< ::ern411::ern::Price*>(
      ::ern411::ern::Price::internal_default_instance());
  ::ern411::ern::_PriceInformationWithType_default_instance_._instance.get_mutable()->wholesale_price_per_unit_ = const_cast< ::ern411::ern::Price*>(
      ::ern411::ern::Price::internal_default_instance());
}
class PriceInformationWithType::_Internal {
 public:
  using HasBits = decltype(std::declval<PriceInformationWithType>()._has_bits_);
  static const ::ern411::ern::Price& bulk_order_wholesale_price_per_unit(const PriceInformationWithType* msg);
  static void set_has_bulk_order_wholesale_price_per_unit(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ern411::ern::PriceType& price_code(const PriceInformationWithType* msg);
  static void set_has_price_code(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::ern411::avs::PriceInformationType& price_type(const PriceInformationWithType* msg);
  static void set_has_price_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::ern411::ern::Price& suggested_retail_price(const PriceInformationWithType* msg);
  static void set_has_suggested_retail_price(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::ern411::ern::Price& wholesale_price_per_unit(const PriceInformationWithType* msg);
  static void set_has_wholesale_price_per_unit(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::ern411::ern::Price&
PriceInformationWithType::_Internal::bulk_order_wholesale_price_per_unit(const PriceInformationWithType* msg) {
  return *msg->bulk_order_wholesale_price_per_unit_;
}
const ::ern411::ern::PriceType&
PriceInformationWithType::_Internal::price_code(const PriceInformationWithType* msg) {
  return *msg->price_code_;
}
const ::ern411::avs::PriceInformationType&
PriceInformationWithType::_Internal::price_type(const PriceInformationWithType* msg) {
  return *msg->price_type_;
}
const ::ern411::ern::Price&
PriceInformationWithType::_Internal::suggested_retail_price(const PriceInformationWithType* msg) {
  return *msg->suggested_retail_price_;
}
const ::ern411::ern::Price&
PriceInformationWithType::_Internal::wholesale_price_per_unit(const PriceInformationWithType* msg) {
  return *msg->wholesale_price_per_unit_;
}
void PriceInformationWithType::clear_price_type() {
  if (price_type_ != nullptr) price_type_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
PriceInformationWithType::PriceInformationWithType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.PriceInformationWithType)
}
PriceInformationWithType::PriceInformationWithType(const PriceInformationWithType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_bulk_order_wholesale_price_per_unit()) {
    bulk_order_wholesale_price_per_unit_ = new ::ern411::ern::Price(*from.bulk_order_wholesale_price_per_unit_);
  } else {
    bulk_order_wholesale_price_per_unit_ = nullptr;
  }
  if (from._internal_has_price_code()) {
    price_code_ = new ::ern411::ern::PriceType(*from.price_code_);
  } else {
    price_code_ = nullptr;
  }
  if (from._internal_has_price_type()) {
    price_type_ = new ::ern411::avs::PriceInformationType(*from.price_type_);
  } else {
    price_type_ = nullptr;
  }
  if (from._internal_has_suggested_retail_price()) {
    suggested_retail_price_ = new ::ern411::ern::Price(*from.suggested_retail_price_);
  } else {
    suggested_retail_price_ = nullptr;
  }
  if (from._internal_has_wholesale_price_per_unit()) {
    wholesale_price_per_unit_ = new ::ern411::ern::Price(*from.wholesale_price_per_unit_);
  } else {
    wholesale_price_per_unit_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ern411.ern.PriceInformationWithType)
}

void PriceInformationWithType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PriceInformationWithType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  ::memset(&bulk_order_wholesale_price_per_unit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&wholesale_price_per_unit_) -
      reinterpret_cast<char*>(&bulk_order_wholesale_price_per_unit_)) + sizeof(wholesale_price_per_unit_));
}

PriceInformationWithType::~PriceInformationWithType() {
  // @@protoc_insertion_point(destructor:ern411.ern.PriceInformationWithType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PriceInformationWithType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete bulk_order_wholesale_price_per_unit_;
  if (this != internal_default_instance()) delete price_code_;
  if (this != internal_default_instance()) delete price_type_;
  if (this != internal_default_instance()) delete suggested_retail_price_;
  if (this != internal_default_instance()) delete wholesale_price_per_unit_;
}

void PriceInformationWithType::ArenaDtor(void* object) {
  PriceInformationWithType* _this = reinterpret_cast< PriceInformationWithType* >(object);
  (void)_this;
}
void PriceInformationWithType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PriceInformationWithType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PriceInformationWithType& PriceInformationWithType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PriceInformationWithType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void PriceInformationWithType::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.PriceInformationWithType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(bulk_order_wholesale_price_per_unit_ != nullptr);
      bulk_order_wholesale_price_per_unit_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(price_code_ != nullptr);
      price_code_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(price_type_ != nullptr);
      price_type_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(suggested_retail_price_ != nullptr);
      suggested_retail_price_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(wholesale_price_per_unit_ != nullptr);
      wholesale_price_per_unit_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PriceInformationWithType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ern411.ern.Price bulk_order_wholesale_price_per_unit = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_bulk_order_wholesale_price_per_unit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.ern.PriceType price_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_price_code(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.avs.PriceInformationType price_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_price_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.ern.Price suggested_retail_price = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_suggested_retail_price(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.ern.Price wholesale_price_per_unit = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_wholesale_price_per_unit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PriceInformationWithType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.PriceInformationWithType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ern411.ern.Price bulk_order_wholesale_price_per_unit = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::bulk_order_wholesale_price_per_unit(this), target, stream);
  }

  // optional .ern411.ern.PriceType price_code = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::price_code(this), target, stream);
  }

  // optional .ern411.avs.PriceInformationType price_type = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::price_type(this), target, stream);
  }

  // optional .ern411.ern.Price suggested_retail_price = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::suggested_retail_price(this), target, stream);
  }

  // optional .ern411.ern.Price wholesale_price_per_unit = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::wholesale_price_per_unit(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.PriceInformationWithType)
  return target;
}

size_t PriceInformationWithType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.PriceInformationWithType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .ern411.ern.Price bulk_order_wholesale_price_per_unit = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *bulk_order_wholesale_price_per_unit_);
    }

    // optional .ern411.ern.PriceType price_code = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *price_code_);
    }

    // optional .ern411.avs.PriceInformationType price_type = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *price_type_);
    }

    // optional .ern411.ern.Price suggested_retail_price = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *suggested_retail_price_);
    }

    // optional .ern411.ern.Price wholesale_price_per_unit = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *wholesale_price_per_unit_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PriceInformationWithType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.PriceInformationWithType)
  GOOGLE_DCHECK_NE(&from, this);
  const PriceInformationWithType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PriceInformationWithType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.PriceInformationWithType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.PriceInformationWithType)
    MergeFrom(*source);
  }
}

void PriceInformationWithType::MergeFrom(const PriceInformationWithType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.PriceInformationWithType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_bulk_order_wholesale_price_per_unit()->::ern411::ern::Price::MergeFrom(from._internal_bulk_order_wholesale_price_per_unit());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_price_code()->::ern411::ern::PriceType::MergeFrom(from._internal_price_code());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_price_type()->::ern411::avs::PriceInformationType::MergeFrom(from._internal_price_type());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_suggested_retail_price()->::ern411::ern::Price::MergeFrom(from._internal_suggested_retail_price());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_wholesale_price_per_unit()->::ern411::ern::Price::MergeFrom(from._internal_wholesale_price_per_unit());
    }
  }
}

void PriceInformationWithType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.PriceInformationWithType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PriceInformationWithType::CopyFrom(const PriceInformationWithType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.PriceInformationWithType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PriceInformationWithType::IsInitialized() const {
  return true;
}

void PriceInformationWithType::InternalSwap(PriceInformationWithType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PriceInformationWithType, wholesale_price_per_unit_)
      + sizeof(PriceInformationWithType::wholesale_price_per_unit_)
      - PROTOBUF_FIELD_OFFSET(PriceInformationWithType, bulk_order_wholesale_price_per_unit_)>(
          reinterpret_cast<char*>(&bulk_order_wholesale_price_per_unit_),
          reinterpret_cast<char*>(&other->bulk_order_wholesale_price_per_unit_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PriceInformationWithType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PriceType::InitAsDefaultInstance() {
  ::ern411::ern::_PriceType_default_instance_._instance.get_mutable()->ext_value_ = const_cast< ::ern411::avs::PriceType*>(
      ::ern411::avs::PriceType::internal_default_instance());
}
class PriceType::_Internal {
 public:
  using HasBits = decltype(std::declval<PriceType>()._has_bits_);
  static void set_has_namespace_(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ern411::avs::PriceType& ext_value(const PriceType* msg);
  static void set_has_ext_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::ern411::avs::PriceType&
PriceType::_Internal::ext_value(const PriceType* msg) {
  return *msg->ext_value_;
}
void PriceType::clear_ext_value() {
  if (ext_value_ != nullptr) ext_value_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
PriceType::PriceType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.PriceType)
}
PriceType::PriceType(const PriceType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_namespace_()) {
    namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_namespace_(),
      GetArena());
  }
  if (from._internal_has_ext_value()) {
    ext_value_ = new ::ern411::avs::PriceType(*from.ext_value_);
  } else {
    ext_value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ern411.ern.PriceType)
}

void PriceType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PriceType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ext_value_ = nullptr;
}

PriceType::~PriceType() {
  // @@protoc_insertion_point(destructor:ern411.ern.PriceType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PriceType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  namespace__.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ext_value_;
}

void PriceType::ArenaDtor(void* object) {
  PriceType* _this = reinterpret_cast< PriceType* >(object);
  (void)_this;
}
void PriceType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PriceType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PriceType& PriceType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PriceType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void PriceType::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.PriceType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      namespace__.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(ext_value_ != nullptr);
      ext_value_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PriceType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string namespace = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_namespace_();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.PriceType.namespace");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.avs.PriceType ext_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PriceType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.PriceType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string namespace = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_namespace_().data(), static_cast<int>(this->_internal_namespace_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.PriceType.namespace");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_namespace_(), target);
  }

  // optional .ern411.avs.PriceType ext_value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::ext_value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.PriceType)
  return target;
}

size_t PriceType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.PriceType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string namespace = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_namespace_());
    }

    // optional .ern411.avs.PriceType ext_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ext_value_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PriceType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.PriceType)
  GOOGLE_DCHECK_NE(&from, this);
  const PriceType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PriceType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.PriceType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.PriceType)
    MergeFrom(*source);
  }
}

void PriceType::MergeFrom(const PriceType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.PriceType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_namespace_(from._internal_namespace_());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_ext_value()->::ern411::avs::PriceType::MergeFrom(from._internal_ext_value());
    }
  }
}

void PriceType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.PriceType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PriceType::CopyFrom(const PriceType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.PriceType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PriceType::IsInitialized() const {
  return true;
}

void PriceType::InternalSwap(PriceType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  namespace__.Swap(&other->namespace__, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(ext_value_, other->ext_value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PriceType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PromotionalCode::InitAsDefaultInstance() {
}
class PromotionalCode::_Internal {
 public:
  using HasBits = decltype(std::declval<PromotionalCode>()._has_bits_);
  static void set_has_namespace_(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ext_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PromotionalCode::PromotionalCode(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.PromotionalCode)
}
PromotionalCode::PromotionalCode(const PromotionalCode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_namespace_()) {
    namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_namespace_(),
      GetArena());
  }
  ext_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ext_value()) {
    ext_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ext_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:ern411.ern.PromotionalCode)
}

void PromotionalCode::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PromotionalCode_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ext_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PromotionalCode::~PromotionalCode() {
  // @@protoc_insertion_point(destructor:ern411.ern.PromotionalCode)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PromotionalCode::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  namespace__.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ext_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PromotionalCode::ArenaDtor(void* object) {
  PromotionalCode* _this = reinterpret_cast< PromotionalCode* >(object);
  (void)_this;
}
void PromotionalCode::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PromotionalCode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PromotionalCode& PromotionalCode::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PromotionalCode_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void PromotionalCode::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.PromotionalCode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      namespace__.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      ext_value_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PromotionalCode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string namespace = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_namespace_();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.PromotionalCode.namespace");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string ext_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_ext_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.PromotionalCode.ext_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PromotionalCode::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.PromotionalCode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string namespace = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_namespace_().data(), static_cast<int>(this->_internal_namespace_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.PromotionalCode.namespace");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_namespace_(), target);
  }

  // optional string ext_value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ext_value().data(), static_cast<int>(this->_internal_ext_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.PromotionalCode.ext_value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ext_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.PromotionalCode)
  return target;
}

size_t PromotionalCode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.PromotionalCode)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string namespace = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_namespace_());
    }

    // optional string ext_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ext_value());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PromotionalCode::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.PromotionalCode)
  GOOGLE_DCHECK_NE(&from, this);
  const PromotionalCode* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PromotionalCode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.PromotionalCode)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.PromotionalCode)
    MergeFrom(*source);
  }
}

void PromotionalCode::MergeFrom(const PromotionalCode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.PromotionalCode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_namespace_(from._internal_namespace_());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_ext_value(from._internal_ext_value());
    }
  }
}

void PromotionalCode::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.PromotionalCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PromotionalCode::CopyFrom(const PromotionalCode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.PromotionalCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PromotionalCode::IsInitialized() const {
  return true;
}

void PromotionalCode::InternalSwap(PromotionalCode* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  namespace__.Swap(&other->namespace__, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ext_value_.Swap(&other->ext_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata PromotionalCode::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ProprietaryId::InitAsDefaultInstance() {
}
class ProprietaryId::_Internal {
 public:
  using HasBits = decltype(std::declval<ProprietaryId>()._has_bits_);
  static void set_has_namespace_(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ext_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ProprietaryId::ProprietaryId(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.ProprietaryId)
}
ProprietaryId::ProprietaryId(const ProprietaryId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_namespace_()) {
    namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_namespace_(),
      GetArena());
  }
  ext_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ext_value()) {
    ext_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ext_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:ern411.ern.ProprietaryId)
}

void ProprietaryId::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProprietaryId_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ext_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ProprietaryId::~ProprietaryId() {
  // @@protoc_insertion_point(destructor:ern411.ern.ProprietaryId)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProprietaryId::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  namespace__.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ext_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ProprietaryId::ArenaDtor(void* object) {
  ProprietaryId* _this = reinterpret_cast< ProprietaryId* >(object);
  (void)_this;
}
void ProprietaryId::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProprietaryId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProprietaryId& ProprietaryId::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProprietaryId_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void ProprietaryId::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.ProprietaryId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      namespace__.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      ext_value_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProprietaryId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string namespace = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_namespace_();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.ProprietaryId.namespace");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string ext_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_ext_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.ProprietaryId.ext_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProprietaryId::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.ProprietaryId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string namespace = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_namespace_().data(), static_cast<int>(this->_internal_namespace_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.ProprietaryId.namespace");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_namespace_(), target);
  }

  // optional string ext_value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ext_value().data(), static_cast<int>(this->_internal_ext_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.ProprietaryId.ext_value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ext_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.ProprietaryId)
  return target;
}

size_t ProprietaryId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.ProprietaryId)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string namespace = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_namespace_());
    }

    // optional string ext_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ext_value());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProprietaryId::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.ProprietaryId)
  GOOGLE_DCHECK_NE(&from, this);
  const ProprietaryId* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProprietaryId>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.ProprietaryId)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.ProprietaryId)
    MergeFrom(*source);
  }
}

void ProprietaryId::MergeFrom(const ProprietaryId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.ProprietaryId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_namespace_(from._internal_namespace_());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_ext_value(from._internal_ext_value());
    }
  }
}

void ProprietaryId::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.ProprietaryId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProprietaryId::CopyFrom(const ProprietaryId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.ProprietaryId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProprietaryId::IsInitialized() const {
  return true;
}

void ProprietaryId::InternalSwap(ProprietaryId* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  namespace__.Swap(&other->namespace__, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ext_value_.Swap(&other->ext_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ProprietaryId::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PurgeReleaseMessage::InitAsDefaultInstance() {
  ::ern411::ern::_PurgeReleaseMessage_default_instance_._instance.get_mutable()->message_header_ = const_cast< ::ern411::ern::MessageHeader*>(
      ::ern411::ern::MessageHeader::internal_default_instance());
  ::ern411::ern::_PurgeReleaseMessage_default_instance_._instance.get_mutable()->purged_release_ = const_cast< ::ern411::ern::PurgedRelease*>(
      ::ern411::ern::PurgedRelease::internal_default_instance());
}
class PurgeReleaseMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<PurgeReleaseMessage>()._has_bits_);
  static void set_has_language_and_script_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ern411::ern::MessageHeader& message_header(const PurgeReleaseMessage* msg);
  static void set_has_message_header(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::ern411::ern::PurgedRelease& purged_release(const PurgeReleaseMessage* msg);
  static void set_has_purged_release(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::ern411::ern::MessageHeader&
PurgeReleaseMessage::_Internal::message_header(const PurgeReleaseMessage* msg) {
  return *msg->message_header_;
}
const ::ern411::ern::PurgedRelease&
PurgeReleaseMessage::_Internal::purged_release(const PurgeReleaseMessage* msg) {
  return *msg->purged_release_;
}
PurgeReleaseMessage::PurgeReleaseMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.PurgeReleaseMessage)
}
PurgeReleaseMessage::PurgeReleaseMessage(const PurgeReleaseMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  language_and_script_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_language_and_script_code()) {
    language_and_script_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_language_and_script_code(),
      GetArena());
  }
  if (from._internal_has_message_header()) {
    message_header_ = new ::ern411::ern::MessageHeader(*from.message_header_);
  } else {
    message_header_ = nullptr;
  }
  if (from._internal_has_purged_release()) {
    purged_release_ = new ::ern411::ern::PurgedRelease(*from.purged_release_);
  } else {
    purged_release_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ern411.ern.PurgeReleaseMessage)
}

void PurgeReleaseMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PurgeReleaseMessage_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  language_and_script_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&message_header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&purged_release_) -
      reinterpret_cast<char*>(&message_header_)) + sizeof(purged_release_));
}

PurgeReleaseMessage::~PurgeReleaseMessage() {
  // @@protoc_insertion_point(destructor:ern411.ern.PurgeReleaseMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PurgeReleaseMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  language_and_script_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete message_header_;
  if (this != internal_default_instance()) delete purged_release_;
}

void PurgeReleaseMessage::ArenaDtor(void* object) {
  PurgeReleaseMessage* _this = reinterpret_cast< PurgeReleaseMessage* >(object);
  (void)_this;
}
void PurgeReleaseMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PurgeReleaseMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PurgeReleaseMessage& PurgeReleaseMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PurgeReleaseMessage_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void PurgeReleaseMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.PurgeReleaseMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      language_and_script_code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(message_header_ != nullptr);
      message_header_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(purged_release_ != nullptr);
      purged_release_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PurgeReleaseMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string language_and_script_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_language_and_script_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.PurgeReleaseMessage.language_and_script_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.ern.MessageHeader message_header = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_message_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.ern.PurgedRelease purged_release = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_purged_release(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PurgeReleaseMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.PurgeReleaseMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string language_and_script_code = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_language_and_script_code().data(), static_cast<int>(this->_internal_language_and_script_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.PurgeReleaseMessage.language_and_script_code");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_language_and_script_code(), target);
  }

  // optional .ern411.ern.MessageHeader message_header = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::message_header(this), target, stream);
  }

  // optional .ern411.ern.PurgedRelease purged_release = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::purged_release(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.PurgeReleaseMessage)
  return target;
}

size_t PurgeReleaseMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.PurgeReleaseMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string language_and_script_code = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_language_and_script_code());
    }

    // optional .ern411.ern.MessageHeader message_header = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_header_);
    }

    // optional .ern411.ern.PurgedRelease purged_release = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *purged_release_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PurgeReleaseMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.PurgeReleaseMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const PurgeReleaseMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PurgeReleaseMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.PurgeReleaseMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.PurgeReleaseMessage)
    MergeFrom(*source);
  }
}

void PurgeReleaseMessage::MergeFrom(const PurgeReleaseMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.PurgeReleaseMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_language_and_script_code(from._internal_language_and_script_code());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_message_header()->::ern411::ern::MessageHeader::MergeFrom(from._internal_message_header());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_purged_release()->::ern411::ern::PurgedRelease::MergeFrom(from._internal_purged_release());
    }
  }
}

void PurgeReleaseMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.PurgeReleaseMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PurgeReleaseMessage::CopyFrom(const PurgeReleaseMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.PurgeReleaseMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PurgeReleaseMessage::IsInitialized() const {
  return true;
}

void PurgeReleaseMessage::InternalSwap(PurgeReleaseMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  language_and_script_code_.Swap(&other->language_and_script_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PurgeReleaseMessage, purged_release_)
      + sizeof(PurgeReleaseMessage::purged_release_)
      - PROTOBUF_FIELD_OFFSET(PurgeReleaseMessage, message_header_)>(
          reinterpret_cast<char*>(&message_header_),
          reinterpret_cast<char*>(&other->message_header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PurgeReleaseMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PurgedRelease::InitAsDefaultInstance() {
  ::ern411::ern::_PurgedRelease_default_instance_._instance.get_mutable()->release_id_ = const_cast< ::ern411::ern::ReleaseId*>(
      ::ern411::ern::ReleaseId::internal_default_instance());
}
class PurgedRelease::_Internal {
 public:
  using HasBits = decltype(std::declval<PurgedRelease>()._has_bits_);
  static const ::ern411::ern::ReleaseId& release_id(const PurgedRelease* msg);
  static void set_has_release_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::ern411::ern::ReleaseId&
PurgedRelease::_Internal::release_id(const PurgedRelease* msg) {
  return *msg->release_id_;
}
PurgedRelease::PurgedRelease(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  contributor_(arena),
  title_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.PurgedRelease)
}
PurgedRelease::PurgedRelease(const PurgedRelease& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      contributor_(from.contributor_),
      title_(from.title_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_release_id()) {
    release_id_ = new ::ern411::ern::ReleaseId(*from.release_id_);
  } else {
    release_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ern411.ern.PurgedRelease)
}

void PurgedRelease::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PurgedRelease_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  release_id_ = nullptr;
}

PurgedRelease::~PurgedRelease() {
  // @@protoc_insertion_point(destructor:ern411.ern.PurgedRelease)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PurgedRelease::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete release_id_;
}

void PurgedRelease::ArenaDtor(void* object) {
  PurgedRelease* _this = reinterpret_cast< PurgedRelease* >(object);
  (void)_this;
}
void PurgedRelease::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PurgedRelease::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PurgedRelease& PurgedRelease::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PurgedRelease_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void PurgedRelease::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.PurgedRelease)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  contributor_.Clear();
  title_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(release_id_ != nullptr);
    release_id_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PurgedRelease::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ern411.ern.DetailedResourceContributor contributor = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_contributor(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .ern411.ern.ReleaseId release_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_release_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.Title title = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_title(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PurgedRelease::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.PurgedRelease)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ern411.ern.DetailedResourceContributor contributor = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_contributor_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_contributor(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional .ern411.ern.ReleaseId release_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::release_id(this), target, stream);
  }

  // repeated .ern411.ern.Title title = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_title_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_title(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.PurgedRelease)
  return target;
}

size_t PurgedRelease::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.PurgedRelease)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ern411.ern.DetailedResourceContributor contributor = 1;
  total_size += 1UL * this->_internal_contributor_size();
  for (const auto& msg : this->contributor_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.Title title = 3;
  total_size += 1UL * this->_internal_title_size();
  for (const auto& msg : this->title_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .ern411.ern.ReleaseId release_id = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *release_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PurgedRelease::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.PurgedRelease)
  GOOGLE_DCHECK_NE(&from, this);
  const PurgedRelease* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PurgedRelease>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.PurgedRelease)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.PurgedRelease)
    MergeFrom(*source);
  }
}

void PurgedRelease::MergeFrom(const PurgedRelease& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.PurgedRelease)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  contributor_.MergeFrom(from.contributor_);
  title_.MergeFrom(from.title_);
  if (from._internal_has_release_id()) {
    _internal_mutable_release_id()->::ern411::ern::ReleaseId::MergeFrom(from._internal_release_id());
  }
}

void PurgedRelease::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.PurgedRelease)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PurgedRelease::CopyFrom(const PurgedRelease& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.PurgedRelease)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PurgedRelease::IsInitialized() const {
  return true;
}

void PurgedRelease::InternalSwap(PurgedRelease* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  contributor_.InternalSwap(&other->contributor_);
  title_.InternalSwap(&other->title_);
  swap(release_id_, other->release_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PurgedRelease::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Purpose::InitAsDefaultInstance() {
  ::ern411::ern::_Purpose_default_instance_._instance.get_mutable()->ext_value_ = const_cast< ::ern411::avs::Purpose*>(
      ::ern411::avs::Purpose::internal_default_instance());
}
class Purpose::_Internal {
 public:
  using HasBits = decltype(std::declval<Purpose>()._has_bits_);
  static void set_has_namespace_(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_user_defined_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::ern411::avs::Purpose& ext_value(const Purpose* msg);
  static void set_has_ext_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::ern411::avs::Purpose&
Purpose::_Internal::ext_value(const Purpose* msg) {
  return *msg->ext_value_;
}
void Purpose::clear_ext_value() {
  if (ext_value_ != nullptr) ext_value_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
Purpose::Purpose(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.Purpose)
}
Purpose::Purpose(const Purpose& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_namespace_()) {
    namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_namespace_(),
      GetArena());
  }
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_user_defined_value()) {
    user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_defined_value(),
      GetArena());
  }
  if (from._internal_has_ext_value()) {
    ext_value_ = new ::ern411::avs::Purpose(*from.ext_value_);
  } else {
    ext_value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ern411.ern.Purpose)
}

void Purpose::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Purpose_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ext_value_ = nullptr;
}

Purpose::~Purpose() {
  // @@protoc_insertion_point(destructor:ern411.ern.Purpose)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Purpose::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  namespace__.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ext_value_;
}

void Purpose::ArenaDtor(void* object) {
  Purpose* _this = reinterpret_cast< Purpose* >(object);
  (void)_this;
}
void Purpose::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Purpose::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Purpose& Purpose::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Purpose_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void Purpose::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.Purpose)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      namespace__.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      user_defined_value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(ext_value_ != nullptr);
      ext_value_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Purpose::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string namespace = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_namespace_();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.Purpose.namespace");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string user_defined_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_user_defined_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.Purpose.user_defined_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.avs.Purpose ext_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Purpose::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.Purpose)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string namespace = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_namespace_().data(), static_cast<int>(this->_internal_namespace_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.Purpose.namespace");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_namespace_(), target);
  }

  // optional string user_defined_value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_user_defined_value().data(), static_cast<int>(this->_internal_user_defined_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.Purpose.user_defined_value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_defined_value(), target);
  }

  // optional .ern411.avs.Purpose ext_value = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::ext_value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.Purpose)
  return target;
}

size_t Purpose::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.Purpose)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string namespace = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_namespace_());
    }

    // optional string user_defined_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_defined_value());
    }

    // optional .ern411.avs.Purpose ext_value = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ext_value_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Purpose::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.Purpose)
  GOOGLE_DCHECK_NE(&from, this);
  const Purpose* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Purpose>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.Purpose)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.Purpose)
    MergeFrom(*source);
  }
}

void Purpose::MergeFrom(const Purpose& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.Purpose)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_namespace_(from._internal_namespace_());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_user_defined_value(from._internal_user_defined_value());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_ext_value()->::ern411::avs::Purpose::MergeFrom(from._internal_ext_value());
    }
  }
}

void Purpose::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.Purpose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Purpose::CopyFrom(const Purpose& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.Purpose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Purpose::IsInitialized() const {
  return true;
}

void Purpose::InternalSwap(Purpose* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  namespace__.Swap(&other->namespace__, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_defined_value_.Swap(&other->user_defined_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(ext_value_, other->ext_value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Purpose::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Raga::InitAsDefaultInstance() {
  ::ern411::ern::_Raga_default_instance_._instance.get_mutable()->applicable_territory_code_ = const_cast< ::ern411::avs::CurrentTerritoryCode*>(
      ::ern411::avs::CurrentTerritoryCode::internal_default_instance());
}
class Raga::_Internal {
 public:
  using HasBits = decltype(std::declval<Raga>()._has_bits_);
  static const ::ern411::avs::CurrentTerritoryCode& applicable_territory_code(const Raga* msg);
  static void set_has_applicable_territory_code(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_default(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ext_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::ern411::avs::CurrentTerritoryCode&
Raga::_Internal::applicable_territory_code(const Raga* msg) {
  return *msg->applicable_territory_code_;
}
void Raga::clear_applicable_territory_code() {
  if (applicable_territory_code_ != nullptr) applicable_territory_code_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
Raga::Raga(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.Raga)
}
Raga::Raga(const Raga& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ext_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ext_value()) {
    ext_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ext_value(),
      GetArena());
  }
  if (from._internal_has_applicable_territory_code()) {
    applicable_territory_code_ = new ::ern411::avs::CurrentTerritoryCode(*from.applicable_territory_code_);
  } else {
    applicable_territory_code_ = nullptr;
  }
  is_default_ = from.is_default_;
  // @@protoc_insertion_point(copy_constructor:ern411.ern.Raga)
}

void Raga::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Raga_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  ext_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&applicable_territory_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_default_) -
      reinterpret_cast<char*>(&applicable_territory_code_)) + sizeof(is_default_));
}

Raga::~Raga() {
  // @@protoc_insertion_point(destructor:ern411.ern.Raga)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Raga::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  ext_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete applicable_territory_code_;
}

void Raga::ArenaDtor(void* object) {
  Raga* _this = reinterpret_cast< Raga* >(object);
  (void)_this;
}
void Raga::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Raga::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Raga& Raga::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Raga_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void Raga::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.Raga)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ext_value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(applicable_territory_code_ != nullptr);
      applicable_territory_code_->Clear();
    }
  }
  is_default_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Raga::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ern411.avs.CurrentTerritoryCode applicable_territory_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_applicable_territory_code(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_default = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_is_default(&has_bits);
          is_default_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string ext_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_ext_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.Raga.ext_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Raga::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.Raga)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ern411.avs.CurrentTerritoryCode applicable_territory_code = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::applicable_territory_code(this), target, stream);
  }

  // optional bool is_default = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_default(), target);
  }

  // optional string ext_value = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ext_value().data(), static_cast<int>(this->_internal_ext_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.Raga.ext_value");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_ext_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.Raga)
  return target;
}

size_t Raga::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.Raga)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string ext_value = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ext_value());
    }

    // optional .ern411.avs.CurrentTerritoryCode applicable_territory_code = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *applicable_territory_code_);
    }

    // optional bool is_default = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Raga::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.Raga)
  GOOGLE_DCHECK_NE(&from, this);
  const Raga* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Raga>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.Raga)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.Raga)
    MergeFrom(*source);
  }
}

void Raga::MergeFrom(const Raga& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.Raga)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_ext_value(from._internal_ext_value());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_applicable_territory_code()->::ern411::avs::CurrentTerritoryCode::MergeFrom(from._internal_applicable_territory_code());
    }
    if (cached_has_bits & 0x00000004u) {
      is_default_ = from.is_default_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Raga::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.Raga)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Raga::CopyFrom(const Raga& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.Raga)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Raga::IsInitialized() const {
  return true;
}

void Raga::InternalSwap(Raga* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ext_value_.Swap(&other->ext_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Raga, is_default_)
      + sizeof(Raga::is_default_)
      - PROTOBUF_FIELD_OFFSET(Raga, applicable_territory_code_)>(
          reinterpret_cast<char*>(&applicable_territory_code_),
          reinterpret_cast<char*>(&other->applicable_territory_code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Raga::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RatingAgency::InitAsDefaultInstance() {
  ::ern411::ern::_RatingAgency_default_instance_._instance.get_mutable()->ext_value_ = const_cast< ::ern411::avs::RatingAgency*>(
      ::ern411::avs::RatingAgency::internal_default_instance());
}
class RatingAgency::_Internal {
 public:
  using HasBits = decltype(std::declval<RatingAgency>()._has_bits_);
  static void set_has_namespace_(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_user_defined_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::ern411::avs::RatingAgency& ext_value(const RatingAgency* msg);
  static void set_has_ext_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::ern411::avs::RatingAgency&
RatingAgency::_Internal::ext_value(const RatingAgency* msg) {
  return *msg->ext_value_;
}
void RatingAgency::clear_ext_value() {
  if (ext_value_ != nullptr) ext_value_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
RatingAgency::RatingAgency(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.RatingAgency)
}
RatingAgency::RatingAgency(const RatingAgency& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_namespace_()) {
    namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_namespace_(),
      GetArena());
  }
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_user_defined_value()) {
    user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_defined_value(),
      GetArena());
  }
  if (from._internal_has_ext_value()) {
    ext_value_ = new ::ern411::avs::RatingAgency(*from.ext_value_);
  } else {
    ext_value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ern411.ern.RatingAgency)
}

void RatingAgency::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RatingAgency_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ext_value_ = nullptr;
}

RatingAgency::~RatingAgency() {
  // @@protoc_insertion_point(destructor:ern411.ern.RatingAgency)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RatingAgency::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  namespace__.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ext_value_;
}

void RatingAgency::ArenaDtor(void* object) {
  RatingAgency* _this = reinterpret_cast< RatingAgency* >(object);
  (void)_this;
}
void RatingAgency::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RatingAgency::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RatingAgency& RatingAgency::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RatingAgency_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void RatingAgency::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.RatingAgency)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      namespace__.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      user_defined_value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(ext_value_ != nullptr);
      ext_value_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RatingAgency::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string namespace = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_namespace_();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.RatingAgency.namespace");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string user_defined_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_user_defined_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.RatingAgency.user_defined_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.avs.RatingAgency ext_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RatingAgency::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.RatingAgency)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string namespace = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_namespace_().data(), static_cast<int>(this->_internal_namespace_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.RatingAgency.namespace");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_namespace_(), target);
  }

  // optional string user_defined_value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_user_defined_value().data(), static_cast<int>(this->_internal_user_defined_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.RatingAgency.user_defined_value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_defined_value(), target);
  }

  // optional .ern411.avs.RatingAgency ext_value = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::ext_value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.RatingAgency)
  return target;
}

size_t RatingAgency::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.RatingAgency)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string namespace = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_namespace_());
    }

    // optional string user_defined_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_defined_value());
    }

    // optional .ern411.avs.RatingAgency ext_value = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ext_value_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RatingAgency::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.RatingAgency)
  GOOGLE_DCHECK_NE(&from, this);
  const RatingAgency* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RatingAgency>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.RatingAgency)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.RatingAgency)
    MergeFrom(*source);
  }
}

void RatingAgency::MergeFrom(const RatingAgency& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.RatingAgency)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_namespace_(from._internal_namespace_());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_user_defined_value(from._internal_user_defined_value());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_ext_value()->::ern411::avs::RatingAgency::MergeFrom(from._internal_ext_value());
    }
  }
}

void RatingAgency::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.RatingAgency)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RatingAgency::CopyFrom(const RatingAgency& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.RatingAgency)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RatingAgency::IsInitialized() const {
  return true;
}

void RatingAgency::InternalSwap(RatingAgency* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  namespace__.Swap(&other->namespace__, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_defined_value_.Swap(&other->user_defined_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(ext_value_, other->ext_value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RatingAgency::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Reason::InitAsDefaultInstance() {
}
class Reason::_Internal {
 public:
  using HasBits = decltype(std::declval<Reason>()._has_bits_);
  static void set_has_language_and_script_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ext_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Reason::Reason(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.Reason)
}
Reason::Reason(const Reason& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  language_and_script_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_language_and_script_code()) {
    language_and_script_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_language_and_script_code(),
      GetArena());
  }
  ext_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ext_value()) {
    ext_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ext_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:ern411.ern.Reason)
}

void Reason::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Reason_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  language_and_script_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ext_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Reason::~Reason() {
  // @@protoc_insertion_point(destructor:ern411.ern.Reason)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Reason::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  language_and_script_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ext_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Reason::ArenaDtor(void* object) {
  Reason* _this = reinterpret_cast< Reason* >(object);
  (void)_this;
}
void Reason::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Reason::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Reason& Reason::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Reason_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void Reason::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.Reason)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      language_and_script_code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      ext_value_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Reason::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string language_and_script_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_language_and_script_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.Reason.language_and_script_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string ext_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_ext_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.Reason.ext_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Reason::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.Reason)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string language_and_script_code = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_language_and_script_code().data(), static_cast<int>(this->_internal_language_and_script_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.Reason.language_and_script_code");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_language_and_script_code(), target);
  }

  // optional string ext_value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ext_value().data(), static_cast<int>(this->_internal_ext_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.Reason.ext_value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ext_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.Reason)
  return target;
}

size_t Reason::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.Reason)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string language_and_script_code = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_language_and_script_code());
    }

    // optional string ext_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ext_value());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Reason::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.Reason)
  GOOGLE_DCHECK_NE(&from, this);
  const Reason* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Reason>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.Reason)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.Reason)
    MergeFrom(*source);
  }
}

void Reason::MergeFrom(const Reason& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.Reason)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_language_and_script_code(from._internal_language_and_script_code());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_ext_value(from._internal_ext_value());
    }
  }
}

void Reason::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.Reason)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Reason::CopyFrom(const Reason& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.Reason)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Reason::IsInitialized() const {
  return true;
}

void Reason::InternalSwap(Reason* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  language_and_script_code_.Swap(&other->language_and_script_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ext_value_.Swap(&other->ext_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Reason::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RelatedParty::InitAsDefaultInstance() {
  ::ern411::ern::_RelatedParty_default_instance_._instance.get_mutable()->party_relationship_type_ = const_cast< ::ern411::ern::PartyRelationshipType*>(
      ::ern411::ern::PartyRelationshipType::internal_default_instance());
}
class RelatedParty::_Internal {
 public:
  using HasBits = decltype(std::declval<RelatedParty>()._has_bits_);
  static void set_has_party_related_party_reference(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ern411::ern::PartyRelationshipType& party_relationship_type(const RelatedParty* msg);
  static void set_has_party_relationship_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::ern411::ern::PartyRelationshipType&
RelatedParty::_Internal::party_relationship_type(const RelatedParty* msg) {
  return *msg->party_relationship_type_;
}
RelatedParty::RelatedParty(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.RelatedParty)
}
RelatedParty::RelatedParty(const RelatedParty& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  party_related_party_reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_party_related_party_reference()) {
    party_related_party_reference_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_party_related_party_reference(),
      GetArena());
  }
  if (from._internal_has_party_relationship_type()) {
    party_relationship_type_ = new ::ern411::ern::PartyRelationshipType(*from.party_relationship_type_);
  } else {
    party_relationship_type_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ern411.ern.RelatedParty)
}

void RelatedParty::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RelatedParty_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  party_related_party_reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  party_relationship_type_ = nullptr;
}

RelatedParty::~RelatedParty() {
  // @@protoc_insertion_point(destructor:ern411.ern.RelatedParty)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RelatedParty::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  party_related_party_reference_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete party_relationship_type_;
}

void RelatedParty::ArenaDtor(void* object) {
  RelatedParty* _this = reinterpret_cast< RelatedParty* >(object);
  (void)_this;
}
void RelatedParty::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RelatedParty::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RelatedParty& RelatedParty::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RelatedParty_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void RelatedParty::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.RelatedParty)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      party_related_party_reference_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(party_relationship_type_ != nullptr);
      party_relationship_type_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RelatedParty::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string party_related_party_reference = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_party_related_party_reference();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.RelatedParty.party_related_party_reference");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.ern.PartyRelationshipType party_relationship_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_party_relationship_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RelatedParty::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.RelatedParty)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string party_related_party_reference = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_party_related_party_reference().data(), static_cast<int>(this->_internal_party_related_party_reference().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.RelatedParty.party_related_party_reference");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_party_related_party_reference(), target);
  }

  // optional .ern411.ern.PartyRelationshipType party_relationship_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::party_relationship_type(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.RelatedParty)
  return target;
}

size_t RelatedParty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.RelatedParty)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string party_related_party_reference = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_party_related_party_reference());
    }

    // optional .ern411.ern.PartyRelationshipType party_relationship_type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *party_relationship_type_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RelatedParty::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.RelatedParty)
  GOOGLE_DCHECK_NE(&from, this);
  const RelatedParty* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RelatedParty>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.RelatedParty)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.RelatedParty)
    MergeFrom(*source);
  }
}

void RelatedParty::MergeFrom(const RelatedParty& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.RelatedParty)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_party_related_party_reference(from._internal_party_related_party_reference());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_party_relationship_type()->::ern411::ern::PartyRelationshipType::MergeFrom(from._internal_party_relationship_type());
    }
  }
}

void RelatedParty::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.RelatedParty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RelatedParty::CopyFrom(const RelatedParty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.RelatedParty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RelatedParty::IsInitialized() const {
  return true;
}

void RelatedParty::InternalSwap(RelatedParty* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  party_related_party_reference_.Swap(&other->party_related_party_reference_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(party_relationship_type_, other->party_relationship_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RelatedParty::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RelatedRelease::InitAsDefaultInstance() {
  ::ern411::ern::_RelatedRelease_default_instance_._instance.get_mutable()->original_release_date_ = const_cast< ::ern411::ern::EventDateWithoutFlags*>(
      ::ern411::ern::EventDateWithoutFlags::internal_default_instance());
  ::ern411::ern::_RelatedRelease_default_instance_._instance.get_mutable()->release_date_ = const_cast< ::ern411::ern::EventDateWithoutFlags*>(
      ::ern411::ern::EventDateWithoutFlags::internal_default_instance());
  ::ern411::ern::_RelatedRelease_default_instance_._instance.get_mutable()->release_id_ = const_cast< ::ern411::ern::ReleaseId*>(
      ::ern411::ern::ReleaseId::internal_default_instance());
  ::ern411::ern::_RelatedRelease_default_instance_._instance.get_mutable()->release_relationship_type_ = const_cast< ::ern411::ern::ReleaseRelationshipType*>(
      ::ern411::ern::ReleaseRelationshipType::internal_default_instance());
}
class RelatedRelease::_Internal {
 public:
  using HasBits = decltype(std::declval<RelatedRelease>()._has_bits_);
  static const ::ern411::ern::EventDateWithoutFlags& original_release_date(const RelatedRelease* msg);
  static void set_has_original_release_date(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ern411::ern::EventDateWithoutFlags& release_date(const RelatedRelease* msg);
  static void set_has_release_date(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::ern411::ern::ReleaseId& release_id(const RelatedRelease* msg);
  static void set_has_release_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::ern411::ern::ReleaseRelationshipType& release_relationship_type(const RelatedRelease* msg);
  static void set_has_release_relationship_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::ern411::ern::EventDateWithoutFlags&
RelatedRelease::_Internal::original_release_date(const RelatedRelease* msg) {
  return *msg->original_release_date_;
}
const ::ern411::ern::EventDateWithoutFlags&
RelatedRelease::_Internal::release_date(const RelatedRelease* msg) {
  return *msg->release_date_;
}
const ::ern411::ern::ReleaseId&
RelatedRelease::_Internal::release_id(const RelatedRelease* msg) {
  return *msg->release_id_;
}
const ::ern411::ern::ReleaseRelationshipType&
RelatedRelease::_Internal::release_relationship_type(const RelatedRelease* msg) {
  return *msg->release_relationship_type_;
}
RelatedRelease::RelatedRelease(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  additional_title_(arena),
  display_artist_name_(arena),
  display_title_(arena),
  display_title_text_(arena),
  release_label_reference_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.RelatedRelease)
}
RelatedRelease::RelatedRelease(const RelatedRelease& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      additional_title_(from.additional_title_),
      display_artist_name_(from.display_artist_name_),
      display_title_(from.display_title_),
      display_title_text_(from.display_title_text_),
      release_label_reference_(from.release_label_reference_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_original_release_date()) {
    original_release_date_ = new ::ern411::ern::EventDateWithoutFlags(*from.original_release_date_);
  } else {
    original_release_date_ = nullptr;
  }
  if (from._internal_has_release_date()) {
    release_date_ = new ::ern411::ern::EventDateWithoutFlags(*from.release_date_);
  } else {
    release_date_ = nullptr;
  }
  if (from._internal_has_release_id()) {
    release_id_ = new ::ern411::ern::ReleaseId(*from.release_id_);
  } else {
    release_id_ = nullptr;
  }
  if (from._internal_has_release_relationship_type()) {
    release_relationship_type_ = new ::ern411::ern::ReleaseRelationshipType(*from.release_relationship_type_);
  } else {
    release_relationship_type_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ern411.ern.RelatedRelease)
}

void RelatedRelease::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RelatedRelease_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  ::memset(&original_release_date_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&release_relationship_type_) -
      reinterpret_cast<char*>(&original_release_date_)) + sizeof(release_relationship_type_));
}

RelatedRelease::~RelatedRelease() {
  // @@protoc_insertion_point(destructor:ern411.ern.RelatedRelease)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RelatedRelease::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete original_release_date_;
  if (this != internal_default_instance()) delete release_date_;
  if (this != internal_default_instance()) delete release_id_;
  if (this != internal_default_instance()) delete release_relationship_type_;
}

void RelatedRelease::ArenaDtor(void* object) {
  RelatedRelease* _this = reinterpret_cast< RelatedRelease* >(object);
  (void)_this;
}
void RelatedRelease::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RelatedRelease::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RelatedRelease& RelatedRelease::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RelatedRelease_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void RelatedRelease::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.RelatedRelease)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  additional_title_.Clear();
  display_artist_name_.Clear();
  display_title_.Clear();
  display_title_text_.Clear();
  release_label_reference_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(original_release_date_ != nullptr);
      original_release_date_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(release_date_ != nullptr);
      release_date_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(release_id_ != nullptr);
      release_id_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(release_relationship_type_ != nullptr);
      release_relationship_type_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RelatedRelease::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ern411.ern.AdditionalTitle additional_title = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_additional_title(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.DisplayArtistNameWithDefault display_artist_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_display_artist_name(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.DisplayTitle display_title = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_display_title(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.DisplayTitleText display_title_text = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_display_title_text(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .ern411.ern.EventDateWithoutFlags original_release_date = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_original_release_date(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.ern.EventDateWithoutFlags release_date = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_release_date(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.ern.ReleaseId release_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_release_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.ReleaseLabelReference release_label_reference = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_release_label_reference(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .ern411.ern.ReleaseRelationshipType release_relationship_type = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_release_relationship_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RelatedRelease::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.RelatedRelease)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ern411.ern.AdditionalTitle additional_title = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_additional_title_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_additional_title(i), target, stream);
  }

  // repeated .ern411.ern.DisplayArtistNameWithDefault display_artist_name = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_display_artist_name_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_display_artist_name(i), target, stream);
  }

  // repeated .ern411.ern.DisplayTitle display_title = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_display_title_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_display_title(i), target, stream);
  }

  // repeated .ern411.ern.DisplayTitleText display_title_text = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_display_title_text_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_display_title_text(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional .ern411.ern.EventDateWithoutFlags original_release_date = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::original_release_date(this), target, stream);
  }

  // optional .ern411.ern.EventDateWithoutFlags release_date = 6;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::release_date(this), target, stream);
  }

  // optional .ern411.ern.ReleaseId release_id = 7;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::release_id(this), target, stream);
  }

  // repeated .ern411.ern.ReleaseLabelReference release_label_reference = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_release_label_reference_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_release_label_reference(i), target, stream);
  }

  // optional .ern411.ern.ReleaseRelationshipType release_relationship_type = 9;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::release_relationship_type(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.RelatedRelease)
  return target;
}

size_t RelatedRelease::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.RelatedRelease)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ern411.ern.AdditionalTitle additional_title = 1;
  total_size += 1UL * this->_internal_additional_title_size();
  for (const auto& msg : this->additional_title_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.DisplayArtistNameWithDefault display_artist_name = 2;
  total_size += 1UL * this->_internal_display_artist_name_size();
  for (const auto& msg : this->display_artist_name_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.DisplayTitle display_title = 3;
  total_size += 1UL * this->_internal_display_title_size();
  for (const auto& msg : this->display_title_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.DisplayTitleText display_title_text = 4;
  total_size += 1UL * this->_internal_display_title_text_size();
  for (const auto& msg : this->display_title_text_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.ReleaseLabelReference release_label_reference = 8;
  total_size += 1UL * this->_internal_release_label_reference_size();
  for (const auto& msg : this->release_label_reference_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .ern411.ern.EventDateWithoutFlags original_release_date = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *original_release_date_);
    }

    // optional .ern411.ern.EventDateWithoutFlags release_date = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *release_date_);
    }

    // optional .ern411.ern.ReleaseId release_id = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *release_id_);
    }

    // optional .ern411.ern.ReleaseRelationshipType release_relationship_type = 9;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *release_relationship_type_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RelatedRelease::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.RelatedRelease)
  GOOGLE_DCHECK_NE(&from, this);
  const RelatedRelease* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RelatedRelease>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.RelatedRelease)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.RelatedRelease)
    MergeFrom(*source);
  }
}

void RelatedRelease::MergeFrom(const RelatedRelease& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.RelatedRelease)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  additional_title_.MergeFrom(from.additional_title_);
  display_artist_name_.MergeFrom(from.display_artist_name_);
  display_title_.MergeFrom(from.display_title_);
  display_title_text_.MergeFrom(from.display_title_text_);
  release_label_reference_.MergeFrom(from.release_label_reference_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_original_release_date()->::ern411::ern::EventDateWithoutFlags::MergeFrom(from._internal_original_release_date());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_release_date()->::ern411::ern::EventDateWithoutFlags::MergeFrom(from._internal_release_date());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_release_id()->::ern411::ern::ReleaseId::MergeFrom(from._internal_release_id());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_release_relationship_type()->::ern411::ern::ReleaseRelationshipType::MergeFrom(from._internal_release_relationship_type());
    }
  }
}

void RelatedRelease::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.RelatedRelease)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RelatedRelease::CopyFrom(const RelatedRelease& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.RelatedRelease)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RelatedRelease::IsInitialized() const {
  return true;
}

void RelatedRelease::InternalSwap(RelatedRelease* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  additional_title_.InternalSwap(&other->additional_title_);
  display_artist_name_.InternalSwap(&other->display_artist_name_);
  display_title_.InternalSwap(&other->display_title_);
  display_title_text_.InternalSwap(&other->display_title_text_);
  release_label_reference_.InternalSwap(&other->release_label_reference_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RelatedRelease, release_relationship_type_)
      + sizeof(RelatedRelease::release_relationship_type_)
      - PROTOBUF_FIELD_OFFSET(RelatedRelease, original_release_date_)>(
          reinterpret_cast<char*>(&original_release_date_),
          reinterpret_cast<char*>(&other->original_release_date_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RelatedRelease::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RelatedResource::InitAsDefaultInstance() {
  ::ern411::ern::_RelatedResource_default_instance_._instance.get_mutable()->release_id_ = const_cast< ::ern411::ern::ReleaseId*>(
      ::ern411::ern::ReleaseId::internal_default_instance());
  ::ern411::ern::_RelatedResource_default_instance_._instance.get_mutable()->resource_relationship_type_ = const_cast< ::ern411::avs::ResourceRelationshipType*>(
      ::ern411::avs::ResourceRelationshipType::internal_default_instance());
}
class RelatedResource::_Internal {
 public:
  using HasBits = decltype(std::declval<RelatedResource>()._has_bits_);
  static const ::ern411::ern::ReleaseId& release_id(const RelatedResource* msg);
  static void set_has_release_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_resource_related_resource_reference(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ern411::avs::ResourceRelationshipType& resource_relationship_type(const RelatedResource* msg);
  static void set_has_resource_relationship_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::ern411::ern::ReleaseId&
RelatedResource::_Internal::release_id(const RelatedResource* msg) {
  return *msg->release_id_;
}
const ::ern411::avs::ResourceRelationshipType&
RelatedResource::_Internal::resource_relationship_type(const RelatedResource* msg) {
  return *msg->resource_relationship_type_;
}
void RelatedResource::clear_resource_relationship_type() {
  if (resource_relationship_type_ != nullptr) resource_relationship_type_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
RelatedResource::RelatedResource(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  timing_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.RelatedResource)
}
RelatedResource::RelatedResource(const RelatedResource& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      timing_(from.timing_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  resource_related_resource_reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_resource_related_resource_reference()) {
    resource_related_resource_reference_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_resource_related_resource_reference(),
      GetArena());
  }
  if (from._internal_has_release_id()) {
    release_id_ = new ::ern411::ern::ReleaseId(*from.release_id_);
  } else {
    release_id_ = nullptr;
  }
  if (from._internal_has_resource_relationship_type()) {
    resource_relationship_type_ = new ::ern411::avs::ResourceRelationshipType(*from.resource_relationship_type_);
  } else {
    resource_relationship_type_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ern411.ern.RelatedResource)
}

void RelatedResource::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RelatedResource_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  resource_related_resource_reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&release_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resource_relationship_type_) -
      reinterpret_cast<char*>(&release_id_)) + sizeof(resource_relationship_type_));
}

RelatedResource::~RelatedResource() {
  // @@protoc_insertion_point(destructor:ern411.ern.RelatedResource)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RelatedResource::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  resource_related_resource_reference_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete release_id_;
  if (this != internal_default_instance()) delete resource_relationship_type_;
}

void RelatedResource::ArenaDtor(void* object) {
  RelatedResource* _this = reinterpret_cast< RelatedResource* >(object);
  (void)_this;
}
void RelatedResource::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RelatedResource::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RelatedResource& RelatedResource::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RelatedResource_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void RelatedResource::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.RelatedResource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  timing_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      resource_related_resource_reference_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(release_id_ != nullptr);
      release_id_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(resource_relationship_type_ != nullptr);
      resource_relationship_type_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RelatedResource::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ern411.ern.ReleaseId release_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_release_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string resource_related_resource_reference = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_resource_related_resource_reference();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.RelatedResource.resource_related_resource_reference");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.avs.ResourceRelationshipType resource_relationship_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_resource_relationship_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.Timing timing = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_timing(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RelatedResource::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.RelatedResource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ern411.ern.ReleaseId release_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::release_id(this), target, stream);
  }

  // optional string resource_related_resource_reference = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_resource_related_resource_reference().data(), static_cast<int>(this->_internal_resource_related_resource_reference().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.RelatedResource.resource_related_resource_reference");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_resource_related_resource_reference(), target);
  }

  // optional .ern411.avs.ResourceRelationshipType resource_relationship_type = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::resource_relationship_type(this), target, stream);
  }

  // repeated .ern411.ern.Timing timing = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_timing_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_timing(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.RelatedResource)
  return target;
}

size_t RelatedResource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.RelatedResource)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ern411.ern.Timing timing = 4;
  total_size += 1UL * this->_internal_timing_size();
  for (const auto& msg : this->timing_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string resource_related_resource_reference = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_resource_related_resource_reference());
    }

    // optional .ern411.ern.ReleaseId release_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *release_id_);
    }

    // optional .ern411.avs.ResourceRelationshipType resource_relationship_type = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *resource_relationship_type_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RelatedResource::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.RelatedResource)
  GOOGLE_DCHECK_NE(&from, this);
  const RelatedResource* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RelatedResource>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.RelatedResource)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.RelatedResource)
    MergeFrom(*source);
  }
}

void RelatedResource::MergeFrom(const RelatedResource& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.RelatedResource)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  timing_.MergeFrom(from.timing_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_resource_related_resource_reference(from._internal_resource_related_resource_reference());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_release_id()->::ern411::ern::ReleaseId::MergeFrom(from._internal_release_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_resource_relationship_type()->::ern411::avs::ResourceRelationshipType::MergeFrom(from._internal_resource_relationship_type());
    }
  }
}

void RelatedResource::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.RelatedResource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RelatedResource::CopyFrom(const RelatedResource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.RelatedResource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RelatedResource::IsInitialized() const {
  return true;
}

void RelatedResource::InternalSwap(RelatedResource* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  timing_.InternalSwap(&other->timing_);
  resource_related_resource_reference_.Swap(&other->resource_related_resource_reference_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RelatedResource, resource_relationship_type_)
      + sizeof(RelatedResource::resource_relationship_type_)
      - PROTOBUF_FIELD_OFFSET(RelatedResource, release_id_)>(
          reinterpret_cast<char*>(&release_id_),
          reinterpret_cast<char*>(&other->release_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RelatedResource::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Release::InitAsDefaultInstance() {
  ::ern411::ern::_Release_default_instance_._instance.get_mutable()->release_id_ = const_cast< ::ern411::ern::ReleaseId*>(
      ::ern411::ern::ReleaseId::internal_default_instance());
  ::ern411::ern::_Release_default_instance_._instance.get_mutable()->resource_group_ = const_cast< ::ern411::ern::ResourceGroup*>(
      ::ern411::ern::ResourceGroup::internal_default_instance());
}
class Release::_Internal {
 public:
  using HasBits = decltype(std::declval<Release>()._has_bits_);
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_hi_res_music_description(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_compilation(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_is_hi_res_music(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_is_multi_artist_compilation(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_is_soundtrack(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_language_and_script_code(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::ern411::ern::ReleaseId& release_id(const Release* msg);
  static void set_has_release_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_release_reference(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::ern411::ern::ResourceGroup& resource_group(const Release* msg);
  static void set_has_resource_group(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::ern411::ern::ReleaseId&
Release::_Internal::release_id(const Release* msg) {
  return *msg->release_id_;
}
const ::ern411::ern::ResourceGroup&
Release::_Internal::resource_group(const Release* msg) {
  return *msg->resource_group_;
}
Release::Release(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  additional_title_(arena),
  administrating_record_company_(arena),
  av_rating_(arena),
  c_line_(arena),
  courtesy_line_(arena),
  deity_(arena),
  display_artist_(arena),
  display_artist_name_(arena),
  display_title_(arena),
  display_title_text_(arena),
  external_resource_link_(arena),
  genre_(arena),
  keywords_(arena),
  marketing_comment_(arena),
  original_release_date_(arena),
  p_line_(arena),
  parental_warning_type_(arena),
  raga_(arena),
  related_release_(arena),
  release_date_(arena),
  release_label_reference_(arena),
  release_type_(arena),
  synopsis_(arena),
  tala_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.Release)
}
Release::Release(const Release& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      additional_title_(from.additional_title_),
      administrating_record_company_(from.administrating_record_company_),
      av_rating_(from.av_rating_),
      c_line_(from.c_line_),
      courtesy_line_(from.courtesy_line_),
      deity_(from.deity_),
      display_artist_(from.display_artist_),
      display_artist_name_(from.display_artist_name_),
      display_title_(from.display_title_),
      display_title_text_(from.display_title_text_),
      external_resource_link_(from.external_resource_link_),
      genre_(from.genre_),
      keywords_(from.keywords_),
      marketing_comment_(from.marketing_comment_),
      original_release_date_(from.original_release_date_),
      p_line_(from.p_line_),
      parental_warning_type_(from.parental_warning_type_),
      raga_(from.raga_),
      related_release_(from.related_release_),
      release_date_(from.release_date_),
      release_label_reference_(from.release_label_reference_),
      release_type_(from.release_type_),
      synopsis_(from.synopsis_),
      tala_(from.tala_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  duration_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_duration()) {
    duration_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_duration(),
      GetArena());
  }
  hi_res_music_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_hi_res_music_description()) {
    hi_res_music_description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_hi_res_music_description(),
      GetArena());
  }
  language_and_script_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_language_and_script_code()) {
    language_and_script_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_language_and_script_code(),
      GetArena());
  }
  release_reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_release_reference()) {
    release_reference_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_release_reference(),
      GetArena());
  }
  if (from._internal_has_release_id()) {
    release_id_ = new ::ern411::ern::ReleaseId(*from.release_id_);
  } else {
    release_id_ = nullptr;
  }
  if (from._internal_has_resource_group()) {
    resource_group_ = new ::ern411::ern::ResourceGroup(*from.resource_group_);
  } else {
    resource_group_ = nullptr;
  }
  ::memcpy(&is_compilation_, &from.is_compilation_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_soundtrack_) -
    reinterpret_cast<char*>(&is_compilation_)) + sizeof(is_soundtrack_));
  // @@protoc_insertion_point(copy_constructor:ern411.ern.Release)
}

void Release::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Release_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  duration_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hi_res_music_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  language_and_script_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  release_reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&release_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_soundtrack_) -
      reinterpret_cast<char*>(&release_id_)) + sizeof(is_soundtrack_));
}

Release::~Release() {
  // @@protoc_insertion_point(destructor:ern411.ern.Release)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Release::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  duration_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hi_res_music_description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  language_and_script_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  release_reference_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete release_id_;
  if (this != internal_default_instance()) delete resource_group_;
}

void Release::ArenaDtor(void* object) {
  Release* _this = reinterpret_cast< Release* >(object);
  (void)_this;
}
void Release::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Release::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Release& Release::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Release_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void Release::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.Release)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  additional_title_.Clear();
  administrating_record_company_.Clear();
  av_rating_.Clear();
  c_line_.Clear();
  courtesy_line_.Clear();
  deity_.Clear();
  display_artist_.Clear();
  display_artist_name_.Clear();
  display_title_.Clear();
  display_title_text_.Clear();
  external_resource_link_.Clear();
  genre_.Clear();
  keywords_.Clear();
  marketing_comment_.Clear();
  original_release_date_.Clear();
  p_line_.Clear();
  parental_warning_type_.Clear();
  raga_.Clear();
  related_release_.Clear();
  release_date_.Clear();
  release_label_reference_.Clear();
  release_type_.Clear();
  synopsis_.Clear();
  tala_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      duration_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      hi_res_music_description_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      language_and_script_code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      release_reference_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(release_id_ != nullptr);
      release_id_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(resource_group_ != nullptr);
      resource_group_->Clear();
    }
  }
  ::memset(&is_compilation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_hi_res_music_) -
      reinterpret_cast<char*>(&is_compilation_)) + sizeof(is_hi_res_music_));
  ::memset(&is_multi_artist_compilation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_soundtrack_) -
      reinterpret_cast<char*>(&is_multi_artist_compilation_)) + sizeof(is_soundtrack_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Release::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ern411.ern.AdditionalTitle additional_title = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_additional_title(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.AdministratingRecordCompanyWithReference administrating_record_company = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_administrating_record_company(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.AvRating av_rating = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_av_rating(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.CLineWithDefault c_line = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_c_line(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.CourtesyLineWithDefault courtesy_line = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_courtesy_line(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.Deity deity = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_deity(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.DisplayArtist display_artist = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_display_artist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.DisplayArtistNameWithDefault display_artist_name = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_display_artist_name(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.DisplayTitle display_title = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_display_title(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.DisplayTitleText display_title_text = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_display_title_text(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string duration = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_duration();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.Release.duration");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.ExternalResourceLink external_resource_link = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_external_resource_link(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.GenreWithTerritory genre = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_genre(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string hi_res_music_description = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_hi_res_music_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.Release.hi_res_music_description");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_compilation = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_is_compilation(&has_bits);
          is_compilation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_hi_res_music = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_is_hi_res_music(&has_bits);
          is_hi_res_music_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_multi_artist_compilation = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_is_multi_artist_compilation(&has_bits);
          is_multi_artist_compilation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_soundtrack = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_is_soundtrack(&has_bits);
          is_soundtrack_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.KeywordsWithTerritory keywords = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_keywords(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<154>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string language_and_script_code = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_language_and_script_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.Release.language_and_script_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.MarketingComment marketing_comment = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_marketing_comment(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<170>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.EventDateWithDefault original_release_date = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_original_release_date(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<178>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.PLineWithDefault p_line = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_p_line(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<186>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.ParentalWarningTypeWithTerritory parental_warning_type = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_parental_warning_type(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<194>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.Raga raga = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_raga(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<202>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.RelatedRelease related_release = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_related_release(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<210>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.EventDateWithDefault release_date = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_release_date(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<218>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .ern411.ern.ReleaseId release_id = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_release_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.ReleaseLabelReference release_label_reference = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_release_label_reference(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<234>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string release_reference = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          auto str = _internal_mutable_release_reference();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.Release.release_reference");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.ReleaseTypeForReleaseNotification release_type = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_release_type(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<250>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .ern411.ern.ResourceGroup resource_group = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_resource_group(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.SynopsisWithTerritory synopsis = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_synopsis(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<266>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.Tala tala = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_tala(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<274>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Release::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.Release)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ern411.ern.AdditionalTitle additional_title = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_additional_title_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_additional_title(i), target, stream);
  }

  // repeated .ern411.ern.AdministratingRecordCompanyWithReference administrating_record_company = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_administrating_record_company_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_administrating_record_company(i), target, stream);
  }

  // repeated .ern411.ern.AvRating av_rating = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_av_rating_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_av_rating(i), target, stream);
  }

  // repeated .ern411.ern.CLineWithDefault c_line = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_c_line_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_c_line(i), target, stream);
  }

  // repeated .ern411.ern.CourtesyLineWithDefault courtesy_line = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_courtesy_line_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_courtesy_line(i), target, stream);
  }

  // repeated .ern411.ern.Deity deity = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_deity_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_deity(i), target, stream);
  }

  // repeated .ern411.ern.DisplayArtist display_artist = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_display_artist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_display_artist(i), target, stream);
  }

  // repeated .ern411.ern.DisplayArtistNameWithDefault display_artist_name = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_display_artist_name_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_display_artist_name(i), target, stream);
  }

  // repeated .ern411.ern.DisplayTitle display_title = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_display_title_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_display_title(i), target, stream);
  }

  // repeated .ern411.ern.DisplayTitleText display_title_text = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_display_title_text_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_display_title_text(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional string duration = 11;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_duration().data(), static_cast<int>(this->_internal_duration().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.Release.duration");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_duration(), target);
  }

  // repeated .ern411.ern.ExternalResourceLink external_resource_link = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_external_resource_link_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, this->_internal_external_resource_link(i), target, stream);
  }

  // repeated .ern411.ern.GenreWithTerritory genre = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_genre_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, this->_internal_genre(i), target, stream);
  }

  // optional string hi_res_music_description = 14;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_hi_res_music_description().data(), static_cast<int>(this->_internal_hi_res_music_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.Release.hi_res_music_description");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_hi_res_music_description(), target);
  }

  // optional bool is_compilation = 15;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_is_compilation(), target);
  }

  // optional bool is_hi_res_music = 16;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(16, this->_internal_is_hi_res_music(), target);
  }

  // optional bool is_multi_artist_compilation = 17;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(17, this->_internal_is_multi_artist_compilation(), target);
  }

  // optional bool is_soundtrack = 18;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(18, this->_internal_is_soundtrack(), target);
  }

  // repeated .ern411.ern.KeywordsWithTerritory keywords = 19;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_keywords_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(19, this->_internal_keywords(i), target, stream);
  }

  // optional string language_and_script_code = 20;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_language_and_script_code().data(), static_cast<int>(this->_internal_language_and_script_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.Release.language_and_script_code");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_language_and_script_code(), target);
  }

  // repeated .ern411.ern.MarketingComment marketing_comment = 21;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_marketing_comment_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, this->_internal_marketing_comment(i), target, stream);
  }

  // repeated .ern411.ern.EventDateWithDefault original_release_date = 22;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_original_release_date_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(22, this->_internal_original_release_date(i), target, stream);
  }

  // repeated .ern411.ern.PLineWithDefault p_line = 23;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_p_line_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(23, this->_internal_p_line(i), target, stream);
  }

  // repeated .ern411.ern.ParentalWarningTypeWithTerritory parental_warning_type = 24;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_parental_warning_type_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(24, this->_internal_parental_warning_type(i), target, stream);
  }

  // repeated .ern411.ern.Raga raga = 25;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_raga_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(25, this->_internal_raga(i), target, stream);
  }

  // repeated .ern411.ern.RelatedRelease related_release = 26;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_related_release_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(26, this->_internal_related_release(i), target, stream);
  }

  // repeated .ern411.ern.EventDateWithDefault release_date = 27;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_release_date_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(27, this->_internal_release_date(i), target, stream);
  }

  // optional .ern411.ern.ReleaseId release_id = 28;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        28, _Internal::release_id(this), target, stream);
  }

  // repeated .ern411.ern.ReleaseLabelReference release_label_reference = 29;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_release_label_reference_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(29, this->_internal_release_label_reference(i), target, stream);
  }

  // optional string release_reference = 30;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_release_reference().data(), static_cast<int>(this->_internal_release_reference().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.Release.release_reference");
    target = stream->WriteStringMaybeAliased(
        30, this->_internal_release_reference(), target);
  }

  // repeated .ern411.ern.ReleaseTypeForReleaseNotification release_type = 31;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_release_type_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(31, this->_internal_release_type(i), target, stream);
  }

  // optional .ern411.ern.ResourceGroup resource_group = 32;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        32, _Internal::resource_group(this), target, stream);
  }

  // repeated .ern411.ern.SynopsisWithTerritory synopsis = 33;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_synopsis_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(33, this->_internal_synopsis(i), target, stream);
  }

  // repeated .ern411.ern.Tala tala = 34;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tala_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(34, this->_internal_tala(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.Release)
  return target;
}

size_t Release::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.Release)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ern411.ern.AdditionalTitle additional_title = 1;
  total_size += 1UL * this->_internal_additional_title_size();
  for (const auto& msg : this->additional_title_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.AdministratingRecordCompanyWithReference administrating_record_company = 2;
  total_size += 1UL * this->_internal_administrating_record_company_size();
  for (const auto& msg : this->administrating_record_company_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.AvRating av_rating = 3;
  total_size += 1UL * this->_internal_av_rating_size();
  for (const auto& msg : this->av_rating_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.CLineWithDefault c_line = 4;
  total_size += 1UL * this->_internal_c_line_size();
  for (const auto& msg : this->c_line_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.CourtesyLineWithDefault courtesy_line = 5;
  total_size += 1UL * this->_internal_courtesy_line_size();
  for (const auto& msg : this->courtesy_line_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.Deity deity = 6;
  total_size += 1UL * this->_internal_deity_size();
  for (const auto& msg : this->deity_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.DisplayArtist display_artist = 7;
  total_size += 1UL * this->_internal_display_artist_size();
  for (const auto& msg : this->display_artist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.DisplayArtistNameWithDefault display_artist_name = 8;
  total_size += 1UL * this->_internal_display_artist_name_size();
  for (const auto& msg : this->display_artist_name_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.DisplayTitle display_title = 9;
  total_size += 1UL * this->_internal_display_title_size();
  for (const auto& msg : this->display_title_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.DisplayTitleText display_title_text = 10;
  total_size += 1UL * this->_internal_display_title_text_size();
  for (const auto& msg : this->display_title_text_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.ExternalResourceLink external_resource_link = 12;
  total_size += 1UL * this->_internal_external_resource_link_size();
  for (const auto& msg : this->external_resource_link_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.GenreWithTerritory genre = 13;
  total_size += 1UL * this->_internal_genre_size();
  for (const auto& msg : this->genre_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.KeywordsWithTerritory keywords = 19;
  total_size += 2UL * this->_internal_keywords_size();
  for (const auto& msg : this->keywords_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.MarketingComment marketing_comment = 21;
  total_size += 2UL * this->_internal_marketing_comment_size();
  for (const auto& msg : this->marketing_comment_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.EventDateWithDefault original_release_date = 22;
  total_size += 2UL * this->_internal_original_release_date_size();
  for (const auto& msg : this->original_release_date_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.PLineWithDefault p_line = 23;
  total_size += 2UL * this->_internal_p_line_size();
  for (const auto& msg : this->p_line_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.ParentalWarningTypeWithTerritory parental_warning_type = 24;
  total_size += 2UL * this->_internal_parental_warning_type_size();
  for (const auto& msg : this->parental_warning_type_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.Raga raga = 25;
  total_size += 2UL * this->_internal_raga_size();
  for (const auto& msg : this->raga_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.RelatedRelease related_release = 26;
  total_size += 2UL * this->_internal_related_release_size();
  for (const auto& msg : this->related_release_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.EventDateWithDefault release_date = 27;
  total_size += 2UL * this->_internal_release_date_size();
  for (const auto& msg : this->release_date_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.ReleaseLabelReference release_label_reference = 29;
  total_size += 2UL * this->_internal_release_label_reference_size();
  for (const auto& msg : this->release_label_reference_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.ReleaseTypeForReleaseNotification release_type = 31;
  total_size += 2UL * this->_internal_release_type_size();
  for (const auto& msg : this->release_type_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.SynopsisWithTerritory synopsis = 33;
  total_size += 2UL * this->_internal_synopsis_size();
  for (const auto& msg : this->synopsis_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.Tala tala = 34;
  total_size += 2UL * this->_internal_tala_size();
  for (const auto& msg : this->tala_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string duration = 11;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_duration());
    }

    // optional string hi_res_music_description = 14;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_hi_res_music_description());
    }

    // optional string language_and_script_code = 20;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_language_and_script_code());
    }

    // optional string release_reference = 30;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_release_reference());
    }

    // optional .ern411.ern.ReleaseId release_id = 28;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *release_id_);
    }

    // optional .ern411.ern.ResourceGroup resource_group = 32;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *resource_group_);
    }

    // optional bool is_compilation = 15;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool is_hi_res_music = 16;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional bool is_multi_artist_compilation = 17;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + 1;
    }

    // optional bool is_soundtrack = 18;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Release::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.Release)
  GOOGLE_DCHECK_NE(&from, this);
  const Release* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Release>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.Release)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.Release)
    MergeFrom(*source);
  }
}

void Release::MergeFrom(const Release& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.Release)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  additional_title_.MergeFrom(from.additional_title_);
  administrating_record_company_.MergeFrom(from.administrating_record_company_);
  av_rating_.MergeFrom(from.av_rating_);
  c_line_.MergeFrom(from.c_line_);
  courtesy_line_.MergeFrom(from.courtesy_line_);
  deity_.MergeFrom(from.deity_);
  display_artist_.MergeFrom(from.display_artist_);
  display_artist_name_.MergeFrom(from.display_artist_name_);
  display_title_.MergeFrom(from.display_title_);
  display_title_text_.MergeFrom(from.display_title_text_);
  external_resource_link_.MergeFrom(from.external_resource_link_);
  genre_.MergeFrom(from.genre_);
  keywords_.MergeFrom(from.keywords_);
  marketing_comment_.MergeFrom(from.marketing_comment_);
  original_release_date_.MergeFrom(from.original_release_date_);
  p_line_.MergeFrom(from.p_line_);
  parental_warning_type_.MergeFrom(from.parental_warning_type_);
  raga_.MergeFrom(from.raga_);
  related_release_.MergeFrom(from.related_release_);
  release_date_.MergeFrom(from.release_date_);
  release_label_reference_.MergeFrom(from.release_label_reference_);
  release_type_.MergeFrom(from.release_type_);
  synopsis_.MergeFrom(from.synopsis_);
  tala_.MergeFrom(from.tala_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_duration(from._internal_duration());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_hi_res_music_description(from._internal_hi_res_music_description());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_language_and_script_code(from._internal_language_and_script_code());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_release_reference(from._internal_release_reference());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_release_id()->::ern411::ern::ReleaseId::MergeFrom(from._internal_release_id());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_resource_group()->::ern411::ern::ResourceGroup::MergeFrom(from._internal_resource_group());
    }
    if (cached_has_bits & 0x00000040u) {
      is_compilation_ = from.is_compilation_;
    }
    if (cached_has_bits & 0x00000080u) {
      is_hi_res_music_ = from.is_hi_res_music_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      is_multi_artist_compilation_ = from.is_multi_artist_compilation_;
    }
    if (cached_has_bits & 0x00000200u) {
      is_soundtrack_ = from.is_soundtrack_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Release::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.Release)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Release::CopyFrom(const Release& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.Release)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Release::IsInitialized() const {
  return true;
}

void Release::InternalSwap(Release* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  additional_title_.InternalSwap(&other->additional_title_);
  administrating_record_company_.InternalSwap(&other->administrating_record_company_);
  av_rating_.InternalSwap(&other->av_rating_);
  c_line_.InternalSwap(&other->c_line_);
  courtesy_line_.InternalSwap(&other->courtesy_line_);
  deity_.InternalSwap(&other->deity_);
  display_artist_.InternalSwap(&other->display_artist_);
  display_artist_name_.InternalSwap(&other->display_artist_name_);
  display_title_.InternalSwap(&other->display_title_);
  display_title_text_.InternalSwap(&other->display_title_text_);
  external_resource_link_.InternalSwap(&other->external_resource_link_);
  genre_.InternalSwap(&other->genre_);
  keywords_.InternalSwap(&other->keywords_);
  marketing_comment_.InternalSwap(&other->marketing_comment_);
  original_release_date_.InternalSwap(&other->original_release_date_);
  p_line_.InternalSwap(&other->p_line_);
  parental_warning_type_.InternalSwap(&other->parental_warning_type_);
  raga_.InternalSwap(&other->raga_);
  related_release_.InternalSwap(&other->related_release_);
  release_date_.InternalSwap(&other->release_date_);
  release_label_reference_.InternalSwap(&other->release_label_reference_);
  release_type_.InternalSwap(&other->release_type_);
  synopsis_.InternalSwap(&other->synopsis_);
  tala_.InternalSwap(&other->tala_);
  duration_.Swap(&other->duration_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  hi_res_music_description_.Swap(&other->hi_res_music_description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  language_and_script_code_.Swap(&other->language_and_script_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  release_reference_.Swap(&other->release_reference_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Release, is_soundtrack_)
      + sizeof(Release::is_soundtrack_)
      - PROTOBUF_FIELD_OFFSET(Release, release_id_)>(
          reinterpret_cast<char*>(&release_id_),
          reinterpret_cast<char*>(&other->release_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Release::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReleaseDeal::InitAsDefaultInstance() {
}
class ReleaseDeal::_Internal {
 public:
};

ReleaseDeal::ReleaseDeal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  deal_(arena),
  deal_release_reference_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.ReleaseDeal)
}
ReleaseDeal::ReleaseDeal(const ReleaseDeal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      deal_(from.deal_),
      deal_release_reference_(from.deal_release_reference_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ern411.ern.ReleaseDeal)
}

void ReleaseDeal::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReleaseDeal_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
}

ReleaseDeal::~ReleaseDeal() {
  // @@protoc_insertion_point(destructor:ern411.ern.ReleaseDeal)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReleaseDeal::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ReleaseDeal::ArenaDtor(void* object) {
  ReleaseDeal* _this = reinterpret_cast< ReleaseDeal* >(object);
  (void)_this;
}
void ReleaseDeal::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReleaseDeal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReleaseDeal& ReleaseDeal::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReleaseDeal_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void ReleaseDeal::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.ReleaseDeal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  deal_.Clear();
  deal_release_reference_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReleaseDeal::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ern411.ern.Deal deal = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_deal(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string deal_release_reference = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_deal_release_reference();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.ReleaseDeal.deal_release_reference");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReleaseDeal::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.ReleaseDeal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ern411.ern.Deal deal = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_deal_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_deal(i), target, stream);
  }

  // repeated string deal_release_reference = 2;
  for (int i = 0, n = this->_internal_deal_release_reference_size(); i < n; i++) {
    const auto& s = this->_internal_deal_release_reference(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.ReleaseDeal.deal_release_reference");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.ReleaseDeal)
  return target;
}

size_t ReleaseDeal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.ReleaseDeal)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ern411.ern.Deal deal = 1;
  total_size += 1UL * this->_internal_deal_size();
  for (const auto& msg : this->deal_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string deal_release_reference = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(deal_release_reference_.size());
  for (int i = 0, n = deal_release_reference_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      deal_release_reference_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReleaseDeal::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.ReleaseDeal)
  GOOGLE_DCHECK_NE(&from, this);
  const ReleaseDeal* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReleaseDeal>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.ReleaseDeal)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.ReleaseDeal)
    MergeFrom(*source);
  }
}

void ReleaseDeal::MergeFrom(const ReleaseDeal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.ReleaseDeal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  deal_.MergeFrom(from.deal_);
  deal_release_reference_.MergeFrom(from.deal_release_reference_);
}

void ReleaseDeal::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.ReleaseDeal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReleaseDeal::CopyFrom(const ReleaseDeal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.ReleaseDeal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReleaseDeal::IsInitialized() const {
  return true;
}

void ReleaseDeal::InternalSwap(ReleaseDeal* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  deal_.InternalSwap(&other->deal_);
  deal_release_reference_.InternalSwap(&other->deal_release_reference_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReleaseDeal::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReleaseId::InitAsDefaultInstance() {
  ::ern411::ern::_ReleaseId_default_instance_._instance.get_mutable()->catalog_number_ = const_cast< ::ern411::ern::CatalogNumber*>(
      ::ern411::ern::CatalogNumber::internal_default_instance());
}
class ReleaseId::_Internal {
 public:
  using HasBits = decltype(std::declval<ReleaseId>()._has_bits_);
  static const ::ern411::ern::CatalogNumber& catalog_number(const ReleaseId* msg);
  static void set_has_catalog_number(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_g_rid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_i_c_p_n(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_i_s_r_c(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::ern411::ern::CatalogNumber&
ReleaseId::_Internal::catalog_number(const ReleaseId* msg) {
  return *msg->catalog_number_;
}
ReleaseId::ReleaseId(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  proprietary_id_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.ReleaseId)
}
ReleaseId::ReleaseId(const ReleaseId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      proprietary_id_(from.proprietary_id_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  g_rid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_g_rid()) {
    g_rid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_g_rid(),
      GetArena());
  }
  i_c_p_n_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_i_c_p_n()) {
    i_c_p_n_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_i_c_p_n(),
      GetArena());
  }
  i_s_r_c_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_i_s_r_c()) {
    i_s_r_c_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_i_s_r_c(),
      GetArena());
  }
  if (from._internal_has_catalog_number()) {
    catalog_number_ = new ::ern411::ern::CatalogNumber(*from.catalog_number_);
  } else {
    catalog_number_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ern411.ern.ReleaseId)
}

void ReleaseId::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReleaseId_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  g_rid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  i_c_p_n_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  i_s_r_c_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  catalog_number_ = nullptr;
}

ReleaseId::~ReleaseId() {
  // @@protoc_insertion_point(destructor:ern411.ern.ReleaseId)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReleaseId::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  g_rid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  i_c_p_n_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  i_s_r_c_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete catalog_number_;
}

void ReleaseId::ArenaDtor(void* object) {
  ReleaseId* _this = reinterpret_cast< ReleaseId* >(object);
  (void)_this;
}
void ReleaseId::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReleaseId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReleaseId& ReleaseId::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReleaseId_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void ReleaseId::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.ReleaseId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  proprietary_id_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      g_rid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      i_c_p_n_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      i_s_r_c_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(catalog_number_ != nullptr);
      catalog_number_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReleaseId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ern411.ern.CatalogNumber catalog_number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_catalog_number(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string g_rid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_g_rid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.ReleaseId.g_rid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string i_c_p_n = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_i_c_p_n();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.ReleaseId.i_c_p_n");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string i_s_r_c = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_i_s_r_c();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.ReleaseId.i_s_r_c");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.ProprietaryId proprietary_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_proprietary_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReleaseId::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.ReleaseId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ern411.ern.CatalogNumber catalog_number = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::catalog_number(this), target, stream);
  }

  // optional string g_rid = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_g_rid().data(), static_cast<int>(this->_internal_g_rid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.ReleaseId.g_rid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_g_rid(), target);
  }

  // optional string i_c_p_n = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_i_c_p_n().data(), static_cast<int>(this->_internal_i_c_p_n().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.ReleaseId.i_c_p_n");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_i_c_p_n(), target);
  }

  // optional string i_s_r_c = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_i_s_r_c().data(), static_cast<int>(this->_internal_i_s_r_c().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.ReleaseId.i_s_r_c");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_i_s_r_c(), target);
  }

  // repeated .ern411.ern.ProprietaryId proprietary_id = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_proprietary_id_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_proprietary_id(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.ReleaseId)
  return target;
}

size_t ReleaseId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.ReleaseId)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ern411.ern.ProprietaryId proprietary_id = 5;
  total_size += 1UL * this->_internal_proprietary_id_size();
  for (const auto& msg : this->proprietary_id_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string g_rid = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_g_rid());
    }

    // optional string i_c_p_n = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_i_c_p_n());
    }

    // optional string i_s_r_c = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_i_s_r_c());
    }

    // optional .ern411.ern.CatalogNumber catalog_number = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *catalog_number_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReleaseId::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.ReleaseId)
  GOOGLE_DCHECK_NE(&from, this);
  const ReleaseId* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReleaseId>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.ReleaseId)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.ReleaseId)
    MergeFrom(*source);
  }
}

void ReleaseId::MergeFrom(const ReleaseId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.ReleaseId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  proprietary_id_.MergeFrom(from.proprietary_id_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_g_rid(from._internal_g_rid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_i_c_p_n(from._internal_i_c_p_n());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_i_s_r_c(from._internal_i_s_r_c());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_catalog_number()->::ern411::ern::CatalogNumber::MergeFrom(from._internal_catalog_number());
    }
  }
}

void ReleaseId::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.ReleaseId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReleaseId::CopyFrom(const ReleaseId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.ReleaseId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReleaseId::IsInitialized() const {
  return true;
}

void ReleaseId::InternalSwap(ReleaseId* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  proprietary_id_.InternalSwap(&other->proprietary_id_);
  g_rid_.Swap(&other->g_rid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  i_c_p_n_.Swap(&other->i_c_p_n_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  i_s_r_c_.Swap(&other->i_s_r_c_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(catalog_number_, other->catalog_number_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReleaseId::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReleaseLabelReference::InitAsDefaultInstance() {
  ::ern411::ern::_ReleaseLabelReference_default_instance_._instance.get_mutable()->applicable_territory_code_ = const_cast< ::ern411::avs::CurrentTerritoryCode*>(
      ::ern411::avs::CurrentTerritoryCode::internal_default_instance());
  ::ern411::ern::_ReleaseLabelReference_default_instance_._instance.get_mutable()->label_type_ = const_cast< ::ern411::avs::LabelType*>(
      ::ern411::avs::LabelType::internal_default_instance());
  ::ern411::ern::_ReleaseLabelReference_default_instance_._instance.get_mutable()->ext_value_ = const_cast< ::ern411::ern::ddex_LocalPartyAnchorReference*>(
      ::ern411::ern::ddex_LocalPartyAnchorReference::internal_default_instance());
}
class ReleaseLabelReference::_Internal {
 public:
  using HasBits = decltype(std::declval<ReleaseLabelReference>()._has_bits_);
  static const ::ern411::avs::CurrentTerritoryCode& applicable_territory_code(const ReleaseLabelReference* msg);
  static void set_has_applicable_territory_code(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_is_default(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::ern411::avs::LabelType& label_type(const ReleaseLabelReference* msg);
  static void set_has_label_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_language_and_script_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_namespace_(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_user_defined_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::ern411::ern::ddex_LocalPartyAnchorReference& ext_value(const ReleaseLabelReference* msg);
  static void set_has_ext_value(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::ern411::avs::CurrentTerritoryCode&
ReleaseLabelReference::_Internal::applicable_territory_code(const ReleaseLabelReference* msg) {
  return *msg->applicable_territory_code_;
}
const ::ern411::avs::LabelType&
ReleaseLabelReference::_Internal::label_type(const ReleaseLabelReference* msg) {
  return *msg->label_type_;
}
const ::ern411::ern::ddex_LocalPartyAnchorReference&
ReleaseLabelReference::_Internal::ext_value(const ReleaseLabelReference* msg) {
  return *msg->ext_value_;
}
void ReleaseLabelReference::clear_applicable_territory_code() {
  if (applicable_territory_code_ != nullptr) applicable_territory_code_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void ReleaseLabelReference::clear_label_type() {
  if (label_type_ != nullptr) label_type_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
ReleaseLabelReference::ReleaseLabelReference(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.ReleaseLabelReference)
}
ReleaseLabelReference::ReleaseLabelReference(const ReleaseLabelReference& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  language_and_script_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_language_and_script_code()) {
    language_and_script_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_language_and_script_code(),
      GetArena());
  }
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_namespace_()) {
    namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_namespace_(),
      GetArena());
  }
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_user_defined_value()) {
    user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_defined_value(),
      GetArena());
  }
  if (from._internal_has_applicable_territory_code()) {
    applicable_territory_code_ = new ::ern411::avs::CurrentTerritoryCode(*from.applicable_territory_code_);
  } else {
    applicable_territory_code_ = nullptr;
  }
  if (from._internal_has_label_type()) {
    label_type_ = new ::ern411::avs::LabelType(*from.label_type_);
  } else {
    label_type_ = nullptr;
  }
  if (from._internal_has_ext_value()) {
    ext_value_ = new ::ern411::ern::ddex_LocalPartyAnchorReference(*from.ext_value_);
  } else {
    ext_value_ = nullptr;
  }
  is_default_ = from.is_default_;
  // @@protoc_insertion_point(copy_constructor:ern411.ern.ReleaseLabelReference)
}

void ReleaseLabelReference::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReleaseLabelReference_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  language_and_script_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&applicable_territory_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_default_) -
      reinterpret_cast<char*>(&applicable_territory_code_)) + sizeof(is_default_));
}

ReleaseLabelReference::~ReleaseLabelReference() {
  // @@protoc_insertion_point(destructor:ern411.ern.ReleaseLabelReference)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReleaseLabelReference::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  language_and_script_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  namespace__.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete applicable_territory_code_;
  if (this != internal_default_instance()) delete label_type_;
  if (this != internal_default_instance()) delete ext_value_;
}

void ReleaseLabelReference::ArenaDtor(void* object) {
  ReleaseLabelReference* _this = reinterpret_cast< ReleaseLabelReference* >(object);
  (void)_this;
}
void ReleaseLabelReference::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReleaseLabelReference::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReleaseLabelReference& ReleaseLabelReference::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReleaseLabelReference_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void ReleaseLabelReference::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.ReleaseLabelReference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      language_and_script_code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      namespace__.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      user_defined_value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(applicable_territory_code_ != nullptr);
      applicable_territory_code_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(label_type_ != nullptr);
      label_type_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(ext_value_ != nullptr);
      ext_value_->Clear();
    }
  }
  is_default_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReleaseLabelReference::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ern411.avs.CurrentTerritoryCode applicable_territory_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_applicable_territory_code(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_default = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_is_default(&has_bits);
          is_default_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.avs.LabelType label_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_label_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string language_and_script_code = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_language_and_script_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.ReleaseLabelReference.language_and_script_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string namespace = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_namespace_();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.ReleaseLabelReference.namespace");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string user_defined_value = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_user_defined_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.ReleaseLabelReference.user_defined_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.ern.ddex_LocalPartyAnchorReference ext_value = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReleaseLabelReference::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.ReleaseLabelReference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ern411.avs.CurrentTerritoryCode applicable_territory_code = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::applicable_territory_code(this), target, stream);
  }

  // optional bool is_default = 2;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_default(), target);
  }

  // optional .ern411.avs.LabelType label_type = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::label_type(this), target, stream);
  }

  // optional string language_and_script_code = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_language_and_script_code().data(), static_cast<int>(this->_internal_language_and_script_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.ReleaseLabelReference.language_and_script_code");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_language_and_script_code(), target);
  }

  // optional string namespace = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_namespace_().data(), static_cast<int>(this->_internal_namespace_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.ReleaseLabelReference.namespace");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_namespace_(), target);
  }

  // optional string user_defined_value = 6;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_user_defined_value().data(), static_cast<int>(this->_internal_user_defined_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.ReleaseLabelReference.user_defined_value");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_user_defined_value(), target);
  }

  // optional .ern411.ern.ddex_LocalPartyAnchorReference ext_value = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::ext_value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.ReleaseLabelReference)
  return target;
}

size_t ReleaseLabelReference::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.ReleaseLabelReference)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string language_and_script_code = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_language_and_script_code());
    }

    // optional string namespace = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_namespace_());
    }

    // optional string user_defined_value = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_defined_value());
    }

    // optional .ern411.avs.CurrentTerritoryCode applicable_territory_code = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *applicable_territory_code_);
    }

    // optional .ern411.avs.LabelType label_type = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *label_type_);
    }

    // optional .ern411.ern.ddex_LocalPartyAnchorReference ext_value = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ext_value_);
    }

    // optional bool is_default = 2;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReleaseLabelReference::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.ReleaseLabelReference)
  GOOGLE_DCHECK_NE(&from, this);
  const ReleaseLabelReference* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReleaseLabelReference>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.ReleaseLabelReference)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.ReleaseLabelReference)
    MergeFrom(*source);
  }
}

void ReleaseLabelReference::MergeFrom(const ReleaseLabelReference& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.ReleaseLabelReference)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_language_and_script_code(from._internal_language_and_script_code());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_namespace_(from._internal_namespace_());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_user_defined_value(from._internal_user_defined_value());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_applicable_territory_code()->::ern411::avs::CurrentTerritoryCode::MergeFrom(from._internal_applicable_territory_code());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_label_type()->::ern411::avs::LabelType::MergeFrom(from._internal_label_type());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_ext_value()->::ern411::ern::ddex_LocalPartyAnchorReference::MergeFrom(from._internal_ext_value());
    }
    if (cached_has_bits & 0x00000040u) {
      is_default_ = from.is_default_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ReleaseLabelReference::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.ReleaseLabelReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReleaseLabelReference::CopyFrom(const ReleaseLabelReference& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.ReleaseLabelReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReleaseLabelReference::IsInitialized() const {
  return true;
}

void ReleaseLabelReference::InternalSwap(ReleaseLabelReference* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  language_and_script_code_.Swap(&other->language_and_script_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  namespace__.Swap(&other->namespace__, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_defined_value_.Swap(&other->user_defined_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReleaseLabelReference, is_default_)
      + sizeof(ReleaseLabelReference::is_default_)
      - PROTOBUF_FIELD_OFFSET(ReleaseLabelReference, applicable_territory_code_)>(
          reinterpret_cast<char*>(&applicable_territory_code_),
          reinterpret_cast<char*>(&other->applicable_territory_code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReleaseLabelReference::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReleaseList::InitAsDefaultInstance() {
  ::ern411::ern::_ReleaseList_default_instance_._instance.get_mutable()->release_ = const_cast< ::ern411::ern::Release*>(
      ::ern411::ern::Release::internal_default_instance());
}
class ReleaseList::_Internal {
 public:
  using HasBits = decltype(std::declval<ReleaseList>()._has_bits_);
  static const ::ern411::ern::Release& release(const ReleaseList* msg);
  static void set_has_release(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::ern411::ern::Release&
ReleaseList::_Internal::release(const ReleaseList* msg) {
  return *msg->release_;
}
ReleaseList::ReleaseList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  track_release_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.ReleaseList)
}
ReleaseList::ReleaseList(const ReleaseList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      track_release_(from.track_release_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_release()) {
    release_ = new ::ern411::ern::Release(*from.release_);
  } else {
    release_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ern411.ern.ReleaseList)
}

void ReleaseList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReleaseList_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  release_ = nullptr;
}

ReleaseList::~ReleaseList() {
  // @@protoc_insertion_point(destructor:ern411.ern.ReleaseList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReleaseList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete release_;
}

void ReleaseList::ArenaDtor(void* object) {
  ReleaseList* _this = reinterpret_cast< ReleaseList* >(object);
  (void)_this;
}
void ReleaseList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReleaseList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReleaseList& ReleaseList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReleaseList_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void ReleaseList::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.ReleaseList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  track_release_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(release_ != nullptr);
    release_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReleaseList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ern411.ern.Release release = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_release(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.TrackRelease track_release = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_track_release(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReleaseList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.ReleaseList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ern411.ern.Release release = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::release(this), target, stream);
  }

  // repeated .ern411.ern.TrackRelease track_release = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_track_release_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_track_release(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.ReleaseList)
  return target;
}

size_t ReleaseList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.ReleaseList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ern411.ern.TrackRelease track_release = 2;
  total_size += 1UL * this->_internal_track_release_size();
  for (const auto& msg : this->track_release_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .ern411.ern.Release release = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *release_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReleaseList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.ReleaseList)
  GOOGLE_DCHECK_NE(&from, this);
  const ReleaseList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReleaseList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.ReleaseList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.ReleaseList)
    MergeFrom(*source);
  }
}

void ReleaseList::MergeFrom(const ReleaseList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.ReleaseList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  track_release_.MergeFrom(from.track_release_);
  if (from._internal_has_release()) {
    _internal_mutable_release()->::ern411::ern::Release::MergeFrom(from._internal_release());
  }
}

void ReleaseList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.ReleaseList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReleaseList::CopyFrom(const ReleaseList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.ReleaseList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReleaseList::IsInitialized() const {
  return true;
}

void ReleaseList::InternalSwap(ReleaseList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  track_release_.InternalSwap(&other->track_release_);
  swap(release_, other->release_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReleaseList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReleaseRelationshipType::InitAsDefaultInstance() {
  ::ern411::ern::_ReleaseRelationshipType_default_instance_._instance.get_mutable()->ext_value_ = const_cast< ::ern411::avs::ReleaseRelationshipType*>(
      ::ern411::avs::ReleaseRelationshipType::internal_default_instance());
}
class ReleaseRelationshipType::_Internal {
 public:
  using HasBits = decltype(std::declval<ReleaseRelationshipType>()._has_bits_);
  static void set_has_namespace_(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_user_defined_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::ern411::avs::ReleaseRelationshipType& ext_value(const ReleaseRelationshipType* msg);
  static void set_has_ext_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::ern411::avs::ReleaseRelationshipType&
ReleaseRelationshipType::_Internal::ext_value(const ReleaseRelationshipType* msg) {
  return *msg->ext_value_;
}
void ReleaseRelationshipType::clear_ext_value() {
  if (ext_value_ != nullptr) ext_value_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
ReleaseRelationshipType::ReleaseRelationshipType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.ReleaseRelationshipType)
}
ReleaseRelationshipType::ReleaseRelationshipType(const ReleaseRelationshipType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_namespace_()) {
    namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_namespace_(),
      GetArena());
  }
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_user_defined_value()) {
    user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_defined_value(),
      GetArena());
  }
  if (from._internal_has_ext_value()) {
    ext_value_ = new ::ern411::avs::ReleaseRelationshipType(*from.ext_value_);
  } else {
    ext_value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ern411.ern.ReleaseRelationshipType)
}

void ReleaseRelationshipType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReleaseRelationshipType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ext_value_ = nullptr;
}

ReleaseRelationshipType::~ReleaseRelationshipType() {
  // @@protoc_insertion_point(destructor:ern411.ern.ReleaseRelationshipType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReleaseRelationshipType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  namespace__.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ext_value_;
}

void ReleaseRelationshipType::ArenaDtor(void* object) {
  ReleaseRelationshipType* _this = reinterpret_cast< ReleaseRelationshipType* >(object);
  (void)_this;
}
void ReleaseRelationshipType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReleaseRelationshipType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReleaseRelationshipType& ReleaseRelationshipType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReleaseRelationshipType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void ReleaseRelationshipType::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.ReleaseRelationshipType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      namespace__.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      user_defined_value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(ext_value_ != nullptr);
      ext_value_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReleaseRelationshipType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string namespace = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_namespace_();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.ReleaseRelationshipType.namespace");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string user_defined_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_user_defined_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.ReleaseRelationshipType.user_defined_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.avs.ReleaseRelationshipType ext_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReleaseRelationshipType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.ReleaseRelationshipType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string namespace = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_namespace_().data(), static_cast<int>(this->_internal_namespace_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.ReleaseRelationshipType.namespace");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_namespace_(), target);
  }

  // optional string user_defined_value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_user_defined_value().data(), static_cast<int>(this->_internal_user_defined_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.ReleaseRelationshipType.user_defined_value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_defined_value(), target);
  }

  // optional .ern411.avs.ReleaseRelationshipType ext_value = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::ext_value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.ReleaseRelationshipType)
  return target;
}

size_t ReleaseRelationshipType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.ReleaseRelationshipType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string namespace = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_namespace_());
    }

    // optional string user_defined_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_defined_value());
    }

    // optional .ern411.avs.ReleaseRelationshipType ext_value = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ext_value_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReleaseRelationshipType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.ReleaseRelationshipType)
  GOOGLE_DCHECK_NE(&from, this);
  const ReleaseRelationshipType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReleaseRelationshipType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.ReleaseRelationshipType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.ReleaseRelationshipType)
    MergeFrom(*source);
  }
}

void ReleaseRelationshipType::MergeFrom(const ReleaseRelationshipType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.ReleaseRelationshipType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_namespace_(from._internal_namespace_());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_user_defined_value(from._internal_user_defined_value());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_ext_value()->::ern411::avs::ReleaseRelationshipType::MergeFrom(from._internal_ext_value());
    }
  }
}

void ReleaseRelationshipType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.ReleaseRelationshipType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReleaseRelationshipType::CopyFrom(const ReleaseRelationshipType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.ReleaseRelationshipType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReleaseRelationshipType::IsInitialized() const {
  return true;
}

void ReleaseRelationshipType::InternalSwap(ReleaseRelationshipType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  namespace__.Swap(&other->namespace__, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_defined_value_.Swap(&other->user_defined_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(ext_value_, other->ext_value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReleaseRelationshipType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReleaseTypeForReleaseNotification::InitAsDefaultInstance() {
  ::ern411::ern::_ReleaseTypeForReleaseNotification_default_instance_._instance.get_mutable()->ext_value_ = const_cast< ::ern411::avs::ReleaseType_ERN4*>(
      ::ern411::avs::ReleaseType_ERN4::internal_default_instance());
}
class ReleaseTypeForReleaseNotification::_Internal {
 public:
  using HasBits = decltype(std::declval<ReleaseTypeForReleaseNotification>()._has_bits_);
  static void set_has_namespace_(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_user_defined_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::ern411::avs::ReleaseType_ERN4& ext_value(const ReleaseTypeForReleaseNotification* msg);
  static void set_has_ext_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::ern411::avs::ReleaseType_ERN4&
ReleaseTypeForReleaseNotification::_Internal::ext_value(const ReleaseTypeForReleaseNotification* msg) {
  return *msg->ext_value_;
}
void ReleaseTypeForReleaseNotification::clear_ext_value() {
  if (ext_value_ != nullptr) ext_value_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
ReleaseTypeForReleaseNotification::ReleaseTypeForReleaseNotification(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.ReleaseTypeForReleaseNotification)
}
ReleaseTypeForReleaseNotification::ReleaseTypeForReleaseNotification(const ReleaseTypeForReleaseNotification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_namespace_()) {
    namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_namespace_(),
      GetArena());
  }
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_user_defined_value()) {
    user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_defined_value(),
      GetArena());
  }
  if (from._internal_has_ext_value()) {
    ext_value_ = new ::ern411::avs::ReleaseType_ERN4(*from.ext_value_);
  } else {
    ext_value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ern411.ern.ReleaseTypeForReleaseNotification)
}

void ReleaseTypeForReleaseNotification::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReleaseTypeForReleaseNotification_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ext_value_ = nullptr;
}

ReleaseTypeForReleaseNotification::~ReleaseTypeForReleaseNotification() {
  // @@protoc_insertion_point(destructor:ern411.ern.ReleaseTypeForReleaseNotification)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReleaseTypeForReleaseNotification::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  namespace__.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ext_value_;
}

void ReleaseTypeForReleaseNotification::ArenaDtor(void* object) {
  ReleaseTypeForReleaseNotification* _this = reinterpret_cast< ReleaseTypeForReleaseNotification* >(object);
  (void)_this;
}
void ReleaseTypeForReleaseNotification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReleaseTypeForReleaseNotification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReleaseTypeForReleaseNotification& ReleaseTypeForReleaseNotification::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReleaseTypeForReleaseNotification_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void ReleaseTypeForReleaseNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.ReleaseTypeForReleaseNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      namespace__.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      user_defined_value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(ext_value_ != nullptr);
      ext_value_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReleaseTypeForReleaseNotification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string namespace = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_namespace_();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.ReleaseTypeForReleaseNotification.namespace");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string user_defined_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_user_defined_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.ReleaseTypeForReleaseNotification.user_defined_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.avs.ReleaseType_ERN4 ext_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReleaseTypeForReleaseNotification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.ReleaseTypeForReleaseNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string namespace = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_namespace_().data(), static_cast<int>(this->_internal_namespace_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.ReleaseTypeForReleaseNotification.namespace");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_namespace_(), target);
  }

  // optional string user_defined_value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_user_defined_value().data(), static_cast<int>(this->_internal_user_defined_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.ReleaseTypeForReleaseNotification.user_defined_value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_defined_value(), target);
  }

  // optional .ern411.avs.ReleaseType_ERN4 ext_value = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::ext_value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.ReleaseTypeForReleaseNotification)
  return target;
}

size_t ReleaseTypeForReleaseNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.ReleaseTypeForReleaseNotification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string namespace = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_namespace_());
    }

    // optional string user_defined_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_defined_value());
    }

    // optional .ern411.avs.ReleaseType_ERN4 ext_value = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ext_value_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReleaseTypeForReleaseNotification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.ReleaseTypeForReleaseNotification)
  GOOGLE_DCHECK_NE(&from, this);
  const ReleaseTypeForReleaseNotification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReleaseTypeForReleaseNotification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.ReleaseTypeForReleaseNotification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.ReleaseTypeForReleaseNotification)
    MergeFrom(*source);
  }
}

void ReleaseTypeForReleaseNotification::MergeFrom(const ReleaseTypeForReleaseNotification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.ReleaseTypeForReleaseNotification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_namespace_(from._internal_namespace_());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_user_defined_value(from._internal_user_defined_value());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_ext_value()->::ern411::avs::ReleaseType_ERN4::MergeFrom(from._internal_ext_value());
    }
  }
}

void ReleaseTypeForReleaseNotification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.ReleaseTypeForReleaseNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReleaseTypeForReleaseNotification::CopyFrom(const ReleaseTypeForReleaseNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.ReleaseTypeForReleaseNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReleaseTypeForReleaseNotification::IsInitialized() const {
  return true;
}

void ReleaseTypeForReleaseNotification::InternalSwap(ReleaseTypeForReleaseNotification* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  namespace__.Swap(&other->namespace__, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_defined_value_.Swap(&other->user_defined_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(ext_value_, other->ext_value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReleaseTypeForReleaseNotification::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResourceContainedResourceReference::InitAsDefaultInstance() {
  ::ern411::ern::_ResourceContainedResourceReference_default_instance_._instance.get_mutable()->purpose_ = const_cast< ::ern411::ern::Purpose*>(
      ::ern411::ern::Purpose::internal_default_instance());
}
class ResourceContainedResourceReference::_Internal {
 public:
  using HasBits = decltype(std::declval<ResourceContainedResourceReference>()._has_bits_);
  static void set_has_duration_used(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ern411::ern::Purpose& purpose(const ResourceContainedResourceReference* msg);
  static void set_has_purpose(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_resource_contained_resource_reference(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_start_point(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::ern411::ern::Purpose&
ResourceContainedResourceReference::_Internal::purpose(const ResourceContainedResourceReference* msg) {
  return *msg->purpose_;
}
ResourceContainedResourceReference::ResourceContainedResourceReference(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.ResourceContainedResourceReference)
}
ResourceContainedResourceReference::ResourceContainedResourceReference(const ResourceContainedResourceReference& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  duration_used_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_duration_used()) {
    duration_used_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_duration_used(),
      GetArena());
  }
  resource_contained_resource_reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_resource_contained_resource_reference()) {
    resource_contained_resource_reference_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_resource_contained_resource_reference(),
      GetArena());
  }
  if (from._internal_has_purpose()) {
    purpose_ = new ::ern411::ern::Purpose(*from.purpose_);
  } else {
    purpose_ = nullptr;
  }
  start_point_ = from.start_point_;
  // @@protoc_insertion_point(copy_constructor:ern411.ern.ResourceContainedResourceReference)
}

void ResourceContainedResourceReference::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ResourceContainedResourceReference_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  duration_used_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resource_contained_resource_reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&purpose_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&start_point_) -
      reinterpret_cast<char*>(&purpose_)) + sizeof(start_point_));
}

ResourceContainedResourceReference::~ResourceContainedResourceReference() {
  // @@protoc_insertion_point(destructor:ern411.ern.ResourceContainedResourceReference)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ResourceContainedResourceReference::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  duration_used_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resource_contained_resource_reference_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete purpose_;
}

void ResourceContainedResourceReference::ArenaDtor(void* object) {
  ResourceContainedResourceReference* _this = reinterpret_cast< ResourceContainedResourceReference* >(object);
  (void)_this;
}
void ResourceContainedResourceReference::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResourceContainedResourceReference::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResourceContainedResourceReference& ResourceContainedResourceReference::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResourceContainedResourceReference_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void ResourceContainedResourceReference::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.ResourceContainedResourceReference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      duration_used_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      resource_contained_resource_reference_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(purpose_ != nullptr);
      purpose_->Clear();
    }
  }
  start_point_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResourceContainedResourceReference::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string duration_used = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_duration_used();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.ResourceContainedResourceReference.duration_used");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.ern.Purpose purpose = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_purpose(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string resource_contained_resource_reference = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_resource_contained_resource_reference();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.ResourceContainedResourceReference.resource_contained_resource_reference");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double start_point = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_start_point(&has_bits);
          start_point_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResourceContainedResourceReference::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.ResourceContainedResourceReference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string duration_used = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_duration_used().data(), static_cast<int>(this->_internal_duration_used().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.ResourceContainedResourceReference.duration_used");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_duration_used(), target);
  }

  // optional .ern411.ern.Purpose purpose = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::purpose(this), target, stream);
  }

  // optional string resource_contained_resource_reference = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_resource_contained_resource_reference().data(), static_cast<int>(this->_internal_resource_contained_resource_reference().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.ResourceContainedResourceReference.resource_contained_resource_reference");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_resource_contained_resource_reference(), target);
  }

  // optional double start_point = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_start_point(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.ResourceContainedResourceReference)
  return target;
}

size_t ResourceContainedResourceReference::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.ResourceContainedResourceReference)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string duration_used = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_duration_used());
    }

    // optional string resource_contained_resource_reference = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_resource_contained_resource_reference());
    }

    // optional .ern411.ern.Purpose purpose = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *purpose_);
    }

    // optional double start_point = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResourceContainedResourceReference::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.ResourceContainedResourceReference)
  GOOGLE_DCHECK_NE(&from, this);
  const ResourceContainedResourceReference* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResourceContainedResourceReference>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.ResourceContainedResourceReference)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.ResourceContainedResourceReference)
    MergeFrom(*source);
  }
}

void ResourceContainedResourceReference::MergeFrom(const ResourceContainedResourceReference& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.ResourceContainedResourceReference)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_duration_used(from._internal_duration_used());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_resource_contained_resource_reference(from._internal_resource_contained_resource_reference());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_purpose()->::ern411::ern::Purpose::MergeFrom(from._internal_purpose());
    }
    if (cached_has_bits & 0x00000008u) {
      start_point_ = from.start_point_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ResourceContainedResourceReference::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.ResourceContainedResourceReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResourceContainedResourceReference::CopyFrom(const ResourceContainedResourceReference& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.ResourceContainedResourceReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourceContainedResourceReference::IsInitialized() const {
  return true;
}

void ResourceContainedResourceReference::InternalSwap(ResourceContainedResourceReference* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  duration_used_.Swap(&other->duration_used_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  resource_contained_resource_reference_.Swap(&other->resource_contained_resource_reference_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResourceContainedResourceReference, start_point_)
      + sizeof(ResourceContainedResourceReference::start_point_)
      - PROTOBUF_FIELD_OFFSET(ResourceContainedResourceReference, purpose_)>(
          reinterpret_cast<char*>(&purpose_),
          reinterpret_cast<char*>(&other->purpose_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResourceContainedResourceReference::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResourceContainedResourceReferenceList::InitAsDefaultInstance() {
}
class ResourceContainedResourceReferenceList::_Internal {
 public:
};

ResourceContainedResourceReferenceList::ResourceContainedResourceReferenceList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  resource_contained_resource_reference_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.ResourceContainedResourceReferenceList)
}
ResourceContainedResourceReferenceList::ResourceContainedResourceReferenceList(const ResourceContainedResourceReferenceList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      resource_contained_resource_reference_(from.resource_contained_resource_reference_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ern411.ern.ResourceContainedResourceReferenceList)
}

void ResourceContainedResourceReferenceList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ResourceContainedResourceReferenceList_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
}

ResourceContainedResourceReferenceList::~ResourceContainedResourceReferenceList() {
  // @@protoc_insertion_point(destructor:ern411.ern.ResourceContainedResourceReferenceList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ResourceContainedResourceReferenceList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ResourceContainedResourceReferenceList::ArenaDtor(void* object) {
  ResourceContainedResourceReferenceList* _this = reinterpret_cast< ResourceContainedResourceReferenceList* >(object);
  (void)_this;
}
void ResourceContainedResourceReferenceList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResourceContainedResourceReferenceList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResourceContainedResourceReferenceList& ResourceContainedResourceReferenceList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResourceContainedResourceReferenceList_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void ResourceContainedResourceReferenceList::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.ResourceContainedResourceReferenceList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  resource_contained_resource_reference_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResourceContainedResourceReferenceList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ern411.ern.ResourceContainedResourceReference resource_contained_resource_reference = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_resource_contained_resource_reference(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResourceContainedResourceReferenceList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.ResourceContainedResourceReferenceList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ern411.ern.ResourceContainedResourceReference resource_contained_resource_reference = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_resource_contained_resource_reference_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_resource_contained_resource_reference(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.ResourceContainedResourceReferenceList)
  return target;
}

size_t ResourceContainedResourceReferenceList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.ResourceContainedResourceReferenceList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ern411.ern.ResourceContainedResourceReference resource_contained_resource_reference = 1;
  total_size += 1UL * this->_internal_resource_contained_resource_reference_size();
  for (const auto& msg : this->resource_contained_resource_reference_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResourceContainedResourceReferenceList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.ResourceContainedResourceReferenceList)
  GOOGLE_DCHECK_NE(&from, this);
  const ResourceContainedResourceReferenceList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResourceContainedResourceReferenceList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.ResourceContainedResourceReferenceList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.ResourceContainedResourceReferenceList)
    MergeFrom(*source);
  }
}

void ResourceContainedResourceReferenceList::MergeFrom(const ResourceContainedResourceReferenceList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.ResourceContainedResourceReferenceList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  resource_contained_resource_reference_.MergeFrom(from.resource_contained_resource_reference_);
}

void ResourceContainedResourceReferenceList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.ResourceContainedResourceReferenceList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResourceContainedResourceReferenceList::CopyFrom(const ResourceContainedResourceReferenceList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.ResourceContainedResourceReferenceList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourceContainedResourceReferenceList::IsInitialized() const {
  return true;
}

void ResourceContainedResourceReferenceList::InternalSwap(ResourceContainedResourceReferenceList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  resource_contained_resource_reference_.InternalSwap(&other->resource_contained_resource_reference_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResourceContainedResourceReferenceList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResourceGroup::InitAsDefaultInstance() {
  ::ern411::ern::_ResourceGroup_default_instance_._instance.get_mutable()->release_id_ = const_cast< ::ern411::ern::ReleaseId*>(
      ::ern411::ern::ReleaseId::internal_default_instance());
}
class ResourceGroup::_Internal {
 public:
  using HasBits = decltype(std::declval<ResourceGroup>()._has_bits_);
  static void set_has_display_sequence(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_no_display_sequence(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::ern411::ern::ReleaseId& release_id(const ResourceGroup* msg);
  static void set_has_release_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_resource_group_release_reference(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_sequence_number(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::ern411::ern::ReleaseId&
ResourceGroup::_Internal::release_id(const ResourceGroup* msg) {
  return *msg->release_id_;
}
ResourceGroup::ResourceGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  additional_title_(arena),
  carrier_type_(arena),
  display_artist_(arena),
  display_title_(arena),
  display_title_text_(arena),
  linked_release_resource_reference_(arena),
  resource_group_(arena),
  resource_group_content_item_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.ResourceGroup)
}
ResourceGroup::ResourceGroup(const ResourceGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      additional_title_(from.additional_title_),
      carrier_type_(from.carrier_type_),
      display_artist_(from.display_artist_),
      display_title_(from.display_title_),
      display_title_text_(from.display_title_text_),
      linked_release_resource_reference_(from.linked_release_resource_reference_),
      resource_group_(from.resource_group_),
      resource_group_content_item_(from.resource_group_content_item_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  display_sequence_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_display_sequence()) {
    display_sequence_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_display_sequence(),
      GetArena());
  }
  duration_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_duration()) {
    duration_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_duration(),
      GetArena());
  }
  resource_group_release_reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_resource_group_release_reference()) {
    resource_group_release_reference_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_resource_group_release_reference(),
      GetArena());
  }
  if (from._internal_has_release_id()) {
    release_id_ = new ::ern411::ern::ReleaseId(*from.release_id_);
  } else {
    release_id_ = nullptr;
  }
  ::memcpy(&no_display_sequence_, &from.no_display_sequence_,
    static_cast<size_t>(reinterpret_cast<char*>(&sequence_number_) -
    reinterpret_cast<char*>(&no_display_sequence_)) + sizeof(sequence_number_));
  // @@protoc_insertion_point(copy_constructor:ern411.ern.ResourceGroup)
}

void ResourceGroup::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ResourceGroup_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  display_sequence_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  duration_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resource_group_release_reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&release_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sequence_number_) -
      reinterpret_cast<char*>(&release_id_)) + sizeof(sequence_number_));
}

ResourceGroup::~ResourceGroup() {
  // @@protoc_insertion_point(destructor:ern411.ern.ResourceGroup)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ResourceGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  display_sequence_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  duration_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resource_group_release_reference_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete release_id_;
}

void ResourceGroup::ArenaDtor(void* object) {
  ResourceGroup* _this = reinterpret_cast< ResourceGroup* >(object);
  (void)_this;
}
void ResourceGroup::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResourceGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResourceGroup& ResourceGroup::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResourceGroup_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void ResourceGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.ResourceGroup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  additional_title_.Clear();
  carrier_type_.Clear();
  display_artist_.Clear();
  display_title_.Clear();
  display_title_text_.Clear();
  linked_release_resource_reference_.Clear();
  resource_group_.Clear();
  resource_group_content_item_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      display_sequence_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      duration_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      resource_group_release_reference_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(release_id_ != nullptr);
      release_id_->Clear();
    }
  }
  if (cached_has_bits & 0x00000030u) {
    ::memset(&no_display_sequence_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sequence_number_) -
        reinterpret_cast<char*>(&no_display_sequence_)) + sizeof(sequence_number_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResourceGroup::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ern411.ern.AdditionalTitle additional_title = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_additional_title(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.CarrierType carrier_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_carrier_type(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.DisplayArtist display_artist = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_display_artist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string display_sequence = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_display_sequence();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.ResourceGroup.display_sequence");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.DisplayTitle display_title = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_display_title(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.DisplayTitleText display_title_text = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_display_title_text(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string duration = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_duration();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.ResourceGroup.duration");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.LinkedReleaseResourceReference linked_release_resource_reference = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_linked_release_resource_reference(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool no_display_sequence = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_no_display_sequence(&has_bits);
          no_display_sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.ern.ReleaseId release_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_release_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.ResourceSubGroup resource_group = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_resource_group(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.ResourceGroupContentItem resource_group_content_item = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_resource_group_content_item(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string resource_group_release_reference = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_resource_group_release_reference();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.ResourceGroup.resource_group_release_reference");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 sequence_number = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_sequence_number(&has_bits);
          sequence_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResourceGroup::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.ResourceGroup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ern411.ern.AdditionalTitle additional_title = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_additional_title_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_additional_title(i), target, stream);
  }

  // repeated .ern411.ern.CarrierType carrier_type = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_carrier_type_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_carrier_type(i), target, stream);
  }

  // repeated .ern411.ern.DisplayArtist display_artist = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_display_artist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_display_artist(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional string display_sequence = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_display_sequence().data(), static_cast<int>(this->_internal_display_sequence().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.ResourceGroup.display_sequence");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_display_sequence(), target);
  }

  // repeated .ern411.ern.DisplayTitle display_title = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_display_title_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_display_title(i), target, stream);
  }

  // repeated .ern411.ern.DisplayTitleText display_title_text = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_display_title_text_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_display_title_text(i), target, stream);
  }

  // optional string duration = 7;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_duration().data(), static_cast<int>(this->_internal_duration().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.ResourceGroup.duration");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_duration(), target);
  }

  // repeated .ern411.ern.LinkedReleaseResourceReference linked_release_resource_reference = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_linked_release_resource_reference_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_linked_release_resource_reference(i), target, stream);
  }

  // optional bool no_display_sequence = 9;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_no_display_sequence(), target);
  }

  // optional .ern411.ern.ReleaseId release_id = 10;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::release_id(this), target, stream);
  }

  // repeated .ern411.ern.ResourceSubGroup resource_group = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_resource_group_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_resource_group(i), target, stream);
  }

  // repeated .ern411.ern.ResourceGroupContentItem resource_group_content_item = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_resource_group_content_item_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, this->_internal_resource_group_content_item(i), target, stream);
  }

  // optional string resource_group_release_reference = 13;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_resource_group_release_reference().data(), static_cast<int>(this->_internal_resource_group_release_reference().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.ResourceGroup.resource_group_release_reference");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_resource_group_release_reference(), target);
  }

  // optional int32 sequence_number = 14;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_sequence_number(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.ResourceGroup)
  return target;
}

size_t ResourceGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.ResourceGroup)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ern411.ern.AdditionalTitle additional_title = 1;
  total_size += 1UL * this->_internal_additional_title_size();
  for (const auto& msg : this->additional_title_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.CarrierType carrier_type = 2;
  total_size += 1UL * this->_internal_carrier_type_size();
  for (const auto& msg : this->carrier_type_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.DisplayArtist display_artist = 3;
  total_size += 1UL * this->_internal_display_artist_size();
  for (const auto& msg : this->display_artist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.DisplayTitle display_title = 5;
  total_size += 1UL * this->_internal_display_title_size();
  for (const auto& msg : this->display_title_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.DisplayTitleText display_title_text = 6;
  total_size += 1UL * this->_internal_display_title_text_size();
  for (const auto& msg : this->display_title_text_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.LinkedReleaseResourceReference linked_release_resource_reference = 8;
  total_size += 1UL * this->_internal_linked_release_resource_reference_size();
  for (const auto& msg : this->linked_release_resource_reference_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.ResourceSubGroup resource_group = 11;
  total_size += 1UL * this->_internal_resource_group_size();
  for (const auto& msg : this->resource_group_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.ResourceGroupContentItem resource_group_content_item = 12;
  total_size += 1UL * this->_internal_resource_group_content_item_size();
  for (const auto& msg : this->resource_group_content_item_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string display_sequence = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_display_sequence());
    }

    // optional string duration = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_duration());
    }

    // optional string resource_group_release_reference = 13;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_resource_group_release_reference());
    }

    // optional .ern411.ern.ReleaseId release_id = 10;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *release_id_);
    }

    // optional bool no_display_sequence = 9;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional int32 sequence_number = 14;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_sequence_number());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResourceGroup::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.ResourceGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const ResourceGroup* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResourceGroup>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.ResourceGroup)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.ResourceGroup)
    MergeFrom(*source);
  }
}

void ResourceGroup::MergeFrom(const ResourceGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.ResourceGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  additional_title_.MergeFrom(from.additional_title_);
  carrier_type_.MergeFrom(from.carrier_type_);
  display_artist_.MergeFrom(from.display_artist_);
  display_title_.MergeFrom(from.display_title_);
  display_title_text_.MergeFrom(from.display_title_text_);
  linked_release_resource_reference_.MergeFrom(from.linked_release_resource_reference_);
  resource_group_.MergeFrom(from.resource_group_);
  resource_group_content_item_.MergeFrom(from.resource_group_content_item_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_display_sequence(from._internal_display_sequence());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_duration(from._internal_duration());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_resource_group_release_reference(from._internal_resource_group_release_reference());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_release_id()->::ern411::ern::ReleaseId::MergeFrom(from._internal_release_id());
    }
    if (cached_has_bits & 0x00000010u) {
      no_display_sequence_ = from.no_display_sequence_;
    }
    if (cached_has_bits & 0x00000020u) {
      sequence_number_ = from.sequence_number_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ResourceGroup::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.ResourceGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResourceGroup::CopyFrom(const ResourceGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.ResourceGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourceGroup::IsInitialized() const {
  return true;
}

void ResourceGroup::InternalSwap(ResourceGroup* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  additional_title_.InternalSwap(&other->additional_title_);
  carrier_type_.InternalSwap(&other->carrier_type_);
  display_artist_.InternalSwap(&other->display_artist_);
  display_title_.InternalSwap(&other->display_title_);
  display_title_text_.InternalSwap(&other->display_title_text_);
  linked_release_resource_reference_.InternalSwap(&other->linked_release_resource_reference_);
  resource_group_.InternalSwap(&other->resource_group_);
  resource_group_content_item_.InternalSwap(&other->resource_group_content_item_);
  display_sequence_.Swap(&other->display_sequence_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  duration_.Swap(&other->duration_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  resource_group_release_reference_.Swap(&other->resource_group_release_reference_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResourceGroup, sequence_number_)
      + sizeof(ResourceGroup::sequence_number_)
      - PROTOBUF_FIELD_OFFSET(ResourceGroup, release_id_)>(
          reinterpret_cast<char*>(&release_id_),
          reinterpret_cast<char*>(&other->release_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResourceGroup::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResourceGroupContentItem::InitAsDefaultInstance() {
}
class ResourceGroupContentItem::_Internal {
 public:
  using HasBits = decltype(std::declval<ResourceGroupContentItem>()._has_bits_);
  static void set_has_display_sequence(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_bonus_resource(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_instant_gratification_resource(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_is_pre_order_incentive_resource(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_no_display_sequence(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_release_resource_reference(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_sequence_number(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

ResourceGroupContentItem::ResourceGroupContentItem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  linked_release_resource_reference_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.ResourceGroupContentItem)
}
ResourceGroupContentItem::ResourceGroupContentItem(const ResourceGroupContentItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      linked_release_resource_reference_(from.linked_release_resource_reference_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  display_sequence_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_display_sequence()) {
    display_sequence_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_display_sequence(),
      GetArena());
  }
  release_resource_reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_release_resource_reference()) {
    release_resource_reference_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_release_resource_reference(),
      GetArena());
  }
  ::memcpy(&is_bonus_resource_, &from.is_bonus_resource_,
    static_cast<size_t>(reinterpret_cast<char*>(&sequence_number_) -
    reinterpret_cast<char*>(&is_bonus_resource_)) + sizeof(sequence_number_));
  // @@protoc_insertion_point(copy_constructor:ern411.ern.ResourceGroupContentItem)
}

void ResourceGroupContentItem::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ResourceGroupContentItem_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  display_sequence_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  release_resource_reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&is_bonus_resource_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sequence_number_) -
      reinterpret_cast<char*>(&is_bonus_resource_)) + sizeof(sequence_number_));
}

ResourceGroupContentItem::~ResourceGroupContentItem() {
  // @@protoc_insertion_point(destructor:ern411.ern.ResourceGroupContentItem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ResourceGroupContentItem::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  display_sequence_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  release_resource_reference_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ResourceGroupContentItem::ArenaDtor(void* object) {
  ResourceGroupContentItem* _this = reinterpret_cast< ResourceGroupContentItem* >(object);
  (void)_this;
}
void ResourceGroupContentItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResourceGroupContentItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResourceGroupContentItem& ResourceGroupContentItem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResourceGroupContentItem_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void ResourceGroupContentItem::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.ResourceGroupContentItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  linked_release_resource_reference_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      display_sequence_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      release_resource_reference_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000007cu) {
    ::memset(&is_bonus_resource_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sequence_number_) -
        reinterpret_cast<char*>(&is_bonus_resource_)) + sizeof(sequence_number_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResourceGroupContentItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string display_sequence = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_display_sequence();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.ResourceGroupContentItem.display_sequence");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_bonus_resource = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_is_bonus_resource(&has_bits);
          is_bonus_resource_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_instant_gratification_resource = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_is_instant_gratification_resource(&has_bits);
          is_instant_gratification_resource_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_pre_order_incentive_resource = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_is_pre_order_incentive_resource(&has_bits);
          is_pre_order_incentive_resource_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.LinkedReleaseResourceReference linked_release_resource_reference = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_linked_release_resource_reference(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool no_display_sequence = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_no_display_sequence(&has_bits);
          no_display_sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string release_resource_reference = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_release_resource_reference();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.ResourceGroupContentItem.release_resource_reference");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 sequence_number = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_sequence_number(&has_bits);
          sequence_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResourceGroupContentItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.ResourceGroupContentItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string display_sequence = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_display_sequence().data(), static_cast<int>(this->_internal_display_sequence().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.ResourceGroupContentItem.display_sequence");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_display_sequence(), target);
  }

  // optional bool is_bonus_resource = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_bonus_resource(), target);
  }

  // optional bool is_instant_gratification_resource = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_instant_gratification_resource(), target);
  }

  // optional bool is_pre_order_incentive_resource = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_is_pre_order_incentive_resource(), target);
  }

  // repeated .ern411.ern.LinkedReleaseResourceReference linked_release_resource_reference = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_linked_release_resource_reference_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_linked_release_resource_reference(i), target, stream);
  }

  // optional bool no_display_sequence = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_no_display_sequence(), target);
  }

  // optional string release_resource_reference = 7;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_release_resource_reference().data(), static_cast<int>(this->_internal_release_resource_reference().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.ResourceGroupContentItem.release_resource_reference");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_release_resource_reference(), target);
  }

  // optional int32 sequence_number = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_sequence_number(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.ResourceGroupContentItem)
  return target;
}

size_t ResourceGroupContentItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.ResourceGroupContentItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ern411.ern.LinkedReleaseResourceReference linked_release_resource_reference = 5;
  total_size += 1UL * this->_internal_linked_release_resource_reference_size();
  for (const auto& msg : this->linked_release_resource_reference_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string display_sequence = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_display_sequence());
    }

    // optional string release_resource_reference = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_release_resource_reference());
    }

    // optional bool is_bonus_resource = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool is_instant_gratification_resource = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool is_pre_order_incentive_resource = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool no_display_sequence = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional int32 sequence_number = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_sequence_number());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResourceGroupContentItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.ResourceGroupContentItem)
  GOOGLE_DCHECK_NE(&from, this);
  const ResourceGroupContentItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResourceGroupContentItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.ResourceGroupContentItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.ResourceGroupContentItem)
    MergeFrom(*source);
  }
}

void ResourceGroupContentItem::MergeFrom(const ResourceGroupContentItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.ResourceGroupContentItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  linked_release_resource_reference_.MergeFrom(from.linked_release_resource_reference_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_display_sequence(from._internal_display_sequence());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_release_resource_reference(from._internal_release_resource_reference());
    }
    if (cached_has_bits & 0x00000004u) {
      is_bonus_resource_ = from.is_bonus_resource_;
    }
    if (cached_has_bits & 0x00000008u) {
      is_instant_gratification_resource_ = from.is_instant_gratification_resource_;
    }
    if (cached_has_bits & 0x00000010u) {
      is_pre_order_incentive_resource_ = from.is_pre_order_incentive_resource_;
    }
    if (cached_has_bits & 0x00000020u) {
      no_display_sequence_ = from.no_display_sequence_;
    }
    if (cached_has_bits & 0x00000040u) {
      sequence_number_ = from.sequence_number_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ResourceGroupContentItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.ResourceGroupContentItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResourceGroupContentItem::CopyFrom(const ResourceGroupContentItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.ResourceGroupContentItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourceGroupContentItem::IsInitialized() const {
  return true;
}

void ResourceGroupContentItem::InternalSwap(ResourceGroupContentItem* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  linked_release_resource_reference_.InternalSwap(&other->linked_release_resource_reference_);
  display_sequence_.Swap(&other->display_sequence_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  release_resource_reference_.Swap(&other->release_resource_reference_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResourceGroupContentItem, sequence_number_)
      + sizeof(ResourceGroupContentItem::sequence_number_)
      - PROTOBUF_FIELD_OFFSET(ResourceGroupContentItem, is_bonus_resource_)>(
          reinterpret_cast<char*>(&is_bonus_resource_),
          reinterpret_cast<char*>(&other->is_bonus_resource_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResourceGroupContentItem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResourceId::InitAsDefaultInstance() {
  ::ern411::ern::_ResourceId_default_instance_._instance.get_mutable()->catalog_number_ = const_cast< ::ern411::ern::CatalogNumber*>(
      ::ern411::ern::CatalogNumber::internal_default_instance());
}
class ResourceId::_Internal {
 public:
  using HasBits = decltype(std::declval<ResourceId>()._has_bits_);
  static const ::ern411::ern::CatalogNumber& catalog_number(const ResourceId* msg);
  static void set_has_catalog_number(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_i_s_a_n(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_i_s_b_n(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_i_s_m_n(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_i_s_r_c(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_i_s_s_n(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_is_replaced(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_s_i_c_i(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_v_i_s_a_n(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::ern411::ern::CatalogNumber&
ResourceId::_Internal::catalog_number(const ResourceId* msg) {
  return *msg->catalog_number_;
}
ResourceId::ResourceId(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  proprietary_id_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.ResourceId)
}
ResourceId::ResourceId(const ResourceId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      proprietary_id_(from.proprietary_id_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  i_s_a_n_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_i_s_a_n()) {
    i_s_a_n_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_i_s_a_n(),
      GetArena());
  }
  i_s_b_n_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_i_s_b_n()) {
    i_s_b_n_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_i_s_b_n(),
      GetArena());
  }
  i_s_m_n_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_i_s_m_n()) {
    i_s_m_n_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_i_s_m_n(),
      GetArena());
  }
  i_s_r_c_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_i_s_r_c()) {
    i_s_r_c_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_i_s_r_c(),
      GetArena());
  }
  i_s_s_n_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_i_s_s_n()) {
    i_s_s_n_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_i_s_s_n(),
      GetArena());
  }
  s_i_c_i_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_s_i_c_i()) {
    s_i_c_i_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_s_i_c_i(),
      GetArena());
  }
  v_i_s_a_n_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_v_i_s_a_n()) {
    v_i_s_a_n_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_v_i_s_a_n(),
      GetArena());
  }
  if (from._internal_has_catalog_number()) {
    catalog_number_ = new ::ern411::ern::CatalogNumber(*from.catalog_number_);
  } else {
    catalog_number_ = nullptr;
  }
  is_replaced_ = from.is_replaced_;
  // @@protoc_insertion_point(copy_constructor:ern411.ern.ResourceId)
}

void ResourceId::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ResourceId_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  i_s_a_n_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  i_s_b_n_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  i_s_m_n_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  i_s_r_c_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  i_s_s_n_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  s_i_c_i_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  v_i_s_a_n_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&catalog_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_replaced_) -
      reinterpret_cast<char*>(&catalog_number_)) + sizeof(is_replaced_));
}

ResourceId::~ResourceId() {
  // @@protoc_insertion_point(destructor:ern411.ern.ResourceId)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ResourceId::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  i_s_a_n_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  i_s_b_n_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  i_s_m_n_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  i_s_r_c_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  i_s_s_n_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  s_i_c_i_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  v_i_s_a_n_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete catalog_number_;
}

void ResourceId::ArenaDtor(void* object) {
  ResourceId* _this = reinterpret_cast< ResourceId* >(object);
  (void)_this;
}
void ResourceId::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResourceId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResourceId& ResourceId::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResourceId_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void ResourceId::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.ResourceId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  proprietary_id_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      i_s_a_n_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      i_s_b_n_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      i_s_m_n_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      i_s_r_c_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      i_s_s_n_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      s_i_c_i_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      v_i_s_a_n_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(catalog_number_ != nullptr);
      catalog_number_->Clear();
    }
  }
  is_replaced_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResourceId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ern411.ern.CatalogNumber catalog_number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_catalog_number(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string i_s_a_n = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_i_s_a_n();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.ResourceId.i_s_a_n");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string i_s_b_n = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_i_s_b_n();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.ResourceId.i_s_b_n");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string i_s_m_n = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_i_s_m_n();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.ResourceId.i_s_m_n");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string i_s_r_c = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_i_s_r_c();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.ResourceId.i_s_r_c");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string i_s_s_n = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_i_s_s_n();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.ResourceId.i_s_s_n");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_replaced = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_is_replaced(&has_bits);
          is_replaced_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.ProprietaryId proprietary_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_proprietary_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string s_i_c_i = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_s_i_c_i();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.ResourceId.s_i_c_i");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string v_i_s_a_n = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_v_i_s_a_n();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.ResourceId.v_i_s_a_n");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResourceId::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.ResourceId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ern411.ern.CatalogNumber catalog_number = 1;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::catalog_number(this), target, stream);
  }

  // optional string i_s_a_n = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_i_s_a_n().data(), static_cast<int>(this->_internal_i_s_a_n().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.ResourceId.i_s_a_n");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_i_s_a_n(), target);
  }

  // optional string i_s_b_n = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_i_s_b_n().data(), static_cast<int>(this->_internal_i_s_b_n().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.ResourceId.i_s_b_n");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_i_s_b_n(), target);
  }

  // optional string i_s_m_n = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_i_s_m_n().data(), static_cast<int>(this->_internal_i_s_m_n().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.ResourceId.i_s_m_n");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_i_s_m_n(), target);
  }

  // optional string i_s_r_c = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_i_s_r_c().data(), static_cast<int>(this->_internal_i_s_r_c().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.ResourceId.i_s_r_c");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_i_s_r_c(), target);
  }

  // optional string i_s_s_n = 6;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_i_s_s_n().data(), static_cast<int>(this->_internal_i_s_s_n().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.ResourceId.i_s_s_n");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_i_s_s_n(), target);
  }

  // optional bool is_replaced = 7;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_is_replaced(), target);
  }

  // repeated .ern411.ern.ProprietaryId proprietary_id = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_proprietary_id_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_proprietary_id(i), target, stream);
  }

  // optional string s_i_c_i = 9;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_s_i_c_i().data(), static_cast<int>(this->_internal_s_i_c_i().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.ResourceId.s_i_c_i");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_s_i_c_i(), target);
  }

  // optional string v_i_s_a_n = 10;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_v_i_s_a_n().data(), static_cast<int>(this->_internal_v_i_s_a_n().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.ResourceId.v_i_s_a_n");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_v_i_s_a_n(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.ResourceId)
  return target;
}

size_t ResourceId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.ResourceId)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ern411.ern.ProprietaryId proprietary_id = 8;
  total_size += 1UL * this->_internal_proprietary_id_size();
  for (const auto& msg : this->proprietary_id_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string i_s_a_n = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_i_s_a_n());
    }

    // optional string i_s_b_n = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_i_s_b_n());
    }

    // optional string i_s_m_n = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_i_s_m_n());
    }

    // optional string i_s_r_c = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_i_s_r_c());
    }

    // optional string i_s_s_n = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_i_s_s_n());
    }

    // optional string s_i_c_i = 9;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_s_i_c_i());
    }

    // optional string v_i_s_a_n = 10;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_v_i_s_a_n());
    }

    // optional .ern411.ern.CatalogNumber catalog_number = 1;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *catalog_number_);
    }

  }
  // optional bool is_replaced = 7;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResourceId::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.ResourceId)
  GOOGLE_DCHECK_NE(&from, this);
  const ResourceId* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResourceId>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.ResourceId)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.ResourceId)
    MergeFrom(*source);
  }
}

void ResourceId::MergeFrom(const ResourceId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.ResourceId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  proprietary_id_.MergeFrom(from.proprietary_id_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_i_s_a_n(from._internal_i_s_a_n());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_i_s_b_n(from._internal_i_s_b_n());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_i_s_m_n(from._internal_i_s_m_n());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_i_s_r_c(from._internal_i_s_r_c());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_i_s_s_n(from._internal_i_s_s_n());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_s_i_c_i(from._internal_s_i_c_i());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_v_i_s_a_n(from._internal_v_i_s_a_n());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_catalog_number()->::ern411::ern::CatalogNumber::MergeFrom(from._internal_catalog_number());
    }
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_is_replaced(from._internal_is_replaced());
  }
}

void ResourceId::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.ResourceId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResourceId::CopyFrom(const ResourceId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.ResourceId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourceId::IsInitialized() const {
  return true;
}

void ResourceId::InternalSwap(ResourceId* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  proprietary_id_.InternalSwap(&other->proprietary_id_);
  i_s_a_n_.Swap(&other->i_s_a_n_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  i_s_b_n_.Swap(&other->i_s_b_n_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  i_s_m_n_.Swap(&other->i_s_m_n_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  i_s_r_c_.Swap(&other->i_s_r_c_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  i_s_s_n_.Swap(&other->i_s_s_n_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  s_i_c_i_.Swap(&other->s_i_c_i_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  v_i_s_a_n_.Swap(&other->v_i_s_a_n_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResourceId, is_replaced_)
      + sizeof(ResourceId::is_replaced_)
      - PROTOBUF_FIELD_OFFSET(ResourceId, catalog_number_)>(
          reinterpret_cast<char*>(&catalog_number_),
          reinterpret_cast<char*>(&other->catalog_number_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResourceId::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResourceList::InitAsDefaultInstance() {
}
class ResourceList::_Internal {
 public:
};

ResourceList::ResourceList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  image_(arena),
  sheet_music_(arena),
  software_(arena),
  sound_recording_(arena),
  text_(arena),
  video_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.ResourceList)
}
ResourceList::ResourceList(const ResourceList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      image_(from.image_),
      sheet_music_(from.sheet_music_),
      software_(from.software_),
      sound_recording_(from.sound_recording_),
      text_(from.text_),
      video_(from.video_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ern411.ern.ResourceList)
}

void ResourceList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ResourceList_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
}

ResourceList::~ResourceList() {
  // @@protoc_insertion_point(destructor:ern411.ern.ResourceList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ResourceList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ResourceList::ArenaDtor(void* object) {
  ResourceList* _this = reinterpret_cast< ResourceList* >(object);
  (void)_this;
}
void ResourceList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResourceList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResourceList& ResourceList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResourceList_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void ResourceList::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.ResourceList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  image_.Clear();
  sheet_music_.Clear();
  software_.Clear();
  sound_recording_.Clear();
  text_.Clear();
  video_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResourceList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ern411.ern.Image image = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_image(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.SheetMusic sheet_music = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sheet_music(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.Software software = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_software(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.SoundRecording sound_recording = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sound_recording(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.Text text = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_text(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.Video video = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_video(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResourceList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.ResourceList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ern411.ern.Image image = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_image_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_image(i), target, stream);
  }

  // repeated .ern411.ern.SheetMusic sheet_music = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sheet_music_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_sheet_music(i), target, stream);
  }

  // repeated .ern411.ern.Software software = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_software_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_software(i), target, stream);
  }

  // repeated .ern411.ern.SoundRecording sound_recording = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sound_recording_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_sound_recording(i), target, stream);
  }

  // repeated .ern411.ern.Text text = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_text_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_text(i), target, stream);
  }

  // repeated .ern411.ern.Video video = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_video_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_video(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.ResourceList)
  return target;
}

size_t ResourceList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.ResourceList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ern411.ern.Image image = 1;
  total_size += 1UL * this->_internal_image_size();
  for (const auto& msg : this->image_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.SheetMusic sheet_music = 2;
  total_size += 1UL * this->_internal_sheet_music_size();
  for (const auto& msg : this->sheet_music_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.Software software = 3;
  total_size += 1UL * this->_internal_software_size();
  for (const auto& msg : this->software_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.SoundRecording sound_recording = 4;
  total_size += 1UL * this->_internal_sound_recording_size();
  for (const auto& msg : this->sound_recording_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.Text text = 5;
  total_size += 1UL * this->_internal_text_size();
  for (const auto& msg : this->text_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.Video video = 6;
  total_size += 1UL * this->_internal_video_size();
  for (const auto& msg : this->video_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResourceList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.ResourceList)
  GOOGLE_DCHECK_NE(&from, this);
  const ResourceList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResourceList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.ResourceList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.ResourceList)
    MergeFrom(*source);
  }
}

void ResourceList::MergeFrom(const ResourceList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.ResourceList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  image_.MergeFrom(from.image_);
  sheet_music_.MergeFrom(from.sheet_music_);
  software_.MergeFrom(from.software_);
  sound_recording_.MergeFrom(from.sound_recording_);
  text_.MergeFrom(from.text_);
  video_.MergeFrom(from.video_);
}

void ResourceList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.ResourceList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResourceList::CopyFrom(const ResourceList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.ResourceList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourceList::IsInitialized() const {
  return true;
}

void ResourceList::InternalSwap(ResourceList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  image_.InternalSwap(&other->image_);
  sheet_music_.InternalSwap(&other->sheet_music_);
  software_.InternalSwap(&other->software_);
  sound_recording_.InternalSwap(&other->sound_recording_);
  text_.InternalSwap(&other->text_);
  video_.InternalSwap(&other->video_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResourceList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResourceProprietaryId::InitAsDefaultInstance() {
}
class ResourceProprietaryId::_Internal {
 public:
  using HasBits = decltype(std::declval<ResourceProprietaryId>()._has_bits_);
  static void set_has_is_replaced(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ResourceProprietaryId::ResourceProprietaryId(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  proprietary_id_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.ResourceProprietaryId)
}
ResourceProprietaryId::ResourceProprietaryId(const ResourceProprietaryId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      proprietary_id_(from.proprietary_id_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  is_replaced_ = from.is_replaced_;
  // @@protoc_insertion_point(copy_constructor:ern411.ern.ResourceProprietaryId)
}

void ResourceProprietaryId::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ResourceProprietaryId_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  is_replaced_ = false;
}

ResourceProprietaryId::~ResourceProprietaryId() {
  // @@protoc_insertion_point(destructor:ern411.ern.ResourceProprietaryId)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ResourceProprietaryId::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ResourceProprietaryId::ArenaDtor(void* object) {
  ResourceProprietaryId* _this = reinterpret_cast< ResourceProprietaryId* >(object);
  (void)_this;
}
void ResourceProprietaryId::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResourceProprietaryId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResourceProprietaryId& ResourceProprietaryId::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResourceProprietaryId_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void ResourceProprietaryId::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.ResourceProprietaryId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  proprietary_id_.Clear();
  is_replaced_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResourceProprietaryId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool is_replaced = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_is_replaced(&has_bits);
          is_replaced_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.ProprietaryId proprietary_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_proprietary_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResourceProprietaryId::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.ResourceProprietaryId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_replaced = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_replaced(), target);
  }

  // repeated .ern411.ern.ProprietaryId proprietary_id = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_proprietary_id_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_proprietary_id(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.ResourceProprietaryId)
  return target;
}

size_t ResourceProprietaryId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.ResourceProprietaryId)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ern411.ern.ProprietaryId proprietary_id = 2;
  total_size += 1UL * this->_internal_proprietary_id_size();
  for (const auto& msg : this->proprietary_id_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional bool is_replaced = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResourceProprietaryId::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.ResourceProprietaryId)
  GOOGLE_DCHECK_NE(&from, this);
  const ResourceProprietaryId* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResourceProprietaryId>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.ResourceProprietaryId)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.ResourceProprietaryId)
    MergeFrom(*source);
  }
}

void ResourceProprietaryId::MergeFrom(const ResourceProprietaryId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.ResourceProprietaryId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  proprietary_id_.MergeFrom(from.proprietary_id_);
  if (from._internal_has_is_replaced()) {
    _internal_set_is_replaced(from._internal_is_replaced());
  }
}

void ResourceProprietaryId::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.ResourceProprietaryId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResourceProprietaryId::CopyFrom(const ResourceProprietaryId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.ResourceProprietaryId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourceProprietaryId::IsInitialized() const {
  return true;
}

void ResourceProprietaryId::InternalSwap(ResourceProprietaryId* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  proprietary_id_.InternalSwap(&other->proprietary_id_);
  swap(is_replaced_, other->is_replaced_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResourceProprietaryId::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResourceRightsController::InitAsDefaultInstance() {
  ::ern411::ern::_ResourceRightsController_default_instance_._instance.get_mutable()->right_share_percentage_ = const_cast< ::ern411::ern::Percentage*>(
      ::ern411::ern::Percentage::internal_default_instance());
}
class ResourceRightsController::_Internal {
 public:
  using HasBits = decltype(std::declval<ResourceRightsController>()._has_bits_);
  static const ::ern411::ern::Percentage& right_share_percentage(const ResourceRightsController* msg);
  static void set_has_right_share_percentage(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_right_share_unknown(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_rights_controller_party_reference(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sequence_number(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::ern411::ern::Percentage&
ResourceRightsController::_Internal::right_share_percentage(const ResourceRightsController* msg) {
  return *msg->right_share_percentage_;
}
void ResourceRightsController::clear_rights_controller_role() {
  rights_controller_role_.Clear();
}
ResourceRightsController::ResourceRightsController(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  delegated_usage_rights_(arena),
  rights_controller_role_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.ResourceRightsController)
}
ResourceRightsController::ResourceRightsController(const ResourceRightsController& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      delegated_usage_rights_(from.delegated_usage_rights_),
      rights_controller_role_(from.rights_controller_role_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  rights_controller_party_reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_rights_controller_party_reference()) {
    rights_controller_party_reference_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_rights_controller_party_reference(),
      GetArena());
  }
  if (from._internal_has_right_share_percentage()) {
    right_share_percentage_ = new ::ern411::ern::Percentage(*from.right_share_percentage_);
  } else {
    right_share_percentage_ = nullptr;
  }
  ::memcpy(&right_share_unknown_, &from.right_share_unknown_,
    static_cast<size_t>(reinterpret_cast<char*>(&sequence_number_) -
    reinterpret_cast<char*>(&right_share_unknown_)) + sizeof(sequence_number_));
  // @@protoc_insertion_point(copy_constructor:ern411.ern.ResourceRightsController)
}

void ResourceRightsController::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ResourceRightsController_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  rights_controller_party_reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&right_share_percentage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sequence_number_) -
      reinterpret_cast<char*>(&right_share_percentage_)) + sizeof(sequence_number_));
}

ResourceRightsController::~ResourceRightsController() {
  // @@protoc_insertion_point(destructor:ern411.ern.ResourceRightsController)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ResourceRightsController::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  rights_controller_party_reference_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete right_share_percentage_;
}

void ResourceRightsController::ArenaDtor(void* object) {
  ResourceRightsController* _this = reinterpret_cast< ResourceRightsController* >(object);
  (void)_this;
}
void ResourceRightsController::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResourceRightsController::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResourceRightsController& ResourceRightsController::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResourceRightsController_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void ResourceRightsController::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.ResourceRightsController)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  delegated_usage_rights_.Clear();
  rights_controller_role_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      rights_controller_party_reference_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(right_share_percentage_ != nullptr);
      right_share_percentage_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&right_share_unknown_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sequence_number_) -
        reinterpret_cast<char*>(&right_share_unknown_)) + sizeof(sequence_number_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResourceRightsController::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ern411.ern.DelegatedUsageRights delegated_usage_rights = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_delegated_usage_rights(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .ern411.ern.Percentage right_share_percentage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_right_share_percentage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool right_share_unknown = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_right_share_unknown(&has_bits);
          right_share_unknown_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string rights_controller_party_reference = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_rights_controller_party_reference();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.ResourceRightsController.rights_controller_party_reference");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ern411.avs.RightsControllerRole rights_controller_role = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rights_controller_role(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // optional int32 sequence_number = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_sequence_number(&has_bits);
          sequence_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResourceRightsController::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.ResourceRightsController)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ern411.ern.DelegatedUsageRights delegated_usage_rights = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_delegated_usage_rights_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_delegated_usage_rights(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional .ern411.ern.Percentage right_share_percentage = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::right_share_percentage(this), target, stream);
  }

  // optional bool right_share_unknown = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_right_share_unknown(), target);
  }

  // optional string rights_controller_party_reference = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_rights_controller_party_reference().data(), static_cast<int>(this->_internal_rights_controller_party_reference().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.ResourceRightsController.rights_controller_party_reference");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_rights_controller_party_reference(), target);
  }

  // repeated .ern411.avs.RightsControllerRole rights_controller_role = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_rights_controller_role_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_rights_controller_role(i), target, stream);
  }

  // optional int32 sequence_number = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_sequence_number(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.ResourceRightsController)
  return target;
}

size_t ResourceRightsController::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.ResourceRightsController)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ern411.ern.DelegatedUsageRights delegated_usage_rights = 1;
  total_size += 1UL * this->_internal_delegated_usage_rights_size();
  for (const auto& msg : this->delegated_usage_rights_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.avs.RightsControllerRole rights_controller_role = 5;
  total_size += 1UL * this->_internal_rights_controller_role_size();
  for (const auto& msg : this->rights_controller_role_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string rights_controller_party_reference = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_rights_controller_party_reference());
    }

    // optional .ern411.ern.Percentage right_share_percentage = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *right_share_percentage_);
    }

    // optional bool right_share_unknown = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional int32 sequence_number = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_sequence_number());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResourceRightsController::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.ResourceRightsController)
  GOOGLE_DCHECK_NE(&from, this);
  const ResourceRightsController* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResourceRightsController>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.ResourceRightsController)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.ResourceRightsController)
    MergeFrom(*source);
  }
}

void ResourceRightsController::MergeFrom(const ResourceRightsController& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.ResourceRightsController)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  delegated_usage_rights_.MergeFrom(from.delegated_usage_rights_);
  rights_controller_role_.MergeFrom(from.rights_controller_role_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_rights_controller_party_reference(from._internal_rights_controller_party_reference());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_right_share_percentage()->::ern411::ern::Percentage::MergeFrom(from._internal_right_share_percentage());
    }
    if (cached_has_bits & 0x00000004u) {
      right_share_unknown_ = from.right_share_unknown_;
    }
    if (cached_has_bits & 0x00000008u) {
      sequence_number_ = from.sequence_number_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ResourceRightsController::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.ResourceRightsController)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResourceRightsController::CopyFrom(const ResourceRightsController& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.ResourceRightsController)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourceRightsController::IsInitialized() const {
  return true;
}

void ResourceRightsController::InternalSwap(ResourceRightsController* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  delegated_usage_rights_.InternalSwap(&other->delegated_usage_rights_);
  rights_controller_role_.InternalSwap(&other->rights_controller_role_);
  rights_controller_party_reference_.Swap(&other->rights_controller_party_reference_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResourceRightsController, sequence_number_)
      + sizeof(ResourceRightsController::sequence_number_)
      - PROTOBUF_FIELD_OFFSET(ResourceRightsController, right_share_percentage_)>(
          reinterpret_cast<char*>(&right_share_percentage_),
          reinterpret_cast<char*>(&other->right_share_percentage_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResourceRightsController::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResourceSubGroup::InitAsDefaultInstance() {
  ::ern411::ern::_ResourceSubGroup_default_instance_._instance.get_mutable()->release_id_ = const_cast< ::ern411::ern::ReleaseId*>(
      ::ern411::ern::ReleaseId::internal_default_instance());
  ::ern411::ern::_ResourceSubGroup_default_instance_._instance.get_mutable()->resource_group_type_ = const_cast< ::ern411::avs::ResourceGroupType*>(
      ::ern411::avs::ResourceGroupType::internal_default_instance());
}
class ResourceSubGroup::_Internal {
 public:
  using HasBits = decltype(std::declval<ResourceSubGroup>()._has_bits_);
  static void set_has_display_sequence(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_no_display_sequence(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::ern411::ern::ReleaseId& release_id(const ResourceSubGroup* msg);
  static void set_has_release_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_resource_group_release_reference(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::ern411::avs::ResourceGroupType& resource_group_type(const ResourceSubGroup* msg);
  static void set_has_resource_group_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_sequence_number(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::ern411::ern::ReleaseId&
ResourceSubGroup::_Internal::release_id(const ResourceSubGroup* msg) {
  return *msg->release_id_;
}
const ::ern411::avs::ResourceGroupType&
ResourceSubGroup::_Internal::resource_group_type(const ResourceSubGroup* msg) {
  return *msg->resource_group_type_;
}
void ResourceSubGroup::clear_resource_group_type() {
  if (resource_group_type_ != nullptr) resource_group_type_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
ResourceSubGroup::ResourceSubGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  additional_title_(arena),
  carrier_type_(arena),
  display_artist_(arena),
  display_title_(arena),
  display_title_text_(arena),
  linked_release_resource_reference_(arena),
  resource_group_(arena),
  resource_group_content_item_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.ResourceSubGroup)
}
ResourceSubGroup::ResourceSubGroup(const ResourceSubGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      additional_title_(from.additional_title_),
      carrier_type_(from.carrier_type_),
      display_artist_(from.display_artist_),
      display_title_(from.display_title_),
      display_title_text_(from.display_title_text_),
      linked_release_resource_reference_(from.linked_release_resource_reference_),
      resource_group_(from.resource_group_),
      resource_group_content_item_(from.resource_group_content_item_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  display_sequence_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_display_sequence()) {
    display_sequence_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_display_sequence(),
      GetArena());
  }
  duration_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_duration()) {
    duration_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_duration(),
      GetArena());
  }
  resource_group_release_reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_resource_group_release_reference()) {
    resource_group_release_reference_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_resource_group_release_reference(),
      GetArena());
  }
  if (from._internal_has_release_id()) {
    release_id_ = new ::ern411::ern::ReleaseId(*from.release_id_);
  } else {
    release_id_ = nullptr;
  }
  if (from._internal_has_resource_group_type()) {
    resource_group_type_ = new ::ern411::avs::ResourceGroupType(*from.resource_group_type_);
  } else {
    resource_group_type_ = nullptr;
  }
  ::memcpy(&no_display_sequence_, &from.no_display_sequence_,
    static_cast<size_t>(reinterpret_cast<char*>(&sequence_number_) -
    reinterpret_cast<char*>(&no_display_sequence_)) + sizeof(sequence_number_));
  // @@protoc_insertion_point(copy_constructor:ern411.ern.ResourceSubGroup)
}

void ResourceSubGroup::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ResourceSubGroup_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  display_sequence_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  duration_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resource_group_release_reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&release_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sequence_number_) -
      reinterpret_cast<char*>(&release_id_)) + sizeof(sequence_number_));
}

ResourceSubGroup::~ResourceSubGroup() {
  // @@protoc_insertion_point(destructor:ern411.ern.ResourceSubGroup)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ResourceSubGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  display_sequence_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  duration_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resource_group_release_reference_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete release_id_;
  if (this != internal_default_instance()) delete resource_group_type_;
}

void ResourceSubGroup::ArenaDtor(void* object) {
  ResourceSubGroup* _this = reinterpret_cast< ResourceSubGroup* >(object);
  (void)_this;
}
void ResourceSubGroup::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResourceSubGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResourceSubGroup& ResourceSubGroup::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResourceSubGroup_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void ResourceSubGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.ResourceSubGroup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  additional_title_.Clear();
  carrier_type_.Clear();
  display_artist_.Clear();
  display_title_.Clear();
  display_title_text_.Clear();
  linked_release_resource_reference_.Clear();
  resource_group_.Clear();
  resource_group_content_item_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      display_sequence_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      duration_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      resource_group_release_reference_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(release_id_ != nullptr);
      release_id_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(resource_group_type_ != nullptr);
      resource_group_type_->Clear();
    }
  }
  if (cached_has_bits & 0x00000060u) {
    ::memset(&no_display_sequence_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sequence_number_) -
        reinterpret_cast<char*>(&no_display_sequence_)) + sizeof(sequence_number_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResourceSubGroup::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ern411.ern.AdditionalTitle additional_title = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_additional_title(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.CarrierType carrier_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_carrier_type(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.DisplayArtist display_artist = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_display_artist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string display_sequence = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_display_sequence();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.ResourceSubGroup.display_sequence");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.DisplayTitle display_title = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_display_title(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.DisplayTitleText display_title_text = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_display_title_text(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string duration = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_duration();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.ResourceSubGroup.duration");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.LinkedReleaseResourceReference linked_release_resource_reference = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_linked_release_resource_reference(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool no_display_sequence = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_no_display_sequence(&has_bits);
          no_display_sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.ern.ReleaseId release_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_release_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.ResourceSubGroup resource_group = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_resource_group(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.ResourceGroupContentItem resource_group_content_item = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_resource_group_content_item(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string resource_group_release_reference = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_resource_group_release_reference();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.ResourceSubGroup.resource_group_release_reference");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.avs.ResourceGroupType resource_group_type = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_resource_group_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 sequence_number = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_sequence_number(&has_bits);
          sequence_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResourceSubGroup::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.ResourceSubGroup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ern411.ern.AdditionalTitle additional_title = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_additional_title_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_additional_title(i), target, stream);
  }

  // repeated .ern411.ern.CarrierType carrier_type = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_carrier_type_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_carrier_type(i), target, stream);
  }

  // repeated .ern411.ern.DisplayArtist display_artist = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_display_artist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_display_artist(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional string display_sequence = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_display_sequence().data(), static_cast<int>(this->_internal_display_sequence().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.ResourceSubGroup.display_sequence");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_display_sequence(), target);
  }

  // repeated .ern411.ern.DisplayTitle display_title = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_display_title_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_display_title(i), target, stream);
  }

  // repeated .ern411.ern.DisplayTitleText display_title_text = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_display_title_text_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_display_title_text(i), target, stream);
  }

  // optional string duration = 7;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_duration().data(), static_cast<int>(this->_internal_duration().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.ResourceSubGroup.duration");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_duration(), target);
  }

  // repeated .ern411.ern.LinkedReleaseResourceReference linked_release_resource_reference = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_linked_release_resource_reference_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_linked_release_resource_reference(i), target, stream);
  }

  // optional bool no_display_sequence = 9;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_no_display_sequence(), target);
  }

  // optional .ern411.ern.ReleaseId release_id = 10;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::release_id(this), target, stream);
  }

  // repeated .ern411.ern.ResourceSubGroup resource_group = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_resource_group_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_resource_group(i), target, stream);
  }

  // repeated .ern411.ern.ResourceGroupContentItem resource_group_content_item = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_resource_group_content_item_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, this->_internal_resource_group_content_item(i), target, stream);
  }

  // optional string resource_group_release_reference = 13;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_resource_group_release_reference().data(), static_cast<int>(this->_internal_resource_group_release_reference().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.ResourceSubGroup.resource_group_release_reference");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_resource_group_release_reference(), target);
  }

  // optional .ern411.avs.ResourceGroupType resource_group_type = 14;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::resource_group_type(this), target, stream);
  }

  // optional int32 sequence_number = 15;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->_internal_sequence_number(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.ResourceSubGroup)
  return target;
}

size_t ResourceSubGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.ResourceSubGroup)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ern411.ern.AdditionalTitle additional_title = 1;
  total_size += 1UL * this->_internal_additional_title_size();
  for (const auto& msg : this->additional_title_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.CarrierType carrier_type = 2;
  total_size += 1UL * this->_internal_carrier_type_size();
  for (const auto& msg : this->carrier_type_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.DisplayArtist display_artist = 3;
  total_size += 1UL * this->_internal_display_artist_size();
  for (const auto& msg : this->display_artist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.DisplayTitle display_title = 5;
  total_size += 1UL * this->_internal_display_title_size();
  for (const auto& msg : this->display_title_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.DisplayTitleText display_title_text = 6;
  total_size += 1UL * this->_internal_display_title_text_size();
  for (const auto& msg : this->display_title_text_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.LinkedReleaseResourceReference linked_release_resource_reference = 8;
  total_size += 1UL * this->_internal_linked_release_resource_reference_size();
  for (const auto& msg : this->linked_release_resource_reference_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.ResourceSubGroup resource_group = 11;
  total_size += 1UL * this->_internal_resource_group_size();
  for (const auto& msg : this->resource_group_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.ResourceGroupContentItem resource_group_content_item = 12;
  total_size += 1UL * this->_internal_resource_group_content_item_size();
  for (const auto& msg : this->resource_group_content_item_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string display_sequence = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_display_sequence());
    }

    // optional string duration = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_duration());
    }

    // optional string resource_group_release_reference = 13;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_resource_group_release_reference());
    }

    // optional .ern411.ern.ReleaseId release_id = 10;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *release_id_);
    }

    // optional .ern411.avs.ResourceGroupType resource_group_type = 14;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *resource_group_type_);
    }

    // optional bool no_display_sequence = 9;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional int32 sequence_number = 15;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_sequence_number());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResourceSubGroup::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.ResourceSubGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const ResourceSubGroup* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResourceSubGroup>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.ResourceSubGroup)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.ResourceSubGroup)
    MergeFrom(*source);
  }
}

void ResourceSubGroup::MergeFrom(const ResourceSubGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.ResourceSubGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  additional_title_.MergeFrom(from.additional_title_);
  carrier_type_.MergeFrom(from.carrier_type_);
  display_artist_.MergeFrom(from.display_artist_);
  display_title_.MergeFrom(from.display_title_);
  display_title_text_.MergeFrom(from.display_title_text_);
  linked_release_resource_reference_.MergeFrom(from.linked_release_resource_reference_);
  resource_group_.MergeFrom(from.resource_group_);
  resource_group_content_item_.MergeFrom(from.resource_group_content_item_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_display_sequence(from._internal_display_sequence());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_duration(from._internal_duration());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_resource_group_release_reference(from._internal_resource_group_release_reference());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_release_id()->::ern411::ern::ReleaseId::MergeFrom(from._internal_release_id());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_resource_group_type()->::ern411::avs::ResourceGroupType::MergeFrom(from._internal_resource_group_type());
    }
    if (cached_has_bits & 0x00000020u) {
      no_display_sequence_ = from.no_display_sequence_;
    }
    if (cached_has_bits & 0x00000040u) {
      sequence_number_ = from.sequence_number_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ResourceSubGroup::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.ResourceSubGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResourceSubGroup::CopyFrom(const ResourceSubGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.ResourceSubGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourceSubGroup::IsInitialized() const {
  return true;
}

void ResourceSubGroup::InternalSwap(ResourceSubGroup* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  additional_title_.InternalSwap(&other->additional_title_);
  carrier_type_.InternalSwap(&other->carrier_type_);
  display_artist_.InternalSwap(&other->display_artist_);
  display_title_.InternalSwap(&other->display_title_);
  display_title_text_.InternalSwap(&other->display_title_text_);
  linked_release_resource_reference_.InternalSwap(&other->linked_release_resource_reference_);
  resource_group_.InternalSwap(&other->resource_group_);
  resource_group_content_item_.InternalSwap(&other->resource_group_content_item_);
  display_sequence_.Swap(&other->display_sequence_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  duration_.Swap(&other->duration_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  resource_group_release_reference_.Swap(&other->resource_group_release_reference_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResourceSubGroup, sequence_number_)
      + sizeof(ResourceSubGroup::sequence_number_)
      - PROTOBUF_FIELD_OFFSET(ResourceSubGroup, release_id_)>(
          reinterpret_cast<char*>(&release_id_),
          reinterpret_cast<char*>(&other->release_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResourceSubGroup::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RightsClaimPolicy::InitAsDefaultInstance() {
  ::ern411::ern::_RightsClaimPolicy_default_instance_._instance.get_mutable()->rights_claim_policy_type_ = const_cast< ::ern411::avs::RightsClaimPolicyType*>(
      ::ern411::avs::RightsClaimPolicyType::internal_default_instance());
}
class RightsClaimPolicy::_Internal {
 public:
  using HasBits = decltype(std::declval<RightsClaimPolicy>()._has_bits_);
  static const ::ern411::avs::RightsClaimPolicyType& rights_claim_policy_type(const RightsClaimPolicy* msg);
  static void set_has_rights_claim_policy_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::ern411::avs::RightsClaimPolicyType&
RightsClaimPolicy::_Internal::rights_claim_policy_type(const RightsClaimPolicy* msg) {
  return *msg->rights_claim_policy_type_;
}
void RightsClaimPolicy::clear_rights_claim_policy_type() {
  if (rights_claim_policy_type_ != nullptr) rights_claim_policy_type_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
RightsClaimPolicy::RightsClaimPolicy(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  condition_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.RightsClaimPolicy)
}
RightsClaimPolicy::RightsClaimPolicy(const RightsClaimPolicy& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      condition_(from.condition_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_rights_claim_policy_type()) {
    rights_claim_policy_type_ = new ::ern411::avs::RightsClaimPolicyType(*from.rights_claim_policy_type_);
  } else {
    rights_claim_policy_type_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ern411.ern.RightsClaimPolicy)
}

void RightsClaimPolicy::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RightsClaimPolicy_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  rights_claim_policy_type_ = nullptr;
}

RightsClaimPolicy::~RightsClaimPolicy() {
  // @@protoc_insertion_point(destructor:ern411.ern.RightsClaimPolicy)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RightsClaimPolicy::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete rights_claim_policy_type_;
}

void RightsClaimPolicy::ArenaDtor(void* object) {
  RightsClaimPolicy* _this = reinterpret_cast< RightsClaimPolicy* >(object);
  (void)_this;
}
void RightsClaimPolicy::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RightsClaimPolicy::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RightsClaimPolicy& RightsClaimPolicy::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RightsClaimPolicy_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void RightsClaimPolicy::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.RightsClaimPolicy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  condition_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(rights_claim_policy_type_ != nullptr);
    rights_claim_policy_type_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RightsClaimPolicy::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ern411.ern.ConditionForRightsClaimPolicy condition = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_condition(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .ern411.avs.RightsClaimPolicyType rights_claim_policy_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_rights_claim_policy_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RightsClaimPolicy::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.RightsClaimPolicy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ern411.ern.ConditionForRightsClaimPolicy condition = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_condition_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_condition(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional .ern411.avs.RightsClaimPolicyType rights_claim_policy_type = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::rights_claim_policy_type(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.RightsClaimPolicy)
  return target;
}

size_t RightsClaimPolicy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.RightsClaimPolicy)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ern411.ern.ConditionForRightsClaimPolicy condition = 1;
  total_size += 1UL * this->_internal_condition_size();
  for (const auto& msg : this->condition_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .ern411.avs.RightsClaimPolicyType rights_claim_policy_type = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rights_claim_policy_type_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RightsClaimPolicy::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.RightsClaimPolicy)
  GOOGLE_DCHECK_NE(&from, this);
  const RightsClaimPolicy* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RightsClaimPolicy>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.RightsClaimPolicy)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.RightsClaimPolicy)
    MergeFrom(*source);
  }
}

void RightsClaimPolicy::MergeFrom(const RightsClaimPolicy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.RightsClaimPolicy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  condition_.MergeFrom(from.condition_);
  if (from._internal_has_rights_claim_policy_type()) {
    _internal_mutable_rights_claim_policy_type()->::ern411::avs::RightsClaimPolicyType::MergeFrom(from._internal_rights_claim_policy_type());
  }
}

void RightsClaimPolicy::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.RightsClaimPolicy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RightsClaimPolicy::CopyFrom(const RightsClaimPolicy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.RightsClaimPolicy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RightsClaimPolicy::IsInitialized() const {
  return true;
}

void RightsClaimPolicy::InternalSwap(RightsClaimPolicy* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  condition_.InternalSwap(&other->condition_);
  swap(rights_claim_policy_type_, other->rights_claim_policy_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RightsClaimPolicy::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SamplingRate::InitAsDefaultInstance() {
  ::ern411::ern::_SamplingRate_default_instance_._instance.get_mutable()->unit_of_measure_ = const_cast< ::ern411::avs::UnitOfFrequency*>(
      ::ern411::avs::UnitOfFrequency::internal_default_instance());
}
class SamplingRate::_Internal {
 public:
  using HasBits = decltype(std::declval<SamplingRate>()._has_bits_);
  static const ::ern411::avs::UnitOfFrequency& unit_of_measure(const SamplingRate* msg);
  static void set_has_unit_of_measure(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ext_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::ern411::avs::UnitOfFrequency&
SamplingRate::_Internal::unit_of_measure(const SamplingRate* msg) {
  return *msg->unit_of_measure_;
}
void SamplingRate::clear_unit_of_measure() {
  if (unit_of_measure_ != nullptr) unit_of_measure_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
SamplingRate::SamplingRate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.SamplingRate)
}
SamplingRate::SamplingRate(const SamplingRate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_unit_of_measure()) {
    unit_of_measure_ = new ::ern411::avs::UnitOfFrequency(*from.unit_of_measure_);
  } else {
    unit_of_measure_ = nullptr;
  }
  ext_value_ = from.ext_value_;
  // @@protoc_insertion_point(copy_constructor:ern411.ern.SamplingRate)
}

void SamplingRate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SamplingRate_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  ::memset(&unit_of_measure_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ext_value_) -
      reinterpret_cast<char*>(&unit_of_measure_)) + sizeof(ext_value_));
}

SamplingRate::~SamplingRate() {
  // @@protoc_insertion_point(destructor:ern411.ern.SamplingRate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SamplingRate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete unit_of_measure_;
}

void SamplingRate::ArenaDtor(void* object) {
  SamplingRate* _this = reinterpret_cast< SamplingRate* >(object);
  (void)_this;
}
void SamplingRate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SamplingRate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SamplingRate& SamplingRate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SamplingRate_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void SamplingRate::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.SamplingRate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(unit_of_measure_ != nullptr);
    unit_of_measure_->Clear();
  }
  ext_value_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SamplingRate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ern411.avs.UnitOfFrequency unit_of_measure = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_unit_of_measure(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double ext_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_ext_value(&has_bits);
          ext_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SamplingRate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.SamplingRate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ern411.avs.UnitOfFrequency unit_of_measure = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::unit_of_measure(this), target, stream);
  }

  // optional double ext_value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_ext_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.SamplingRate)
  return target;
}

size_t SamplingRate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.SamplingRate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .ern411.avs.UnitOfFrequency unit_of_measure = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *unit_of_measure_);
    }

    // optional double ext_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SamplingRate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.SamplingRate)
  GOOGLE_DCHECK_NE(&from, this);
  const SamplingRate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SamplingRate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.SamplingRate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.SamplingRate)
    MergeFrom(*source);
  }
}

void SamplingRate::MergeFrom(const SamplingRate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.SamplingRate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_unit_of_measure()->::ern411::avs::UnitOfFrequency::MergeFrom(from._internal_unit_of_measure());
    }
    if (cached_has_bits & 0x00000002u) {
      ext_value_ = from.ext_value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SamplingRate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.SamplingRate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SamplingRate::CopyFrom(const SamplingRate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.SamplingRate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SamplingRate::IsInitialized() const {
  return true;
}

void SamplingRate::InternalSwap(SamplingRate* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SamplingRate, ext_value_)
      + sizeof(SamplingRate::ext_value_)
      - PROTOBUF_FIELD_OFFSET(SamplingRate, unit_of_measure_)>(
          reinterpret_cast<char*>(&unit_of_measure_),
          reinterpret_cast<char*>(&other->unit_of_measure_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SamplingRate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SheetMusic::InitAsDefaultInstance() {
  ::ern411::ern::_SheetMusic_default_instance_._instance.get_mutable()->creation_date_ = const_cast< ::ern411::ern::EventDateWithoutFlags*>(
      ::ern411::ern::EventDateWithoutFlags::internal_default_instance());
  ::ern411::ern::_SheetMusic_default_instance_._instance.get_mutable()->language_of_lyrics_ = const_cast< ::ern411::avs::IsoLanguageCode*>(
      ::ern411::avs::IsoLanguageCode::internal_default_instance());
  ::ern411::ern::_SheetMusic_default_instance_._instance.get_mutable()->resource_contained_resource_reference_list_ = const_cast< ::ern411::ern::ResourceContainedResourceReferenceList*>(
      ::ern411::ern::ResourceContainedResourceReferenceList::internal_default_instance());
  ::ern411::ern::_SheetMusic_default_instance_._instance.get_mutable()->type_ = const_cast< ::ern411::ern::SheetMusicType*>(
      ::ern411::ern::SheetMusicType::internal_default_instance());
}
class SheetMusic::_Internal {
 public:
  using HasBits = decltype(std::declval<SheetMusic>()._has_bits_);
  static void set_has_contains_hidden_content(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::ern411::ern::EventDateWithoutFlags& creation_date(const SheetMusic* msg);
  static void set_has_creation_date(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_supplemental(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_language_and_script_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ern411::avs::IsoLanguageCode& language_of_lyrics(const SheetMusic* msg);
  static void set_has_language_of_lyrics(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::ern411::ern::ResourceContainedResourceReferenceList& resource_contained_resource_reference_list(const SheetMusic* msg);
  static void set_has_resource_contained_resource_reference_list(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_resource_reference(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::ern411::ern::SheetMusicType& type(const SheetMusic* msg);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::ern411::ern::EventDateWithoutFlags&
SheetMusic::_Internal::creation_date(const SheetMusic* msg) {
  return *msg->creation_date_;
}
const ::ern411::avs::IsoLanguageCode&
SheetMusic::_Internal::language_of_lyrics(const SheetMusic* msg) {
  return *msg->language_of_lyrics_;
}
const ::ern411::ern::ResourceContainedResourceReferenceList&
SheetMusic::_Internal::resource_contained_resource_reference_list(const SheetMusic* msg) {
  return *msg->resource_contained_resource_reference_list_;
}
const ::ern411::ern::SheetMusicType&
SheetMusic::_Internal::type(const SheetMusic* msg) {
  return *msg->type_;
}
void SheetMusic::clear_language_of_lyrics() {
  if (language_of_lyrics_ != nullptr) language_of_lyrics_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
SheetMusic::SheetMusic(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  additional_title_(arena),
  c_line_(arena),
  contributor_(arena),
  courtesy_line_(arena),
  display_artist_(arena),
  display_artist_name_(arena),
  display_title_(arena),
  display_title_text_(arena),
  first_publication_date_(arena),
  parental_warning_type_(arena),
  related_release_(arena),
  related_resource_(arena),
  resource_id_(arena),
  resource_rights_controller_(arena),
  technical_details_(arena),
  version_type_(arena),
  work_id_(arena),
  work_rights_controller_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.SheetMusic)
}
SheetMusic::SheetMusic(const SheetMusic& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      additional_title_(from.additional_title_),
      c_line_(from.c_line_),
      contributor_(from.contributor_),
      courtesy_line_(from.courtesy_line_),
      display_artist_(from.display_artist_),
      display_artist_name_(from.display_artist_name_),
      display_title_(from.display_title_),
      display_title_text_(from.display_title_text_),
      first_publication_date_(from.first_publication_date_),
      parental_warning_type_(from.parental_warning_type_),
      related_release_(from.related_release_),
      related_resource_(from.related_resource_),
      resource_id_(from.resource_id_),
      resource_rights_controller_(from.resource_rights_controller_),
      technical_details_(from.technical_details_),
      version_type_(from.version_type_),
      work_id_(from.work_id_),
      work_rights_controller_(from.work_rights_controller_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  language_and_script_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_language_and_script_code()) {
    language_and_script_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_language_and_script_code(),
      GetArena());
  }
  resource_reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_resource_reference()) {
    resource_reference_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_resource_reference(),
      GetArena());
  }
  if (from._internal_has_creation_date()) {
    creation_date_ = new ::ern411::ern::EventDateWithoutFlags(*from.creation_date_);
  } else {
    creation_date_ = nullptr;
  }
  if (from._internal_has_language_of_lyrics()) {
    language_of_lyrics_ = new ::ern411::avs::IsoLanguageCode(*from.language_of_lyrics_);
  } else {
    language_of_lyrics_ = nullptr;
  }
  if (from._internal_has_resource_contained_resource_reference_list()) {
    resource_contained_resource_reference_list_ = new ::ern411::ern::ResourceContainedResourceReferenceList(*from.resource_contained_resource_reference_list_);
  } else {
    resource_contained_resource_reference_list_ = nullptr;
  }
  if (from._internal_has_type()) {
    type_ = new ::ern411::ern::SheetMusicType(*from.type_);
  } else {
    type_ = nullptr;
  }
  ::memcpy(&contains_hidden_content_, &from.contains_hidden_content_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_supplemental_) -
    reinterpret_cast<char*>(&contains_hidden_content_)) + sizeof(is_supplemental_));
  // @@protoc_insertion_point(copy_constructor:ern411.ern.SheetMusic)
}

void SheetMusic::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SheetMusic_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  language_and_script_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resource_reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&creation_date_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_supplemental_) -
      reinterpret_cast<char*>(&creation_date_)) + sizeof(is_supplemental_));
}

SheetMusic::~SheetMusic() {
  // @@protoc_insertion_point(destructor:ern411.ern.SheetMusic)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SheetMusic::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  language_and_script_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resource_reference_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete creation_date_;
  if (this != internal_default_instance()) delete language_of_lyrics_;
  if (this != internal_default_instance()) delete resource_contained_resource_reference_list_;
  if (this != internal_default_instance()) delete type_;
}

void SheetMusic::ArenaDtor(void* object) {
  SheetMusic* _this = reinterpret_cast< SheetMusic* >(object);
  (void)_this;
}
void SheetMusic::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SheetMusic::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SheetMusic& SheetMusic::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SheetMusic_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void SheetMusic::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.SheetMusic)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  additional_title_.Clear();
  c_line_.Clear();
  contributor_.Clear();
  courtesy_line_.Clear();
  display_artist_.Clear();
  display_artist_name_.Clear();
  display_title_.Clear();
  display_title_text_.Clear();
  first_publication_date_.Clear();
  parental_warning_type_.Clear();
  related_release_.Clear();
  related_resource_.Clear();
  resource_id_.Clear();
  resource_rights_controller_.Clear();
  technical_details_.Clear();
  version_type_.Clear();
  work_id_.Clear();
  work_rights_controller_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      language_and_script_code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      resource_reference_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(creation_date_ != nullptr);
      creation_date_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(language_of_lyrics_ != nullptr);
      language_of_lyrics_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(resource_contained_resource_reference_list_ != nullptr);
      resource_contained_resource_reference_list_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(type_ != nullptr);
      type_->Clear();
    }
  }
  ::memset(&contains_hidden_content_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_supplemental_) -
      reinterpret_cast<char*>(&contains_hidden_content_)) + sizeof(is_supplemental_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SheetMusic::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ern411.ern.AdditionalTitle additional_title = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_additional_title(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.CLineWithDefault c_line = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_c_line(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool contains_hidden_content = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_contains_hidden_content(&has_bits);
          contains_hidden_content_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.Contributor contributor = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_contributor(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.CourtesyLineWithDefault courtesy_line = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_courtesy_line(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .ern411.ern.EventDateWithoutFlags creation_date = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_creation_date(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.DisplayArtist display_artist = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_display_artist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.DisplayArtistNameWithDefault display_artist_name = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_display_artist_name(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.DisplayTitle display_title = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_display_title(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.DisplayTitleText display_title_text = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_display_title_text(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.FulfillmentDateWithTerritory first_publication_date = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_first_publication_date(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool is_supplemental = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_is_supplemental(&has_bits);
          is_supplemental_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string language_and_script_code = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_language_and_script_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.SheetMusic.language_and_script_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.avs.IsoLanguageCode language_of_lyrics = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_language_of_lyrics(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.ParentalWarningTypeWithTerritory parental_warning_type = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_parental_warning_type(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.RelatedRelease related_release = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_related_release(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<130>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.RelatedResource related_resource = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_related_resource(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<138>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .ern411.ern.ResourceContainedResourceReferenceList resource_contained_resource_reference_list = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_resource_contained_resource_reference_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.SheetMusicId resource_id = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_resource_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<154>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string resource_reference = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_resource_reference();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.SheetMusic.resource_reference");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.ResourceRightsController resource_rights_controller = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_resource_rights_controller(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<170>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.TechnicalSheetMusicDetails technical_details = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_technical_details(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<178>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .ern411.ern.SheetMusicType type = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.VersionType version_type = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_version_type(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<194>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.MusicalWorkId work_id = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_work_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<202>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.WorkRightsController work_rights_controller = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_work_rights_controller(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<210>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SheetMusic::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.SheetMusic)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ern411.ern.AdditionalTitle additional_title = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_additional_title_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_additional_title(i), target, stream);
  }

  // repeated .ern411.ern.CLineWithDefault c_line = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_c_line_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_c_line(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool contains_hidden_content = 3;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_contains_hidden_content(), target);
  }

  // repeated .ern411.ern.Contributor contributor = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_contributor_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_contributor(i), target, stream);
  }

  // repeated .ern411.ern.CourtesyLineWithDefault courtesy_line = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_courtesy_line_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_courtesy_line(i), target, stream);
  }

  // optional .ern411.ern.EventDateWithoutFlags creation_date = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::creation_date(this), target, stream);
  }

  // repeated .ern411.ern.DisplayArtist display_artist = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_display_artist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_display_artist(i), target, stream);
  }

  // repeated .ern411.ern.DisplayArtistNameWithDefault display_artist_name = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_display_artist_name_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_display_artist_name(i), target, stream);
  }

  // repeated .ern411.ern.DisplayTitle display_title = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_display_title_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_display_title(i), target, stream);
  }

  // repeated .ern411.ern.DisplayTitleText display_title_text = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_display_title_text_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_display_title_text(i), target, stream);
  }

  // repeated .ern411.ern.FulfillmentDateWithTerritory first_publication_date = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_first_publication_date_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_first_publication_date(i), target, stream);
  }

  // optional bool is_supplemental = 12;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_is_supplemental(), target);
  }

  // optional string language_and_script_code = 13;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_language_and_script_code().data(), static_cast<int>(this->_internal_language_and_script_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.SheetMusic.language_and_script_code");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_language_and_script_code(), target);
  }

  // optional .ern411.avs.IsoLanguageCode language_of_lyrics = 14;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::language_of_lyrics(this), target, stream);
  }

  // repeated .ern411.ern.ParentalWarningTypeWithTerritory parental_warning_type = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_parental_warning_type_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, this->_internal_parental_warning_type(i), target, stream);
  }

  // repeated .ern411.ern.RelatedRelease related_release = 16;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_related_release_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, this->_internal_related_release(i), target, stream);
  }

  // repeated .ern411.ern.RelatedResource related_resource = 17;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_related_resource_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, this->_internal_related_resource(i), target, stream);
  }

  // optional .ern411.ern.ResourceContainedResourceReferenceList resource_contained_resource_reference_list = 18;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::resource_contained_resource_reference_list(this), target, stream);
  }

  // repeated .ern411.ern.SheetMusicId resource_id = 19;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_resource_id_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(19, this->_internal_resource_id(i), target, stream);
  }

  // optional string resource_reference = 20;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_resource_reference().data(), static_cast<int>(this->_internal_resource_reference().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.SheetMusic.resource_reference");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_resource_reference(), target);
  }

  // repeated .ern411.ern.ResourceRightsController resource_rights_controller = 21;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_resource_rights_controller_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, this->_internal_resource_rights_controller(i), target, stream);
  }

  // repeated .ern411.ern.TechnicalSheetMusicDetails technical_details = 22;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_technical_details_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(22, this->_internal_technical_details(i), target, stream);
  }

  // optional .ern411.ern.SheetMusicType type = 23;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        23, _Internal::type(this), target, stream);
  }

  // repeated .ern411.ern.VersionType version_type = 24;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_version_type_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(24, this->_internal_version_type(i), target, stream);
  }

  // repeated .ern411.ern.MusicalWorkId work_id = 25;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_work_id_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(25, this->_internal_work_id(i), target, stream);
  }

  // repeated .ern411.ern.WorkRightsController work_rights_controller = 26;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_work_rights_controller_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(26, this->_internal_work_rights_controller(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.SheetMusic)
  return target;
}

size_t SheetMusic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.SheetMusic)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ern411.ern.AdditionalTitle additional_title = 1;
  total_size += 1UL * this->_internal_additional_title_size();
  for (const auto& msg : this->additional_title_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.CLineWithDefault c_line = 2;
  total_size += 1UL * this->_internal_c_line_size();
  for (const auto& msg : this->c_line_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.Contributor contributor = 4;
  total_size += 1UL * this->_internal_contributor_size();
  for (const auto& msg : this->contributor_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.CourtesyLineWithDefault courtesy_line = 5;
  total_size += 1UL * this->_internal_courtesy_line_size();
  for (const auto& msg : this->courtesy_line_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.DisplayArtist display_artist = 7;
  total_size += 1UL * this->_internal_display_artist_size();
  for (const auto& msg : this->display_artist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.DisplayArtistNameWithDefault display_artist_name = 8;
  total_size += 1UL * this->_internal_display_artist_name_size();
  for (const auto& msg : this->display_artist_name_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.DisplayTitle display_title = 9;
  total_size += 1UL * this->_internal_display_title_size();
  for (const auto& msg : this->display_title_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.DisplayTitleText display_title_text = 10;
  total_size += 1UL * this->_internal_display_title_text_size();
  for (const auto& msg : this->display_title_text_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.FulfillmentDateWithTerritory first_publication_date = 11;
  total_size += 1UL * this->_internal_first_publication_date_size();
  for (const auto& msg : this->first_publication_date_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.ParentalWarningTypeWithTerritory parental_warning_type = 15;
  total_size += 1UL * this->_internal_parental_warning_type_size();
  for (const auto& msg : this->parental_warning_type_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.RelatedRelease related_release = 16;
  total_size += 2UL * this->_internal_related_release_size();
  for (const auto& msg : this->related_release_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.RelatedResource related_resource = 17;
  total_size += 2UL * this->_internal_related_resource_size();
  for (const auto& msg : this->related_resource_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.SheetMusicId resource_id = 19;
  total_size += 2UL * this->_internal_resource_id_size();
  for (const auto& msg : this->resource_id_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.ResourceRightsController resource_rights_controller = 21;
  total_size += 2UL * this->_internal_resource_rights_controller_size();
  for (const auto& msg : this->resource_rights_controller_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.TechnicalSheetMusicDetails technical_details = 22;
  total_size += 2UL * this->_internal_technical_details_size();
  for (const auto& msg : this->technical_details_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.VersionType version_type = 24;
  total_size += 2UL * this->_internal_version_type_size();
  for (const auto& msg : this->version_type_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.MusicalWorkId work_id = 25;
  total_size += 2UL * this->_internal_work_id_size();
  for (const auto& msg : this->work_id_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.WorkRightsController work_rights_controller = 26;
  total_size += 2UL * this->_internal_work_rights_controller_size();
  for (const auto& msg : this->work_rights_controller_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string language_and_script_code = 13;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_language_and_script_code());
    }

    // optional string resource_reference = 20;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_resource_reference());
    }

    // optional .ern411.ern.EventDateWithoutFlags creation_date = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *creation_date_);
    }

    // optional .ern411.avs.IsoLanguageCode language_of_lyrics = 14;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *language_of_lyrics_);
    }

    // optional .ern411.ern.ResourceContainedResourceReferenceList resource_contained_resource_reference_list = 18;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *resource_contained_resource_reference_list_);
    }

    // optional .ern411.ern.SheetMusicType type = 23;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_);
    }

    // optional bool contains_hidden_content = 3;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool is_supplemental = 12;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SheetMusic::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.SheetMusic)
  GOOGLE_DCHECK_NE(&from, this);
  const SheetMusic* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SheetMusic>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.SheetMusic)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.SheetMusic)
    MergeFrom(*source);
  }
}

void SheetMusic::MergeFrom(const SheetMusic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.SheetMusic)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  additional_title_.MergeFrom(from.additional_title_);
  c_line_.MergeFrom(from.c_line_);
  contributor_.MergeFrom(from.contributor_);
  courtesy_line_.MergeFrom(from.courtesy_line_);
  display_artist_.MergeFrom(from.display_artist_);
  display_artist_name_.MergeFrom(from.display_artist_name_);
  display_title_.MergeFrom(from.display_title_);
  display_title_text_.MergeFrom(from.display_title_text_);
  first_publication_date_.MergeFrom(from.first_publication_date_);
  parental_warning_type_.MergeFrom(from.parental_warning_type_);
  related_release_.MergeFrom(from.related_release_);
  related_resource_.MergeFrom(from.related_resource_);
  resource_id_.MergeFrom(from.resource_id_);
  resource_rights_controller_.MergeFrom(from.resource_rights_controller_);
  technical_details_.MergeFrom(from.technical_details_);
  version_type_.MergeFrom(from.version_type_);
  work_id_.MergeFrom(from.work_id_);
  work_rights_controller_.MergeFrom(from.work_rights_controller_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_language_and_script_code(from._internal_language_and_script_code());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_resource_reference(from._internal_resource_reference());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_creation_date()->::ern411::ern::EventDateWithoutFlags::MergeFrom(from._internal_creation_date());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_language_of_lyrics()->::ern411::avs::IsoLanguageCode::MergeFrom(from._internal_language_of_lyrics());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_resource_contained_resource_reference_list()->::ern411::ern::ResourceContainedResourceReferenceList::MergeFrom(from._internal_resource_contained_resource_reference_list());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_type()->::ern411::ern::SheetMusicType::MergeFrom(from._internal_type());
    }
    if (cached_has_bits & 0x00000040u) {
      contains_hidden_content_ = from.contains_hidden_content_;
    }
    if (cached_has_bits & 0x00000080u) {
      is_supplemental_ = from.is_supplemental_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SheetMusic::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.SheetMusic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SheetMusic::CopyFrom(const SheetMusic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.SheetMusic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SheetMusic::IsInitialized() const {
  return true;
}

void SheetMusic::InternalSwap(SheetMusic* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  additional_title_.InternalSwap(&other->additional_title_);
  c_line_.InternalSwap(&other->c_line_);
  contributor_.InternalSwap(&other->contributor_);
  courtesy_line_.InternalSwap(&other->courtesy_line_);
  display_artist_.InternalSwap(&other->display_artist_);
  display_artist_name_.InternalSwap(&other->display_artist_name_);
  display_title_.InternalSwap(&other->display_title_);
  display_title_text_.InternalSwap(&other->display_title_text_);
  first_publication_date_.InternalSwap(&other->first_publication_date_);
  parental_warning_type_.InternalSwap(&other->parental_warning_type_);
  related_release_.InternalSwap(&other->related_release_);
  related_resource_.InternalSwap(&other->related_resource_);
  resource_id_.InternalSwap(&other->resource_id_);
  resource_rights_controller_.InternalSwap(&other->resource_rights_controller_);
  technical_details_.InternalSwap(&other->technical_details_);
  version_type_.InternalSwap(&other->version_type_);
  work_id_.InternalSwap(&other->work_id_);
  work_rights_controller_.InternalSwap(&other->work_rights_controller_);
  language_and_script_code_.Swap(&other->language_and_script_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  resource_reference_.Swap(&other->resource_reference_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SheetMusic, is_supplemental_)
      + sizeof(SheetMusic::is_supplemental_)
      - PROTOBUF_FIELD_OFFSET(SheetMusic, creation_date_)>(
          reinterpret_cast<char*>(&creation_date_),
          reinterpret_cast<char*>(&other->creation_date_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SheetMusic::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SheetMusicCodecType::InitAsDefaultInstance() {
  ::ern411::ern::_SheetMusicCodecType_default_instance_._instance.get_mutable()->ext_value_ = const_cast< ::ern411::avs::SheetMusicCodecType*>(
      ::ern411::avs::SheetMusicCodecType::internal_default_instance());
}
class SheetMusicCodecType::_Internal {
 public:
  using HasBits = decltype(std::declval<SheetMusicCodecType>()._has_bits_);
  static void set_has_namespace_(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_user_defined_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::ern411::avs::SheetMusicCodecType& ext_value(const SheetMusicCodecType* msg);
  static void set_has_ext_value(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::ern411::avs::SheetMusicCodecType&
SheetMusicCodecType::_Internal::ext_value(const SheetMusicCodecType* msg) {
  return *msg->ext_value_;
}
void SheetMusicCodecType::clear_ext_value() {
  if (ext_value_ != nullptr) ext_value_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
SheetMusicCodecType::SheetMusicCodecType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.SheetMusicCodecType)
}
SheetMusicCodecType::SheetMusicCodecType(const SheetMusicCodecType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_namespace_()) {
    namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_namespace_(),
      GetArena());
  }
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_user_defined_value()) {
    user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_defined_value(),
      GetArena());
  }
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_version()) {
    version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_version(),
      GetArena());
  }
  if (from._internal_has_ext_value()) {
    ext_value_ = new ::ern411::avs::SheetMusicCodecType(*from.ext_value_);
  } else {
    ext_value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ern411.ern.SheetMusicCodecType)
}

void SheetMusicCodecType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SheetMusicCodecType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ext_value_ = nullptr;
}

SheetMusicCodecType::~SheetMusicCodecType() {
  // @@protoc_insertion_point(destructor:ern411.ern.SheetMusicCodecType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SheetMusicCodecType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  namespace__.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ext_value_;
}

void SheetMusicCodecType::ArenaDtor(void* object) {
  SheetMusicCodecType* _this = reinterpret_cast< SheetMusicCodecType* >(object);
  (void)_this;
}
void SheetMusicCodecType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SheetMusicCodecType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SheetMusicCodecType& SheetMusicCodecType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SheetMusicCodecType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void SheetMusicCodecType::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.SheetMusicCodecType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      namespace__.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      user_defined_value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      version_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(ext_value_ != nullptr);
      ext_value_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SheetMusicCodecType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string namespace = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_namespace_();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.SheetMusicCodecType.namespace");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string user_defined_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_user_defined_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.SheetMusicCodecType.user_defined_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.SheetMusicCodecType.version");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.avs.SheetMusicCodecType ext_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SheetMusicCodecType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.SheetMusicCodecType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string namespace = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_namespace_().data(), static_cast<int>(this->_internal_namespace_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.SheetMusicCodecType.namespace");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_namespace_(), target);
  }

  // optional string user_defined_value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_user_defined_value().data(), static_cast<int>(this->_internal_user_defined_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.SheetMusicCodecType.user_defined_value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_defined_value(), target);
  }

  // optional string version = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.SheetMusicCodecType.version");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_version(), target);
  }

  // optional .ern411.avs.SheetMusicCodecType ext_value = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::ext_value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.SheetMusicCodecType)
  return target;
}

size_t SheetMusicCodecType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.SheetMusicCodecType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string namespace = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_namespace_());
    }

    // optional string user_defined_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_defined_value());
    }

    // optional string version = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_version());
    }

    // optional .ern411.avs.SheetMusicCodecType ext_value = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ext_value_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SheetMusicCodecType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.SheetMusicCodecType)
  GOOGLE_DCHECK_NE(&from, this);
  const SheetMusicCodecType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SheetMusicCodecType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.SheetMusicCodecType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.SheetMusicCodecType)
    MergeFrom(*source);
  }
}

void SheetMusicCodecType::MergeFrom(const SheetMusicCodecType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.SheetMusicCodecType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_namespace_(from._internal_namespace_());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_user_defined_value(from._internal_user_defined_value());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_version(from._internal_version());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_ext_value()->::ern411::avs::SheetMusicCodecType::MergeFrom(from._internal_ext_value());
    }
  }
}

void SheetMusicCodecType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.SheetMusicCodecType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SheetMusicCodecType::CopyFrom(const SheetMusicCodecType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.SheetMusicCodecType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SheetMusicCodecType::IsInitialized() const {
  return true;
}

void SheetMusicCodecType::InternalSwap(SheetMusicCodecType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  namespace__.Swap(&other->namespace__, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_defined_value_.Swap(&other->user_defined_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  version_.Swap(&other->version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(ext_value_, other->ext_value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SheetMusicCodecType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SheetMusicId::InitAsDefaultInstance() {
}
class SheetMusicId::_Internal {
 public:
  using HasBits = decltype(std::declval<SheetMusicId>()._has_bits_);
  static void set_has_i_s_m_n(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_replaced(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

SheetMusicId::SheetMusicId(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  proprietary_id_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.SheetMusicId)
}
SheetMusicId::SheetMusicId(const SheetMusicId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      proprietary_id_(from.proprietary_id_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  i_s_m_n_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_i_s_m_n()) {
    i_s_m_n_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_i_s_m_n(),
      GetArena());
  }
  is_replaced_ = from.is_replaced_;
  // @@protoc_insertion_point(copy_constructor:ern411.ern.SheetMusicId)
}

void SheetMusicId::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SheetMusicId_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  i_s_m_n_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  is_replaced_ = false;
}

SheetMusicId::~SheetMusicId() {
  // @@protoc_insertion_point(destructor:ern411.ern.SheetMusicId)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SheetMusicId::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  i_s_m_n_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SheetMusicId::ArenaDtor(void* object) {
  SheetMusicId* _this = reinterpret_cast< SheetMusicId* >(object);
  (void)_this;
}
void SheetMusicId::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SheetMusicId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SheetMusicId& SheetMusicId::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SheetMusicId_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void SheetMusicId::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.SheetMusicId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  proprietary_id_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    i_s_m_n_.ClearNonDefaultToEmpty();
  }
  is_replaced_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SheetMusicId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string i_s_m_n = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_i_s_m_n();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.SheetMusicId.i_s_m_n");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_replaced = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_is_replaced(&has_bits);
          is_replaced_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.ProprietaryId proprietary_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_proprietary_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SheetMusicId::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.SheetMusicId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string i_s_m_n = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_i_s_m_n().data(), static_cast<int>(this->_internal_i_s_m_n().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.SheetMusicId.i_s_m_n");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_i_s_m_n(), target);
  }

  // optional bool is_replaced = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_replaced(), target);
  }

  // repeated .ern411.ern.ProprietaryId proprietary_id = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_proprietary_id_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_proprietary_id(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.SheetMusicId)
  return target;
}

size_t SheetMusicId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.SheetMusicId)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ern411.ern.ProprietaryId proprietary_id = 3;
  total_size += 1UL * this->_internal_proprietary_id_size();
  for (const auto& msg : this->proprietary_id_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string i_s_m_n = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_i_s_m_n());
    }

    // optional bool is_replaced = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SheetMusicId::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.SheetMusicId)
  GOOGLE_DCHECK_NE(&from, this);
  const SheetMusicId* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SheetMusicId>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.SheetMusicId)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.SheetMusicId)
    MergeFrom(*source);
  }
}

void SheetMusicId::MergeFrom(const SheetMusicId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.SheetMusicId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  proprietary_id_.MergeFrom(from.proprietary_id_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_i_s_m_n(from._internal_i_s_m_n());
    }
    if (cached_has_bits & 0x00000002u) {
      is_replaced_ = from.is_replaced_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SheetMusicId::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.SheetMusicId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SheetMusicId::CopyFrom(const SheetMusicId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.SheetMusicId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SheetMusicId::IsInitialized() const {
  return true;
}

void SheetMusicId::InternalSwap(SheetMusicId* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  proprietary_id_.InternalSwap(&other->proprietary_id_);
  i_s_m_n_.Swap(&other->i_s_m_n_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(is_replaced_, other->is_replaced_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SheetMusicId::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SheetMusicType::InitAsDefaultInstance() {
  ::ern411::ern::_SheetMusicType_default_instance_._instance.get_mutable()->ext_value_ = const_cast< ::ern411::avs::SheetMusicType*>(
      ::ern411::avs::SheetMusicType::internal_default_instance());
}
class SheetMusicType::_Internal {
 public:
  using HasBits = decltype(std::declval<SheetMusicType>()._has_bits_);
  static void set_has_namespace_(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_user_defined_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::ern411::avs::SheetMusicType& ext_value(const SheetMusicType* msg);
  static void set_has_ext_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::ern411::avs::SheetMusicType&
SheetMusicType::_Internal::ext_value(const SheetMusicType* msg) {
  return *msg->ext_value_;
}
void SheetMusicType::clear_ext_value() {
  if (ext_value_ != nullptr) ext_value_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
SheetMusicType::SheetMusicType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.SheetMusicType)
}
SheetMusicType::SheetMusicType(const SheetMusicType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_namespace_()) {
    namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_namespace_(),
      GetArena());
  }
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_user_defined_value()) {
    user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_defined_value(),
      GetArena());
  }
  if (from._internal_has_ext_value()) {
    ext_value_ = new ::ern411::avs::SheetMusicType(*from.ext_value_);
  } else {
    ext_value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ern411.ern.SheetMusicType)
}

void SheetMusicType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SheetMusicType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ext_value_ = nullptr;
}

SheetMusicType::~SheetMusicType() {
  // @@protoc_insertion_point(destructor:ern411.ern.SheetMusicType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SheetMusicType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  namespace__.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ext_value_;
}

void SheetMusicType::ArenaDtor(void* object) {
  SheetMusicType* _this = reinterpret_cast< SheetMusicType* >(object);
  (void)_this;
}
void SheetMusicType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SheetMusicType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SheetMusicType& SheetMusicType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SheetMusicType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void SheetMusicType::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.SheetMusicType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      namespace__.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      user_defined_value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(ext_value_ != nullptr);
      ext_value_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SheetMusicType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string namespace = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_namespace_();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.SheetMusicType.namespace");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string user_defined_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_user_defined_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.SheetMusicType.user_defined_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.avs.SheetMusicType ext_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SheetMusicType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.SheetMusicType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string namespace = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_namespace_().data(), static_cast<int>(this->_internal_namespace_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.SheetMusicType.namespace");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_namespace_(), target);
  }

  // optional string user_defined_value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_user_defined_value().data(), static_cast<int>(this->_internal_user_defined_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.SheetMusicType.user_defined_value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_defined_value(), target);
  }

  // optional .ern411.avs.SheetMusicType ext_value = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::ext_value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.SheetMusicType)
  return target;
}

size_t SheetMusicType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.SheetMusicType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string namespace = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_namespace_());
    }

    // optional string user_defined_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_defined_value());
    }

    // optional .ern411.avs.SheetMusicType ext_value = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ext_value_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SheetMusicType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.SheetMusicType)
  GOOGLE_DCHECK_NE(&from, this);
  const SheetMusicType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SheetMusicType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.SheetMusicType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.SheetMusicType)
    MergeFrom(*source);
  }
}

void SheetMusicType::MergeFrom(const SheetMusicType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.SheetMusicType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_namespace_(from._internal_namespace_());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_user_defined_value(from._internal_user_defined_value());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_ext_value()->::ern411::avs::SheetMusicType::MergeFrom(from._internal_ext_value());
    }
  }
}

void SheetMusicType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.SheetMusicType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SheetMusicType::CopyFrom(const SheetMusicType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.SheetMusicType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SheetMusicType::IsInitialized() const {
  return true;
}

void SheetMusicType::InternalSwap(SheetMusicType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  namespace__.Swap(&other->namespace__, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_defined_value_.Swap(&other->user_defined_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(ext_value_, other->ext_value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SheetMusicType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SimpleRightsType::InitAsDefaultInstance() {
  ::ern411::ern::_SimpleRightsType_default_instance_._instance.get_mutable()->ext_value_ = const_cast< ::ern411::avs::RightsCoverage*>(
      ::ern411::avs::RightsCoverage::internal_default_instance());
}
class SimpleRightsType::_Internal {
 public:
  using HasBits = decltype(std::declval<SimpleRightsType>()._has_bits_);
  static void set_has_namespace_(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_user_defined_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::ern411::avs::RightsCoverage& ext_value(const SimpleRightsType* msg);
  static void set_has_ext_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::ern411::avs::RightsCoverage&
SimpleRightsType::_Internal::ext_value(const SimpleRightsType* msg) {
  return *msg->ext_value_;
}
void SimpleRightsType::clear_ext_value() {
  if (ext_value_ != nullptr) ext_value_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
SimpleRightsType::SimpleRightsType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.SimpleRightsType)
}
SimpleRightsType::SimpleRightsType(const SimpleRightsType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_namespace_()) {
    namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_namespace_(),
      GetArena());
  }
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_user_defined_value()) {
    user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_defined_value(),
      GetArena());
  }
  if (from._internal_has_ext_value()) {
    ext_value_ = new ::ern411::avs::RightsCoverage(*from.ext_value_);
  } else {
    ext_value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ern411.ern.SimpleRightsType)
}

void SimpleRightsType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SimpleRightsType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ext_value_ = nullptr;
}

SimpleRightsType::~SimpleRightsType() {
  // @@protoc_insertion_point(destructor:ern411.ern.SimpleRightsType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SimpleRightsType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  namespace__.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ext_value_;
}

void SimpleRightsType::ArenaDtor(void* object) {
  SimpleRightsType* _this = reinterpret_cast< SimpleRightsType* >(object);
  (void)_this;
}
void SimpleRightsType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SimpleRightsType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SimpleRightsType& SimpleRightsType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SimpleRightsType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void SimpleRightsType::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.SimpleRightsType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      namespace__.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      user_defined_value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(ext_value_ != nullptr);
      ext_value_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SimpleRightsType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string namespace = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_namespace_();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.SimpleRightsType.namespace");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string user_defined_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_user_defined_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.SimpleRightsType.user_defined_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.avs.RightsCoverage ext_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SimpleRightsType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.SimpleRightsType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string namespace = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_namespace_().data(), static_cast<int>(this->_internal_namespace_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.SimpleRightsType.namespace");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_namespace_(), target);
  }

  // optional string user_defined_value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_user_defined_value().data(), static_cast<int>(this->_internal_user_defined_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.SimpleRightsType.user_defined_value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_defined_value(), target);
  }

  // optional .ern411.avs.RightsCoverage ext_value = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::ext_value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.SimpleRightsType)
  return target;
}

size_t SimpleRightsType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.SimpleRightsType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string namespace = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_namespace_());
    }

    // optional string user_defined_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_defined_value());
    }

    // optional .ern411.avs.RightsCoverage ext_value = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ext_value_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SimpleRightsType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.SimpleRightsType)
  GOOGLE_DCHECK_NE(&from, this);
  const SimpleRightsType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SimpleRightsType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.SimpleRightsType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.SimpleRightsType)
    MergeFrom(*source);
  }
}

void SimpleRightsType::MergeFrom(const SimpleRightsType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.SimpleRightsType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_namespace_(from._internal_namespace_());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_user_defined_value(from._internal_user_defined_value());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_ext_value()->::ern411::avs::RightsCoverage::MergeFrom(from._internal_ext_value());
    }
  }
}

void SimpleRightsType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.SimpleRightsType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimpleRightsType::CopyFrom(const SimpleRightsType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.SimpleRightsType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimpleRightsType::IsInitialized() const {
  return true;
}

void SimpleRightsType::InternalSwap(SimpleRightsType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  namespace__.Swap(&other->namespace__, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_defined_value_.Swap(&other->user_defined_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(ext_value_, other->ext_value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SimpleRightsType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Software::InitAsDefaultInstance() {
  ::ern411::ern::_Software_default_instance_._instance.get_mutable()->creation_date_ = const_cast< ::ern411::ern::EventDateWithoutFlags*>(
      ::ern411::ern::EventDateWithoutFlags::internal_default_instance());
  ::ern411::ern::_Software_default_instance_._instance.get_mutable()->resource_contained_resource_reference_list_ = const_cast< ::ern411::ern::ResourceContainedResourceReferenceList*>(
      ::ern411::ern::ResourceContainedResourceReferenceList::internal_default_instance());
  ::ern411::ern::_Software_default_instance_._instance.get_mutable()->type_ = const_cast< ::ern411::ern::SoftwareType*>(
      ::ern411::ern::SoftwareType::internal_default_instance());
}
class Software::_Internal {
 public:
  using HasBits = decltype(std::declval<Software>()._has_bits_);
  static void set_has_contains_hidden_content(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::ern411::ern::EventDateWithoutFlags& creation_date(const Software* msg);
  static void set_has_creation_date(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_supplemental(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_language_and_script_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ern411::ern::ResourceContainedResourceReferenceList& resource_contained_resource_reference_list(const Software* msg);
  static void set_has_resource_contained_resource_reference_list(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_resource_reference(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::ern411::ern::SoftwareType& type(const Software* msg);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::ern411::ern::EventDateWithoutFlags&
Software::_Internal::creation_date(const Software* msg) {
  return *msg->creation_date_;
}
const ::ern411::ern::ResourceContainedResourceReferenceList&
Software::_Internal::resource_contained_resource_reference_list(const Software* msg) {
  return *msg->resource_contained_resource_reference_list_;
}
const ::ern411::ern::SoftwareType&
Software::_Internal::type(const Software* msg) {
  return *msg->type_;
}
Software::Software(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  additional_title_(arena),
  c_line_(arena),
  contributor_(arena),
  courtesy_line_(arena),
  display_artist_(arena),
  display_artist_name_(arena),
  display_title_(arena),
  display_title_text_(arena),
  first_publication_date_(arena),
  p_line_(arena),
  parental_warning_type_(arena),
  related_release_(arena),
  related_resource_(arena),
  resource_id_(arena),
  resource_rights_controller_(arena),
  technical_details_(arena),
  version_type_(arena),
  work_id_(arena),
  work_rights_controller_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.Software)
}
Software::Software(const Software& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      additional_title_(from.additional_title_),
      c_line_(from.c_line_),
      contributor_(from.contributor_),
      courtesy_line_(from.courtesy_line_),
      display_artist_(from.display_artist_),
      display_artist_name_(from.display_artist_name_),
      display_title_(from.display_title_),
      display_title_text_(from.display_title_text_),
      first_publication_date_(from.first_publication_date_),
      p_line_(from.p_line_),
      parental_warning_type_(from.parental_warning_type_),
      related_release_(from.related_release_),
      related_resource_(from.related_resource_),
      resource_id_(from.resource_id_),
      resource_rights_controller_(from.resource_rights_controller_),
      technical_details_(from.technical_details_),
      version_type_(from.version_type_),
      work_id_(from.work_id_),
      work_rights_controller_(from.work_rights_controller_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  language_and_script_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_language_and_script_code()) {
    language_and_script_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_language_and_script_code(),
      GetArena());
  }
  resource_reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_resource_reference()) {
    resource_reference_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_resource_reference(),
      GetArena());
  }
  if (from._internal_has_creation_date()) {
    creation_date_ = new ::ern411::ern::EventDateWithoutFlags(*from.creation_date_);
  } else {
    creation_date_ = nullptr;
  }
  if (from._internal_has_resource_contained_resource_reference_list()) {
    resource_contained_resource_reference_list_ = new ::ern411::ern::ResourceContainedResourceReferenceList(*from.resource_contained_resource_reference_list_);
  } else {
    resource_contained_resource_reference_list_ = nullptr;
  }
  if (from._internal_has_type()) {
    type_ = new ::ern411::ern::SoftwareType(*from.type_);
  } else {
    type_ = nullptr;
  }
  ::memcpy(&contains_hidden_content_, &from.contains_hidden_content_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_supplemental_) -
    reinterpret_cast<char*>(&contains_hidden_content_)) + sizeof(is_supplemental_));
  // @@protoc_insertion_point(copy_constructor:ern411.ern.Software)
}

void Software::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Software_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  language_and_script_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resource_reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&creation_date_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_supplemental_) -
      reinterpret_cast<char*>(&creation_date_)) + sizeof(is_supplemental_));
}

Software::~Software() {
  // @@protoc_insertion_point(destructor:ern411.ern.Software)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Software::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  language_and_script_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resource_reference_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete creation_date_;
  if (this != internal_default_instance()) delete resource_contained_resource_reference_list_;
  if (this != internal_default_instance()) delete type_;
}

void Software::ArenaDtor(void* object) {
  Software* _this = reinterpret_cast< Software* >(object);
  (void)_this;
}
void Software::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Software::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Software& Software::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Software_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void Software::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.Software)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  additional_title_.Clear();
  c_line_.Clear();
  contributor_.Clear();
  courtesy_line_.Clear();
  display_artist_.Clear();
  display_artist_name_.Clear();
  display_title_.Clear();
  display_title_text_.Clear();
  first_publication_date_.Clear();
  p_line_.Clear();
  parental_warning_type_.Clear();
  related_release_.Clear();
  related_resource_.Clear();
  resource_id_.Clear();
  resource_rights_controller_.Clear();
  technical_details_.Clear();
  version_type_.Clear();
  work_id_.Clear();
  work_rights_controller_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      language_and_script_code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      resource_reference_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(creation_date_ != nullptr);
      creation_date_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(resource_contained_resource_reference_list_ != nullptr);
      resource_contained_resource_reference_list_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(type_ != nullptr);
      type_->Clear();
    }
  }
  ::memset(&contains_hidden_content_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_supplemental_) -
      reinterpret_cast<char*>(&contains_hidden_content_)) + sizeof(is_supplemental_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Software::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ern411.ern.AdditionalTitle additional_title = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_additional_title(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.CLineWithDefault c_line = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_c_line(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool contains_hidden_content = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_contains_hidden_content(&has_bits);
          contains_hidden_content_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.Contributor contributor = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_contributor(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.CourtesyLineWithDefault courtesy_line = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_courtesy_line(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .ern411.ern.EventDateWithoutFlags creation_date = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_creation_date(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.DisplayArtist display_artist = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_display_artist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.DisplayArtistNameWithDefault display_artist_name = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_display_artist_name(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.DisplayTitle display_title = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_display_title(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.DisplayTitleText display_title_text = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_display_title_text(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.FulfillmentDateWithTerritory first_publication_date = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_first_publication_date(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool is_supplemental = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_is_supplemental(&has_bits);
          is_supplemental_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string language_and_script_code = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_language_and_script_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.Software.language_and_script_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.PLineWithDefault p_line = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_p_line(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.ParentalWarningTypeWithTerritory parental_warning_type = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_parental_warning_type(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.RelatedRelease related_release = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_related_release(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<130>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.RelatedResource related_resource = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_related_resource(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<138>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .ern411.ern.ResourceContainedResourceReferenceList resource_contained_resource_reference_list = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_resource_contained_resource_reference_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.ResourceProprietaryId resource_id = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_resource_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<154>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string resource_reference = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_resource_reference();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.Software.resource_reference");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.ResourceRightsController resource_rights_controller = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_resource_rights_controller(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<170>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.TechnicalSoftwareDetails technical_details = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_technical_details(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<178>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .ern411.ern.SoftwareType type = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.VersionType version_type = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_version_type(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<194>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.MusicalWorkId work_id = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_work_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<202>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.WorkRightsController work_rights_controller = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_work_rights_controller(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<210>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Software::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.Software)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ern411.ern.AdditionalTitle additional_title = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_additional_title_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_additional_title(i), target, stream);
  }

  // repeated .ern411.ern.CLineWithDefault c_line = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_c_line_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_c_line(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool contains_hidden_content = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_contains_hidden_content(), target);
  }

  // repeated .ern411.ern.Contributor contributor = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_contributor_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_contributor(i), target, stream);
  }

  // repeated .ern411.ern.CourtesyLineWithDefault courtesy_line = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_courtesy_line_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_courtesy_line(i), target, stream);
  }

  // optional .ern411.ern.EventDateWithoutFlags creation_date = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::creation_date(this), target, stream);
  }

  // repeated .ern411.ern.DisplayArtist display_artist = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_display_artist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_display_artist(i), target, stream);
  }

  // repeated .ern411.ern.DisplayArtistNameWithDefault display_artist_name = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_display_artist_name_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_display_artist_name(i), target, stream);
  }

  // repeated .ern411.ern.DisplayTitle display_title = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_display_title_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_display_title(i), target, stream);
  }

  // repeated .ern411.ern.DisplayTitleText display_title_text = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_display_title_text_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_display_title_text(i), target, stream);
  }

  // repeated .ern411.ern.FulfillmentDateWithTerritory first_publication_date = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_first_publication_date_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_first_publication_date(i), target, stream);
  }

  // optional bool is_supplemental = 12;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_is_supplemental(), target);
  }

  // optional string language_and_script_code = 13;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_language_and_script_code().data(), static_cast<int>(this->_internal_language_and_script_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.Software.language_and_script_code");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_language_and_script_code(), target);
  }

  // repeated .ern411.ern.PLineWithDefault p_line = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_p_line_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, this->_internal_p_line(i), target, stream);
  }

  // repeated .ern411.ern.ParentalWarningTypeWithTerritory parental_warning_type = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_parental_warning_type_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, this->_internal_parental_warning_type(i), target, stream);
  }

  // repeated .ern411.ern.RelatedRelease related_release = 16;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_related_release_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, this->_internal_related_release(i), target, stream);
  }

  // repeated .ern411.ern.RelatedResource related_resource = 17;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_related_resource_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, this->_internal_related_resource(i), target, stream);
  }

  // optional .ern411.ern.ResourceContainedResourceReferenceList resource_contained_resource_reference_list = 18;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::resource_contained_resource_reference_list(this), target, stream);
  }

  // repeated .ern411.ern.ResourceProprietaryId resource_id = 19;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_resource_id_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(19, this->_internal_resource_id(i), target, stream);
  }

  // optional string resource_reference = 20;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_resource_reference().data(), static_cast<int>(this->_internal_resource_reference().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.Software.resource_reference");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_resource_reference(), target);
  }

  // repeated .ern411.ern.ResourceRightsController resource_rights_controller = 21;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_resource_rights_controller_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, this->_internal_resource_rights_controller(i), target, stream);
  }

  // repeated .ern411.ern.TechnicalSoftwareDetails technical_details = 22;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_technical_details_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(22, this->_internal_technical_details(i), target, stream);
  }

  // optional .ern411.ern.SoftwareType type = 23;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        23, _Internal::type(this), target, stream);
  }

  // repeated .ern411.ern.VersionType version_type = 24;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_version_type_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(24, this->_internal_version_type(i), target, stream);
  }

  // repeated .ern411.ern.MusicalWorkId work_id = 25;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_work_id_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(25, this->_internal_work_id(i), target, stream);
  }

  // repeated .ern411.ern.WorkRightsController work_rights_controller = 26;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_work_rights_controller_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(26, this->_internal_work_rights_controller(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.Software)
  return target;
}

size_t Software::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.Software)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ern411.ern.AdditionalTitle additional_title = 1;
  total_size += 1UL * this->_internal_additional_title_size();
  for (const auto& msg : this->additional_title_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.CLineWithDefault c_line = 2;
  total_size += 1UL * this->_internal_c_line_size();
  for (const auto& msg : this->c_line_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.Contributor contributor = 4;
  total_size += 1UL * this->_internal_contributor_size();
  for (const auto& msg : this->contributor_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.CourtesyLineWithDefault courtesy_line = 5;
  total_size += 1UL * this->_internal_courtesy_line_size();
  for (const auto& msg : this->courtesy_line_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.DisplayArtist display_artist = 7;
  total_size += 1UL * this->_internal_display_artist_size();
  for (const auto& msg : this->display_artist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.DisplayArtistNameWithDefault display_artist_name = 8;
  total_size += 1UL * this->_internal_display_artist_name_size();
  for (const auto& msg : this->display_artist_name_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.DisplayTitle display_title = 9;
  total_size += 1UL * this->_internal_display_title_size();
  for (const auto& msg : this->display_title_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.DisplayTitleText display_title_text = 10;
  total_size += 1UL * this->_internal_display_title_text_size();
  for (const auto& msg : this->display_title_text_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.FulfillmentDateWithTerritory first_publication_date = 11;
  total_size += 1UL * this->_internal_first_publication_date_size();
  for (const auto& msg : this->first_publication_date_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.PLineWithDefault p_line = 14;
  total_size += 1UL * this->_internal_p_line_size();
  for (const auto& msg : this->p_line_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.ParentalWarningTypeWithTerritory parental_warning_type = 15;
  total_size += 1UL * this->_internal_parental_warning_type_size();
  for (const auto& msg : this->parental_warning_type_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.RelatedRelease related_release = 16;
  total_size += 2UL * this->_internal_related_release_size();
  for (const auto& msg : this->related_release_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.RelatedResource related_resource = 17;
  total_size += 2UL * this->_internal_related_resource_size();
  for (const auto& msg : this->related_resource_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.ResourceProprietaryId resource_id = 19;
  total_size += 2UL * this->_internal_resource_id_size();
  for (const auto& msg : this->resource_id_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.ResourceRightsController resource_rights_controller = 21;
  total_size += 2UL * this->_internal_resource_rights_controller_size();
  for (const auto& msg : this->resource_rights_controller_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.TechnicalSoftwareDetails technical_details = 22;
  total_size += 2UL * this->_internal_technical_details_size();
  for (const auto& msg : this->technical_details_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.VersionType version_type = 24;
  total_size += 2UL * this->_internal_version_type_size();
  for (const auto& msg : this->version_type_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.MusicalWorkId work_id = 25;
  total_size += 2UL * this->_internal_work_id_size();
  for (const auto& msg : this->work_id_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.WorkRightsController work_rights_controller = 26;
  total_size += 2UL * this->_internal_work_rights_controller_size();
  for (const auto& msg : this->work_rights_controller_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string language_and_script_code = 13;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_language_and_script_code());
    }

    // optional string resource_reference = 20;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_resource_reference());
    }

    // optional .ern411.ern.EventDateWithoutFlags creation_date = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *creation_date_);
    }

    // optional .ern411.ern.ResourceContainedResourceReferenceList resource_contained_resource_reference_list = 18;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *resource_contained_resource_reference_list_);
    }

    // optional .ern411.ern.SoftwareType type = 23;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_);
    }

    // optional bool contains_hidden_content = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool is_supplemental = 12;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Software::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.Software)
  GOOGLE_DCHECK_NE(&from, this);
  const Software* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Software>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.Software)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.Software)
    MergeFrom(*source);
  }
}

void Software::MergeFrom(const Software& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.Software)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  additional_title_.MergeFrom(from.additional_title_);
  c_line_.MergeFrom(from.c_line_);
  contributor_.MergeFrom(from.contributor_);
  courtesy_line_.MergeFrom(from.courtesy_line_);
  display_artist_.MergeFrom(from.display_artist_);
  display_artist_name_.MergeFrom(from.display_artist_name_);
  display_title_.MergeFrom(from.display_title_);
  display_title_text_.MergeFrom(from.display_title_text_);
  first_publication_date_.MergeFrom(from.first_publication_date_);
  p_line_.MergeFrom(from.p_line_);
  parental_warning_type_.MergeFrom(from.parental_warning_type_);
  related_release_.MergeFrom(from.related_release_);
  related_resource_.MergeFrom(from.related_resource_);
  resource_id_.MergeFrom(from.resource_id_);
  resource_rights_controller_.MergeFrom(from.resource_rights_controller_);
  technical_details_.MergeFrom(from.technical_details_);
  version_type_.MergeFrom(from.version_type_);
  work_id_.MergeFrom(from.work_id_);
  work_rights_controller_.MergeFrom(from.work_rights_controller_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_language_and_script_code(from._internal_language_and_script_code());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_resource_reference(from._internal_resource_reference());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_creation_date()->::ern411::ern::EventDateWithoutFlags::MergeFrom(from._internal_creation_date());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_resource_contained_resource_reference_list()->::ern411::ern::ResourceContainedResourceReferenceList::MergeFrom(from._internal_resource_contained_resource_reference_list());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_type()->::ern411::ern::SoftwareType::MergeFrom(from._internal_type());
    }
    if (cached_has_bits & 0x00000020u) {
      contains_hidden_content_ = from.contains_hidden_content_;
    }
    if (cached_has_bits & 0x00000040u) {
      is_supplemental_ = from.is_supplemental_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Software::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.Software)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Software::CopyFrom(const Software& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.Software)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Software::IsInitialized() const {
  return true;
}

void Software::InternalSwap(Software* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  additional_title_.InternalSwap(&other->additional_title_);
  c_line_.InternalSwap(&other->c_line_);
  contributor_.InternalSwap(&other->contributor_);
  courtesy_line_.InternalSwap(&other->courtesy_line_);
  display_artist_.InternalSwap(&other->display_artist_);
  display_artist_name_.InternalSwap(&other->display_artist_name_);
  display_title_.InternalSwap(&other->display_title_);
  display_title_text_.InternalSwap(&other->display_title_text_);
  first_publication_date_.InternalSwap(&other->first_publication_date_);
  p_line_.InternalSwap(&other->p_line_);
  parental_warning_type_.InternalSwap(&other->parental_warning_type_);
  related_release_.InternalSwap(&other->related_release_);
  related_resource_.InternalSwap(&other->related_resource_);
  resource_id_.InternalSwap(&other->resource_id_);
  resource_rights_controller_.InternalSwap(&other->resource_rights_controller_);
  technical_details_.InternalSwap(&other->technical_details_);
  version_type_.InternalSwap(&other->version_type_);
  work_id_.InternalSwap(&other->work_id_);
  work_rights_controller_.InternalSwap(&other->work_rights_controller_);
  language_and_script_code_.Swap(&other->language_and_script_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  resource_reference_.Swap(&other->resource_reference_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Software, is_supplemental_)
      + sizeof(Software::is_supplemental_)
      - PROTOBUF_FIELD_OFFSET(Software, creation_date_)>(
          reinterpret_cast<char*>(&creation_date_),
          reinterpret_cast<char*>(&other->creation_date_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Software::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SoftwareType::InitAsDefaultInstance() {
  ::ern411::ern::_SoftwareType_default_instance_._instance.get_mutable()->ext_value_ = const_cast< ::ern411::avs::SoftwareType*>(
      ::ern411::avs::SoftwareType::internal_default_instance());
}
class SoftwareType::_Internal {
 public:
  using HasBits = decltype(std::declval<SoftwareType>()._has_bits_);
  static void set_has_namespace_(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_user_defined_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::ern411::avs::SoftwareType& ext_value(const SoftwareType* msg);
  static void set_has_ext_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::ern411::avs::SoftwareType&
SoftwareType::_Internal::ext_value(const SoftwareType* msg) {
  return *msg->ext_value_;
}
void SoftwareType::clear_ext_value() {
  if (ext_value_ != nullptr) ext_value_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
SoftwareType::SoftwareType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.SoftwareType)
}
SoftwareType::SoftwareType(const SoftwareType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_namespace_()) {
    namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_namespace_(),
      GetArena());
  }
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_user_defined_value()) {
    user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_defined_value(),
      GetArena());
  }
  if (from._internal_has_ext_value()) {
    ext_value_ = new ::ern411::avs::SoftwareType(*from.ext_value_);
  } else {
    ext_value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ern411.ern.SoftwareType)
}

void SoftwareType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SoftwareType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ext_value_ = nullptr;
}

SoftwareType::~SoftwareType() {
  // @@protoc_insertion_point(destructor:ern411.ern.SoftwareType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SoftwareType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  namespace__.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ext_value_;
}

void SoftwareType::ArenaDtor(void* object) {
  SoftwareType* _this = reinterpret_cast< SoftwareType* >(object);
  (void)_this;
}
void SoftwareType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SoftwareType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SoftwareType& SoftwareType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SoftwareType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void SoftwareType::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.SoftwareType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      namespace__.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      user_defined_value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(ext_value_ != nullptr);
      ext_value_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SoftwareType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string namespace = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_namespace_();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.SoftwareType.namespace");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string user_defined_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_user_defined_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.SoftwareType.user_defined_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.avs.SoftwareType ext_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SoftwareType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.SoftwareType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string namespace = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_namespace_().data(), static_cast<int>(this->_internal_namespace_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.SoftwareType.namespace");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_namespace_(), target);
  }

  // optional string user_defined_value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_user_defined_value().data(), static_cast<int>(this->_internal_user_defined_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.SoftwareType.user_defined_value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_defined_value(), target);
  }

  // optional .ern411.avs.SoftwareType ext_value = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::ext_value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.SoftwareType)
  return target;
}

size_t SoftwareType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.SoftwareType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string namespace = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_namespace_());
    }

    // optional string user_defined_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_defined_value());
    }

    // optional .ern411.avs.SoftwareType ext_value = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ext_value_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SoftwareType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.SoftwareType)
  GOOGLE_DCHECK_NE(&from, this);
  const SoftwareType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SoftwareType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.SoftwareType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.SoftwareType)
    MergeFrom(*source);
  }
}

void SoftwareType::MergeFrom(const SoftwareType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.SoftwareType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_namespace_(from._internal_namespace_());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_user_defined_value(from._internal_user_defined_value());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_ext_value()->::ern411::avs::SoftwareType::MergeFrom(from._internal_ext_value());
    }
  }
}

void SoftwareType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.SoftwareType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SoftwareType::CopyFrom(const SoftwareType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.SoftwareType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SoftwareType::IsInitialized() const {
  return true;
}

void SoftwareType::InternalSwap(SoftwareType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  namespace__.Swap(&other->namespace__, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_defined_value_.Swap(&other->user_defined_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(ext_value_, other->ext_value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SoftwareType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SoundRecording::InitAsDefaultInstance() {
  ::ern411::ern::_SoundRecording_default_instance_._instance.get_mutable()->audio_channel_configuration_ = const_cast< ::ern411::avs::RecordingMode*>(
      ::ern411::avs::RecordingMode::internal_default_instance());
  ::ern411::ern::_SoundRecording_default_instance_._instance.get_mutable()->composite_musical_work_type_ = const_cast< ::ern411::avs::CompositeMusicalWorkType*>(
      ::ern411::avs::CompositeMusicalWorkType::internal_default_instance());
  ::ern411::ern::_SoundRecording_default_instance_._instance.get_mutable()->creation_date_ = const_cast< ::ern411::ern::EventDateWithoutFlags*>(
      ::ern411::ern::EventDateWithoutFlags::internal_default_instance());
  ::ern411::ern::_SoundRecording_default_instance_._instance.get_mutable()->mastered_date_ = const_cast< ::ern411::ern::EventDateWithoutFlags*>(
      ::ern411::ern::EventDateWithoutFlags::internal_default_instance());
  ::ern411::ern::_SoundRecording_default_instance_._instance.get_mutable()->remastered_date_ = const_cast< ::ern411::ern::EventDateWithoutFlags*>(
      ::ern411::ern::EventDateWithoutFlags::internal_default_instance());
  ::ern411::ern::_SoundRecording_default_instance_._instance.get_mutable()->type_ = const_cast< ::ern411::ern::SoundRecordingType*>(
      ::ern411::ern::SoundRecordingType::internal_default_instance());
}
class SoundRecording::_Internal {
 public:
  using HasBits = decltype(std::declval<SoundRecording>()._has_bits_);
  static const ::ern411::avs::RecordingMode& audio_channel_configuration(const SoundRecording* msg);
  static void set_has_audio_channel_configuration(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::ern411::avs::CompositeMusicalWorkType& composite_musical_work_type(const SoundRecording* msg);
  static void set_has_composite_musical_work_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_contains_hidden_content(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::ern411::ern::EventDateWithoutFlags& creation_date(const SoundRecording* msg);
  static void set_has_creation_date(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_cover(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_is_hi_res_music(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_is_instrumental(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_is_remastered(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_is_supplemental(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_language_and_script_code(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::ern411::ern::EventDateWithoutFlags& mastered_date(const SoundRecording* msg);
  static void set_has_mastered_date(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::ern411::ern::EventDateWithoutFlags& remastered_date(const SoundRecording* msg);
  static void set_has_remastered_date(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_resource_reference(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::ern411::ern::SoundRecordingType& type(const SoundRecording* msg);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

const ::ern411::avs::RecordingMode&
SoundRecording::_Internal::audio_channel_configuration(const SoundRecording* msg) {
  return *msg->audio_channel_configuration_;
}
const ::ern411::avs::CompositeMusicalWorkType&
SoundRecording::_Internal::composite_musical_work_type(const SoundRecording* msg) {
  return *msg->composite_musical_work_type_;
}
const ::ern411::ern::EventDateWithoutFlags&
SoundRecording::_Internal::creation_date(const SoundRecording* msg) {
  return *msg->creation_date_;
}
const ::ern411::ern::EventDateWithoutFlags&
SoundRecording::_Internal::mastered_date(const SoundRecording* msg) {
  return *msg->mastered_date_;
}
const ::ern411::ern::EventDateWithoutFlags&
SoundRecording::_Internal::remastered_date(const SoundRecording* msg) {
  return *msg->remastered_date_;
}
const ::ern411::ern::SoundRecordingType&
SoundRecording::_Internal::type(const SoundRecording* msg) {
  return *msg->type_;
}
void SoundRecording::clear_audio_channel_configuration() {
  if (audio_channel_configuration_ != nullptr) audio_channel_configuration_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void SoundRecording::clear_composite_musical_work_type() {
  if (composite_musical_work_type_ != nullptr) composite_musical_work_type_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void SoundRecording::clear_language_of_performance() {
  language_of_performance_.Clear();
}
SoundRecording::SoundRecording(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  additional_title_(arena),
  audio_chapter_reference_(arena),
  character_(arena),
  contributor_(arena),
  courtesy_line_(arena),
  deity_(arena),
  display_artist_(arena),
  display_artist_name_(arena),
  display_credits_(arena),
  display_title_(arena),
  display_title_text_(arena),
  first_publication_date_(arena),
  language_of_performance_(arena),
  p_line_(arena),
  parental_warning_type_(arena),
  raga_(arena),
  related_release_(arena),
  related_resource_(arena),
  resource_id_(arena),
  resource_rights_controller_(arena),
  tala_(arena),
  technical_details_(arena),
  version_type_(arena),
  work_id_(arena),
  work_rights_controller_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.SoundRecording)
}
SoundRecording::SoundRecording(const SoundRecording& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      additional_title_(from.additional_title_),
      audio_chapter_reference_(from.audio_chapter_reference_),
      character_(from.character_),
      contributor_(from.contributor_),
      courtesy_line_(from.courtesy_line_),
      deity_(from.deity_),
      display_artist_(from.display_artist_),
      display_artist_name_(from.display_artist_name_),
      display_credits_(from.display_credits_),
      display_title_(from.display_title_),
      display_title_text_(from.display_title_text_),
      first_publication_date_(from.first_publication_date_),
      language_of_performance_(from.language_of_performance_),
      p_line_(from.p_line_),
      parental_warning_type_(from.parental_warning_type_),
      raga_(from.raga_),
      related_release_(from.related_release_),
      related_resource_(from.related_resource_),
      resource_id_(from.resource_id_),
      resource_rights_controller_(from.resource_rights_controller_),
      tala_(from.tala_),
      technical_details_(from.technical_details_),
      version_type_(from.version_type_),
      work_id_(from.work_id_),
      work_rights_controller_(from.work_rights_controller_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  duration_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_duration()) {
    duration_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_duration(),
      GetArena());
  }
  language_and_script_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_language_and_script_code()) {
    language_and_script_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_language_and_script_code(),
      GetArena());
  }
  resource_reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_resource_reference()) {
    resource_reference_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_resource_reference(),
      GetArena());
  }
  if (from._internal_has_audio_channel_configuration()) {
    audio_channel_configuration_ = new ::ern411::avs::RecordingMode(*from.audio_channel_configuration_);
  } else {
    audio_channel_configuration_ = nullptr;
  }
  if (from._internal_has_composite_musical_work_type()) {
    composite_musical_work_type_ = new ::ern411::avs::CompositeMusicalWorkType(*from.composite_musical_work_type_);
  } else {
    composite_musical_work_type_ = nullptr;
  }
  if (from._internal_has_creation_date()) {
    creation_date_ = new ::ern411::ern::EventDateWithoutFlags(*from.creation_date_);
  } else {
    creation_date_ = nullptr;
  }
  if (from._internal_has_mastered_date()) {
    mastered_date_ = new ::ern411::ern::EventDateWithoutFlags(*from.mastered_date_);
  } else {
    mastered_date_ = nullptr;
  }
  if (from._internal_has_remastered_date()) {
    remastered_date_ = new ::ern411::ern::EventDateWithoutFlags(*from.remastered_date_);
  } else {
    remastered_date_ = nullptr;
  }
  if (from._internal_has_type()) {
    type_ = new ::ern411::ern::SoundRecordingType(*from.type_);
  } else {
    type_ = nullptr;
  }
  ::memcpy(&contains_hidden_content_, &from.contains_hidden_content_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_supplemental_) -
    reinterpret_cast<char*>(&contains_hidden_content_)) + sizeof(is_supplemental_));
  // @@protoc_insertion_point(copy_constructor:ern411.ern.SoundRecording)
}

void SoundRecording::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SoundRecording_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  duration_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  language_and_script_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resource_reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&audio_channel_configuration_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_supplemental_) -
      reinterpret_cast<char*>(&audio_channel_configuration_)) + sizeof(is_supplemental_));
}

SoundRecording::~SoundRecording() {
  // @@protoc_insertion_point(destructor:ern411.ern.SoundRecording)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SoundRecording::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  duration_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  language_and_script_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resource_reference_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete audio_channel_configuration_;
  if (this != internal_default_instance()) delete composite_musical_work_type_;
  if (this != internal_default_instance()) delete creation_date_;
  if (this != internal_default_instance()) delete mastered_date_;
  if (this != internal_default_instance()) delete remastered_date_;
  if (this != internal_default_instance()) delete type_;
}

void SoundRecording::ArenaDtor(void* object) {
  SoundRecording* _this = reinterpret_cast< SoundRecording* >(object);
  (void)_this;
}
void SoundRecording::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SoundRecording::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SoundRecording& SoundRecording::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SoundRecording_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void SoundRecording::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.SoundRecording)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  additional_title_.Clear();
  audio_chapter_reference_.Clear();
  character_.Clear();
  contributor_.Clear();
  courtesy_line_.Clear();
  deity_.Clear();
  display_artist_.Clear();
  display_artist_name_.Clear();
  display_credits_.Clear();
  display_title_.Clear();
  display_title_text_.Clear();
  first_publication_date_.Clear();
  language_of_performance_.Clear();
  p_line_.Clear();
  parental_warning_type_.Clear();
  raga_.Clear();
  related_release_.Clear();
  related_resource_.Clear();
  resource_id_.Clear();
  resource_rights_controller_.Clear();
  tala_.Clear();
  technical_details_.Clear();
  version_type_.Clear();
  work_id_.Clear();
  work_rights_controller_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      duration_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      language_and_script_code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      resource_reference_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(audio_channel_configuration_ != nullptr);
      audio_channel_configuration_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(composite_musical_work_type_ != nullptr);
      composite_musical_work_type_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(creation_date_ != nullptr);
      creation_date_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(mastered_date_ != nullptr);
      mastered_date_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(remastered_date_ != nullptr);
      remastered_date_->Clear();
    }
  }
  if (cached_has_bits & 0x00000100u) {
    GOOGLE_DCHECK(type_ != nullptr);
    type_->Clear();
  }
  if (cached_has_bits & 0x00007e00u) {
    ::memset(&contains_hidden_content_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_supplemental_) -
        reinterpret_cast<char*>(&contains_hidden_content_)) + sizeof(is_supplemental_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SoundRecording::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ern411.ern.AdditionalTitle additional_title = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_additional_title(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .ern411.avs.RecordingMode audio_channel_configuration = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_audio_channel_configuration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string audio_chapter_reference = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_audio_chapter_reference();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.SoundRecording.audio_chapter_reference");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.Character character = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_character(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .ern411.avs.CompositeMusicalWorkType composite_musical_work_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_composite_musical_work_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool contains_hidden_content = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_contains_hidden_content(&has_bits);
          contains_hidden_content_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.Contributor contributor = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_contributor(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.CourtesyLineWithDefault courtesy_line = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_courtesy_line(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .ern411.ern.EventDateWithoutFlags creation_date = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_creation_date(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.Deity deity = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_deity(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.DisplayArtist display_artist = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_display_artist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.DisplayArtistNameWithDefault display_artist_name = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_display_artist_name(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.DisplayCredits display_credits = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_display_credits(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.DisplayTitle display_title = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_display_title(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.DisplayTitleText display_title_text = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_display_title_text(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string duration = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_duration();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.SoundRecording.duration");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.FirstPublicationDate first_publication_date = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_first_publication_date(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<138>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool is_cover = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_is_cover(&has_bits);
          is_cover_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_hi_res_music = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_is_hi_res_music(&has_bits);
          is_hi_res_music_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_instrumental = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_is_instrumental(&has_bits);
          is_instrumental_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_remastered = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_is_remastered(&has_bits);
          is_remastered_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_supplemental = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_is_supplemental(&has_bits);
          is_supplemental_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string language_and_script_code = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          auto str = _internal_mutable_language_and_script_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.SoundRecording.language_and_script_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ern411.avs.IsoLanguageCode language_of_performance = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_language_of_performance(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<194>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .ern411.ern.EventDateWithoutFlags mastered_date = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_mastered_date(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.PLineWithDefault p_line = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_p_line(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<210>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.ParentalWarningTypeWithTerritory parental_warning_type = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_parental_warning_type(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<218>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.Raga raga = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_raga(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<226>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.RelatedRelease related_release = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_related_release(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<234>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.RelatedResource related_resource = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_related_resource(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<242>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .ern411.ern.EventDateWithoutFlags remastered_date = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_remastered_date(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.SoundRecordingId resource_id = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_resource_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<258>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string resource_reference = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_resource_reference();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.SoundRecording.resource_reference");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.ResourceRightsController resource_rights_controller = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_resource_rights_controller(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<274>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.Tala tala = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_tala(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<282>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.TechnicalSoundRecordingDetails technical_details = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_technical_details(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<290>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .ern411.ern.SoundRecordingType type = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.VersionType version_type = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_version_type(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<306>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.MusicalWorkId work_id = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_work_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<314>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.WorkRightsController work_rights_controller = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_work_rights_controller(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<322>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SoundRecording::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.SoundRecording)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ern411.ern.AdditionalTitle additional_title = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_additional_title_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_additional_title(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional .ern411.avs.RecordingMode audio_channel_configuration = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::audio_channel_configuration(this), target, stream);
  }

  // repeated string audio_chapter_reference = 3;
  for (int i = 0, n = this->_internal_audio_chapter_reference_size(); i < n; i++) {
    const auto& s = this->_internal_audio_chapter_reference(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.SoundRecording.audio_chapter_reference");
    target = stream->WriteString(3, s, target);
  }

  // repeated .ern411.ern.Character character = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_character_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_character(i), target, stream);
  }

  // optional .ern411.avs.CompositeMusicalWorkType composite_musical_work_type = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::composite_musical_work_type(this), target, stream);
  }

  // optional bool contains_hidden_content = 6;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_contains_hidden_content(), target);
  }

  // repeated .ern411.ern.Contributor contributor = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_contributor_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_contributor(i), target, stream);
  }

  // repeated .ern411.ern.CourtesyLineWithDefault courtesy_line = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_courtesy_line_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_courtesy_line(i), target, stream);
  }

  // optional .ern411.ern.EventDateWithoutFlags creation_date = 9;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::creation_date(this), target, stream);
  }

  // repeated .ern411.ern.Deity deity = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_deity_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_deity(i), target, stream);
  }

  // repeated .ern411.ern.DisplayArtist display_artist = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_display_artist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_display_artist(i), target, stream);
  }

  // repeated .ern411.ern.DisplayArtistNameWithDefault display_artist_name = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_display_artist_name_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, this->_internal_display_artist_name(i), target, stream);
  }

  // repeated .ern411.ern.DisplayCredits display_credits = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_display_credits_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, this->_internal_display_credits(i), target, stream);
  }

  // repeated .ern411.ern.DisplayTitle display_title = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_display_title_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, this->_internal_display_title(i), target, stream);
  }

  // repeated .ern411.ern.DisplayTitleText display_title_text = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_display_title_text_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, this->_internal_display_title_text(i), target, stream);
  }

  // optional string duration = 16;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_duration().data(), static_cast<int>(this->_internal_duration().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.SoundRecording.duration");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_duration(), target);
  }

  // repeated .ern411.ern.FirstPublicationDate first_publication_date = 17;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_first_publication_date_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, this->_internal_first_publication_date(i), target, stream);
  }

  // optional bool is_cover = 18;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(18, this->_internal_is_cover(), target);
  }

  // optional bool is_hi_res_music = 19;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(19, this->_internal_is_hi_res_music(), target);
  }

  // optional bool is_instrumental = 20;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(20, this->_internal_is_instrumental(), target);
  }

  // optional bool is_remastered = 21;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(21, this->_internal_is_remastered(), target);
  }

  // optional bool is_supplemental = 22;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(22, this->_internal_is_supplemental(), target);
  }

  // optional string language_and_script_code = 23;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_language_and_script_code().data(), static_cast<int>(this->_internal_language_and_script_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.SoundRecording.language_and_script_code");
    target = stream->WriteStringMaybeAliased(
        23, this->_internal_language_and_script_code(), target);
  }

  // repeated .ern411.avs.IsoLanguageCode language_of_performance = 24;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_language_of_performance_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(24, this->_internal_language_of_performance(i), target, stream);
  }

  // optional .ern411.ern.EventDateWithoutFlags mastered_date = 25;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        25, _Internal::mastered_date(this), target, stream);
  }

  // repeated .ern411.ern.PLineWithDefault p_line = 26;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_p_line_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(26, this->_internal_p_line(i), target, stream);
  }

  // repeated .ern411.ern.ParentalWarningTypeWithTerritory parental_warning_type = 27;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_parental_warning_type_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(27, this->_internal_parental_warning_type(i), target, stream);
  }

  // repeated .ern411.ern.Raga raga = 28;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_raga_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(28, this->_internal_raga(i), target, stream);
  }

  // repeated .ern411.ern.RelatedRelease related_release = 29;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_related_release_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(29, this->_internal_related_release(i), target, stream);
  }

  // repeated .ern411.ern.RelatedResource related_resource = 30;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_related_resource_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(30, this->_internal_related_resource(i), target, stream);
  }

  // optional .ern411.ern.EventDateWithoutFlags remastered_date = 31;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        31, _Internal::remastered_date(this), target, stream);
  }

  // repeated .ern411.ern.SoundRecordingId resource_id = 32;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_resource_id_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(32, this->_internal_resource_id(i), target, stream);
  }

  // optional string resource_reference = 33;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_resource_reference().data(), static_cast<int>(this->_internal_resource_reference().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.SoundRecording.resource_reference");
    target = stream->WriteStringMaybeAliased(
        33, this->_internal_resource_reference(), target);
  }

  // repeated .ern411.ern.ResourceRightsController resource_rights_controller = 34;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_resource_rights_controller_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(34, this->_internal_resource_rights_controller(i), target, stream);
  }

  // repeated .ern411.ern.Tala tala = 35;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tala_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(35, this->_internal_tala(i), target, stream);
  }

  // repeated .ern411.ern.TechnicalSoundRecordingDetails technical_details = 36;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_technical_details_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(36, this->_internal_technical_details(i), target, stream);
  }

  // optional .ern411.ern.SoundRecordingType type = 37;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        37, _Internal::type(this), target, stream);
  }

  // repeated .ern411.ern.VersionType version_type = 38;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_version_type_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(38, this->_internal_version_type(i), target, stream);
  }

  // repeated .ern411.ern.MusicalWorkId work_id = 39;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_work_id_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(39, this->_internal_work_id(i), target, stream);
  }

  // repeated .ern411.ern.WorkRightsController work_rights_controller = 40;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_work_rights_controller_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(40, this->_internal_work_rights_controller(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.SoundRecording)
  return target;
}

size_t SoundRecording::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.SoundRecording)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ern411.ern.AdditionalTitle additional_title = 1;
  total_size += 1UL * this->_internal_additional_title_size();
  for (const auto& msg : this->additional_title_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string audio_chapter_reference = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(audio_chapter_reference_.size());
  for (int i = 0, n = audio_chapter_reference_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      audio_chapter_reference_.Get(i));
  }

  // repeated .ern411.ern.Character character = 4;
  total_size += 1UL * this->_internal_character_size();
  for (const auto& msg : this->character_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.Contributor contributor = 7;
  total_size += 1UL * this->_internal_contributor_size();
  for (const auto& msg : this->contributor_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.CourtesyLineWithDefault courtesy_line = 8;
  total_size += 1UL * this->_internal_courtesy_line_size();
  for (const auto& msg : this->courtesy_line_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.Deity deity = 10;
  total_size += 1UL * this->_internal_deity_size();
  for (const auto& msg : this->deity_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.DisplayArtist display_artist = 11;
  total_size += 1UL * this->_internal_display_artist_size();
  for (const auto& msg : this->display_artist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.DisplayArtistNameWithDefault display_artist_name = 12;
  total_size += 1UL * this->_internal_display_artist_name_size();
  for (const auto& msg : this->display_artist_name_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.DisplayCredits display_credits = 13;
  total_size += 1UL * this->_internal_display_credits_size();
  for (const auto& msg : this->display_credits_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.DisplayTitle display_title = 14;
  total_size += 1UL * this->_internal_display_title_size();
  for (const auto& msg : this->display_title_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.DisplayTitleText display_title_text = 15;
  total_size += 1UL * this->_internal_display_title_text_size();
  for (const auto& msg : this->display_title_text_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.FirstPublicationDate first_publication_date = 17;
  total_size += 2UL * this->_internal_first_publication_date_size();
  for (const auto& msg : this->first_publication_date_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.avs.IsoLanguageCode language_of_performance = 24;
  total_size += 2UL * this->_internal_language_of_performance_size();
  for (const auto& msg : this->language_of_performance_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.PLineWithDefault p_line = 26;
  total_size += 2UL * this->_internal_p_line_size();
  for (const auto& msg : this->p_line_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.ParentalWarningTypeWithTerritory parental_warning_type = 27;
  total_size += 2UL * this->_internal_parental_warning_type_size();
  for (const auto& msg : this->parental_warning_type_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.Raga raga = 28;
  total_size += 2UL * this->_internal_raga_size();
  for (const auto& msg : this->raga_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.RelatedRelease related_release = 29;
  total_size += 2UL * this->_internal_related_release_size();
  for (const auto& msg : this->related_release_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.RelatedResource related_resource = 30;
  total_size += 2UL * this->_internal_related_resource_size();
  for (const auto& msg : this->related_resource_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.SoundRecordingId resource_id = 32;
  total_size += 2UL * this->_internal_resource_id_size();
  for (const auto& msg : this->resource_id_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.ResourceRightsController resource_rights_controller = 34;
  total_size += 2UL * this->_internal_resource_rights_controller_size();
  for (const auto& msg : this->resource_rights_controller_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.Tala tala = 35;
  total_size += 2UL * this->_internal_tala_size();
  for (const auto& msg : this->tala_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.TechnicalSoundRecordingDetails technical_details = 36;
  total_size += 2UL * this->_internal_technical_details_size();
  for (const auto& msg : this->technical_details_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.VersionType version_type = 38;
  total_size += 2UL * this->_internal_version_type_size();
  for (const auto& msg : this->version_type_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.MusicalWorkId work_id = 39;
  total_size += 2UL * this->_internal_work_id_size();
  for (const auto& msg : this->work_id_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.WorkRightsController work_rights_controller = 40;
  total_size += 2UL * this->_internal_work_rights_controller_size();
  for (const auto& msg : this->work_rights_controller_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string duration = 16;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_duration());
    }

    // optional string language_and_script_code = 23;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_language_and_script_code());
    }

    // optional string resource_reference = 33;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_resource_reference());
    }

    // optional .ern411.avs.RecordingMode audio_channel_configuration = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *audio_channel_configuration_);
    }

    // optional .ern411.avs.CompositeMusicalWorkType composite_musical_work_type = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *composite_musical_work_type_);
    }

    // optional .ern411.ern.EventDateWithoutFlags creation_date = 9;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *creation_date_);
    }

    // optional .ern411.ern.EventDateWithoutFlags mastered_date = 25;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mastered_date_);
    }

    // optional .ern411.ern.EventDateWithoutFlags remastered_date = 31;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *remastered_date_);
    }

  }
  if (cached_has_bits & 0x00007f00u) {
    // optional .ern411.ern.SoundRecordingType type = 37;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_);
    }

    // optional bool contains_hidden_content = 6;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool is_cover = 18;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + 1;
    }

    // optional bool is_hi_res_music = 19;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 1;
    }

    // optional bool is_instrumental = 20;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 1;
    }

    // optional bool is_remastered = 21;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 1;
    }

    // optional bool is_supplemental = 22;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SoundRecording::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.SoundRecording)
  GOOGLE_DCHECK_NE(&from, this);
  const SoundRecording* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SoundRecording>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.SoundRecording)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.SoundRecording)
    MergeFrom(*source);
  }
}

void SoundRecording::MergeFrom(const SoundRecording& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.SoundRecording)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  additional_title_.MergeFrom(from.additional_title_);
  audio_chapter_reference_.MergeFrom(from.audio_chapter_reference_);
  character_.MergeFrom(from.character_);
  contributor_.MergeFrom(from.contributor_);
  courtesy_line_.MergeFrom(from.courtesy_line_);
  deity_.MergeFrom(from.deity_);
  display_artist_.MergeFrom(from.display_artist_);
  display_artist_name_.MergeFrom(from.display_artist_name_);
  display_credits_.MergeFrom(from.display_credits_);
  display_title_.MergeFrom(from.display_title_);
  display_title_text_.MergeFrom(from.display_title_text_);
  first_publication_date_.MergeFrom(from.first_publication_date_);
  language_of_performance_.MergeFrom(from.language_of_performance_);
  p_line_.MergeFrom(from.p_line_);
  parental_warning_type_.MergeFrom(from.parental_warning_type_);
  raga_.MergeFrom(from.raga_);
  related_release_.MergeFrom(from.related_release_);
  related_resource_.MergeFrom(from.related_resource_);
  resource_id_.MergeFrom(from.resource_id_);
  resource_rights_controller_.MergeFrom(from.resource_rights_controller_);
  tala_.MergeFrom(from.tala_);
  technical_details_.MergeFrom(from.technical_details_);
  version_type_.MergeFrom(from.version_type_);
  work_id_.MergeFrom(from.work_id_);
  work_rights_controller_.MergeFrom(from.work_rights_controller_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_duration(from._internal_duration());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_language_and_script_code(from._internal_language_and_script_code());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_resource_reference(from._internal_resource_reference());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_audio_channel_configuration()->::ern411::avs::RecordingMode::MergeFrom(from._internal_audio_channel_configuration());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_composite_musical_work_type()->::ern411::avs::CompositeMusicalWorkType::MergeFrom(from._internal_composite_musical_work_type());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_creation_date()->::ern411::ern::EventDateWithoutFlags::MergeFrom(from._internal_creation_date());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_mastered_date()->::ern411::ern::EventDateWithoutFlags::MergeFrom(from._internal_mastered_date());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_remastered_date()->::ern411::ern::EventDateWithoutFlags::MergeFrom(from._internal_remastered_date());
    }
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_type()->::ern411::ern::SoundRecordingType::MergeFrom(from._internal_type());
    }
    if (cached_has_bits & 0x00000200u) {
      contains_hidden_content_ = from.contains_hidden_content_;
    }
    if (cached_has_bits & 0x00000400u) {
      is_cover_ = from.is_cover_;
    }
    if (cached_has_bits & 0x00000800u) {
      is_hi_res_music_ = from.is_hi_res_music_;
    }
    if (cached_has_bits & 0x00001000u) {
      is_instrumental_ = from.is_instrumental_;
    }
    if (cached_has_bits & 0x00002000u) {
      is_remastered_ = from.is_remastered_;
    }
    if (cached_has_bits & 0x00004000u) {
      is_supplemental_ = from.is_supplemental_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SoundRecording::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.SoundRecording)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SoundRecording::CopyFrom(const SoundRecording& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.SoundRecording)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SoundRecording::IsInitialized() const {
  return true;
}

void SoundRecording::InternalSwap(SoundRecording* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  additional_title_.InternalSwap(&other->additional_title_);
  audio_chapter_reference_.InternalSwap(&other->audio_chapter_reference_);
  character_.InternalSwap(&other->character_);
  contributor_.InternalSwap(&other->contributor_);
  courtesy_line_.InternalSwap(&other->courtesy_line_);
  deity_.InternalSwap(&other->deity_);
  display_artist_.InternalSwap(&other->display_artist_);
  display_artist_name_.InternalSwap(&other->display_artist_name_);
  display_credits_.InternalSwap(&other->display_credits_);
  display_title_.InternalSwap(&other->display_title_);
  display_title_text_.InternalSwap(&other->display_title_text_);
  first_publication_date_.InternalSwap(&other->first_publication_date_);
  language_of_performance_.InternalSwap(&other->language_of_performance_);
  p_line_.InternalSwap(&other->p_line_);
  parental_warning_type_.InternalSwap(&other->parental_warning_type_);
  raga_.InternalSwap(&other->raga_);
  related_release_.InternalSwap(&other->related_release_);
  related_resource_.InternalSwap(&other->related_resource_);
  resource_id_.InternalSwap(&other->resource_id_);
  resource_rights_controller_.InternalSwap(&other->resource_rights_controller_);
  tala_.InternalSwap(&other->tala_);
  technical_details_.InternalSwap(&other->technical_details_);
  version_type_.InternalSwap(&other->version_type_);
  work_id_.InternalSwap(&other->work_id_);
  work_rights_controller_.InternalSwap(&other->work_rights_controller_);
  duration_.Swap(&other->duration_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  language_and_script_code_.Swap(&other->language_and_script_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  resource_reference_.Swap(&other->resource_reference_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SoundRecording, is_supplemental_)
      + sizeof(SoundRecording::is_supplemental_)
      - PROTOBUF_FIELD_OFFSET(SoundRecording, audio_channel_configuration_)>(
          reinterpret_cast<char*>(&audio_channel_configuration_),
          reinterpret_cast<char*>(&other->audio_channel_configuration_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SoundRecording::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SoundRecordingId::InitAsDefaultInstance() {
  ::ern411::ern::_SoundRecordingId_default_instance_._instance.get_mutable()->catalog_number_ = const_cast< ::ern411::ern::CatalogNumber*>(
      ::ern411::ern::CatalogNumber::internal_default_instance());
}
class SoundRecordingId::_Internal {
 public:
  using HasBits = decltype(std::declval<SoundRecordingId>()._has_bits_);
  static const ::ern411::ern::CatalogNumber& catalog_number(const SoundRecordingId* msg);
  static void set_has_catalog_number(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_i_s_r_c(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_replaced(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::ern411::ern::CatalogNumber&
SoundRecordingId::_Internal::catalog_number(const SoundRecordingId* msg) {
  return *msg->catalog_number_;
}
SoundRecordingId::SoundRecordingId(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  proprietary_id_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.SoundRecordingId)
}
SoundRecordingId::SoundRecordingId(const SoundRecordingId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      proprietary_id_(from.proprietary_id_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  i_s_r_c_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_i_s_r_c()) {
    i_s_r_c_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_i_s_r_c(),
      GetArena());
  }
  if (from._internal_has_catalog_number()) {
    catalog_number_ = new ::ern411::ern::CatalogNumber(*from.catalog_number_);
  } else {
    catalog_number_ = nullptr;
  }
  is_replaced_ = from.is_replaced_;
  // @@protoc_insertion_point(copy_constructor:ern411.ern.SoundRecordingId)
}

void SoundRecordingId::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SoundRecordingId_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  i_s_r_c_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&catalog_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_replaced_) -
      reinterpret_cast<char*>(&catalog_number_)) + sizeof(is_replaced_));
}

SoundRecordingId::~SoundRecordingId() {
  // @@protoc_insertion_point(destructor:ern411.ern.SoundRecordingId)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SoundRecordingId::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  i_s_r_c_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete catalog_number_;
}

void SoundRecordingId::ArenaDtor(void* object) {
  SoundRecordingId* _this = reinterpret_cast< SoundRecordingId* >(object);
  (void)_this;
}
void SoundRecordingId::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SoundRecordingId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SoundRecordingId& SoundRecordingId::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SoundRecordingId_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void SoundRecordingId::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.SoundRecordingId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  proprietary_id_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      i_s_r_c_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(catalog_number_ != nullptr);
      catalog_number_->Clear();
    }
  }
  is_replaced_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SoundRecordingId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ern411.ern.CatalogNumber catalog_number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_catalog_number(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string i_s_r_c = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_i_s_r_c();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.SoundRecordingId.i_s_r_c");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_replaced = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_is_replaced(&has_bits);
          is_replaced_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.ProprietaryId proprietary_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_proprietary_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SoundRecordingId::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.SoundRecordingId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ern411.ern.CatalogNumber catalog_number = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::catalog_number(this), target, stream);
  }

  // optional string i_s_r_c = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_i_s_r_c().data(), static_cast<int>(this->_internal_i_s_r_c().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.SoundRecordingId.i_s_r_c");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_i_s_r_c(), target);
  }

  // optional bool is_replaced = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_replaced(), target);
  }

  // repeated .ern411.ern.ProprietaryId proprietary_id = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_proprietary_id_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_proprietary_id(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.SoundRecordingId)
  return target;
}

size_t SoundRecordingId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.SoundRecordingId)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ern411.ern.ProprietaryId proprietary_id = 4;
  total_size += 1UL * this->_internal_proprietary_id_size();
  for (const auto& msg : this->proprietary_id_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string i_s_r_c = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_i_s_r_c());
    }

    // optional .ern411.ern.CatalogNumber catalog_number = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *catalog_number_);
    }

    // optional bool is_replaced = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SoundRecordingId::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.SoundRecordingId)
  GOOGLE_DCHECK_NE(&from, this);
  const SoundRecordingId* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SoundRecordingId>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.SoundRecordingId)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.SoundRecordingId)
    MergeFrom(*source);
  }
}

void SoundRecordingId::MergeFrom(const SoundRecordingId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.SoundRecordingId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  proprietary_id_.MergeFrom(from.proprietary_id_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_i_s_r_c(from._internal_i_s_r_c());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_catalog_number()->::ern411::ern::CatalogNumber::MergeFrom(from._internal_catalog_number());
    }
    if (cached_has_bits & 0x00000004u) {
      is_replaced_ = from.is_replaced_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SoundRecordingId::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.SoundRecordingId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SoundRecordingId::CopyFrom(const SoundRecordingId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.SoundRecordingId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SoundRecordingId::IsInitialized() const {
  return true;
}

void SoundRecordingId::InternalSwap(SoundRecordingId* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  proprietary_id_.InternalSwap(&other->proprietary_id_);
  i_s_r_c_.Swap(&other->i_s_r_c_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SoundRecordingId, is_replaced_)
      + sizeof(SoundRecordingId::is_replaced_)
      - PROTOBUF_FIELD_OFFSET(SoundRecordingId, catalog_number_)>(
          reinterpret_cast<char*>(&catalog_number_),
          reinterpret_cast<char*>(&other->catalog_number_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SoundRecordingId::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SoundRecordingPreviewDetails::InitAsDefaultInstance() {
  ::ern411::ern::_SoundRecordingPreviewDetails_default_instance_._instance.get_mutable()->expression_type_ = const_cast< ::ern411::avs::ExpressionType*>(
      ::ern411::avs::ExpressionType::internal_default_instance());
}
class SoundRecordingPreviewDetails::_Internal {
 public:
  using HasBits = decltype(std::declval<SoundRecordingPreviewDetails>()._has_bits_);
  static void set_has_bottom_right_corner(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_end_point(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::ern411::avs::ExpressionType& expression_type(const SoundRecordingPreviewDetails* msg);
  static void set_has_expression_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_start_point(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_top_left_corner(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::ern411::avs::ExpressionType&
SoundRecordingPreviewDetails::_Internal::expression_type(const SoundRecordingPreviewDetails* msg) {
  return *msg->expression_type_;
}
void SoundRecordingPreviewDetails::clear_expression_type() {
  if (expression_type_ != nullptr) expression_type_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
SoundRecordingPreviewDetails::SoundRecordingPreviewDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.SoundRecordingPreviewDetails)
}
SoundRecordingPreviewDetails::SoundRecordingPreviewDetails(const SoundRecordingPreviewDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  bottom_right_corner_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_bottom_right_corner()) {
    bottom_right_corner_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_bottom_right_corner(),
      GetArena());
  }
  duration_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_duration()) {
    duration_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_duration(),
      GetArena());
  }
  top_left_corner_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_top_left_corner()) {
    top_left_corner_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_top_left_corner(),
      GetArena());
  }
  if (from._internal_has_expression_type()) {
    expression_type_ = new ::ern411::avs::ExpressionType(*from.expression_type_);
  } else {
    expression_type_ = nullptr;
  }
  ::memcpy(&end_point_, &from.end_point_,
    static_cast<size_t>(reinterpret_cast<char*>(&start_point_) -
    reinterpret_cast<char*>(&end_point_)) + sizeof(start_point_));
  // @@protoc_insertion_point(copy_constructor:ern411.ern.SoundRecordingPreviewDetails)
}

void SoundRecordingPreviewDetails::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SoundRecordingPreviewDetails_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  bottom_right_corner_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  duration_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  top_left_corner_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&expression_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&start_point_) -
      reinterpret_cast<char*>(&expression_type_)) + sizeof(start_point_));
}

SoundRecordingPreviewDetails::~SoundRecordingPreviewDetails() {
  // @@protoc_insertion_point(destructor:ern411.ern.SoundRecordingPreviewDetails)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SoundRecordingPreviewDetails::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  bottom_right_corner_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  duration_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  top_left_corner_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete expression_type_;
}

void SoundRecordingPreviewDetails::ArenaDtor(void* object) {
  SoundRecordingPreviewDetails* _this = reinterpret_cast< SoundRecordingPreviewDetails* >(object);
  (void)_this;
}
void SoundRecordingPreviewDetails::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SoundRecordingPreviewDetails::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SoundRecordingPreviewDetails& SoundRecordingPreviewDetails::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SoundRecordingPreviewDetails_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void SoundRecordingPreviewDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.SoundRecordingPreviewDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      bottom_right_corner_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      duration_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      top_left_corner_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(expression_type_ != nullptr);
      expression_type_->Clear();
    }
  }
  if (cached_has_bits & 0x00000030u) {
    ::memset(&end_point_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&start_point_) -
        reinterpret_cast<char*>(&end_point_)) + sizeof(start_point_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SoundRecordingPreviewDetails::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string bottom_right_corner = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_bottom_right_corner();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.SoundRecordingPreviewDetails.bottom_right_corner");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string duration = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_duration();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.SoundRecordingPreviewDetails.duration");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double end_point = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_end_point(&has_bits);
          end_point_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .ern411.avs.ExpressionType expression_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_expression_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double start_point = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_start_point(&has_bits);
          start_point_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional string top_left_corner = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_top_left_corner();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.SoundRecordingPreviewDetails.top_left_corner");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SoundRecordingPreviewDetails::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.SoundRecordingPreviewDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string bottom_right_corner = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_bottom_right_corner().data(), static_cast<int>(this->_internal_bottom_right_corner().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.SoundRecordingPreviewDetails.bottom_right_corner");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_bottom_right_corner(), target);
  }

  // optional string duration = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_duration().data(), static_cast<int>(this->_internal_duration().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.SoundRecordingPreviewDetails.duration");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_duration(), target);
  }

  // optional double end_point = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_end_point(), target);
  }

  // optional .ern411.avs.ExpressionType expression_type = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::expression_type(this), target, stream);
  }

  // optional double start_point = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_start_point(), target);
  }

  // optional string top_left_corner = 6;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_top_left_corner().data(), static_cast<int>(this->_internal_top_left_corner().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.SoundRecordingPreviewDetails.top_left_corner");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_top_left_corner(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.SoundRecordingPreviewDetails)
  return target;
}

size_t SoundRecordingPreviewDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.SoundRecordingPreviewDetails)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string bottom_right_corner = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_bottom_right_corner());
    }

    // optional string duration = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_duration());
    }

    // optional string top_left_corner = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_top_left_corner());
    }

    // optional .ern411.avs.ExpressionType expression_type = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *expression_type_);
    }

    // optional double end_point = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double start_point = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SoundRecordingPreviewDetails::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.SoundRecordingPreviewDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const SoundRecordingPreviewDetails* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SoundRecordingPreviewDetails>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.SoundRecordingPreviewDetails)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.SoundRecordingPreviewDetails)
    MergeFrom(*source);
  }
}

void SoundRecordingPreviewDetails::MergeFrom(const SoundRecordingPreviewDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.SoundRecordingPreviewDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_bottom_right_corner(from._internal_bottom_right_corner());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_duration(from._internal_duration());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_top_left_corner(from._internal_top_left_corner());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_expression_type()->::ern411::avs::ExpressionType::MergeFrom(from._internal_expression_type());
    }
    if (cached_has_bits & 0x00000010u) {
      end_point_ = from.end_point_;
    }
    if (cached_has_bits & 0x00000020u) {
      start_point_ = from.start_point_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SoundRecordingPreviewDetails::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.SoundRecordingPreviewDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SoundRecordingPreviewDetails::CopyFrom(const SoundRecordingPreviewDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.SoundRecordingPreviewDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SoundRecordingPreviewDetails::IsInitialized() const {
  return true;
}

void SoundRecordingPreviewDetails::InternalSwap(SoundRecordingPreviewDetails* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  bottom_right_corner_.Swap(&other->bottom_right_corner_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  duration_.Swap(&other->duration_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  top_left_corner_.Swap(&other->top_left_corner_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SoundRecordingPreviewDetails, start_point_)
      + sizeof(SoundRecordingPreviewDetails::start_point_)
      - PROTOBUF_FIELD_OFFSET(SoundRecordingPreviewDetails, expression_type_)>(
          reinterpret_cast<char*>(&expression_type_),
          reinterpret_cast<char*>(&other->expression_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SoundRecordingPreviewDetails::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SoundRecordingType::InitAsDefaultInstance() {
  ::ern411::ern::_SoundRecordingType_default_instance_._instance.get_mutable()->ext_value_ = const_cast< ::ern411::avs::SoundRecordingType*>(
      ::ern411::avs::SoundRecordingType::internal_default_instance());
}
class SoundRecordingType::_Internal {
 public:
  using HasBits = decltype(std::declval<SoundRecordingType>()._has_bits_);
  static void set_has_namespace_(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_user_defined_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::ern411::avs::SoundRecordingType& ext_value(const SoundRecordingType* msg);
  static void set_has_ext_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::ern411::avs::SoundRecordingType&
SoundRecordingType::_Internal::ext_value(const SoundRecordingType* msg) {
  return *msg->ext_value_;
}
void SoundRecordingType::clear_ext_value() {
  if (ext_value_ != nullptr) ext_value_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
SoundRecordingType::SoundRecordingType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.SoundRecordingType)
}
SoundRecordingType::SoundRecordingType(const SoundRecordingType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_namespace_()) {
    namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_namespace_(),
      GetArena());
  }
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_user_defined_value()) {
    user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_defined_value(),
      GetArena());
  }
  if (from._internal_has_ext_value()) {
    ext_value_ = new ::ern411::avs::SoundRecordingType(*from.ext_value_);
  } else {
    ext_value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ern411.ern.SoundRecordingType)
}

void SoundRecordingType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SoundRecordingType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ext_value_ = nullptr;
}

SoundRecordingType::~SoundRecordingType() {
  // @@protoc_insertion_point(destructor:ern411.ern.SoundRecordingType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SoundRecordingType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  namespace__.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ext_value_;
}

void SoundRecordingType::ArenaDtor(void* object) {
  SoundRecordingType* _this = reinterpret_cast< SoundRecordingType* >(object);
  (void)_this;
}
void SoundRecordingType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SoundRecordingType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SoundRecordingType& SoundRecordingType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SoundRecordingType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void SoundRecordingType::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.SoundRecordingType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      namespace__.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      user_defined_value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(ext_value_ != nullptr);
      ext_value_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SoundRecordingType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string namespace = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_namespace_();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.SoundRecordingType.namespace");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string user_defined_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_user_defined_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.SoundRecordingType.user_defined_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.avs.SoundRecordingType ext_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SoundRecordingType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.SoundRecordingType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string namespace = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_namespace_().data(), static_cast<int>(this->_internal_namespace_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.SoundRecordingType.namespace");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_namespace_(), target);
  }

  // optional string user_defined_value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_user_defined_value().data(), static_cast<int>(this->_internal_user_defined_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.SoundRecordingType.user_defined_value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_defined_value(), target);
  }

  // optional .ern411.avs.SoundRecordingType ext_value = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::ext_value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.SoundRecordingType)
  return target;
}

size_t SoundRecordingType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.SoundRecordingType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string namespace = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_namespace_());
    }

    // optional string user_defined_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_defined_value());
    }

    // optional .ern411.avs.SoundRecordingType ext_value = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ext_value_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SoundRecordingType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.SoundRecordingType)
  GOOGLE_DCHECK_NE(&from, this);
  const SoundRecordingType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SoundRecordingType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.SoundRecordingType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.SoundRecordingType)
    MergeFrom(*source);
  }
}

void SoundRecordingType::MergeFrom(const SoundRecordingType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.SoundRecordingType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_namespace_(from._internal_namespace_());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_user_defined_value(from._internal_user_defined_value());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_ext_value()->::ern411::avs::SoundRecordingType::MergeFrom(from._internal_ext_value());
    }
  }
}

void SoundRecordingType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.SoundRecordingType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SoundRecordingType::CopyFrom(const SoundRecordingType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.SoundRecordingType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SoundRecordingType::IsInitialized() const {
  return true;
}

void SoundRecordingType::InternalSwap(SoundRecordingType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  namespace__.Swap(&other->namespace__, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_defined_value_.Swap(&other->user_defined_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(ext_value_, other->ext_value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SoundRecordingType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SupplementalDocumentList::InitAsDefaultInstance() {
}
class SupplementalDocumentList::_Internal {
 public:
};

SupplementalDocumentList::SupplementalDocumentList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  supplemental_document_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.SupplementalDocumentList)
}
SupplementalDocumentList::SupplementalDocumentList(const SupplementalDocumentList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      supplemental_document_(from.supplemental_document_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ern411.ern.SupplementalDocumentList)
}

void SupplementalDocumentList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SupplementalDocumentList_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
}

SupplementalDocumentList::~SupplementalDocumentList() {
  // @@protoc_insertion_point(destructor:ern411.ern.SupplementalDocumentList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SupplementalDocumentList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SupplementalDocumentList::ArenaDtor(void* object) {
  SupplementalDocumentList* _this = reinterpret_cast< SupplementalDocumentList* >(object);
  (void)_this;
}
void SupplementalDocumentList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SupplementalDocumentList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SupplementalDocumentList& SupplementalDocumentList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SupplementalDocumentList_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void SupplementalDocumentList::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.SupplementalDocumentList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  supplemental_document_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SupplementalDocumentList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ern411.ern.File supplemental_document = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_supplemental_document(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SupplementalDocumentList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.SupplementalDocumentList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ern411.ern.File supplemental_document = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_supplemental_document_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_supplemental_document(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.SupplementalDocumentList)
  return target;
}

size_t SupplementalDocumentList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.SupplementalDocumentList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ern411.ern.File supplemental_document = 1;
  total_size += 1UL * this->_internal_supplemental_document_size();
  for (const auto& msg : this->supplemental_document_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SupplementalDocumentList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.SupplementalDocumentList)
  GOOGLE_DCHECK_NE(&from, this);
  const SupplementalDocumentList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SupplementalDocumentList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.SupplementalDocumentList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.SupplementalDocumentList)
    MergeFrom(*source);
  }
}

void SupplementalDocumentList::MergeFrom(const SupplementalDocumentList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.SupplementalDocumentList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  supplemental_document_.MergeFrom(from.supplemental_document_);
}

void SupplementalDocumentList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.SupplementalDocumentList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SupplementalDocumentList::CopyFrom(const SupplementalDocumentList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.SupplementalDocumentList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SupplementalDocumentList::IsInitialized() const {
  return true;
}

void SupplementalDocumentList::InternalSwap(SupplementalDocumentList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  supplemental_document_.InternalSwap(&other->supplemental_document_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SupplementalDocumentList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SynopsisWithTerritory::InitAsDefaultInstance() {
  ::ern411::ern::_SynopsisWithTerritory_default_instance_._instance.get_mutable()->applicable_territory_code_ = const_cast< ::ern411::avs::CurrentTerritoryCode*>(
      ::ern411::avs::CurrentTerritoryCode::internal_default_instance());
}
class SynopsisWithTerritory::_Internal {
 public:
  using HasBits = decltype(std::declval<SynopsisWithTerritory>()._has_bits_);
  static const ::ern411::avs::CurrentTerritoryCode& applicable_territory_code(const SynopsisWithTerritory* msg);
  static void set_has_applicable_territory_code(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_default(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_is_short_synopsis(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_language_and_script_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ext_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::ern411::avs::CurrentTerritoryCode&
SynopsisWithTerritory::_Internal::applicable_territory_code(const SynopsisWithTerritory* msg) {
  return *msg->applicable_territory_code_;
}
void SynopsisWithTerritory::clear_applicable_territory_code() {
  if (applicable_territory_code_ != nullptr) applicable_territory_code_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
SynopsisWithTerritory::SynopsisWithTerritory(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.SynopsisWithTerritory)
}
SynopsisWithTerritory::SynopsisWithTerritory(const SynopsisWithTerritory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  language_and_script_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_language_and_script_code()) {
    language_and_script_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_language_and_script_code(),
      GetArena());
  }
  ext_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ext_value()) {
    ext_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ext_value(),
      GetArena());
  }
  if (from._internal_has_applicable_territory_code()) {
    applicable_territory_code_ = new ::ern411::avs::CurrentTerritoryCode(*from.applicable_territory_code_);
  } else {
    applicable_territory_code_ = nullptr;
  }
  ::memcpy(&is_default_, &from.is_default_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_short_synopsis_) -
    reinterpret_cast<char*>(&is_default_)) + sizeof(is_short_synopsis_));
  // @@protoc_insertion_point(copy_constructor:ern411.ern.SynopsisWithTerritory)
}

void SynopsisWithTerritory::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SynopsisWithTerritory_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  language_and_script_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ext_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&applicable_territory_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_short_synopsis_) -
      reinterpret_cast<char*>(&applicable_territory_code_)) + sizeof(is_short_synopsis_));
}

SynopsisWithTerritory::~SynopsisWithTerritory() {
  // @@protoc_insertion_point(destructor:ern411.ern.SynopsisWithTerritory)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SynopsisWithTerritory::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  language_and_script_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ext_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete applicable_territory_code_;
}

void SynopsisWithTerritory::ArenaDtor(void* object) {
  SynopsisWithTerritory* _this = reinterpret_cast< SynopsisWithTerritory* >(object);
  (void)_this;
}
void SynopsisWithTerritory::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SynopsisWithTerritory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SynopsisWithTerritory& SynopsisWithTerritory::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SynopsisWithTerritory_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void SynopsisWithTerritory::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.SynopsisWithTerritory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      language_and_script_code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      ext_value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(applicable_territory_code_ != nullptr);
      applicable_territory_code_->Clear();
    }
  }
  ::memset(&is_default_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_short_synopsis_) -
      reinterpret_cast<char*>(&is_default_)) + sizeof(is_short_synopsis_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SynopsisWithTerritory::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ern411.avs.CurrentTerritoryCode applicable_territory_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_applicable_territory_code(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_default = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_is_default(&has_bits);
          is_default_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_short_synopsis = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_is_short_synopsis(&has_bits);
          is_short_synopsis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string language_and_script_code = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_language_and_script_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.SynopsisWithTerritory.language_and_script_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string ext_value = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_ext_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.SynopsisWithTerritory.ext_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SynopsisWithTerritory::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.SynopsisWithTerritory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ern411.avs.CurrentTerritoryCode applicable_territory_code = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::applicable_territory_code(this), target, stream);
  }

  // optional bool is_default = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_default(), target);
  }

  // optional bool is_short_synopsis = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_short_synopsis(), target);
  }

  // optional string language_and_script_code = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_language_and_script_code().data(), static_cast<int>(this->_internal_language_and_script_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.SynopsisWithTerritory.language_and_script_code");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_language_and_script_code(), target);
  }

  // optional string ext_value = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ext_value().data(), static_cast<int>(this->_internal_ext_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.SynopsisWithTerritory.ext_value");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_ext_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.SynopsisWithTerritory)
  return target;
}

size_t SynopsisWithTerritory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.SynopsisWithTerritory)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string language_and_script_code = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_language_and_script_code());
    }

    // optional string ext_value = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ext_value());
    }

    // optional .ern411.avs.CurrentTerritoryCode applicable_territory_code = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *applicable_territory_code_);
    }

    // optional bool is_default = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool is_short_synopsis = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SynopsisWithTerritory::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.SynopsisWithTerritory)
  GOOGLE_DCHECK_NE(&from, this);
  const SynopsisWithTerritory* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SynopsisWithTerritory>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.SynopsisWithTerritory)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.SynopsisWithTerritory)
    MergeFrom(*source);
  }
}

void SynopsisWithTerritory::MergeFrom(const SynopsisWithTerritory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.SynopsisWithTerritory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_language_and_script_code(from._internal_language_and_script_code());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_ext_value(from._internal_ext_value());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_applicable_territory_code()->::ern411::avs::CurrentTerritoryCode::MergeFrom(from._internal_applicable_territory_code());
    }
    if (cached_has_bits & 0x00000008u) {
      is_default_ = from.is_default_;
    }
    if (cached_has_bits & 0x00000010u) {
      is_short_synopsis_ = from.is_short_synopsis_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SynopsisWithTerritory::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.SynopsisWithTerritory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SynopsisWithTerritory::CopyFrom(const SynopsisWithTerritory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.SynopsisWithTerritory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SynopsisWithTerritory::IsInitialized() const {
  return true;
}

void SynopsisWithTerritory::InternalSwap(SynopsisWithTerritory* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  language_and_script_code_.Swap(&other->language_and_script_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ext_value_.Swap(&other->ext_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SynopsisWithTerritory, is_short_synopsis_)
      + sizeof(SynopsisWithTerritory::is_short_synopsis_)
      - PROTOBUF_FIELD_OFFSET(SynopsisWithTerritory, applicable_territory_code_)>(
          reinterpret_cast<char*>(&applicable_territory_code_),
          reinterpret_cast<char*>(&other->applicable_territory_code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SynopsisWithTerritory::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Tala::InitAsDefaultInstance() {
  ::ern411::ern::_Tala_default_instance_._instance.get_mutable()->applicable_territory_code_ = const_cast< ::ern411::avs::CurrentTerritoryCode*>(
      ::ern411::avs::CurrentTerritoryCode::internal_default_instance());
}
class Tala::_Internal {
 public:
  using HasBits = decltype(std::declval<Tala>()._has_bits_);
  static const ::ern411::avs::CurrentTerritoryCode& applicable_territory_code(const Tala* msg);
  static void set_has_applicable_territory_code(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_default(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ext_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::ern411::avs::CurrentTerritoryCode&
Tala::_Internal::applicable_territory_code(const Tala* msg) {
  return *msg->applicable_territory_code_;
}
void Tala::clear_applicable_territory_code() {
  if (applicable_territory_code_ != nullptr) applicable_territory_code_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
Tala::Tala(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.Tala)
}
Tala::Tala(const Tala& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ext_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ext_value()) {
    ext_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ext_value(),
      GetArena());
  }
  if (from._internal_has_applicable_territory_code()) {
    applicable_territory_code_ = new ::ern411::avs::CurrentTerritoryCode(*from.applicable_territory_code_);
  } else {
    applicable_territory_code_ = nullptr;
  }
  is_default_ = from.is_default_;
  // @@protoc_insertion_point(copy_constructor:ern411.ern.Tala)
}

void Tala::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Tala_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  ext_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&applicable_territory_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_default_) -
      reinterpret_cast<char*>(&applicable_territory_code_)) + sizeof(is_default_));
}

Tala::~Tala() {
  // @@protoc_insertion_point(destructor:ern411.ern.Tala)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Tala::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  ext_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete applicable_territory_code_;
}

void Tala::ArenaDtor(void* object) {
  Tala* _this = reinterpret_cast< Tala* >(object);
  (void)_this;
}
void Tala::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Tala::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Tala& Tala::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Tala_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void Tala::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.Tala)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ext_value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(applicable_territory_code_ != nullptr);
      applicable_territory_code_->Clear();
    }
  }
  is_default_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Tala::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ern411.avs.CurrentTerritoryCode applicable_territory_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_applicable_territory_code(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_default = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_is_default(&has_bits);
          is_default_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string ext_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_ext_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.Tala.ext_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Tala::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.Tala)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ern411.avs.CurrentTerritoryCode applicable_territory_code = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::applicable_territory_code(this), target, stream);
  }

  // optional bool is_default = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_default(), target);
  }

  // optional string ext_value = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ext_value().data(), static_cast<int>(this->_internal_ext_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.Tala.ext_value");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_ext_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.Tala)
  return target;
}

size_t Tala::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.Tala)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string ext_value = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ext_value());
    }

    // optional .ern411.avs.CurrentTerritoryCode applicable_territory_code = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *applicable_territory_code_);
    }

    // optional bool is_default = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Tala::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.Tala)
  GOOGLE_DCHECK_NE(&from, this);
  const Tala* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Tala>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.Tala)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.Tala)
    MergeFrom(*source);
  }
}

void Tala::MergeFrom(const Tala& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.Tala)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_ext_value(from._internal_ext_value());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_applicable_territory_code()->::ern411::avs::CurrentTerritoryCode::MergeFrom(from._internal_applicable_territory_code());
    }
    if (cached_has_bits & 0x00000004u) {
      is_default_ = from.is_default_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Tala::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.Tala)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Tala::CopyFrom(const Tala& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.Tala)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tala::IsInitialized() const {
  return true;
}

void Tala::InternalSwap(Tala* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ext_value_.Swap(&other->ext_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Tala, is_default_)
      + sizeof(Tala::is_default_)
      - PROTOBUF_FIELD_OFFSET(Tala, applicable_territory_code_)>(
          reinterpret_cast<char*>(&applicable_territory_code_),
          reinterpret_cast<char*>(&other->applicable_territory_code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Tala::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TechnicalImageDetails::InitAsDefaultInstance() {
  ::ern411::ern::_TechnicalImageDetails_default_instance_._instance.get_mutable()->applicable_territory_code_ = const_cast< ::ern411::avs::CurrentTerritoryCode*>(
      ::ern411::avs::CurrentTerritoryCode::internal_default_instance());
  ::ern411::ern::_TechnicalImageDetails_default_instance_._instance.get_mutable()->aspect_ratio_ = const_cast< ::ern411::ern::AspectRatio*>(
      ::ern411::ern::AspectRatio::internal_default_instance());
  ::ern411::ern::_TechnicalImageDetails_default_instance_._instance.get_mutable()->file_ = const_cast< ::ern411::ern::File*>(
      ::ern411::ern::File::internal_default_instance());
  ::ern411::ern::_TechnicalImageDetails_default_instance_._instance.get_mutable()->image_codec_type_ = const_cast< ::ern411::ern::ImageCodecType*>(
      ::ern411::ern::ImageCodecType::internal_default_instance());
  ::ern411::ern::_TechnicalImageDetails_default_instance_._instance.get_mutable()->image_height_ = const_cast< ::ern411::ern::Extent*>(
      ::ern411::ern::Extent::internal_default_instance());
  ::ern411::ern::_TechnicalImageDetails_default_instance_._instance.get_mutable()->image_width_ = const_cast< ::ern411::ern::Extent*>(
      ::ern411::ern::Extent::internal_default_instance());
  ::ern411::ern::_TechnicalImageDetails_default_instance_._instance.get_mutable()->preview_details_ = const_cast< ::ern411::ern::PreviewDetails*>(
      ::ern411::ern::PreviewDetails::internal_default_instance());
}
class TechnicalImageDetails::_Internal {
 public:
  using HasBits = decltype(std::declval<TechnicalImageDetails>()._has_bits_);
  static const ::ern411::avs::CurrentTerritoryCode& applicable_territory_code(const TechnicalImageDetails* msg);
  static void set_has_applicable_territory_code(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::ern411::ern::AspectRatio& aspect_ratio(const TechnicalImageDetails* msg);
  static void set_has_aspect_ratio(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_bit_depth(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_color_depth(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::ern411::ern::File& file(const TechnicalImageDetails* msg);
  static void set_has_file(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::ern411::ern::ImageCodecType& image_codec_type(const TechnicalImageDetails* msg);
  static void set_has_image_codec_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::ern411::ern::Extent& image_height(const TechnicalImageDetails* msg);
  static void set_has_image_height(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_image_resolution(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::ern411::ern::Extent& image_width(const TechnicalImageDetails* msg);
  static void set_has_image_width(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_is_default(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_is_preview(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_language_and_script_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ern411::ern::PreviewDetails& preview_details(const TechnicalImageDetails* msg);
  static void set_has_preview_details(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_technical_resource_details_reference(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::ern411::avs::CurrentTerritoryCode&
TechnicalImageDetails::_Internal::applicable_territory_code(const TechnicalImageDetails* msg) {
  return *msg->applicable_territory_code_;
}
const ::ern411::ern::AspectRatio&
TechnicalImageDetails::_Internal::aspect_ratio(const TechnicalImageDetails* msg) {
  return *msg->aspect_ratio_;
}
const ::ern411::ern::File&
TechnicalImageDetails::_Internal::file(const TechnicalImageDetails* msg) {
  return *msg->file_;
}
const ::ern411::ern::ImageCodecType&
TechnicalImageDetails::_Internal::image_codec_type(const TechnicalImageDetails* msg) {
  return *msg->image_codec_type_;
}
const ::ern411::ern::Extent&
TechnicalImageDetails::_Internal::image_height(const TechnicalImageDetails* msg) {
  return *msg->image_height_;
}
const ::ern411::ern::Extent&
TechnicalImageDetails::_Internal::image_width(const TechnicalImageDetails* msg) {
  return *msg->image_width_;
}
const ::ern411::ern::PreviewDetails&
TechnicalImageDetails::_Internal::preview_details(const TechnicalImageDetails* msg) {
  return *msg->preview_details_;
}
void TechnicalImageDetails::clear_applicable_territory_code() {
  if (applicable_territory_code_ != nullptr) applicable_territory_code_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
TechnicalImageDetails::TechnicalImageDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  fingerprint_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.TechnicalImageDetails)
}
TechnicalImageDetails::TechnicalImageDetails(const TechnicalImageDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      fingerprint_(from.fingerprint_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  language_and_script_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_language_and_script_code()) {
    language_and_script_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_language_and_script_code(),
      GetArena());
  }
  technical_resource_details_reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_technical_resource_details_reference()) {
    technical_resource_details_reference_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_technical_resource_details_reference(),
      GetArena());
  }
  if (from._internal_has_applicable_territory_code()) {
    applicable_territory_code_ = new ::ern411::avs::CurrentTerritoryCode(*from.applicable_territory_code_);
  } else {
    applicable_territory_code_ = nullptr;
  }
  if (from._internal_has_aspect_ratio()) {
    aspect_ratio_ = new ::ern411::ern::AspectRatio(*from.aspect_ratio_);
  } else {
    aspect_ratio_ = nullptr;
  }
  if (from._internal_has_file()) {
    file_ = new ::ern411::ern::File(*from.file_);
  } else {
    file_ = nullptr;
  }
  if (from._internal_has_image_codec_type()) {
    image_codec_type_ = new ::ern411::ern::ImageCodecType(*from.image_codec_type_);
  } else {
    image_codec_type_ = nullptr;
  }
  if (from._internal_has_image_height()) {
    image_height_ = new ::ern411::ern::Extent(*from.image_height_);
  } else {
    image_height_ = nullptr;
  }
  if (from._internal_has_image_width()) {
    image_width_ = new ::ern411::ern::Extent(*from.image_width_);
  } else {
    image_width_ = nullptr;
  }
  if (from._internal_has_preview_details()) {
    preview_details_ = new ::ern411::ern::PreviewDetails(*from.preview_details_);
  } else {
    preview_details_ = nullptr;
  }
  ::memcpy(&bit_depth_, &from.bit_depth_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_preview_) -
    reinterpret_cast<char*>(&bit_depth_)) + sizeof(is_preview_));
  // @@protoc_insertion_point(copy_constructor:ern411.ern.TechnicalImageDetails)
}

void TechnicalImageDetails::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TechnicalImageDetails_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  language_and_script_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  technical_resource_details_reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&applicable_territory_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_preview_) -
      reinterpret_cast<char*>(&applicable_territory_code_)) + sizeof(is_preview_));
}

TechnicalImageDetails::~TechnicalImageDetails() {
  // @@protoc_insertion_point(destructor:ern411.ern.TechnicalImageDetails)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TechnicalImageDetails::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  language_and_script_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  technical_resource_details_reference_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete applicable_territory_code_;
  if (this != internal_default_instance()) delete aspect_ratio_;
  if (this != internal_default_instance()) delete file_;
  if (this != internal_default_instance()) delete image_codec_type_;
  if (this != internal_default_instance()) delete image_height_;
  if (this != internal_default_instance()) delete image_width_;
  if (this != internal_default_instance()) delete preview_details_;
}

void TechnicalImageDetails::ArenaDtor(void* object) {
  TechnicalImageDetails* _this = reinterpret_cast< TechnicalImageDetails* >(object);
  (void)_this;
}
void TechnicalImageDetails::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TechnicalImageDetails::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TechnicalImageDetails& TechnicalImageDetails::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TechnicalImageDetails_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void TechnicalImageDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.TechnicalImageDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fingerprint_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      language_and_script_code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      technical_resource_details_reference_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(applicable_territory_code_ != nullptr);
      applicable_territory_code_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(aspect_ratio_ != nullptr);
      aspect_ratio_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(file_ != nullptr);
      file_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(image_codec_type_ != nullptr);
      image_codec_type_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(image_height_ != nullptr);
      image_height_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(image_width_ != nullptr);
      image_width_->Clear();
    }
  }
  if (cached_has_bits & 0x00000100u) {
    GOOGLE_DCHECK(preview_details_ != nullptr);
    preview_details_->Clear();
  }
  if (cached_has_bits & 0x00003e00u) {
    ::memset(&bit_depth_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_preview_) -
        reinterpret_cast<char*>(&bit_depth_)) + sizeof(is_preview_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TechnicalImageDetails::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ern411.avs.CurrentTerritoryCode applicable_territory_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_applicable_territory_code(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.ern.AspectRatio aspect_ratio = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_aspect_ratio(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 bit_depth = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_bit_depth(&has_bits);
          bit_depth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 color_depth = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_color_depth(&has_bits);
          color_depth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.ern.File file = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_file(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.Fingerprint fingerprint = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fingerprint(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .ern411.ern.ImageCodecType image_codec_type = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_image_codec_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.ern.Extent image_height = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_image_height(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 image_resolution = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_image_resolution(&has_bits);
          image_resolution_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.ern.Extent image_width = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_image_width(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_default = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_is_default(&has_bits);
          is_default_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_preview = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_is_preview(&has_bits);
          is_preview_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string language_and_script_code = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_language_and_script_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.TechnicalImageDetails.language_and_script_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.ern.PreviewDetails preview_details = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_preview_details(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string technical_resource_details_reference = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_technical_resource_details_reference();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.TechnicalImageDetails.technical_resource_details_reference");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TechnicalImageDetails::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.TechnicalImageDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ern411.avs.CurrentTerritoryCode applicable_territory_code = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::applicable_territory_code(this), target, stream);
  }

  // optional .ern411.ern.AspectRatio aspect_ratio = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::aspect_ratio(this), target, stream);
  }

  // optional int32 bit_depth = 3;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_bit_depth(), target);
  }

  // optional int32 color_depth = 4;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_color_depth(), target);
  }

  // optional .ern411.ern.File file = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::file(this), target, stream);
  }

  // repeated .ern411.ern.Fingerprint fingerprint = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_fingerprint_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_fingerprint(i), target, stream);
  }

  // optional .ern411.ern.ImageCodecType image_codec_type = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::image_codec_type(this), target, stream);
  }

  // optional .ern411.ern.Extent image_height = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::image_height(this), target, stream);
  }

  // optional int32 image_resolution = 9;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_image_resolution(), target);
  }

  // optional .ern411.ern.Extent image_width = 10;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::image_width(this), target, stream);
  }

  // optional bool is_default = 11;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_is_default(), target);
  }

  // optional bool is_preview = 12;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_is_preview(), target);
  }

  // optional string language_and_script_code = 13;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_language_and_script_code().data(), static_cast<int>(this->_internal_language_and_script_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.TechnicalImageDetails.language_and_script_code");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_language_and_script_code(), target);
  }

  // optional .ern411.ern.PreviewDetails preview_details = 14;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::preview_details(this), target, stream);
  }

  // optional string technical_resource_details_reference = 15;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_technical_resource_details_reference().data(), static_cast<int>(this->_internal_technical_resource_details_reference().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.TechnicalImageDetails.technical_resource_details_reference");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_technical_resource_details_reference(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.TechnicalImageDetails)
  return target;
}

size_t TechnicalImageDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.TechnicalImageDetails)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ern411.ern.Fingerprint fingerprint = 6;
  total_size += 1UL * this->_internal_fingerprint_size();
  for (const auto& msg : this->fingerprint_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string language_and_script_code = 13;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_language_and_script_code());
    }

    // optional string technical_resource_details_reference = 15;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_technical_resource_details_reference());
    }

    // optional .ern411.avs.CurrentTerritoryCode applicable_territory_code = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *applicable_territory_code_);
    }

    // optional .ern411.ern.AspectRatio aspect_ratio = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *aspect_ratio_);
    }

    // optional .ern411.ern.File file = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *file_);
    }

    // optional .ern411.ern.ImageCodecType image_codec_type = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *image_codec_type_);
    }

    // optional .ern411.ern.Extent image_height = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *image_height_);
    }

    // optional .ern411.ern.Extent image_width = 10;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *image_width_);
    }

  }
  if (cached_has_bits & 0x00003f00u) {
    // optional .ern411.ern.PreviewDetails preview_details = 14;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *preview_details_);
    }

    // optional int32 bit_depth = 3;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_bit_depth());
    }

    // optional int32 color_depth = 4;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_color_depth());
    }

    // optional int32 image_resolution = 9;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_image_resolution());
    }

    // optional bool is_default = 11;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

    // optional bool is_preview = 12;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TechnicalImageDetails::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.TechnicalImageDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const TechnicalImageDetails* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TechnicalImageDetails>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.TechnicalImageDetails)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.TechnicalImageDetails)
    MergeFrom(*source);
  }
}

void TechnicalImageDetails::MergeFrom(const TechnicalImageDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.TechnicalImageDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fingerprint_.MergeFrom(from.fingerprint_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_language_and_script_code(from._internal_language_and_script_code());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_technical_resource_details_reference(from._internal_technical_resource_details_reference());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_applicable_territory_code()->::ern411::avs::CurrentTerritoryCode::MergeFrom(from._internal_applicable_territory_code());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_aspect_ratio()->::ern411::ern::AspectRatio::MergeFrom(from._internal_aspect_ratio());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_file()->::ern411::ern::File::MergeFrom(from._internal_file());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_image_codec_type()->::ern411::ern::ImageCodecType::MergeFrom(from._internal_image_codec_type());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_image_height()->::ern411::ern::Extent::MergeFrom(from._internal_image_height());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_image_width()->::ern411::ern::Extent::MergeFrom(from._internal_image_width());
    }
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_preview_details()->::ern411::ern::PreviewDetails::MergeFrom(from._internal_preview_details());
    }
    if (cached_has_bits & 0x00000200u) {
      bit_depth_ = from.bit_depth_;
    }
    if (cached_has_bits & 0x00000400u) {
      color_depth_ = from.color_depth_;
    }
    if (cached_has_bits & 0x00000800u) {
      image_resolution_ = from.image_resolution_;
    }
    if (cached_has_bits & 0x00001000u) {
      is_default_ = from.is_default_;
    }
    if (cached_has_bits & 0x00002000u) {
      is_preview_ = from.is_preview_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TechnicalImageDetails::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.TechnicalImageDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TechnicalImageDetails::CopyFrom(const TechnicalImageDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.TechnicalImageDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TechnicalImageDetails::IsInitialized() const {
  return true;
}

void TechnicalImageDetails::InternalSwap(TechnicalImageDetails* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  fingerprint_.InternalSwap(&other->fingerprint_);
  language_and_script_code_.Swap(&other->language_and_script_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  technical_resource_details_reference_.Swap(&other->technical_resource_details_reference_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TechnicalImageDetails, is_preview_)
      + sizeof(TechnicalImageDetails::is_preview_)
      - PROTOBUF_FIELD_OFFSET(TechnicalImageDetails, applicable_territory_code_)>(
          reinterpret_cast<char*>(&applicable_territory_code_),
          reinterpret_cast<char*>(&other->applicable_territory_code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TechnicalImageDetails::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TechnicalSheetMusicDetails::InitAsDefaultInstance() {
  ::ern411::ern::_TechnicalSheetMusicDetails_default_instance_._instance.get_mutable()->applicable_territory_code_ = const_cast< ::ern411::avs::CurrentTerritoryCode*>(
      ::ern411::avs::CurrentTerritoryCode::internal_default_instance());
  ::ern411::ern::_TechnicalSheetMusicDetails_default_instance_._instance.get_mutable()->file_ = const_cast< ::ern411::ern::File*>(
      ::ern411::ern::File::internal_default_instance());
  ::ern411::ern::_TechnicalSheetMusicDetails_default_instance_._instance.get_mutable()->preview_details_ = const_cast< ::ern411::ern::PreviewDetails*>(
      ::ern411::ern::PreviewDetails::internal_default_instance());
  ::ern411::ern::_TechnicalSheetMusicDetails_default_instance_._instance.get_mutable()->sheet_music_codec_type_ = const_cast< ::ern411::ern::SheetMusicCodecType*>(
      ::ern411::ern::SheetMusicCodecType::internal_default_instance());
}
class TechnicalSheetMusicDetails::_Internal {
 public:
  using HasBits = decltype(std::declval<TechnicalSheetMusicDetails>()._has_bits_);
  static const ::ern411::avs::CurrentTerritoryCode& applicable_territory_code(const TechnicalSheetMusicDetails* msg);
  static void set_has_applicable_territory_code(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_bit_depth(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::ern411::ern::File& file(const TechnicalSheetMusicDetails* msg);
  static void set_has_file(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_is_default(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_is_preview(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_language_and_script_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ern411::ern::PreviewDetails& preview_details(const TechnicalSheetMusicDetails* msg);
  static void set_has_preview_details(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::ern411::ern::SheetMusicCodecType& sheet_music_codec_type(const TechnicalSheetMusicDetails* msg);
  static void set_has_sheet_music_codec_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_technical_resource_details_reference(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::ern411::avs::CurrentTerritoryCode&
TechnicalSheetMusicDetails::_Internal::applicable_territory_code(const TechnicalSheetMusicDetails* msg) {
  return *msg->applicable_territory_code_;
}
const ::ern411::ern::File&
TechnicalSheetMusicDetails::_Internal::file(const TechnicalSheetMusicDetails* msg) {
  return *msg->file_;
}
const ::ern411::ern::PreviewDetails&
TechnicalSheetMusicDetails::_Internal::preview_details(const TechnicalSheetMusicDetails* msg) {
  return *msg->preview_details_;
}
const ::ern411::ern::SheetMusicCodecType&
TechnicalSheetMusicDetails::_Internal::sheet_music_codec_type(const TechnicalSheetMusicDetails* msg) {
  return *msg->sheet_music_codec_type_;
}
void TechnicalSheetMusicDetails::clear_applicable_territory_code() {
  if (applicable_territory_code_ != nullptr) applicable_territory_code_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
TechnicalSheetMusicDetails::TechnicalSheetMusicDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  fingerprint_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.TechnicalSheetMusicDetails)
}
TechnicalSheetMusicDetails::TechnicalSheetMusicDetails(const TechnicalSheetMusicDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      fingerprint_(from.fingerprint_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  language_and_script_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_language_and_script_code()) {
    language_and_script_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_language_and_script_code(),
      GetArena());
  }
  technical_resource_details_reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_technical_resource_details_reference()) {
    technical_resource_details_reference_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_technical_resource_details_reference(),
      GetArena());
  }
  if (from._internal_has_applicable_territory_code()) {
    applicable_territory_code_ = new ::ern411::avs::CurrentTerritoryCode(*from.applicable_territory_code_);
  } else {
    applicable_territory_code_ = nullptr;
  }
  if (from._internal_has_file()) {
    file_ = new ::ern411::ern::File(*from.file_);
  } else {
    file_ = nullptr;
  }
  if (from._internal_has_preview_details()) {
    preview_details_ = new ::ern411::ern::PreviewDetails(*from.preview_details_);
  } else {
    preview_details_ = nullptr;
  }
  if (from._internal_has_sheet_music_codec_type()) {
    sheet_music_codec_type_ = new ::ern411::ern::SheetMusicCodecType(*from.sheet_music_codec_type_);
  } else {
    sheet_music_codec_type_ = nullptr;
  }
  ::memcpy(&bit_depth_, &from.bit_depth_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_preview_) -
    reinterpret_cast<char*>(&bit_depth_)) + sizeof(is_preview_));
  // @@protoc_insertion_point(copy_constructor:ern411.ern.TechnicalSheetMusicDetails)
}

void TechnicalSheetMusicDetails::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TechnicalSheetMusicDetails_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  language_and_script_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  technical_resource_details_reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&applicable_territory_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_preview_) -
      reinterpret_cast<char*>(&applicable_territory_code_)) + sizeof(is_preview_));
}

TechnicalSheetMusicDetails::~TechnicalSheetMusicDetails() {
  // @@protoc_insertion_point(destructor:ern411.ern.TechnicalSheetMusicDetails)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TechnicalSheetMusicDetails::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  language_and_script_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  technical_resource_details_reference_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete applicable_territory_code_;
  if (this != internal_default_instance()) delete file_;
  if (this != internal_default_instance()) delete preview_details_;
  if (this != internal_default_instance()) delete sheet_music_codec_type_;
}

void TechnicalSheetMusicDetails::ArenaDtor(void* object) {
  TechnicalSheetMusicDetails* _this = reinterpret_cast< TechnicalSheetMusicDetails* >(object);
  (void)_this;
}
void TechnicalSheetMusicDetails::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TechnicalSheetMusicDetails::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TechnicalSheetMusicDetails& TechnicalSheetMusicDetails::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TechnicalSheetMusicDetails_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void TechnicalSheetMusicDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.TechnicalSheetMusicDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fingerprint_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      language_and_script_code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      technical_resource_details_reference_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(applicable_territory_code_ != nullptr);
      applicable_territory_code_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(file_ != nullptr);
      file_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(preview_details_ != nullptr);
      preview_details_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(sheet_music_codec_type_ != nullptr);
      sheet_music_codec_type_->Clear();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&bit_depth_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_default_) -
        reinterpret_cast<char*>(&bit_depth_)) + sizeof(is_default_));
  }
  is_preview_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TechnicalSheetMusicDetails::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ern411.avs.CurrentTerritoryCode applicable_territory_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_applicable_territory_code(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 bit_depth = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_bit_depth(&has_bits);
          bit_depth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.ern.File file = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_file(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.Fingerprint fingerprint = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fingerprint(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool is_default = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_is_default(&has_bits);
          is_default_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_preview = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_is_preview(&has_bits);
          is_preview_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string language_and_script_code = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_language_and_script_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.TechnicalSheetMusicDetails.language_and_script_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.ern.PreviewDetails preview_details = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_preview_details(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.ern.SheetMusicCodecType sheet_music_codec_type = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_sheet_music_codec_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string technical_resource_details_reference = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_technical_resource_details_reference();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.TechnicalSheetMusicDetails.technical_resource_details_reference");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TechnicalSheetMusicDetails::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.TechnicalSheetMusicDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ern411.avs.CurrentTerritoryCode applicable_territory_code = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::applicable_territory_code(this), target, stream);
  }

  // optional int32 bit_depth = 2;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_bit_depth(), target);
  }

  // optional .ern411.ern.File file = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::file(this), target, stream);
  }

  // repeated .ern411.ern.Fingerprint fingerprint = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_fingerprint_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_fingerprint(i), target, stream);
  }

  // optional bool is_default = 5;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_is_default(), target);
  }

  // optional bool is_preview = 6;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_is_preview(), target);
  }

  // optional string language_and_script_code = 7;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_language_and_script_code().data(), static_cast<int>(this->_internal_language_and_script_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.TechnicalSheetMusicDetails.language_and_script_code");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_language_and_script_code(), target);
  }

  // optional .ern411.ern.PreviewDetails preview_details = 8;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::preview_details(this), target, stream);
  }

  // optional .ern411.ern.SheetMusicCodecType sheet_music_codec_type = 9;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::sheet_music_codec_type(this), target, stream);
  }

  // optional string technical_resource_details_reference = 10;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_technical_resource_details_reference().data(), static_cast<int>(this->_internal_technical_resource_details_reference().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.TechnicalSheetMusicDetails.technical_resource_details_reference");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_technical_resource_details_reference(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.TechnicalSheetMusicDetails)
  return target;
}

size_t TechnicalSheetMusicDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.TechnicalSheetMusicDetails)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ern411.ern.Fingerprint fingerprint = 4;
  total_size += 1UL * this->_internal_fingerprint_size();
  for (const auto& msg : this->fingerprint_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string language_and_script_code = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_language_and_script_code());
    }

    // optional string technical_resource_details_reference = 10;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_technical_resource_details_reference());
    }

    // optional .ern411.avs.CurrentTerritoryCode applicable_territory_code = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *applicable_territory_code_);
    }

    // optional .ern411.ern.File file = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *file_);
    }

    // optional .ern411.ern.PreviewDetails preview_details = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *preview_details_);
    }

    // optional .ern411.ern.SheetMusicCodecType sheet_music_codec_type = 9;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sheet_music_codec_type_);
    }

    // optional int32 bit_depth = 2;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_bit_depth());
    }

    // optional bool is_default = 5;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  // optional bool is_preview = 6;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TechnicalSheetMusicDetails::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.TechnicalSheetMusicDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const TechnicalSheetMusicDetails* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TechnicalSheetMusicDetails>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.TechnicalSheetMusicDetails)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.TechnicalSheetMusicDetails)
    MergeFrom(*source);
  }
}

void TechnicalSheetMusicDetails::MergeFrom(const TechnicalSheetMusicDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.TechnicalSheetMusicDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fingerprint_.MergeFrom(from.fingerprint_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_language_and_script_code(from._internal_language_and_script_code());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_technical_resource_details_reference(from._internal_technical_resource_details_reference());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_applicable_territory_code()->::ern411::avs::CurrentTerritoryCode::MergeFrom(from._internal_applicable_territory_code());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_file()->::ern411::ern::File::MergeFrom(from._internal_file());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_preview_details()->::ern411::ern::PreviewDetails::MergeFrom(from._internal_preview_details());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_sheet_music_codec_type()->::ern411::ern::SheetMusicCodecType::MergeFrom(from._internal_sheet_music_codec_type());
    }
    if (cached_has_bits & 0x00000040u) {
      bit_depth_ = from.bit_depth_;
    }
    if (cached_has_bits & 0x00000080u) {
      is_default_ = from.is_default_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_is_preview(from._internal_is_preview());
  }
}

void TechnicalSheetMusicDetails::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.TechnicalSheetMusicDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TechnicalSheetMusicDetails::CopyFrom(const TechnicalSheetMusicDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.TechnicalSheetMusicDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TechnicalSheetMusicDetails::IsInitialized() const {
  return true;
}

void TechnicalSheetMusicDetails::InternalSwap(TechnicalSheetMusicDetails* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  fingerprint_.InternalSwap(&other->fingerprint_);
  language_and_script_code_.Swap(&other->language_and_script_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  technical_resource_details_reference_.Swap(&other->technical_resource_details_reference_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TechnicalSheetMusicDetails, is_preview_)
      + sizeof(TechnicalSheetMusicDetails::is_preview_)
      - PROTOBUF_FIELD_OFFSET(TechnicalSheetMusicDetails, applicable_territory_code_)>(
          reinterpret_cast<char*>(&applicable_territory_code_),
          reinterpret_cast<char*>(&other->applicable_territory_code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TechnicalSheetMusicDetails::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TechnicalSoftwareDetails::InitAsDefaultInstance() {
  ::ern411::ern::_TechnicalSoftwareDetails_default_instance_._instance.get_mutable()->applicable_territory_code_ = const_cast< ::ern411::avs::CurrentTerritoryCode*>(
      ::ern411::avs::CurrentTerritoryCode::internal_default_instance());
  ::ern411::ern::_TechnicalSoftwareDetails_default_instance_._instance.get_mutable()->file_ = const_cast< ::ern411::ern::File*>(
      ::ern411::ern::File::internal_default_instance());
  ::ern411::ern::_TechnicalSoftwareDetails_default_instance_._instance.get_mutable()->operating_system_type_ = const_cast< ::ern411::ern::OperatingSystemType*>(
      ::ern411::ern::OperatingSystemType::internal_default_instance());
  ::ern411::ern::_TechnicalSoftwareDetails_default_instance_._instance.get_mutable()->preview_details_ = const_cast< ::ern411::ern::PreviewDetails*>(
      ::ern411::ern::PreviewDetails::internal_default_instance());
}
class TechnicalSoftwareDetails::_Internal {
 public:
  using HasBits = decltype(std::declval<TechnicalSoftwareDetails>()._has_bits_);
  static const ::ern411::avs::CurrentTerritoryCode& applicable_territory_code(const TechnicalSoftwareDetails* msg);
  static void set_has_applicable_territory_code(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_bit_depth(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::ern411::ern::File& file(const TechnicalSoftwareDetails* msg);
  static void set_has_file(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_is_default(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_is_preview(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_language_and_script_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ern411::ern::OperatingSystemType& operating_system_type(const TechnicalSoftwareDetails* msg);
  static void set_has_operating_system_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::ern411::ern::PreviewDetails& preview_details(const TechnicalSoftwareDetails* msg);
  static void set_has_preview_details(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_technical_resource_details_reference(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::ern411::avs::CurrentTerritoryCode&
TechnicalSoftwareDetails::_Internal::applicable_territory_code(const TechnicalSoftwareDetails* msg) {
  return *msg->applicable_territory_code_;
}
const ::ern411::ern::File&
TechnicalSoftwareDetails::_Internal::file(const TechnicalSoftwareDetails* msg) {
  return *msg->file_;
}
const ::ern411::ern::OperatingSystemType&
TechnicalSoftwareDetails::_Internal::operating_system_type(const TechnicalSoftwareDetails* msg) {
  return *msg->operating_system_type_;
}
const ::ern411::ern::PreviewDetails&
TechnicalSoftwareDetails::_Internal::preview_details(const TechnicalSoftwareDetails* msg) {
  return *msg->preview_details_;
}
void TechnicalSoftwareDetails::clear_applicable_territory_code() {
  if (applicable_territory_code_ != nullptr) applicable_territory_code_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
TechnicalSoftwareDetails::TechnicalSoftwareDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  fingerprint_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.TechnicalSoftwareDetails)
}
TechnicalSoftwareDetails::TechnicalSoftwareDetails(const TechnicalSoftwareDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      fingerprint_(from.fingerprint_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  language_and_script_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_language_and_script_code()) {
    language_and_script_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_language_and_script_code(),
      GetArena());
  }
  technical_resource_details_reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_technical_resource_details_reference()) {
    technical_resource_details_reference_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_technical_resource_details_reference(),
      GetArena());
  }
  if (from._internal_has_applicable_territory_code()) {
    applicable_territory_code_ = new ::ern411::avs::CurrentTerritoryCode(*from.applicable_territory_code_);
  } else {
    applicable_territory_code_ = nullptr;
  }
  if (from._internal_has_file()) {
    file_ = new ::ern411::ern::File(*from.file_);
  } else {
    file_ = nullptr;
  }
  if (from._internal_has_operating_system_type()) {
    operating_system_type_ = new ::ern411::ern::OperatingSystemType(*from.operating_system_type_);
  } else {
    operating_system_type_ = nullptr;
  }
  if (from._internal_has_preview_details()) {
    preview_details_ = new ::ern411::ern::PreviewDetails(*from.preview_details_);
  } else {
    preview_details_ = nullptr;
  }
  ::memcpy(&bit_depth_, &from.bit_depth_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_preview_) -
    reinterpret_cast<char*>(&bit_depth_)) + sizeof(is_preview_));
  // @@protoc_insertion_point(copy_constructor:ern411.ern.TechnicalSoftwareDetails)
}

void TechnicalSoftwareDetails::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TechnicalSoftwareDetails_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  language_and_script_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  technical_resource_details_reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&applicable_territory_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_preview_) -
      reinterpret_cast<char*>(&applicable_territory_code_)) + sizeof(is_preview_));
}

TechnicalSoftwareDetails::~TechnicalSoftwareDetails() {
  // @@protoc_insertion_point(destructor:ern411.ern.TechnicalSoftwareDetails)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TechnicalSoftwareDetails::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  language_and_script_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  technical_resource_details_reference_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete applicable_territory_code_;
  if (this != internal_default_instance()) delete file_;
  if (this != internal_default_instance()) delete operating_system_type_;
  if (this != internal_default_instance()) delete preview_details_;
}

void TechnicalSoftwareDetails::ArenaDtor(void* object) {
  TechnicalSoftwareDetails* _this = reinterpret_cast< TechnicalSoftwareDetails* >(object);
  (void)_this;
}
void TechnicalSoftwareDetails::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TechnicalSoftwareDetails::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TechnicalSoftwareDetails& TechnicalSoftwareDetails::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TechnicalSoftwareDetails_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void TechnicalSoftwareDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.TechnicalSoftwareDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fingerprint_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      language_and_script_code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      technical_resource_details_reference_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(applicable_territory_code_ != nullptr);
      applicable_territory_code_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(file_ != nullptr);
      file_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(operating_system_type_ != nullptr);
      operating_system_type_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(preview_details_ != nullptr);
      preview_details_->Clear();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&bit_depth_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_default_) -
        reinterpret_cast<char*>(&bit_depth_)) + sizeof(is_default_));
  }
  is_preview_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TechnicalSoftwareDetails::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ern411.avs.CurrentTerritoryCode applicable_territory_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_applicable_territory_code(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 bit_depth = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_bit_depth(&has_bits);
          bit_depth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.ern.File file = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_file(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.Fingerprint fingerprint = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fingerprint(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool is_default = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_is_default(&has_bits);
          is_default_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_preview = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_is_preview(&has_bits);
          is_preview_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string language_and_script_code = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_language_and_script_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.TechnicalSoftwareDetails.language_and_script_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.ern.OperatingSystemType operating_system_type = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_operating_system_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.ern.PreviewDetails preview_details = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_preview_details(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string technical_resource_details_reference = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_technical_resource_details_reference();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.TechnicalSoftwareDetails.technical_resource_details_reference");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TechnicalSoftwareDetails::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.TechnicalSoftwareDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ern411.avs.CurrentTerritoryCode applicable_territory_code = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::applicable_territory_code(this), target, stream);
  }

  // optional int32 bit_depth = 2;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_bit_depth(), target);
  }

  // optional .ern411.ern.File file = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::file(this), target, stream);
  }

  // repeated .ern411.ern.Fingerprint fingerprint = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_fingerprint_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_fingerprint(i), target, stream);
  }

  // optional bool is_default = 5;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_is_default(), target);
  }

  // optional bool is_preview = 6;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_is_preview(), target);
  }

  // optional string language_and_script_code = 7;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_language_and_script_code().data(), static_cast<int>(this->_internal_language_and_script_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.TechnicalSoftwareDetails.language_and_script_code");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_language_and_script_code(), target);
  }

  // optional .ern411.ern.OperatingSystemType operating_system_type = 8;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::operating_system_type(this), target, stream);
  }

  // optional .ern411.ern.PreviewDetails preview_details = 9;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::preview_details(this), target, stream);
  }

  // optional string technical_resource_details_reference = 10;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_technical_resource_details_reference().data(), static_cast<int>(this->_internal_technical_resource_details_reference().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.TechnicalSoftwareDetails.technical_resource_details_reference");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_technical_resource_details_reference(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.TechnicalSoftwareDetails)
  return target;
}

size_t TechnicalSoftwareDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.TechnicalSoftwareDetails)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ern411.ern.Fingerprint fingerprint = 4;
  total_size += 1UL * this->_internal_fingerprint_size();
  for (const auto& msg : this->fingerprint_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string language_and_script_code = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_language_and_script_code());
    }

    // optional string technical_resource_details_reference = 10;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_technical_resource_details_reference());
    }

    // optional .ern411.avs.CurrentTerritoryCode applicable_territory_code = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *applicable_territory_code_);
    }

    // optional .ern411.ern.File file = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *file_);
    }

    // optional .ern411.ern.OperatingSystemType operating_system_type = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *operating_system_type_);
    }

    // optional .ern411.ern.PreviewDetails preview_details = 9;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *preview_details_);
    }

    // optional int32 bit_depth = 2;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_bit_depth());
    }

    // optional bool is_default = 5;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  // optional bool is_preview = 6;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TechnicalSoftwareDetails::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.TechnicalSoftwareDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const TechnicalSoftwareDetails* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TechnicalSoftwareDetails>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.TechnicalSoftwareDetails)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.TechnicalSoftwareDetails)
    MergeFrom(*source);
  }
}

void TechnicalSoftwareDetails::MergeFrom(const TechnicalSoftwareDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.TechnicalSoftwareDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fingerprint_.MergeFrom(from.fingerprint_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_language_and_script_code(from._internal_language_and_script_code());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_technical_resource_details_reference(from._internal_technical_resource_details_reference());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_applicable_territory_code()->::ern411::avs::CurrentTerritoryCode::MergeFrom(from._internal_applicable_territory_code());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_file()->::ern411::ern::File::MergeFrom(from._internal_file());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_operating_system_type()->::ern411::ern::OperatingSystemType::MergeFrom(from._internal_operating_system_type());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_preview_details()->::ern411::ern::PreviewDetails::MergeFrom(from._internal_preview_details());
    }
    if (cached_has_bits & 0x00000040u) {
      bit_depth_ = from.bit_depth_;
    }
    if (cached_has_bits & 0x00000080u) {
      is_default_ = from.is_default_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_is_preview(from._internal_is_preview());
  }
}

void TechnicalSoftwareDetails::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.TechnicalSoftwareDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TechnicalSoftwareDetails::CopyFrom(const TechnicalSoftwareDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.TechnicalSoftwareDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TechnicalSoftwareDetails::IsInitialized() const {
  return true;
}

void TechnicalSoftwareDetails::InternalSwap(TechnicalSoftwareDetails* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  fingerprint_.InternalSwap(&other->fingerprint_);
  language_and_script_code_.Swap(&other->language_and_script_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  technical_resource_details_reference_.Swap(&other->technical_resource_details_reference_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TechnicalSoftwareDetails, is_preview_)
      + sizeof(TechnicalSoftwareDetails::is_preview_)
      - PROTOBUF_FIELD_OFFSET(TechnicalSoftwareDetails, applicable_territory_code_)>(
          reinterpret_cast<char*>(&applicable_territory_code_),
          reinterpret_cast<char*>(&other->applicable_territory_code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TechnicalSoftwareDetails::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TechnicalSoundRecordingDetails::InitAsDefaultInstance() {
  ::ern411::ern::_TechnicalSoundRecordingDetails_default_instance_._instance.get_mutable()->applicable_territory_code_ = const_cast< ::ern411::avs::CurrentTerritoryCode*>(
      ::ern411::avs::CurrentTerritoryCode::internal_default_instance());
  ::ern411::ern::_TechnicalSoundRecordingDetails_default_instance_._instance.get_mutable()->audio_codec_type_ = const_cast< ::ern411::ern::AudioCodecType*>(
      ::ern411::ern::AudioCodecType::internal_default_instance());
  ::ern411::ern::_TechnicalSoundRecordingDetails_default_instance_._instance.get_mutable()->bit_rate_ = const_cast< ::ern411::ern::BitRate*>(
      ::ern411::ern::BitRate::internal_default_instance());
  ::ern411::ern::_TechnicalSoundRecordingDetails_default_instance_._instance.get_mutable()->file_ = const_cast< ::ern411::ern::File*>(
      ::ern411::ern::File::internal_default_instance());
  ::ern411::ern::_TechnicalSoundRecordingDetails_default_instance_._instance.get_mutable()->original_bit_rate_ = const_cast< ::ern411::ern::BitRate*>(
      ::ern411::ern::BitRate::internal_default_instance());
  ::ern411::ern::_TechnicalSoundRecordingDetails_default_instance_._instance.get_mutable()->original_sampling_rate_ = const_cast< ::ern411::ern::SamplingRate*>(
      ::ern411::ern::SamplingRate::internal_default_instance());
  ::ern411::ern::_TechnicalSoundRecordingDetails_default_instance_._instance.get_mutable()->preview_details_ = const_cast< ::ern411::ern::SoundRecordingPreviewDetails*>(
      ::ern411::ern::SoundRecordingPreviewDetails::internal_default_instance());
  ::ern411::ern::_TechnicalSoundRecordingDetails_default_instance_._instance.get_mutable()->sampling_rate_ = const_cast< ::ern411::ern::SamplingRate*>(
      ::ern411::ern::SamplingRate::internal_default_instance());
}
class TechnicalSoundRecordingDetails::_Internal {
 public:
  using HasBits = decltype(std::declval<TechnicalSoundRecordingDetails>()._has_bits_);
  static const ::ern411::avs::CurrentTerritoryCode& applicable_territory_code(const TechnicalSoundRecordingDetails* msg);
  static void set_has_applicable_territory_code(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::ern411::ern::AudioCodecType& audio_codec_type(const TechnicalSoundRecordingDetails* msg);
  static void set_has_audio_codec_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_bit_depth(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::ern411::ern::BitRate& bit_rate(const TechnicalSoundRecordingDetails* msg);
  static void set_has_bit_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_bits_per_sample(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ern411::ern::File& file(const TechnicalSoundRecordingDetails* msg);
  static void set_has_file(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_is_default(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_is_preview(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_language_and_script_code(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_number_of_channels(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::ern411::ern::BitRate& original_bit_rate(const TechnicalSoundRecordingDetails* msg);
  static void set_has_original_bit_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::ern411::ern::SamplingRate& original_sampling_rate(const TechnicalSoundRecordingDetails* msg);
  static void set_has_original_sampling_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::ern411::ern::SoundRecordingPreviewDetails& preview_details(const TechnicalSoundRecordingDetails* msg);
  static void set_has_preview_details(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::ern411::ern::SamplingRate& sampling_rate(const TechnicalSoundRecordingDetails* msg);
  static void set_has_sampling_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_technical_resource_details_reference(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::ern411::avs::CurrentTerritoryCode&
TechnicalSoundRecordingDetails::_Internal::applicable_territory_code(const TechnicalSoundRecordingDetails* msg) {
  return *msg->applicable_territory_code_;
}
const ::ern411::ern::AudioCodecType&
TechnicalSoundRecordingDetails::_Internal::audio_codec_type(const TechnicalSoundRecordingDetails* msg) {
  return *msg->audio_codec_type_;
}
const ::ern411::ern::BitRate&
TechnicalSoundRecordingDetails::_Internal::bit_rate(const TechnicalSoundRecordingDetails* msg) {
  return *msg->bit_rate_;
}
const ::ern411::ern::File&
TechnicalSoundRecordingDetails::_Internal::file(const TechnicalSoundRecordingDetails* msg) {
  return *msg->file_;
}
const ::ern411::ern::BitRate&
TechnicalSoundRecordingDetails::_Internal::original_bit_rate(const TechnicalSoundRecordingDetails* msg) {
  return *msg->original_bit_rate_;
}
const ::ern411::ern::SamplingRate&
TechnicalSoundRecordingDetails::_Internal::original_sampling_rate(const TechnicalSoundRecordingDetails* msg) {
  return *msg->original_sampling_rate_;
}
const ::ern411::ern::SoundRecordingPreviewDetails&
TechnicalSoundRecordingDetails::_Internal::preview_details(const TechnicalSoundRecordingDetails* msg) {
  return *msg->preview_details_;
}
const ::ern411::ern::SamplingRate&
TechnicalSoundRecordingDetails::_Internal::sampling_rate(const TechnicalSoundRecordingDetails* msg) {
  return *msg->sampling_rate_;
}
void TechnicalSoundRecordingDetails::clear_applicable_territory_code() {
  if (applicable_territory_code_ != nullptr) applicable_territory_code_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
TechnicalSoundRecordingDetails::TechnicalSoundRecordingDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  fingerprint_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.TechnicalSoundRecordingDetails)
}
TechnicalSoundRecordingDetails::TechnicalSoundRecordingDetails(const TechnicalSoundRecordingDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      fingerprint_(from.fingerprint_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  duration_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_duration()) {
    duration_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_duration(),
      GetArena());
  }
  language_and_script_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_language_and_script_code()) {
    language_and_script_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_language_and_script_code(),
      GetArena());
  }
  technical_resource_details_reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_technical_resource_details_reference()) {
    technical_resource_details_reference_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_technical_resource_details_reference(),
      GetArena());
  }
  if (from._internal_has_applicable_territory_code()) {
    applicable_territory_code_ = new ::ern411::avs::CurrentTerritoryCode(*from.applicable_territory_code_);
  } else {
    applicable_territory_code_ = nullptr;
  }
  if (from._internal_has_audio_codec_type()) {
    audio_codec_type_ = new ::ern411::ern::AudioCodecType(*from.audio_codec_type_);
  } else {
    audio_codec_type_ = nullptr;
  }
  if (from._internal_has_bit_rate()) {
    bit_rate_ = new ::ern411::ern::BitRate(*from.bit_rate_);
  } else {
    bit_rate_ = nullptr;
  }
  if (from._internal_has_file()) {
    file_ = new ::ern411::ern::File(*from.file_);
  } else {
    file_ = nullptr;
  }
  if (from._internal_has_original_bit_rate()) {
    original_bit_rate_ = new ::ern411::ern::BitRate(*from.original_bit_rate_);
  } else {
    original_bit_rate_ = nullptr;
  }
  if (from._internal_has_original_sampling_rate()) {
    original_sampling_rate_ = new ::ern411::ern::SamplingRate(*from.original_sampling_rate_);
  } else {
    original_sampling_rate_ = nullptr;
  }
  if (from._internal_has_preview_details()) {
    preview_details_ = new ::ern411::ern::SoundRecordingPreviewDetails(*from.preview_details_);
  } else {
    preview_details_ = nullptr;
  }
  if (from._internal_has_sampling_rate()) {
    sampling_rate_ = new ::ern411::ern::SamplingRate(*from.sampling_rate_);
  } else {
    sampling_rate_ = nullptr;
  }
  ::memcpy(&bit_depth_, &from.bit_depth_,
    static_cast<size_t>(reinterpret_cast<char*>(&number_of_channels_) -
    reinterpret_cast<char*>(&bit_depth_)) + sizeof(number_of_channels_));
  // @@protoc_insertion_point(copy_constructor:ern411.ern.TechnicalSoundRecordingDetails)
}

void TechnicalSoundRecordingDetails::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TechnicalSoundRecordingDetails_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  duration_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  language_and_script_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  technical_resource_details_reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&applicable_territory_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&number_of_channels_) -
      reinterpret_cast<char*>(&applicable_territory_code_)) + sizeof(number_of_channels_));
}

TechnicalSoundRecordingDetails::~TechnicalSoundRecordingDetails() {
  // @@protoc_insertion_point(destructor:ern411.ern.TechnicalSoundRecordingDetails)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TechnicalSoundRecordingDetails::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  duration_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  language_and_script_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  technical_resource_details_reference_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete applicable_territory_code_;
  if (this != internal_default_instance()) delete audio_codec_type_;
  if (this != internal_default_instance()) delete bit_rate_;
  if (this != internal_default_instance()) delete file_;
  if (this != internal_default_instance()) delete original_bit_rate_;
  if (this != internal_default_instance()) delete original_sampling_rate_;
  if (this != internal_default_instance()) delete preview_details_;
  if (this != internal_default_instance()) delete sampling_rate_;
}

void TechnicalSoundRecordingDetails::ArenaDtor(void* object) {
  TechnicalSoundRecordingDetails* _this = reinterpret_cast< TechnicalSoundRecordingDetails* >(object);
  (void)_this;
}
void TechnicalSoundRecordingDetails::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TechnicalSoundRecordingDetails::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TechnicalSoundRecordingDetails& TechnicalSoundRecordingDetails::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TechnicalSoundRecordingDetails_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void TechnicalSoundRecordingDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.TechnicalSoundRecordingDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fingerprint_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      duration_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      language_and_script_code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      technical_resource_details_reference_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(applicable_territory_code_ != nullptr);
      applicable_territory_code_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(audio_codec_type_ != nullptr);
      audio_codec_type_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(bit_rate_ != nullptr);
      bit_rate_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(file_ != nullptr);
      file_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(original_bit_rate_ != nullptr);
      original_bit_rate_->Clear();
    }
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(original_sampling_rate_ != nullptr);
      original_sampling_rate_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(preview_details_ != nullptr);
      preview_details_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(sampling_rate_ != nullptr);
      sampling_rate_->Clear();
    }
  }
  if (cached_has_bits & 0x0000f800u) {
    ::memset(&bit_depth_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&number_of_channels_) -
        reinterpret_cast<char*>(&bit_depth_)) + sizeof(number_of_channels_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TechnicalSoundRecordingDetails::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ern411.avs.CurrentTerritoryCode applicable_territory_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_applicable_territory_code(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.ern.AudioCodecType audio_codec_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_audio_codec_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 bit_depth = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_bit_depth(&has_bits);
          bit_depth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.ern.BitRate bit_rate = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_bit_rate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 bits_per_sample = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_bits_per_sample(&has_bits);
          bits_per_sample_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string duration = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_duration();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.TechnicalSoundRecordingDetails.duration");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.ern.File file = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_file(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.Fingerprint fingerprint = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fingerprint(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool is_default = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_is_default(&has_bits);
          is_default_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_preview = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_is_preview(&has_bits);
          is_preview_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string language_and_script_code = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_language_and_script_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.TechnicalSoundRecordingDetails.language_and_script_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 number_of_channels = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_number_of_channels(&has_bits);
          number_of_channels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.ern.BitRate original_bit_rate = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_original_bit_rate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.ern.SamplingRate original_sampling_rate = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_original_sampling_rate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.ern.SoundRecordingPreviewDetails preview_details = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_preview_details(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.ern.SamplingRate sampling_rate = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_sampling_rate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string technical_resource_details_reference = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          auto str = _internal_mutable_technical_resource_details_reference();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.TechnicalSoundRecordingDetails.technical_resource_details_reference");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TechnicalSoundRecordingDetails::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.TechnicalSoundRecordingDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ern411.avs.CurrentTerritoryCode applicable_territory_code = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::applicable_territory_code(this), target, stream);
  }

  // optional .ern411.ern.AudioCodecType audio_codec_type = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::audio_codec_type(this), target, stream);
  }

  // optional int32 bit_depth = 3;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_bit_depth(), target);
  }

  // optional .ern411.ern.BitRate bit_rate = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::bit_rate(this), target, stream);
  }

  // optional int32 bits_per_sample = 5;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_bits_per_sample(), target);
  }

  // optional string duration = 6;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_duration().data(), static_cast<int>(this->_internal_duration().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.TechnicalSoundRecordingDetails.duration");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_duration(), target);
  }

  // optional .ern411.ern.File file = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::file(this), target, stream);
  }

  // repeated .ern411.ern.Fingerprint fingerprint = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_fingerprint_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_fingerprint(i), target, stream);
  }

  // optional bool is_default = 9;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_is_default(), target);
  }

  // optional bool is_preview = 10;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_is_preview(), target);
  }

  // optional string language_and_script_code = 11;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_language_and_script_code().data(), static_cast<int>(this->_internal_language_and_script_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.TechnicalSoundRecordingDetails.language_and_script_code");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_language_and_script_code(), target);
  }

  // optional int32 number_of_channels = 12;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_number_of_channels(), target);
  }

  // optional .ern411.ern.BitRate original_bit_rate = 13;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::original_bit_rate(this), target, stream);
  }

  // optional .ern411.ern.SamplingRate original_sampling_rate = 14;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::original_sampling_rate(this), target, stream);
  }

  // optional .ern411.ern.SoundRecordingPreviewDetails preview_details = 15;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::preview_details(this), target, stream);
  }

  // optional .ern411.ern.SamplingRate sampling_rate = 16;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::sampling_rate(this), target, stream);
  }

  // optional string technical_resource_details_reference = 17;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_technical_resource_details_reference().data(), static_cast<int>(this->_internal_technical_resource_details_reference().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.TechnicalSoundRecordingDetails.technical_resource_details_reference");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_technical_resource_details_reference(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.TechnicalSoundRecordingDetails)
  return target;
}

size_t TechnicalSoundRecordingDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.TechnicalSoundRecordingDetails)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ern411.ern.Fingerprint fingerprint = 8;
  total_size += 1UL * this->_internal_fingerprint_size();
  for (const auto& msg : this->fingerprint_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string duration = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_duration());
    }

    // optional string language_and_script_code = 11;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_language_and_script_code());
    }

    // optional string technical_resource_details_reference = 17;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_technical_resource_details_reference());
    }

    // optional .ern411.avs.CurrentTerritoryCode applicable_territory_code = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *applicable_territory_code_);
    }

    // optional .ern411.ern.AudioCodecType audio_codec_type = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *audio_codec_type_);
    }

    // optional .ern411.ern.BitRate bit_rate = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *bit_rate_);
    }

    // optional .ern411.ern.File file = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *file_);
    }

    // optional .ern411.ern.BitRate original_bit_rate = 13;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *original_bit_rate_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .ern411.ern.SamplingRate original_sampling_rate = 14;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *original_sampling_rate_);
    }

    // optional .ern411.ern.SoundRecordingPreviewDetails preview_details = 15;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *preview_details_);
    }

    // optional .ern411.ern.SamplingRate sampling_rate = 16;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sampling_rate_);
    }

    // optional int32 bit_depth = 3;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_bit_depth());
    }

    // optional int32 bits_per_sample = 5;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_bits_per_sample());
    }

    // optional bool is_default = 9;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 1;
    }

    // optional bool is_preview = 10;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 1;
    }

    // optional int32 number_of_channels = 12;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_number_of_channels());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TechnicalSoundRecordingDetails::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.TechnicalSoundRecordingDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const TechnicalSoundRecordingDetails* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TechnicalSoundRecordingDetails>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.TechnicalSoundRecordingDetails)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.TechnicalSoundRecordingDetails)
    MergeFrom(*source);
  }
}

void TechnicalSoundRecordingDetails::MergeFrom(const TechnicalSoundRecordingDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.TechnicalSoundRecordingDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fingerprint_.MergeFrom(from.fingerprint_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_duration(from._internal_duration());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_language_and_script_code(from._internal_language_and_script_code());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_technical_resource_details_reference(from._internal_technical_resource_details_reference());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_applicable_territory_code()->::ern411::avs::CurrentTerritoryCode::MergeFrom(from._internal_applicable_territory_code());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_audio_codec_type()->::ern411::ern::AudioCodecType::MergeFrom(from._internal_audio_codec_type());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_bit_rate()->::ern411::ern::BitRate::MergeFrom(from._internal_bit_rate());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_file()->::ern411::ern::File::MergeFrom(from._internal_file());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_original_bit_rate()->::ern411::ern::BitRate::MergeFrom(from._internal_original_bit_rate());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_original_sampling_rate()->::ern411::ern::SamplingRate::MergeFrom(from._internal_original_sampling_rate());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_preview_details()->::ern411::ern::SoundRecordingPreviewDetails::MergeFrom(from._internal_preview_details());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_sampling_rate()->::ern411::ern::SamplingRate::MergeFrom(from._internal_sampling_rate());
    }
    if (cached_has_bits & 0x00000800u) {
      bit_depth_ = from.bit_depth_;
    }
    if (cached_has_bits & 0x00001000u) {
      bits_per_sample_ = from.bits_per_sample_;
    }
    if (cached_has_bits & 0x00002000u) {
      is_default_ = from.is_default_;
    }
    if (cached_has_bits & 0x00004000u) {
      is_preview_ = from.is_preview_;
    }
    if (cached_has_bits & 0x00008000u) {
      number_of_channels_ = from.number_of_channels_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TechnicalSoundRecordingDetails::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.TechnicalSoundRecordingDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TechnicalSoundRecordingDetails::CopyFrom(const TechnicalSoundRecordingDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.TechnicalSoundRecordingDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TechnicalSoundRecordingDetails::IsInitialized() const {
  return true;
}

void TechnicalSoundRecordingDetails::InternalSwap(TechnicalSoundRecordingDetails* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  fingerprint_.InternalSwap(&other->fingerprint_);
  duration_.Swap(&other->duration_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  language_and_script_code_.Swap(&other->language_and_script_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  technical_resource_details_reference_.Swap(&other->technical_resource_details_reference_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TechnicalSoundRecordingDetails, number_of_channels_)
      + sizeof(TechnicalSoundRecordingDetails::number_of_channels_)
      - PROTOBUF_FIELD_OFFSET(TechnicalSoundRecordingDetails, applicable_territory_code_)>(
          reinterpret_cast<char*>(&applicable_territory_code_),
          reinterpret_cast<char*>(&other->applicable_territory_code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TechnicalSoundRecordingDetails::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TechnicalTextDetails::InitAsDefaultInstance() {
  ::ern411::ern::_TechnicalTextDetails_default_instance_._instance.get_mutable()->applicable_territory_code_ = const_cast< ::ern411::avs::CurrentTerritoryCode*>(
      ::ern411::avs::CurrentTerritoryCode::internal_default_instance());
  ::ern411::ern::_TechnicalTextDetails_default_instance_._instance.get_mutable()->file_ = const_cast< ::ern411::ern::File*>(
      ::ern411::ern::File::internal_default_instance());
  ::ern411::ern::_TechnicalTextDetails_default_instance_._instance.get_mutable()->preview_details_ = const_cast< ::ern411::ern::PreviewDetails*>(
      ::ern411::ern::PreviewDetails::internal_default_instance());
  ::ern411::ern::_TechnicalTextDetails_default_instance_._instance.get_mutable()->text_codec_type_ = const_cast< ::ern411::ern::TextCodecType*>(
      ::ern411::ern::TextCodecType::internal_default_instance());
}
class TechnicalTextDetails::_Internal {
 public:
  using HasBits = decltype(std::declval<TechnicalTextDetails>()._has_bits_);
  static const ::ern411::avs::CurrentTerritoryCode& applicable_territory_code(const TechnicalTextDetails* msg);
  static void set_has_applicable_territory_code(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_bit_depth(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::ern411::ern::File& file(const TechnicalTextDetails* msg);
  static void set_has_file(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_is_default(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_is_preview(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_language_and_script_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ern411::ern::PreviewDetails& preview_details(const TechnicalTextDetails* msg);
  static void set_has_preview_details(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_technical_resource_details_reference(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::ern411::ern::TextCodecType& text_codec_type(const TechnicalTextDetails* msg);
  static void set_has_text_codec_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::ern411::avs::CurrentTerritoryCode&
TechnicalTextDetails::_Internal::applicable_territory_code(const TechnicalTextDetails* msg) {
  return *msg->applicable_territory_code_;
}
const ::ern411::ern::File&
TechnicalTextDetails::_Internal::file(const TechnicalTextDetails* msg) {
  return *msg->file_;
}
const ::ern411::ern::PreviewDetails&
TechnicalTextDetails::_Internal::preview_details(const TechnicalTextDetails* msg) {
  return *msg->preview_details_;
}
const ::ern411::ern::TextCodecType&
TechnicalTextDetails::_Internal::text_codec_type(const TechnicalTextDetails* msg) {
  return *msg->text_codec_type_;
}
void TechnicalTextDetails::clear_applicable_territory_code() {
  if (applicable_territory_code_ != nullptr) applicable_territory_code_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
TechnicalTextDetails::TechnicalTextDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  fingerprint_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.TechnicalTextDetails)
}
TechnicalTextDetails::TechnicalTextDetails(const TechnicalTextDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      fingerprint_(from.fingerprint_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  language_and_script_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_language_and_script_code()) {
    language_and_script_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_language_and_script_code(),
      GetArena());
  }
  technical_resource_details_reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_technical_resource_details_reference()) {
    technical_resource_details_reference_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_technical_resource_details_reference(),
      GetArena());
  }
  if (from._internal_has_applicable_territory_code()) {
    applicable_territory_code_ = new ::ern411::avs::CurrentTerritoryCode(*from.applicable_territory_code_);
  } else {
    applicable_territory_code_ = nullptr;
  }
  if (from._internal_has_file()) {
    file_ = new ::ern411::ern::File(*from.file_);
  } else {
    file_ = nullptr;
  }
  if (from._internal_has_preview_details()) {
    preview_details_ = new ::ern411::ern::PreviewDetails(*from.preview_details_);
  } else {
    preview_details_ = nullptr;
  }
  if (from._internal_has_text_codec_type()) {
    text_codec_type_ = new ::ern411::ern::TextCodecType(*from.text_codec_type_);
  } else {
    text_codec_type_ = nullptr;
  }
  ::memcpy(&bit_depth_, &from.bit_depth_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_preview_) -
    reinterpret_cast<char*>(&bit_depth_)) + sizeof(is_preview_));
  // @@protoc_insertion_point(copy_constructor:ern411.ern.TechnicalTextDetails)
}

void TechnicalTextDetails::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TechnicalTextDetails_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  language_and_script_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  technical_resource_details_reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&applicable_territory_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_preview_) -
      reinterpret_cast<char*>(&applicable_territory_code_)) + sizeof(is_preview_));
}

TechnicalTextDetails::~TechnicalTextDetails() {
  // @@protoc_insertion_point(destructor:ern411.ern.TechnicalTextDetails)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TechnicalTextDetails::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  language_and_script_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  technical_resource_details_reference_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete applicable_territory_code_;
  if (this != internal_default_instance()) delete file_;
  if (this != internal_default_instance()) delete preview_details_;
  if (this != internal_default_instance()) delete text_codec_type_;
}

void TechnicalTextDetails::ArenaDtor(void* object) {
  TechnicalTextDetails* _this = reinterpret_cast< TechnicalTextDetails* >(object);
  (void)_this;
}
void TechnicalTextDetails::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TechnicalTextDetails::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TechnicalTextDetails& TechnicalTextDetails::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TechnicalTextDetails_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void TechnicalTextDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.TechnicalTextDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fingerprint_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      language_and_script_code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      technical_resource_details_reference_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(applicable_territory_code_ != nullptr);
      applicable_territory_code_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(file_ != nullptr);
      file_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(preview_details_ != nullptr);
      preview_details_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(text_codec_type_ != nullptr);
      text_codec_type_->Clear();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&bit_depth_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_default_) -
        reinterpret_cast<char*>(&bit_depth_)) + sizeof(is_default_));
  }
  is_preview_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TechnicalTextDetails::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ern411.avs.CurrentTerritoryCode applicable_territory_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_applicable_territory_code(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 bit_depth = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_bit_depth(&has_bits);
          bit_depth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.ern.File file = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_file(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.Fingerprint fingerprint = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fingerprint(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool is_default = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_is_default(&has_bits);
          is_default_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_preview = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_is_preview(&has_bits);
          is_preview_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string language_and_script_code = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_language_and_script_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.TechnicalTextDetails.language_and_script_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.ern.PreviewDetails preview_details = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_preview_details(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string technical_resource_details_reference = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_technical_resource_details_reference();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.TechnicalTextDetails.technical_resource_details_reference");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.ern.TextCodecType text_codec_type = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_text_codec_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TechnicalTextDetails::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.TechnicalTextDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ern411.avs.CurrentTerritoryCode applicable_territory_code = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::applicable_territory_code(this), target, stream);
  }

  // optional int32 bit_depth = 2;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_bit_depth(), target);
  }

  // optional .ern411.ern.File file = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::file(this), target, stream);
  }

  // repeated .ern411.ern.Fingerprint fingerprint = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_fingerprint_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_fingerprint(i), target, stream);
  }

  // optional bool is_default = 5;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_is_default(), target);
  }

  // optional bool is_preview = 6;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_is_preview(), target);
  }

  // optional string language_and_script_code = 7;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_language_and_script_code().data(), static_cast<int>(this->_internal_language_and_script_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.TechnicalTextDetails.language_and_script_code");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_language_and_script_code(), target);
  }

  // optional .ern411.ern.PreviewDetails preview_details = 8;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::preview_details(this), target, stream);
  }

  // optional string technical_resource_details_reference = 9;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_technical_resource_details_reference().data(), static_cast<int>(this->_internal_technical_resource_details_reference().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.TechnicalTextDetails.technical_resource_details_reference");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_technical_resource_details_reference(), target);
  }

  // optional .ern411.ern.TextCodecType text_codec_type = 10;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::text_codec_type(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.TechnicalTextDetails)
  return target;
}

size_t TechnicalTextDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.TechnicalTextDetails)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ern411.ern.Fingerprint fingerprint = 4;
  total_size += 1UL * this->_internal_fingerprint_size();
  for (const auto& msg : this->fingerprint_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string language_and_script_code = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_language_and_script_code());
    }

    // optional string technical_resource_details_reference = 9;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_technical_resource_details_reference());
    }

    // optional .ern411.avs.CurrentTerritoryCode applicable_territory_code = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *applicable_territory_code_);
    }

    // optional .ern411.ern.File file = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *file_);
    }

    // optional .ern411.ern.PreviewDetails preview_details = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *preview_details_);
    }

    // optional .ern411.ern.TextCodecType text_codec_type = 10;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *text_codec_type_);
    }

    // optional int32 bit_depth = 2;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_bit_depth());
    }

    // optional bool is_default = 5;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  // optional bool is_preview = 6;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TechnicalTextDetails::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.TechnicalTextDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const TechnicalTextDetails* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TechnicalTextDetails>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.TechnicalTextDetails)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.TechnicalTextDetails)
    MergeFrom(*source);
  }
}

void TechnicalTextDetails::MergeFrom(const TechnicalTextDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.TechnicalTextDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fingerprint_.MergeFrom(from.fingerprint_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_language_and_script_code(from._internal_language_and_script_code());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_technical_resource_details_reference(from._internal_technical_resource_details_reference());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_applicable_territory_code()->::ern411::avs::CurrentTerritoryCode::MergeFrom(from._internal_applicable_territory_code());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_file()->::ern411::ern::File::MergeFrom(from._internal_file());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_preview_details()->::ern411::ern::PreviewDetails::MergeFrom(from._internal_preview_details());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_text_codec_type()->::ern411::ern::TextCodecType::MergeFrom(from._internal_text_codec_type());
    }
    if (cached_has_bits & 0x00000040u) {
      bit_depth_ = from.bit_depth_;
    }
    if (cached_has_bits & 0x00000080u) {
      is_default_ = from.is_default_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_is_preview(from._internal_is_preview());
  }
}

void TechnicalTextDetails::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.TechnicalTextDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TechnicalTextDetails::CopyFrom(const TechnicalTextDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.TechnicalTextDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TechnicalTextDetails::IsInitialized() const {
  return true;
}

void TechnicalTextDetails::InternalSwap(TechnicalTextDetails* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  fingerprint_.InternalSwap(&other->fingerprint_);
  language_and_script_code_.Swap(&other->language_and_script_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  technical_resource_details_reference_.Swap(&other->technical_resource_details_reference_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TechnicalTextDetails, is_preview_)
      + sizeof(TechnicalTextDetails::is_preview_)
      - PROTOBUF_FIELD_OFFSET(TechnicalTextDetails, applicable_territory_code_)>(
          reinterpret_cast<char*>(&applicable_territory_code_),
          reinterpret_cast<char*>(&other->applicable_territory_code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TechnicalTextDetails::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TechnicalVideoDetails::InitAsDefaultInstance() {
  ::ern411::ern::_TechnicalVideoDetails_default_instance_._instance.get_mutable()->applicable_territory_code_ = const_cast< ::ern411::avs::CurrentTerritoryCode*>(
      ::ern411::avs::CurrentTerritoryCode::internal_default_instance());
  ::ern411::ern::_TechnicalVideoDetails_default_instance_._instance.get_mutable()->aspect_ratio_ = const_cast< ::ern411::ern::AspectRatio*>(
      ::ern411::ern::AspectRatio::internal_default_instance());
  ::ern411::ern::_TechnicalVideoDetails_default_instance_._instance.get_mutable()->audio_bit_rate_ = const_cast< ::ern411::ern::BitRate*>(
      ::ern411::ern::BitRate::internal_default_instance());
  ::ern411::ern::_TechnicalVideoDetails_default_instance_._instance.get_mutable()->audio_codec_type_ = const_cast< ::ern411::ern::AudioCodecType*>(
      ::ern411::ern::AudioCodecType::internal_default_instance());
  ::ern411::ern::_TechnicalVideoDetails_default_instance_._instance.get_mutable()->audio_sampling_rate_ = const_cast< ::ern411::ern::SamplingRate*>(
      ::ern411::ern::SamplingRate::internal_default_instance());
  ::ern411::ern::_TechnicalVideoDetails_default_instance_._instance.get_mutable()->container_format_ = const_cast< ::ern411::ern::ContainerFormat*>(
      ::ern411::ern::ContainerFormat::internal_default_instance());
  ::ern411::ern::_TechnicalVideoDetails_default_instance_._instance.get_mutable()->core_area_ = const_cast< ::ern411::ern::CoreArea*>(
      ::ern411::ern::CoreArea::internal_default_instance());
  ::ern411::ern::_TechnicalVideoDetails_default_instance_._instance.get_mutable()->file_ = const_cast< ::ern411::ern::File*>(
      ::ern411::ern::File::internal_default_instance());
  ::ern411::ern::_TechnicalVideoDetails_default_instance_._instance.get_mutable()->frame_rate_ = const_cast< ::ern411::ern::FrameRate*>(
      ::ern411::ern::FrameRate::internal_default_instance());
  ::ern411::ern::_TechnicalVideoDetails_default_instance_._instance.get_mutable()->image_height_ = const_cast< ::ern411::ern::Extent*>(
      ::ern411::ern::Extent::internal_default_instance());
  ::ern411::ern::_TechnicalVideoDetails_default_instance_._instance.get_mutable()->image_width_ = const_cast< ::ern411::ern::Extent*>(
      ::ern411::ern::Extent::internal_default_instance());
  ::ern411::ern::_TechnicalVideoDetails_default_instance_._instance.get_mutable()->overall_bit_rate_ = const_cast< ::ern411::ern::BitRate*>(
      ::ern411::ern::BitRate::internal_default_instance());
  ::ern411::ern::_TechnicalVideoDetails_default_instance_._instance.get_mutable()->preview_details_ = const_cast< ::ern411::ern::SoundRecordingPreviewDetails*>(
      ::ern411::ern::SoundRecordingPreviewDetails::internal_default_instance());
  ::ern411::ern::_TechnicalVideoDetails_default_instance_._instance.get_mutable()->video_bit_rate_ = const_cast< ::ern411::ern::BitRate*>(
      ::ern411::ern::BitRate::internal_default_instance());
  ::ern411::ern::_TechnicalVideoDetails_default_instance_._instance.get_mutable()->video_codec_type_ = const_cast< ::ern411::ern::VideoCodecType*>(
      ::ern411::ern::VideoCodecType::internal_default_instance());
  ::ern411::ern::_TechnicalVideoDetails_default_instance_._instance.get_mutable()->video_definition_type_ = const_cast< ::ern411::avs::VideoDefinitionType*>(
      ::ern411::avs::VideoDefinitionType::internal_default_instance());
}
class TechnicalVideoDetails::_Internal {
 public:
  using HasBits = decltype(std::declval<TechnicalVideoDetails>()._has_bits_);
  static const ::ern411::avs::CurrentTerritoryCode& applicable_territory_code(const TechnicalVideoDetails* msg);
  static void set_has_applicable_territory_code(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::ern411::ern::AspectRatio& aspect_ratio(const TechnicalVideoDetails* msg);
  static void set_has_aspect_ratio(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::ern411::ern::BitRate& audio_bit_rate(const TechnicalVideoDetails* msg);
  static void set_has_audio_bit_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_audio_bits_per_sample(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static const ::ern411::ern::AudioCodecType& audio_codec_type(const TechnicalVideoDetails* msg);
  static void set_has_audio_codec_type(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::ern411::ern::SamplingRate& audio_sampling_rate(const TechnicalVideoDetails* msg);
  static void set_has_audio_sampling_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_bit_depth(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_color_depth(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static const ::ern411::ern::ContainerFormat& container_format(const TechnicalVideoDetails* msg);
  static void set_has_container_format(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::ern411::ern::CoreArea& core_area(const TechnicalVideoDetails* msg);
  static void set_has_core_area(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ern411::ern::File& file(const TechnicalVideoDetails* msg);
  static void set_has_file(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::ern411::ern::FrameRate& frame_rate(const TechnicalVideoDetails* msg);
  static void set_has_frame_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::ern411::ern::Extent& image_height(const TechnicalVideoDetails* msg);
  static void set_has_image_height(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::ern411::ern::Extent& image_width(const TechnicalVideoDetails* msg);
  static void set_has_image_width(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_is_default(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_is_preview(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_language_and_script_code(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_number_of_audio_channels(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static const ::ern411::ern::BitRate& overall_bit_rate(const TechnicalVideoDetails* msg);
  static void set_has_overall_bit_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::ern411::ern::SoundRecordingPreviewDetails& preview_details(const TechnicalVideoDetails* msg);
  static void set_has_preview_details(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_technical_resource_details_reference(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::ern411::ern::BitRate& video_bit_rate(const TechnicalVideoDetails* msg);
  static void set_has_video_bit_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static const ::ern411::ern::VideoCodecType& video_codec_type(const TechnicalVideoDetails* msg);
  static void set_has_video_codec_type(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static const ::ern411::avs::VideoDefinitionType& video_definition_type(const TechnicalVideoDetails* msg);
  static void set_has_video_definition_type(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
};

const ::ern411::avs::CurrentTerritoryCode&
TechnicalVideoDetails::_Internal::applicable_territory_code(const TechnicalVideoDetails* msg) {
  return *msg->applicable_territory_code_;
}
const ::ern411::ern::AspectRatio&
TechnicalVideoDetails::_Internal::aspect_ratio(const TechnicalVideoDetails* msg) {
  return *msg->aspect_ratio_;
}
const ::ern411::ern::BitRate&
TechnicalVideoDetails::_Internal::audio_bit_rate(const TechnicalVideoDetails* msg) {
  return *msg->audio_bit_rate_;
}
const ::ern411::ern::AudioCodecType&
TechnicalVideoDetails::_Internal::audio_codec_type(const TechnicalVideoDetails* msg) {
  return *msg->audio_codec_type_;
}
const ::ern411::ern::SamplingRate&
TechnicalVideoDetails::_Internal::audio_sampling_rate(const TechnicalVideoDetails* msg) {
  return *msg->audio_sampling_rate_;
}
const ::ern411::ern::ContainerFormat&
TechnicalVideoDetails::_Internal::container_format(const TechnicalVideoDetails* msg) {
  return *msg->container_format_;
}
const ::ern411::ern::CoreArea&
TechnicalVideoDetails::_Internal::core_area(const TechnicalVideoDetails* msg) {
  return *msg->core_area_;
}
const ::ern411::ern::File&
TechnicalVideoDetails::_Internal::file(const TechnicalVideoDetails* msg) {
  return *msg->file_;
}
const ::ern411::ern::FrameRate&
TechnicalVideoDetails::_Internal::frame_rate(const TechnicalVideoDetails* msg) {
  return *msg->frame_rate_;
}
const ::ern411::ern::Extent&
TechnicalVideoDetails::_Internal::image_height(const TechnicalVideoDetails* msg) {
  return *msg->image_height_;
}
const ::ern411::ern::Extent&
TechnicalVideoDetails::_Internal::image_width(const TechnicalVideoDetails* msg) {
  return *msg->image_width_;
}
const ::ern411::ern::BitRate&
TechnicalVideoDetails::_Internal::overall_bit_rate(const TechnicalVideoDetails* msg) {
  return *msg->overall_bit_rate_;
}
const ::ern411::ern::SoundRecordingPreviewDetails&
TechnicalVideoDetails::_Internal::preview_details(const TechnicalVideoDetails* msg) {
  return *msg->preview_details_;
}
const ::ern411::ern::BitRate&
TechnicalVideoDetails::_Internal::video_bit_rate(const TechnicalVideoDetails* msg) {
  return *msg->video_bit_rate_;
}
const ::ern411::ern::VideoCodecType&
TechnicalVideoDetails::_Internal::video_codec_type(const TechnicalVideoDetails* msg) {
  return *msg->video_codec_type_;
}
const ::ern411::avs::VideoDefinitionType&
TechnicalVideoDetails::_Internal::video_definition_type(const TechnicalVideoDetails* msg) {
  return *msg->video_definition_type_;
}
void TechnicalVideoDetails::clear_applicable_territory_code() {
  if (applicable_territory_code_ != nullptr) applicable_territory_code_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void TechnicalVideoDetails::clear_video_definition_type() {
  if (video_definition_type_ != nullptr) video_definition_type_->Clear();
  _has_bits_[0] &= ~0x00040000u;
}
TechnicalVideoDetails::TechnicalVideoDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  fingerprint_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.TechnicalVideoDetails)
}
TechnicalVideoDetails::TechnicalVideoDetails(const TechnicalVideoDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      fingerprint_(from.fingerprint_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  duration_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_duration()) {
    duration_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_duration(),
      GetArena());
  }
  language_and_script_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_language_and_script_code()) {
    language_and_script_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_language_and_script_code(),
      GetArena());
  }
  technical_resource_details_reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_technical_resource_details_reference()) {
    technical_resource_details_reference_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_technical_resource_details_reference(),
      GetArena());
  }
  if (from._internal_has_applicable_territory_code()) {
    applicable_territory_code_ = new ::ern411::avs::CurrentTerritoryCode(*from.applicable_territory_code_);
  } else {
    applicable_territory_code_ = nullptr;
  }
  if (from._internal_has_aspect_ratio()) {
    aspect_ratio_ = new ::ern411::ern::AspectRatio(*from.aspect_ratio_);
  } else {
    aspect_ratio_ = nullptr;
  }
  if (from._internal_has_audio_bit_rate()) {
    audio_bit_rate_ = new ::ern411::ern::BitRate(*from.audio_bit_rate_);
  } else {
    audio_bit_rate_ = nullptr;
  }
  if (from._internal_has_audio_codec_type()) {
    audio_codec_type_ = new ::ern411::ern::AudioCodecType(*from.audio_codec_type_);
  } else {
    audio_codec_type_ = nullptr;
  }
  if (from._internal_has_audio_sampling_rate()) {
    audio_sampling_rate_ = new ::ern411::ern::SamplingRate(*from.audio_sampling_rate_);
  } else {
    audio_sampling_rate_ = nullptr;
  }
  if (from._internal_has_container_format()) {
    container_format_ = new ::ern411::ern::ContainerFormat(*from.container_format_);
  } else {
    container_format_ = nullptr;
  }
  if (from._internal_has_core_area()) {
    core_area_ = new ::ern411::ern::CoreArea(*from.core_area_);
  } else {
    core_area_ = nullptr;
  }
  if (from._internal_has_file()) {
    file_ = new ::ern411::ern::File(*from.file_);
  } else {
    file_ = nullptr;
  }
  if (from._internal_has_frame_rate()) {
    frame_rate_ = new ::ern411::ern::FrameRate(*from.frame_rate_);
  } else {
    frame_rate_ = nullptr;
  }
  if (from._internal_has_image_height()) {
    image_height_ = new ::ern411::ern::Extent(*from.image_height_);
  } else {
    image_height_ = nullptr;
  }
  if (from._internal_has_image_width()) {
    image_width_ = new ::ern411::ern::Extent(*from.image_width_);
  } else {
    image_width_ = nullptr;
  }
  if (from._internal_has_overall_bit_rate()) {
    overall_bit_rate_ = new ::ern411::ern::BitRate(*from.overall_bit_rate_);
  } else {
    overall_bit_rate_ = nullptr;
  }
  if (from._internal_has_preview_details()) {
    preview_details_ = new ::ern411::ern::SoundRecordingPreviewDetails(*from.preview_details_);
  } else {
    preview_details_ = nullptr;
  }
  if (from._internal_has_video_bit_rate()) {
    video_bit_rate_ = new ::ern411::ern::BitRate(*from.video_bit_rate_);
  } else {
    video_bit_rate_ = nullptr;
  }
  if (from._internal_has_video_codec_type()) {
    video_codec_type_ = new ::ern411::ern::VideoCodecType(*from.video_codec_type_);
  } else {
    video_codec_type_ = nullptr;
  }
  if (from._internal_has_video_definition_type()) {
    video_definition_type_ = new ::ern411::avs::VideoDefinitionType(*from.video_definition_type_);
  } else {
    video_definition_type_ = nullptr;
  }
  ::memcpy(&audio_bits_per_sample_, &from.audio_bits_per_sample_,
    static_cast<size_t>(reinterpret_cast<char*>(&number_of_audio_channels_) -
    reinterpret_cast<char*>(&audio_bits_per_sample_)) + sizeof(number_of_audio_channels_));
  // @@protoc_insertion_point(copy_constructor:ern411.ern.TechnicalVideoDetails)
}

void TechnicalVideoDetails::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TechnicalVideoDetails_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  duration_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  language_and_script_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  technical_resource_details_reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&applicable_territory_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&number_of_audio_channels_) -
      reinterpret_cast<char*>(&applicable_territory_code_)) + sizeof(number_of_audio_channels_));
}

TechnicalVideoDetails::~TechnicalVideoDetails() {
  // @@protoc_insertion_point(destructor:ern411.ern.TechnicalVideoDetails)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TechnicalVideoDetails::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  duration_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  language_and_script_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  technical_resource_details_reference_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete applicable_territory_code_;
  if (this != internal_default_instance()) delete aspect_ratio_;
  if (this != internal_default_instance()) delete audio_bit_rate_;
  if (this != internal_default_instance()) delete audio_codec_type_;
  if (this != internal_default_instance()) delete audio_sampling_rate_;
  if (this != internal_default_instance()) delete container_format_;
  if (this != internal_default_instance()) delete core_area_;
  if (this != internal_default_instance()) delete file_;
  if (this != internal_default_instance()) delete frame_rate_;
  if (this != internal_default_instance()) delete image_height_;
  if (this != internal_default_instance()) delete image_width_;
  if (this != internal_default_instance()) delete overall_bit_rate_;
  if (this != internal_default_instance()) delete preview_details_;
  if (this != internal_default_instance()) delete video_bit_rate_;
  if (this != internal_default_instance()) delete video_codec_type_;
  if (this != internal_default_instance()) delete video_definition_type_;
}

void TechnicalVideoDetails::ArenaDtor(void* object) {
  TechnicalVideoDetails* _this = reinterpret_cast< TechnicalVideoDetails* >(object);
  (void)_this;
}
void TechnicalVideoDetails::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TechnicalVideoDetails::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TechnicalVideoDetails& TechnicalVideoDetails::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TechnicalVideoDetails_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void TechnicalVideoDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.TechnicalVideoDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fingerprint_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      duration_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      language_and_script_code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      technical_resource_details_reference_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(applicable_territory_code_ != nullptr);
      applicable_territory_code_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(aspect_ratio_ != nullptr);
      aspect_ratio_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(audio_bit_rate_ != nullptr);
      audio_bit_rate_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(audio_codec_type_ != nullptr);
      audio_codec_type_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(audio_sampling_rate_ != nullptr);
      audio_sampling_rate_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(container_format_ != nullptr);
      container_format_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(core_area_ != nullptr);
      core_area_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(file_ != nullptr);
      file_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(frame_rate_ != nullptr);
      frame_rate_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(image_height_ != nullptr);
      image_height_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(image_width_ != nullptr);
      image_width_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(overall_bit_rate_ != nullptr);
      overall_bit_rate_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(preview_details_ != nullptr);
      preview_details_->Clear();
    }
  }
  if (cached_has_bits & 0x00070000u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(video_bit_rate_ != nullptr);
      video_bit_rate_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(video_codec_type_ != nullptr);
      video_codec_type_->Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      GOOGLE_DCHECK(video_definition_type_ != nullptr);
      video_definition_type_->Clear();
    }
  }
  if (cached_has_bits & 0x00f80000u) {
    ::memset(&audio_bits_per_sample_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_preview_) -
        reinterpret_cast<char*>(&audio_bits_per_sample_)) + sizeof(is_preview_));
  }
  number_of_audio_channels_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TechnicalVideoDetails::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ern411.avs.CurrentTerritoryCode applicable_territory_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_applicable_territory_code(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.ern.AspectRatio aspect_ratio = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_aspect_ratio(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.ern.BitRate audio_bit_rate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_audio_bit_rate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 audio_bits_per_sample = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_audio_bits_per_sample(&has_bits);
          audio_bits_per_sample_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.ern.AudioCodecType audio_codec_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_audio_codec_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.ern.SamplingRate audio_sampling_rate = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_audio_sampling_rate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 bit_depth = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_bit_depth(&has_bits);
          bit_depth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 color_depth = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_color_depth(&has_bits);
          color_depth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.ern.ContainerFormat container_format = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_container_format(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.ern.CoreArea core_area = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_core_area(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string duration = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_duration();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.TechnicalVideoDetails.duration");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.ern.File file = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_file(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.Fingerprint fingerprint = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fingerprint(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .ern411.ern.FrameRate frame_rate = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_frame_rate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.ern.Extent image_height = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_image_height(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.ern.Extent image_width = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_image_width(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_default = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_is_default(&has_bits);
          is_default_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_preview = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_is_preview(&has_bits);
          is_preview_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string language_and_script_code = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          auto str = _internal_mutable_language_and_script_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.TechnicalVideoDetails.language_and_script_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 number_of_audio_channels = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_number_of_audio_channels(&has_bits);
          number_of_audio_channels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.ern.BitRate overall_bit_rate = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_overall_bit_rate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.ern.SoundRecordingPreviewDetails preview_details = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_preview_details(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string technical_resource_details_reference = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          auto str = _internal_mutable_technical_resource_details_reference();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.TechnicalVideoDetails.technical_resource_details_reference");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.ern.BitRate video_bit_rate = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_video_bit_rate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.ern.VideoCodecType video_codec_type = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_video_codec_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.avs.VideoDefinitionType video_definition_type = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_video_definition_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TechnicalVideoDetails::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.TechnicalVideoDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ern411.avs.CurrentTerritoryCode applicable_territory_code = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::applicable_territory_code(this), target, stream);
  }

  // optional .ern411.ern.AspectRatio aspect_ratio = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::aspect_ratio(this), target, stream);
  }

  // optional .ern411.ern.BitRate audio_bit_rate = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::audio_bit_rate(this), target, stream);
  }

  // optional int32 audio_bits_per_sample = 4;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_audio_bits_per_sample(), target);
  }

  // optional .ern411.ern.AudioCodecType audio_codec_type = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::audio_codec_type(this), target, stream);
  }

  // optional .ern411.ern.SamplingRate audio_sampling_rate = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::audio_sampling_rate(this), target, stream);
  }

  // optional int32 bit_depth = 7;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_bit_depth(), target);
  }

  // optional int32 color_depth = 8;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_color_depth(), target);
  }

  // optional .ern411.ern.ContainerFormat container_format = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::container_format(this), target, stream);
  }

  // optional .ern411.ern.CoreArea core_area = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::core_area(this), target, stream);
  }

  // optional string duration = 11;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_duration().data(), static_cast<int>(this->_internal_duration().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.TechnicalVideoDetails.duration");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_duration(), target);
  }

  // optional .ern411.ern.File file = 12;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::file(this), target, stream);
  }

  // repeated .ern411.ern.Fingerprint fingerprint = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_fingerprint_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, this->_internal_fingerprint(i), target, stream);
  }

  // optional .ern411.ern.FrameRate frame_rate = 14;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::frame_rate(this), target, stream);
  }

  // optional .ern411.ern.Extent image_height = 15;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::image_height(this), target, stream);
  }

  // optional .ern411.ern.Extent image_width = 16;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::image_width(this), target, stream);
  }

  // optional bool is_default = 17;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(17, this->_internal_is_default(), target);
  }

  // optional bool is_preview = 18;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(18, this->_internal_is_preview(), target);
  }

  // optional string language_and_script_code = 19;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_language_and_script_code().data(), static_cast<int>(this->_internal_language_and_script_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.TechnicalVideoDetails.language_and_script_code");
    target = stream->WriteStringMaybeAliased(
        19, this->_internal_language_and_script_code(), target);
  }

  // optional int32 number_of_audio_channels = 20;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(20, this->_internal_number_of_audio_channels(), target);
  }

  // optional .ern411.ern.BitRate overall_bit_rate = 21;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::overall_bit_rate(this), target, stream);
  }

  // optional .ern411.ern.SoundRecordingPreviewDetails preview_details = 22;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        22, _Internal::preview_details(this), target, stream);
  }

  // optional string technical_resource_details_reference = 23;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_technical_resource_details_reference().data(), static_cast<int>(this->_internal_technical_resource_details_reference().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.TechnicalVideoDetails.technical_resource_details_reference");
    target = stream->WriteStringMaybeAliased(
        23, this->_internal_technical_resource_details_reference(), target);
  }

  // optional .ern411.ern.BitRate video_bit_rate = 24;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        24, _Internal::video_bit_rate(this), target, stream);
  }

  // optional .ern411.ern.VideoCodecType video_codec_type = 25;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        25, _Internal::video_codec_type(this), target, stream);
  }

  // optional .ern411.avs.VideoDefinitionType video_definition_type = 26;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        26, _Internal::video_definition_type(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.TechnicalVideoDetails)
  return target;
}

size_t TechnicalVideoDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.TechnicalVideoDetails)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ern411.ern.Fingerprint fingerprint = 13;
  total_size += 1UL * this->_internal_fingerprint_size();
  for (const auto& msg : this->fingerprint_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string duration = 11;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_duration());
    }

    // optional string language_and_script_code = 19;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_language_and_script_code());
    }

    // optional string technical_resource_details_reference = 23;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_technical_resource_details_reference());
    }

    // optional .ern411.avs.CurrentTerritoryCode applicable_territory_code = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *applicable_territory_code_);
    }

    // optional .ern411.ern.AspectRatio aspect_ratio = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *aspect_ratio_);
    }

    // optional .ern411.ern.BitRate audio_bit_rate = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *audio_bit_rate_);
    }

    // optional .ern411.ern.AudioCodecType audio_codec_type = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *audio_codec_type_);
    }

    // optional .ern411.ern.SamplingRate audio_sampling_rate = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *audio_sampling_rate_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .ern411.ern.ContainerFormat container_format = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *container_format_);
    }

    // optional .ern411.ern.CoreArea core_area = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *core_area_);
    }

    // optional .ern411.ern.File file = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *file_);
    }

    // optional .ern411.ern.FrameRate frame_rate = 14;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *frame_rate_);
    }

    // optional .ern411.ern.Extent image_height = 15;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *image_height_);
    }

    // optional .ern411.ern.Extent image_width = 16;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *image_width_);
    }

    // optional .ern411.ern.BitRate overall_bit_rate = 21;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *overall_bit_rate_);
    }

    // optional .ern411.ern.SoundRecordingPreviewDetails preview_details = 22;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *preview_details_);
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional .ern411.ern.BitRate video_bit_rate = 24;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *video_bit_rate_);
    }

    // optional .ern411.ern.VideoCodecType video_codec_type = 25;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *video_codec_type_);
    }

    // optional .ern411.avs.VideoDefinitionType video_definition_type = 26;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *video_definition_type_);
    }

    // optional int32 audio_bits_per_sample = 4;
    if (cached_has_bits & 0x00080000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_audio_bits_per_sample());
    }

    // optional int32 bit_depth = 7;
    if (cached_has_bits & 0x00100000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_bit_depth());
    }

    // optional int32 color_depth = 8;
    if (cached_has_bits & 0x00200000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_color_depth());
    }

    // optional bool is_default = 17;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 1;
    }

    // optional bool is_preview = 18;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 1;
    }

  }
  // optional int32 number_of_audio_channels = 20;
  if (cached_has_bits & 0x01000000u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_number_of_audio_channels());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TechnicalVideoDetails::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.TechnicalVideoDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const TechnicalVideoDetails* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TechnicalVideoDetails>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.TechnicalVideoDetails)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.TechnicalVideoDetails)
    MergeFrom(*source);
  }
}

void TechnicalVideoDetails::MergeFrom(const TechnicalVideoDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.TechnicalVideoDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fingerprint_.MergeFrom(from.fingerprint_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_duration(from._internal_duration());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_language_and_script_code(from._internal_language_and_script_code());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_technical_resource_details_reference(from._internal_technical_resource_details_reference());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_applicable_territory_code()->::ern411::avs::CurrentTerritoryCode::MergeFrom(from._internal_applicable_territory_code());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_aspect_ratio()->::ern411::ern::AspectRatio::MergeFrom(from._internal_aspect_ratio());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_audio_bit_rate()->::ern411::ern::BitRate::MergeFrom(from._internal_audio_bit_rate());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_audio_codec_type()->::ern411::ern::AudioCodecType::MergeFrom(from._internal_audio_codec_type());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_audio_sampling_rate()->::ern411::ern::SamplingRate::MergeFrom(from._internal_audio_sampling_rate());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_container_format()->::ern411::ern::ContainerFormat::MergeFrom(from._internal_container_format());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_core_area()->::ern411::ern::CoreArea::MergeFrom(from._internal_core_area());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_file()->::ern411::ern::File::MergeFrom(from._internal_file());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_mutable_frame_rate()->::ern411::ern::FrameRate::MergeFrom(from._internal_frame_rate());
    }
    if (cached_has_bits & 0x00001000u) {
      _internal_mutable_image_height()->::ern411::ern::Extent::MergeFrom(from._internal_image_height());
    }
    if (cached_has_bits & 0x00002000u) {
      _internal_mutable_image_width()->::ern411::ern::Extent::MergeFrom(from._internal_image_width());
    }
    if (cached_has_bits & 0x00004000u) {
      _internal_mutable_overall_bit_rate()->::ern411::ern::BitRate::MergeFrom(from._internal_overall_bit_rate());
    }
    if (cached_has_bits & 0x00008000u) {
      _internal_mutable_preview_details()->::ern411::ern::SoundRecordingPreviewDetails::MergeFrom(from._internal_preview_details());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _internal_mutable_video_bit_rate()->::ern411::ern::BitRate::MergeFrom(from._internal_video_bit_rate());
    }
    if (cached_has_bits & 0x00020000u) {
      _internal_mutable_video_codec_type()->::ern411::ern::VideoCodecType::MergeFrom(from._internal_video_codec_type());
    }
    if (cached_has_bits & 0x00040000u) {
      _internal_mutable_video_definition_type()->::ern411::avs::VideoDefinitionType::MergeFrom(from._internal_video_definition_type());
    }
    if (cached_has_bits & 0x00080000u) {
      audio_bits_per_sample_ = from.audio_bits_per_sample_;
    }
    if (cached_has_bits & 0x00100000u) {
      bit_depth_ = from.bit_depth_;
    }
    if (cached_has_bits & 0x00200000u) {
      color_depth_ = from.color_depth_;
    }
    if (cached_has_bits & 0x00400000u) {
      is_default_ = from.is_default_;
    }
    if (cached_has_bits & 0x00800000u) {
      is_preview_ = from.is_preview_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x01000000u) {
    _internal_set_number_of_audio_channels(from._internal_number_of_audio_channels());
  }
}

void TechnicalVideoDetails::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.TechnicalVideoDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TechnicalVideoDetails::CopyFrom(const TechnicalVideoDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.TechnicalVideoDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TechnicalVideoDetails::IsInitialized() const {
  return true;
}

void TechnicalVideoDetails::InternalSwap(TechnicalVideoDetails* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  fingerprint_.InternalSwap(&other->fingerprint_);
  duration_.Swap(&other->duration_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  language_and_script_code_.Swap(&other->language_and_script_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  technical_resource_details_reference_.Swap(&other->technical_resource_details_reference_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TechnicalVideoDetails, number_of_audio_channels_)
      + sizeof(TechnicalVideoDetails::number_of_audio_channels_)
      - PROTOBUF_FIELD_OFFSET(TechnicalVideoDetails, applicable_territory_code_)>(
          reinterpret_cast<char*>(&applicable_territory_code_),
          reinterpret_cast<char*>(&other->applicable_territory_code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TechnicalVideoDetails::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Text::InitAsDefaultInstance() {
  ::ern411::ern::_Text_default_instance_._instance.get_mutable()->creation_date_ = const_cast< ::ern411::ern::EventDateWithoutFlags*>(
      ::ern411::ern::EventDateWithoutFlags::internal_default_instance());
  ::ern411::ern::_Text_default_instance_._instance.get_mutable()->resource_contained_resource_reference_list_ = const_cast< ::ern411::ern::ResourceContainedResourceReferenceList*>(
      ::ern411::ern::ResourceContainedResourceReferenceList::internal_default_instance());
  ::ern411::ern::_Text_default_instance_._instance.get_mutable()->type_ = const_cast< ::ern411::ern::TextType*>(
      ::ern411::ern::TextType::internal_default_instance());
}
class Text::_Internal {
 public:
  using HasBits = decltype(std::declval<Text>()._has_bits_);
  static void set_has_contains_hidden_content(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::ern411::ern::EventDateWithoutFlags& creation_date(const Text* msg);
  static void set_has_creation_date(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_supplemental(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_language_and_script_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ern411::ern::ResourceContainedResourceReferenceList& resource_contained_resource_reference_list(const Text* msg);
  static void set_has_resource_contained_resource_reference_list(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_resource_reference(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::ern411::ern::TextType& type(const Text* msg);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::ern411::ern::EventDateWithoutFlags&
Text::_Internal::creation_date(const Text* msg) {
  return *msg->creation_date_;
}
const ::ern411::ern::ResourceContainedResourceReferenceList&
Text::_Internal::resource_contained_resource_reference_list(const Text* msg) {
  return *msg->resource_contained_resource_reference_list_;
}
const ::ern411::ern::TextType&
Text::_Internal::type(const Text* msg) {
  return *msg->type_;
}
Text::Text(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  additional_title_(arena),
  c_line_(arena),
  contributor_(arena),
  courtesy_line_(arena),
  display_artist_(arena),
  display_artist_name_(arena),
  display_title_(arena),
  display_title_text_(arena),
  first_publication_date_(arena),
  parental_warning_type_(arena),
  related_release_(arena),
  related_resource_(arena),
  resource_id_(arena),
  resource_rights_controller_(arena),
  technical_details_(arena),
  version_type_(arena),
  work_id_(arena),
  work_rights_controller_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.Text)
}
Text::Text(const Text& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      additional_title_(from.additional_title_),
      c_line_(from.c_line_),
      contributor_(from.contributor_),
      courtesy_line_(from.courtesy_line_),
      display_artist_(from.display_artist_),
      display_artist_name_(from.display_artist_name_),
      display_title_(from.display_title_),
      display_title_text_(from.display_title_text_),
      first_publication_date_(from.first_publication_date_),
      parental_warning_type_(from.parental_warning_type_),
      related_release_(from.related_release_),
      related_resource_(from.related_resource_),
      resource_id_(from.resource_id_),
      resource_rights_controller_(from.resource_rights_controller_),
      technical_details_(from.technical_details_),
      version_type_(from.version_type_),
      work_id_(from.work_id_),
      work_rights_controller_(from.work_rights_controller_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  language_and_script_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_language_and_script_code()) {
    language_and_script_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_language_and_script_code(),
      GetArena());
  }
  resource_reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_resource_reference()) {
    resource_reference_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_resource_reference(),
      GetArena());
  }
  if (from._internal_has_creation_date()) {
    creation_date_ = new ::ern411::ern::EventDateWithoutFlags(*from.creation_date_);
  } else {
    creation_date_ = nullptr;
  }
  if (from._internal_has_resource_contained_resource_reference_list()) {
    resource_contained_resource_reference_list_ = new ::ern411::ern::ResourceContainedResourceReferenceList(*from.resource_contained_resource_reference_list_);
  } else {
    resource_contained_resource_reference_list_ = nullptr;
  }
  if (from._internal_has_type()) {
    type_ = new ::ern411::ern::TextType(*from.type_);
  } else {
    type_ = nullptr;
  }
  ::memcpy(&contains_hidden_content_, &from.contains_hidden_content_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_supplemental_) -
    reinterpret_cast<char*>(&contains_hidden_content_)) + sizeof(is_supplemental_));
  // @@protoc_insertion_point(copy_constructor:ern411.ern.Text)
}

void Text::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Text_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  language_and_script_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resource_reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&creation_date_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_supplemental_) -
      reinterpret_cast<char*>(&creation_date_)) + sizeof(is_supplemental_));
}

Text::~Text() {
  // @@protoc_insertion_point(destructor:ern411.ern.Text)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Text::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  language_and_script_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resource_reference_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete creation_date_;
  if (this != internal_default_instance()) delete resource_contained_resource_reference_list_;
  if (this != internal_default_instance()) delete type_;
}

void Text::ArenaDtor(void* object) {
  Text* _this = reinterpret_cast< Text* >(object);
  (void)_this;
}
void Text::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Text::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Text& Text::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Text_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void Text::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.Text)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  additional_title_.Clear();
  c_line_.Clear();
  contributor_.Clear();
  courtesy_line_.Clear();
  display_artist_.Clear();
  display_artist_name_.Clear();
  display_title_.Clear();
  display_title_text_.Clear();
  first_publication_date_.Clear();
  parental_warning_type_.Clear();
  related_release_.Clear();
  related_resource_.Clear();
  resource_id_.Clear();
  resource_rights_controller_.Clear();
  technical_details_.Clear();
  version_type_.Clear();
  work_id_.Clear();
  work_rights_controller_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      language_and_script_code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      resource_reference_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(creation_date_ != nullptr);
      creation_date_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(resource_contained_resource_reference_list_ != nullptr);
      resource_contained_resource_reference_list_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(type_ != nullptr);
      type_->Clear();
    }
  }
  ::memset(&contains_hidden_content_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_supplemental_) -
      reinterpret_cast<char*>(&contains_hidden_content_)) + sizeof(is_supplemental_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Text::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ern411.ern.AdditionalTitle additional_title = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_additional_title(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.CLineWithDefault c_line = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_c_line(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool contains_hidden_content = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_contains_hidden_content(&has_bits);
          contains_hidden_content_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.Contributor contributor = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_contributor(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.CourtesyLineWithDefault courtesy_line = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_courtesy_line(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .ern411.ern.EventDateWithoutFlags creation_date = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_creation_date(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.DisplayArtist display_artist = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_display_artist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.DisplayArtistNameWithDefault display_artist_name = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_display_artist_name(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.DisplayTitle display_title = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_display_title(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.DisplayTitleText display_title_text = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_display_title_text(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.FulfillmentDateWithTerritory first_publication_date = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_first_publication_date(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool is_supplemental = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_is_supplemental(&has_bits);
          is_supplemental_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string language_and_script_code = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_language_and_script_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.Text.language_and_script_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.ParentalWarningTypeWithTerritory parental_warning_type = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_parental_warning_type(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.RelatedRelease related_release = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_related_release(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.RelatedResource related_resource = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_related_resource(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<130>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .ern411.ern.ResourceContainedResourceReferenceList resource_contained_resource_reference_list = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_resource_contained_resource_reference_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.TextId resource_id = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_resource_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<146>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string resource_reference = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          auto str = _internal_mutable_resource_reference();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.Text.resource_reference");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.ResourceRightsController resource_rights_controller = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_resource_rights_controller(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<162>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.TechnicalTextDetails technical_details = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_technical_details(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<170>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .ern411.ern.TextType type = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.VersionType version_type = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_version_type(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<186>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.MusicalWorkId work_id = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_work_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<194>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.WorkRightsController work_rights_controller = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_work_rights_controller(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<202>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Text::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.Text)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ern411.ern.AdditionalTitle additional_title = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_additional_title_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_additional_title(i), target, stream);
  }

  // repeated .ern411.ern.CLineWithDefault c_line = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_c_line_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_c_line(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool contains_hidden_content = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_contains_hidden_content(), target);
  }

  // repeated .ern411.ern.Contributor contributor = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_contributor_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_contributor(i), target, stream);
  }

  // repeated .ern411.ern.CourtesyLineWithDefault courtesy_line = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_courtesy_line_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_courtesy_line(i), target, stream);
  }

  // optional .ern411.ern.EventDateWithoutFlags creation_date = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::creation_date(this), target, stream);
  }

  // repeated .ern411.ern.DisplayArtist display_artist = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_display_artist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_display_artist(i), target, stream);
  }

  // repeated .ern411.ern.DisplayArtistNameWithDefault display_artist_name = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_display_artist_name_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_display_artist_name(i), target, stream);
  }

  // repeated .ern411.ern.DisplayTitle display_title = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_display_title_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_display_title(i), target, stream);
  }

  // repeated .ern411.ern.DisplayTitleText display_title_text = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_display_title_text_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_display_title_text(i), target, stream);
  }

  // repeated .ern411.ern.FulfillmentDateWithTerritory first_publication_date = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_first_publication_date_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_first_publication_date(i), target, stream);
  }

  // optional bool is_supplemental = 12;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_is_supplemental(), target);
  }

  // optional string language_and_script_code = 13;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_language_and_script_code().data(), static_cast<int>(this->_internal_language_and_script_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.Text.language_and_script_code");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_language_and_script_code(), target);
  }

  // repeated .ern411.ern.ParentalWarningTypeWithTerritory parental_warning_type = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_parental_warning_type_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, this->_internal_parental_warning_type(i), target, stream);
  }

  // repeated .ern411.ern.RelatedRelease related_release = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_related_release_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, this->_internal_related_release(i), target, stream);
  }

  // repeated .ern411.ern.RelatedResource related_resource = 16;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_related_resource_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, this->_internal_related_resource(i), target, stream);
  }

  // optional .ern411.ern.ResourceContainedResourceReferenceList resource_contained_resource_reference_list = 17;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::resource_contained_resource_reference_list(this), target, stream);
  }

  // repeated .ern411.ern.TextId resource_id = 18;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_resource_id_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, this->_internal_resource_id(i), target, stream);
  }

  // optional string resource_reference = 19;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_resource_reference().data(), static_cast<int>(this->_internal_resource_reference().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.Text.resource_reference");
    target = stream->WriteStringMaybeAliased(
        19, this->_internal_resource_reference(), target);
  }

  // repeated .ern411.ern.ResourceRightsController resource_rights_controller = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_resource_rights_controller_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, this->_internal_resource_rights_controller(i), target, stream);
  }

  // repeated .ern411.ern.TechnicalTextDetails technical_details = 21;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_technical_details_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, this->_internal_technical_details(i), target, stream);
  }

  // optional .ern411.ern.TextType type = 22;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        22, _Internal::type(this), target, stream);
  }

  // repeated .ern411.ern.VersionType version_type = 23;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_version_type_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(23, this->_internal_version_type(i), target, stream);
  }

  // repeated .ern411.ern.MusicalWorkId work_id = 24;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_work_id_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(24, this->_internal_work_id(i), target, stream);
  }

  // repeated .ern411.ern.WorkRightsController work_rights_controller = 25;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_work_rights_controller_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(25, this->_internal_work_rights_controller(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.Text)
  return target;
}

size_t Text::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.Text)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ern411.ern.AdditionalTitle additional_title = 1;
  total_size += 1UL * this->_internal_additional_title_size();
  for (const auto& msg : this->additional_title_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.CLineWithDefault c_line = 2;
  total_size += 1UL * this->_internal_c_line_size();
  for (const auto& msg : this->c_line_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.Contributor contributor = 4;
  total_size += 1UL * this->_internal_contributor_size();
  for (const auto& msg : this->contributor_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.CourtesyLineWithDefault courtesy_line = 5;
  total_size += 1UL * this->_internal_courtesy_line_size();
  for (const auto& msg : this->courtesy_line_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.DisplayArtist display_artist = 7;
  total_size += 1UL * this->_internal_display_artist_size();
  for (const auto& msg : this->display_artist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.DisplayArtistNameWithDefault display_artist_name = 8;
  total_size += 1UL * this->_internal_display_artist_name_size();
  for (const auto& msg : this->display_artist_name_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.DisplayTitle display_title = 9;
  total_size += 1UL * this->_internal_display_title_size();
  for (const auto& msg : this->display_title_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.DisplayTitleText display_title_text = 10;
  total_size += 1UL * this->_internal_display_title_text_size();
  for (const auto& msg : this->display_title_text_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.FulfillmentDateWithTerritory first_publication_date = 11;
  total_size += 1UL * this->_internal_first_publication_date_size();
  for (const auto& msg : this->first_publication_date_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.ParentalWarningTypeWithTerritory parental_warning_type = 14;
  total_size += 1UL * this->_internal_parental_warning_type_size();
  for (const auto& msg : this->parental_warning_type_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.RelatedRelease related_release = 15;
  total_size += 1UL * this->_internal_related_release_size();
  for (const auto& msg : this->related_release_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.RelatedResource related_resource = 16;
  total_size += 2UL * this->_internal_related_resource_size();
  for (const auto& msg : this->related_resource_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.TextId resource_id = 18;
  total_size += 2UL * this->_internal_resource_id_size();
  for (const auto& msg : this->resource_id_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.ResourceRightsController resource_rights_controller = 20;
  total_size += 2UL * this->_internal_resource_rights_controller_size();
  for (const auto& msg : this->resource_rights_controller_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.TechnicalTextDetails technical_details = 21;
  total_size += 2UL * this->_internal_technical_details_size();
  for (const auto& msg : this->technical_details_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.VersionType version_type = 23;
  total_size += 2UL * this->_internal_version_type_size();
  for (const auto& msg : this->version_type_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.MusicalWorkId work_id = 24;
  total_size += 2UL * this->_internal_work_id_size();
  for (const auto& msg : this->work_id_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.WorkRightsController work_rights_controller = 25;
  total_size += 2UL * this->_internal_work_rights_controller_size();
  for (const auto& msg : this->work_rights_controller_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string language_and_script_code = 13;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_language_and_script_code());
    }

    // optional string resource_reference = 19;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_resource_reference());
    }

    // optional .ern411.ern.EventDateWithoutFlags creation_date = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *creation_date_);
    }

    // optional .ern411.ern.ResourceContainedResourceReferenceList resource_contained_resource_reference_list = 17;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *resource_contained_resource_reference_list_);
    }

    // optional .ern411.ern.TextType type = 22;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_);
    }

    // optional bool contains_hidden_content = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool is_supplemental = 12;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Text::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.Text)
  GOOGLE_DCHECK_NE(&from, this);
  const Text* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Text>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.Text)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.Text)
    MergeFrom(*source);
  }
}

void Text::MergeFrom(const Text& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.Text)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  additional_title_.MergeFrom(from.additional_title_);
  c_line_.MergeFrom(from.c_line_);
  contributor_.MergeFrom(from.contributor_);
  courtesy_line_.MergeFrom(from.courtesy_line_);
  display_artist_.MergeFrom(from.display_artist_);
  display_artist_name_.MergeFrom(from.display_artist_name_);
  display_title_.MergeFrom(from.display_title_);
  display_title_text_.MergeFrom(from.display_title_text_);
  first_publication_date_.MergeFrom(from.first_publication_date_);
  parental_warning_type_.MergeFrom(from.parental_warning_type_);
  related_release_.MergeFrom(from.related_release_);
  related_resource_.MergeFrom(from.related_resource_);
  resource_id_.MergeFrom(from.resource_id_);
  resource_rights_controller_.MergeFrom(from.resource_rights_controller_);
  technical_details_.MergeFrom(from.technical_details_);
  version_type_.MergeFrom(from.version_type_);
  work_id_.MergeFrom(from.work_id_);
  work_rights_controller_.MergeFrom(from.work_rights_controller_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_language_and_script_code(from._internal_language_and_script_code());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_resource_reference(from._internal_resource_reference());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_creation_date()->::ern411::ern::EventDateWithoutFlags::MergeFrom(from._internal_creation_date());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_resource_contained_resource_reference_list()->::ern411::ern::ResourceContainedResourceReferenceList::MergeFrom(from._internal_resource_contained_resource_reference_list());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_type()->::ern411::ern::TextType::MergeFrom(from._internal_type());
    }
    if (cached_has_bits & 0x00000020u) {
      contains_hidden_content_ = from.contains_hidden_content_;
    }
    if (cached_has_bits & 0x00000040u) {
      is_supplemental_ = from.is_supplemental_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Text::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.Text)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Text::CopyFrom(const Text& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.Text)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Text::IsInitialized() const {
  return true;
}

void Text::InternalSwap(Text* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  additional_title_.InternalSwap(&other->additional_title_);
  c_line_.InternalSwap(&other->c_line_);
  contributor_.InternalSwap(&other->contributor_);
  courtesy_line_.InternalSwap(&other->courtesy_line_);
  display_artist_.InternalSwap(&other->display_artist_);
  display_artist_name_.InternalSwap(&other->display_artist_name_);
  display_title_.InternalSwap(&other->display_title_);
  display_title_text_.InternalSwap(&other->display_title_text_);
  first_publication_date_.InternalSwap(&other->first_publication_date_);
  parental_warning_type_.InternalSwap(&other->parental_warning_type_);
  related_release_.InternalSwap(&other->related_release_);
  related_resource_.InternalSwap(&other->related_resource_);
  resource_id_.InternalSwap(&other->resource_id_);
  resource_rights_controller_.InternalSwap(&other->resource_rights_controller_);
  technical_details_.InternalSwap(&other->technical_details_);
  version_type_.InternalSwap(&other->version_type_);
  work_id_.InternalSwap(&other->work_id_);
  work_rights_controller_.InternalSwap(&other->work_rights_controller_);
  language_and_script_code_.Swap(&other->language_and_script_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  resource_reference_.Swap(&other->resource_reference_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Text, is_supplemental_)
      + sizeof(Text::is_supplemental_)
      - PROTOBUF_FIELD_OFFSET(Text, creation_date_)>(
          reinterpret_cast<char*>(&creation_date_),
          reinterpret_cast<char*>(&other->creation_date_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Text::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TextCodecType::InitAsDefaultInstance() {
  ::ern411::ern::_TextCodecType_default_instance_._instance.get_mutable()->ext_value_ = const_cast< ::ern411::avs::TextCodecType*>(
      ::ern411::avs::TextCodecType::internal_default_instance());
}
class TextCodecType::_Internal {
 public:
  using HasBits = decltype(std::declval<TextCodecType>()._has_bits_);
  static void set_has_namespace_(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_user_defined_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::ern411::avs::TextCodecType& ext_value(const TextCodecType* msg);
  static void set_has_ext_value(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::ern411::avs::TextCodecType&
TextCodecType::_Internal::ext_value(const TextCodecType* msg) {
  return *msg->ext_value_;
}
void TextCodecType::clear_ext_value() {
  if (ext_value_ != nullptr) ext_value_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
TextCodecType::TextCodecType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.TextCodecType)
}
TextCodecType::TextCodecType(const TextCodecType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_namespace_()) {
    namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_namespace_(),
      GetArena());
  }
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_user_defined_value()) {
    user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_defined_value(),
      GetArena());
  }
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_version()) {
    version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_version(),
      GetArena());
  }
  if (from._internal_has_ext_value()) {
    ext_value_ = new ::ern411::avs::TextCodecType(*from.ext_value_);
  } else {
    ext_value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ern411.ern.TextCodecType)
}

void TextCodecType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TextCodecType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ext_value_ = nullptr;
}

TextCodecType::~TextCodecType() {
  // @@protoc_insertion_point(destructor:ern411.ern.TextCodecType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TextCodecType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  namespace__.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ext_value_;
}

void TextCodecType::ArenaDtor(void* object) {
  TextCodecType* _this = reinterpret_cast< TextCodecType* >(object);
  (void)_this;
}
void TextCodecType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TextCodecType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TextCodecType& TextCodecType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TextCodecType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void TextCodecType::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.TextCodecType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      namespace__.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      user_defined_value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      version_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(ext_value_ != nullptr);
      ext_value_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TextCodecType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string namespace = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_namespace_();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.TextCodecType.namespace");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string user_defined_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_user_defined_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.TextCodecType.user_defined_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.TextCodecType.version");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.avs.TextCodecType ext_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TextCodecType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.TextCodecType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string namespace = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_namespace_().data(), static_cast<int>(this->_internal_namespace_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.TextCodecType.namespace");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_namespace_(), target);
  }

  // optional string user_defined_value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_user_defined_value().data(), static_cast<int>(this->_internal_user_defined_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.TextCodecType.user_defined_value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_defined_value(), target);
  }

  // optional string version = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.TextCodecType.version");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_version(), target);
  }

  // optional .ern411.avs.TextCodecType ext_value = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::ext_value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.TextCodecType)
  return target;
}

size_t TextCodecType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.TextCodecType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string namespace = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_namespace_());
    }

    // optional string user_defined_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_defined_value());
    }

    // optional string version = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_version());
    }

    // optional .ern411.avs.TextCodecType ext_value = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ext_value_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TextCodecType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.TextCodecType)
  GOOGLE_DCHECK_NE(&from, this);
  const TextCodecType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TextCodecType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.TextCodecType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.TextCodecType)
    MergeFrom(*source);
  }
}

void TextCodecType::MergeFrom(const TextCodecType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.TextCodecType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_namespace_(from._internal_namespace_());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_user_defined_value(from._internal_user_defined_value());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_version(from._internal_version());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_ext_value()->::ern411::avs::TextCodecType::MergeFrom(from._internal_ext_value());
    }
  }
}

void TextCodecType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.TextCodecType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TextCodecType::CopyFrom(const TextCodecType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.TextCodecType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TextCodecType::IsInitialized() const {
  return true;
}

void TextCodecType::InternalSwap(TextCodecType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  namespace__.Swap(&other->namespace__, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_defined_value_.Swap(&other->user_defined_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  version_.Swap(&other->version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(ext_value_, other->ext_value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TextCodecType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TextId::InitAsDefaultInstance() {
}
class TextId::_Internal {
 public:
  using HasBits = decltype(std::declval<TextId>()._has_bits_);
  static void set_has_i_s_b_n(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_i_s_s_n(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_replaced(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_s_i_c_i(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

TextId::TextId(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  proprietary_id_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.TextId)
}
TextId::TextId(const TextId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      proprietary_id_(from.proprietary_id_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  i_s_b_n_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_i_s_b_n()) {
    i_s_b_n_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_i_s_b_n(),
      GetArena());
  }
  i_s_s_n_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_i_s_s_n()) {
    i_s_s_n_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_i_s_s_n(),
      GetArena());
  }
  s_i_c_i_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_s_i_c_i()) {
    s_i_c_i_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_s_i_c_i(),
      GetArena());
  }
  is_replaced_ = from.is_replaced_;
  // @@protoc_insertion_point(copy_constructor:ern411.ern.TextId)
}

void TextId::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TextId_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  i_s_b_n_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  i_s_s_n_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  s_i_c_i_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  is_replaced_ = false;
}

TextId::~TextId() {
  // @@protoc_insertion_point(destructor:ern411.ern.TextId)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TextId::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  i_s_b_n_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  i_s_s_n_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  s_i_c_i_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TextId::ArenaDtor(void* object) {
  TextId* _this = reinterpret_cast< TextId* >(object);
  (void)_this;
}
void TextId::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TextId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TextId& TextId::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TextId_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void TextId::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.TextId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  proprietary_id_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      i_s_b_n_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      i_s_s_n_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      s_i_c_i_.ClearNonDefaultToEmpty();
    }
  }
  is_replaced_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TextId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string i_s_b_n = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_i_s_b_n();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.TextId.i_s_b_n");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string i_s_s_n = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_i_s_s_n();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.TextId.i_s_s_n");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_replaced = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_is_replaced(&has_bits);
          is_replaced_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.ProprietaryId proprietary_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_proprietary_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string s_i_c_i = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_s_i_c_i();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.TextId.s_i_c_i");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TextId::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.TextId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string i_s_b_n = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_i_s_b_n().data(), static_cast<int>(this->_internal_i_s_b_n().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.TextId.i_s_b_n");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_i_s_b_n(), target);
  }

  // optional string i_s_s_n = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_i_s_s_n().data(), static_cast<int>(this->_internal_i_s_s_n().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.TextId.i_s_s_n");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_i_s_s_n(), target);
  }

  // optional bool is_replaced = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_replaced(), target);
  }

  // repeated .ern411.ern.ProprietaryId proprietary_id = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_proprietary_id_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_proprietary_id(i), target, stream);
  }

  // optional string s_i_c_i = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_s_i_c_i().data(), static_cast<int>(this->_internal_s_i_c_i().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.TextId.s_i_c_i");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_s_i_c_i(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.TextId)
  return target;
}

size_t TextId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.TextId)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ern411.ern.ProprietaryId proprietary_id = 4;
  total_size += 1UL * this->_internal_proprietary_id_size();
  for (const auto& msg : this->proprietary_id_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string i_s_b_n = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_i_s_b_n());
    }

    // optional string i_s_s_n = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_i_s_s_n());
    }

    // optional string s_i_c_i = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_s_i_c_i());
    }

    // optional bool is_replaced = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TextId::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.TextId)
  GOOGLE_DCHECK_NE(&from, this);
  const TextId* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TextId>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.TextId)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.TextId)
    MergeFrom(*source);
  }
}

void TextId::MergeFrom(const TextId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.TextId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  proprietary_id_.MergeFrom(from.proprietary_id_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_i_s_b_n(from._internal_i_s_b_n());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_i_s_s_n(from._internal_i_s_s_n());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_s_i_c_i(from._internal_s_i_c_i());
    }
    if (cached_has_bits & 0x00000008u) {
      is_replaced_ = from.is_replaced_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TextId::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.TextId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TextId::CopyFrom(const TextId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.TextId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TextId::IsInitialized() const {
  return true;
}

void TextId::InternalSwap(TextId* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  proprietary_id_.InternalSwap(&other->proprietary_id_);
  i_s_b_n_.Swap(&other->i_s_b_n_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  i_s_s_n_.Swap(&other->i_s_s_n_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  s_i_c_i_.Swap(&other->s_i_c_i_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(is_replaced_, other->is_replaced_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TextId::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TextType::InitAsDefaultInstance() {
  ::ern411::ern::_TextType_default_instance_._instance.get_mutable()->ext_value_ = const_cast< ::ern411::avs::TextType*>(
      ::ern411::avs::TextType::internal_default_instance());
}
class TextType::_Internal {
 public:
  using HasBits = decltype(std::declval<TextType>()._has_bits_);
  static void set_has_namespace_(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_user_defined_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::ern411::avs::TextType& ext_value(const TextType* msg);
  static void set_has_ext_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::ern411::avs::TextType&
TextType::_Internal::ext_value(const TextType* msg) {
  return *msg->ext_value_;
}
void TextType::clear_ext_value() {
  if (ext_value_ != nullptr) ext_value_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
TextType::TextType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.TextType)
}
TextType::TextType(const TextType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_namespace_()) {
    namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_namespace_(),
      GetArena());
  }
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_user_defined_value()) {
    user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_defined_value(),
      GetArena());
  }
  if (from._internal_has_ext_value()) {
    ext_value_ = new ::ern411::avs::TextType(*from.ext_value_);
  } else {
    ext_value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ern411.ern.TextType)
}

void TextType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TextType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ext_value_ = nullptr;
}

TextType::~TextType() {
  // @@protoc_insertion_point(destructor:ern411.ern.TextType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TextType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  namespace__.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ext_value_;
}

void TextType::ArenaDtor(void* object) {
  TextType* _this = reinterpret_cast< TextType* >(object);
  (void)_this;
}
void TextType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TextType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TextType& TextType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TextType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void TextType::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.TextType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      namespace__.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      user_defined_value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(ext_value_ != nullptr);
      ext_value_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TextType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string namespace = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_namespace_();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.TextType.namespace");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string user_defined_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_user_defined_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.TextType.user_defined_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.avs.TextType ext_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TextType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.TextType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string namespace = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_namespace_().data(), static_cast<int>(this->_internal_namespace_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.TextType.namespace");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_namespace_(), target);
  }

  // optional string user_defined_value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_user_defined_value().data(), static_cast<int>(this->_internal_user_defined_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.TextType.user_defined_value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_defined_value(), target);
  }

  // optional .ern411.avs.TextType ext_value = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::ext_value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.TextType)
  return target;
}

size_t TextType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.TextType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string namespace = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_namespace_());
    }

    // optional string user_defined_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_defined_value());
    }

    // optional .ern411.avs.TextType ext_value = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ext_value_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TextType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.TextType)
  GOOGLE_DCHECK_NE(&from, this);
  const TextType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TextType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.TextType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.TextType)
    MergeFrom(*source);
  }
}

void TextType::MergeFrom(const TextType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.TextType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_namespace_(from._internal_namespace_());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_user_defined_value(from._internal_user_defined_value());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_ext_value()->::ern411::avs::TextType::MergeFrom(from._internal_ext_value());
    }
  }
}

void TextType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.TextType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TextType::CopyFrom(const TextType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.TextType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TextType::IsInitialized() const {
  return true;
}

void TextType::InternalSwap(TextType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  namespace__.Swap(&other->namespace__, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_defined_value_.Swap(&other->user_defined_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(ext_value_, other->ext_value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TextType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Timing::InitAsDefaultInstance() {
}
class Timing::_Internal {
 public:
  using HasBits = decltype(std::declval<Timing>()._has_bits_);
  static void set_has_duration_used(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_start_point(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Timing::Timing(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.Timing)
}
Timing::Timing(const Timing& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  duration_used_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_duration_used()) {
    duration_used_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_duration_used(),
      GetArena());
  }
  start_point_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_start_point()) {
    start_point_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_start_point(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:ern411.ern.Timing)
}

void Timing::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Timing_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  duration_used_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  start_point_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Timing::~Timing() {
  // @@protoc_insertion_point(destructor:ern411.ern.Timing)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Timing::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  duration_used_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  start_point_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Timing::ArenaDtor(void* object) {
  Timing* _this = reinterpret_cast< Timing* >(object);
  (void)_this;
}
void Timing::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Timing::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Timing& Timing::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Timing_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void Timing::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.Timing)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      duration_used_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      start_point_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Timing::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string duration_used = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_duration_used();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.Timing.duration_used");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string start_point = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_start_point();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.Timing.start_point");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Timing::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.Timing)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string duration_used = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_duration_used().data(), static_cast<int>(this->_internal_duration_used().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.Timing.duration_used");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_duration_used(), target);
  }

  // optional string start_point = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_start_point().data(), static_cast<int>(this->_internal_start_point().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.Timing.start_point");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_start_point(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.Timing)
  return target;
}

size_t Timing::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.Timing)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string duration_used = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_duration_used());
    }

    // optional string start_point = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_start_point());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Timing::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.Timing)
  GOOGLE_DCHECK_NE(&from, this);
  const Timing* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Timing>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.Timing)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.Timing)
    MergeFrom(*source);
  }
}

void Timing::MergeFrom(const Timing& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.Timing)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_duration_used(from._internal_duration_used());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_start_point(from._internal_start_point());
    }
  }
}

void Timing::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.Timing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Timing::CopyFrom(const Timing& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.Timing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Timing::IsInitialized() const {
  return true;
}

void Timing::InternalSwap(Timing* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  duration_used_.Swap(&other->duration_used_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  start_point_.Swap(&other->start_point_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Timing::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Title::InitAsDefaultInstance() {
  ::ern411::ern::_Title_default_instance_._instance.get_mutable()->title_type_ = const_cast< ::ern411::avs::TitleType*>(
      ::ern411::avs::TitleType::internal_default_instance());
}
class Title::_Internal {
 public:
  using HasBits = decltype(std::declval<Title>()._has_bits_);
  static void set_has_language_and_script_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sub_title(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_title_text(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::ern411::avs::TitleType& title_type(const Title* msg);
  static void set_has_title_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::ern411::avs::TitleType&
Title::_Internal::title_type(const Title* msg) {
  return *msg->title_type_;
}
void Title::clear_title_type() {
  if (title_type_ != nullptr) title_type_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
Title::Title(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.Title)
}
Title::Title(const Title& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  language_and_script_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_language_and_script_code()) {
    language_and_script_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_language_and_script_code(),
      GetArena());
  }
  sub_title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_sub_title()) {
    sub_title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_sub_title(),
      GetArena());
  }
  title_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_title_text()) {
    title_text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_title_text(),
      GetArena());
  }
  if (from._internal_has_title_type()) {
    title_type_ = new ::ern411::avs::TitleType(*from.title_type_);
  } else {
    title_type_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ern411.ern.Title)
}

void Title::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Title_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  language_and_script_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sub_title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  title_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  title_type_ = nullptr;
}

Title::~Title() {
  // @@protoc_insertion_point(destructor:ern411.ern.Title)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Title::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  language_and_script_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sub_title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  title_text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete title_type_;
}

void Title::ArenaDtor(void* object) {
  Title* _this = reinterpret_cast< Title* >(object);
  (void)_this;
}
void Title::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Title::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Title& Title::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Title_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void Title::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.Title)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      language_and_script_code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      sub_title_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      title_text_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(title_type_ != nullptr);
      title_type_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Title::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string language_and_script_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_language_and_script_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.Title.language_and_script_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string sub_title = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_sub_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.Title.sub_title");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string title_text = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_title_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.Title.title_text");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.avs.TitleType title_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_title_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Title::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.Title)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string language_and_script_code = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_language_and_script_code().data(), static_cast<int>(this->_internal_language_and_script_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.Title.language_and_script_code");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_language_and_script_code(), target);
  }

  // optional string sub_title = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_sub_title().data(), static_cast<int>(this->_internal_sub_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.Title.sub_title");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_sub_title(), target);
  }

  // optional string title_text = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_title_text().data(), static_cast<int>(this->_internal_title_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.Title.title_text");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_title_text(), target);
  }

  // optional .ern411.avs.TitleType title_type = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::title_type(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.Title)
  return target;
}

size_t Title::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.Title)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string language_and_script_code = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_language_and_script_code());
    }

    // optional string sub_title = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_sub_title());
    }

    // optional string title_text = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_title_text());
    }

    // optional .ern411.avs.TitleType title_type = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *title_type_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Title::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.Title)
  GOOGLE_DCHECK_NE(&from, this);
  const Title* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Title>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.Title)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.Title)
    MergeFrom(*source);
  }
}

void Title::MergeFrom(const Title& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.Title)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_language_and_script_code(from._internal_language_and_script_code());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_sub_title(from._internal_sub_title());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_title_text(from._internal_title_text());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_title_type()->::ern411::avs::TitleType::MergeFrom(from._internal_title_type());
    }
  }
}

void Title::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.Title)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Title::CopyFrom(const Title& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.Title)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Title::IsInitialized() const {
  return true;
}

void Title::InternalSwap(Title* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  language_and_script_code_.Swap(&other->language_and_script_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sub_title_.Swap(&other->sub_title_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  title_text_.Swap(&other->title_text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(title_type_, other->title_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Title::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TitleDisplayInformation::InitAsDefaultInstance() {
}
class TitleDisplayInformation::_Internal {
 public:
  using HasBits = decltype(std::declval<TitleDisplayInformation>()._has_bits_);
  static void set_has_is_displayed_in_title(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_language_and_script_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sequence_number(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

TitleDisplayInformation::TitleDisplayInformation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  prefix_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.TitleDisplayInformation)
}
TitleDisplayInformation::TitleDisplayInformation(const TitleDisplayInformation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      prefix_(from.prefix_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  language_and_script_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_language_and_script_code()) {
    language_and_script_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_language_and_script_code(),
      GetArena());
  }
  ::memcpy(&is_displayed_in_title_, &from.is_displayed_in_title_,
    static_cast<size_t>(reinterpret_cast<char*>(&sequence_number_) -
    reinterpret_cast<char*>(&is_displayed_in_title_)) + sizeof(sequence_number_));
  // @@protoc_insertion_point(copy_constructor:ern411.ern.TitleDisplayInformation)
}

void TitleDisplayInformation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TitleDisplayInformation_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  language_and_script_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&is_displayed_in_title_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sequence_number_) -
      reinterpret_cast<char*>(&is_displayed_in_title_)) + sizeof(sequence_number_));
}

TitleDisplayInformation::~TitleDisplayInformation() {
  // @@protoc_insertion_point(destructor:ern411.ern.TitleDisplayInformation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TitleDisplayInformation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  language_and_script_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TitleDisplayInformation::ArenaDtor(void* object) {
  TitleDisplayInformation* _this = reinterpret_cast< TitleDisplayInformation* >(object);
  (void)_this;
}
void TitleDisplayInformation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TitleDisplayInformation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TitleDisplayInformation& TitleDisplayInformation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TitleDisplayInformation_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void TitleDisplayInformation::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.TitleDisplayInformation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  prefix_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    language_and_script_code_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&is_displayed_in_title_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sequence_number_) -
        reinterpret_cast<char*>(&is_displayed_in_title_)) + sizeof(sequence_number_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TitleDisplayInformation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool is_displayed_in_title = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_is_displayed_in_title(&has_bits);
          is_displayed_in_title_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string language_and_script_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_language_and_script_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.TitleDisplayInformation.language_and_script_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.Prefix prefix = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_prefix(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // optional int32 sequence_number = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_sequence_number(&has_bits);
          sequence_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TitleDisplayInformation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.TitleDisplayInformation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_displayed_in_title = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_displayed_in_title(), target);
  }

  // optional string language_and_script_code = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_language_and_script_code().data(), static_cast<int>(this->_internal_language_and_script_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.TitleDisplayInformation.language_and_script_code");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_language_and_script_code(), target);
  }

  // repeated .ern411.ern.Prefix prefix = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_prefix_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_prefix(i), target, stream);
  }

  // optional int32 sequence_number = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_sequence_number(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.TitleDisplayInformation)
  return target;
}

size_t TitleDisplayInformation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.TitleDisplayInformation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ern411.ern.Prefix prefix = 3;
  total_size += 1UL * this->_internal_prefix_size();
  for (const auto& msg : this->prefix_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string language_and_script_code = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_language_and_script_code());
    }

    // optional bool is_displayed_in_title = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional int32 sequence_number = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_sequence_number());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TitleDisplayInformation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.TitleDisplayInformation)
  GOOGLE_DCHECK_NE(&from, this);
  const TitleDisplayInformation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TitleDisplayInformation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.TitleDisplayInformation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.TitleDisplayInformation)
    MergeFrom(*source);
  }
}

void TitleDisplayInformation::MergeFrom(const TitleDisplayInformation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.TitleDisplayInformation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  prefix_.MergeFrom(from.prefix_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_language_and_script_code(from._internal_language_and_script_code());
    }
    if (cached_has_bits & 0x00000002u) {
      is_displayed_in_title_ = from.is_displayed_in_title_;
    }
    if (cached_has_bits & 0x00000004u) {
      sequence_number_ = from.sequence_number_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TitleDisplayInformation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.TitleDisplayInformation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TitleDisplayInformation::CopyFrom(const TitleDisplayInformation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.TitleDisplayInformation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TitleDisplayInformation::IsInitialized() const {
  return true;
}

void TitleDisplayInformation::InternalSwap(TitleDisplayInformation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  prefix_.InternalSwap(&other->prefix_);
  language_and_script_code_.Swap(&other->language_and_script_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TitleDisplayInformation, sequence_number_)
      + sizeof(TitleDisplayInformation::sequence_number_)
      - PROTOBUF_FIELD_OFFSET(TitleDisplayInformation, is_displayed_in_title_)>(
          reinterpret_cast<char*>(&is_displayed_in_title_),
          reinterpret_cast<char*>(&other->is_displayed_in_title_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TitleDisplayInformation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrackRelease::InitAsDefaultInstance() {
  ::ern411::ern::_TrackRelease_default_instance_._instance.get_mutable()->release_id_ = const_cast< ::ern411::ern::ReleaseId*>(
      ::ern411::ern::ReleaseId::internal_default_instance());
}
class TrackRelease::_Internal {
 public:
  using HasBits = decltype(std::declval<TrackRelease>()._has_bits_);
  static void set_has_is_main_release(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::ern411::ern::ReleaseId& release_id(const TrackRelease* msg);
  static void set_has_release_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_release_reference(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_release_resource_reference(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::ern411::ern::ReleaseId&
TrackRelease::_Internal::release_id(const TrackRelease* msg) {
  return *msg->release_id_;
}
TrackRelease::TrackRelease(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  additional_title_(arena),
  display_title_(arena),
  display_title_text_(arena),
  genre_(arena),
  keywords_(arena),
  linked_release_resource_reference_(arena),
  marketing_comment_(arena),
  release_label_reference_(arena),
  synopsis_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.TrackRelease)
}
TrackRelease::TrackRelease(const TrackRelease& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      additional_title_(from.additional_title_),
      display_title_(from.display_title_),
      display_title_text_(from.display_title_text_),
      genre_(from.genre_),
      keywords_(from.keywords_),
      linked_release_resource_reference_(from.linked_release_resource_reference_),
      marketing_comment_(from.marketing_comment_),
      release_label_reference_(from.release_label_reference_),
      synopsis_(from.synopsis_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  release_reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_release_reference()) {
    release_reference_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_release_reference(),
      GetArena());
  }
  release_resource_reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_release_resource_reference()) {
    release_resource_reference_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_release_resource_reference(),
      GetArena());
  }
  if (from._internal_has_release_id()) {
    release_id_ = new ::ern411::ern::ReleaseId(*from.release_id_);
  } else {
    release_id_ = nullptr;
  }
  is_main_release_ = from.is_main_release_;
  // @@protoc_insertion_point(copy_constructor:ern411.ern.TrackRelease)
}

void TrackRelease::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrackRelease_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  release_reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  release_resource_reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&release_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_main_release_) -
      reinterpret_cast<char*>(&release_id_)) + sizeof(is_main_release_));
}

TrackRelease::~TrackRelease() {
  // @@protoc_insertion_point(destructor:ern411.ern.TrackRelease)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TrackRelease::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  release_reference_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  release_resource_reference_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete release_id_;
}

void TrackRelease::ArenaDtor(void* object) {
  TrackRelease* _this = reinterpret_cast< TrackRelease* >(object);
  (void)_this;
}
void TrackRelease::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrackRelease::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrackRelease& TrackRelease::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrackRelease_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void TrackRelease::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.TrackRelease)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  additional_title_.Clear();
  display_title_.Clear();
  display_title_text_.Clear();
  genre_.Clear();
  keywords_.Clear();
  linked_release_resource_reference_.Clear();
  marketing_comment_.Clear();
  release_label_reference_.Clear();
  synopsis_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      release_reference_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      release_resource_reference_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(release_id_ != nullptr);
      release_id_->Clear();
    }
  }
  is_main_release_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrackRelease::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ern411.ern.AdditionalTitle additional_title = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_additional_title(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.DisplayTitle display_title = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_display_title(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.DisplayTitleText display_title_text = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_display_title_text(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.GenreWithTerritory genre = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_genre(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool is_main_release = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_is_main_release(&has_bits);
          is_main_release_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.KeywordsWithTerritory keywords = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_keywords(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.LinkedReleaseResourceReference linked_release_resource_reference = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_linked_release_resource_reference(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.MarketingComment marketing_comment = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_marketing_comment(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .ern411.ern.ReleaseId release_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_release_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.ReleaseLabelReference release_label_reference = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_release_label_reference(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string release_reference = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_release_reference();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.TrackRelease.release_reference");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string release_resource_reference = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_release_resource_reference();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.TrackRelease.release_resource_reference");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.SynopsisWithTerritory synopsis = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_synopsis(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrackRelease::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.TrackRelease)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ern411.ern.AdditionalTitle additional_title = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_additional_title_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_additional_title(i), target, stream);
  }

  // repeated .ern411.ern.DisplayTitle display_title = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_display_title_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_display_title(i), target, stream);
  }

  // repeated .ern411.ern.DisplayTitleText display_title_text = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_display_title_text_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_display_title_text(i), target, stream);
  }

  // repeated .ern411.ern.GenreWithTerritory genre = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_genre_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_genre(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool is_main_release = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_is_main_release(), target);
  }

  // repeated .ern411.ern.KeywordsWithTerritory keywords = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_keywords_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_keywords(i), target, stream);
  }

  // repeated .ern411.ern.LinkedReleaseResourceReference linked_release_resource_reference = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_linked_release_resource_reference_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_linked_release_resource_reference(i), target, stream);
  }

  // repeated .ern411.ern.MarketingComment marketing_comment = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_marketing_comment_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_marketing_comment(i), target, stream);
  }

  // optional .ern411.ern.ReleaseId release_id = 9;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::release_id(this), target, stream);
  }

  // repeated .ern411.ern.ReleaseLabelReference release_label_reference = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_release_label_reference_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_release_label_reference(i), target, stream);
  }

  // optional string release_reference = 11;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_release_reference().data(), static_cast<int>(this->_internal_release_reference().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.TrackRelease.release_reference");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_release_reference(), target);
  }

  // optional string release_resource_reference = 12;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_release_resource_reference().data(), static_cast<int>(this->_internal_release_resource_reference().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.TrackRelease.release_resource_reference");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_release_resource_reference(), target);
  }

  // repeated .ern411.ern.SynopsisWithTerritory synopsis = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_synopsis_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, this->_internal_synopsis(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.TrackRelease)
  return target;
}

size_t TrackRelease::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.TrackRelease)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ern411.ern.AdditionalTitle additional_title = 1;
  total_size += 1UL * this->_internal_additional_title_size();
  for (const auto& msg : this->additional_title_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.DisplayTitle display_title = 2;
  total_size += 1UL * this->_internal_display_title_size();
  for (const auto& msg : this->display_title_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.DisplayTitleText display_title_text = 3;
  total_size += 1UL * this->_internal_display_title_text_size();
  for (const auto& msg : this->display_title_text_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.GenreWithTerritory genre = 4;
  total_size += 1UL * this->_internal_genre_size();
  for (const auto& msg : this->genre_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.KeywordsWithTerritory keywords = 6;
  total_size += 1UL * this->_internal_keywords_size();
  for (const auto& msg : this->keywords_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.LinkedReleaseResourceReference linked_release_resource_reference = 7;
  total_size += 1UL * this->_internal_linked_release_resource_reference_size();
  for (const auto& msg : this->linked_release_resource_reference_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.MarketingComment marketing_comment = 8;
  total_size += 1UL * this->_internal_marketing_comment_size();
  for (const auto& msg : this->marketing_comment_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.ReleaseLabelReference release_label_reference = 10;
  total_size += 1UL * this->_internal_release_label_reference_size();
  for (const auto& msg : this->release_label_reference_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.SynopsisWithTerritory synopsis = 13;
  total_size += 1UL * this->_internal_synopsis_size();
  for (const auto& msg : this->synopsis_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string release_reference = 11;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_release_reference());
    }

    // optional string release_resource_reference = 12;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_release_resource_reference());
    }

    // optional .ern411.ern.ReleaseId release_id = 9;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *release_id_);
    }

    // optional bool is_main_release = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrackRelease::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.TrackRelease)
  GOOGLE_DCHECK_NE(&from, this);
  const TrackRelease* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrackRelease>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.TrackRelease)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.TrackRelease)
    MergeFrom(*source);
  }
}

void TrackRelease::MergeFrom(const TrackRelease& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.TrackRelease)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  additional_title_.MergeFrom(from.additional_title_);
  display_title_.MergeFrom(from.display_title_);
  display_title_text_.MergeFrom(from.display_title_text_);
  genre_.MergeFrom(from.genre_);
  keywords_.MergeFrom(from.keywords_);
  linked_release_resource_reference_.MergeFrom(from.linked_release_resource_reference_);
  marketing_comment_.MergeFrom(from.marketing_comment_);
  release_label_reference_.MergeFrom(from.release_label_reference_);
  synopsis_.MergeFrom(from.synopsis_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_release_reference(from._internal_release_reference());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_release_resource_reference(from._internal_release_resource_reference());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_release_id()->::ern411::ern::ReleaseId::MergeFrom(from._internal_release_id());
    }
    if (cached_has_bits & 0x00000008u) {
      is_main_release_ = from.is_main_release_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TrackRelease::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.TrackRelease)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrackRelease::CopyFrom(const TrackRelease& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.TrackRelease)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackRelease::IsInitialized() const {
  return true;
}

void TrackRelease::InternalSwap(TrackRelease* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  additional_title_.InternalSwap(&other->additional_title_);
  display_title_.InternalSwap(&other->display_title_);
  display_title_text_.InternalSwap(&other->display_title_text_);
  genre_.InternalSwap(&other->genre_);
  keywords_.InternalSwap(&other->keywords_);
  linked_release_resource_reference_.InternalSwap(&other->linked_release_resource_reference_);
  marketing_comment_.InternalSwap(&other->marketing_comment_);
  release_label_reference_.InternalSwap(&other->release_label_reference_);
  synopsis_.InternalSwap(&other->synopsis_);
  release_reference_.Swap(&other->release_reference_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  release_resource_reference_.Swap(&other->release_resource_reference_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrackRelease, is_main_release_)
      + sizeof(TrackRelease::is_main_release_)
      - PROTOBUF_FIELD_OFFSET(TrackRelease, release_id_)>(
          reinterpret_cast<char*>(&release_id_),
          reinterpret_cast<char*>(&other->release_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrackRelease::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UseType::InitAsDefaultInstance() {
  ::ern411::ern::_UseType_default_instance_._instance.get_mutable()->ext_value_ = const_cast< ::ern411::avs::UseType*>(
      ::ern411::avs::UseType::internal_default_instance());
}
class UseType::_Internal {
 public:
  using HasBits = decltype(std::declval<UseType>()._has_bits_);
  static void set_has_namespace_(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_user_defined_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::ern411::avs::UseType& ext_value(const UseType* msg);
  static void set_has_ext_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::ern411::avs::UseType&
UseType::_Internal::ext_value(const UseType* msg) {
  return *msg->ext_value_;
}
void UseType::clear_ext_value() {
  if (ext_value_ != nullptr) ext_value_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
UseType::UseType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.UseType)
}
UseType::UseType(const UseType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_namespace_()) {
    namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_namespace_(),
      GetArena());
  }
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_user_defined_value()) {
    user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_defined_value(),
      GetArena());
  }
  if (from._internal_has_ext_value()) {
    ext_value_ = new ::ern411::avs::UseType(*from.ext_value_);
  } else {
    ext_value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ern411.ern.UseType)
}

void UseType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UseType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ext_value_ = nullptr;
}

UseType::~UseType() {
  // @@protoc_insertion_point(destructor:ern411.ern.UseType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UseType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  namespace__.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ext_value_;
}

void UseType::ArenaDtor(void* object) {
  UseType* _this = reinterpret_cast< UseType* >(object);
  (void)_this;
}
void UseType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UseType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UseType& UseType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UseType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void UseType::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.UseType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      namespace__.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      user_defined_value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(ext_value_ != nullptr);
      ext_value_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UseType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string namespace = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_namespace_();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.UseType.namespace");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string user_defined_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_user_defined_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.UseType.user_defined_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.avs.UseType ext_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UseType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.UseType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string namespace = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_namespace_().data(), static_cast<int>(this->_internal_namespace_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.UseType.namespace");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_namespace_(), target);
  }

  // optional string user_defined_value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_user_defined_value().data(), static_cast<int>(this->_internal_user_defined_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.UseType.user_defined_value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_defined_value(), target);
  }

  // optional .ern411.avs.UseType ext_value = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::ext_value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.UseType)
  return target;
}

size_t UseType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.UseType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string namespace = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_namespace_());
    }

    // optional string user_defined_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_defined_value());
    }

    // optional .ern411.avs.UseType ext_value = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ext_value_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UseType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.UseType)
  GOOGLE_DCHECK_NE(&from, this);
  const UseType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UseType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.UseType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.UseType)
    MergeFrom(*source);
  }
}

void UseType::MergeFrom(const UseType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.UseType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_namespace_(from._internal_namespace_());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_user_defined_value(from._internal_user_defined_value());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_ext_value()->::ern411::avs::UseType::MergeFrom(from._internal_ext_value());
    }
  }
}

void UseType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.UseType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UseType::CopyFrom(const UseType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.UseType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UseType::IsInitialized() const {
  return true;
}

void UseType::InternalSwap(UseType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  namespace__.Swap(&other->namespace__, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_defined_value_.Swap(&other->user_defined_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(ext_value_, other->ext_value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UseType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ValidityPeriod::InitAsDefaultInstance() {
  ::ern411::ern::_ValidityPeriod_default_instance_._instance.get_mutable()->end_date_ = const_cast< ::ern411::ern::EventDate*>(
      ::ern411::ern::EventDate::internal_default_instance());
  ::ern411::ern::_ValidityPeriod_default_instance_._instance.get_mutable()->start_date_ = const_cast< ::ern411::ern::EventDate*>(
      ::ern411::ern::EventDate::internal_default_instance());
}
class ValidityPeriod::_Internal {
 public:
  using HasBits = decltype(std::declval<ValidityPeriod>()._has_bits_);
  static const ::ern411::ern::EventDate& end_date(const ValidityPeriod* msg);
  static void set_has_end_date(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ern411::ern::EventDate& start_date(const ValidityPeriod* msg);
  static void set_has_start_date(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::ern411::ern::EventDate&
ValidityPeriod::_Internal::end_date(const ValidityPeriod* msg) {
  return *msg->end_date_;
}
const ::ern411::ern::EventDate&
ValidityPeriod::_Internal::start_date(const ValidityPeriod* msg) {
  return *msg->start_date_;
}
ValidityPeriod::ValidityPeriod(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.ValidityPeriod)
}
ValidityPeriod::ValidityPeriod(const ValidityPeriod& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_end_date()) {
    end_date_ = new ::ern411::ern::EventDate(*from.end_date_);
  } else {
    end_date_ = nullptr;
  }
  if (from._internal_has_start_date()) {
    start_date_ = new ::ern411::ern::EventDate(*from.start_date_);
  } else {
    start_date_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ern411.ern.ValidityPeriod)
}

void ValidityPeriod::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ValidityPeriod_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  ::memset(&end_date_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&start_date_) -
      reinterpret_cast<char*>(&end_date_)) + sizeof(start_date_));
}

ValidityPeriod::~ValidityPeriod() {
  // @@protoc_insertion_point(destructor:ern411.ern.ValidityPeriod)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ValidityPeriod::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete end_date_;
  if (this != internal_default_instance()) delete start_date_;
}

void ValidityPeriod::ArenaDtor(void* object) {
  ValidityPeriod* _this = reinterpret_cast< ValidityPeriod* >(object);
  (void)_this;
}
void ValidityPeriod::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ValidityPeriod::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ValidityPeriod& ValidityPeriod::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ValidityPeriod_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void ValidityPeriod::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.ValidityPeriod)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(end_date_ != nullptr);
      end_date_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(start_date_ != nullptr);
      start_date_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ValidityPeriod::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ern411.ern.EventDate end_date = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_end_date(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.ern.EventDate start_date = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_start_date(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ValidityPeriod::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.ValidityPeriod)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ern411.ern.EventDate end_date = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::end_date(this), target, stream);
  }

  // optional .ern411.ern.EventDate start_date = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::start_date(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.ValidityPeriod)
  return target;
}

size_t ValidityPeriod::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.ValidityPeriod)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .ern411.ern.EventDate end_date = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *end_date_);
    }

    // optional .ern411.ern.EventDate start_date = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *start_date_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ValidityPeriod::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.ValidityPeriod)
  GOOGLE_DCHECK_NE(&from, this);
  const ValidityPeriod* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ValidityPeriod>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.ValidityPeriod)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.ValidityPeriod)
    MergeFrom(*source);
  }
}

void ValidityPeriod::MergeFrom(const ValidityPeriod& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.ValidityPeriod)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_end_date()->::ern411::ern::EventDate::MergeFrom(from._internal_end_date());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_start_date()->::ern411::ern::EventDate::MergeFrom(from._internal_start_date());
    }
  }
}

void ValidityPeriod::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.ValidityPeriod)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ValidityPeriod::CopyFrom(const ValidityPeriod& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.ValidityPeriod)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValidityPeriod::IsInitialized() const {
  return true;
}

void ValidityPeriod::InternalSwap(ValidityPeriod* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ValidityPeriod, start_date_)
      + sizeof(ValidityPeriod::start_date_)
      - PROTOBUF_FIELD_OFFSET(ValidityPeriod, end_date_)>(
          reinterpret_cast<char*>(&end_date_),
          reinterpret_cast<char*>(&other->end_date_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ValidityPeriod::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VersionType::InitAsDefaultInstance() {
  ::ern411::ern::_VersionType_default_instance_._instance.get_mutable()->ext_value_ = const_cast< ::ern411::avs::VersionType*>(
      ::ern411::avs::VersionType::internal_default_instance());
}
class VersionType::_Internal {
 public:
  using HasBits = decltype(std::declval<VersionType>()._has_bits_);
  static void set_has_namespace_(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_user_defined_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::ern411::avs::VersionType& ext_value(const VersionType* msg);
  static void set_has_ext_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::ern411::avs::VersionType&
VersionType::_Internal::ext_value(const VersionType* msg) {
  return *msg->ext_value_;
}
void VersionType::clear_ext_value() {
  if (ext_value_ != nullptr) ext_value_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
VersionType::VersionType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.VersionType)
}
VersionType::VersionType(const VersionType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_namespace_()) {
    namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_namespace_(),
      GetArena());
  }
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_user_defined_value()) {
    user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_defined_value(),
      GetArena());
  }
  if (from._internal_has_ext_value()) {
    ext_value_ = new ::ern411::avs::VersionType(*from.ext_value_);
  } else {
    ext_value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ern411.ern.VersionType)
}

void VersionType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VersionType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ext_value_ = nullptr;
}

VersionType::~VersionType() {
  // @@protoc_insertion_point(destructor:ern411.ern.VersionType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VersionType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  namespace__.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ext_value_;
}

void VersionType::ArenaDtor(void* object) {
  VersionType* _this = reinterpret_cast< VersionType* >(object);
  (void)_this;
}
void VersionType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VersionType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VersionType& VersionType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VersionType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void VersionType::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.VersionType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      namespace__.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      user_defined_value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(ext_value_ != nullptr);
      ext_value_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VersionType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string namespace = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_namespace_();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.VersionType.namespace");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string user_defined_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_user_defined_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.VersionType.user_defined_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.avs.VersionType ext_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VersionType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.VersionType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string namespace = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_namespace_().data(), static_cast<int>(this->_internal_namespace_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.VersionType.namespace");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_namespace_(), target);
  }

  // optional string user_defined_value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_user_defined_value().data(), static_cast<int>(this->_internal_user_defined_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.VersionType.user_defined_value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_defined_value(), target);
  }

  // optional .ern411.avs.VersionType ext_value = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::ext_value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.VersionType)
  return target;
}

size_t VersionType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.VersionType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string namespace = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_namespace_());
    }

    // optional string user_defined_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_defined_value());
    }

    // optional .ern411.avs.VersionType ext_value = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ext_value_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VersionType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.VersionType)
  GOOGLE_DCHECK_NE(&from, this);
  const VersionType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VersionType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.VersionType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.VersionType)
    MergeFrom(*source);
  }
}

void VersionType::MergeFrom(const VersionType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.VersionType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_namespace_(from._internal_namespace_());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_user_defined_value(from._internal_user_defined_value());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_ext_value()->::ern411::avs::VersionType::MergeFrom(from._internal_ext_value());
    }
  }
}

void VersionType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.VersionType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VersionType::CopyFrom(const VersionType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.VersionType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VersionType::IsInitialized() const {
  return true;
}

void VersionType::InternalSwap(VersionType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  namespace__.Swap(&other->namespace__, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_defined_value_.Swap(&other->user_defined_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(ext_value_, other->ext_value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VersionType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Video::InitAsDefaultInstance() {
  ::ern411::ern::_Video_default_instance_._instance.get_mutable()->composite_musical_work_type_ = const_cast< ::ern411::avs::CompositeMusicalWorkType*>(
      ::ern411::avs::CompositeMusicalWorkType::internal_default_instance());
  ::ern411::ern::_Video_default_instance_._instance.get_mutable()->creation_date_ = const_cast< ::ern411::ern::EventDateWithoutFlags*>(
      ::ern411::ern::EventDateWithoutFlags::internal_default_instance());
  ::ern411::ern::_Video_default_instance_._instance.get_mutable()->mastered_date_ = const_cast< ::ern411::ern::EventDateWithoutFlags*>(
      ::ern411::ern::EventDateWithoutFlags::internal_default_instance());
  ::ern411::ern::_Video_default_instance_._instance.get_mutable()->reason_for_cue_sheet_absence_ = const_cast< ::ern411::ern::Reason*>(
      ::ern411::ern::Reason::internal_default_instance());
  ::ern411::ern::_Video_default_instance_._instance.get_mutable()->resource_contained_resource_reference_list_ = const_cast< ::ern411::ern::ResourceContainedResourceReferenceList*>(
      ::ern411::ern::ResourceContainedResourceReferenceList::internal_default_instance());
  ::ern411::ern::_Video_default_instance_._instance.get_mutable()->type_ = const_cast< ::ern411::ern::VideoType*>(
      ::ern411::ern::VideoType::internal_default_instance());
}
class Video::_Internal {
 public:
  using HasBits = decltype(std::declval<Video>()._has_bits_);
  static const ::ern411::avs::CompositeMusicalWorkType& composite_musical_work_type(const Video* msg);
  static void set_has_composite_musical_work_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_contains_hidden_content(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::ern411::ern::EventDateWithoutFlags& creation_date(const Video* msg);
  static void set_has_creation_date(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_cover(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_is_instrumental(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_is_remastered(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_is_supplemental(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_language_and_script_code(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::ern411::ern::EventDateWithoutFlags& mastered_date(const Video* msg);
  static void set_has_mastered_date(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::ern411::ern::Reason& reason_for_cue_sheet_absence(const Video* msg);
  static void set_has_reason_for_cue_sheet_absence(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::ern411::ern::ResourceContainedResourceReferenceList& resource_contained_resource_reference_list(const Video* msg);
  static void set_has_resource_contained_resource_reference_list(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_resource_reference(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::ern411::ern::VideoType& type(const Video* msg);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

const ::ern411::avs::CompositeMusicalWorkType&
Video::_Internal::composite_musical_work_type(const Video* msg) {
  return *msg->composite_musical_work_type_;
}
const ::ern411::ern::EventDateWithoutFlags&
Video::_Internal::creation_date(const Video* msg) {
  return *msg->creation_date_;
}
const ::ern411::ern::EventDateWithoutFlags&
Video::_Internal::mastered_date(const Video* msg) {
  return *msg->mastered_date_;
}
const ::ern411::ern::Reason&
Video::_Internal::reason_for_cue_sheet_absence(const Video* msg) {
  return *msg->reason_for_cue_sheet_absence_;
}
const ::ern411::ern::ResourceContainedResourceReferenceList&
Video::_Internal::resource_contained_resource_reference_list(const Video* msg) {
  return *msg->resource_contained_resource_reference_list_;
}
const ::ern411::ern::VideoType&
Video::_Internal::type(const Video* msg) {
  return *msg->type_;
}
void Video::clear_composite_musical_work_type() {
  if (composite_musical_work_type_ != nullptr) composite_musical_work_type_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void Video::clear_language_of_dubbing() {
  language_of_dubbing_.Clear();
}
void Video::clear_language_of_performance() {
  language_of_performance_.Clear();
}
void Video::clear_sub_title_language() {
  sub_title_language_.Clear();
}
Video::Video(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  additional_title_(arena),
  av_rating_(arena),
  c_line_(arena),
  character_(arena),
  contributor_(arena),
  courtesy_line_(arena),
  deity_(arena),
  display_artist_(arena),
  display_artist_name_(arena),
  display_credits_(arena),
  display_title_(arena),
  display_title_text_(arena),
  first_publication_date_(arena),
  language_of_dubbing_(arena),
  language_of_performance_(arena),
  p_line_(arena),
  parental_warning_type_(arena),
  raga_(arena),
  related_release_(arena),
  related_resource_(arena),
  remastered_date_(arena),
  resource_id_(arena),
  resource_rights_controller_(arena),
  sub_title_language_(arena),
  tala_(arena),
  technical_details_(arena),
  version_type_(arena),
  video_chapter_reference_(arena),
  video_cue_sheet_reference_(arena),
  work_id_(arena),
  work_rights_controller_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.Video)
}
Video::Video(const Video& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      additional_title_(from.additional_title_),
      av_rating_(from.av_rating_),
      c_line_(from.c_line_),
      character_(from.character_),
      contributor_(from.contributor_),
      courtesy_line_(from.courtesy_line_),
      deity_(from.deity_),
      display_artist_(from.display_artist_),
      display_artist_name_(from.display_artist_name_),
      display_credits_(from.display_credits_),
      display_title_(from.display_title_),
      display_title_text_(from.display_title_text_),
      first_publication_date_(from.first_publication_date_),
      language_of_dubbing_(from.language_of_dubbing_),
      language_of_performance_(from.language_of_performance_),
      p_line_(from.p_line_),
      parental_warning_type_(from.parental_warning_type_),
      raga_(from.raga_),
      related_release_(from.related_release_),
      related_resource_(from.related_resource_),
      remastered_date_(from.remastered_date_),
      resource_id_(from.resource_id_),
      resource_rights_controller_(from.resource_rights_controller_),
      sub_title_language_(from.sub_title_language_),
      tala_(from.tala_),
      technical_details_(from.technical_details_),
      version_type_(from.version_type_),
      video_chapter_reference_(from.video_chapter_reference_),
      video_cue_sheet_reference_(from.video_cue_sheet_reference_),
      work_id_(from.work_id_),
      work_rights_controller_(from.work_rights_controller_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  duration_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_duration()) {
    duration_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_duration(),
      GetArena());
  }
  language_and_script_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_language_and_script_code()) {
    language_and_script_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_language_and_script_code(),
      GetArena());
  }
  resource_reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_resource_reference()) {
    resource_reference_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_resource_reference(),
      GetArena());
  }
  if (from._internal_has_composite_musical_work_type()) {
    composite_musical_work_type_ = new ::ern411::avs::CompositeMusicalWorkType(*from.composite_musical_work_type_);
  } else {
    composite_musical_work_type_ = nullptr;
  }
  if (from._internal_has_creation_date()) {
    creation_date_ = new ::ern411::ern::EventDateWithoutFlags(*from.creation_date_);
  } else {
    creation_date_ = nullptr;
  }
  if (from._internal_has_mastered_date()) {
    mastered_date_ = new ::ern411::ern::EventDateWithoutFlags(*from.mastered_date_);
  } else {
    mastered_date_ = nullptr;
  }
  if (from._internal_has_reason_for_cue_sheet_absence()) {
    reason_for_cue_sheet_absence_ = new ::ern411::ern::Reason(*from.reason_for_cue_sheet_absence_);
  } else {
    reason_for_cue_sheet_absence_ = nullptr;
  }
  if (from._internal_has_resource_contained_resource_reference_list()) {
    resource_contained_resource_reference_list_ = new ::ern411::ern::ResourceContainedResourceReferenceList(*from.resource_contained_resource_reference_list_);
  } else {
    resource_contained_resource_reference_list_ = nullptr;
  }
  if (from._internal_has_type()) {
    type_ = new ::ern411::ern::VideoType(*from.type_);
  } else {
    type_ = nullptr;
  }
  ::memcpy(&contains_hidden_content_, &from.contains_hidden_content_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_supplemental_) -
    reinterpret_cast<char*>(&contains_hidden_content_)) + sizeof(is_supplemental_));
  // @@protoc_insertion_point(copy_constructor:ern411.ern.Video)
}

void Video::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Video_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  duration_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  language_and_script_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resource_reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&composite_musical_work_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_supplemental_) -
      reinterpret_cast<char*>(&composite_musical_work_type_)) + sizeof(is_supplemental_));
}

Video::~Video() {
  // @@protoc_insertion_point(destructor:ern411.ern.Video)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Video::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  duration_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  language_and_script_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resource_reference_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete composite_musical_work_type_;
  if (this != internal_default_instance()) delete creation_date_;
  if (this != internal_default_instance()) delete mastered_date_;
  if (this != internal_default_instance()) delete reason_for_cue_sheet_absence_;
  if (this != internal_default_instance()) delete resource_contained_resource_reference_list_;
  if (this != internal_default_instance()) delete type_;
}

void Video::ArenaDtor(void* object) {
  Video* _this = reinterpret_cast< Video* >(object);
  (void)_this;
}
void Video::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Video::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Video& Video::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Video_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void Video::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.Video)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  additional_title_.Clear();
  av_rating_.Clear();
  c_line_.Clear();
  character_.Clear();
  contributor_.Clear();
  courtesy_line_.Clear();
  deity_.Clear();
  display_artist_.Clear();
  display_artist_name_.Clear();
  display_credits_.Clear();
  display_title_.Clear();
  display_title_text_.Clear();
  first_publication_date_.Clear();
  language_of_dubbing_.Clear();
  language_of_performance_.Clear();
  p_line_.Clear();
  parental_warning_type_.Clear();
  raga_.Clear();
  related_release_.Clear();
  related_resource_.Clear();
  remastered_date_.Clear();
  resource_id_.Clear();
  resource_rights_controller_.Clear();
  sub_title_language_.Clear();
  tala_.Clear();
  technical_details_.Clear();
  version_type_.Clear();
  video_chapter_reference_.Clear();
  video_cue_sheet_reference_.Clear();
  work_id_.Clear();
  work_rights_controller_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      duration_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      language_and_script_code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      resource_reference_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(composite_musical_work_type_ != nullptr);
      composite_musical_work_type_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(creation_date_ != nullptr);
      creation_date_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(mastered_date_ != nullptr);
      mastered_date_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(reason_for_cue_sheet_absence_ != nullptr);
      reason_for_cue_sheet_absence_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(resource_contained_resource_reference_list_ != nullptr);
      resource_contained_resource_reference_list_->Clear();
    }
  }
  if (cached_has_bits & 0x00000100u) {
    GOOGLE_DCHECK(type_ != nullptr);
    type_->Clear();
  }
  if (cached_has_bits & 0x00003e00u) {
    ::memset(&contains_hidden_content_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_supplemental_) -
        reinterpret_cast<char*>(&contains_hidden_content_)) + sizeof(is_supplemental_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Video::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ern411.ern.AdditionalTitle additional_title = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_additional_title(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.AvRating av_rating = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_av_rating(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.CLineWithDefault c_line = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_c_line(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.Character character = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_character(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .ern411.avs.CompositeMusicalWorkType composite_musical_work_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_composite_musical_work_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool contains_hidden_content = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_contains_hidden_content(&has_bits);
          contains_hidden_content_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.Contributor contributor = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_contributor(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.CourtesyLineWithDefault courtesy_line = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_courtesy_line(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .ern411.ern.EventDateWithoutFlags creation_date = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_creation_date(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string deity = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_deity();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.Video.deity");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.DisplayArtist display_artist = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_display_artist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.DisplayArtistNameWithDefault display_artist_name = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_display_artist_name(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.DisplayCredits display_credits = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_display_credits(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.DisplayTitle display_title = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_display_title(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.DisplayTitleText display_title_text = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_display_title_text(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string duration = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_duration();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.Video.duration");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.FulfillmentDateWithTerritory first_publication_date = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_first_publication_date(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<138>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool is_cover = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_is_cover(&has_bits);
          is_cover_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_instrumental = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_is_instrumental(&has_bits);
          is_instrumental_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_remastered = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_is_remastered(&has_bits);
          is_remastered_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_supplemental = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_is_supplemental(&has_bits);
          is_supplemental_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string language_and_script_code = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          auto str = _internal_mutable_language_and_script_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.Video.language_and_script_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ern411.avs.IsoLanguageCode language_of_dubbing = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_language_of_dubbing(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<186>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ern411.avs.IsoLanguageCode language_of_performance = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_language_of_performance(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<194>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .ern411.ern.EventDateWithoutFlags mastered_date = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_mastered_date(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.PLineWithDefault p_line = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_p_line(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<210>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.ParentalWarningTypeWithTerritory parental_warning_type = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_parental_warning_type(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<218>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string raga = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_raga();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.Video.raga");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<226>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .ern411.ern.Reason reason_for_cue_sheet_absence = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_reason_for_cue_sheet_absence(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.RelatedRelease related_release = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_related_release(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<242>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.RelatedResource related_resource = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_related_resource(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<250>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.EventDateWithoutFlags remastered_date = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_remastered_date(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<258>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .ern411.ern.ResourceContainedResourceReferenceList resource_contained_resource_reference_list = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_resource_contained_resource_reference_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.VideoId resource_id = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_resource_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<274>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string resource_reference = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_resource_reference();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.Video.resource_reference");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.ResourceRightsController resource_rights_controller = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_resource_rights_controller(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<290>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ern411.avs.IsoLanguageCode sub_title_language = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_sub_title_language(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<298>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string tala = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_tala();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.Video.tala");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<306>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.TechnicalVideoDetails technical_details = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_technical_details(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<314>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .ern411.ern.VideoType type = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.VersionType version_type = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_version_type(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<330>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string video_chapter_reference = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_video_chapter_reference();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.Video.video_chapter_reference");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<338>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string video_cue_sheet_reference = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_video_cue_sheet_reference();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.Video.video_cue_sheet_reference");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<346>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.MusicalWorkId work_id = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_work_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<354>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.WorkRightsController work_rights_controller = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_work_rights_controller(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<362>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Video::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.Video)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ern411.ern.AdditionalTitle additional_title = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_additional_title_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_additional_title(i), target, stream);
  }

  // repeated .ern411.ern.AvRating av_rating = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_av_rating_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_av_rating(i), target, stream);
  }

  // repeated .ern411.ern.CLineWithDefault c_line = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_c_line_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_c_line(i), target, stream);
  }

  // repeated .ern411.ern.Character character = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_character_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_character(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional .ern411.avs.CompositeMusicalWorkType composite_musical_work_type = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::composite_musical_work_type(this), target, stream);
  }

  // optional bool contains_hidden_content = 6;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_contains_hidden_content(), target);
  }

  // repeated .ern411.ern.Contributor contributor = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_contributor_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_contributor(i), target, stream);
  }

  // repeated .ern411.ern.CourtesyLineWithDefault courtesy_line = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_courtesy_line_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_courtesy_line(i), target, stream);
  }

  // optional .ern411.ern.EventDateWithoutFlags creation_date = 9;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::creation_date(this), target, stream);
  }

  // repeated string deity = 10;
  for (int i = 0, n = this->_internal_deity_size(); i < n; i++) {
    const auto& s = this->_internal_deity(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.Video.deity");
    target = stream->WriteString(10, s, target);
  }

  // repeated .ern411.ern.DisplayArtist display_artist = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_display_artist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_display_artist(i), target, stream);
  }

  // repeated .ern411.ern.DisplayArtistNameWithDefault display_artist_name = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_display_artist_name_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, this->_internal_display_artist_name(i), target, stream);
  }

  // repeated .ern411.ern.DisplayCredits display_credits = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_display_credits_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, this->_internal_display_credits(i), target, stream);
  }

  // repeated .ern411.ern.DisplayTitle display_title = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_display_title_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, this->_internal_display_title(i), target, stream);
  }

  // repeated .ern411.ern.DisplayTitleText display_title_text = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_display_title_text_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, this->_internal_display_title_text(i), target, stream);
  }

  // optional string duration = 16;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_duration().data(), static_cast<int>(this->_internal_duration().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.Video.duration");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_duration(), target);
  }

  // repeated .ern411.ern.FulfillmentDateWithTerritory first_publication_date = 17;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_first_publication_date_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, this->_internal_first_publication_date(i), target, stream);
  }

  // optional bool is_cover = 18;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(18, this->_internal_is_cover(), target);
  }

  // optional bool is_instrumental = 19;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(19, this->_internal_is_instrumental(), target);
  }

  // optional bool is_remastered = 20;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(20, this->_internal_is_remastered(), target);
  }

  // optional bool is_supplemental = 21;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(21, this->_internal_is_supplemental(), target);
  }

  // optional string language_and_script_code = 22;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_language_and_script_code().data(), static_cast<int>(this->_internal_language_and_script_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.Video.language_and_script_code");
    target = stream->WriteStringMaybeAliased(
        22, this->_internal_language_and_script_code(), target);
  }

  // repeated .ern411.avs.IsoLanguageCode language_of_dubbing = 23;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_language_of_dubbing_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(23, this->_internal_language_of_dubbing(i), target, stream);
  }

  // repeated .ern411.avs.IsoLanguageCode language_of_performance = 24;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_language_of_performance_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(24, this->_internal_language_of_performance(i), target, stream);
  }

  // optional .ern411.ern.EventDateWithoutFlags mastered_date = 25;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        25, _Internal::mastered_date(this), target, stream);
  }

  // repeated .ern411.ern.PLineWithDefault p_line = 26;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_p_line_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(26, this->_internal_p_line(i), target, stream);
  }

  // repeated .ern411.ern.ParentalWarningTypeWithTerritory parental_warning_type = 27;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_parental_warning_type_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(27, this->_internal_parental_warning_type(i), target, stream);
  }

  // repeated string raga = 28;
  for (int i = 0, n = this->_internal_raga_size(); i < n; i++) {
    const auto& s = this->_internal_raga(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.Video.raga");
    target = stream->WriteString(28, s, target);
  }

  // optional .ern411.ern.Reason reason_for_cue_sheet_absence = 29;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        29, _Internal::reason_for_cue_sheet_absence(this), target, stream);
  }

  // repeated .ern411.ern.RelatedRelease related_release = 30;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_related_release_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(30, this->_internal_related_release(i), target, stream);
  }

  // repeated .ern411.ern.RelatedResource related_resource = 31;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_related_resource_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(31, this->_internal_related_resource(i), target, stream);
  }

  // repeated .ern411.ern.EventDateWithoutFlags remastered_date = 32;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_remastered_date_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(32, this->_internal_remastered_date(i), target, stream);
  }

  // optional .ern411.ern.ResourceContainedResourceReferenceList resource_contained_resource_reference_list = 33;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        33, _Internal::resource_contained_resource_reference_list(this), target, stream);
  }

  // repeated .ern411.ern.VideoId resource_id = 34;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_resource_id_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(34, this->_internal_resource_id(i), target, stream);
  }

  // optional string resource_reference = 35;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_resource_reference().data(), static_cast<int>(this->_internal_resource_reference().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.Video.resource_reference");
    target = stream->WriteStringMaybeAliased(
        35, this->_internal_resource_reference(), target);
  }

  // repeated .ern411.ern.ResourceRightsController resource_rights_controller = 36;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_resource_rights_controller_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(36, this->_internal_resource_rights_controller(i), target, stream);
  }

  // repeated .ern411.avs.IsoLanguageCode sub_title_language = 37;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sub_title_language_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(37, this->_internal_sub_title_language(i), target, stream);
  }

  // repeated string tala = 38;
  for (int i = 0, n = this->_internal_tala_size(); i < n; i++) {
    const auto& s = this->_internal_tala(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.Video.tala");
    target = stream->WriteString(38, s, target);
  }

  // repeated .ern411.ern.TechnicalVideoDetails technical_details = 39;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_technical_details_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(39, this->_internal_technical_details(i), target, stream);
  }

  // optional .ern411.ern.VideoType type = 40;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        40, _Internal::type(this), target, stream);
  }

  // repeated .ern411.ern.VersionType version_type = 41;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_version_type_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(41, this->_internal_version_type(i), target, stream);
  }

  // repeated string video_chapter_reference = 42;
  for (int i = 0, n = this->_internal_video_chapter_reference_size(); i < n; i++) {
    const auto& s = this->_internal_video_chapter_reference(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.Video.video_chapter_reference");
    target = stream->WriteString(42, s, target);
  }

  // repeated string video_cue_sheet_reference = 43;
  for (int i = 0, n = this->_internal_video_cue_sheet_reference_size(); i < n; i++) {
    const auto& s = this->_internal_video_cue_sheet_reference(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.Video.video_cue_sheet_reference");
    target = stream->WriteString(43, s, target);
  }

  // repeated .ern411.ern.MusicalWorkId work_id = 44;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_work_id_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(44, this->_internal_work_id(i), target, stream);
  }

  // repeated .ern411.ern.WorkRightsController work_rights_controller = 45;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_work_rights_controller_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(45, this->_internal_work_rights_controller(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.Video)
  return target;
}

size_t Video::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.Video)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ern411.ern.AdditionalTitle additional_title = 1;
  total_size += 1UL * this->_internal_additional_title_size();
  for (const auto& msg : this->additional_title_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.AvRating av_rating = 2;
  total_size += 1UL * this->_internal_av_rating_size();
  for (const auto& msg : this->av_rating_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.CLineWithDefault c_line = 3;
  total_size += 1UL * this->_internal_c_line_size();
  for (const auto& msg : this->c_line_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.Character character = 4;
  total_size += 1UL * this->_internal_character_size();
  for (const auto& msg : this->character_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.Contributor contributor = 7;
  total_size += 1UL * this->_internal_contributor_size();
  for (const auto& msg : this->contributor_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.CourtesyLineWithDefault courtesy_line = 8;
  total_size += 1UL * this->_internal_courtesy_line_size();
  for (const auto& msg : this->courtesy_line_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string deity = 10;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(deity_.size());
  for (int i = 0, n = deity_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      deity_.Get(i));
  }

  // repeated .ern411.ern.DisplayArtist display_artist = 11;
  total_size += 1UL * this->_internal_display_artist_size();
  for (const auto& msg : this->display_artist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.DisplayArtistNameWithDefault display_artist_name = 12;
  total_size += 1UL * this->_internal_display_artist_name_size();
  for (const auto& msg : this->display_artist_name_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.DisplayCredits display_credits = 13;
  total_size += 1UL * this->_internal_display_credits_size();
  for (const auto& msg : this->display_credits_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.DisplayTitle display_title = 14;
  total_size += 1UL * this->_internal_display_title_size();
  for (const auto& msg : this->display_title_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.DisplayTitleText display_title_text = 15;
  total_size += 1UL * this->_internal_display_title_text_size();
  for (const auto& msg : this->display_title_text_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.FulfillmentDateWithTerritory first_publication_date = 17;
  total_size += 2UL * this->_internal_first_publication_date_size();
  for (const auto& msg : this->first_publication_date_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.avs.IsoLanguageCode language_of_dubbing = 23;
  total_size += 2UL * this->_internal_language_of_dubbing_size();
  for (const auto& msg : this->language_of_dubbing_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.avs.IsoLanguageCode language_of_performance = 24;
  total_size += 2UL * this->_internal_language_of_performance_size();
  for (const auto& msg : this->language_of_performance_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.PLineWithDefault p_line = 26;
  total_size += 2UL * this->_internal_p_line_size();
  for (const auto& msg : this->p_line_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.ParentalWarningTypeWithTerritory parental_warning_type = 27;
  total_size += 2UL * this->_internal_parental_warning_type_size();
  for (const auto& msg : this->parental_warning_type_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string raga = 28;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(raga_.size());
  for (int i = 0, n = raga_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      raga_.Get(i));
  }

  // repeated .ern411.ern.RelatedRelease related_release = 30;
  total_size += 2UL * this->_internal_related_release_size();
  for (const auto& msg : this->related_release_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.RelatedResource related_resource = 31;
  total_size += 2UL * this->_internal_related_resource_size();
  for (const auto& msg : this->related_resource_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.EventDateWithoutFlags remastered_date = 32;
  total_size += 2UL * this->_internal_remastered_date_size();
  for (const auto& msg : this->remastered_date_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.VideoId resource_id = 34;
  total_size += 2UL * this->_internal_resource_id_size();
  for (const auto& msg : this->resource_id_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.ResourceRightsController resource_rights_controller = 36;
  total_size += 2UL * this->_internal_resource_rights_controller_size();
  for (const auto& msg : this->resource_rights_controller_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.avs.IsoLanguageCode sub_title_language = 37;
  total_size += 2UL * this->_internal_sub_title_language_size();
  for (const auto& msg : this->sub_title_language_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string tala = 38;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(tala_.size());
  for (int i = 0, n = tala_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      tala_.Get(i));
  }

  // repeated .ern411.ern.TechnicalVideoDetails technical_details = 39;
  total_size += 2UL * this->_internal_technical_details_size();
  for (const auto& msg : this->technical_details_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.VersionType version_type = 41;
  total_size += 2UL * this->_internal_version_type_size();
  for (const auto& msg : this->version_type_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string video_chapter_reference = 42;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(video_chapter_reference_.size());
  for (int i = 0, n = video_chapter_reference_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      video_chapter_reference_.Get(i));
  }

  // repeated string video_cue_sheet_reference = 43;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(video_cue_sheet_reference_.size());
  for (int i = 0, n = video_cue_sheet_reference_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      video_cue_sheet_reference_.Get(i));
  }

  // repeated .ern411.ern.MusicalWorkId work_id = 44;
  total_size += 2UL * this->_internal_work_id_size();
  for (const auto& msg : this->work_id_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.WorkRightsController work_rights_controller = 45;
  total_size += 2UL * this->_internal_work_rights_controller_size();
  for (const auto& msg : this->work_rights_controller_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string duration = 16;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_duration());
    }

    // optional string language_and_script_code = 22;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_language_and_script_code());
    }

    // optional string resource_reference = 35;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_resource_reference());
    }

    // optional .ern411.avs.CompositeMusicalWorkType composite_musical_work_type = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *composite_musical_work_type_);
    }

    // optional .ern411.ern.EventDateWithoutFlags creation_date = 9;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *creation_date_);
    }

    // optional .ern411.ern.EventDateWithoutFlags mastered_date = 25;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mastered_date_);
    }

    // optional .ern411.ern.Reason reason_for_cue_sheet_absence = 29;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *reason_for_cue_sheet_absence_);
    }

    // optional .ern411.ern.ResourceContainedResourceReferenceList resource_contained_resource_reference_list = 33;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *resource_contained_resource_reference_list_);
    }

  }
  if (cached_has_bits & 0x00003f00u) {
    // optional .ern411.ern.VideoType type = 40;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_);
    }

    // optional bool contains_hidden_content = 6;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool is_cover = 18;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + 1;
    }

    // optional bool is_instrumental = 19;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 1;
    }

    // optional bool is_remastered = 20;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 1;
    }

    // optional bool is_supplemental = 21;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Video::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.Video)
  GOOGLE_DCHECK_NE(&from, this);
  const Video* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Video>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.Video)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.Video)
    MergeFrom(*source);
  }
}

void Video::MergeFrom(const Video& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.Video)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  additional_title_.MergeFrom(from.additional_title_);
  av_rating_.MergeFrom(from.av_rating_);
  c_line_.MergeFrom(from.c_line_);
  character_.MergeFrom(from.character_);
  contributor_.MergeFrom(from.contributor_);
  courtesy_line_.MergeFrom(from.courtesy_line_);
  deity_.MergeFrom(from.deity_);
  display_artist_.MergeFrom(from.display_artist_);
  display_artist_name_.MergeFrom(from.display_artist_name_);
  display_credits_.MergeFrom(from.display_credits_);
  display_title_.MergeFrom(from.display_title_);
  display_title_text_.MergeFrom(from.display_title_text_);
  first_publication_date_.MergeFrom(from.first_publication_date_);
  language_of_dubbing_.MergeFrom(from.language_of_dubbing_);
  language_of_performance_.MergeFrom(from.language_of_performance_);
  p_line_.MergeFrom(from.p_line_);
  parental_warning_type_.MergeFrom(from.parental_warning_type_);
  raga_.MergeFrom(from.raga_);
  related_release_.MergeFrom(from.related_release_);
  related_resource_.MergeFrom(from.related_resource_);
  remastered_date_.MergeFrom(from.remastered_date_);
  resource_id_.MergeFrom(from.resource_id_);
  resource_rights_controller_.MergeFrom(from.resource_rights_controller_);
  sub_title_language_.MergeFrom(from.sub_title_language_);
  tala_.MergeFrom(from.tala_);
  technical_details_.MergeFrom(from.technical_details_);
  version_type_.MergeFrom(from.version_type_);
  video_chapter_reference_.MergeFrom(from.video_chapter_reference_);
  video_cue_sheet_reference_.MergeFrom(from.video_cue_sheet_reference_);
  work_id_.MergeFrom(from.work_id_);
  work_rights_controller_.MergeFrom(from.work_rights_controller_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_duration(from._internal_duration());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_language_and_script_code(from._internal_language_and_script_code());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_resource_reference(from._internal_resource_reference());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_composite_musical_work_type()->::ern411::avs::CompositeMusicalWorkType::MergeFrom(from._internal_composite_musical_work_type());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_creation_date()->::ern411::ern::EventDateWithoutFlags::MergeFrom(from._internal_creation_date());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_mastered_date()->::ern411::ern::EventDateWithoutFlags::MergeFrom(from._internal_mastered_date());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_reason_for_cue_sheet_absence()->::ern411::ern::Reason::MergeFrom(from._internal_reason_for_cue_sheet_absence());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_resource_contained_resource_reference_list()->::ern411::ern::ResourceContainedResourceReferenceList::MergeFrom(from._internal_resource_contained_resource_reference_list());
    }
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_type()->::ern411::ern::VideoType::MergeFrom(from._internal_type());
    }
    if (cached_has_bits & 0x00000200u) {
      contains_hidden_content_ = from.contains_hidden_content_;
    }
    if (cached_has_bits & 0x00000400u) {
      is_cover_ = from.is_cover_;
    }
    if (cached_has_bits & 0x00000800u) {
      is_instrumental_ = from.is_instrumental_;
    }
    if (cached_has_bits & 0x00001000u) {
      is_remastered_ = from.is_remastered_;
    }
    if (cached_has_bits & 0x00002000u) {
      is_supplemental_ = from.is_supplemental_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Video::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.Video)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Video::CopyFrom(const Video& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.Video)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Video::IsInitialized() const {
  return true;
}

void Video::InternalSwap(Video* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  additional_title_.InternalSwap(&other->additional_title_);
  av_rating_.InternalSwap(&other->av_rating_);
  c_line_.InternalSwap(&other->c_line_);
  character_.InternalSwap(&other->character_);
  contributor_.InternalSwap(&other->contributor_);
  courtesy_line_.InternalSwap(&other->courtesy_line_);
  deity_.InternalSwap(&other->deity_);
  display_artist_.InternalSwap(&other->display_artist_);
  display_artist_name_.InternalSwap(&other->display_artist_name_);
  display_credits_.InternalSwap(&other->display_credits_);
  display_title_.InternalSwap(&other->display_title_);
  display_title_text_.InternalSwap(&other->display_title_text_);
  first_publication_date_.InternalSwap(&other->first_publication_date_);
  language_of_dubbing_.InternalSwap(&other->language_of_dubbing_);
  language_of_performance_.InternalSwap(&other->language_of_performance_);
  p_line_.InternalSwap(&other->p_line_);
  parental_warning_type_.InternalSwap(&other->parental_warning_type_);
  raga_.InternalSwap(&other->raga_);
  related_release_.InternalSwap(&other->related_release_);
  related_resource_.InternalSwap(&other->related_resource_);
  remastered_date_.InternalSwap(&other->remastered_date_);
  resource_id_.InternalSwap(&other->resource_id_);
  resource_rights_controller_.InternalSwap(&other->resource_rights_controller_);
  sub_title_language_.InternalSwap(&other->sub_title_language_);
  tala_.InternalSwap(&other->tala_);
  technical_details_.InternalSwap(&other->technical_details_);
  version_type_.InternalSwap(&other->version_type_);
  video_chapter_reference_.InternalSwap(&other->video_chapter_reference_);
  video_cue_sheet_reference_.InternalSwap(&other->video_cue_sheet_reference_);
  work_id_.InternalSwap(&other->work_id_);
  work_rights_controller_.InternalSwap(&other->work_rights_controller_);
  duration_.Swap(&other->duration_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  language_and_script_code_.Swap(&other->language_and_script_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  resource_reference_.Swap(&other->resource_reference_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Video, is_supplemental_)
      + sizeof(Video::is_supplemental_)
      - PROTOBUF_FIELD_OFFSET(Video, composite_musical_work_type_)>(
          reinterpret_cast<char*>(&composite_musical_work_type_),
          reinterpret_cast<char*>(&other->composite_musical_work_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Video::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VideoCodecType::InitAsDefaultInstance() {
  ::ern411::ern::_VideoCodecType_default_instance_._instance.get_mutable()->ext_value_ = const_cast< ::ern411::avs::VideoCodecType*>(
      ::ern411::avs::VideoCodecType::internal_default_instance());
}
class VideoCodecType::_Internal {
 public:
  using HasBits = decltype(std::declval<VideoCodecType>()._has_bits_);
  static void set_has_namespace_(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_user_defined_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::ern411::avs::VideoCodecType& ext_value(const VideoCodecType* msg);
  static void set_has_ext_value(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::ern411::avs::VideoCodecType&
VideoCodecType::_Internal::ext_value(const VideoCodecType* msg) {
  return *msg->ext_value_;
}
void VideoCodecType::clear_ext_value() {
  if (ext_value_ != nullptr) ext_value_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
VideoCodecType::VideoCodecType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.VideoCodecType)
}
VideoCodecType::VideoCodecType(const VideoCodecType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_namespace_()) {
    namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_namespace_(),
      GetArena());
  }
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_user_defined_value()) {
    user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_defined_value(),
      GetArena());
  }
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_version()) {
    version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_version(),
      GetArena());
  }
  if (from._internal_has_ext_value()) {
    ext_value_ = new ::ern411::avs::VideoCodecType(*from.ext_value_);
  } else {
    ext_value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ern411.ern.VideoCodecType)
}

void VideoCodecType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VideoCodecType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ext_value_ = nullptr;
}

VideoCodecType::~VideoCodecType() {
  // @@protoc_insertion_point(destructor:ern411.ern.VideoCodecType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VideoCodecType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  namespace__.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ext_value_;
}

void VideoCodecType::ArenaDtor(void* object) {
  VideoCodecType* _this = reinterpret_cast< VideoCodecType* >(object);
  (void)_this;
}
void VideoCodecType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VideoCodecType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VideoCodecType& VideoCodecType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VideoCodecType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void VideoCodecType::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.VideoCodecType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      namespace__.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      user_defined_value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      version_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(ext_value_ != nullptr);
      ext_value_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VideoCodecType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string namespace = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_namespace_();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.VideoCodecType.namespace");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string user_defined_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_user_defined_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.VideoCodecType.user_defined_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.VideoCodecType.version");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.avs.VideoCodecType ext_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VideoCodecType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.VideoCodecType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string namespace = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_namespace_().data(), static_cast<int>(this->_internal_namespace_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.VideoCodecType.namespace");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_namespace_(), target);
  }

  // optional string user_defined_value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_user_defined_value().data(), static_cast<int>(this->_internal_user_defined_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.VideoCodecType.user_defined_value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_defined_value(), target);
  }

  // optional string version = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.VideoCodecType.version");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_version(), target);
  }

  // optional .ern411.avs.VideoCodecType ext_value = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::ext_value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.VideoCodecType)
  return target;
}

size_t VideoCodecType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.VideoCodecType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string namespace = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_namespace_());
    }

    // optional string user_defined_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_defined_value());
    }

    // optional string version = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_version());
    }

    // optional .ern411.avs.VideoCodecType ext_value = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ext_value_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VideoCodecType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.VideoCodecType)
  GOOGLE_DCHECK_NE(&from, this);
  const VideoCodecType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VideoCodecType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.VideoCodecType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.VideoCodecType)
    MergeFrom(*source);
  }
}

void VideoCodecType::MergeFrom(const VideoCodecType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.VideoCodecType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_namespace_(from._internal_namespace_());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_user_defined_value(from._internal_user_defined_value());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_version(from._internal_version());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_ext_value()->::ern411::avs::VideoCodecType::MergeFrom(from._internal_ext_value());
    }
  }
}

void VideoCodecType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.VideoCodecType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VideoCodecType::CopyFrom(const VideoCodecType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.VideoCodecType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoCodecType::IsInitialized() const {
  return true;
}

void VideoCodecType::InternalSwap(VideoCodecType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  namespace__.Swap(&other->namespace__, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_defined_value_.Swap(&other->user_defined_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  version_.Swap(&other->version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(ext_value_, other->ext_value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VideoCodecType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VideoId::InitAsDefaultInstance() {
  ::ern411::ern::_VideoId_default_instance_._instance.get_mutable()->catalog_number_ = const_cast< ::ern411::ern::CatalogNumber*>(
      ::ern411::ern::CatalogNumber::internal_default_instance());
}
class VideoId::_Internal {
 public:
  using HasBits = decltype(std::declval<VideoId>()._has_bits_);
  static const ::ern411::ern::CatalogNumber& catalog_number(const VideoId* msg);
  static void set_has_catalog_number(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_i_s_a_n(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_i_s_r_c(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_replaced(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_v_i_s_a_n(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::ern411::ern::CatalogNumber&
VideoId::_Internal::catalog_number(const VideoId* msg) {
  return *msg->catalog_number_;
}
VideoId::VideoId(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  e_i_d_r_(arena),
  proprietary_id_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.VideoId)
}
VideoId::VideoId(const VideoId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      e_i_d_r_(from.e_i_d_r_),
      proprietary_id_(from.proprietary_id_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  i_s_a_n_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_i_s_a_n()) {
    i_s_a_n_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_i_s_a_n(),
      GetArena());
  }
  i_s_r_c_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_i_s_r_c()) {
    i_s_r_c_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_i_s_r_c(),
      GetArena());
  }
  v_i_s_a_n_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_v_i_s_a_n()) {
    v_i_s_a_n_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_v_i_s_a_n(),
      GetArena());
  }
  if (from._internal_has_catalog_number()) {
    catalog_number_ = new ::ern411::ern::CatalogNumber(*from.catalog_number_);
  } else {
    catalog_number_ = nullptr;
  }
  is_replaced_ = from.is_replaced_;
  // @@protoc_insertion_point(copy_constructor:ern411.ern.VideoId)
}

void VideoId::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VideoId_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  i_s_a_n_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  i_s_r_c_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  v_i_s_a_n_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&catalog_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_replaced_) -
      reinterpret_cast<char*>(&catalog_number_)) + sizeof(is_replaced_));
}

VideoId::~VideoId() {
  // @@protoc_insertion_point(destructor:ern411.ern.VideoId)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VideoId::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  i_s_a_n_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  i_s_r_c_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  v_i_s_a_n_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete catalog_number_;
}

void VideoId::ArenaDtor(void* object) {
  VideoId* _this = reinterpret_cast< VideoId* >(object);
  (void)_this;
}
void VideoId::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VideoId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VideoId& VideoId::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VideoId_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void VideoId::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.VideoId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  e_i_d_r_.Clear();
  proprietary_id_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      i_s_a_n_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      i_s_r_c_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      v_i_s_a_n_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(catalog_number_ != nullptr);
      catalog_number_->Clear();
    }
  }
  is_replaced_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VideoId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ern411.ern.CatalogNumber catalog_number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_catalog_number(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string e_i_d_r = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_e_i_d_r();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.VideoId.e_i_d_r");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string i_s_a_n = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_i_s_a_n();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.VideoId.i_s_a_n");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string i_s_r_c = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_i_s_r_c();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.VideoId.i_s_r_c");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_replaced = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_is_replaced(&has_bits);
          is_replaced_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.ProprietaryId proprietary_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_proprietary_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string v_i_s_a_n = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_v_i_s_a_n();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.VideoId.v_i_s_a_n");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VideoId::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.VideoId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ern411.ern.CatalogNumber catalog_number = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::catalog_number(this), target, stream);
  }

  // repeated string e_i_d_r = 2;
  for (int i = 0, n = this->_internal_e_i_d_r_size(); i < n; i++) {
    const auto& s = this->_internal_e_i_d_r(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.VideoId.e_i_d_r");
    target = stream->WriteString(2, s, target);
  }

  // optional string i_s_a_n = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_i_s_a_n().data(), static_cast<int>(this->_internal_i_s_a_n().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.VideoId.i_s_a_n");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_i_s_a_n(), target);
  }

  // optional string i_s_r_c = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_i_s_r_c().data(), static_cast<int>(this->_internal_i_s_r_c().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.VideoId.i_s_r_c");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_i_s_r_c(), target);
  }

  // optional bool is_replaced = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_is_replaced(), target);
  }

  // repeated .ern411.ern.ProprietaryId proprietary_id = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_proprietary_id_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_proprietary_id(i), target, stream);
  }

  // optional string v_i_s_a_n = 7;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_v_i_s_a_n().data(), static_cast<int>(this->_internal_v_i_s_a_n().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.VideoId.v_i_s_a_n");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_v_i_s_a_n(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.VideoId)
  return target;
}

size_t VideoId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.VideoId)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string e_i_d_r = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(e_i_d_r_.size());
  for (int i = 0, n = e_i_d_r_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      e_i_d_r_.Get(i));
  }

  // repeated .ern411.ern.ProprietaryId proprietary_id = 6;
  total_size += 1UL * this->_internal_proprietary_id_size();
  for (const auto& msg : this->proprietary_id_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string i_s_a_n = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_i_s_a_n());
    }

    // optional string i_s_r_c = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_i_s_r_c());
    }

    // optional string v_i_s_a_n = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_v_i_s_a_n());
    }

    // optional .ern411.ern.CatalogNumber catalog_number = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *catalog_number_);
    }

    // optional bool is_replaced = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VideoId::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.VideoId)
  GOOGLE_DCHECK_NE(&from, this);
  const VideoId* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VideoId>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.VideoId)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.VideoId)
    MergeFrom(*source);
  }
}

void VideoId::MergeFrom(const VideoId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.VideoId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  e_i_d_r_.MergeFrom(from.e_i_d_r_);
  proprietary_id_.MergeFrom(from.proprietary_id_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_i_s_a_n(from._internal_i_s_a_n());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_i_s_r_c(from._internal_i_s_r_c());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_v_i_s_a_n(from._internal_v_i_s_a_n());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_catalog_number()->::ern411::ern::CatalogNumber::MergeFrom(from._internal_catalog_number());
    }
    if (cached_has_bits & 0x00000010u) {
      is_replaced_ = from.is_replaced_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VideoId::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.VideoId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VideoId::CopyFrom(const VideoId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.VideoId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoId::IsInitialized() const {
  return true;
}

void VideoId::InternalSwap(VideoId* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  e_i_d_r_.InternalSwap(&other->e_i_d_r_);
  proprietary_id_.InternalSwap(&other->proprietary_id_);
  i_s_a_n_.Swap(&other->i_s_a_n_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  i_s_r_c_.Swap(&other->i_s_r_c_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  v_i_s_a_n_.Swap(&other->v_i_s_a_n_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VideoId, is_replaced_)
      + sizeof(VideoId::is_replaced_)
      - PROTOBUF_FIELD_OFFSET(VideoId, catalog_number_)>(
          reinterpret_cast<char*>(&catalog_number_),
          reinterpret_cast<char*>(&other->catalog_number_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VideoId::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VideoType::InitAsDefaultInstance() {
  ::ern411::ern::_VideoType_default_instance_._instance.get_mutable()->ext_value_ = const_cast< ::ern411::avs::VideoType*>(
      ::ern411::avs::VideoType::internal_default_instance());
}
class VideoType::_Internal {
 public:
  using HasBits = decltype(std::declval<VideoType>()._has_bits_);
  static void set_has_namespace_(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_user_defined_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::ern411::avs::VideoType& ext_value(const VideoType* msg);
  static void set_has_ext_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::ern411::avs::VideoType&
VideoType::_Internal::ext_value(const VideoType* msg) {
  return *msg->ext_value_;
}
void VideoType::clear_ext_value() {
  if (ext_value_ != nullptr) ext_value_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
VideoType::VideoType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.VideoType)
}
VideoType::VideoType(const VideoType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_namespace_()) {
    namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_namespace_(),
      GetArena());
  }
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_user_defined_value()) {
    user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_defined_value(),
      GetArena());
  }
  if (from._internal_has_ext_value()) {
    ext_value_ = new ::ern411::avs::VideoType(*from.ext_value_);
  } else {
    ext_value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ern411.ern.VideoType)
}

void VideoType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VideoType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ext_value_ = nullptr;
}

VideoType::~VideoType() {
  // @@protoc_insertion_point(destructor:ern411.ern.VideoType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VideoType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  namespace__.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_defined_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ext_value_;
}

void VideoType::ArenaDtor(void* object) {
  VideoType* _this = reinterpret_cast< VideoType* >(object);
  (void)_this;
}
void VideoType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VideoType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VideoType& VideoType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VideoType_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void VideoType::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.VideoType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      namespace__.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      user_defined_value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(ext_value_ != nullptr);
      ext_value_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VideoType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string namespace = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_namespace_();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.VideoType.namespace");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string user_defined_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_user_defined_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.VideoType.user_defined_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.avs.VideoType ext_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_ext_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VideoType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.VideoType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string namespace = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_namespace_().data(), static_cast<int>(this->_internal_namespace_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.VideoType.namespace");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_namespace_(), target);
  }

  // optional string user_defined_value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_user_defined_value().data(), static_cast<int>(this->_internal_user_defined_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.VideoType.user_defined_value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_defined_value(), target);
  }

  // optional .ern411.avs.VideoType ext_value = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::ext_value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.VideoType)
  return target;
}

size_t VideoType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.VideoType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string namespace = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_namespace_());
    }

    // optional string user_defined_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_defined_value());
    }

    // optional .ern411.avs.VideoType ext_value = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ext_value_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VideoType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.VideoType)
  GOOGLE_DCHECK_NE(&from, this);
  const VideoType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VideoType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.VideoType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.VideoType)
    MergeFrom(*source);
  }
}

void VideoType::MergeFrom(const VideoType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.VideoType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_namespace_(from._internal_namespace_());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_user_defined_value(from._internal_user_defined_value());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_ext_value()->::ern411::avs::VideoType::MergeFrom(from._internal_ext_value());
    }
  }
}

void VideoType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.VideoType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VideoType::CopyFrom(const VideoType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.VideoType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoType::IsInitialized() const {
  return true;
}

void VideoType::InternalSwap(VideoType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  namespace__.Swap(&other->namespace__, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_defined_value_.Swap(&other->user_defined_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(ext_value_, other->ext_value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VideoType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WorkRightsController::InitAsDefaultInstance() {
  ::ern411::ern::_WorkRightsController_default_instance_._instance.get_mutable()->end_date_ = const_cast< ::ern411::ern::ddex_IsoDate*>(
      ::ern411::ern::ddex_IsoDate::internal_default_instance());
  ::ern411::ern::_WorkRightsController_default_instance_._instance.get_mutable()->rights_controller_type_ = const_cast< ::ern411::avs::RightsControllerType*>(
      ::ern411::avs::RightsControllerType::internal_default_instance());
  ::ern411::ern::_WorkRightsController_default_instance_._instance.get_mutable()->start_date_ = const_cast< ::ern411::ern::ddex_IsoDate*>(
      ::ern411::ern::ddex_IsoDate::internal_default_instance());
}
class WorkRightsController::_Internal {
 public:
  using HasBits = decltype(std::declval<WorkRightsController>()._has_bits_);
  static const ::ern411::ern::ddex_IsoDate& end_date(const WorkRightsController* msg);
  static void set_has_end_date(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_right_share_percentage(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_right_share_unknown(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_rights_controller_party_reference(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ern411::avs::RightsControllerType& rights_controller_type(const WorkRightsController* msg);
  static void set_has_rights_controller_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::ern411::ern::ddex_IsoDate& start_date(const WorkRightsController* msg);
  static void set_has_start_date(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::ern411::ern::ddex_IsoDate&
WorkRightsController::_Internal::end_date(const WorkRightsController* msg) {
  return *msg->end_date_;
}
const ::ern411::avs::RightsControllerType&
WorkRightsController::_Internal::rights_controller_type(const WorkRightsController* msg) {
  return *msg->rights_controller_type_;
}
const ::ern411::ern::ddex_IsoDate&
WorkRightsController::_Internal::start_date(const WorkRightsController* msg) {
  return *msg->start_date_;
}
void WorkRightsController::clear_rights_controller_role() {
  rights_controller_role_.Clear();
}
void WorkRightsController::clear_rights_controller_type() {
  if (rights_controller_type_ != nullptr) rights_controller_type_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
WorkRightsController::WorkRightsController(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  rights_controller_role_(arena),
  territory_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.WorkRightsController)
}
WorkRightsController::WorkRightsController(const WorkRightsController& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      rights_controller_role_(from.rights_controller_role_),
      territory_(from.territory_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  rights_controller_party_reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_rights_controller_party_reference()) {
    rights_controller_party_reference_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_rights_controller_party_reference(),
      GetArena());
  }
  if (from._internal_has_end_date()) {
    end_date_ = new ::ern411::ern::ddex_IsoDate(*from.end_date_);
  } else {
    end_date_ = nullptr;
  }
  if (from._internal_has_rights_controller_type()) {
    rights_controller_type_ = new ::ern411::avs::RightsControllerType(*from.rights_controller_type_);
  } else {
    rights_controller_type_ = nullptr;
  }
  if (from._internal_has_start_date()) {
    start_date_ = new ::ern411::ern::ddex_IsoDate(*from.start_date_);
  } else {
    start_date_ = nullptr;
  }
  ::memcpy(&right_share_percentage_, &from.right_share_percentage_,
    static_cast<size_t>(reinterpret_cast<char*>(&right_share_unknown_) -
    reinterpret_cast<char*>(&right_share_percentage_)) + sizeof(right_share_unknown_));
  // @@protoc_insertion_point(copy_constructor:ern411.ern.WorkRightsController)
}

void WorkRightsController::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WorkRightsController_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  rights_controller_party_reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&end_date_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&right_share_unknown_) -
      reinterpret_cast<char*>(&end_date_)) + sizeof(right_share_unknown_));
}

WorkRightsController::~WorkRightsController() {
  // @@protoc_insertion_point(destructor:ern411.ern.WorkRightsController)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WorkRightsController::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  rights_controller_party_reference_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete end_date_;
  if (this != internal_default_instance()) delete rights_controller_type_;
  if (this != internal_default_instance()) delete start_date_;
}

void WorkRightsController::ArenaDtor(void* object) {
  WorkRightsController* _this = reinterpret_cast< WorkRightsController* >(object);
  (void)_this;
}
void WorkRightsController::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WorkRightsController::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WorkRightsController& WorkRightsController::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WorkRightsController_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void WorkRightsController::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.WorkRightsController)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rights_controller_role_.Clear();
  territory_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      rights_controller_party_reference_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(end_date_ != nullptr);
      end_date_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(rights_controller_type_ != nullptr);
      rights_controller_type_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(start_date_ != nullptr);
      start_date_->Clear();
    }
  }
  if (cached_has_bits & 0x00000030u) {
    ::memset(&right_share_percentage_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&right_share_unknown_) -
        reinterpret_cast<char*>(&right_share_percentage_)) + sizeof(right_share_unknown_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WorkRightsController::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ern411.ern.ddex_IsoDate end_date = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_end_date(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double right_share_percentage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_right_share_percentage(&has_bits);
          right_share_percentage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool right_share_unknown = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_right_share_unknown(&has_bits);
          right_share_unknown_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string rights_controller_party_reference = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_rights_controller_party_reference();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.WorkRightsController.rights_controller_party_reference");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ern411.avs.RightsControllerRole rights_controller_role = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rights_controller_role(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .ern411.avs.RightsControllerType rights_controller_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_rights_controller_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ern411.ern.ddex_IsoDate start_date = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_start_date(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ern411.ern.AllTerritoryCode territory = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_territory(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WorkRightsController::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.WorkRightsController)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ern411.ern.ddex_IsoDate end_date = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::end_date(this), target, stream);
  }

  // optional double right_share_percentage = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_right_share_percentage(), target);
  }

  // optional bool right_share_unknown = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_right_share_unknown(), target);
  }

  // optional string rights_controller_party_reference = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_rights_controller_party_reference().data(), static_cast<int>(this->_internal_rights_controller_party_reference().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.WorkRightsController.rights_controller_party_reference");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_rights_controller_party_reference(), target);
  }

  // repeated .ern411.avs.RightsControllerRole rights_controller_role = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_rights_controller_role_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_rights_controller_role(i), target, stream);
  }

  // optional .ern411.avs.RightsControllerType rights_controller_type = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::rights_controller_type(this), target, stream);
  }

  // optional .ern411.ern.ddex_IsoDate start_date = 7;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::start_date(this), target, stream);
  }

  // repeated .ern411.ern.AllTerritoryCode territory = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_territory_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_territory(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.WorkRightsController)
  return target;
}

size_t WorkRightsController::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.WorkRightsController)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ern411.avs.RightsControllerRole rights_controller_role = 5;
  total_size += 1UL * this->_internal_rights_controller_role_size();
  for (const auto& msg : this->rights_controller_role_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ern411.ern.AllTerritoryCode territory = 8;
  total_size += 1UL * this->_internal_territory_size();
  for (const auto& msg : this->territory_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string rights_controller_party_reference = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_rights_controller_party_reference());
    }

    // optional .ern411.ern.ddex_IsoDate end_date = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *end_date_);
    }

    // optional .ern411.avs.RightsControllerType rights_controller_type = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rights_controller_type_);
    }

    // optional .ern411.ern.ddex_IsoDate start_date = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *start_date_);
    }

    // optional double right_share_percentage = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional bool right_share_unknown = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WorkRightsController::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.WorkRightsController)
  GOOGLE_DCHECK_NE(&from, this);
  const WorkRightsController* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WorkRightsController>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.WorkRightsController)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.WorkRightsController)
    MergeFrom(*source);
  }
}

void WorkRightsController::MergeFrom(const WorkRightsController& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.WorkRightsController)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rights_controller_role_.MergeFrom(from.rights_controller_role_);
  territory_.MergeFrom(from.territory_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_rights_controller_party_reference(from._internal_rights_controller_party_reference());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_end_date()->::ern411::ern::ddex_IsoDate::MergeFrom(from._internal_end_date());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_rights_controller_type()->::ern411::avs::RightsControllerType::MergeFrom(from._internal_rights_controller_type());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_start_date()->::ern411::ern::ddex_IsoDate::MergeFrom(from._internal_start_date());
    }
    if (cached_has_bits & 0x00000010u) {
      right_share_percentage_ = from.right_share_percentage_;
    }
    if (cached_has_bits & 0x00000020u) {
      right_share_unknown_ = from.right_share_unknown_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void WorkRightsController::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.WorkRightsController)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkRightsController::CopyFrom(const WorkRightsController& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.WorkRightsController)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkRightsController::IsInitialized() const {
  return true;
}

void WorkRightsController::InternalSwap(WorkRightsController* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  rights_controller_role_.InternalSwap(&other->rights_controller_role_);
  territory_.InternalSwap(&other->territory_);
  rights_controller_party_reference_.Swap(&other->rights_controller_party_reference_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WorkRightsController, right_share_unknown_)
      + sizeof(WorkRightsController::right_share_unknown_)
      - PROTOBUF_FIELD_OFFSET(WorkRightsController, end_date_)>(
          reinterpret_cast<char*>(&end_date_),
          reinterpret_cast<char*>(&other->end_date_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WorkRightsController::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ddex_IsoDate::InitAsDefaultInstance() {
}
class ddex_IsoDate::_Internal {
 public:
  using HasBits = decltype(std::declval<ddex_IsoDate>()._has_bits_);
  static void set_has_auto_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ddex_IsoDate::ddex_IsoDate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.ddex_IsoDate)
}
ddex_IsoDate::ddex_IsoDate(const ddex_IsoDate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  auto_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_auto_value()) {
    auto_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_auto_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:ern411.ern.ddex_IsoDate)
}

void ddex_IsoDate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ddex_IsoDate_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  auto_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ddex_IsoDate::~ddex_IsoDate() {
  // @@protoc_insertion_point(destructor:ern411.ern.ddex_IsoDate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ddex_IsoDate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  auto_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ddex_IsoDate::ArenaDtor(void* object) {
  ddex_IsoDate* _this = reinterpret_cast< ddex_IsoDate* >(object);
  (void)_this;
}
void ddex_IsoDate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ddex_IsoDate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ddex_IsoDate& ddex_IsoDate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ddex_IsoDate_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void ddex_IsoDate::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.ddex_IsoDate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    auto_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ddex_IsoDate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string auto_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_auto_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.ddex_IsoDate.auto_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ddex_IsoDate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.ddex_IsoDate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string auto_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_auto_value().data(), static_cast<int>(this->_internal_auto_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.ddex_IsoDate.auto_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_auto_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.ddex_IsoDate)
  return target;
}

size_t ddex_IsoDate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.ddex_IsoDate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string auto_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_auto_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ddex_IsoDate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.ddex_IsoDate)
  GOOGLE_DCHECK_NE(&from, this);
  const ddex_IsoDate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ddex_IsoDate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.ddex_IsoDate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.ddex_IsoDate)
    MergeFrom(*source);
  }
}

void ddex_IsoDate::MergeFrom(const ddex_IsoDate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.ddex_IsoDate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_auto_value()) {
    _internal_set_auto_value(from._internal_auto_value());
  }
}

void ddex_IsoDate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.ddex_IsoDate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ddex_IsoDate::CopyFrom(const ddex_IsoDate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.ddex_IsoDate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ddex_IsoDate::IsInitialized() const {
  return true;
}

void ddex_IsoDate::InternalSwap(ddex_IsoDate* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  auto_value_.Swap(&other->auto_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ddex_IsoDate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ddex_LocalPartyAnchorReference::InitAsDefaultInstance() {
}
class ddex_LocalPartyAnchorReference::_Internal {
 public:
  using HasBits = decltype(std::declval<ddex_LocalPartyAnchorReference>()._has_bits_);
  static void set_has_auto_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ddex_LocalPartyAnchorReference::ddex_LocalPartyAnchorReference(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.ddex_LocalPartyAnchorReference)
}
ddex_LocalPartyAnchorReference::ddex_LocalPartyAnchorReference(const ddex_LocalPartyAnchorReference& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  auto_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_auto_value()) {
    auto_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_auto_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:ern411.ern.ddex_LocalPartyAnchorReference)
}

void ddex_LocalPartyAnchorReference::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ddex_LocalPartyAnchorReference_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  auto_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ddex_LocalPartyAnchorReference::~ddex_LocalPartyAnchorReference() {
  // @@protoc_insertion_point(destructor:ern411.ern.ddex_LocalPartyAnchorReference)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ddex_LocalPartyAnchorReference::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  auto_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ddex_LocalPartyAnchorReference::ArenaDtor(void* object) {
  ddex_LocalPartyAnchorReference* _this = reinterpret_cast< ddex_LocalPartyAnchorReference* >(object);
  (void)_this;
}
void ddex_LocalPartyAnchorReference::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ddex_LocalPartyAnchorReference::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ddex_LocalPartyAnchorReference& ddex_LocalPartyAnchorReference::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ddex_LocalPartyAnchorReference_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void ddex_LocalPartyAnchorReference::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.ddex_LocalPartyAnchorReference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    auto_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ddex_LocalPartyAnchorReference::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string auto_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_auto_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.ddex_LocalPartyAnchorReference.auto_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ddex_LocalPartyAnchorReference::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.ddex_LocalPartyAnchorReference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string auto_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_auto_value().data(), static_cast<int>(this->_internal_auto_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.ddex_LocalPartyAnchorReference.auto_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_auto_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.ddex_LocalPartyAnchorReference)
  return target;
}

size_t ddex_LocalPartyAnchorReference::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.ddex_LocalPartyAnchorReference)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string auto_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_auto_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ddex_LocalPartyAnchorReference::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.ddex_LocalPartyAnchorReference)
  GOOGLE_DCHECK_NE(&from, this);
  const ddex_LocalPartyAnchorReference* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ddex_LocalPartyAnchorReference>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.ddex_LocalPartyAnchorReference)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.ddex_LocalPartyAnchorReference)
    MergeFrom(*source);
  }
}

void ddex_LocalPartyAnchorReference::MergeFrom(const ddex_LocalPartyAnchorReference& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.ddex_LocalPartyAnchorReference)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_auto_value()) {
    _internal_set_auto_value(from._internal_auto_value());
  }
}

void ddex_LocalPartyAnchorReference::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.ddex_LocalPartyAnchorReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ddex_LocalPartyAnchorReference::CopyFrom(const ddex_LocalPartyAnchorReference& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.ddex_LocalPartyAnchorReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ddex_LocalPartyAnchorReference::IsInitialized() const {
  return true;
}

void ddex_LocalPartyAnchorReference::InternalSwap(ddex_LocalPartyAnchorReference* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  auto_value_.Swap(&other->auto_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ddex_LocalPartyAnchorReference::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ddex_LocalResourceAnchorReference::InitAsDefaultInstance() {
}
class ddex_LocalResourceAnchorReference::_Internal {
 public:
  using HasBits = decltype(std::declval<ddex_LocalResourceAnchorReference>()._has_bits_);
  static void set_has_auto_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ddex_LocalResourceAnchorReference::ddex_LocalResourceAnchorReference(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ern411.ern.ddex_LocalResourceAnchorReference)
}
ddex_LocalResourceAnchorReference::ddex_LocalResourceAnchorReference(const ddex_LocalResourceAnchorReference& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  auto_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_auto_value()) {
    auto_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_auto_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:ern411.ern.ddex_LocalResourceAnchorReference)
}

void ddex_LocalResourceAnchorReference::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ddex_LocalResourceAnchorReference_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  auto_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ddex_LocalResourceAnchorReference::~ddex_LocalResourceAnchorReference() {
  // @@protoc_insertion_point(destructor:ern411.ern.ddex_LocalResourceAnchorReference)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ddex_LocalResourceAnchorReference::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  auto_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ddex_LocalResourceAnchorReference::ArenaDtor(void* object) {
  ddex_LocalResourceAnchorReference* _this = reinterpret_cast< ddex_LocalResourceAnchorReference* >(object);
  (void)_this;
}
void ddex_LocalResourceAnchorReference::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ddex_LocalResourceAnchorReference::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ddex_LocalResourceAnchorReference& ddex_LocalResourceAnchorReference::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ddex_LocalResourceAnchorReference_ddex_2dxmltoproto_2fgenerated_2fern42_2fern_2eproto.base);
  return *internal_default_instance();
}


void ddex_LocalResourceAnchorReference::Clear() {
// @@protoc_insertion_point(message_clear_start:ern411.ern.ddex_LocalResourceAnchorReference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    auto_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ddex_LocalResourceAnchorReference::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string auto_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_auto_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ern411.ern.ddex_LocalResourceAnchorReference.auto_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ddex_LocalResourceAnchorReference::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ern411.ern.ddex_LocalResourceAnchorReference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string auto_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_auto_value().data(), static_cast<int>(this->_internal_auto_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ern411.ern.ddex_LocalResourceAnchorReference.auto_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_auto_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ern411.ern.ddex_LocalResourceAnchorReference)
  return target;
}

size_t ddex_LocalResourceAnchorReference::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ern411.ern.ddex_LocalResourceAnchorReference)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string auto_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_auto_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ddex_LocalResourceAnchorReference::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ern411.ern.ddex_LocalResourceAnchorReference)
  GOOGLE_DCHECK_NE(&from, this);
  const ddex_LocalResourceAnchorReference* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ddex_LocalResourceAnchorReference>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ern411.ern.ddex_LocalResourceAnchorReference)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ern411.ern.ddex_LocalResourceAnchorReference)
    MergeFrom(*source);
  }
}

void ddex_LocalResourceAnchorReference::MergeFrom(const ddex_LocalResourceAnchorReference& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ern411.ern.ddex_LocalResourceAnchorReference)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_auto_value()) {
    _internal_set_auto_value(from._internal_auto_value());
  }
}

void ddex_LocalResourceAnchorReference::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ern411.ern.ddex_LocalResourceAnchorReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ddex_LocalResourceAnchorReference::CopyFrom(const ddex_LocalResourceAnchorReference& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ern411.ern.ddex_LocalResourceAnchorReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ddex_LocalResourceAnchorReference::IsInitialized() const {
  return true;
}

void ddex_LocalResourceAnchorReference::InternalSwap(ddex_LocalResourceAnchorReference* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  auto_value_.Swap(&other->auto_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ddex_LocalResourceAnchorReference::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace ern
}  // namespace ern411
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ern411::ern::AdditionalTitle* Arena::CreateMaybeMessage< ::ern411::ern::AdditionalTitle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::AdditionalTitle >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::AdministratingRecordCompanyRole* Arena::CreateMaybeMessage< ::ern411::ern::AdministratingRecordCompanyRole >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::AdministratingRecordCompanyRole >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::AdministratingRecordCompanyWithReference* Arena::CreateMaybeMessage< ::ern411::ern::AdministratingRecordCompanyWithReference >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::AdministratingRecordCompanyWithReference >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::Affiliation* Arena::CreateMaybeMessage< ::ern411::ern::Affiliation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::Affiliation >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::AllTerritoryCode* Arena::CreateMaybeMessage< ::ern411::ern::AllTerritoryCode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::AllTerritoryCode >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::AspectRatio* Arena::CreateMaybeMessage< ::ern411::ern::AspectRatio >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::AspectRatio >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::AudioCodecType* Arena::CreateMaybeMessage< ::ern411::ern::AudioCodecType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::AudioCodecType >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::AvRating* Arena::CreateMaybeMessage< ::ern411::ern::AvRating >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::AvRating >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::BitRate* Arena::CreateMaybeMessage< ::ern411::ern::BitRate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::BitRate >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::CLine* Arena::CreateMaybeMessage< ::ern411::ern::CLine >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::CLine >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::CLineWithDefault* Arena::CreateMaybeMessage< ::ern411::ern::CLineWithDefault >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::CLineWithDefault >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::CarrierType* Arena::CreateMaybeMessage< ::ern411::ern::CarrierType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::CarrierType >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::CatalogNumber* Arena::CreateMaybeMessage< ::ern411::ern::CatalogNumber >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::CatalogNumber >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::Chapter* Arena::CreateMaybeMessage< ::ern411::ern::Chapter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::Chapter >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::ChapterList* Arena::CreateMaybeMessage< ::ern411::ern::ChapterList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::ChapterList >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::Character* Arena::CreateMaybeMessage< ::ern411::ern::Character >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::Character >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::CommercialModelType* Arena::CreateMaybeMessage< ::ern411::ern::CommercialModelType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::CommercialModelType >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::ConditionForRightsClaimPolicy* Arena::CreateMaybeMessage< ::ern411::ern::ConditionForRightsClaimPolicy >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::ConditionForRightsClaimPolicy >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::ContainerFormat* Arena::CreateMaybeMessage< ::ern411::ern::ContainerFormat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::ContainerFormat >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::Contributor* Arena::CreateMaybeMessage< ::ern411::ern::Contributor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::Contributor >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::ContributorRole* Arena::CreateMaybeMessage< ::ern411::ern::ContributorRole >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::ContributorRole >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::CoreArea* Arena::CreateMaybeMessage< ::ern411::ern::CoreArea >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::CoreArea >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::CourtesyLineWithDefault* Arena::CreateMaybeMessage< ::ern411::ern::CourtesyLineWithDefault >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::CourtesyLineWithDefault >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::CueOrigin* Arena::CreateMaybeMessage< ::ern411::ern::CueOrigin >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::CueOrigin >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::CueSheetType* Arena::CreateMaybeMessage< ::ern411::ern::CueSheetType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::CueSheetType >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::CueThemeType* Arena::CreateMaybeMessage< ::ern411::ern::CueThemeType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::CueThemeType >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::CueUseType* Arena::CreateMaybeMessage< ::ern411::ern::CueUseType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::CueUseType >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::CueVisualPerceptionType* Arena::CreateMaybeMessage< ::ern411::ern::CueVisualPerceptionType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::CueVisualPerceptionType >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::CueVocalType* Arena::CreateMaybeMessage< ::ern411::ern::CueVocalType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::CueVocalType >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::CurrentTerritoryCode* Arena::CreateMaybeMessage< ::ern411::ern::CurrentTerritoryCode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::CurrentTerritoryCode >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::DSP* Arena::CreateMaybeMessage< ::ern411::ern::DSP >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::DSP >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::Deal* Arena::CreateMaybeMessage< ::ern411::ern::Deal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::Deal >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::DealList* Arena::CreateMaybeMessage< ::ern411::ern::DealList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::DealList >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::DealResourceReferenceList* Arena::CreateMaybeMessage< ::ern411::ern::DealResourceReferenceList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::DealResourceReferenceList >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::DealTechnicalResourceDetailsReferenceList* Arena::CreateMaybeMessage< ::ern411::ern::DealTechnicalResourceDetailsReferenceList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::DealTechnicalResourceDetailsReferenceList >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::DealTerms* Arena::CreateMaybeMessage< ::ern411::ern::DealTerms >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::DealTerms >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::DealTermsTechnicalInstantiation* Arena::CreateMaybeMessage< ::ern411::ern::DealTermsTechnicalInstantiation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::DealTermsTechnicalInstantiation >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::Deity* Arena::CreateMaybeMessage< ::ern411::ern::Deity >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::Deity >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::DelegatedUsageRights* Arena::CreateMaybeMessage< ::ern411::ern::DelegatedUsageRights >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::DelegatedUsageRights >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::DescriptionWithTerritory* Arena::CreateMaybeMessage< ::ern411::ern::DescriptionWithTerritory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::DescriptionWithTerritory >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::DetailedCue* Arena::CreateMaybeMessage< ::ern411::ern::DetailedCue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::DetailedCue >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::DetailedCueSheet* Arena::CreateMaybeMessage< ::ern411::ern::DetailedCueSheet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::DetailedCueSheet >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::DetailedCueSheetList* Arena::CreateMaybeMessage< ::ern411::ern::DetailedCueSheetList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::DetailedCueSheetList >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::DetailedHashSum* Arena::CreateMaybeMessage< ::ern411::ern::DetailedHashSum >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::DetailedHashSum >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::DetailedPartyId* Arena::CreateMaybeMessage< ::ern411::ern::DetailedPartyId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::DetailedPartyId >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::DetailedResourceContributor* Arena::CreateMaybeMessage< ::ern411::ern::DetailedResourceContributor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::DetailedResourceContributor >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::DiscoverableUseType* Arena::CreateMaybeMessage< ::ern411::ern::DiscoverableUseType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::DiscoverableUseType >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::DisplayArtist* Arena::CreateMaybeMessage< ::ern411::ern::DisplayArtist >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::DisplayArtist >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::DisplayArtistNameWithDefault* Arena::CreateMaybeMessage< ::ern411::ern::DisplayArtistNameWithDefault >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::DisplayArtistNameWithDefault >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::DisplayArtistRole* Arena::CreateMaybeMessage< ::ern411::ern::DisplayArtistRole >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::DisplayArtistRole >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::DisplayCredits* Arena::CreateMaybeMessage< ::ern411::ern::DisplayCredits >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::DisplayCredits >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::DisplaySubTitle* Arena::CreateMaybeMessage< ::ern411::ern::DisplaySubTitle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::DisplaySubTitle >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::DisplayTitle* Arena::CreateMaybeMessage< ::ern411::ern::DisplayTitle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::DisplayTitle >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::DisplayTitleText* Arena::CreateMaybeMessage< ::ern411::ern::DisplayTitleText >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::DisplayTitleText >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::DistributionChannelPage* Arena::CreateMaybeMessage< ::ern411::ern::DistributionChannelPage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::DistributionChannelPage >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::EventDate* Arena::CreateMaybeMessage< ::ern411::ern::EventDate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::EventDate >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::EventDateTime* Arena::CreateMaybeMessage< ::ern411::ern::EventDateTime >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::EventDateTime >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::EventDateTimeWithoutFlags* Arena::CreateMaybeMessage< ::ern411::ern::EventDateTimeWithoutFlags >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::EventDateTimeWithoutFlags >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::EventDateWithDefault* Arena::CreateMaybeMessage< ::ern411::ern::EventDateWithDefault >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::EventDateWithDefault >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::EventDateWithoutFlags* Arena::CreateMaybeMessage< ::ern411::ern::EventDateWithoutFlags >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::EventDateWithoutFlags >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::Extent* Arena::CreateMaybeMessage< ::ern411::ern::Extent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::Extent >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::ExternalResourceLink* Arena::CreateMaybeMessage< ::ern411::ern::ExternalResourceLink >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::ExternalResourceLink >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::ExternallyLinkedResourceType* Arena::CreateMaybeMessage< ::ern411::ern::ExternallyLinkedResourceType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::ExternallyLinkedResourceType >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::File* Arena::CreateMaybeMessage< ::ern411::ern::File >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::File >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::Fingerprint* Arena::CreateMaybeMessage< ::ern411::ern::Fingerprint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::Fingerprint >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::FingerprintAlgorithmType* Arena::CreateMaybeMessage< ::ern411::ern::FingerprintAlgorithmType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::FingerprintAlgorithmType >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::FirstPublicationDate* Arena::CreateMaybeMessage< ::ern411::ern::FirstPublicationDate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::FirstPublicationDate >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::FrameRate* Arena::CreateMaybeMessage< ::ern411::ern::FrameRate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::FrameRate >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::FulfillmentDateWithTerritory* Arena::CreateMaybeMessage< ::ern411::ern::FulfillmentDateWithTerritory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::FulfillmentDateWithTerritory >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::GenreWithTerritory* Arena::CreateMaybeMessage< ::ern411::ern::GenreWithTerritory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::GenreWithTerritory >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::HashSumAlgorithmType* Arena::CreateMaybeMessage< ::ern411::ern::HashSumAlgorithmType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::HashSumAlgorithmType >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::Image* Arena::CreateMaybeMessage< ::ern411::ern::Image >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::Image >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::ImageCodecType* Arena::CreateMaybeMessage< ::ern411::ern::ImageCodecType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::ImageCodecType >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::ImageType* Arena::CreateMaybeMessage< ::ern411::ern::ImageType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::ImageType >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::InstrumentType* Arena::CreateMaybeMessage< ::ern411::ern::InstrumentType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::InstrumentType >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::IsCredited* Arena::CreateMaybeMessage< ::ern411::ern::IsCredited >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::IsCredited >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::KeywordsWithTerritory* Arena::CreateMaybeMessage< ::ern411::ern::KeywordsWithTerritory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::KeywordsWithTerritory >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::LinkedReleaseResourceReference* Arena::CreateMaybeMessage< ::ern411::ern::LinkedReleaseResourceReference >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::LinkedReleaseResourceReference >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::MarketingComment* Arena::CreateMaybeMessage< ::ern411::ern::MarketingComment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::MarketingComment >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::MessageAuditTrail* Arena::CreateMaybeMessage< ::ern411::ern::MessageAuditTrail >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::MessageAuditTrail >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::MessageAuditTrailEvent* Arena::CreateMaybeMessage< ::ern411::ern::MessageAuditTrailEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::MessageAuditTrailEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::MessageHeader* Arena::CreateMaybeMessage< ::ern411::ern::MessageHeader >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::MessageHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::MessagingPartyWithoutCode* Arena::CreateMaybeMessage< ::ern411::ern::MessagingPartyWithoutCode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::MessagingPartyWithoutCode >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::MusicalWorkId* Arena::CreateMaybeMessage< ::ern411::ern::MusicalWorkId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::MusicalWorkId >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::Name* Arena::CreateMaybeMessage< ::ern411::ern::Name >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::Name >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::NewReleaseMessage* Arena::CreateMaybeMessage< ::ern411::ern::NewReleaseMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::NewReleaseMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::OperatingSystemType* Arena::CreateMaybeMessage< ::ern411::ern::OperatingSystemType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::OperatingSystemType >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::PLine* Arena::CreateMaybeMessage< ::ern411::ern::PLine >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::PLine >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::PLineWithDefault* Arena::CreateMaybeMessage< ::ern411::ern::PLineWithDefault >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::PLineWithDefault >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::ParentalWarningTypeWithTerritory* Arena::CreateMaybeMessage< ::ern411::ern::ParentalWarningTypeWithTerritory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::ParentalWarningTypeWithTerritory >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::Party* Arena::CreateMaybeMessage< ::ern411::ern::Party >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::Party >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::PartyList* Arena::CreateMaybeMessage< ::ern411::ern::PartyList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::PartyList >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::PartyName* Arena::CreateMaybeMessage< ::ern411::ern::PartyName >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::PartyName >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::PartyNameWithTerritory* Arena::CreateMaybeMessage< ::ern411::ern::PartyNameWithTerritory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::PartyNameWithTerritory >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::PartyNameWithoutCode* Arena::CreateMaybeMessage< ::ern411::ern::PartyNameWithoutCode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::PartyNameWithoutCode >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::PartyRelationshipType* Arena::CreateMaybeMessage< ::ern411::ern::PartyRelationshipType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::PartyRelationshipType >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::Percentage* Arena::CreateMaybeMessage< ::ern411::ern::Percentage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::Percentage >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::Period* Arena::CreateMaybeMessage< ::ern411::ern::Period >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::Period >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::PeriodWithoutFlags* Arena::CreateMaybeMessage< ::ern411::ern::PeriodWithoutFlags >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::PeriodWithoutFlags >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::PhysicalReturns* Arena::CreateMaybeMessage< ::ern411::ern::PhysicalReturns >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::PhysicalReturns >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::Prefix* Arena::CreateMaybeMessage< ::ern411::ern::Prefix >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::Prefix >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::PreviewDetails* Arena::CreateMaybeMessage< ::ern411::ern::PreviewDetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::PreviewDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::Price* Arena::CreateMaybeMessage< ::ern411::ern::Price >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::Price >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::PriceInformationWithType* Arena::CreateMaybeMessage< ::ern411::ern::PriceInformationWithType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::PriceInformationWithType >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::PriceType* Arena::CreateMaybeMessage< ::ern411::ern::PriceType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::PriceType >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::PromotionalCode* Arena::CreateMaybeMessage< ::ern411::ern::PromotionalCode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::PromotionalCode >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::ProprietaryId* Arena::CreateMaybeMessage< ::ern411::ern::ProprietaryId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::ProprietaryId >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::PurgeReleaseMessage* Arena::CreateMaybeMessage< ::ern411::ern::PurgeReleaseMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::PurgeReleaseMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::PurgedRelease* Arena::CreateMaybeMessage< ::ern411::ern::PurgedRelease >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::PurgedRelease >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::Purpose* Arena::CreateMaybeMessage< ::ern411::ern::Purpose >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::Purpose >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::Raga* Arena::CreateMaybeMessage< ::ern411::ern::Raga >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::Raga >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::RatingAgency* Arena::CreateMaybeMessage< ::ern411::ern::RatingAgency >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::RatingAgency >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::Reason* Arena::CreateMaybeMessage< ::ern411::ern::Reason >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::Reason >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::RelatedParty* Arena::CreateMaybeMessage< ::ern411::ern::RelatedParty >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::RelatedParty >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::RelatedRelease* Arena::CreateMaybeMessage< ::ern411::ern::RelatedRelease >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::RelatedRelease >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::RelatedResource* Arena::CreateMaybeMessage< ::ern411::ern::RelatedResource >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::RelatedResource >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::Release* Arena::CreateMaybeMessage< ::ern411::ern::Release >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::Release >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::ReleaseDeal* Arena::CreateMaybeMessage< ::ern411::ern::ReleaseDeal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::ReleaseDeal >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::ReleaseId* Arena::CreateMaybeMessage< ::ern411::ern::ReleaseId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::ReleaseId >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::ReleaseLabelReference* Arena::CreateMaybeMessage< ::ern411::ern::ReleaseLabelReference >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::ReleaseLabelReference >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::ReleaseList* Arena::CreateMaybeMessage< ::ern411::ern::ReleaseList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::ReleaseList >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::ReleaseRelationshipType* Arena::CreateMaybeMessage< ::ern411::ern::ReleaseRelationshipType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::ReleaseRelationshipType >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::ReleaseTypeForReleaseNotification* Arena::CreateMaybeMessage< ::ern411::ern::ReleaseTypeForReleaseNotification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::ReleaseTypeForReleaseNotification >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::ResourceContainedResourceReference* Arena::CreateMaybeMessage< ::ern411::ern::ResourceContainedResourceReference >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::ResourceContainedResourceReference >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::ResourceContainedResourceReferenceList* Arena::CreateMaybeMessage< ::ern411::ern::ResourceContainedResourceReferenceList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::ResourceContainedResourceReferenceList >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::ResourceGroup* Arena::CreateMaybeMessage< ::ern411::ern::ResourceGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::ResourceGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::ResourceGroupContentItem* Arena::CreateMaybeMessage< ::ern411::ern::ResourceGroupContentItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::ResourceGroupContentItem >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::ResourceId* Arena::CreateMaybeMessage< ::ern411::ern::ResourceId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::ResourceId >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::ResourceList* Arena::CreateMaybeMessage< ::ern411::ern::ResourceList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::ResourceList >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::ResourceProprietaryId* Arena::CreateMaybeMessage< ::ern411::ern::ResourceProprietaryId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::ResourceProprietaryId >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::ResourceRightsController* Arena::CreateMaybeMessage< ::ern411::ern::ResourceRightsController >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::ResourceRightsController >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::ResourceSubGroup* Arena::CreateMaybeMessage< ::ern411::ern::ResourceSubGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::ResourceSubGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::RightsClaimPolicy* Arena::CreateMaybeMessage< ::ern411::ern::RightsClaimPolicy >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::RightsClaimPolicy >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::SamplingRate* Arena::CreateMaybeMessage< ::ern411::ern::SamplingRate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::SamplingRate >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::SheetMusic* Arena::CreateMaybeMessage< ::ern411::ern::SheetMusic >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::SheetMusic >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::SheetMusicCodecType* Arena::CreateMaybeMessage< ::ern411::ern::SheetMusicCodecType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::SheetMusicCodecType >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::SheetMusicId* Arena::CreateMaybeMessage< ::ern411::ern::SheetMusicId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::SheetMusicId >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::SheetMusicType* Arena::CreateMaybeMessage< ::ern411::ern::SheetMusicType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::SheetMusicType >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::SimpleRightsType* Arena::CreateMaybeMessage< ::ern411::ern::SimpleRightsType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::SimpleRightsType >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::Software* Arena::CreateMaybeMessage< ::ern411::ern::Software >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::Software >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::SoftwareType* Arena::CreateMaybeMessage< ::ern411::ern::SoftwareType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::SoftwareType >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::SoundRecording* Arena::CreateMaybeMessage< ::ern411::ern::SoundRecording >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::SoundRecording >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::SoundRecordingId* Arena::CreateMaybeMessage< ::ern411::ern::SoundRecordingId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::SoundRecordingId >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::SoundRecordingPreviewDetails* Arena::CreateMaybeMessage< ::ern411::ern::SoundRecordingPreviewDetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::SoundRecordingPreviewDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::SoundRecordingType* Arena::CreateMaybeMessage< ::ern411::ern::SoundRecordingType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::SoundRecordingType >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::SupplementalDocumentList* Arena::CreateMaybeMessage< ::ern411::ern::SupplementalDocumentList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::SupplementalDocumentList >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::SynopsisWithTerritory* Arena::CreateMaybeMessage< ::ern411::ern::SynopsisWithTerritory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::SynopsisWithTerritory >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::Tala* Arena::CreateMaybeMessage< ::ern411::ern::Tala >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::Tala >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::TechnicalImageDetails* Arena::CreateMaybeMessage< ::ern411::ern::TechnicalImageDetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::TechnicalImageDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::TechnicalSheetMusicDetails* Arena::CreateMaybeMessage< ::ern411::ern::TechnicalSheetMusicDetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::TechnicalSheetMusicDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::TechnicalSoftwareDetails* Arena::CreateMaybeMessage< ::ern411::ern::TechnicalSoftwareDetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::TechnicalSoftwareDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::TechnicalSoundRecordingDetails* Arena::CreateMaybeMessage< ::ern411::ern::TechnicalSoundRecordingDetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::TechnicalSoundRecordingDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::TechnicalTextDetails* Arena::CreateMaybeMessage< ::ern411::ern::TechnicalTextDetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::TechnicalTextDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::TechnicalVideoDetails* Arena::CreateMaybeMessage< ::ern411::ern::TechnicalVideoDetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::TechnicalVideoDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::Text* Arena::CreateMaybeMessage< ::ern411::ern::Text >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::Text >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::TextCodecType* Arena::CreateMaybeMessage< ::ern411::ern::TextCodecType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::TextCodecType >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::TextId* Arena::CreateMaybeMessage< ::ern411::ern::TextId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::TextId >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::TextType* Arena::CreateMaybeMessage< ::ern411::ern::TextType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::TextType >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::Timing* Arena::CreateMaybeMessage< ::ern411::ern::Timing >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::Timing >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::Title* Arena::CreateMaybeMessage< ::ern411::ern::Title >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::Title >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::TitleDisplayInformation* Arena::CreateMaybeMessage< ::ern411::ern::TitleDisplayInformation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::TitleDisplayInformation >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::TrackRelease* Arena::CreateMaybeMessage< ::ern411::ern::TrackRelease >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::TrackRelease >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::UseType* Arena::CreateMaybeMessage< ::ern411::ern::UseType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::UseType >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::ValidityPeriod* Arena::CreateMaybeMessage< ::ern411::ern::ValidityPeriod >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::ValidityPeriod >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::VersionType* Arena::CreateMaybeMessage< ::ern411::ern::VersionType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::VersionType >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::Video* Arena::CreateMaybeMessage< ::ern411::ern::Video >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::Video >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::VideoCodecType* Arena::CreateMaybeMessage< ::ern411::ern::VideoCodecType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::VideoCodecType >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::VideoId* Arena::CreateMaybeMessage< ::ern411::ern::VideoId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::VideoId >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::VideoType* Arena::CreateMaybeMessage< ::ern411::ern::VideoType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::VideoType >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::WorkRightsController* Arena::CreateMaybeMessage< ::ern411::ern::WorkRightsController >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::WorkRightsController >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::ddex_IsoDate* Arena::CreateMaybeMessage< ::ern411::ern::ddex_IsoDate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::ddex_IsoDate >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::ddex_LocalPartyAnchorReference* Arena::CreateMaybeMessage< ::ern411::ern::ddex_LocalPartyAnchorReference >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::ddex_LocalPartyAnchorReference >(arena);
}
template<> PROTOBUF_NOINLINE ::ern411::ern::ddex_LocalResourceAnchorReference* Arena::CreateMaybeMessage< ::ern411::ern::ddex_LocalResourceAnchorReference >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ern411::ern::ddex_LocalResourceAnchorReference >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

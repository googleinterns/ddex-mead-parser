// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ddex-xmltoproto/generated/mead101/mead.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "ddex-xmltoproto/generated/mead101/avs.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[160]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
namespace mead101 {
namespace mead {
class AbsolutePitch;
class AbsolutePitchDefaultTypeInternal;
extern AbsolutePitchDefaultTypeInternal _AbsolutePitch_default_instance_;
class AllTerritoryCode;
class AllTerritoryCodeDefaultTypeInternal;
extern AllTerritoryCodeDefaultTypeInternal _AllTerritoryCode_default_instance_;
class AlternativeTitle;
class AlternativeTitleDefaultTypeInternal;
extern AlternativeTitleDefaultTypeInternal _AlternativeTitle_default_instance_;
class Annotation;
class AnnotationDefaultTypeInternal;
extern AnnotationDefaultTypeInternal _Annotation_default_instance_;
class ArtistType;
class ArtistTypeDefaultTypeInternal;
extern ArtistTypeDefaultTypeInternal _ArtistType_default_instance_;
class ArtistTypeValue;
class ArtistTypeValueDefaultTypeInternal;
extern ArtistTypeValueDefaultTypeInternal _ArtistTypeValue_default_instance_;
class ArtisticInfluence;
class ArtisticInfluenceDefaultTypeInternal;
extern ArtisticInfluenceDefaultTypeInternal _ArtisticInfluence_default_instance_;
class Award;
class AwardDefaultTypeInternal;
extern AwardDefaultTypeInternal _Award_default_instance_;
class AwardForParty;
class AwardForPartyDefaultTypeInternal;
extern AwardForPartyDefaultTypeInternal _AwardForParty_default_instance_;
class BeatsPerMinute;
class BeatsPerMinuteDefaultTypeInternal;
extern BeatsPerMinuteDefaultTypeInternal _BeatsPerMinute_default_instance_;
class Biography;
class BiographyDefaultTypeInternal;
extern BiographyDefaultTypeInternal _Biography_default_instance_;
class BiographyText;
class BiographyTextDefaultTypeInternal;
extern BiographyTextDefaultTypeInternal _BiographyText_default_instance_;
class CatalogNumber;
class CatalogNumberDefaultTypeInternal;
extern CatalogNumberDefaultTypeInternal _CatalogNumber_default_instance_;
class Category;
class CategoryDefaultTypeInternal;
extern CategoryDefaultTypeInternal _Category_default_instance_;
class ChartEntry;
class ChartEntryDefaultTypeInternal;
extern ChartEntryDefaultTypeInternal _ChartEntry_default_instance_;
class ChartName;
class ChartNameDefaultTypeInternal;
extern ChartNameDefaultTypeInternal _ChartName_default_instance_;
class ChildWorkHierarchy;
class ChildWorkHierarchyDefaultTypeInternal;
extern ChildWorkHierarchyDefaultTypeInternal _ChildWorkHierarchy_default_instance_;
class ClassicalPeriod;
class ClassicalPeriodDefaultTypeInternal;
extern ClassicalPeriodDefaultTypeInternal _ClassicalPeriod_default_instance_;
class CommentaryNote;
class CommentaryNoteDefaultTypeInternal;
extern CommentaryNoteDefaultTypeInternal _CommentaryNote_default_instance_;
class CommentaryNoteType;
class CommentaryNoteTypeDefaultTypeInternal;
extern CommentaryNoteTypeDefaultTypeInternal _CommentaryNoteType_default_instance_;
class Content;
class ContentDefaultTypeInternal;
extern ContentDefaultTypeInternal _Content_default_instance_;
class CurrentTerritoryCode;
class CurrentTerritoryCodeDefaultTypeInternal;
extern CurrentTerritoryCodeDefaultTypeInternal _CurrentTerritoryCode_default_instance_;
class DanceAndRhythmStyle;
class DanceAndRhythmStyleDefaultTypeInternal;
extern DanceAndRhythmStyleDefaultTypeInternal _DanceAndRhythmStyle_default_instance_;
class DanceAndRhythmStyleValue;
class DanceAndRhythmStyleValueDefaultTypeInternal;
extern DanceAndRhythmStyleValueDefaultTypeInternal _DanceAndRhythmStyleValue_default_instance_;
class Date;
class DateDefaultTypeInternal;
extern DateDefaultTypeInternal _Date_default_instance_;
class DateTime;
class DateTimeDefaultTypeInternal;
extern DateTimeDefaultTypeInternal _DateTime_default_instance_;
class DerivedRecording;
class DerivedRecordingDefaultTypeInternal;
extern DerivedRecordingDefaultTypeInternal _DerivedRecording_default_instance_;
class DetailedHashSum;
class DetailedHashSumDefaultTypeInternal;
extern DetailedHashSumDefaultTypeInternal _DetailedHashSum_default_instance_;
class DetailedPartyId;
class DetailedPartyIdDefaultTypeInternal;
extern DetailedPartyIdDefaultTypeInternal _DetailedPartyId_default_instance_;
class DisplayArtist;
class DisplayArtistDefaultTypeInternal;
extern DisplayArtistDefaultTypeInternal _DisplayArtist_default_instance_;
class DisplayArtistNameWithDefault;
class DisplayArtistNameWithDefaultDefaultTypeInternal;
extern DisplayArtistNameWithDefaultDefaultTypeInternal _DisplayArtistNameWithDefault_default_instance_;
class DisplayArtistNameWithPronunciation;
class DisplayArtistNameWithPronunciationDefaultTypeInternal;
extern DisplayArtistNameWithPronunciationDefaultTypeInternal _DisplayArtistNameWithPronunciation_default_instance_;
class DisplaySubTitle;
class DisplaySubTitleDefaultTypeInternal;
extern DisplaySubTitleDefaultTypeInternal _DisplaySubTitle_default_instance_;
class DisplayTitle;
class DisplayTitleDefaultTypeInternal;
extern DisplayTitleDefaultTypeInternal _DisplayTitle_default_instance_;
class Duration;
class DurationDefaultTypeInternal;
extern DurationDefaultTypeInternal _Duration_default_instance_;
class Entry;
class EntryDefaultTypeInternal;
extern EntryDefaultTypeInternal _Entry_default_instance_;
class Epoch;
class EpochDefaultTypeInternal;
extern EpochDefaultTypeInternal _Epoch_default_instance_;
class EventDate;
class EventDateDefaultTypeInternal;
extern EventDateDefaultTypeInternal _EventDate_default_instance_;
class EventDateTime;
class EventDateTimeDefaultTypeInternal;
extern EventDateTimeDefaultTypeInternal _EventDateTime_default_instance_;
class EventDateWithoutFlags;
class EventDateWithoutFlagsDefaultTypeInternal;
extern EventDateWithoutFlagsDefaultTypeInternal _EventDateWithoutFlags_default_instance_;
class Feed;
class FeedDefaultTypeInternal;
extern FeedDefaultTypeInternal _Feed_default_instance_;
class File;
class FileDefaultTypeInternal;
extern FileDefaultTypeInternal _File_default_instance_;
class Flag;
class FlagDefaultTypeInternal;
extern FlagDefaultTypeInternal _Flag_default_instance_;
class FocusTrack;
class FocusTrackDefaultTypeInternal;
extern FocusTrackDefaultTypeInternal _FocusTrack_default_instance_;
class Form;
class FormDefaultTypeInternal;
extern FormDefaultTypeInternal _Form_default_instance_;
class FormValue;
class FormValueDefaultTypeInternal;
extern FormValueDefaultTypeInternal _FormValue_default_instance_;
class Generator;
class GeneratorDefaultTypeInternal;
extern GeneratorDefaultTypeInternal _Generator_default_instance_;
class GenreCategory;
class GenreCategoryDefaultTypeInternal;
extern GenreCategoryDefaultTypeInternal _GenreCategory_default_instance_;
class GenreCategoryValue;
class GenreCategoryValueDefaultTypeInternal;
extern GenreCategoryValueDefaultTypeInternal _GenreCategoryValue_default_instance_;
class Harmony;
class HarmonyDefaultTypeInternal;
extern HarmonyDefaultTypeInternal _Harmony_default_instance_;
class HarmonyModulation;
class HarmonyModulationDefaultTypeInternal;
extern HarmonyModulationDefaultTypeInternal _HarmonyModulation_default_instance_;
class HashSumAlgorithmType;
class HashSumAlgorithmTypeDefaultTypeInternal;
extern HashSumAlgorithmTypeDefaultTypeInternal _HashSumAlgorithmType_default_instance_;
class HistoricChartingInformation;
class HistoricChartingInformationDefaultTypeInternal;
extern HistoricChartingInformationDefaultTypeInternal _HistoricChartingInformation_default_instance_;
class HistoricChartingInformationForParty;
class HistoricChartingInformationForPartyDefaultTypeInternal;
extern HistoricChartingInformationForPartyDefaultTypeInternal _HistoricChartingInformationForParty_default_instance_;
class Icon;
class IconDefaultTypeInternal;
extern IconDefaultTypeInternal _Icon_default_instance_;
class Id;
class IdDefaultTypeInternal;
extern IdDefaultTypeInternal _Id_default_instance_;
class Image;
class ImageDefaultTypeInternal;
extern ImageDefaultTypeInternal _Image_default_instance_;
class ImageType;
class ImageTypeDefaultTypeInternal;
extern ImageTypeDefaultTypeInternal _ImageType_default_instance_;
class Instrument;
class InstrumentDefaultTypeInternal;
extern InstrumentDefaultTypeInternal _Instrument_default_instance_;
class InstrumentUsed;
class InstrumentUsedDefaultTypeInternal;
extern InstrumentUsedDefaultTypeInternal _InstrumentUsed_default_instance_;
class InstrumentValue;
class InstrumentValueDefaultTypeInternal;
extern InstrumentValueDefaultTypeInternal _InstrumentValue_default_instance_;
class Link;
class LinkDefaultTypeInternal;
extern LinkDefaultTypeInternal _Link_default_instance_;
class LocationAndDateOfSession;
class LocationAndDateOfSessionDefaultTypeInternal;
extern LocationAndDateOfSessionDefaultTypeInternal _LocationAndDateOfSession_default_instance_;
class Logo;
class LogoDefaultTypeInternal;
extern LogoDefaultTypeInternal _Logo_default_instance_;
class Lyrics;
class LyricsDefaultTypeInternal;
extern LyricsDefaultTypeInternal _Lyrics_default_instance_;
class LyricsText;
class LyricsTextDefaultTypeInternal;
extern LyricsTextDefaultTypeInternal _LyricsText_default_instance_;
class MeadMessage;
class MeadMessageDefaultTypeInternal;
extern MeadMessageDefaultTypeInternal _MeadMessage_default_instance_;
class MessageAuditTrail;
class MessageAuditTrailDefaultTypeInternal;
extern MessageAuditTrailDefaultTypeInternal _MessageAuditTrail_default_instance_;
class MessageAuditTrailEvent;
class MessageAuditTrailEventDefaultTypeInternal;
extern MessageAuditTrailEventDefaultTypeInternal _MessageAuditTrailEvent_default_instance_;
class MessageHeader;
class MessageHeaderDefaultTypeInternal;
extern MessageHeaderDefaultTypeInternal _MessageHeader_default_instance_;
class MessagingPartyWithoutCode;
class MessagingPartyWithoutCodeDefaultTypeInternal;
extern MessagingPartyWithoutCodeDefaultTypeInternal _MessagingPartyWithoutCode_default_instance_;
class MetadataSource;
class MetadataSourceDefaultTypeInternal;
extern MetadataSourceDefaultTypeInternal _MetadataSource_default_instance_;
class MetadataSourceList;
class MetadataSourceListDefaultTypeInternal;
extern MetadataSourceListDefaultTypeInternal _MetadataSourceList_default_instance_;
class MetadataSourceType;
class MetadataSourceTypeDefaultTypeInternal;
extern MetadataSourceTypeDefaultTypeInternal _MetadataSourceType_default_instance_;
class Meter;
class MeterDefaultTypeInternal;
extern MeterDefaultTypeInternal _Meter_default_instance_;
class Mode;
class ModeDefaultTypeInternal;
extern ModeDefaultTypeInternal _Mode_default_instance_;
class Modulation;
class ModulationDefaultTypeInternal;
extern ModulationDefaultTypeInternal _Modulation_default_instance_;
class Mood;
class MoodDefaultTypeInternal;
extern MoodDefaultTypeInternal _Mood_default_instance_;
class MoodValue;
class MoodValueDefaultTypeInternal;
extern MoodValueDefaultTypeInternal _MoodValue_default_instance_;
class MusicalWorkId;
class MusicalWorkIdDefaultTypeInternal;
extern MusicalWorkIdDefaultTypeInternal _MusicalWorkId_default_instance_;
class Name;
class NameDefaultTypeInternal;
extern NameDefaultTypeInternal _Name_default_instance_;
class NameWithPronunciation;
class NameWithPronunciationDefaultTypeInternal;
extern NameWithPronunciationDefaultTypeInternal _NameWithPronunciation_default_instance_;
class NameWithPronunciationAndScriptCode;
class NameWithPronunciationAndScriptCodeDefaultTypeInternal;
extern NameWithPronunciationAndScriptCodeDefaultTypeInternal _NameWithPronunciationAndScriptCode_default_instance_;
class Party;
class PartyDefaultTypeInternal;
extern PartyDefaultTypeInternal _Party_default_instance_;
class PartyDescriptor;
class PartyDescriptorDefaultTypeInternal;
extern PartyDescriptorDefaultTypeInternal _PartyDescriptor_default_instance_;
class PartyInformation;
class PartyInformationDefaultTypeInternal;
extern PartyInformationDefaultTypeInternal _PartyInformation_default_instance_;
class PartyInformationList;
class PartyInformationListDefaultTypeInternal;
extern PartyInformationListDefaultTypeInternal _PartyInformationList_default_instance_;
class PartyName;
class PartyNameDefaultTypeInternal;
extern PartyNameDefaultTypeInternal _PartyName_default_instance_;
class PartyNameWithPronunciation;
class PartyNameWithPronunciationDefaultTypeInternal;
extern PartyNameWithPronunciationDefaultTypeInternal _PartyNameWithPronunciation_default_instance_;
class PartyNameWithTerritory;
class PartyNameWithTerritoryDefaultTypeInternal;
extern PartyNameWithTerritoryDefaultTypeInternal _PartyNameWithTerritory_default_instance_;
class PartyNameWithoutCode;
class PartyNameWithoutCodeDefaultTypeInternal;
extern PartyNameWithoutCodeDefaultTypeInternal _PartyNameWithoutCode_default_instance_;
class PartyWithNames;
class PartyWithNamesDefaultTypeInternal;
extern PartyWithNamesDefaultTypeInternal _PartyWithNames_default_instance_;
class PartyWithRole;
class PartyWithRoleDefaultTypeInternal;
extern PartyWithRoleDefaultTypeInternal _PartyWithRole_default_instance_;
class Period;
class PeriodDefaultTypeInternal;
extern PeriodDefaultTypeInternal _Period_default_instance_;
class PeriodValue;
class PeriodValueDefaultTypeInternal;
extern PeriodValueDefaultTypeInternal _PeriodValue_default_instance_;
class PeriodWithTime;
class PeriodWithTimeDefaultTypeInternal;
extern PeriodWithTimeDefaultTypeInternal _PeriodWithTime_default_instance_;
class Person;
class PersonDefaultTypeInternal;
extern PersonDefaultTypeInternal _Person_default_instance_;
class Pronunciation;
class PronunciationDefaultTypeInternal;
extern PronunciationDefaultTypeInternal _Pronunciation_default_instance_;
class ProprietaryId;
class ProprietaryIdDefaultTypeInternal;
extern ProprietaryIdDefaultTypeInternal _ProprietaryId_default_instance_;
class Pseudonym;
class PseudonymDefaultTypeInternal;
extern PseudonymDefaultTypeInternal _Pseudonym_default_instance_;
class RecordingPart;
class RecordingPartDefaultTypeInternal;
extern RecordingPartDefaultTypeInternal _RecordingPart_default_instance_;
class RecordingPartType;
class RecordingPartTypeDefaultTypeInternal;
extern RecordingPartTypeDefaultTypeInternal _RecordingPartType_default_instance_;
class RelatedCreation;
class RelatedCreationDefaultTypeInternal;
extern RelatedCreationDefaultTypeInternal _RelatedCreation_default_instance_;
class RelatedResource;
class RelatedResourceDefaultTypeInternal;
extern RelatedResourceDefaultTypeInternal _RelatedResource_default_instance_;
class RelatedResourceType;
class RelatedResourceTypeDefaultTypeInternal;
extern RelatedResourceTypeDefaultTypeInternal _RelatedResourceType_default_instance_;
class RelatedWork;
class RelatedWorkDefaultTypeInternal;
extern RelatedWorkDefaultTypeInternal _RelatedWork_default_instance_;
class Release;
class ReleaseDefaultTypeInternal;
extern ReleaseDefaultTypeInternal _Release_default_instance_;
class ReleaseId;
class ReleaseIdDefaultTypeInternal;
extern ReleaseIdDefaultTypeInternal _ReleaseId_default_instance_;
class ReleaseInformation;
class ReleaseInformationDefaultTypeInternal;
extern ReleaseInformationDefaultTypeInternal _ReleaseInformation_default_instance_;
class ReleaseInformationList;
class ReleaseInformationListDefaultTypeInternal;
extern ReleaseInformationListDefaultTypeInternal _ReleaseInformationList_default_instance_;
class ReleaseSummary;
class ReleaseSummaryDefaultTypeInternal;
extern ReleaseSummaryDefaultTypeInternal _ReleaseSummary_default_instance_;
class ReleaseTitle;
class ReleaseTitleDefaultTypeInternal;
extern ReleaseTitleDefaultTypeInternal _ReleaseTitle_default_instance_;
class Resource;
class ResourceDefaultTypeInternal;
extern ResourceDefaultTypeInternal _Resource_default_instance_;
class ResourceContributorRole;
class ResourceContributorRoleDefaultTypeInternal;
extern ResourceContributorRoleDefaultTypeInternal _ResourceContributorRole_default_instance_;
class ResourceId;
class ResourceIdDefaultTypeInternal;
extern ResourceIdDefaultTypeInternal _ResourceId_default_instance_;
class ResourceInformation;
class ResourceInformationDefaultTypeInternal;
extern ResourceInformationDefaultTypeInternal _ResourceInformation_default_instance_;
class ResourceInformationList;
class ResourceInformationListDefaultTypeInternal;
extern ResourceInformationListDefaultTypeInternal _ResourceInformationList_default_instance_;
class ResourceRelationship;
class ResourceRelationshipDefaultTypeInternal;
extern ResourceRelationshipDefaultTypeInternal _ResourceRelationship_default_instance_;
class ResourceRelationshipType;
class ResourceRelationshipTypeDefaultTypeInternal;
extern ResourceRelationshipTypeDefaultTypeInternal _ResourceRelationshipType_default_instance_;
class ResourceSummary;
class ResourceSummaryDefaultTypeInternal;
extern ResourceSummaryDefaultTypeInternal _ResourceSummary_default_instance_;
class ResourceTitle;
class ResourceTitleDefaultTypeInternal;
extern ResourceTitleDefaultTypeInternal _ResourceTitle_default_instance_;
class RootChordNote;
class RootChordNoteDefaultTypeInternal;
extern RootChordNoteDefaultTypeInternal _RootChordNote_default_instance_;
class RootChordQuality;
class RootChordQualityDefaultTypeInternal;
extern RootChordQualityDefaultTypeInternal _RootChordQuality_default_instance_;
class Sample;
class SampleDefaultTypeInternal;
extern SampleDefaultTypeInternal _Sample_default_instance_;
class SampleFeature;
class SampleFeatureDefaultTypeInternal;
extern SampleFeatureDefaultTypeInternal _SampleFeature_default_instance_;
class SessionType;
class SessionTypeDefaultTypeInternal;
extern SessionTypeDefaultTypeInternal _SessionType_default_instance_;
class SimilarParty;
class SimilarPartyDefaultTypeInternal;
extern SimilarPartyDefaultTypeInternal _SimilarParty_default_instance_;
class SimilarRelease;
class SimilarReleaseDefaultTypeInternal;
extern SimilarReleaseDefaultTypeInternal _SimilarRelease_default_instance_;
class SimilarResource;
class SimilarResourceDefaultTypeInternal;
extern SimilarResourceDefaultTypeInternal _SimilarResource_default_instance_;
class SimilarWork;
class SimilarWorkDefaultTypeInternal;
extern SimilarWorkDefaultTypeInternal _SimilarWork_default_instance_;
class Source;
class SourceDefaultTypeInternal;
extern SourceDefaultTypeInternal _Source_default_instance_;
class SubGenreCategory;
class SubGenreCategoryDefaultTypeInternal;
extern SubGenreCategoryDefaultTypeInternal _SubGenreCategory_default_instance_;
class SubGenreCategoryValue;
class SubGenreCategoryValueDefaultTypeInternal;
extern SubGenreCategoryValueDefaultTypeInternal _SubGenreCategoryValue_default_instance_;
class Tempo;
class TempoDefaultTypeInternal;
extern TempoDefaultTypeInternal _Tempo_default_instance_;
class TempoValue;
class TempoValueDefaultTypeInternal;
extern TempoValueDefaultTypeInternal _TempoValue_default_instance_;
class Text;
class TextDefaultTypeInternal;
extern TextDefaultTypeInternal _Text_default_instance_;
class TextWithFormat;
class TextWithFormatDefaultTypeInternal;
extern TextWithFormatDefaultTypeInternal _TextWithFormat_default_instance_;
class TextWithoutTerritory;
class TextWithoutTerritoryDefaultTypeInternal;
extern TextWithoutTerritoryDefaultTypeInternal _TextWithoutTerritory_default_instance_;
class Theme;
class ThemeDefaultTypeInternal;
extern ThemeDefaultTypeInternal _Theme_default_instance_;
class ThemeValue;
class ThemeValueDefaultTypeInternal;
extern ThemeValueDefaultTypeInternal _ThemeValue_default_instance_;
class TimeSignature;
class TimeSignatureDefaultTypeInternal;
extern TimeSignatureDefaultTypeInternal _TimeSignature_default_instance_;
class TimeSignatureModulation;
class TimeSignatureModulationDefaultTypeInternal;
extern TimeSignatureModulationDefaultTypeInternal _TimeSignatureModulation_default_instance_;
class Timing;
class TimingDefaultTypeInternal;
extern TimingDefaultTypeInternal _Timing_default_instance_;
class TitleTextWithPronunciation;
class TitleTextWithPronunciationDefaultTypeInternal;
extern TitleTextWithPronunciationDefaultTypeInternal _TitleTextWithPronunciation_default_instance_;
class TitleWithPronunciation;
class TitleWithPronunciationDefaultTypeInternal;
extern TitleWithPronunciationDefaultTypeInternal _TitleWithPronunciation_default_instance_;
class URI;
class URIDefaultTypeInternal;
extern URIDefaultTypeInternal _URI_default_instance_;
class Usage;
class UsageDefaultTypeInternal;
extern UsageDefaultTypeInternal _Usage_default_instance_;
class UsagePeriod;
class UsagePeriodDefaultTypeInternal;
extern UsagePeriodDefaultTypeInternal _UsagePeriod_default_instance_;
class UsedMusicalWork;
class UsedMusicalWorkDefaultTypeInternal;
extern UsedMusicalWorkDefaultTypeInternal _UsedMusicalWork_default_instance_;
class Venue;
class VenueDefaultTypeInternal;
extern VenueDefaultTypeInternal _Venue_default_instance_;
class VocalRegister;
class VocalRegisterDefaultTypeInternal;
extern VocalRegisterDefaultTypeInternal _VocalRegister_default_instance_;
class VocalRegisterValue;
class VocalRegisterValueDefaultTypeInternal;
extern VocalRegisterValueDefaultTypeInternal _VocalRegisterValue_default_instance_;
class Work;
class WorkDefaultTypeInternal;
extern WorkDefaultTypeInternal _Work_default_instance_;
class WorkHierarchy;
class WorkHierarchyDefaultTypeInternal;
extern WorkHierarchyDefaultTypeInternal _WorkHierarchy_default_instance_;
class WorkInformation;
class WorkInformationDefaultTypeInternal;
extern WorkInformationDefaultTypeInternal _WorkInformation_default_instance_;
class WorkInformationList;
class WorkInformationListDefaultTypeInternal;
extern WorkInformationListDefaultTypeInternal _WorkInformationList_default_instance_;
class WorkRelationshipType;
class WorkRelationshipTypeDefaultTypeInternal;
extern WorkRelationshipTypeDefaultTypeInternal _WorkRelationshipType_default_instance_;
class WorkSummary;
class WorkSummaryDefaultTypeInternal;
extern WorkSummaryDefaultTypeInternal _WorkSummary_default_instance_;
class WorkTitle;
class WorkTitleDefaultTypeInternal;
extern WorkTitleDefaultTypeInternal _WorkTitle_default_instance_;
class ddex_IsoDate;
class ddex_IsoDateDefaultTypeInternal;
extern ddex_IsoDateDefaultTypeInternal _ddex_IsoDate_default_instance_;
}  // namespace mead
}  // namespace mead101
PROTOBUF_NAMESPACE_OPEN
template<> ::mead101::mead::AbsolutePitch* Arena::CreateMaybeMessage<::mead101::mead::AbsolutePitch>(Arena*);
template<> ::mead101::mead::AllTerritoryCode* Arena::CreateMaybeMessage<::mead101::mead::AllTerritoryCode>(Arena*);
template<> ::mead101::mead::AlternativeTitle* Arena::CreateMaybeMessage<::mead101::mead::AlternativeTitle>(Arena*);
template<> ::mead101::mead::Annotation* Arena::CreateMaybeMessage<::mead101::mead::Annotation>(Arena*);
template<> ::mead101::mead::ArtistType* Arena::CreateMaybeMessage<::mead101::mead::ArtistType>(Arena*);
template<> ::mead101::mead::ArtistTypeValue* Arena::CreateMaybeMessage<::mead101::mead::ArtistTypeValue>(Arena*);
template<> ::mead101::mead::ArtisticInfluence* Arena::CreateMaybeMessage<::mead101::mead::ArtisticInfluence>(Arena*);
template<> ::mead101::mead::Award* Arena::CreateMaybeMessage<::mead101::mead::Award>(Arena*);
template<> ::mead101::mead::AwardForParty* Arena::CreateMaybeMessage<::mead101::mead::AwardForParty>(Arena*);
template<> ::mead101::mead::BeatsPerMinute* Arena::CreateMaybeMessage<::mead101::mead::BeatsPerMinute>(Arena*);
template<> ::mead101::mead::Biography* Arena::CreateMaybeMessage<::mead101::mead::Biography>(Arena*);
template<> ::mead101::mead::BiographyText* Arena::CreateMaybeMessage<::mead101::mead::BiographyText>(Arena*);
template<> ::mead101::mead::CatalogNumber* Arena::CreateMaybeMessage<::mead101::mead::CatalogNumber>(Arena*);
template<> ::mead101::mead::Category* Arena::CreateMaybeMessage<::mead101::mead::Category>(Arena*);
template<> ::mead101::mead::ChartEntry* Arena::CreateMaybeMessage<::mead101::mead::ChartEntry>(Arena*);
template<> ::mead101::mead::ChartName* Arena::CreateMaybeMessage<::mead101::mead::ChartName>(Arena*);
template<> ::mead101::mead::ChildWorkHierarchy* Arena::CreateMaybeMessage<::mead101::mead::ChildWorkHierarchy>(Arena*);
template<> ::mead101::mead::ClassicalPeriod* Arena::CreateMaybeMessage<::mead101::mead::ClassicalPeriod>(Arena*);
template<> ::mead101::mead::CommentaryNote* Arena::CreateMaybeMessage<::mead101::mead::CommentaryNote>(Arena*);
template<> ::mead101::mead::CommentaryNoteType* Arena::CreateMaybeMessage<::mead101::mead::CommentaryNoteType>(Arena*);
template<> ::mead101::mead::Content* Arena::CreateMaybeMessage<::mead101::mead::Content>(Arena*);
template<> ::mead101::mead::CurrentTerritoryCode* Arena::CreateMaybeMessage<::mead101::mead::CurrentTerritoryCode>(Arena*);
template<> ::mead101::mead::DanceAndRhythmStyle* Arena::CreateMaybeMessage<::mead101::mead::DanceAndRhythmStyle>(Arena*);
template<> ::mead101::mead::DanceAndRhythmStyleValue* Arena::CreateMaybeMessage<::mead101::mead::DanceAndRhythmStyleValue>(Arena*);
template<> ::mead101::mead::Date* Arena::CreateMaybeMessage<::mead101::mead::Date>(Arena*);
template<> ::mead101::mead::DateTime* Arena::CreateMaybeMessage<::mead101::mead::DateTime>(Arena*);
template<> ::mead101::mead::DerivedRecording* Arena::CreateMaybeMessage<::mead101::mead::DerivedRecording>(Arena*);
template<> ::mead101::mead::DetailedHashSum* Arena::CreateMaybeMessage<::mead101::mead::DetailedHashSum>(Arena*);
template<> ::mead101::mead::DetailedPartyId* Arena::CreateMaybeMessage<::mead101::mead::DetailedPartyId>(Arena*);
template<> ::mead101::mead::DisplayArtist* Arena::CreateMaybeMessage<::mead101::mead::DisplayArtist>(Arena*);
template<> ::mead101::mead::DisplayArtistNameWithDefault* Arena::CreateMaybeMessage<::mead101::mead::DisplayArtistNameWithDefault>(Arena*);
template<> ::mead101::mead::DisplayArtistNameWithPronunciation* Arena::CreateMaybeMessage<::mead101::mead::DisplayArtistNameWithPronunciation>(Arena*);
template<> ::mead101::mead::DisplaySubTitle* Arena::CreateMaybeMessage<::mead101::mead::DisplaySubTitle>(Arena*);
template<> ::mead101::mead::DisplayTitle* Arena::CreateMaybeMessage<::mead101::mead::DisplayTitle>(Arena*);
template<> ::mead101::mead::Duration* Arena::CreateMaybeMessage<::mead101::mead::Duration>(Arena*);
template<> ::mead101::mead::Entry* Arena::CreateMaybeMessage<::mead101::mead::Entry>(Arena*);
template<> ::mead101::mead::Epoch* Arena::CreateMaybeMessage<::mead101::mead::Epoch>(Arena*);
template<> ::mead101::mead::EventDate* Arena::CreateMaybeMessage<::mead101::mead::EventDate>(Arena*);
template<> ::mead101::mead::EventDateTime* Arena::CreateMaybeMessage<::mead101::mead::EventDateTime>(Arena*);
template<> ::mead101::mead::EventDateWithoutFlags* Arena::CreateMaybeMessage<::mead101::mead::EventDateWithoutFlags>(Arena*);
template<> ::mead101::mead::Feed* Arena::CreateMaybeMessage<::mead101::mead::Feed>(Arena*);
template<> ::mead101::mead::File* Arena::CreateMaybeMessage<::mead101::mead::File>(Arena*);
template<> ::mead101::mead::Flag* Arena::CreateMaybeMessage<::mead101::mead::Flag>(Arena*);
template<> ::mead101::mead::FocusTrack* Arena::CreateMaybeMessage<::mead101::mead::FocusTrack>(Arena*);
template<> ::mead101::mead::Form* Arena::CreateMaybeMessage<::mead101::mead::Form>(Arena*);
template<> ::mead101::mead::FormValue* Arena::CreateMaybeMessage<::mead101::mead::FormValue>(Arena*);
template<> ::mead101::mead::Generator* Arena::CreateMaybeMessage<::mead101::mead::Generator>(Arena*);
template<> ::mead101::mead::GenreCategory* Arena::CreateMaybeMessage<::mead101::mead::GenreCategory>(Arena*);
template<> ::mead101::mead::GenreCategoryValue* Arena::CreateMaybeMessage<::mead101::mead::GenreCategoryValue>(Arena*);
template<> ::mead101::mead::Harmony* Arena::CreateMaybeMessage<::mead101::mead::Harmony>(Arena*);
template<> ::mead101::mead::HarmonyModulation* Arena::CreateMaybeMessage<::mead101::mead::HarmonyModulation>(Arena*);
template<> ::mead101::mead::HashSumAlgorithmType* Arena::CreateMaybeMessage<::mead101::mead::HashSumAlgorithmType>(Arena*);
template<> ::mead101::mead::HistoricChartingInformation* Arena::CreateMaybeMessage<::mead101::mead::HistoricChartingInformation>(Arena*);
template<> ::mead101::mead::HistoricChartingInformationForParty* Arena::CreateMaybeMessage<::mead101::mead::HistoricChartingInformationForParty>(Arena*);
template<> ::mead101::mead::Icon* Arena::CreateMaybeMessage<::mead101::mead::Icon>(Arena*);
template<> ::mead101::mead::Id* Arena::CreateMaybeMessage<::mead101::mead::Id>(Arena*);
template<> ::mead101::mead::Image* Arena::CreateMaybeMessage<::mead101::mead::Image>(Arena*);
template<> ::mead101::mead::ImageType* Arena::CreateMaybeMessage<::mead101::mead::ImageType>(Arena*);
template<> ::mead101::mead::Instrument* Arena::CreateMaybeMessage<::mead101::mead::Instrument>(Arena*);
template<> ::mead101::mead::InstrumentUsed* Arena::CreateMaybeMessage<::mead101::mead::InstrumentUsed>(Arena*);
template<> ::mead101::mead::InstrumentValue* Arena::CreateMaybeMessage<::mead101::mead::InstrumentValue>(Arena*);
template<> ::mead101::mead::Link* Arena::CreateMaybeMessage<::mead101::mead::Link>(Arena*);
template<> ::mead101::mead::LocationAndDateOfSession* Arena::CreateMaybeMessage<::mead101::mead::LocationAndDateOfSession>(Arena*);
template<> ::mead101::mead::Logo* Arena::CreateMaybeMessage<::mead101::mead::Logo>(Arena*);
template<> ::mead101::mead::Lyrics* Arena::CreateMaybeMessage<::mead101::mead::Lyrics>(Arena*);
template<> ::mead101::mead::LyricsText* Arena::CreateMaybeMessage<::mead101::mead::LyricsText>(Arena*);
template<> ::mead101::mead::MeadMessage* Arena::CreateMaybeMessage<::mead101::mead::MeadMessage>(Arena*);
template<> ::mead101::mead::MessageAuditTrail* Arena::CreateMaybeMessage<::mead101::mead::MessageAuditTrail>(Arena*);
template<> ::mead101::mead::MessageAuditTrailEvent* Arena::CreateMaybeMessage<::mead101::mead::MessageAuditTrailEvent>(Arena*);
template<> ::mead101::mead::MessageHeader* Arena::CreateMaybeMessage<::mead101::mead::MessageHeader>(Arena*);
template<> ::mead101::mead::MessagingPartyWithoutCode* Arena::CreateMaybeMessage<::mead101::mead::MessagingPartyWithoutCode>(Arena*);
template<> ::mead101::mead::MetadataSource* Arena::CreateMaybeMessage<::mead101::mead::MetadataSource>(Arena*);
template<> ::mead101::mead::MetadataSourceList* Arena::CreateMaybeMessage<::mead101::mead::MetadataSourceList>(Arena*);
template<> ::mead101::mead::MetadataSourceType* Arena::CreateMaybeMessage<::mead101::mead::MetadataSourceType>(Arena*);
template<> ::mead101::mead::Meter* Arena::CreateMaybeMessage<::mead101::mead::Meter>(Arena*);
template<> ::mead101::mead::Mode* Arena::CreateMaybeMessage<::mead101::mead::Mode>(Arena*);
template<> ::mead101::mead::Modulation* Arena::CreateMaybeMessage<::mead101::mead::Modulation>(Arena*);
template<> ::mead101::mead::Mood* Arena::CreateMaybeMessage<::mead101::mead::Mood>(Arena*);
template<> ::mead101::mead::MoodValue* Arena::CreateMaybeMessage<::mead101::mead::MoodValue>(Arena*);
template<> ::mead101::mead::MusicalWorkId* Arena::CreateMaybeMessage<::mead101::mead::MusicalWorkId>(Arena*);
template<> ::mead101::mead::Name* Arena::CreateMaybeMessage<::mead101::mead::Name>(Arena*);
template<> ::mead101::mead::NameWithPronunciation* Arena::CreateMaybeMessage<::mead101::mead::NameWithPronunciation>(Arena*);
template<> ::mead101::mead::NameWithPronunciationAndScriptCode* Arena::CreateMaybeMessage<::mead101::mead::NameWithPronunciationAndScriptCode>(Arena*);
template<> ::mead101::mead::Party* Arena::CreateMaybeMessage<::mead101::mead::Party>(Arena*);
template<> ::mead101::mead::PartyDescriptor* Arena::CreateMaybeMessage<::mead101::mead::PartyDescriptor>(Arena*);
template<> ::mead101::mead::PartyInformation* Arena::CreateMaybeMessage<::mead101::mead::PartyInformation>(Arena*);
template<> ::mead101::mead::PartyInformationList* Arena::CreateMaybeMessage<::mead101::mead::PartyInformationList>(Arena*);
template<> ::mead101::mead::PartyName* Arena::CreateMaybeMessage<::mead101::mead::PartyName>(Arena*);
template<> ::mead101::mead::PartyNameWithPronunciation* Arena::CreateMaybeMessage<::mead101::mead::PartyNameWithPronunciation>(Arena*);
template<> ::mead101::mead::PartyNameWithTerritory* Arena::CreateMaybeMessage<::mead101::mead::PartyNameWithTerritory>(Arena*);
template<> ::mead101::mead::PartyNameWithoutCode* Arena::CreateMaybeMessage<::mead101::mead::PartyNameWithoutCode>(Arena*);
template<> ::mead101::mead::PartyWithNames* Arena::CreateMaybeMessage<::mead101::mead::PartyWithNames>(Arena*);
template<> ::mead101::mead::PartyWithRole* Arena::CreateMaybeMessage<::mead101::mead::PartyWithRole>(Arena*);
template<> ::mead101::mead::Period* Arena::CreateMaybeMessage<::mead101::mead::Period>(Arena*);
template<> ::mead101::mead::PeriodValue* Arena::CreateMaybeMessage<::mead101::mead::PeriodValue>(Arena*);
template<> ::mead101::mead::PeriodWithTime* Arena::CreateMaybeMessage<::mead101::mead::PeriodWithTime>(Arena*);
template<> ::mead101::mead::Person* Arena::CreateMaybeMessage<::mead101::mead::Person>(Arena*);
template<> ::mead101::mead::Pronunciation* Arena::CreateMaybeMessage<::mead101::mead::Pronunciation>(Arena*);
template<> ::mead101::mead::ProprietaryId* Arena::CreateMaybeMessage<::mead101::mead::ProprietaryId>(Arena*);
template<> ::mead101::mead::Pseudonym* Arena::CreateMaybeMessage<::mead101::mead::Pseudonym>(Arena*);
template<> ::mead101::mead::RecordingPart* Arena::CreateMaybeMessage<::mead101::mead::RecordingPart>(Arena*);
template<> ::mead101::mead::RecordingPartType* Arena::CreateMaybeMessage<::mead101::mead::RecordingPartType>(Arena*);
template<> ::mead101::mead::RelatedCreation* Arena::CreateMaybeMessage<::mead101::mead::RelatedCreation>(Arena*);
template<> ::mead101::mead::RelatedResource* Arena::CreateMaybeMessage<::mead101::mead::RelatedResource>(Arena*);
template<> ::mead101::mead::RelatedResourceType* Arena::CreateMaybeMessage<::mead101::mead::RelatedResourceType>(Arena*);
template<> ::mead101::mead::RelatedWork* Arena::CreateMaybeMessage<::mead101::mead::RelatedWork>(Arena*);
template<> ::mead101::mead::Release* Arena::CreateMaybeMessage<::mead101::mead::Release>(Arena*);
template<> ::mead101::mead::ReleaseId* Arena::CreateMaybeMessage<::mead101::mead::ReleaseId>(Arena*);
template<> ::mead101::mead::ReleaseInformation* Arena::CreateMaybeMessage<::mead101::mead::ReleaseInformation>(Arena*);
template<> ::mead101::mead::ReleaseInformationList* Arena::CreateMaybeMessage<::mead101::mead::ReleaseInformationList>(Arena*);
template<> ::mead101::mead::ReleaseSummary* Arena::CreateMaybeMessage<::mead101::mead::ReleaseSummary>(Arena*);
template<> ::mead101::mead::ReleaseTitle* Arena::CreateMaybeMessage<::mead101::mead::ReleaseTitle>(Arena*);
template<> ::mead101::mead::Resource* Arena::CreateMaybeMessage<::mead101::mead::Resource>(Arena*);
template<> ::mead101::mead::ResourceContributorRole* Arena::CreateMaybeMessage<::mead101::mead::ResourceContributorRole>(Arena*);
template<> ::mead101::mead::ResourceId* Arena::CreateMaybeMessage<::mead101::mead::ResourceId>(Arena*);
template<> ::mead101::mead::ResourceInformation* Arena::CreateMaybeMessage<::mead101::mead::ResourceInformation>(Arena*);
template<> ::mead101::mead::ResourceInformationList* Arena::CreateMaybeMessage<::mead101::mead::ResourceInformationList>(Arena*);
template<> ::mead101::mead::ResourceRelationship* Arena::CreateMaybeMessage<::mead101::mead::ResourceRelationship>(Arena*);
template<> ::mead101::mead::ResourceRelationshipType* Arena::CreateMaybeMessage<::mead101::mead::ResourceRelationshipType>(Arena*);
template<> ::mead101::mead::ResourceSummary* Arena::CreateMaybeMessage<::mead101::mead::ResourceSummary>(Arena*);
template<> ::mead101::mead::ResourceTitle* Arena::CreateMaybeMessage<::mead101::mead::ResourceTitle>(Arena*);
template<> ::mead101::mead::RootChordNote* Arena::CreateMaybeMessage<::mead101::mead::RootChordNote>(Arena*);
template<> ::mead101::mead::RootChordQuality* Arena::CreateMaybeMessage<::mead101::mead::RootChordQuality>(Arena*);
template<> ::mead101::mead::Sample* Arena::CreateMaybeMessage<::mead101::mead::Sample>(Arena*);
template<> ::mead101::mead::SampleFeature* Arena::CreateMaybeMessage<::mead101::mead::SampleFeature>(Arena*);
template<> ::mead101::mead::SessionType* Arena::CreateMaybeMessage<::mead101::mead::SessionType>(Arena*);
template<> ::mead101::mead::SimilarParty* Arena::CreateMaybeMessage<::mead101::mead::SimilarParty>(Arena*);
template<> ::mead101::mead::SimilarRelease* Arena::CreateMaybeMessage<::mead101::mead::SimilarRelease>(Arena*);
template<> ::mead101::mead::SimilarResource* Arena::CreateMaybeMessage<::mead101::mead::SimilarResource>(Arena*);
template<> ::mead101::mead::SimilarWork* Arena::CreateMaybeMessage<::mead101::mead::SimilarWork>(Arena*);
template<> ::mead101::mead::Source* Arena::CreateMaybeMessage<::mead101::mead::Source>(Arena*);
template<> ::mead101::mead::SubGenreCategory* Arena::CreateMaybeMessage<::mead101::mead::SubGenreCategory>(Arena*);
template<> ::mead101::mead::SubGenreCategoryValue* Arena::CreateMaybeMessage<::mead101::mead::SubGenreCategoryValue>(Arena*);
template<> ::mead101::mead::Tempo* Arena::CreateMaybeMessage<::mead101::mead::Tempo>(Arena*);
template<> ::mead101::mead::TempoValue* Arena::CreateMaybeMessage<::mead101::mead::TempoValue>(Arena*);
template<> ::mead101::mead::Text* Arena::CreateMaybeMessage<::mead101::mead::Text>(Arena*);
template<> ::mead101::mead::TextWithFormat* Arena::CreateMaybeMessage<::mead101::mead::TextWithFormat>(Arena*);
template<> ::mead101::mead::TextWithoutTerritory* Arena::CreateMaybeMessage<::mead101::mead::TextWithoutTerritory>(Arena*);
template<> ::mead101::mead::Theme* Arena::CreateMaybeMessage<::mead101::mead::Theme>(Arena*);
template<> ::mead101::mead::ThemeValue* Arena::CreateMaybeMessage<::mead101::mead::ThemeValue>(Arena*);
template<> ::mead101::mead::TimeSignature* Arena::CreateMaybeMessage<::mead101::mead::TimeSignature>(Arena*);
template<> ::mead101::mead::TimeSignatureModulation* Arena::CreateMaybeMessage<::mead101::mead::TimeSignatureModulation>(Arena*);
template<> ::mead101::mead::Timing* Arena::CreateMaybeMessage<::mead101::mead::Timing>(Arena*);
template<> ::mead101::mead::TitleTextWithPronunciation* Arena::CreateMaybeMessage<::mead101::mead::TitleTextWithPronunciation>(Arena*);
template<> ::mead101::mead::TitleWithPronunciation* Arena::CreateMaybeMessage<::mead101::mead::TitleWithPronunciation>(Arena*);
template<> ::mead101::mead::URI* Arena::CreateMaybeMessage<::mead101::mead::URI>(Arena*);
template<> ::mead101::mead::Usage* Arena::CreateMaybeMessage<::mead101::mead::Usage>(Arena*);
template<> ::mead101::mead::UsagePeriod* Arena::CreateMaybeMessage<::mead101::mead::UsagePeriod>(Arena*);
template<> ::mead101::mead::UsedMusicalWork* Arena::CreateMaybeMessage<::mead101::mead::UsedMusicalWork>(Arena*);
template<> ::mead101::mead::Venue* Arena::CreateMaybeMessage<::mead101::mead::Venue>(Arena*);
template<> ::mead101::mead::VocalRegister* Arena::CreateMaybeMessage<::mead101::mead::VocalRegister>(Arena*);
template<> ::mead101::mead::VocalRegisterValue* Arena::CreateMaybeMessage<::mead101::mead::VocalRegisterValue>(Arena*);
template<> ::mead101::mead::Work* Arena::CreateMaybeMessage<::mead101::mead::Work>(Arena*);
template<> ::mead101::mead::WorkHierarchy* Arena::CreateMaybeMessage<::mead101::mead::WorkHierarchy>(Arena*);
template<> ::mead101::mead::WorkInformation* Arena::CreateMaybeMessage<::mead101::mead::WorkInformation>(Arena*);
template<> ::mead101::mead::WorkInformationList* Arena::CreateMaybeMessage<::mead101::mead::WorkInformationList>(Arena*);
template<> ::mead101::mead::WorkRelationshipType* Arena::CreateMaybeMessage<::mead101::mead::WorkRelationshipType>(Arena*);
template<> ::mead101::mead::WorkSummary* Arena::CreateMaybeMessage<::mead101::mead::WorkSummary>(Arena*);
template<> ::mead101::mead::WorkTitle* Arena::CreateMaybeMessage<::mead101::mead::WorkTitle>(Arena*);
template<> ::mead101::mead::ddex_IsoDate* Arena::CreateMaybeMessage<::mead101::mead::ddex_IsoDate>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mead101 {
namespace mead {

// ===================================================================

class AbsolutePitch PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.AbsolutePitch) */ {
 public:
  inline AbsolutePitch() : AbsolutePitch(nullptr) {}
  virtual ~AbsolutePitch();

  AbsolutePitch(const AbsolutePitch& from);
  AbsolutePitch(AbsolutePitch&& from) noexcept
    : AbsolutePitch() {
    *this = ::std::move(from);
  }

  inline AbsolutePitch& operator=(const AbsolutePitch& from) {
    CopyFrom(from);
    return *this;
  }
  inline AbsolutePitch& operator=(AbsolutePitch&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AbsolutePitch& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AbsolutePitch* internal_default_instance() {
    return reinterpret_cast<const AbsolutePitch*>(
               &_AbsolutePitch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AbsolutePitch& a, AbsolutePitch& b) {
    a.Swap(&b);
  }
  inline void Swap(AbsolutePitch* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AbsolutePitch* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AbsolutePitch* New() const final {
    return CreateMaybeMessage<AbsolutePitch>(nullptr);
  }

  AbsolutePitch* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AbsolutePitch>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AbsolutePitch& from);
  void MergeFrom(const AbsolutePitch& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AbsolutePitch* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.AbsolutePitch";
  }
  protected:
  explicit AbsolutePitch(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetadataSourceReferenceFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // repeated string metadata_source_reference = 1;
  int metadata_source_reference_size() const;
  private:
  int _internal_metadata_source_reference_size() const;
  public:
  void clear_metadata_source_reference();
  const std::string& metadata_source_reference(int index) const;
  std::string* mutable_metadata_source_reference(int index);
  void set_metadata_source_reference(int index, const std::string& value);
  void set_metadata_source_reference(int index, std::string&& value);
  void set_metadata_source_reference(int index, const char* value);
  void set_metadata_source_reference(int index, const char* value, size_t size);
  std::string* add_metadata_source_reference();
  void add_metadata_source_reference(const std::string& value);
  void add_metadata_source_reference(std::string&& value);
  void add_metadata_source_reference(const char* value);
  void add_metadata_source_reference(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& metadata_source_reference() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_metadata_source_reference();
  private:
  const std::string& _internal_metadata_source_reference(int index) const;
  std::string* _internal_add_metadata_source_reference();
  public:

  // optional double value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  double value() const;
  void set_value(double value);
  private:
  double _internal_value() const;
  void _internal_set_value(double value);
  public:

  // @@protoc_insertion_point(class_scope:mead101.mead.AbsolutePitch)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> metadata_source_reference_;
  double value_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class AllTerritoryCode PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.AllTerritoryCode) */ {
 public:
  inline AllTerritoryCode() : AllTerritoryCode(nullptr) {}
  virtual ~AllTerritoryCode();

  AllTerritoryCode(const AllTerritoryCode& from);
  AllTerritoryCode(AllTerritoryCode&& from) noexcept
    : AllTerritoryCode() {
    *this = ::std::move(from);
  }

  inline AllTerritoryCode& operator=(const AllTerritoryCode& from) {
    CopyFrom(from);
    return *this;
  }
  inline AllTerritoryCode& operator=(AllTerritoryCode&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AllTerritoryCode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AllTerritoryCode* internal_default_instance() {
    return reinterpret_cast<const AllTerritoryCode*>(
               &_AllTerritoryCode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AllTerritoryCode& a, AllTerritoryCode& b) {
    a.Swap(&b);
  }
  inline void Swap(AllTerritoryCode* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AllTerritoryCode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AllTerritoryCode* New() const final {
    return CreateMaybeMessage<AllTerritoryCode>(nullptr);
  }

  AllTerritoryCode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AllTerritoryCode>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AllTerritoryCode& from);
  void MergeFrom(const AllTerritoryCode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AllTerritoryCode* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.AllTerritoryCode";
  }
  protected:
  explicit AllTerritoryCode(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdentifierTypeFieldNumber = 1,
    kExtValueFieldNumber = 2,
  };
  // optional .mead101.avs.TerritoryCodeTypeIncludingDeprecatedCodes identifier_type = 1;
  bool has_identifier_type() const;
  private:
  bool _internal_has_identifier_type() const;
  public:
  void clear_identifier_type();
  const ::mead101::avs::TerritoryCodeTypeIncludingDeprecatedCodes& identifier_type() const;
  ::mead101::avs::TerritoryCodeTypeIncludingDeprecatedCodes* release_identifier_type();
  ::mead101::avs::TerritoryCodeTypeIncludingDeprecatedCodes* mutable_identifier_type();
  void set_allocated_identifier_type(::mead101::avs::TerritoryCodeTypeIncludingDeprecatedCodes* identifier_type);
  private:
  const ::mead101::avs::TerritoryCodeTypeIncludingDeprecatedCodes& _internal_identifier_type() const;
  ::mead101::avs::TerritoryCodeTypeIncludingDeprecatedCodes* _internal_mutable_identifier_type();
  public:
  void unsafe_arena_set_allocated_identifier_type(
      ::mead101::avs::TerritoryCodeTypeIncludingDeprecatedCodes* identifier_type);
  ::mead101::avs::TerritoryCodeTypeIncludingDeprecatedCodes* unsafe_arena_release_identifier_type();

  // optional .mead101.avs.AllTerritoryCode ext_value = 2;
  bool has_ext_value() const;
  private:
  bool _internal_has_ext_value() const;
  public:
  void clear_ext_value();
  const ::mead101::avs::AllTerritoryCode& ext_value() const;
  ::mead101::avs::AllTerritoryCode* release_ext_value();
  ::mead101::avs::AllTerritoryCode* mutable_ext_value();
  void set_allocated_ext_value(::mead101::avs::AllTerritoryCode* ext_value);
  private:
  const ::mead101::avs::AllTerritoryCode& _internal_ext_value() const;
  ::mead101::avs::AllTerritoryCode* _internal_mutable_ext_value();
  public:
  void unsafe_arena_set_allocated_ext_value(
      ::mead101::avs::AllTerritoryCode* ext_value);
  ::mead101::avs::AllTerritoryCode* unsafe_arena_release_ext_value();

  // @@protoc_insertion_point(class_scope:mead101.mead.AllTerritoryCode)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::mead101::avs::TerritoryCodeTypeIncludingDeprecatedCodes* identifier_type_;
  ::mead101::avs::AllTerritoryCode* ext_value_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class AlternativeTitle PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.AlternativeTitle) */ {
 public:
  inline AlternativeTitle() : AlternativeTitle(nullptr) {}
  virtual ~AlternativeTitle();

  AlternativeTitle(const AlternativeTitle& from);
  AlternativeTitle(AlternativeTitle&& from) noexcept
    : AlternativeTitle() {
    *this = ::std::move(from);
  }

  inline AlternativeTitle& operator=(const AlternativeTitle& from) {
    CopyFrom(from);
    return *this;
  }
  inline AlternativeTitle& operator=(AlternativeTitle&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AlternativeTitle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AlternativeTitle* internal_default_instance() {
    return reinterpret_cast<const AlternativeTitle*>(
               &_AlternativeTitle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AlternativeTitle& a, AlternativeTitle& b) {
    a.Swap(&b);
  }
  inline void Swap(AlternativeTitle* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AlternativeTitle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AlternativeTitle* New() const final {
    return CreateMaybeMessage<AlternativeTitle>(nullptr);
  }

  AlternativeTitle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AlternativeTitle>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AlternativeTitle& from);
  void MergeFrom(const AlternativeTitle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AlternativeTitle* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.AlternativeTitle";
  }
  protected:
  explicit AlternativeTitle(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetadataSourceReferenceFieldNumber = 2,
    kLanguageAndScriptCodeFieldNumber = 1,
    kNamespaceFieldNumber = 3,
    kUserDefinedValueFieldNumber = 7,
    kSubTitleFieldNumber = 4,
    kTitleTextFieldNumber = 5,
    kTitleTypeFieldNumber = 6,
  };
  // repeated string metadata_source_reference = 2;
  int metadata_source_reference_size() const;
  private:
  int _internal_metadata_source_reference_size() const;
  public:
  void clear_metadata_source_reference();
  const std::string& metadata_source_reference(int index) const;
  std::string* mutable_metadata_source_reference(int index);
  void set_metadata_source_reference(int index, const std::string& value);
  void set_metadata_source_reference(int index, std::string&& value);
  void set_metadata_source_reference(int index, const char* value);
  void set_metadata_source_reference(int index, const char* value, size_t size);
  std::string* add_metadata_source_reference();
  void add_metadata_source_reference(const std::string& value);
  void add_metadata_source_reference(std::string&& value);
  void add_metadata_source_reference(const char* value);
  void add_metadata_source_reference(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& metadata_source_reference() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_metadata_source_reference();
  private:
  const std::string& _internal_metadata_source_reference(int index) const;
  std::string* _internal_add_metadata_source_reference();
  public:

  // optional string language_and_script_code = 1;
  bool has_language_and_script_code() const;
  private:
  bool _internal_has_language_and_script_code() const;
  public:
  void clear_language_and_script_code();
  const std::string& language_and_script_code() const;
  void set_language_and_script_code(const std::string& value);
  void set_language_and_script_code(std::string&& value);
  void set_language_and_script_code(const char* value);
  void set_language_and_script_code(const char* value, size_t size);
  std::string* mutable_language_and_script_code();
  std::string* release_language_and_script_code();
  void set_allocated_language_and_script_code(std::string* language_and_script_code);
  private:
  const std::string& _internal_language_and_script_code() const;
  void _internal_set_language_and_script_code(const std::string& value);
  std::string* _internal_mutable_language_and_script_code();
  public:

  // optional string namespace = 3;
  bool has_namespace_() const;
  private:
  bool _internal_has_namespace_() const;
  public:
  void clear_namespace_();
  const std::string& namespace_() const;
  void set_namespace_(const std::string& value);
  void set_namespace_(std::string&& value);
  void set_namespace_(const char* value);
  void set_namespace_(const char* value, size_t size);
  std::string* mutable_namespace_();
  std::string* release_namespace_();
  void set_allocated_namespace_(std::string* namespace_);
  private:
  const std::string& _internal_namespace_() const;
  void _internal_set_namespace_(const std::string& value);
  std::string* _internal_mutable_namespace_();
  public:

  // optional string user_defined_value = 7;
  bool has_user_defined_value() const;
  private:
  bool _internal_has_user_defined_value() const;
  public:
  void clear_user_defined_value();
  const std::string& user_defined_value() const;
  void set_user_defined_value(const std::string& value);
  void set_user_defined_value(std::string&& value);
  void set_user_defined_value(const char* value);
  void set_user_defined_value(const char* value, size_t size);
  std::string* mutable_user_defined_value();
  std::string* release_user_defined_value();
  void set_allocated_user_defined_value(std::string* user_defined_value);
  private:
  const std::string& _internal_user_defined_value() const;
  void _internal_set_user_defined_value(const std::string& value);
  std::string* _internal_mutable_user_defined_value();
  public:

  // optional .mead101.mead.TitleTextWithPronunciation sub_title = 4;
  bool has_sub_title() const;
  private:
  bool _internal_has_sub_title() const;
  public:
  void clear_sub_title();
  const ::mead101::mead::TitleTextWithPronunciation& sub_title() const;
  ::mead101::mead::TitleTextWithPronunciation* release_sub_title();
  ::mead101::mead::TitleTextWithPronunciation* mutable_sub_title();
  void set_allocated_sub_title(::mead101::mead::TitleTextWithPronunciation* sub_title);
  private:
  const ::mead101::mead::TitleTextWithPronunciation& _internal_sub_title() const;
  ::mead101::mead::TitleTextWithPronunciation* _internal_mutable_sub_title();
  public:
  void unsafe_arena_set_allocated_sub_title(
      ::mead101::mead::TitleTextWithPronunciation* sub_title);
  ::mead101::mead::TitleTextWithPronunciation* unsafe_arena_release_sub_title();

  // optional .mead101.mead.TitleTextWithPronunciation title_text = 5;
  bool has_title_text() const;
  private:
  bool _internal_has_title_text() const;
  public:
  void clear_title_text();
  const ::mead101::mead::TitleTextWithPronunciation& title_text() const;
  ::mead101::mead::TitleTextWithPronunciation* release_title_text();
  ::mead101::mead::TitleTextWithPronunciation* mutable_title_text();
  void set_allocated_title_text(::mead101::mead::TitleTextWithPronunciation* title_text);
  private:
  const ::mead101::mead::TitleTextWithPronunciation& _internal_title_text() const;
  ::mead101::mead::TitleTextWithPronunciation* _internal_mutable_title_text();
  public:
  void unsafe_arena_set_allocated_title_text(
      ::mead101::mead::TitleTextWithPronunciation* title_text);
  ::mead101::mead::TitleTextWithPronunciation* unsafe_arena_release_title_text();

  // optional .mead101.avs.TitleType title_type = 6;
  bool has_title_type() const;
  private:
  bool _internal_has_title_type() const;
  public:
  void clear_title_type();
  const ::mead101::avs::TitleType& title_type() const;
  ::mead101::avs::TitleType* release_title_type();
  ::mead101::avs::TitleType* mutable_title_type();
  void set_allocated_title_type(::mead101::avs::TitleType* title_type);
  private:
  const ::mead101::avs::TitleType& _internal_title_type() const;
  ::mead101::avs::TitleType* _internal_mutable_title_type();
  public:
  void unsafe_arena_set_allocated_title_type(
      ::mead101::avs::TitleType* title_type);
  ::mead101::avs::TitleType* unsafe_arena_release_title_type();

  // @@protoc_insertion_point(class_scope:mead101.mead.AlternativeTitle)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> metadata_source_reference_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_and_script_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr namespace__;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_defined_value_;
  ::mead101::mead::TitleTextWithPronunciation* sub_title_;
  ::mead101::mead::TitleTextWithPronunciation* title_text_;
  ::mead101::avs::TitleType* title_type_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class Annotation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.Annotation) */ {
 public:
  inline Annotation() : Annotation(nullptr) {}
  virtual ~Annotation();

  Annotation(const Annotation& from);
  Annotation(Annotation&& from) noexcept
    : Annotation() {
    *this = ::std::move(from);
  }

  inline Annotation& operator=(const Annotation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Annotation& operator=(Annotation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Annotation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Annotation* internal_default_instance() {
    return reinterpret_cast<const Annotation*>(
               &_Annotation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Annotation& a, Annotation& b) {
    a.Swap(&b);
  }
  inline void Swap(Annotation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Annotation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Annotation* New() const final {
    return CreateMaybeMessage<Annotation>(nullptr);
  }

  Annotation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Annotation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Annotation& from);
  void MergeFrom(const Annotation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Annotation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.Annotation";
  }
  protected:
  explicit Annotation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetadataSourceReferenceFieldNumber = 1,
    kTextFieldNumber = 2,
  };
  // repeated string metadata_source_reference = 1;
  int metadata_source_reference_size() const;
  private:
  int _internal_metadata_source_reference_size() const;
  public:
  void clear_metadata_source_reference();
  const std::string& metadata_source_reference(int index) const;
  std::string* mutable_metadata_source_reference(int index);
  void set_metadata_source_reference(int index, const std::string& value);
  void set_metadata_source_reference(int index, std::string&& value);
  void set_metadata_source_reference(int index, const char* value);
  void set_metadata_source_reference(int index, const char* value, size_t size);
  std::string* add_metadata_source_reference();
  void add_metadata_source_reference(const std::string& value);
  void add_metadata_source_reference(std::string&& value);
  void add_metadata_source_reference(const char* value);
  void add_metadata_source_reference(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& metadata_source_reference() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_metadata_source_reference();
  private:
  const std::string& _internal_metadata_source_reference(int index) const;
  std::string* _internal_add_metadata_source_reference();
  public:

  // optional .mead101.mead.TextWithFormat text = 2;
  bool has_text() const;
  private:
  bool _internal_has_text() const;
  public:
  void clear_text();
  const ::mead101::mead::TextWithFormat& text() const;
  ::mead101::mead::TextWithFormat* release_text();
  ::mead101::mead::TextWithFormat* mutable_text();
  void set_allocated_text(::mead101::mead::TextWithFormat* text);
  private:
  const ::mead101::mead::TextWithFormat& _internal_text() const;
  ::mead101::mead::TextWithFormat* _internal_mutable_text();
  public:
  void unsafe_arena_set_allocated_text(
      ::mead101::mead::TextWithFormat* text);
  ::mead101::mead::TextWithFormat* unsafe_arena_release_text();

  // @@protoc_insertion_point(class_scope:mead101.mead.Annotation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> metadata_source_reference_;
  ::mead101::mead::TextWithFormat* text_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class ArtistType PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.ArtistType) */ {
 public:
  inline ArtistType() : ArtistType(nullptr) {}
  virtual ~ArtistType();

  ArtistType(const ArtistType& from);
  ArtistType(ArtistType&& from) noexcept
    : ArtistType() {
    *this = ::std::move(from);
  }

  inline ArtistType& operator=(const ArtistType& from) {
    CopyFrom(from);
    return *this;
  }
  inline ArtistType& operator=(ArtistType&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ArtistType& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ArtistType* internal_default_instance() {
    return reinterpret_cast<const ArtistType*>(
               &_ArtistType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ArtistType& a, ArtistType& b) {
    a.Swap(&b);
  }
  inline void Swap(ArtistType* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ArtistType* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ArtistType* New() const final {
    return CreateMaybeMessage<ArtistType>(nullptr);
  }

  ArtistType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ArtistType>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ArtistType& from);
  void MergeFrom(const ArtistType& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ArtistType* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.ArtistType";
  }
  protected:
  explicit ArtistType(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetadataSourceReferenceFieldNumber = 2,
    kApplicableTerritoryCodeFieldNumber = 1,
    kValueFieldNumber = 3,
  };
  // repeated string metadata_source_reference = 2;
  int metadata_source_reference_size() const;
  private:
  int _internal_metadata_source_reference_size() const;
  public:
  void clear_metadata_source_reference();
  const std::string& metadata_source_reference(int index) const;
  std::string* mutable_metadata_source_reference(int index);
  void set_metadata_source_reference(int index, const std::string& value);
  void set_metadata_source_reference(int index, std::string&& value);
  void set_metadata_source_reference(int index, const char* value);
  void set_metadata_source_reference(int index, const char* value, size_t size);
  std::string* add_metadata_source_reference();
  void add_metadata_source_reference(const std::string& value);
  void add_metadata_source_reference(std::string&& value);
  void add_metadata_source_reference(const char* value);
  void add_metadata_source_reference(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& metadata_source_reference() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_metadata_source_reference();
  private:
  const std::string& _internal_metadata_source_reference(int index) const;
  std::string* _internal_add_metadata_source_reference();
  public:

  // optional .mead101.avs.CurrentTerritoryCode applicable_territory_code = 1;
  bool has_applicable_territory_code() const;
  private:
  bool _internal_has_applicable_territory_code() const;
  public:
  void clear_applicable_territory_code();
  const ::mead101::avs::CurrentTerritoryCode& applicable_territory_code() const;
  ::mead101::avs::CurrentTerritoryCode* release_applicable_territory_code();
  ::mead101::avs::CurrentTerritoryCode* mutable_applicable_territory_code();
  void set_allocated_applicable_territory_code(::mead101::avs::CurrentTerritoryCode* applicable_territory_code);
  private:
  const ::mead101::avs::CurrentTerritoryCode& _internal_applicable_territory_code() const;
  ::mead101::avs::CurrentTerritoryCode* _internal_mutable_applicable_territory_code();
  public:
  void unsafe_arena_set_allocated_applicable_territory_code(
      ::mead101::avs::CurrentTerritoryCode* applicable_territory_code);
  ::mead101::avs::CurrentTerritoryCode* unsafe_arena_release_applicable_territory_code();

  // optional .mead101.mead.ArtistTypeValue value = 3;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const ::mead101::mead::ArtistTypeValue& value() const;
  ::mead101::mead::ArtistTypeValue* release_value();
  ::mead101::mead::ArtistTypeValue* mutable_value();
  void set_allocated_value(::mead101::mead::ArtistTypeValue* value);
  private:
  const ::mead101::mead::ArtistTypeValue& _internal_value() const;
  ::mead101::mead::ArtistTypeValue* _internal_mutable_value();
  public:
  void unsafe_arena_set_allocated_value(
      ::mead101::mead::ArtistTypeValue* value);
  ::mead101::mead::ArtistTypeValue* unsafe_arena_release_value();

  // @@protoc_insertion_point(class_scope:mead101.mead.ArtistType)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> metadata_source_reference_;
  ::mead101::avs::CurrentTerritoryCode* applicable_territory_code_;
  ::mead101::mead::ArtistTypeValue* value_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class ArtistTypeValue PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.ArtistTypeValue) */ {
 public:
  inline ArtistTypeValue() : ArtistTypeValue(nullptr) {}
  virtual ~ArtistTypeValue();

  ArtistTypeValue(const ArtistTypeValue& from);
  ArtistTypeValue(ArtistTypeValue&& from) noexcept
    : ArtistTypeValue() {
    *this = ::std::move(from);
  }

  inline ArtistTypeValue& operator=(const ArtistTypeValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline ArtistTypeValue& operator=(ArtistTypeValue&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ArtistTypeValue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ArtistTypeValue* internal_default_instance() {
    return reinterpret_cast<const ArtistTypeValue*>(
               &_ArtistTypeValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ArtistTypeValue& a, ArtistTypeValue& b) {
    a.Swap(&b);
  }
  inline void Swap(ArtistTypeValue* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ArtistTypeValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ArtistTypeValue* New() const final {
    return CreateMaybeMessage<ArtistTypeValue>(nullptr);
  }

  ArtistTypeValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ArtistTypeValue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ArtistTypeValue& from);
  void MergeFrom(const ArtistTypeValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ArtistTypeValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.ArtistTypeValue";
  }
  protected:
  explicit ArtistTypeValue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNamespaceFieldNumber = 1,
    kUserDefinedValueFieldNumber = 2,
    kExtValueFieldNumber = 3,
  };
  // optional string namespace = 1;
  bool has_namespace_() const;
  private:
  bool _internal_has_namespace_() const;
  public:
  void clear_namespace_();
  const std::string& namespace_() const;
  void set_namespace_(const std::string& value);
  void set_namespace_(std::string&& value);
  void set_namespace_(const char* value);
  void set_namespace_(const char* value, size_t size);
  std::string* mutable_namespace_();
  std::string* release_namespace_();
  void set_allocated_namespace_(std::string* namespace_);
  private:
  const std::string& _internal_namespace_() const;
  void _internal_set_namespace_(const std::string& value);
  std::string* _internal_mutable_namespace_();
  public:

  // optional string user_defined_value = 2;
  bool has_user_defined_value() const;
  private:
  bool _internal_has_user_defined_value() const;
  public:
  void clear_user_defined_value();
  const std::string& user_defined_value() const;
  void set_user_defined_value(const std::string& value);
  void set_user_defined_value(std::string&& value);
  void set_user_defined_value(const char* value);
  void set_user_defined_value(const char* value, size_t size);
  std::string* mutable_user_defined_value();
  std::string* release_user_defined_value();
  void set_allocated_user_defined_value(std::string* user_defined_value);
  private:
  const std::string& _internal_user_defined_value() const;
  void _internal_set_user_defined_value(const std::string& value);
  std::string* _internal_mutable_user_defined_value();
  public:

  // optional .mead101.avs.ArtistType ext_value = 3;
  bool has_ext_value() const;
  private:
  bool _internal_has_ext_value() const;
  public:
  void clear_ext_value();
  const ::mead101::avs::ArtistType& ext_value() const;
  ::mead101::avs::ArtistType* release_ext_value();
  ::mead101::avs::ArtistType* mutable_ext_value();
  void set_allocated_ext_value(::mead101::avs::ArtistType* ext_value);
  private:
  const ::mead101::avs::ArtistType& _internal_ext_value() const;
  ::mead101::avs::ArtistType* _internal_mutable_ext_value();
  public:
  void unsafe_arena_set_allocated_ext_value(
      ::mead101::avs::ArtistType* ext_value);
  ::mead101::avs::ArtistType* unsafe_arena_release_ext_value();

  // @@protoc_insertion_point(class_scope:mead101.mead.ArtistTypeValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr namespace__;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_defined_value_;
  ::mead101::avs::ArtistType* ext_value_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class ArtisticInfluence PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.ArtisticInfluence) */ {
 public:
  inline ArtisticInfluence() : ArtisticInfluence(nullptr) {}
  virtual ~ArtisticInfluence();

  ArtisticInfluence(const ArtisticInfluence& from);
  ArtisticInfluence(ArtisticInfluence&& from) noexcept
    : ArtisticInfluence() {
    *this = ::std::move(from);
  }

  inline ArtisticInfluence& operator=(const ArtisticInfluence& from) {
    CopyFrom(from);
    return *this;
  }
  inline ArtisticInfluence& operator=(ArtisticInfluence&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ArtisticInfluence& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ArtisticInfluence* internal_default_instance() {
    return reinterpret_cast<const ArtisticInfluence*>(
               &_ArtisticInfluence_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ArtisticInfluence& a, ArtisticInfluence& b) {
    a.Swap(&b);
  }
  inline void Swap(ArtisticInfluence* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ArtisticInfluence* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ArtisticInfluence* New() const final {
    return CreateMaybeMessage<ArtisticInfluence>(nullptr);
  }

  ArtisticInfluence* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ArtisticInfluence>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ArtisticInfluence& from);
  void MergeFrom(const ArtisticInfluence& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ArtisticInfluence* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.ArtisticInfluence";
  }
  protected:
  explicit ArtisticInfluence(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDescriptionFieldNumber = 1,
    kMetadataSourceReferenceFieldNumber = 4,
    kPartyFieldNumber = 5,
    kReleaseFieldNumber = 6,
    kResourceFieldNumber = 7,
    kWorkFieldNumber = 8,
    kIsInfluencedFieldNumber = 2,
    kIsInfluencerFieldNumber = 3,
  };
  // repeated .mead101.mead.TextWithFormat description = 1;
  int description_size() const;
  private:
  int _internal_description_size() const;
  public:
  void clear_description();
  ::mead101::mead::TextWithFormat* mutable_description(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::TextWithFormat >*
      mutable_description();
  private:
  const ::mead101::mead::TextWithFormat& _internal_description(int index) const;
  ::mead101::mead::TextWithFormat* _internal_add_description();
  public:
  const ::mead101::mead::TextWithFormat& description(int index) const;
  ::mead101::mead::TextWithFormat* add_description();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::TextWithFormat >&
      description() const;

  // repeated string metadata_source_reference = 4;
  int metadata_source_reference_size() const;
  private:
  int _internal_metadata_source_reference_size() const;
  public:
  void clear_metadata_source_reference();
  const std::string& metadata_source_reference(int index) const;
  std::string* mutable_metadata_source_reference(int index);
  void set_metadata_source_reference(int index, const std::string& value);
  void set_metadata_source_reference(int index, std::string&& value);
  void set_metadata_source_reference(int index, const char* value);
  void set_metadata_source_reference(int index, const char* value, size_t size);
  std::string* add_metadata_source_reference();
  void add_metadata_source_reference(const std::string& value);
  void add_metadata_source_reference(std::string&& value);
  void add_metadata_source_reference(const char* value);
  void add_metadata_source_reference(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& metadata_source_reference() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_metadata_source_reference();
  private:
  const std::string& _internal_metadata_source_reference(int index) const;
  std::string* _internal_add_metadata_source_reference();
  public:

  // repeated .mead101.mead.PartyWithNames party = 5;
  int party_size() const;
  private:
  int _internal_party_size() const;
  public:
  void clear_party();
  ::mead101::mead::PartyWithNames* mutable_party(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::PartyWithNames >*
      mutable_party();
  private:
  const ::mead101::mead::PartyWithNames& _internal_party(int index) const;
  ::mead101::mead::PartyWithNames* _internal_add_party();
  public:
  const ::mead101::mead::PartyWithNames& party(int index) const;
  ::mead101::mead::PartyWithNames* add_party();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::PartyWithNames >&
      party() const;

  // repeated .mead101.mead.Release release = 6;
  int release_size() const;
  private:
  int _internal_release_size() const;
  public:
  void clear_release();
  ::mead101::mead::Release* mutable_release(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Release >*
      mutable_release();
  private:
  const ::mead101::mead::Release& _internal_release(int index) const;
  ::mead101::mead::Release* _internal_add_release();
  public:
  const ::mead101::mead::Release& release(int index) const;
  ::mead101::mead::Release* add_release();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Release >&
      release() const;

  // repeated .mead101.mead.Resource resource = 7;
  int resource_size() const;
  private:
  int _internal_resource_size() const;
  public:
  void clear_resource();
  ::mead101::mead::Resource* mutable_resource(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Resource >*
      mutable_resource();
  private:
  const ::mead101::mead::Resource& _internal_resource(int index) const;
  ::mead101::mead::Resource* _internal_add_resource();
  public:
  const ::mead101::mead::Resource& resource(int index) const;
  ::mead101::mead::Resource* add_resource();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Resource >&
      resource() const;

  // repeated .mead101.mead.Work work = 8;
  int work_size() const;
  private:
  int _internal_work_size() const;
  public:
  void clear_work();
  ::mead101::mead::Work* mutable_work(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Work >*
      mutable_work();
  private:
  const ::mead101::mead::Work& _internal_work(int index) const;
  ::mead101::mead::Work* _internal_add_work();
  public:
  const ::mead101::mead::Work& work(int index) const;
  ::mead101::mead::Work* add_work();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Work >&
      work() const;

  // optional bool is_influenced = 2;
  bool has_is_influenced() const;
  private:
  bool _internal_has_is_influenced() const;
  public:
  void clear_is_influenced();
  bool is_influenced() const;
  void set_is_influenced(bool value);
  private:
  bool _internal_is_influenced() const;
  void _internal_set_is_influenced(bool value);
  public:

  // optional bool is_influencer = 3;
  bool has_is_influencer() const;
  private:
  bool _internal_has_is_influencer() const;
  public:
  void clear_is_influencer();
  bool is_influencer() const;
  void set_is_influencer(bool value);
  private:
  bool _internal_is_influencer() const;
  void _internal_set_is_influencer(bool value);
  public:

  // @@protoc_insertion_point(class_scope:mead101.mead.ArtisticInfluence)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::TextWithFormat > description_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> metadata_source_reference_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::PartyWithNames > party_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Release > release_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Resource > resource_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Work > work_;
  bool is_influenced_;
  bool is_influencer_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class Award PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.Award) */ {
 public:
  inline Award() : Award(nullptr) {}
  virtual ~Award();

  Award(const Award& from);
  Award(Award&& from) noexcept
    : Award() {
    *this = ::std::move(from);
  }

  inline Award& operator=(const Award& from) {
    CopyFrom(from);
    return *this;
  }
  inline Award& operator=(Award&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Award& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Award* internal_default_instance() {
    return reinterpret_cast<const Award*>(
               &_Award_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Award& a, Award& b) {
    a.Swap(&b);
  }
  inline void Swap(Award* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Award* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Award* New() const final {
    return CreateMaybeMessage<Award>(nullptr);
  }

  Award* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Award>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Award& from);
  void MergeFrom(const Award& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Award* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.Award";
  }
  protected:
  explicit Award(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommentFieldNumber = 4,
    kMetadataSourceReferenceFieldNumber = 7,
    kAwardNameFieldNumber = 1,
    kAwardedPartyFieldNumber = 2,
    kAwardingBodyFieldNumber = 3,
    kDateFieldNumber = 5,
    kIsWinnerFieldNumber = 6,
  };
  // repeated .mead101.mead.TextWithFormat comment = 4;
  int comment_size() const;
  private:
  int _internal_comment_size() const;
  public:
  void clear_comment();
  ::mead101::mead::TextWithFormat* mutable_comment(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::TextWithFormat >*
      mutable_comment();
  private:
  const ::mead101::mead::TextWithFormat& _internal_comment(int index) const;
  ::mead101::mead::TextWithFormat* _internal_add_comment();
  public:
  const ::mead101::mead::TextWithFormat& comment(int index) const;
  ::mead101::mead::TextWithFormat* add_comment();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::TextWithFormat >&
      comment() const;

  // repeated string metadata_source_reference = 7;
  int metadata_source_reference_size() const;
  private:
  int _internal_metadata_source_reference_size() const;
  public:
  void clear_metadata_source_reference();
  const std::string& metadata_source_reference(int index) const;
  std::string* mutable_metadata_source_reference(int index);
  void set_metadata_source_reference(int index, const std::string& value);
  void set_metadata_source_reference(int index, std::string&& value);
  void set_metadata_source_reference(int index, const char* value);
  void set_metadata_source_reference(int index, const char* value, size_t size);
  std::string* add_metadata_source_reference();
  void add_metadata_source_reference(const std::string& value);
  void add_metadata_source_reference(std::string&& value);
  void add_metadata_source_reference(const char* value);
  void add_metadata_source_reference(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& metadata_source_reference() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_metadata_source_reference();
  private:
  const std::string& _internal_metadata_source_reference(int index) const;
  std::string* _internal_add_metadata_source_reference();
  public:

  // optional .mead101.mead.NameWithPronunciation award_name = 1;
  bool has_award_name() const;
  private:
  bool _internal_has_award_name() const;
  public:
  void clear_award_name();
  const ::mead101::mead::NameWithPronunciation& award_name() const;
  ::mead101::mead::NameWithPronunciation* release_award_name();
  ::mead101::mead::NameWithPronunciation* mutable_award_name();
  void set_allocated_award_name(::mead101::mead::NameWithPronunciation* award_name);
  private:
  const ::mead101::mead::NameWithPronunciation& _internal_award_name() const;
  ::mead101::mead::NameWithPronunciation* _internal_mutable_award_name();
  public:
  void unsafe_arena_set_allocated_award_name(
      ::mead101::mead::NameWithPronunciation* award_name);
  ::mead101::mead::NameWithPronunciation* unsafe_arena_release_award_name();

  // optional .mead101.mead.PartyWithNames awarded_party = 2;
  bool has_awarded_party() const;
  private:
  bool _internal_has_awarded_party() const;
  public:
  void clear_awarded_party();
  const ::mead101::mead::PartyWithNames& awarded_party() const;
  ::mead101::mead::PartyWithNames* release_awarded_party();
  ::mead101::mead::PartyWithNames* mutable_awarded_party();
  void set_allocated_awarded_party(::mead101::mead::PartyWithNames* awarded_party);
  private:
  const ::mead101::mead::PartyWithNames& _internal_awarded_party() const;
  ::mead101::mead::PartyWithNames* _internal_mutable_awarded_party();
  public:
  void unsafe_arena_set_allocated_awarded_party(
      ::mead101::mead::PartyWithNames* awarded_party);
  ::mead101::mead::PartyWithNames* unsafe_arena_release_awarded_party();

  // optional .mead101.mead.PartyDescriptor awarding_body = 3;
  bool has_awarding_body() const;
  private:
  bool _internal_has_awarding_body() const;
  public:
  void clear_awarding_body();
  const ::mead101::mead::PartyDescriptor& awarding_body() const;
  ::mead101::mead::PartyDescriptor* release_awarding_body();
  ::mead101::mead::PartyDescriptor* mutable_awarding_body();
  void set_allocated_awarding_body(::mead101::mead::PartyDescriptor* awarding_body);
  private:
  const ::mead101::mead::PartyDescriptor& _internal_awarding_body() const;
  ::mead101::mead::PartyDescriptor* _internal_mutable_awarding_body();
  public:
  void unsafe_arena_set_allocated_awarding_body(
      ::mead101::mead::PartyDescriptor* awarding_body);
  ::mead101::mead::PartyDescriptor* unsafe_arena_release_awarding_body();

  // optional .mead101.mead.EventDate date = 5;
  bool has_date() const;
  private:
  bool _internal_has_date() const;
  public:
  void clear_date();
  const ::mead101::mead::EventDate& date() const;
  ::mead101::mead::EventDate* release_date();
  ::mead101::mead::EventDate* mutable_date();
  void set_allocated_date(::mead101::mead::EventDate* date);
  private:
  const ::mead101::mead::EventDate& _internal_date() const;
  ::mead101::mead::EventDate* _internal_mutable_date();
  public:
  void unsafe_arena_set_allocated_date(
      ::mead101::mead::EventDate* date);
  ::mead101::mead::EventDate* unsafe_arena_release_date();

  // optional bool is_winner = 6;
  bool has_is_winner() const;
  private:
  bool _internal_has_is_winner() const;
  public:
  void clear_is_winner();
  bool is_winner() const;
  void set_is_winner(bool value);
  private:
  bool _internal_is_winner() const;
  void _internal_set_is_winner(bool value);
  public:

  // @@protoc_insertion_point(class_scope:mead101.mead.Award)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::TextWithFormat > comment_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> metadata_source_reference_;
  ::mead101::mead::NameWithPronunciation* award_name_;
  ::mead101::mead::PartyWithNames* awarded_party_;
  ::mead101::mead::PartyDescriptor* awarding_body_;
  ::mead101::mead::EventDate* date_;
  bool is_winner_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class AwardForParty PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.AwardForParty) */ {
 public:
  inline AwardForParty() : AwardForParty(nullptr) {}
  virtual ~AwardForParty();

  AwardForParty(const AwardForParty& from);
  AwardForParty(AwardForParty&& from) noexcept
    : AwardForParty() {
    *this = ::std::move(from);
  }

  inline AwardForParty& operator=(const AwardForParty& from) {
    CopyFrom(from);
    return *this;
  }
  inline AwardForParty& operator=(AwardForParty&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AwardForParty& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AwardForParty* internal_default_instance() {
    return reinterpret_cast<const AwardForParty*>(
               &_AwardForParty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(AwardForParty& a, AwardForParty& b) {
    a.Swap(&b);
  }
  inline void Swap(AwardForParty* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AwardForParty* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AwardForParty* New() const final {
    return CreateMaybeMessage<AwardForParty>(nullptr);
  }

  AwardForParty* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AwardForParty>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AwardForParty& from);
  void MergeFrom(const AwardForParty& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AwardForParty* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.AwardForParty";
  }
  protected:
  explicit AwardForParty(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommentFieldNumber = 7,
    kMetadataSourceReferenceFieldNumber = 10,
    kAwardNameFieldNumber = 1,
    kAwardedPartyFieldNumber = 2,
    kAwardedReleaseFieldNumber = 3,
    kAwardedResourceFieldNumber = 4,
    kAwardedWorkFieldNumber = 5,
    kAwardingBodyFieldNumber = 6,
    kDateFieldNumber = 8,
    kIsWinnerFieldNumber = 9,
  };
  // repeated .mead101.mead.TextWithFormat comment = 7;
  int comment_size() const;
  private:
  int _internal_comment_size() const;
  public:
  void clear_comment();
  ::mead101::mead::TextWithFormat* mutable_comment(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::TextWithFormat >*
      mutable_comment();
  private:
  const ::mead101::mead::TextWithFormat& _internal_comment(int index) const;
  ::mead101::mead::TextWithFormat* _internal_add_comment();
  public:
  const ::mead101::mead::TextWithFormat& comment(int index) const;
  ::mead101::mead::TextWithFormat* add_comment();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::TextWithFormat >&
      comment() const;

  // repeated string metadata_source_reference = 10;
  int metadata_source_reference_size() const;
  private:
  int _internal_metadata_source_reference_size() const;
  public:
  void clear_metadata_source_reference();
  const std::string& metadata_source_reference(int index) const;
  std::string* mutable_metadata_source_reference(int index);
  void set_metadata_source_reference(int index, const std::string& value);
  void set_metadata_source_reference(int index, std::string&& value);
  void set_metadata_source_reference(int index, const char* value);
  void set_metadata_source_reference(int index, const char* value, size_t size);
  std::string* add_metadata_source_reference();
  void add_metadata_source_reference(const std::string& value);
  void add_metadata_source_reference(std::string&& value);
  void add_metadata_source_reference(const char* value);
  void add_metadata_source_reference(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& metadata_source_reference() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_metadata_source_reference();
  private:
  const std::string& _internal_metadata_source_reference(int index) const;
  std::string* _internal_add_metadata_source_reference();
  public:

  // optional .mead101.mead.NameWithPronunciation award_name = 1;
  bool has_award_name() const;
  private:
  bool _internal_has_award_name() const;
  public:
  void clear_award_name();
  const ::mead101::mead::NameWithPronunciation& award_name() const;
  ::mead101::mead::NameWithPronunciation* release_award_name();
  ::mead101::mead::NameWithPronunciation* mutable_award_name();
  void set_allocated_award_name(::mead101::mead::NameWithPronunciation* award_name);
  private:
  const ::mead101::mead::NameWithPronunciation& _internal_award_name() const;
  ::mead101::mead::NameWithPronunciation* _internal_mutable_award_name();
  public:
  void unsafe_arena_set_allocated_award_name(
      ::mead101::mead::NameWithPronunciation* award_name);
  ::mead101::mead::NameWithPronunciation* unsafe_arena_release_award_name();

  // optional .mead101.mead.PartyWithNames awarded_party = 2;
  bool has_awarded_party() const;
  private:
  bool _internal_has_awarded_party() const;
  public:
  void clear_awarded_party();
  const ::mead101::mead::PartyWithNames& awarded_party() const;
  ::mead101::mead::PartyWithNames* release_awarded_party();
  ::mead101::mead::PartyWithNames* mutable_awarded_party();
  void set_allocated_awarded_party(::mead101::mead::PartyWithNames* awarded_party);
  private:
  const ::mead101::mead::PartyWithNames& _internal_awarded_party() const;
  ::mead101::mead::PartyWithNames* _internal_mutable_awarded_party();
  public:
  void unsafe_arena_set_allocated_awarded_party(
      ::mead101::mead::PartyWithNames* awarded_party);
  ::mead101::mead::PartyWithNames* unsafe_arena_release_awarded_party();

  // optional .mead101.mead.Release awarded_release = 3;
  bool has_awarded_release() const;
  private:
  bool _internal_has_awarded_release() const;
  public:
  void clear_awarded_release();
  const ::mead101::mead::Release& awarded_release() const;
  ::mead101::mead::Release* release_awarded_release();
  ::mead101::mead::Release* mutable_awarded_release();
  void set_allocated_awarded_release(::mead101::mead::Release* awarded_release);
  private:
  const ::mead101::mead::Release& _internal_awarded_release() const;
  ::mead101::mead::Release* _internal_mutable_awarded_release();
  public:
  void unsafe_arena_set_allocated_awarded_release(
      ::mead101::mead::Release* awarded_release);
  ::mead101::mead::Release* unsafe_arena_release_awarded_release();

  // optional .mead101.mead.Resource awarded_resource = 4;
  bool has_awarded_resource() const;
  private:
  bool _internal_has_awarded_resource() const;
  public:
  void clear_awarded_resource();
  const ::mead101::mead::Resource& awarded_resource() const;
  ::mead101::mead::Resource* release_awarded_resource();
  ::mead101::mead::Resource* mutable_awarded_resource();
  void set_allocated_awarded_resource(::mead101::mead::Resource* awarded_resource);
  private:
  const ::mead101::mead::Resource& _internal_awarded_resource() const;
  ::mead101::mead::Resource* _internal_mutable_awarded_resource();
  public:
  void unsafe_arena_set_allocated_awarded_resource(
      ::mead101::mead::Resource* awarded_resource);
  ::mead101::mead::Resource* unsafe_arena_release_awarded_resource();

  // optional .mead101.mead.Work awarded_work = 5;
  bool has_awarded_work() const;
  private:
  bool _internal_has_awarded_work() const;
  public:
  void clear_awarded_work();
  const ::mead101::mead::Work& awarded_work() const;
  ::mead101::mead::Work* release_awarded_work();
  ::mead101::mead::Work* mutable_awarded_work();
  void set_allocated_awarded_work(::mead101::mead::Work* awarded_work);
  private:
  const ::mead101::mead::Work& _internal_awarded_work() const;
  ::mead101::mead::Work* _internal_mutable_awarded_work();
  public:
  void unsafe_arena_set_allocated_awarded_work(
      ::mead101::mead::Work* awarded_work);
  ::mead101::mead::Work* unsafe_arena_release_awarded_work();

  // optional .mead101.mead.PartyDescriptor awarding_body = 6;
  bool has_awarding_body() const;
  private:
  bool _internal_has_awarding_body() const;
  public:
  void clear_awarding_body();
  const ::mead101::mead::PartyDescriptor& awarding_body() const;
  ::mead101::mead::PartyDescriptor* release_awarding_body();
  ::mead101::mead::PartyDescriptor* mutable_awarding_body();
  void set_allocated_awarding_body(::mead101::mead::PartyDescriptor* awarding_body);
  private:
  const ::mead101::mead::PartyDescriptor& _internal_awarding_body() const;
  ::mead101::mead::PartyDescriptor* _internal_mutable_awarding_body();
  public:
  void unsafe_arena_set_allocated_awarding_body(
      ::mead101::mead::PartyDescriptor* awarding_body);
  ::mead101::mead::PartyDescriptor* unsafe_arena_release_awarding_body();

  // optional .mead101.mead.EventDate date = 8;
  bool has_date() const;
  private:
  bool _internal_has_date() const;
  public:
  void clear_date();
  const ::mead101::mead::EventDate& date() const;
  ::mead101::mead::EventDate* release_date();
  ::mead101::mead::EventDate* mutable_date();
  void set_allocated_date(::mead101::mead::EventDate* date);
  private:
  const ::mead101::mead::EventDate& _internal_date() const;
  ::mead101::mead::EventDate* _internal_mutable_date();
  public:
  void unsafe_arena_set_allocated_date(
      ::mead101::mead::EventDate* date);
  ::mead101::mead::EventDate* unsafe_arena_release_date();

  // optional bool is_winner = 9;
  bool has_is_winner() const;
  private:
  bool _internal_has_is_winner() const;
  public:
  void clear_is_winner();
  bool is_winner() const;
  void set_is_winner(bool value);
  private:
  bool _internal_is_winner() const;
  void _internal_set_is_winner(bool value);
  public:

  // @@protoc_insertion_point(class_scope:mead101.mead.AwardForParty)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::TextWithFormat > comment_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> metadata_source_reference_;
  ::mead101::mead::NameWithPronunciation* award_name_;
  ::mead101::mead::PartyWithNames* awarded_party_;
  ::mead101::mead::Release* awarded_release_;
  ::mead101::mead::Resource* awarded_resource_;
  ::mead101::mead::Work* awarded_work_;
  ::mead101::mead::PartyDescriptor* awarding_body_;
  ::mead101::mead::EventDate* date_;
  bool is_winner_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class BeatsPerMinute PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.BeatsPerMinute) */ {
 public:
  inline BeatsPerMinute() : BeatsPerMinute(nullptr) {}
  virtual ~BeatsPerMinute();

  BeatsPerMinute(const BeatsPerMinute& from);
  BeatsPerMinute(BeatsPerMinute&& from) noexcept
    : BeatsPerMinute() {
    *this = ::std::move(from);
  }

  inline BeatsPerMinute& operator=(const BeatsPerMinute& from) {
    CopyFrom(from);
    return *this;
  }
  inline BeatsPerMinute& operator=(BeatsPerMinute&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BeatsPerMinute& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BeatsPerMinute* internal_default_instance() {
    return reinterpret_cast<const BeatsPerMinute*>(
               &_BeatsPerMinute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(BeatsPerMinute& a, BeatsPerMinute& b) {
    a.Swap(&b);
  }
  inline void Swap(BeatsPerMinute* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BeatsPerMinute* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BeatsPerMinute* New() const final {
    return CreateMaybeMessage<BeatsPerMinute>(nullptr);
  }

  BeatsPerMinute* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BeatsPerMinute>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BeatsPerMinute& from);
  void MergeFrom(const BeatsPerMinute& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BeatsPerMinute* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.BeatsPerMinute";
  }
  protected:
  explicit BeatsPerMinute(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetadataSourceReferenceFieldNumber = 1,
    kModulationFieldNumber = 2,
    kValueFieldNumber = 3,
  };
  // repeated string metadata_source_reference = 1;
  int metadata_source_reference_size() const;
  private:
  int _internal_metadata_source_reference_size() const;
  public:
  void clear_metadata_source_reference();
  const std::string& metadata_source_reference(int index) const;
  std::string* mutable_metadata_source_reference(int index);
  void set_metadata_source_reference(int index, const std::string& value);
  void set_metadata_source_reference(int index, std::string&& value);
  void set_metadata_source_reference(int index, const char* value);
  void set_metadata_source_reference(int index, const char* value, size_t size);
  std::string* add_metadata_source_reference();
  void add_metadata_source_reference(const std::string& value);
  void add_metadata_source_reference(std::string&& value);
  void add_metadata_source_reference(const char* value);
  void add_metadata_source_reference(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& metadata_source_reference() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_metadata_source_reference();
  private:
  const std::string& _internal_metadata_source_reference(int index) const;
  std::string* _internal_add_metadata_source_reference();
  public:

  // repeated .mead101.mead.Modulation modulation = 2;
  int modulation_size() const;
  private:
  int _internal_modulation_size() const;
  public:
  void clear_modulation();
  ::mead101::mead::Modulation* mutable_modulation(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Modulation >*
      mutable_modulation();
  private:
  const ::mead101::mead::Modulation& _internal_modulation(int index) const;
  ::mead101::mead::Modulation* _internal_add_modulation();
  public:
  const ::mead101::mead::Modulation& modulation(int index) const;
  ::mead101::mead::Modulation* add_modulation();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Modulation >&
      modulation() const;

  // optional double value = 3;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  double value() const;
  void set_value(double value);
  private:
  double _internal_value() const;
  void _internal_set_value(double value);
  public:

  // @@protoc_insertion_point(class_scope:mead101.mead.BeatsPerMinute)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> metadata_source_reference_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Modulation > modulation_;
  double value_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class Biography PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.Biography) */ {
 public:
  inline Biography() : Biography(nullptr) {}
  virtual ~Biography();

  Biography(const Biography& from);
  Biography(Biography&& from) noexcept
    : Biography() {
    *this = ::std::move(from);
  }

  inline Biography& operator=(const Biography& from) {
    CopyFrom(from);
    return *this;
  }
  inline Biography& operator=(Biography&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Biography& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Biography* internal_default_instance() {
    return reinterpret_cast<const Biography*>(
               &_Biography_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Biography& a, Biography& b) {
    a.Swap(&b);
  }
  inline void Swap(Biography* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Biography* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Biography* New() const final {
    return CreateMaybeMessage<Biography>(nullptr);
  }

  Biography* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Biography>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Biography& from);
  void MergeFrom(const Biography& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Biography* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.Biography";
  }
  protected:
  explicit Biography(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAuthorFieldNumber = 1,
    kMetadataSourceReferenceFieldNumber = 2,
    kTextFieldNumber = 3,
  };
  // repeated .mead101.mead.PartyWithNames author = 1;
  int author_size() const;
  private:
  int _internal_author_size() const;
  public:
  void clear_author();
  ::mead101::mead::PartyWithNames* mutable_author(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::PartyWithNames >*
      mutable_author();
  private:
  const ::mead101::mead::PartyWithNames& _internal_author(int index) const;
  ::mead101::mead::PartyWithNames* _internal_add_author();
  public:
  const ::mead101::mead::PartyWithNames& author(int index) const;
  ::mead101::mead::PartyWithNames* add_author();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::PartyWithNames >&
      author() const;

  // repeated string metadata_source_reference = 2;
  int metadata_source_reference_size() const;
  private:
  int _internal_metadata_source_reference_size() const;
  public:
  void clear_metadata_source_reference();
  const std::string& metadata_source_reference(int index) const;
  std::string* mutable_metadata_source_reference(int index);
  void set_metadata_source_reference(int index, const std::string& value);
  void set_metadata_source_reference(int index, std::string&& value);
  void set_metadata_source_reference(int index, const char* value);
  void set_metadata_source_reference(int index, const char* value, size_t size);
  std::string* add_metadata_source_reference();
  void add_metadata_source_reference(const std::string& value);
  void add_metadata_source_reference(std::string&& value);
  void add_metadata_source_reference(const char* value);
  void add_metadata_source_reference(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& metadata_source_reference() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_metadata_source_reference();
  private:
  const std::string& _internal_metadata_source_reference(int index) const;
  std::string* _internal_add_metadata_source_reference();
  public:

  // repeated .mead101.mead.BiographyText text = 3;
  int text_size() const;
  private:
  int _internal_text_size() const;
  public:
  void clear_text();
  ::mead101::mead::BiographyText* mutable_text(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::BiographyText >*
      mutable_text();
  private:
  const ::mead101::mead::BiographyText& _internal_text(int index) const;
  ::mead101::mead::BiographyText* _internal_add_text();
  public:
  const ::mead101::mead::BiographyText& text(int index) const;
  ::mead101::mead::BiographyText* add_text();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::BiographyText >&
      text() const;

  // @@protoc_insertion_point(class_scope:mead101.mead.Biography)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::PartyWithNames > author_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> metadata_source_reference_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::BiographyText > text_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class BiographyText PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.BiographyText) */ {
 public:
  inline BiographyText() : BiographyText(nullptr) {}
  virtual ~BiographyText();

  BiographyText(const BiographyText& from);
  BiographyText(BiographyText&& from) noexcept
    : BiographyText() {
    *this = ::std::move(from);
  }

  inline BiographyText& operator=(const BiographyText& from) {
    CopyFrom(from);
    return *this;
  }
  inline BiographyText& operator=(BiographyText&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BiographyText& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BiographyText* internal_default_instance() {
    return reinterpret_cast<const BiographyText*>(
               &_BiographyText_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(BiographyText& a, BiographyText& b) {
    a.Swap(&b);
  }
  inline void Swap(BiographyText* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BiographyText* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BiographyText* New() const final {
    return CreateMaybeMessage<BiographyText>(nullptr);
  }

  BiographyText* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BiographyText>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BiographyText& from);
  void MergeFrom(const BiographyText& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BiographyText* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.BiographyText";
  }
  protected:
  explicit BiographyText(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLanguageAndScriptCodeFieldNumber = 3,
    kNamespaceFieldNumber = 4,
    kUserDefinedValueFieldNumber = 5,
    kExtValueFieldNumber = 6,
    kApplicableTerritoryCodeFieldNumber = 1,
    kFormatFieldNumber = 2,
  };
  // optional string language_and_script_code = 3;
  bool has_language_and_script_code() const;
  private:
  bool _internal_has_language_and_script_code() const;
  public:
  void clear_language_and_script_code();
  const std::string& language_and_script_code() const;
  void set_language_and_script_code(const std::string& value);
  void set_language_and_script_code(std::string&& value);
  void set_language_and_script_code(const char* value);
  void set_language_and_script_code(const char* value, size_t size);
  std::string* mutable_language_and_script_code();
  std::string* release_language_and_script_code();
  void set_allocated_language_and_script_code(std::string* language_and_script_code);
  private:
  const std::string& _internal_language_and_script_code() const;
  void _internal_set_language_and_script_code(const std::string& value);
  std::string* _internal_mutable_language_and_script_code();
  public:

  // optional string namespace = 4;
  bool has_namespace_() const;
  private:
  bool _internal_has_namespace_() const;
  public:
  void clear_namespace_();
  const std::string& namespace_() const;
  void set_namespace_(const std::string& value);
  void set_namespace_(std::string&& value);
  void set_namespace_(const char* value);
  void set_namespace_(const char* value, size_t size);
  std::string* mutable_namespace_();
  std::string* release_namespace_();
  void set_allocated_namespace_(std::string* namespace_);
  private:
  const std::string& _internal_namespace_() const;
  void _internal_set_namespace_(const std::string& value);
  std::string* _internal_mutable_namespace_();
  public:

  // optional string user_defined_value = 5;
  bool has_user_defined_value() const;
  private:
  bool _internal_has_user_defined_value() const;
  public:
  void clear_user_defined_value();
  const std::string& user_defined_value() const;
  void set_user_defined_value(const std::string& value);
  void set_user_defined_value(std::string&& value);
  void set_user_defined_value(const char* value);
  void set_user_defined_value(const char* value, size_t size);
  std::string* mutable_user_defined_value();
  std::string* release_user_defined_value();
  void set_allocated_user_defined_value(std::string* user_defined_value);
  private:
  const std::string& _internal_user_defined_value() const;
  void _internal_set_user_defined_value(const std::string& value);
  std::string* _internal_mutable_user_defined_value();
  public:

  // optional string ext_value = 6;
  bool has_ext_value() const;
  private:
  bool _internal_has_ext_value() const;
  public:
  void clear_ext_value();
  const std::string& ext_value() const;
  void set_ext_value(const std::string& value);
  void set_ext_value(std::string&& value);
  void set_ext_value(const char* value);
  void set_ext_value(const char* value, size_t size);
  std::string* mutable_ext_value();
  std::string* release_ext_value();
  void set_allocated_ext_value(std::string* ext_value);
  private:
  const std::string& _internal_ext_value() const;
  void _internal_set_ext_value(const std::string& value);
  std::string* _internal_mutable_ext_value();
  public:

  // optional .mead101.avs.CurrentTerritoryCode applicable_territory_code = 1;
  bool has_applicable_territory_code() const;
  private:
  bool _internal_has_applicable_territory_code() const;
  public:
  void clear_applicable_territory_code();
  const ::mead101::avs::CurrentTerritoryCode& applicable_territory_code() const;
  ::mead101::avs::CurrentTerritoryCode* release_applicable_territory_code();
  ::mead101::avs::CurrentTerritoryCode* mutable_applicable_territory_code();
  void set_allocated_applicable_territory_code(::mead101::avs::CurrentTerritoryCode* applicable_territory_code);
  private:
  const ::mead101::avs::CurrentTerritoryCode& _internal_applicable_territory_code() const;
  ::mead101::avs::CurrentTerritoryCode* _internal_mutable_applicable_territory_code();
  public:
  void unsafe_arena_set_allocated_applicable_territory_code(
      ::mead101::avs::CurrentTerritoryCode* applicable_territory_code);
  ::mead101::avs::CurrentTerritoryCode* unsafe_arena_release_applicable_territory_code();

  // optional .mead101.avs.TextCodecType format = 2;
  bool has_format() const;
  private:
  bool _internal_has_format() const;
  public:
  void clear_format();
  const ::mead101::avs::TextCodecType& format() const;
  ::mead101::avs::TextCodecType* release_format();
  ::mead101::avs::TextCodecType* mutable_format();
  void set_allocated_format(::mead101::avs::TextCodecType* format);
  private:
  const ::mead101::avs::TextCodecType& _internal_format() const;
  ::mead101::avs::TextCodecType* _internal_mutable_format();
  public:
  void unsafe_arena_set_allocated_format(
      ::mead101::avs::TextCodecType* format);
  ::mead101::avs::TextCodecType* unsafe_arena_release_format();

  // @@protoc_insertion_point(class_scope:mead101.mead.BiographyText)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_and_script_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr namespace__;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_defined_value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ext_value_;
  ::mead101::avs::CurrentTerritoryCode* applicable_territory_code_;
  ::mead101::avs::TextCodecType* format_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class CatalogNumber PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.CatalogNumber) */ {
 public:
  inline CatalogNumber() : CatalogNumber(nullptr) {}
  virtual ~CatalogNumber();

  CatalogNumber(const CatalogNumber& from);
  CatalogNumber(CatalogNumber&& from) noexcept
    : CatalogNumber() {
    *this = ::std::move(from);
  }

  inline CatalogNumber& operator=(const CatalogNumber& from) {
    CopyFrom(from);
    return *this;
  }
  inline CatalogNumber& operator=(CatalogNumber&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CatalogNumber& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CatalogNumber* internal_default_instance() {
    return reinterpret_cast<const CatalogNumber*>(
               &_CatalogNumber_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(CatalogNumber& a, CatalogNumber& b) {
    a.Swap(&b);
  }
  inline void Swap(CatalogNumber* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CatalogNumber* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CatalogNumber* New() const final {
    return CreateMaybeMessage<CatalogNumber>(nullptr);
  }

  CatalogNumber* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CatalogNumber>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CatalogNumber& from);
  void MergeFrom(const CatalogNumber& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CatalogNumber* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.CatalogNumber";
  }
  protected:
  explicit CatalogNumber(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNamespaceFieldNumber = 1,
    kExtValueFieldNumber = 2,
  };
  // optional string namespace = 1;
  bool has_namespace_() const;
  private:
  bool _internal_has_namespace_() const;
  public:
  void clear_namespace_();
  const std::string& namespace_() const;
  void set_namespace_(const std::string& value);
  void set_namespace_(std::string&& value);
  void set_namespace_(const char* value);
  void set_namespace_(const char* value, size_t size);
  std::string* mutable_namespace_();
  std::string* release_namespace_();
  void set_allocated_namespace_(std::string* namespace_);
  private:
  const std::string& _internal_namespace_() const;
  void _internal_set_namespace_(const std::string& value);
  std::string* _internal_mutable_namespace_();
  public:

  // optional string ext_value = 2;
  bool has_ext_value() const;
  private:
  bool _internal_has_ext_value() const;
  public:
  void clear_ext_value();
  const std::string& ext_value() const;
  void set_ext_value(const std::string& value);
  void set_ext_value(std::string&& value);
  void set_ext_value(const char* value);
  void set_ext_value(const char* value, size_t size);
  std::string* mutable_ext_value();
  std::string* release_ext_value();
  void set_allocated_ext_value(std::string* ext_value);
  private:
  const std::string& _internal_ext_value() const;
  void _internal_set_ext_value(const std::string& value);
  std::string* _internal_mutable_ext_value();
  public:

  // @@protoc_insertion_point(class_scope:mead101.mead.CatalogNumber)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr namespace__;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ext_value_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class Category PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.Category) */ {
 public:
  inline Category() : Category(nullptr) {}
  virtual ~Category();

  Category(const Category& from);
  Category(Category&& from) noexcept
    : Category() {
    *this = ::std::move(from);
  }

  inline Category& operator=(const Category& from) {
    CopyFrom(from);
    return *this;
  }
  inline Category& operator=(Category&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Category& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Category* internal_default_instance() {
    return reinterpret_cast<const Category*>(
               &_Category_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(Category& a, Category& b) {
    a.Swap(&b);
  }
  inline void Swap(Category* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Category* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Category* New() const final {
    return CreateMaybeMessage<Category>(nullptr);
  }

  Category* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Category>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Category& from);
  void MergeFrom(const Category& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Category* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.Category";
  }
  protected:
  explicit Category(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnyAttributeValueFieldNumber = 1,
    kLabelFieldNumber = 2,
    kSchemeFieldNumber = 3,
    kTermFieldNumber = 4,
  };
  // repeated string any_attribute_value = 1;
  int any_attribute_value_size() const;
  private:
  int _internal_any_attribute_value_size() const;
  public:
  void clear_any_attribute_value();
  const std::string& any_attribute_value(int index) const;
  std::string* mutable_any_attribute_value(int index);
  void set_any_attribute_value(int index, const std::string& value);
  void set_any_attribute_value(int index, std::string&& value);
  void set_any_attribute_value(int index, const char* value);
  void set_any_attribute_value(int index, const char* value, size_t size);
  std::string* add_any_attribute_value();
  void add_any_attribute_value(const std::string& value);
  void add_any_attribute_value(std::string&& value);
  void add_any_attribute_value(const char* value);
  void add_any_attribute_value(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& any_attribute_value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_any_attribute_value();
  private:
  const std::string& _internal_any_attribute_value(int index) const;
  std::string* _internal_add_any_attribute_value();
  public:

  // optional string label = 2;
  bool has_label() const;
  private:
  bool _internal_has_label() const;
  public:
  void clear_label();
  const std::string& label() const;
  void set_label(const std::string& value);
  void set_label(std::string&& value);
  void set_label(const char* value);
  void set_label(const char* value, size_t size);
  std::string* mutable_label();
  std::string* release_label();
  void set_allocated_label(std::string* label);
  private:
  const std::string& _internal_label() const;
  void _internal_set_label(const std::string& value);
  std::string* _internal_mutable_label();
  public:

  // optional string scheme = 3;
  bool has_scheme() const;
  private:
  bool _internal_has_scheme() const;
  public:
  void clear_scheme();
  const std::string& scheme() const;
  void set_scheme(const std::string& value);
  void set_scheme(std::string&& value);
  void set_scheme(const char* value);
  void set_scheme(const char* value, size_t size);
  std::string* mutable_scheme();
  std::string* release_scheme();
  void set_allocated_scheme(std::string* scheme);
  private:
  const std::string& _internal_scheme() const;
  void _internal_set_scheme(const std::string& value);
  std::string* _internal_mutable_scheme();
  public:

  // optional string term = 4;
  bool has_term() const;
  private:
  bool _internal_has_term() const;
  public:
  void clear_term();
  const std::string& term() const;
  void set_term(const std::string& value);
  void set_term(std::string&& value);
  void set_term(const char* value);
  void set_term(const char* value, size_t size);
  std::string* mutable_term();
  std::string* release_term();
  void set_allocated_term(std::string* term);
  private:
  const std::string& _internal_term() const;
  void _internal_set_term(const std::string& value);
  std::string* _internal_mutable_term();
  public:

  // @@protoc_insertion_point(class_scope:mead101.mead.Category)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> any_attribute_value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr scheme_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr term_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class ChartEntry PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.ChartEntry) */ {
 public:
  inline ChartEntry() : ChartEntry(nullptr) {}
  virtual ~ChartEntry();

  ChartEntry(const ChartEntry& from);
  ChartEntry(ChartEntry&& from) noexcept
    : ChartEntry() {
    *this = ::std::move(from);
  }

  inline ChartEntry& operator=(const ChartEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChartEntry& operator=(ChartEntry&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChartEntry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChartEntry* internal_default_instance() {
    return reinterpret_cast<const ChartEntry*>(
               &_ChartEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(ChartEntry& a, ChartEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(ChartEntry* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChartEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChartEntry* New() const final {
    return CreateMaybeMessage<ChartEntry>(nullptr);
  }

  ChartEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChartEntry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChartEntry& from);
  void MergeFrom(const ChartEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChartEntry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.ChartEntry";
  }
  protected:
  explicit ChartEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommentFieldNumber = 1,
    kDateFieldNumber = 2,
    kDurationFieldNumber = 3,
    kPositionFieldNumber = 4,
  };
  // repeated .mead101.mead.TextWithFormat comment = 1;
  int comment_size() const;
  private:
  int _internal_comment_size() const;
  public:
  void clear_comment();
  ::mead101::mead::TextWithFormat* mutable_comment(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::TextWithFormat >*
      mutable_comment();
  private:
  const ::mead101::mead::TextWithFormat& _internal_comment(int index) const;
  ::mead101::mead::TextWithFormat* _internal_add_comment();
  public:
  const ::mead101::mead::TextWithFormat& comment(int index) const;
  ::mead101::mead::TextWithFormat* add_comment();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::TextWithFormat >&
      comment() const;

  // optional .mead101.mead.ddex_IsoDate date = 2;
  bool has_date() const;
  private:
  bool _internal_has_date() const;
  public:
  void clear_date();
  const ::mead101::mead::ddex_IsoDate& date() const;
  ::mead101::mead::ddex_IsoDate* release_date();
  ::mead101::mead::ddex_IsoDate* mutable_date();
  void set_allocated_date(::mead101::mead::ddex_IsoDate* date);
  private:
  const ::mead101::mead::ddex_IsoDate& _internal_date() const;
  ::mead101::mead::ddex_IsoDate* _internal_mutable_date();
  public:
  void unsafe_arena_set_allocated_date(
      ::mead101::mead::ddex_IsoDate* date);
  ::mead101::mead::ddex_IsoDate* unsafe_arena_release_date();

  // optional .mead101.mead.Duration duration = 3;
  bool has_duration() const;
  private:
  bool _internal_has_duration() const;
  public:
  void clear_duration();
  const ::mead101::mead::Duration& duration() const;
  ::mead101::mead::Duration* release_duration();
  ::mead101::mead::Duration* mutable_duration();
  void set_allocated_duration(::mead101::mead::Duration* duration);
  private:
  const ::mead101::mead::Duration& _internal_duration() const;
  ::mead101::mead::Duration* _internal_mutable_duration();
  public:
  void unsafe_arena_set_allocated_duration(
      ::mead101::mead::Duration* duration);
  ::mead101::mead::Duration* unsafe_arena_release_duration();

  // optional int32 position = 4;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  ::PROTOBUF_NAMESPACE_ID::int32 position() const;
  void set_position(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_position() const;
  void _internal_set_position(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mead101.mead.ChartEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::TextWithFormat > comment_;
  ::mead101::mead::ddex_IsoDate* date_;
  ::mead101::mead::Duration* duration_;
  ::PROTOBUF_NAMESPACE_ID::int32 position_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class ChartName PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.ChartName) */ {
 public:
  inline ChartName() : ChartName(nullptr) {}
  virtual ~ChartName();

  ChartName(const ChartName& from);
  ChartName(ChartName&& from) noexcept
    : ChartName() {
    *this = ::std::move(from);
  }

  inline ChartName& operator=(const ChartName& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChartName& operator=(ChartName&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChartName& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChartName* internal_default_instance() {
    return reinterpret_cast<const ChartName*>(
               &_ChartName_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(ChartName& a, ChartName& b) {
    a.Swap(&b);
  }
  inline void Swap(ChartName* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChartName* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChartName* New() const final {
    return CreateMaybeMessage<ChartName>(nullptr);
  }

  ChartName* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChartName>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChartName& from);
  void MergeFrom(const ChartName& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChartName* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.ChartName";
  }
  protected:
  explicit ChartName(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPronunciationFieldNumber = 3,
    kLanguageAndScriptCodeFieldNumber = 1,
    kNameFieldNumber = 2,
  };
  // repeated .mead101.mead.Pronunciation pronunciation = 3;
  int pronunciation_size() const;
  private:
  int _internal_pronunciation_size() const;
  public:
  void clear_pronunciation();
  ::mead101::mead::Pronunciation* mutable_pronunciation(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Pronunciation >*
      mutable_pronunciation();
  private:
  const ::mead101::mead::Pronunciation& _internal_pronunciation(int index) const;
  ::mead101::mead::Pronunciation* _internal_add_pronunciation();
  public:
  const ::mead101::mead::Pronunciation& pronunciation(int index) const;
  ::mead101::mead::Pronunciation* add_pronunciation();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Pronunciation >&
      pronunciation() const;

  // optional string language_and_script_code = 1;
  bool has_language_and_script_code() const;
  private:
  bool _internal_has_language_and_script_code() const;
  public:
  void clear_language_and_script_code();
  const std::string& language_and_script_code() const;
  void set_language_and_script_code(const std::string& value);
  void set_language_and_script_code(std::string&& value);
  void set_language_and_script_code(const char* value);
  void set_language_and_script_code(const char* value, size_t size);
  std::string* mutable_language_and_script_code();
  std::string* release_language_and_script_code();
  void set_allocated_language_and_script_code(std::string* language_and_script_code);
  private:
  const std::string& _internal_language_and_script_code() const;
  void _internal_set_language_and_script_code(const std::string& value);
  std::string* _internal_mutable_language_and_script_code();
  public:

  // optional string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:mead101.mead.ChartName)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Pronunciation > pronunciation_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_and_script_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class ChildWorkHierarchy PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.ChildWorkHierarchy) */ {
 public:
  inline ChildWorkHierarchy() : ChildWorkHierarchy(nullptr) {}
  virtual ~ChildWorkHierarchy();

  ChildWorkHierarchy(const ChildWorkHierarchy& from);
  ChildWorkHierarchy(ChildWorkHierarchy&& from) noexcept
    : ChildWorkHierarchy() {
    *this = ::std::move(from);
  }

  inline ChildWorkHierarchy& operator=(const ChildWorkHierarchy& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChildWorkHierarchy& operator=(ChildWorkHierarchy&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChildWorkHierarchy& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChildWorkHierarchy* internal_default_instance() {
    return reinterpret_cast<const ChildWorkHierarchy*>(
               &_ChildWorkHierarchy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(ChildWorkHierarchy& a, ChildWorkHierarchy& b) {
    a.Swap(&b);
  }
  inline void Swap(ChildWorkHierarchy* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChildWorkHierarchy* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChildWorkHierarchy* New() const final {
    return CreateMaybeMessage<ChildWorkHierarchy>(nullptr);
  }

  ChildWorkHierarchy* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChildWorkHierarchy>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChildWorkHierarchy& from);
  void MergeFrom(const ChildWorkHierarchy& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChildWorkHierarchy* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.ChildWorkHierarchy";
  }
  protected:
  explicit ChildWorkHierarchy(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChildFieldNumber = 1,
    kWorkTitleFieldNumber = 7,
    kFormFieldNumber = 2,
    kWorkIdFieldNumber = 6,
    kIsCompleteFieldNumber = 3,
    kIsDescribedElementFieldNumber = 4,
    kSequenceNumberFieldNumber = 5,
  };
  // repeated .mead101.mead.ChildWorkHierarchy child = 1;
  int child_size() const;
  private:
  int _internal_child_size() const;
  public:
  void clear_child();
  ::mead101::mead::ChildWorkHierarchy* mutable_child(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::ChildWorkHierarchy >*
      mutable_child();
  private:
  const ::mead101::mead::ChildWorkHierarchy& _internal_child(int index) const;
  ::mead101::mead::ChildWorkHierarchy* _internal_add_child();
  public:
  const ::mead101::mead::ChildWorkHierarchy& child(int index) const;
  ::mead101::mead::ChildWorkHierarchy* add_child();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::ChildWorkHierarchy >&
      child() const;

  // repeated .mead101.mead.WorkTitle work_title = 7;
  int work_title_size() const;
  private:
  int _internal_work_title_size() const;
  public:
  void clear_work_title();
  ::mead101::mead::WorkTitle* mutable_work_title(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::WorkTitle >*
      mutable_work_title();
  private:
  const ::mead101::mead::WorkTitle& _internal_work_title(int index) const;
  ::mead101::mead::WorkTitle* _internal_add_work_title();
  public:
  const ::mead101::mead::WorkTitle& work_title(int index) const;
  ::mead101::mead::WorkTitle* add_work_title();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::WorkTitle >&
      work_title() const;

  // optional .mead101.mead.Form form = 2;
  bool has_form() const;
  private:
  bool _internal_has_form() const;
  public:
  void clear_form();
  const ::mead101::mead::Form& form() const;
  ::mead101::mead::Form* release_form();
  ::mead101::mead::Form* mutable_form();
  void set_allocated_form(::mead101::mead::Form* form);
  private:
  const ::mead101::mead::Form& _internal_form() const;
  ::mead101::mead::Form* _internal_mutable_form();
  public:
  void unsafe_arena_set_allocated_form(
      ::mead101::mead::Form* form);
  ::mead101::mead::Form* unsafe_arena_release_form();

  // optional .mead101.mead.MusicalWorkId work_id = 6;
  bool has_work_id() const;
  private:
  bool _internal_has_work_id() const;
  public:
  void clear_work_id();
  const ::mead101::mead::MusicalWorkId& work_id() const;
  ::mead101::mead::MusicalWorkId* release_work_id();
  ::mead101::mead::MusicalWorkId* mutable_work_id();
  void set_allocated_work_id(::mead101::mead::MusicalWorkId* work_id);
  private:
  const ::mead101::mead::MusicalWorkId& _internal_work_id() const;
  ::mead101::mead::MusicalWorkId* _internal_mutable_work_id();
  public:
  void unsafe_arena_set_allocated_work_id(
      ::mead101::mead::MusicalWorkId* work_id);
  ::mead101::mead::MusicalWorkId* unsafe_arena_release_work_id();

  // optional bool is_complete = 3;
  bool has_is_complete() const;
  private:
  bool _internal_has_is_complete() const;
  public:
  void clear_is_complete();
  bool is_complete() const;
  void set_is_complete(bool value);
  private:
  bool _internal_is_complete() const;
  void _internal_set_is_complete(bool value);
  public:

  // optional bool is_described_element = 4;
  bool has_is_described_element() const;
  private:
  bool _internal_has_is_described_element() const;
  public:
  void clear_is_described_element();
  bool is_described_element() const;
  void set_is_described_element(bool value);
  private:
  bool _internal_is_described_element() const;
  void _internal_set_is_described_element(bool value);
  public:

  // optional int32 sequence_number = 5;
  bool has_sequence_number() const;
  private:
  bool _internal_has_sequence_number() const;
  public:
  void clear_sequence_number();
  ::PROTOBUF_NAMESPACE_ID::int32 sequence_number() const;
  void set_sequence_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sequence_number() const;
  void _internal_set_sequence_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mead101.mead.ChildWorkHierarchy)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::ChildWorkHierarchy > child_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::WorkTitle > work_title_;
  ::mead101::mead::Form* form_;
  ::mead101::mead::MusicalWorkId* work_id_;
  bool is_complete_;
  bool is_described_element_;
  ::PROTOBUF_NAMESPACE_ID::int32 sequence_number_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class ClassicalPeriod PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.ClassicalPeriod) */ {
 public:
  inline ClassicalPeriod() : ClassicalPeriod(nullptr) {}
  virtual ~ClassicalPeriod();

  ClassicalPeriod(const ClassicalPeriod& from);
  ClassicalPeriod(ClassicalPeriod&& from) noexcept
    : ClassicalPeriod() {
    *this = ::std::move(from);
  }

  inline ClassicalPeriod& operator=(const ClassicalPeriod& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClassicalPeriod& operator=(ClassicalPeriod&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClassicalPeriod& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClassicalPeriod* internal_default_instance() {
    return reinterpret_cast<const ClassicalPeriod*>(
               &_ClassicalPeriod_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(ClassicalPeriod& a, ClassicalPeriod& b) {
    a.Swap(&b);
  }
  inline void Swap(ClassicalPeriod* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClassicalPeriod* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClassicalPeriod* New() const final {
    return CreateMaybeMessage<ClassicalPeriod>(nullptr);
  }

  ClassicalPeriod* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClassicalPeriod>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClassicalPeriod& from);
  void MergeFrom(const ClassicalPeriod& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClassicalPeriod* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.ClassicalPeriod";
  }
  protected:
  explicit ClassicalPeriod(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetadataSourceReferenceFieldNumber = 2,
    kApplicableTerritoryCodeFieldNumber = 1,
    kNameFieldNumber = 3,
  };
  // repeated string metadata_source_reference = 2;
  int metadata_source_reference_size() const;
  private:
  int _internal_metadata_source_reference_size() const;
  public:
  void clear_metadata_source_reference();
  const std::string& metadata_source_reference(int index) const;
  std::string* mutable_metadata_source_reference(int index);
  void set_metadata_source_reference(int index, const std::string& value);
  void set_metadata_source_reference(int index, std::string&& value);
  void set_metadata_source_reference(int index, const char* value);
  void set_metadata_source_reference(int index, const char* value, size_t size);
  std::string* add_metadata_source_reference();
  void add_metadata_source_reference(const std::string& value);
  void add_metadata_source_reference(std::string&& value);
  void add_metadata_source_reference(const char* value);
  void add_metadata_source_reference(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& metadata_source_reference() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_metadata_source_reference();
  private:
  const std::string& _internal_metadata_source_reference(int index) const;
  std::string* _internal_add_metadata_source_reference();
  public:

  // optional .mead101.avs.CurrentTerritoryCode applicable_territory_code = 1;
  bool has_applicable_territory_code() const;
  private:
  bool _internal_has_applicable_territory_code() const;
  public:
  void clear_applicable_territory_code();
  const ::mead101::avs::CurrentTerritoryCode& applicable_territory_code() const;
  ::mead101::avs::CurrentTerritoryCode* release_applicable_territory_code();
  ::mead101::avs::CurrentTerritoryCode* mutable_applicable_territory_code();
  void set_allocated_applicable_territory_code(::mead101::avs::CurrentTerritoryCode* applicable_territory_code);
  private:
  const ::mead101::avs::CurrentTerritoryCode& _internal_applicable_territory_code() const;
  ::mead101::avs::CurrentTerritoryCode* _internal_mutable_applicable_territory_code();
  public:
  void unsafe_arena_set_allocated_applicable_territory_code(
      ::mead101::avs::CurrentTerritoryCode* applicable_territory_code);
  ::mead101::avs::CurrentTerritoryCode* unsafe_arena_release_applicable_territory_code();

  // optional .mead101.mead.PeriodValue name = 3;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const ::mead101::mead::PeriodValue& name() const;
  ::mead101::mead::PeriodValue* release_name();
  ::mead101::mead::PeriodValue* mutable_name();
  void set_allocated_name(::mead101::mead::PeriodValue* name);
  private:
  const ::mead101::mead::PeriodValue& _internal_name() const;
  ::mead101::mead::PeriodValue* _internal_mutable_name();
  public:
  void unsafe_arena_set_allocated_name(
      ::mead101::mead::PeriodValue* name);
  ::mead101::mead::PeriodValue* unsafe_arena_release_name();

  // @@protoc_insertion_point(class_scope:mead101.mead.ClassicalPeriod)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> metadata_source_reference_;
  ::mead101::avs::CurrentTerritoryCode* applicable_territory_code_;
  ::mead101::mead::PeriodValue* name_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class CommentaryNote PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.CommentaryNote) */ {
 public:
  inline CommentaryNote() : CommentaryNote(nullptr) {}
  virtual ~CommentaryNote();

  CommentaryNote(const CommentaryNote& from);
  CommentaryNote(CommentaryNote&& from) noexcept
    : CommentaryNote() {
    *this = ::std::move(from);
  }

  inline CommentaryNote& operator=(const CommentaryNote& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommentaryNote& operator=(CommentaryNote&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CommentaryNote& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommentaryNote* internal_default_instance() {
    return reinterpret_cast<const CommentaryNote*>(
               &_CommentaryNote_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(CommentaryNote& a, CommentaryNote& b) {
    a.Swap(&b);
  }
  inline void Swap(CommentaryNote* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommentaryNote* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommentaryNote* New() const final {
    return CreateMaybeMessage<CommentaryNote>(nullptr);
  }

  CommentaryNote* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommentaryNote>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommentaryNote& from);
  void MergeFrom(const CommentaryNote& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommentaryNote* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.CommentaryNote";
  }
  protected:
  explicit CommentaryNote(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAuthorFieldNumber = 2,
    kCommentaryNoteTypeFieldNumber = 3,
    kMetadataSourceReferenceFieldNumber = 4,
    kTextFieldNumber = 5,
    kApplicableTerritoryCodeFieldNumber = 1,
  };
  // repeated .mead101.mead.PartyWithNames author = 2;
  int author_size() const;
  private:
  int _internal_author_size() const;
  public:
  void clear_author();
  ::mead101::mead::PartyWithNames* mutable_author(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::PartyWithNames >*
      mutable_author();
  private:
  const ::mead101::mead::PartyWithNames& _internal_author(int index) const;
  ::mead101::mead::PartyWithNames* _internal_add_author();
  public:
  const ::mead101::mead::PartyWithNames& author(int index) const;
  ::mead101::mead::PartyWithNames* add_author();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::PartyWithNames >&
      author() const;

  // repeated .mead101.mead.CommentaryNoteType commentary_note_type = 3;
  int commentary_note_type_size() const;
  private:
  int _internal_commentary_note_type_size() const;
  public:
  void clear_commentary_note_type();
  ::mead101::mead::CommentaryNoteType* mutable_commentary_note_type(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::CommentaryNoteType >*
      mutable_commentary_note_type();
  private:
  const ::mead101::mead::CommentaryNoteType& _internal_commentary_note_type(int index) const;
  ::mead101::mead::CommentaryNoteType* _internal_add_commentary_note_type();
  public:
  const ::mead101::mead::CommentaryNoteType& commentary_note_type(int index) const;
  ::mead101::mead::CommentaryNoteType* add_commentary_note_type();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::CommentaryNoteType >&
      commentary_note_type() const;

  // repeated string metadata_source_reference = 4;
  int metadata_source_reference_size() const;
  private:
  int _internal_metadata_source_reference_size() const;
  public:
  void clear_metadata_source_reference();
  const std::string& metadata_source_reference(int index) const;
  std::string* mutable_metadata_source_reference(int index);
  void set_metadata_source_reference(int index, const std::string& value);
  void set_metadata_source_reference(int index, std::string&& value);
  void set_metadata_source_reference(int index, const char* value);
  void set_metadata_source_reference(int index, const char* value, size_t size);
  std::string* add_metadata_source_reference();
  void add_metadata_source_reference(const std::string& value);
  void add_metadata_source_reference(std::string&& value);
  void add_metadata_source_reference(const char* value);
  void add_metadata_source_reference(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& metadata_source_reference() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_metadata_source_reference();
  private:
  const std::string& _internal_metadata_source_reference(int index) const;
  std::string* _internal_add_metadata_source_reference();
  public:

  // repeated .mead101.mead.TextWithoutTerritory text = 5;
  int text_size() const;
  private:
  int _internal_text_size() const;
  public:
  void clear_text();
  ::mead101::mead::TextWithoutTerritory* mutable_text(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::TextWithoutTerritory >*
      mutable_text();
  private:
  const ::mead101::mead::TextWithoutTerritory& _internal_text(int index) const;
  ::mead101::mead::TextWithoutTerritory* _internal_add_text();
  public:
  const ::mead101::mead::TextWithoutTerritory& text(int index) const;
  ::mead101::mead::TextWithoutTerritory* add_text();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::TextWithoutTerritory >&
      text() const;

  // optional .mead101.avs.CurrentTerritoryCode applicable_territory_code = 1;
  bool has_applicable_territory_code() const;
  private:
  bool _internal_has_applicable_territory_code() const;
  public:
  void clear_applicable_territory_code();
  const ::mead101::avs::CurrentTerritoryCode& applicable_territory_code() const;
  ::mead101::avs::CurrentTerritoryCode* release_applicable_territory_code();
  ::mead101::avs::CurrentTerritoryCode* mutable_applicable_territory_code();
  void set_allocated_applicable_territory_code(::mead101::avs::CurrentTerritoryCode* applicable_territory_code);
  private:
  const ::mead101::avs::CurrentTerritoryCode& _internal_applicable_territory_code() const;
  ::mead101::avs::CurrentTerritoryCode* _internal_mutable_applicable_territory_code();
  public:
  void unsafe_arena_set_allocated_applicable_territory_code(
      ::mead101::avs::CurrentTerritoryCode* applicable_territory_code);
  ::mead101::avs::CurrentTerritoryCode* unsafe_arena_release_applicable_territory_code();

  // @@protoc_insertion_point(class_scope:mead101.mead.CommentaryNote)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::PartyWithNames > author_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::CommentaryNoteType > commentary_note_type_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> metadata_source_reference_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::TextWithoutTerritory > text_;
  ::mead101::avs::CurrentTerritoryCode* applicable_territory_code_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class CommentaryNoteType PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.CommentaryNoteType) */ {
 public:
  inline CommentaryNoteType() : CommentaryNoteType(nullptr) {}
  virtual ~CommentaryNoteType();

  CommentaryNoteType(const CommentaryNoteType& from);
  CommentaryNoteType(CommentaryNoteType&& from) noexcept
    : CommentaryNoteType() {
    *this = ::std::move(from);
  }

  inline CommentaryNoteType& operator=(const CommentaryNoteType& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommentaryNoteType& operator=(CommentaryNoteType&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CommentaryNoteType& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommentaryNoteType* internal_default_instance() {
    return reinterpret_cast<const CommentaryNoteType*>(
               &_CommentaryNoteType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(CommentaryNoteType& a, CommentaryNoteType& b) {
    a.Swap(&b);
  }
  inline void Swap(CommentaryNoteType* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommentaryNoteType* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommentaryNoteType* New() const final {
    return CreateMaybeMessage<CommentaryNoteType>(nullptr);
  }

  CommentaryNoteType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommentaryNoteType>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommentaryNoteType& from);
  void MergeFrom(const CommentaryNoteType& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommentaryNoteType* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.CommentaryNoteType";
  }
  protected:
  explicit CommentaryNoteType(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNamespaceFieldNumber = 1,
    kUserDefinedValueFieldNumber = 2,
    kExtValueFieldNumber = 3,
  };
  // optional string namespace = 1;
  bool has_namespace_() const;
  private:
  bool _internal_has_namespace_() const;
  public:
  void clear_namespace_();
  const std::string& namespace_() const;
  void set_namespace_(const std::string& value);
  void set_namespace_(std::string&& value);
  void set_namespace_(const char* value);
  void set_namespace_(const char* value, size_t size);
  std::string* mutable_namespace_();
  std::string* release_namespace_();
  void set_allocated_namespace_(std::string* namespace_);
  private:
  const std::string& _internal_namespace_() const;
  void _internal_set_namespace_(const std::string& value);
  std::string* _internal_mutable_namespace_();
  public:

  // optional string user_defined_value = 2;
  bool has_user_defined_value() const;
  private:
  bool _internal_has_user_defined_value() const;
  public:
  void clear_user_defined_value();
  const std::string& user_defined_value() const;
  void set_user_defined_value(const std::string& value);
  void set_user_defined_value(std::string&& value);
  void set_user_defined_value(const char* value);
  void set_user_defined_value(const char* value, size_t size);
  std::string* mutable_user_defined_value();
  std::string* release_user_defined_value();
  void set_allocated_user_defined_value(std::string* user_defined_value);
  private:
  const std::string& _internal_user_defined_value() const;
  void _internal_set_user_defined_value(const std::string& value);
  std::string* _internal_mutable_user_defined_value();
  public:

  // optional .mead101.avs.CommentaryNoteType ext_value = 3;
  bool has_ext_value() const;
  private:
  bool _internal_has_ext_value() const;
  public:
  void clear_ext_value();
  const ::mead101::avs::CommentaryNoteType& ext_value() const;
  ::mead101::avs::CommentaryNoteType* release_ext_value();
  ::mead101::avs::CommentaryNoteType* mutable_ext_value();
  void set_allocated_ext_value(::mead101::avs::CommentaryNoteType* ext_value);
  private:
  const ::mead101::avs::CommentaryNoteType& _internal_ext_value() const;
  ::mead101::avs::CommentaryNoteType* _internal_mutable_ext_value();
  public:
  void unsafe_arena_set_allocated_ext_value(
      ::mead101::avs::CommentaryNoteType* ext_value);
  ::mead101::avs::CommentaryNoteType* unsafe_arena_release_ext_value();

  // @@protoc_insertion_point(class_scope:mead101.mead.CommentaryNoteType)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr namespace__;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_defined_value_;
  ::mead101::avs::CommentaryNoteType* ext_value_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class Content PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.Content) */ {
 public:
  inline Content() : Content(nullptr) {}
  virtual ~Content();

  Content(const Content& from);
  Content(Content&& from) noexcept
    : Content() {
    *this = ::std::move(from);
  }

  inline Content& operator=(const Content& from) {
    CopyFrom(from);
    return *this;
  }
  inline Content& operator=(Content&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Content& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Content* internal_default_instance() {
    return reinterpret_cast<const Content*>(
               &_Content_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(Content& a, Content& b) {
    a.Swap(&b);
  }
  inline void Swap(Content* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Content* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Content* New() const final {
    return CreateMaybeMessage<Content>(nullptr);
  }

  Content* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Content>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Content& from);
  void MergeFrom(const Content& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Content* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.Content";
  }
  protected:
  explicit Content(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnyAttributeValueFieldNumber = 1,
    kAnyValueFieldNumber = 2,
    kSrcFieldNumber = 3,
    kTypeFieldNumber = 4,
  };
  // repeated string any_attribute_value = 1;
  int any_attribute_value_size() const;
  private:
  int _internal_any_attribute_value_size() const;
  public:
  void clear_any_attribute_value();
  const std::string& any_attribute_value(int index) const;
  std::string* mutable_any_attribute_value(int index);
  void set_any_attribute_value(int index, const std::string& value);
  void set_any_attribute_value(int index, std::string&& value);
  void set_any_attribute_value(int index, const char* value);
  void set_any_attribute_value(int index, const char* value, size_t size);
  std::string* add_any_attribute_value();
  void add_any_attribute_value(const std::string& value);
  void add_any_attribute_value(std::string&& value);
  void add_any_attribute_value(const char* value);
  void add_any_attribute_value(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& any_attribute_value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_any_attribute_value();
  private:
  const std::string& _internal_any_attribute_value(int index) const;
  std::string* _internal_add_any_attribute_value();
  public:

  // repeated string any_value = 2;
  int any_value_size() const;
  private:
  int _internal_any_value_size() const;
  public:
  void clear_any_value();
  const std::string& any_value(int index) const;
  std::string* mutable_any_value(int index);
  void set_any_value(int index, const std::string& value);
  void set_any_value(int index, std::string&& value);
  void set_any_value(int index, const char* value);
  void set_any_value(int index, const char* value, size_t size);
  std::string* add_any_value();
  void add_any_value(const std::string& value);
  void add_any_value(std::string&& value);
  void add_any_value(const char* value);
  void add_any_value(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& any_value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_any_value();
  private:
  const std::string& _internal_any_value(int index) const;
  std::string* _internal_add_any_value();
  public:

  // optional string src = 3;
  bool has_src() const;
  private:
  bool _internal_has_src() const;
  public:
  void clear_src();
  const std::string& src() const;
  void set_src(const std::string& value);
  void set_src(std::string&& value);
  void set_src(const char* value);
  void set_src(const char* value, size_t size);
  std::string* mutable_src();
  std::string* release_src();
  void set_allocated_src(std::string* src);
  private:
  const std::string& _internal_src() const;
  void _internal_set_src(const std::string& value);
  std::string* _internal_mutable_src();
  public:

  // optional string type = 4;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // @@protoc_insertion_point(class_scope:mead101.mead.Content)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> any_attribute_value_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> any_value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr src_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class CurrentTerritoryCode PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.CurrentTerritoryCode) */ {
 public:
  inline CurrentTerritoryCode() : CurrentTerritoryCode(nullptr) {}
  virtual ~CurrentTerritoryCode();

  CurrentTerritoryCode(const CurrentTerritoryCode& from);
  CurrentTerritoryCode(CurrentTerritoryCode&& from) noexcept
    : CurrentTerritoryCode() {
    *this = ::std::move(from);
  }

  inline CurrentTerritoryCode& operator=(const CurrentTerritoryCode& from) {
    CopyFrom(from);
    return *this;
  }
  inline CurrentTerritoryCode& operator=(CurrentTerritoryCode&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CurrentTerritoryCode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CurrentTerritoryCode* internal_default_instance() {
    return reinterpret_cast<const CurrentTerritoryCode*>(
               &_CurrentTerritoryCode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(CurrentTerritoryCode& a, CurrentTerritoryCode& b) {
    a.Swap(&b);
  }
  inline void Swap(CurrentTerritoryCode* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CurrentTerritoryCode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CurrentTerritoryCode* New() const final {
    return CreateMaybeMessage<CurrentTerritoryCode>(nullptr);
  }

  CurrentTerritoryCode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CurrentTerritoryCode>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CurrentTerritoryCode& from);
  void MergeFrom(const CurrentTerritoryCode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CurrentTerritoryCode* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.CurrentTerritoryCode";
  }
  protected:
  explicit CurrentTerritoryCode(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdentifierTypeFieldNumber = 1,
    kExtValueFieldNumber = 2,
  };
  // optional .mead101.avs.TerritoryCodeType identifier_type = 1;
  bool has_identifier_type() const;
  private:
  bool _internal_has_identifier_type() const;
  public:
  void clear_identifier_type();
  const ::mead101::avs::TerritoryCodeType& identifier_type() const;
  ::mead101::avs::TerritoryCodeType* release_identifier_type();
  ::mead101::avs::TerritoryCodeType* mutable_identifier_type();
  void set_allocated_identifier_type(::mead101::avs::TerritoryCodeType* identifier_type);
  private:
  const ::mead101::avs::TerritoryCodeType& _internal_identifier_type() const;
  ::mead101::avs::TerritoryCodeType* _internal_mutable_identifier_type();
  public:
  void unsafe_arena_set_allocated_identifier_type(
      ::mead101::avs::TerritoryCodeType* identifier_type);
  ::mead101::avs::TerritoryCodeType* unsafe_arena_release_identifier_type();

  // optional .mead101.avs.CurrentTerritoryCode ext_value = 2;
  bool has_ext_value() const;
  private:
  bool _internal_has_ext_value() const;
  public:
  void clear_ext_value();
  const ::mead101::avs::CurrentTerritoryCode& ext_value() const;
  ::mead101::avs::CurrentTerritoryCode* release_ext_value();
  ::mead101::avs::CurrentTerritoryCode* mutable_ext_value();
  void set_allocated_ext_value(::mead101::avs::CurrentTerritoryCode* ext_value);
  private:
  const ::mead101::avs::CurrentTerritoryCode& _internal_ext_value() const;
  ::mead101::avs::CurrentTerritoryCode* _internal_mutable_ext_value();
  public:
  void unsafe_arena_set_allocated_ext_value(
      ::mead101::avs::CurrentTerritoryCode* ext_value);
  ::mead101::avs::CurrentTerritoryCode* unsafe_arena_release_ext_value();

  // @@protoc_insertion_point(class_scope:mead101.mead.CurrentTerritoryCode)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::mead101::avs::TerritoryCodeType* identifier_type_;
  ::mead101::avs::CurrentTerritoryCode* ext_value_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class DanceAndRhythmStyle PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.DanceAndRhythmStyle) */ {
 public:
  inline DanceAndRhythmStyle() : DanceAndRhythmStyle(nullptr) {}
  virtual ~DanceAndRhythmStyle();

  DanceAndRhythmStyle(const DanceAndRhythmStyle& from);
  DanceAndRhythmStyle(DanceAndRhythmStyle&& from) noexcept
    : DanceAndRhythmStyle() {
    *this = ::std::move(from);
  }

  inline DanceAndRhythmStyle& operator=(const DanceAndRhythmStyle& from) {
    CopyFrom(from);
    return *this;
  }
  inline DanceAndRhythmStyle& operator=(DanceAndRhythmStyle&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DanceAndRhythmStyle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DanceAndRhythmStyle* internal_default_instance() {
    return reinterpret_cast<const DanceAndRhythmStyle*>(
               &_DanceAndRhythmStyle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(DanceAndRhythmStyle& a, DanceAndRhythmStyle& b) {
    a.Swap(&b);
  }
  inline void Swap(DanceAndRhythmStyle* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DanceAndRhythmStyle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DanceAndRhythmStyle* New() const final {
    return CreateMaybeMessage<DanceAndRhythmStyle>(nullptr);
  }

  DanceAndRhythmStyle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DanceAndRhythmStyle>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DanceAndRhythmStyle& from);
  void MergeFrom(const DanceAndRhythmStyle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DanceAndRhythmStyle* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.DanceAndRhythmStyle";
  }
  protected:
  explicit DanceAndRhythmStyle(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDescriptionFieldNumber = 2,
    kMetadataSourceReferenceFieldNumber = 3,
    kApplicableTerritoryCodeFieldNumber = 1,
    kValueFieldNumber = 4,
  };
  // repeated .mead101.mead.TextWithoutTerritory description = 2;
  int description_size() const;
  private:
  int _internal_description_size() const;
  public:
  void clear_description();
  ::mead101::mead::TextWithoutTerritory* mutable_description(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::TextWithoutTerritory >*
      mutable_description();
  private:
  const ::mead101::mead::TextWithoutTerritory& _internal_description(int index) const;
  ::mead101::mead::TextWithoutTerritory* _internal_add_description();
  public:
  const ::mead101::mead::TextWithoutTerritory& description(int index) const;
  ::mead101::mead::TextWithoutTerritory* add_description();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::TextWithoutTerritory >&
      description() const;

  // repeated string metadata_source_reference = 3;
  int metadata_source_reference_size() const;
  private:
  int _internal_metadata_source_reference_size() const;
  public:
  void clear_metadata_source_reference();
  const std::string& metadata_source_reference(int index) const;
  std::string* mutable_metadata_source_reference(int index);
  void set_metadata_source_reference(int index, const std::string& value);
  void set_metadata_source_reference(int index, std::string&& value);
  void set_metadata_source_reference(int index, const char* value);
  void set_metadata_source_reference(int index, const char* value, size_t size);
  std::string* add_metadata_source_reference();
  void add_metadata_source_reference(const std::string& value);
  void add_metadata_source_reference(std::string&& value);
  void add_metadata_source_reference(const char* value);
  void add_metadata_source_reference(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& metadata_source_reference() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_metadata_source_reference();
  private:
  const std::string& _internal_metadata_source_reference(int index) const;
  std::string* _internal_add_metadata_source_reference();
  public:

  // optional .mead101.avs.CurrentTerritoryCode applicable_territory_code = 1;
  bool has_applicable_territory_code() const;
  private:
  bool _internal_has_applicable_territory_code() const;
  public:
  void clear_applicable_territory_code();
  const ::mead101::avs::CurrentTerritoryCode& applicable_territory_code() const;
  ::mead101::avs::CurrentTerritoryCode* release_applicable_territory_code();
  ::mead101::avs::CurrentTerritoryCode* mutable_applicable_territory_code();
  void set_allocated_applicable_territory_code(::mead101::avs::CurrentTerritoryCode* applicable_territory_code);
  private:
  const ::mead101::avs::CurrentTerritoryCode& _internal_applicable_territory_code() const;
  ::mead101::avs::CurrentTerritoryCode* _internal_mutable_applicable_territory_code();
  public:
  void unsafe_arena_set_allocated_applicable_territory_code(
      ::mead101::avs::CurrentTerritoryCode* applicable_territory_code);
  ::mead101::avs::CurrentTerritoryCode* unsafe_arena_release_applicable_territory_code();

  // optional .mead101.mead.DanceAndRhythmStyleValue value = 4;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const ::mead101::mead::DanceAndRhythmStyleValue& value() const;
  ::mead101::mead::DanceAndRhythmStyleValue* release_value();
  ::mead101::mead::DanceAndRhythmStyleValue* mutable_value();
  void set_allocated_value(::mead101::mead::DanceAndRhythmStyleValue* value);
  private:
  const ::mead101::mead::DanceAndRhythmStyleValue& _internal_value() const;
  ::mead101::mead::DanceAndRhythmStyleValue* _internal_mutable_value();
  public:
  void unsafe_arena_set_allocated_value(
      ::mead101::mead::DanceAndRhythmStyleValue* value);
  ::mead101::mead::DanceAndRhythmStyleValue* unsafe_arena_release_value();

  // @@protoc_insertion_point(class_scope:mead101.mead.DanceAndRhythmStyle)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::TextWithoutTerritory > description_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> metadata_source_reference_;
  ::mead101::avs::CurrentTerritoryCode* applicable_territory_code_;
  ::mead101::mead::DanceAndRhythmStyleValue* value_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class DanceAndRhythmStyleValue PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.DanceAndRhythmStyleValue) */ {
 public:
  inline DanceAndRhythmStyleValue() : DanceAndRhythmStyleValue(nullptr) {}
  virtual ~DanceAndRhythmStyleValue();

  DanceAndRhythmStyleValue(const DanceAndRhythmStyleValue& from);
  DanceAndRhythmStyleValue(DanceAndRhythmStyleValue&& from) noexcept
    : DanceAndRhythmStyleValue() {
    *this = ::std::move(from);
  }

  inline DanceAndRhythmStyleValue& operator=(const DanceAndRhythmStyleValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline DanceAndRhythmStyleValue& operator=(DanceAndRhythmStyleValue&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DanceAndRhythmStyleValue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DanceAndRhythmStyleValue* internal_default_instance() {
    return reinterpret_cast<const DanceAndRhythmStyleValue*>(
               &_DanceAndRhythmStyleValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(DanceAndRhythmStyleValue& a, DanceAndRhythmStyleValue& b) {
    a.Swap(&b);
  }
  inline void Swap(DanceAndRhythmStyleValue* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DanceAndRhythmStyleValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DanceAndRhythmStyleValue* New() const final {
    return CreateMaybeMessage<DanceAndRhythmStyleValue>(nullptr);
  }

  DanceAndRhythmStyleValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DanceAndRhythmStyleValue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DanceAndRhythmStyleValue& from);
  void MergeFrom(const DanceAndRhythmStyleValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DanceAndRhythmStyleValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.DanceAndRhythmStyleValue";
  }
  protected:
  explicit DanceAndRhythmStyleValue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNamespaceFieldNumber = 1,
    kUserDefinedValueFieldNumber = 2,
    kExtValueFieldNumber = 3,
  };
  // optional string namespace = 1;
  bool has_namespace_() const;
  private:
  bool _internal_has_namespace_() const;
  public:
  void clear_namespace_();
  const std::string& namespace_() const;
  void set_namespace_(const std::string& value);
  void set_namespace_(std::string&& value);
  void set_namespace_(const char* value);
  void set_namespace_(const char* value, size_t size);
  std::string* mutable_namespace_();
  std::string* release_namespace_();
  void set_allocated_namespace_(std::string* namespace_);
  private:
  const std::string& _internal_namespace_() const;
  void _internal_set_namespace_(const std::string& value);
  std::string* _internal_mutable_namespace_();
  public:

  // optional string user_defined_value = 2;
  bool has_user_defined_value() const;
  private:
  bool _internal_has_user_defined_value() const;
  public:
  void clear_user_defined_value();
  const std::string& user_defined_value() const;
  void set_user_defined_value(const std::string& value);
  void set_user_defined_value(std::string&& value);
  void set_user_defined_value(const char* value);
  void set_user_defined_value(const char* value, size_t size);
  std::string* mutable_user_defined_value();
  std::string* release_user_defined_value();
  void set_allocated_user_defined_value(std::string* user_defined_value);
  private:
  const std::string& _internal_user_defined_value() const;
  void _internal_set_user_defined_value(const std::string& value);
  std::string* _internal_mutable_user_defined_value();
  public:

  // optional .mead101.avs.DanceAndRhythmStyle ext_value = 3;
  bool has_ext_value() const;
  private:
  bool _internal_has_ext_value() const;
  public:
  void clear_ext_value();
  const ::mead101::avs::DanceAndRhythmStyle& ext_value() const;
  ::mead101::avs::DanceAndRhythmStyle* release_ext_value();
  ::mead101::avs::DanceAndRhythmStyle* mutable_ext_value();
  void set_allocated_ext_value(::mead101::avs::DanceAndRhythmStyle* ext_value);
  private:
  const ::mead101::avs::DanceAndRhythmStyle& _internal_ext_value() const;
  ::mead101::avs::DanceAndRhythmStyle* _internal_mutable_ext_value();
  public:
  void unsafe_arena_set_allocated_ext_value(
      ::mead101::avs::DanceAndRhythmStyle* ext_value);
  ::mead101::avs::DanceAndRhythmStyle* unsafe_arena_release_ext_value();

  // @@protoc_insertion_point(class_scope:mead101.mead.DanceAndRhythmStyleValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr namespace__;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_defined_value_;
  ::mead101::avs::DanceAndRhythmStyle* ext_value_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class Date PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.Date) */ {
 public:
  inline Date() : Date(nullptr) {}
  virtual ~Date();

  Date(const Date& from);
  Date(Date&& from) noexcept
    : Date() {
    *this = ::std::move(from);
  }

  inline Date& operator=(const Date& from) {
    CopyFrom(from);
    return *this;
  }
  inline Date& operator=(Date&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Date& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Date* internal_default_instance() {
    return reinterpret_cast<const Date*>(
               &_Date_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(Date& a, Date& b) {
    a.Swap(&b);
  }
  inline void Swap(Date* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Date* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Date* New() const final {
    return CreateMaybeMessage<Date>(nullptr);
  }

  Date* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Date>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Date& from);
  void MergeFrom(const Date& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Date* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.Date";
  }
  protected:
  explicit Date(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExtValueFieldNumber = 2,
    kIsApproximateFieldNumber = 1,
  };
  // optional .mead101.mead.ddex_IsoDate ext_value = 2;
  bool has_ext_value() const;
  private:
  bool _internal_has_ext_value() const;
  public:
  void clear_ext_value();
  const ::mead101::mead::ddex_IsoDate& ext_value() const;
  ::mead101::mead::ddex_IsoDate* release_ext_value();
  ::mead101::mead::ddex_IsoDate* mutable_ext_value();
  void set_allocated_ext_value(::mead101::mead::ddex_IsoDate* ext_value);
  private:
  const ::mead101::mead::ddex_IsoDate& _internal_ext_value() const;
  ::mead101::mead::ddex_IsoDate* _internal_mutable_ext_value();
  public:
  void unsafe_arena_set_allocated_ext_value(
      ::mead101::mead::ddex_IsoDate* ext_value);
  ::mead101::mead::ddex_IsoDate* unsafe_arena_release_ext_value();

  // optional bool is_approximate = 1;
  bool has_is_approximate() const;
  private:
  bool _internal_has_is_approximate() const;
  public:
  void clear_is_approximate();
  bool is_approximate() const;
  void set_is_approximate(bool value);
  private:
  bool _internal_is_approximate() const;
  void _internal_set_is_approximate(bool value);
  public:

  // @@protoc_insertion_point(class_scope:mead101.mead.Date)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::mead101::mead::ddex_IsoDate* ext_value_;
  bool is_approximate_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class DateTime PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.DateTime) */ {
 public:
  inline DateTime() : DateTime(nullptr) {}
  virtual ~DateTime();

  DateTime(const DateTime& from);
  DateTime(DateTime&& from) noexcept
    : DateTime() {
    *this = ::std::move(from);
  }

  inline DateTime& operator=(const DateTime& from) {
    CopyFrom(from);
    return *this;
  }
  inline DateTime& operator=(DateTime&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DateTime& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DateTime* internal_default_instance() {
    return reinterpret_cast<const DateTime*>(
               &_DateTime_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(DateTime& a, DateTime& b) {
    a.Swap(&b);
  }
  inline void Swap(DateTime* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DateTime* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DateTime* New() const final {
    return CreateMaybeMessage<DateTime>(nullptr);
  }

  DateTime* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DateTime>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DateTime& from);
  void MergeFrom(const DateTime& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DateTime* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.DateTime";
  }
  protected:
  explicit DateTime(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnyAttributeValueFieldNumber = 1,
    kExtValueFieldNumber = 2,
  };
  // repeated string any_attribute_value = 1;
  int any_attribute_value_size() const;
  private:
  int _internal_any_attribute_value_size() const;
  public:
  void clear_any_attribute_value();
  const std::string& any_attribute_value(int index) const;
  std::string* mutable_any_attribute_value(int index);
  void set_any_attribute_value(int index, const std::string& value);
  void set_any_attribute_value(int index, std::string&& value);
  void set_any_attribute_value(int index, const char* value);
  void set_any_attribute_value(int index, const char* value, size_t size);
  std::string* add_any_attribute_value();
  void add_any_attribute_value(const std::string& value);
  void add_any_attribute_value(std::string&& value);
  void add_any_attribute_value(const char* value);
  void add_any_attribute_value(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& any_attribute_value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_any_attribute_value();
  private:
  const std::string& _internal_any_attribute_value(int index) const;
  std::string* _internal_add_any_attribute_value();
  public:

  // optional string ext_value = 2;
  bool has_ext_value() const;
  private:
  bool _internal_has_ext_value() const;
  public:
  void clear_ext_value();
  const std::string& ext_value() const;
  void set_ext_value(const std::string& value);
  void set_ext_value(std::string&& value);
  void set_ext_value(const char* value);
  void set_ext_value(const char* value, size_t size);
  std::string* mutable_ext_value();
  std::string* release_ext_value();
  void set_allocated_ext_value(std::string* ext_value);
  private:
  const std::string& _internal_ext_value() const;
  void _internal_set_ext_value(const std::string& value);
  std::string* _internal_mutable_ext_value();
  public:

  // @@protoc_insertion_point(class_scope:mead101.mead.DateTime)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> any_attribute_value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ext_value_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class DerivedRecording PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.DerivedRecording) */ {
 public:
  inline DerivedRecording() : DerivedRecording(nullptr) {}
  virtual ~DerivedRecording();

  DerivedRecording(const DerivedRecording& from);
  DerivedRecording(DerivedRecording&& from) noexcept
    : DerivedRecording() {
    *this = ::std::move(from);
  }

  inline DerivedRecording& operator=(const DerivedRecording& from) {
    CopyFrom(from);
    return *this;
  }
  inline DerivedRecording& operator=(DerivedRecording&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DerivedRecording& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DerivedRecording* internal_default_instance() {
    return reinterpret_cast<const DerivedRecording*>(
               &_DerivedRecording_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(DerivedRecording& a, DerivedRecording& b) {
    a.Swap(&b);
  }
  inline void Swap(DerivedRecording* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DerivedRecording* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DerivedRecording* New() const final {
    return CreateMaybeMessage<DerivedRecording>(nullptr);
  }

  DerivedRecording* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DerivedRecording>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DerivedRecording& from);
  void MergeFrom(const DerivedRecording& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DerivedRecording* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.DerivedRecording";
  }
  protected:
  explicit DerivedRecording(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetadataSourceReferenceFieldNumber = 2,
    kTitleFieldNumber = 5,
    kDisplayArtistNameFieldNumber = 1,
    kRelatedResourceTypeFieldNumber = 3,
    kResourceIdFieldNumber = 4,
  };
  // repeated string metadata_source_reference = 2;
  int metadata_source_reference_size() const;
  private:
  int _internal_metadata_source_reference_size() const;
  public:
  void clear_metadata_source_reference();
  const std::string& metadata_source_reference(int index) const;
  std::string* mutable_metadata_source_reference(int index);
  void set_metadata_source_reference(int index, const std::string& value);
  void set_metadata_source_reference(int index, std::string&& value);
  void set_metadata_source_reference(int index, const char* value);
  void set_metadata_source_reference(int index, const char* value, size_t size);
  std::string* add_metadata_source_reference();
  void add_metadata_source_reference(const std::string& value);
  void add_metadata_source_reference(std::string&& value);
  void add_metadata_source_reference(const char* value);
  void add_metadata_source_reference(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& metadata_source_reference() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_metadata_source_reference();
  private:
  const std::string& _internal_metadata_source_reference(int index) const;
  std::string* _internal_add_metadata_source_reference();
  public:

  // repeated .mead101.mead.TitleWithPronunciation title = 5;
  int title_size() const;
  private:
  int _internal_title_size() const;
  public:
  void clear_title();
  ::mead101::mead::TitleWithPronunciation* mutable_title(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::TitleWithPronunciation >*
      mutable_title();
  private:
  const ::mead101::mead::TitleWithPronunciation& _internal_title(int index) const;
  ::mead101::mead::TitleWithPronunciation* _internal_add_title();
  public:
  const ::mead101::mead::TitleWithPronunciation& title(int index) const;
  ::mead101::mead::TitleWithPronunciation* add_title();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::TitleWithPronunciation >&
      title() const;

  // optional .mead101.mead.DisplayArtistNameWithDefault display_artist_name = 1;
  bool has_display_artist_name() const;
  private:
  bool _internal_has_display_artist_name() const;
  public:
  void clear_display_artist_name();
  const ::mead101::mead::DisplayArtistNameWithDefault& display_artist_name() const;
  ::mead101::mead::DisplayArtistNameWithDefault* release_display_artist_name();
  ::mead101::mead::DisplayArtistNameWithDefault* mutable_display_artist_name();
  void set_allocated_display_artist_name(::mead101::mead::DisplayArtistNameWithDefault* display_artist_name);
  private:
  const ::mead101::mead::DisplayArtistNameWithDefault& _internal_display_artist_name() const;
  ::mead101::mead::DisplayArtistNameWithDefault* _internal_mutable_display_artist_name();
  public:
  void unsafe_arena_set_allocated_display_artist_name(
      ::mead101::mead::DisplayArtistNameWithDefault* display_artist_name);
  ::mead101::mead::DisplayArtistNameWithDefault* unsafe_arena_release_display_artist_name();

  // optional .mead101.mead.RelatedResourceType related_resource_type = 3;
  bool has_related_resource_type() const;
  private:
  bool _internal_has_related_resource_type() const;
  public:
  void clear_related_resource_type();
  const ::mead101::mead::RelatedResourceType& related_resource_type() const;
  ::mead101::mead::RelatedResourceType* release_related_resource_type();
  ::mead101::mead::RelatedResourceType* mutable_related_resource_type();
  void set_allocated_related_resource_type(::mead101::mead::RelatedResourceType* related_resource_type);
  private:
  const ::mead101::mead::RelatedResourceType& _internal_related_resource_type() const;
  ::mead101::mead::RelatedResourceType* _internal_mutable_related_resource_type();
  public:
  void unsafe_arena_set_allocated_related_resource_type(
      ::mead101::mead::RelatedResourceType* related_resource_type);
  ::mead101::mead::RelatedResourceType* unsafe_arena_release_related_resource_type();

  // optional .mead101.mead.ResourceId resource_id = 4;
  bool has_resource_id() const;
  private:
  bool _internal_has_resource_id() const;
  public:
  void clear_resource_id();
  const ::mead101::mead::ResourceId& resource_id() const;
  ::mead101::mead::ResourceId* release_resource_id();
  ::mead101::mead::ResourceId* mutable_resource_id();
  void set_allocated_resource_id(::mead101::mead::ResourceId* resource_id);
  private:
  const ::mead101::mead::ResourceId& _internal_resource_id() const;
  ::mead101::mead::ResourceId* _internal_mutable_resource_id();
  public:
  void unsafe_arena_set_allocated_resource_id(
      ::mead101::mead::ResourceId* resource_id);
  ::mead101::mead::ResourceId* unsafe_arena_release_resource_id();

  // @@protoc_insertion_point(class_scope:mead101.mead.DerivedRecording)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> metadata_source_reference_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::TitleWithPronunciation > title_;
  ::mead101::mead::DisplayArtistNameWithDefault* display_artist_name_;
  ::mead101::mead::RelatedResourceType* related_resource_type_;
  ::mead101::mead::ResourceId* resource_id_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class DetailedHashSum PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.DetailedHashSum) */ {
 public:
  inline DetailedHashSum() : DetailedHashSum(nullptr) {}
  virtual ~DetailedHashSum();

  DetailedHashSum(const DetailedHashSum& from);
  DetailedHashSum(DetailedHashSum&& from) noexcept
    : DetailedHashSum() {
    *this = ::std::move(from);
  }

  inline DetailedHashSum& operator=(const DetailedHashSum& from) {
    CopyFrom(from);
    return *this;
  }
  inline DetailedHashSum& operator=(DetailedHashSum&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DetailedHashSum& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DetailedHashSum* internal_default_instance() {
    return reinterpret_cast<const DetailedHashSum*>(
               &_DetailedHashSum_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(DetailedHashSum& a, DetailedHashSum& b) {
    a.Swap(&b);
  }
  inline void Swap(DetailedHashSum* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DetailedHashSum* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DetailedHashSum* New() const final {
    return CreateMaybeMessage<DetailedHashSum>(nullptr);
  }

  DetailedHashSum* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DetailedHashSum>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DetailedHashSum& from);
  void MergeFrom(const DetailedHashSum& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DetailedHashSum* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.DetailedHashSum";
  }
  protected:
  explicit DetailedHashSum(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHashSumValueFieldNumber = 3,
    kParameterFieldNumber = 4,
    kVersionFieldNumber = 5,
    kAlgorithmFieldNumber = 1,
    kDataTypeFieldNumber = 2,
  };
  // optional string hash_sum_value = 3;
  bool has_hash_sum_value() const;
  private:
  bool _internal_has_hash_sum_value() const;
  public:
  void clear_hash_sum_value();
  const std::string& hash_sum_value() const;
  void set_hash_sum_value(const std::string& value);
  void set_hash_sum_value(std::string&& value);
  void set_hash_sum_value(const char* value);
  void set_hash_sum_value(const char* value, size_t size);
  std::string* mutable_hash_sum_value();
  std::string* release_hash_sum_value();
  void set_allocated_hash_sum_value(std::string* hash_sum_value);
  private:
  const std::string& _internal_hash_sum_value() const;
  void _internal_set_hash_sum_value(const std::string& value);
  std::string* _internal_mutable_hash_sum_value();
  public:

  // optional string parameter = 4;
  bool has_parameter() const;
  private:
  bool _internal_has_parameter() const;
  public:
  void clear_parameter();
  const std::string& parameter() const;
  void set_parameter(const std::string& value);
  void set_parameter(std::string&& value);
  void set_parameter(const char* value);
  void set_parameter(const char* value, size_t size);
  std::string* mutable_parameter();
  std::string* release_parameter();
  void set_allocated_parameter(std::string* parameter);
  private:
  const std::string& _internal_parameter() const;
  void _internal_set_parameter(const std::string& value);
  std::string* _internal_mutable_parameter();
  public:

  // optional string version = 5;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // optional .mead101.mead.HashSumAlgorithmType algorithm = 1;
  bool has_algorithm() const;
  private:
  bool _internal_has_algorithm() const;
  public:
  void clear_algorithm();
  const ::mead101::mead::HashSumAlgorithmType& algorithm() const;
  ::mead101::mead::HashSumAlgorithmType* release_algorithm();
  ::mead101::mead::HashSumAlgorithmType* mutable_algorithm();
  void set_allocated_algorithm(::mead101::mead::HashSumAlgorithmType* algorithm);
  private:
  const ::mead101::mead::HashSumAlgorithmType& _internal_algorithm() const;
  ::mead101::mead::HashSumAlgorithmType* _internal_mutable_algorithm();
  public:
  void unsafe_arena_set_allocated_algorithm(
      ::mead101::mead::HashSumAlgorithmType* algorithm);
  ::mead101::mead::HashSumAlgorithmType* unsafe_arena_release_algorithm();

  // optional .mead101.avs.BinaryDataType data_type = 2;
  bool has_data_type() const;
  private:
  bool _internal_has_data_type() const;
  public:
  void clear_data_type();
  const ::mead101::avs::BinaryDataType& data_type() const;
  ::mead101::avs::BinaryDataType* release_data_type();
  ::mead101::avs::BinaryDataType* mutable_data_type();
  void set_allocated_data_type(::mead101::avs::BinaryDataType* data_type);
  private:
  const ::mead101::avs::BinaryDataType& _internal_data_type() const;
  ::mead101::avs::BinaryDataType* _internal_mutable_data_type();
  public:
  void unsafe_arena_set_allocated_data_type(
      ::mead101::avs::BinaryDataType* data_type);
  ::mead101::avs::BinaryDataType* unsafe_arena_release_data_type();

  // @@protoc_insertion_point(class_scope:mead101.mead.DetailedHashSum)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_sum_value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parameter_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::mead101::mead::HashSumAlgorithmType* algorithm_;
  ::mead101::avs::BinaryDataType* data_type_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class DetailedPartyId PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.DetailedPartyId) */ {
 public:
  inline DetailedPartyId() : DetailedPartyId(nullptr) {}
  virtual ~DetailedPartyId();

  DetailedPartyId(const DetailedPartyId& from);
  DetailedPartyId(DetailedPartyId&& from) noexcept
    : DetailedPartyId() {
    *this = ::std::move(from);
  }

  inline DetailedPartyId& operator=(const DetailedPartyId& from) {
    CopyFrom(from);
    return *this;
  }
  inline DetailedPartyId& operator=(DetailedPartyId&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DetailedPartyId& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DetailedPartyId* internal_default_instance() {
    return reinterpret_cast<const DetailedPartyId*>(
               &_DetailedPartyId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(DetailedPartyId& a, DetailedPartyId& b) {
    a.Swap(&b);
  }
  inline void Swap(DetailedPartyId* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DetailedPartyId* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DetailedPartyId* New() const final {
    return CreateMaybeMessage<DetailedPartyId>(nullptr);
  }

  DetailedPartyId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DetailedPartyId>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DetailedPartyId& from);
  void MergeFrom(const DetailedPartyId& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DetailedPartyId* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.DetailedPartyId";
  }
  protected:
  explicit DetailedPartyId(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProprietaryIdFieldNumber = 6,
    kCisacSocietyIdFieldNumber = 1,
    kDPIDFieldNumber = 2,
    kIPNFieldNumber = 3,
    kISNIFieldNumber = 4,
    kIpiNameNumberFieldNumber = 5,
  };
  // repeated .mead101.mead.ProprietaryId proprietary_id = 6;
  int proprietary_id_size() const;
  private:
  int _internal_proprietary_id_size() const;
  public:
  void clear_proprietary_id();
  ::mead101::mead::ProprietaryId* mutable_proprietary_id(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::ProprietaryId >*
      mutable_proprietary_id();
  private:
  const ::mead101::mead::ProprietaryId& _internal_proprietary_id(int index) const;
  ::mead101::mead::ProprietaryId* _internal_add_proprietary_id();
  public:
  const ::mead101::mead::ProprietaryId& proprietary_id(int index) const;
  ::mead101::mead::ProprietaryId* add_proprietary_id();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::ProprietaryId >&
      proprietary_id() const;

  // optional string cisac_society_id = 1;
  bool has_cisac_society_id() const;
  private:
  bool _internal_has_cisac_society_id() const;
  public:
  void clear_cisac_society_id();
  const std::string& cisac_society_id() const;
  void set_cisac_society_id(const std::string& value);
  void set_cisac_society_id(std::string&& value);
  void set_cisac_society_id(const char* value);
  void set_cisac_society_id(const char* value, size_t size);
  std::string* mutable_cisac_society_id();
  std::string* release_cisac_society_id();
  void set_allocated_cisac_society_id(std::string* cisac_society_id);
  private:
  const std::string& _internal_cisac_society_id() const;
  void _internal_set_cisac_society_id(const std::string& value);
  std::string* _internal_mutable_cisac_society_id();
  public:

  // optional string d_p_i_d = 2;
  bool has_d_p_i_d() const;
  private:
  bool _internal_has_d_p_i_d() const;
  public:
  void clear_d_p_i_d();
  const std::string& d_p_i_d() const;
  void set_d_p_i_d(const std::string& value);
  void set_d_p_i_d(std::string&& value);
  void set_d_p_i_d(const char* value);
  void set_d_p_i_d(const char* value, size_t size);
  std::string* mutable_d_p_i_d();
  std::string* release_d_p_i_d();
  void set_allocated_d_p_i_d(std::string* d_p_i_d);
  private:
  const std::string& _internal_d_p_i_d() const;
  void _internal_set_d_p_i_d(const std::string& value);
  std::string* _internal_mutable_d_p_i_d();
  public:

  // optional string i_p_n = 3;
  bool has_i_p_n() const;
  private:
  bool _internal_has_i_p_n() const;
  public:
  void clear_i_p_n();
  const std::string& i_p_n() const;
  void set_i_p_n(const std::string& value);
  void set_i_p_n(std::string&& value);
  void set_i_p_n(const char* value);
  void set_i_p_n(const char* value, size_t size);
  std::string* mutable_i_p_n();
  std::string* release_i_p_n();
  void set_allocated_i_p_n(std::string* i_p_n);
  private:
  const std::string& _internal_i_p_n() const;
  void _internal_set_i_p_n(const std::string& value);
  std::string* _internal_mutable_i_p_n();
  public:

  // optional string i_s_n_i = 4;
  bool has_i_s_n_i() const;
  private:
  bool _internal_has_i_s_n_i() const;
  public:
  void clear_i_s_n_i();
  const std::string& i_s_n_i() const;
  void set_i_s_n_i(const std::string& value);
  void set_i_s_n_i(std::string&& value);
  void set_i_s_n_i(const char* value);
  void set_i_s_n_i(const char* value, size_t size);
  std::string* mutable_i_s_n_i();
  std::string* release_i_s_n_i();
  void set_allocated_i_s_n_i(std::string* i_s_n_i);
  private:
  const std::string& _internal_i_s_n_i() const;
  void _internal_set_i_s_n_i(const std::string& value);
  std::string* _internal_mutable_i_s_n_i();
  public:

  // optional string ipi_name_number = 5;
  bool has_ipi_name_number() const;
  private:
  bool _internal_has_ipi_name_number() const;
  public:
  void clear_ipi_name_number();
  const std::string& ipi_name_number() const;
  void set_ipi_name_number(const std::string& value);
  void set_ipi_name_number(std::string&& value);
  void set_ipi_name_number(const char* value);
  void set_ipi_name_number(const char* value, size_t size);
  std::string* mutable_ipi_name_number();
  std::string* release_ipi_name_number();
  void set_allocated_ipi_name_number(std::string* ipi_name_number);
  private:
  const std::string& _internal_ipi_name_number() const;
  void _internal_set_ipi_name_number(const std::string& value);
  std::string* _internal_mutable_ipi_name_number();
  public:

  // @@protoc_insertion_point(class_scope:mead101.mead.DetailedPartyId)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::ProprietaryId > proprietary_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cisac_society_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr d_p_i_d_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr i_p_n_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr i_s_n_i_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ipi_name_number_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class DisplayArtist PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.DisplayArtist) */ {
 public:
  inline DisplayArtist() : DisplayArtist(nullptr) {}
  virtual ~DisplayArtist();

  DisplayArtist(const DisplayArtist& from);
  DisplayArtist(DisplayArtist&& from) noexcept
    : DisplayArtist() {
    *this = ::std::move(from);
  }

  inline DisplayArtist& operator=(const DisplayArtist& from) {
    CopyFrom(from);
    return *this;
  }
  inline DisplayArtist& operator=(DisplayArtist&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DisplayArtist& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DisplayArtist* internal_default_instance() {
    return reinterpret_cast<const DisplayArtist*>(
               &_DisplayArtist_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(DisplayArtist& a, DisplayArtist& b) {
    a.Swap(&b);
  }
  inline void Swap(DisplayArtist* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DisplayArtist* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DisplayArtist* New() const final {
    return CreateMaybeMessage<DisplayArtist>(nullptr);
  }

  DisplayArtist* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DisplayArtist>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DisplayArtist& from);
  void MergeFrom(const DisplayArtist& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DisplayArtist* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.DisplayArtist";
  }
  protected:
  explicit DisplayArtist(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProprietaryIdFieldNumber = 6,
    kDPIDFieldNumber = 1,
    kDisplayArtistNameFieldNumber = 2,
    kIPNFieldNumber = 3,
    kISNIFieldNumber = 4,
    kIpiNameNumberFieldNumber = 5,
  };
  // repeated .mead101.mead.ProprietaryId proprietary_id = 6;
  int proprietary_id_size() const;
  private:
  int _internal_proprietary_id_size() const;
  public:
  void clear_proprietary_id();
  ::mead101::mead::ProprietaryId* mutable_proprietary_id(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::ProprietaryId >*
      mutable_proprietary_id();
  private:
  const ::mead101::mead::ProprietaryId& _internal_proprietary_id(int index) const;
  ::mead101::mead::ProprietaryId* _internal_add_proprietary_id();
  public:
  const ::mead101::mead::ProprietaryId& proprietary_id(int index) const;
  ::mead101::mead::ProprietaryId* add_proprietary_id();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::ProprietaryId >&
      proprietary_id() const;

  // optional string d_p_i_d = 1;
  bool has_d_p_i_d() const;
  private:
  bool _internal_has_d_p_i_d() const;
  public:
  void clear_d_p_i_d();
  const std::string& d_p_i_d() const;
  void set_d_p_i_d(const std::string& value);
  void set_d_p_i_d(std::string&& value);
  void set_d_p_i_d(const char* value);
  void set_d_p_i_d(const char* value, size_t size);
  std::string* mutable_d_p_i_d();
  std::string* release_d_p_i_d();
  void set_allocated_d_p_i_d(std::string* d_p_i_d);
  private:
  const std::string& _internal_d_p_i_d() const;
  void _internal_set_d_p_i_d(const std::string& value);
  std::string* _internal_mutable_d_p_i_d();
  public:

  // optional string display_artist_name = 2;
  bool has_display_artist_name() const;
  private:
  bool _internal_has_display_artist_name() const;
  public:
  void clear_display_artist_name();
  const std::string& display_artist_name() const;
  void set_display_artist_name(const std::string& value);
  void set_display_artist_name(std::string&& value);
  void set_display_artist_name(const char* value);
  void set_display_artist_name(const char* value, size_t size);
  std::string* mutable_display_artist_name();
  std::string* release_display_artist_name();
  void set_allocated_display_artist_name(std::string* display_artist_name);
  private:
  const std::string& _internal_display_artist_name() const;
  void _internal_set_display_artist_name(const std::string& value);
  std::string* _internal_mutable_display_artist_name();
  public:

  // optional string i_p_n = 3;
  bool has_i_p_n() const;
  private:
  bool _internal_has_i_p_n() const;
  public:
  void clear_i_p_n();
  const std::string& i_p_n() const;
  void set_i_p_n(const std::string& value);
  void set_i_p_n(std::string&& value);
  void set_i_p_n(const char* value);
  void set_i_p_n(const char* value, size_t size);
  std::string* mutable_i_p_n();
  std::string* release_i_p_n();
  void set_allocated_i_p_n(std::string* i_p_n);
  private:
  const std::string& _internal_i_p_n() const;
  void _internal_set_i_p_n(const std::string& value);
  std::string* _internal_mutable_i_p_n();
  public:

  // optional string i_s_n_i = 4;
  bool has_i_s_n_i() const;
  private:
  bool _internal_has_i_s_n_i() const;
  public:
  void clear_i_s_n_i();
  const std::string& i_s_n_i() const;
  void set_i_s_n_i(const std::string& value);
  void set_i_s_n_i(std::string&& value);
  void set_i_s_n_i(const char* value);
  void set_i_s_n_i(const char* value, size_t size);
  std::string* mutable_i_s_n_i();
  std::string* release_i_s_n_i();
  void set_allocated_i_s_n_i(std::string* i_s_n_i);
  private:
  const std::string& _internal_i_s_n_i() const;
  void _internal_set_i_s_n_i(const std::string& value);
  std::string* _internal_mutable_i_s_n_i();
  public:

  // optional string ipi_name_number = 5;
  bool has_ipi_name_number() const;
  private:
  bool _internal_has_ipi_name_number() const;
  public:
  void clear_ipi_name_number();
  const std::string& ipi_name_number() const;
  void set_ipi_name_number(const std::string& value);
  void set_ipi_name_number(std::string&& value);
  void set_ipi_name_number(const char* value);
  void set_ipi_name_number(const char* value, size_t size);
  std::string* mutable_ipi_name_number();
  std::string* release_ipi_name_number();
  void set_allocated_ipi_name_number(std::string* ipi_name_number);
  private:
  const std::string& _internal_ipi_name_number() const;
  void _internal_set_ipi_name_number(const std::string& value);
  std::string* _internal_mutable_ipi_name_number();
  public:

  // @@protoc_insertion_point(class_scope:mead101.mead.DisplayArtist)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::ProprietaryId > proprietary_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr d_p_i_d_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr display_artist_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr i_p_n_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr i_s_n_i_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ipi_name_number_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class DisplayArtistNameWithDefault PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.DisplayArtistNameWithDefault) */ {
 public:
  inline DisplayArtistNameWithDefault() : DisplayArtistNameWithDefault(nullptr) {}
  virtual ~DisplayArtistNameWithDefault();

  DisplayArtistNameWithDefault(const DisplayArtistNameWithDefault& from);
  DisplayArtistNameWithDefault(DisplayArtistNameWithDefault&& from) noexcept
    : DisplayArtistNameWithDefault() {
    *this = ::std::move(from);
  }

  inline DisplayArtistNameWithDefault& operator=(const DisplayArtistNameWithDefault& from) {
    CopyFrom(from);
    return *this;
  }
  inline DisplayArtistNameWithDefault& operator=(DisplayArtistNameWithDefault&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DisplayArtistNameWithDefault& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DisplayArtistNameWithDefault* internal_default_instance() {
    return reinterpret_cast<const DisplayArtistNameWithDefault*>(
               &_DisplayArtistNameWithDefault_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(DisplayArtistNameWithDefault& a, DisplayArtistNameWithDefault& b) {
    a.Swap(&b);
  }
  inline void Swap(DisplayArtistNameWithDefault* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DisplayArtistNameWithDefault* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DisplayArtistNameWithDefault* New() const final {
    return CreateMaybeMessage<DisplayArtistNameWithDefault>(nullptr);
  }

  DisplayArtistNameWithDefault* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DisplayArtistNameWithDefault>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DisplayArtistNameWithDefault& from);
  void MergeFrom(const DisplayArtistNameWithDefault& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DisplayArtistNameWithDefault* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.DisplayArtistNameWithDefault";
  }
  protected:
  explicit DisplayArtistNameWithDefault(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLanguageAndScriptCodeFieldNumber = 3,
    kExtValueFieldNumber = 4,
    kApplicableTerritoryCodeFieldNumber = 1,
    kIsDefaultFieldNumber = 2,
  };
  // optional string language_and_script_code = 3;
  bool has_language_and_script_code() const;
  private:
  bool _internal_has_language_and_script_code() const;
  public:
  void clear_language_and_script_code();
  const std::string& language_and_script_code() const;
  void set_language_and_script_code(const std::string& value);
  void set_language_and_script_code(std::string&& value);
  void set_language_and_script_code(const char* value);
  void set_language_and_script_code(const char* value, size_t size);
  std::string* mutable_language_and_script_code();
  std::string* release_language_and_script_code();
  void set_allocated_language_and_script_code(std::string* language_and_script_code);
  private:
  const std::string& _internal_language_and_script_code() const;
  void _internal_set_language_and_script_code(const std::string& value);
  std::string* _internal_mutable_language_and_script_code();
  public:

  // optional string ext_value = 4;
  bool has_ext_value() const;
  private:
  bool _internal_has_ext_value() const;
  public:
  void clear_ext_value();
  const std::string& ext_value() const;
  void set_ext_value(const std::string& value);
  void set_ext_value(std::string&& value);
  void set_ext_value(const char* value);
  void set_ext_value(const char* value, size_t size);
  std::string* mutable_ext_value();
  std::string* release_ext_value();
  void set_allocated_ext_value(std::string* ext_value);
  private:
  const std::string& _internal_ext_value() const;
  void _internal_set_ext_value(const std::string& value);
  std::string* _internal_mutable_ext_value();
  public:

  // optional .mead101.avs.CurrentTerritoryCode applicable_territory_code = 1;
  bool has_applicable_territory_code() const;
  private:
  bool _internal_has_applicable_territory_code() const;
  public:
  void clear_applicable_territory_code();
  const ::mead101::avs::CurrentTerritoryCode& applicable_territory_code() const;
  ::mead101::avs::CurrentTerritoryCode* release_applicable_territory_code();
  ::mead101::avs::CurrentTerritoryCode* mutable_applicable_territory_code();
  void set_allocated_applicable_territory_code(::mead101::avs::CurrentTerritoryCode* applicable_territory_code);
  private:
  const ::mead101::avs::CurrentTerritoryCode& _internal_applicable_territory_code() const;
  ::mead101::avs::CurrentTerritoryCode* _internal_mutable_applicable_territory_code();
  public:
  void unsafe_arena_set_allocated_applicable_territory_code(
      ::mead101::avs::CurrentTerritoryCode* applicable_territory_code);
  ::mead101::avs::CurrentTerritoryCode* unsafe_arena_release_applicable_territory_code();

  // optional bool is_default = 2;
  bool has_is_default() const;
  private:
  bool _internal_has_is_default() const;
  public:
  void clear_is_default();
  bool is_default() const;
  void set_is_default(bool value);
  private:
  bool _internal_is_default() const;
  void _internal_set_is_default(bool value);
  public:

  // @@protoc_insertion_point(class_scope:mead101.mead.DisplayArtistNameWithDefault)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_and_script_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ext_value_;
  ::mead101::avs::CurrentTerritoryCode* applicable_territory_code_;
  bool is_default_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class DisplayArtistNameWithPronunciation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.DisplayArtistNameWithPronunciation) */ {
 public:
  inline DisplayArtistNameWithPronunciation() : DisplayArtistNameWithPronunciation(nullptr) {}
  virtual ~DisplayArtistNameWithPronunciation();

  DisplayArtistNameWithPronunciation(const DisplayArtistNameWithPronunciation& from);
  DisplayArtistNameWithPronunciation(DisplayArtistNameWithPronunciation&& from) noexcept
    : DisplayArtistNameWithPronunciation() {
    *this = ::std::move(from);
  }

  inline DisplayArtistNameWithPronunciation& operator=(const DisplayArtistNameWithPronunciation& from) {
    CopyFrom(from);
    return *this;
  }
  inline DisplayArtistNameWithPronunciation& operator=(DisplayArtistNameWithPronunciation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DisplayArtistNameWithPronunciation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DisplayArtistNameWithPronunciation* internal_default_instance() {
    return reinterpret_cast<const DisplayArtistNameWithPronunciation*>(
               &_DisplayArtistNameWithPronunciation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(DisplayArtistNameWithPronunciation& a, DisplayArtistNameWithPronunciation& b) {
    a.Swap(&b);
  }
  inline void Swap(DisplayArtistNameWithPronunciation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DisplayArtistNameWithPronunciation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DisplayArtistNameWithPronunciation* New() const final {
    return CreateMaybeMessage<DisplayArtistNameWithPronunciation>(nullptr);
  }

  DisplayArtistNameWithPronunciation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DisplayArtistNameWithPronunciation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DisplayArtistNameWithPronunciation& from);
  void MergeFrom(const DisplayArtistNameWithPronunciation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DisplayArtistNameWithPronunciation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.DisplayArtistNameWithPronunciation";
  }
  protected:
  explicit DisplayArtistNameWithPronunciation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPronunciationFieldNumber = 2,
    kNameFieldNumber = 1,
  };
  // repeated .mead101.mead.Pronunciation pronunciation = 2;
  int pronunciation_size() const;
  private:
  int _internal_pronunciation_size() const;
  public:
  void clear_pronunciation();
  ::mead101::mead::Pronunciation* mutable_pronunciation(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Pronunciation >*
      mutable_pronunciation();
  private:
  const ::mead101::mead::Pronunciation& _internal_pronunciation(int index) const;
  ::mead101::mead::Pronunciation* _internal_add_pronunciation();
  public:
  const ::mead101::mead::Pronunciation& pronunciation(int index) const;
  ::mead101::mead::Pronunciation* add_pronunciation();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Pronunciation >&
      pronunciation() const;

  // optional .mead101.mead.DisplayArtistNameWithDefault name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const ::mead101::mead::DisplayArtistNameWithDefault& name() const;
  ::mead101::mead::DisplayArtistNameWithDefault* release_name();
  ::mead101::mead::DisplayArtistNameWithDefault* mutable_name();
  void set_allocated_name(::mead101::mead::DisplayArtistNameWithDefault* name);
  private:
  const ::mead101::mead::DisplayArtistNameWithDefault& _internal_name() const;
  ::mead101::mead::DisplayArtistNameWithDefault* _internal_mutable_name();
  public:
  void unsafe_arena_set_allocated_name(
      ::mead101::mead::DisplayArtistNameWithDefault* name);
  ::mead101::mead::DisplayArtistNameWithDefault* unsafe_arena_release_name();

  // @@protoc_insertion_point(class_scope:mead101.mead.DisplayArtistNameWithPronunciation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Pronunciation > pronunciation_;
  ::mead101::mead::DisplayArtistNameWithDefault* name_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class DisplaySubTitle PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.DisplaySubTitle) */ {
 public:
  inline DisplaySubTitle() : DisplaySubTitle(nullptr) {}
  virtual ~DisplaySubTitle();

  DisplaySubTitle(const DisplaySubTitle& from);
  DisplaySubTitle(DisplaySubTitle&& from) noexcept
    : DisplaySubTitle() {
    *this = ::std::move(from);
  }

  inline DisplaySubTitle& operator=(const DisplaySubTitle& from) {
    CopyFrom(from);
    return *this;
  }
  inline DisplaySubTitle& operator=(DisplaySubTitle&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DisplaySubTitle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DisplaySubTitle* internal_default_instance() {
    return reinterpret_cast<const DisplaySubTitle*>(
               &_DisplaySubTitle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(DisplaySubTitle& a, DisplaySubTitle& b) {
    a.Swap(&b);
  }
  inline void Swap(DisplaySubTitle* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DisplaySubTitle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DisplaySubTitle* New() const final {
    return CreateMaybeMessage<DisplaySubTitle>(nullptr);
  }

  DisplaySubTitle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DisplaySubTitle>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DisplaySubTitle& from);
  void MergeFrom(const DisplaySubTitle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DisplaySubTitle* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.DisplaySubTitle";
  }
  protected:
  explicit DisplaySubTitle(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPronunciationFieldNumber = 3,
    kNamespaceFieldNumber = 2,
    kSubTitleTypeFieldNumber = 5,
    kTitleFieldNumber = 6,
    kUserDefinedValueFieldNumber = 7,
    kIsDisplayedInTitleFieldNumber = 1,
    kSequenceNumberFieldNumber = 4,
  };
  // repeated .mead101.mead.Pronunciation pronunciation = 3;
  int pronunciation_size() const;
  private:
  int _internal_pronunciation_size() const;
  public:
  void clear_pronunciation();
  ::mead101::mead::Pronunciation* mutable_pronunciation(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Pronunciation >*
      mutable_pronunciation();
  private:
  const ::mead101::mead::Pronunciation& _internal_pronunciation(int index) const;
  ::mead101::mead::Pronunciation* _internal_add_pronunciation();
  public:
  const ::mead101::mead::Pronunciation& pronunciation(int index) const;
  ::mead101::mead::Pronunciation* add_pronunciation();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Pronunciation >&
      pronunciation() const;

  // optional string namespace = 2;
  bool has_namespace_() const;
  private:
  bool _internal_has_namespace_() const;
  public:
  void clear_namespace_();
  const std::string& namespace_() const;
  void set_namespace_(const std::string& value);
  void set_namespace_(std::string&& value);
  void set_namespace_(const char* value);
  void set_namespace_(const char* value, size_t size);
  std::string* mutable_namespace_();
  std::string* release_namespace_();
  void set_allocated_namespace_(std::string* namespace_);
  private:
  const std::string& _internal_namespace_() const;
  void _internal_set_namespace_(const std::string& value);
  std::string* _internal_mutable_namespace_();
  public:

  // optional string sub_title_type = 5;
  bool has_sub_title_type() const;
  private:
  bool _internal_has_sub_title_type() const;
  public:
  void clear_sub_title_type();
  const std::string& sub_title_type() const;
  void set_sub_title_type(const std::string& value);
  void set_sub_title_type(std::string&& value);
  void set_sub_title_type(const char* value);
  void set_sub_title_type(const char* value, size_t size);
  std::string* mutable_sub_title_type();
  std::string* release_sub_title_type();
  void set_allocated_sub_title_type(std::string* sub_title_type);
  private:
  const std::string& _internal_sub_title_type() const;
  void _internal_set_sub_title_type(const std::string& value);
  std::string* _internal_mutable_sub_title_type();
  public:

  // optional string title = 6;
  bool has_title() const;
  private:
  bool _internal_has_title() const;
  public:
  void clear_title();
  const std::string& title() const;
  void set_title(const std::string& value);
  void set_title(std::string&& value);
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  std::string* mutable_title();
  std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // optional string user_defined_value = 7;
  bool has_user_defined_value() const;
  private:
  bool _internal_has_user_defined_value() const;
  public:
  void clear_user_defined_value();
  const std::string& user_defined_value() const;
  void set_user_defined_value(const std::string& value);
  void set_user_defined_value(std::string&& value);
  void set_user_defined_value(const char* value);
  void set_user_defined_value(const char* value, size_t size);
  std::string* mutable_user_defined_value();
  std::string* release_user_defined_value();
  void set_allocated_user_defined_value(std::string* user_defined_value);
  private:
  const std::string& _internal_user_defined_value() const;
  void _internal_set_user_defined_value(const std::string& value);
  std::string* _internal_mutable_user_defined_value();
  public:

  // optional bool is_displayed_in_title = 1;
  bool has_is_displayed_in_title() const;
  private:
  bool _internal_has_is_displayed_in_title() const;
  public:
  void clear_is_displayed_in_title();
  bool is_displayed_in_title() const;
  void set_is_displayed_in_title(bool value);
  private:
  bool _internal_is_displayed_in_title() const;
  void _internal_set_is_displayed_in_title(bool value);
  public:

  // optional int32 sequence_number = 4;
  bool has_sequence_number() const;
  private:
  bool _internal_has_sequence_number() const;
  public:
  void clear_sequence_number();
  ::PROTOBUF_NAMESPACE_ID::int32 sequence_number() const;
  void set_sequence_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sequence_number() const;
  void _internal_set_sequence_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mead101.mead.DisplaySubTitle)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Pronunciation > pronunciation_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr namespace__;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sub_title_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_defined_value_;
  bool is_displayed_in_title_;
  ::PROTOBUF_NAMESPACE_ID::int32 sequence_number_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class DisplayTitle PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.DisplayTitle) */ {
 public:
  inline DisplayTitle() : DisplayTitle(nullptr) {}
  virtual ~DisplayTitle();

  DisplayTitle(const DisplayTitle& from);
  DisplayTitle(DisplayTitle&& from) noexcept
    : DisplayTitle() {
    *this = ::std::move(from);
  }

  inline DisplayTitle& operator=(const DisplayTitle& from) {
    CopyFrom(from);
    return *this;
  }
  inline DisplayTitle& operator=(DisplayTitle&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DisplayTitle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DisplayTitle* internal_default_instance() {
    return reinterpret_cast<const DisplayTitle*>(
               &_DisplayTitle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(DisplayTitle& a, DisplayTitle& b) {
    a.Swap(&b);
  }
  inline void Swap(DisplayTitle* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DisplayTitle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DisplayTitle* New() const final {
    return CreateMaybeMessage<DisplayTitle>(nullptr);
  }

  DisplayTitle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DisplayTitle>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DisplayTitle& from);
  void MergeFrom(const DisplayTitle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DisplayTitle* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.DisplayTitle";
  }
  protected:
  explicit DisplayTitle(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubTitleFieldNumber = 4,
    kLanguageAndScriptCodeFieldNumber = 3,
    kApplicableTerritoryCodeFieldNumber = 1,
    kTitleTextFieldNumber = 5,
    kIsDefaultFieldNumber = 2,
  };
  // repeated .mead101.mead.DisplaySubTitle sub_title = 4;
  int sub_title_size() const;
  private:
  int _internal_sub_title_size() const;
  public:
  void clear_sub_title();
  ::mead101::mead::DisplaySubTitle* mutable_sub_title(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::DisplaySubTitle >*
      mutable_sub_title();
  private:
  const ::mead101::mead::DisplaySubTitle& _internal_sub_title(int index) const;
  ::mead101::mead::DisplaySubTitle* _internal_add_sub_title();
  public:
  const ::mead101::mead::DisplaySubTitle& sub_title(int index) const;
  ::mead101::mead::DisplaySubTitle* add_sub_title();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::DisplaySubTitle >&
      sub_title() const;

  // optional string language_and_script_code = 3;
  bool has_language_and_script_code() const;
  private:
  bool _internal_has_language_and_script_code() const;
  public:
  void clear_language_and_script_code();
  const std::string& language_and_script_code() const;
  void set_language_and_script_code(const std::string& value);
  void set_language_and_script_code(std::string&& value);
  void set_language_and_script_code(const char* value);
  void set_language_and_script_code(const char* value, size_t size);
  std::string* mutable_language_and_script_code();
  std::string* release_language_and_script_code();
  void set_allocated_language_and_script_code(std::string* language_and_script_code);
  private:
  const std::string& _internal_language_and_script_code() const;
  void _internal_set_language_and_script_code(const std::string& value);
  std::string* _internal_mutable_language_and_script_code();
  public:

  // optional .mead101.avs.CurrentTerritoryCode applicable_territory_code = 1;
  bool has_applicable_territory_code() const;
  private:
  bool _internal_has_applicable_territory_code() const;
  public:
  void clear_applicable_territory_code();
  const ::mead101::avs::CurrentTerritoryCode& applicable_territory_code() const;
  ::mead101::avs::CurrentTerritoryCode* release_applicable_territory_code();
  ::mead101::avs::CurrentTerritoryCode* mutable_applicable_territory_code();
  void set_allocated_applicable_territory_code(::mead101::avs::CurrentTerritoryCode* applicable_territory_code);
  private:
  const ::mead101::avs::CurrentTerritoryCode& _internal_applicable_territory_code() const;
  ::mead101::avs::CurrentTerritoryCode* _internal_mutable_applicable_territory_code();
  public:
  void unsafe_arena_set_allocated_applicable_territory_code(
      ::mead101::avs::CurrentTerritoryCode* applicable_territory_code);
  ::mead101::avs::CurrentTerritoryCode* unsafe_arena_release_applicable_territory_code();

  // optional .mead101.mead.TitleTextWithPronunciation title_text = 5;
  bool has_title_text() const;
  private:
  bool _internal_has_title_text() const;
  public:
  void clear_title_text();
  const ::mead101::mead::TitleTextWithPronunciation& title_text() const;
  ::mead101::mead::TitleTextWithPronunciation* release_title_text();
  ::mead101::mead::TitleTextWithPronunciation* mutable_title_text();
  void set_allocated_title_text(::mead101::mead::TitleTextWithPronunciation* title_text);
  private:
  const ::mead101::mead::TitleTextWithPronunciation& _internal_title_text() const;
  ::mead101::mead::TitleTextWithPronunciation* _internal_mutable_title_text();
  public:
  void unsafe_arena_set_allocated_title_text(
      ::mead101::mead::TitleTextWithPronunciation* title_text);
  ::mead101::mead::TitleTextWithPronunciation* unsafe_arena_release_title_text();

  // optional bool is_default = 2;
  bool has_is_default() const;
  private:
  bool _internal_has_is_default() const;
  public:
  void clear_is_default();
  bool is_default() const;
  void set_is_default(bool value);
  private:
  bool _internal_is_default() const;
  void _internal_set_is_default(bool value);
  public:

  // @@protoc_insertion_point(class_scope:mead101.mead.DisplayTitle)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::DisplaySubTitle > sub_title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_and_script_code_;
  ::mead101::avs::CurrentTerritoryCode* applicable_territory_code_;
  ::mead101::mead::TitleTextWithPronunciation* title_text_;
  bool is_default_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class Duration PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.Duration) */ {
 public:
  inline Duration() : Duration(nullptr) {}
  virtual ~Duration();

  Duration(const Duration& from);
  Duration(Duration&& from) noexcept
    : Duration() {
    *this = ::std::move(from);
  }

  inline Duration& operator=(const Duration& from) {
    CopyFrom(from);
    return *this;
  }
  inline Duration& operator=(Duration&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Duration& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Duration* internal_default_instance() {
    return reinterpret_cast<const Duration*>(
               &_Duration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(Duration& a, Duration& b) {
    a.Swap(&b);
  }
  inline void Swap(Duration* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Duration* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Duration* New() const final {
    return CreateMaybeMessage<Duration>(nullptr);
  }

  Duration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Duration>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Duration& from);
  void MergeFrom(const Duration& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Duration* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.Duration";
  }
  protected:
  explicit Duration(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNamespaceFieldNumber = 1,
    kUserDefinedValueFieldNumber = 3,
    kExtValueFieldNumber = 4,
    kUnitOfDurationFieldNumber = 2,
  };
  // optional string namespace = 1;
  bool has_namespace_() const;
  private:
  bool _internal_has_namespace_() const;
  public:
  void clear_namespace_();
  const std::string& namespace_() const;
  void set_namespace_(const std::string& value);
  void set_namespace_(std::string&& value);
  void set_namespace_(const char* value);
  void set_namespace_(const char* value, size_t size);
  std::string* mutable_namespace_();
  std::string* release_namespace_();
  void set_allocated_namespace_(std::string* namespace_);
  private:
  const std::string& _internal_namespace_() const;
  void _internal_set_namespace_(const std::string& value);
  std::string* _internal_mutable_namespace_();
  public:

  // optional string user_defined_value = 3;
  bool has_user_defined_value() const;
  private:
  bool _internal_has_user_defined_value() const;
  public:
  void clear_user_defined_value();
  const std::string& user_defined_value() const;
  void set_user_defined_value(const std::string& value);
  void set_user_defined_value(std::string&& value);
  void set_user_defined_value(const char* value);
  void set_user_defined_value(const char* value, size_t size);
  std::string* mutable_user_defined_value();
  std::string* release_user_defined_value();
  void set_allocated_user_defined_value(std::string* user_defined_value);
  private:
  const std::string& _internal_user_defined_value() const;
  void _internal_set_user_defined_value(const std::string& value);
  std::string* _internal_mutable_user_defined_value();
  public:

  // optional string ext_value = 4;
  bool has_ext_value() const;
  private:
  bool _internal_has_ext_value() const;
  public:
  void clear_ext_value();
  const std::string& ext_value() const;
  void set_ext_value(const std::string& value);
  void set_ext_value(std::string&& value);
  void set_ext_value(const char* value);
  void set_ext_value(const char* value, size_t size);
  std::string* mutable_ext_value();
  std::string* release_ext_value();
  void set_allocated_ext_value(std::string* ext_value);
  private:
  const std::string& _internal_ext_value() const;
  void _internal_set_ext_value(const std::string& value);
  std::string* _internal_mutable_ext_value();
  public:

  // optional .mead101.avs.UnitOfDuration unit_of_duration = 2;
  bool has_unit_of_duration() const;
  private:
  bool _internal_has_unit_of_duration() const;
  public:
  void clear_unit_of_duration();
  const ::mead101::avs::UnitOfDuration& unit_of_duration() const;
  ::mead101::avs::UnitOfDuration* release_unit_of_duration();
  ::mead101::avs::UnitOfDuration* mutable_unit_of_duration();
  void set_allocated_unit_of_duration(::mead101::avs::UnitOfDuration* unit_of_duration);
  private:
  const ::mead101::avs::UnitOfDuration& _internal_unit_of_duration() const;
  ::mead101::avs::UnitOfDuration* _internal_mutable_unit_of_duration();
  public:
  void unsafe_arena_set_allocated_unit_of_duration(
      ::mead101::avs::UnitOfDuration* unit_of_duration);
  ::mead101::avs::UnitOfDuration* unsafe_arena_release_unit_of_duration();

  // @@protoc_insertion_point(class_scope:mead101.mead.Duration)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr namespace__;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_defined_value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ext_value_;
  ::mead101::avs::UnitOfDuration* unit_of_duration_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class Entry PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.Entry) */ {
 public:
  inline Entry() : Entry(nullptr) {}
  virtual ~Entry();

  Entry(const Entry& from);
  Entry(Entry&& from) noexcept
    : Entry() {
    *this = ::std::move(from);
  }

  inline Entry& operator=(const Entry& from) {
    CopyFrom(from);
    return *this;
  }
  inline Entry& operator=(Entry&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Entry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Entry* internal_default_instance() {
    return reinterpret_cast<const Entry*>(
               &_Entry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(Entry& a, Entry& b) {
    a.Swap(&b);
  }
  inline void Swap(Entry* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Entry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Entry* New() const final {
    return CreateMaybeMessage<Entry>(nullptr);
  }

  Entry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Entry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Entry& from);
  void MergeFrom(const Entry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Entry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.Entry";
  }
  protected:
  explicit Entry(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnyAttributeValueFieldNumber = 6,
    kAuthorFieldNumber = 7,
    kCategoryFieldNumber = 8,
    kContributorFieldNumber = 10,
    kLinkFieldNumber = 12,
    kSubscriptionIdFieldNumber = 4,
    kPartyFieldNumber = 1,
    kReleaseFieldNumber = 2,
    kResourceFieldNumber = 3,
    kWorkFieldNumber = 5,
    kContentFieldNumber = 9,
    kIdFieldNumber = 11,
    kPublishedFieldNumber = 13,
    kRightsFieldNumber = 14,
    kSourceFieldNumber = 15,
    kSummaryFieldNumber = 16,
    kTitleFieldNumber = 17,
    kUpdatedFieldNumber = 18,
  };
  // repeated string any_attribute_value = 6;
  int any_attribute_value_size() const;
  private:
  int _internal_any_attribute_value_size() const;
  public:
  void clear_any_attribute_value();
  const std::string& any_attribute_value(int index) const;
  std::string* mutable_any_attribute_value(int index);
  void set_any_attribute_value(int index, const std::string& value);
  void set_any_attribute_value(int index, std::string&& value);
  void set_any_attribute_value(int index, const char* value);
  void set_any_attribute_value(int index, const char* value, size_t size);
  std::string* add_any_attribute_value();
  void add_any_attribute_value(const std::string& value);
  void add_any_attribute_value(std::string&& value);
  void add_any_attribute_value(const char* value);
  void add_any_attribute_value(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& any_attribute_value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_any_attribute_value();
  private:
  const std::string& _internal_any_attribute_value(int index) const;
  std::string* _internal_add_any_attribute_value();
  public:

  // repeated .mead101.mead.Person author = 7;
  int author_size() const;
  private:
  int _internal_author_size() const;
  public:
  void clear_author();
  ::mead101::mead::Person* mutable_author(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Person >*
      mutable_author();
  private:
  const ::mead101::mead::Person& _internal_author(int index) const;
  ::mead101::mead::Person* _internal_add_author();
  public:
  const ::mead101::mead::Person& author(int index) const;
  ::mead101::mead::Person* add_author();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Person >&
      author() const;

  // repeated .mead101.mead.Category category = 8;
  int category_size() const;
  private:
  int _internal_category_size() const;
  public:
  void clear_category();
  ::mead101::mead::Category* mutable_category(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Category >*
      mutable_category();
  private:
  const ::mead101::mead::Category& _internal_category(int index) const;
  ::mead101::mead::Category* _internal_add_category();
  public:
  const ::mead101::mead::Category& category(int index) const;
  ::mead101::mead::Category* add_category();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Category >&
      category() const;

  // repeated .mead101.mead.Person contributor = 10;
  int contributor_size() const;
  private:
  int _internal_contributor_size() const;
  public:
  void clear_contributor();
  ::mead101::mead::Person* mutable_contributor(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Person >*
      mutable_contributor();
  private:
  const ::mead101::mead::Person& _internal_contributor(int index) const;
  ::mead101::mead::Person* _internal_add_contributor();
  public:
  const ::mead101::mead::Person& contributor(int index) const;
  ::mead101::mead::Person* add_contributor();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Person >&
      contributor() const;

  // repeated .mead101.mead.Link link = 12;
  int link_size() const;
  private:
  int _internal_link_size() const;
  public:
  void clear_link();
  ::mead101::mead::Link* mutable_link(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Link >*
      mutable_link();
  private:
  const ::mead101::mead::Link& _internal_link(int index) const;
  ::mead101::mead::Link* _internal_add_link();
  public:
  const ::mead101::mead::Link& link(int index) const;
  ::mead101::mead::Link* add_link();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Link >&
      link() const;

  // optional string subscription_id = 4;
  bool has_subscription_id() const;
  private:
  bool _internal_has_subscription_id() const;
  public:
  void clear_subscription_id();
  const std::string& subscription_id() const;
  void set_subscription_id(const std::string& value);
  void set_subscription_id(std::string&& value);
  void set_subscription_id(const char* value);
  void set_subscription_id(const char* value, size_t size);
  std::string* mutable_subscription_id();
  std::string* release_subscription_id();
  void set_allocated_subscription_id(std::string* subscription_id);
  private:
  const std::string& _internal_subscription_id() const;
  void _internal_set_subscription_id(const std::string& value);
  std::string* _internal_mutable_subscription_id();
  public:

  // optional .mead101.mead.Party party = 1;
  bool has_party() const;
  private:
  bool _internal_has_party() const;
  public:
  void clear_party();
  const ::mead101::mead::Party& party() const;
  ::mead101::mead::Party* release_party();
  ::mead101::mead::Party* mutable_party();
  void set_allocated_party(::mead101::mead::Party* party);
  private:
  const ::mead101::mead::Party& _internal_party() const;
  ::mead101::mead::Party* _internal_mutable_party();
  public:
  void unsafe_arena_set_allocated_party(
      ::mead101::mead::Party* party);
  ::mead101::mead::Party* unsafe_arena_release_party();

  // optional .mead101.mead.Release release = 2;
  bool has_release() const;
  private:
  bool _internal_has_release() const;
  public:
  void clear_release();
  const ::mead101::mead::Release& release() const;
  ::mead101::mead::Release* release_release();
  ::mead101::mead::Release* mutable_release();
  void set_allocated_release(::mead101::mead::Release* release);
  private:
  const ::mead101::mead::Release& _internal_release() const;
  ::mead101::mead::Release* _internal_mutable_release();
  public:
  void unsafe_arena_set_allocated_release(
      ::mead101::mead::Release* release);
  ::mead101::mead::Release* unsafe_arena_release_release();

  // optional .mead101.mead.Resource resource = 3;
  bool has_resource() const;
  private:
  bool _internal_has_resource() const;
  public:
  void clear_resource();
  const ::mead101::mead::Resource& resource() const;
  ::mead101::mead::Resource* release_resource();
  ::mead101::mead::Resource* mutable_resource();
  void set_allocated_resource(::mead101::mead::Resource* resource);
  private:
  const ::mead101::mead::Resource& _internal_resource() const;
  ::mead101::mead::Resource* _internal_mutable_resource();
  public:
  void unsafe_arena_set_allocated_resource(
      ::mead101::mead::Resource* resource);
  ::mead101::mead::Resource* unsafe_arena_release_resource();

  // optional .mead101.mead.Work work = 5;
  bool has_work() const;
  private:
  bool _internal_has_work() const;
  public:
  void clear_work();
  const ::mead101::mead::Work& work() const;
  ::mead101::mead::Work* release_work();
  ::mead101::mead::Work* mutable_work();
  void set_allocated_work(::mead101::mead::Work* work);
  private:
  const ::mead101::mead::Work& _internal_work() const;
  ::mead101::mead::Work* _internal_mutable_work();
  public:
  void unsafe_arena_set_allocated_work(
      ::mead101::mead::Work* work);
  ::mead101::mead::Work* unsafe_arena_release_work();

  // optional .mead101.mead.Content content = 9;
  bool has_content() const;
  private:
  bool _internal_has_content() const;
  public:
  void clear_content();
  const ::mead101::mead::Content& content() const;
  ::mead101::mead::Content* release_content();
  ::mead101::mead::Content* mutable_content();
  void set_allocated_content(::mead101::mead::Content* content);
  private:
  const ::mead101::mead::Content& _internal_content() const;
  ::mead101::mead::Content* _internal_mutable_content();
  public:
  void unsafe_arena_set_allocated_content(
      ::mead101::mead::Content* content);
  ::mead101::mead::Content* unsafe_arena_release_content();

  // optional .mead101.mead.Id id = 11;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::mead101::mead::Id& id() const;
  ::mead101::mead::Id* release_id();
  ::mead101::mead::Id* mutable_id();
  void set_allocated_id(::mead101::mead::Id* id);
  private:
  const ::mead101::mead::Id& _internal_id() const;
  ::mead101::mead::Id* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::mead101::mead::Id* id);
  ::mead101::mead::Id* unsafe_arena_release_id();

  // optional .mead101.mead.DateTime published = 13;
  bool has_published() const;
  private:
  bool _internal_has_published() const;
  public:
  void clear_published();
  const ::mead101::mead::DateTime& published() const;
  ::mead101::mead::DateTime* release_published();
  ::mead101::mead::DateTime* mutable_published();
  void set_allocated_published(::mead101::mead::DateTime* published);
  private:
  const ::mead101::mead::DateTime& _internal_published() const;
  ::mead101::mead::DateTime* _internal_mutable_published();
  public:
  void unsafe_arena_set_allocated_published(
      ::mead101::mead::DateTime* published);
  ::mead101::mead::DateTime* unsafe_arena_release_published();

  // optional .mead101.mead.Text rights = 14;
  bool has_rights() const;
  private:
  bool _internal_has_rights() const;
  public:
  void clear_rights();
  const ::mead101::mead::Text& rights() const;
  ::mead101::mead::Text* release_rights();
  ::mead101::mead::Text* mutable_rights();
  void set_allocated_rights(::mead101::mead::Text* rights);
  private:
  const ::mead101::mead::Text& _internal_rights() const;
  ::mead101::mead::Text* _internal_mutable_rights();
  public:
  void unsafe_arena_set_allocated_rights(
      ::mead101::mead::Text* rights);
  ::mead101::mead::Text* unsafe_arena_release_rights();

  // optional .mead101.mead.Source source = 15;
  bool has_source() const;
  private:
  bool _internal_has_source() const;
  public:
  void clear_source();
  const ::mead101::mead::Source& source() const;
  ::mead101::mead::Source* release_source();
  ::mead101::mead::Source* mutable_source();
  void set_allocated_source(::mead101::mead::Source* source);
  private:
  const ::mead101::mead::Source& _internal_source() const;
  ::mead101::mead::Source* _internal_mutable_source();
  public:
  void unsafe_arena_set_allocated_source(
      ::mead101::mead::Source* source);
  ::mead101::mead::Source* unsafe_arena_release_source();

  // optional .mead101.mead.Text summary = 16;
  bool has_summary() const;
  private:
  bool _internal_has_summary() const;
  public:
  void clear_summary();
  const ::mead101::mead::Text& summary() const;
  ::mead101::mead::Text* release_summary();
  ::mead101::mead::Text* mutable_summary();
  void set_allocated_summary(::mead101::mead::Text* summary);
  private:
  const ::mead101::mead::Text& _internal_summary() const;
  ::mead101::mead::Text* _internal_mutable_summary();
  public:
  void unsafe_arena_set_allocated_summary(
      ::mead101::mead::Text* summary);
  ::mead101::mead::Text* unsafe_arena_release_summary();

  // optional .mead101.mead.Text title = 17;
  bool has_title() const;
  private:
  bool _internal_has_title() const;
  public:
  void clear_title();
  const ::mead101::mead::Text& title() const;
  ::mead101::mead::Text* release_title();
  ::mead101::mead::Text* mutable_title();
  void set_allocated_title(::mead101::mead::Text* title);
  private:
  const ::mead101::mead::Text& _internal_title() const;
  ::mead101::mead::Text* _internal_mutable_title();
  public:
  void unsafe_arena_set_allocated_title(
      ::mead101::mead::Text* title);
  ::mead101::mead::Text* unsafe_arena_release_title();

  // optional .mead101.mead.DateTime updated = 18;
  bool has_updated() const;
  private:
  bool _internal_has_updated() const;
  public:
  void clear_updated();
  const ::mead101::mead::DateTime& updated() const;
  ::mead101::mead::DateTime* release_updated();
  ::mead101::mead::DateTime* mutable_updated();
  void set_allocated_updated(::mead101::mead::DateTime* updated);
  private:
  const ::mead101::mead::DateTime& _internal_updated() const;
  ::mead101::mead::DateTime* _internal_mutable_updated();
  public:
  void unsafe_arena_set_allocated_updated(
      ::mead101::mead::DateTime* updated);
  ::mead101::mead::DateTime* unsafe_arena_release_updated();

  // @@protoc_insertion_point(class_scope:mead101.mead.Entry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> any_attribute_value_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Person > author_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Category > category_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Person > contributor_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Link > link_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subscription_id_;
  ::mead101::mead::Party* party_;
  ::mead101::mead::Release* release_;
  ::mead101::mead::Resource* resource_;
  ::mead101::mead::Work* work_;
  ::mead101::mead::Content* content_;
  ::mead101::mead::Id* id_;
  ::mead101::mead::DateTime* published_;
  ::mead101::mead::Text* rights_;
  ::mead101::mead::Source* source_;
  ::mead101::mead::Text* summary_;
  ::mead101::mead::Text* title_;
  ::mead101::mead::DateTime* updated_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class Epoch PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.Epoch) */ {
 public:
  inline Epoch() : Epoch(nullptr) {}
  virtual ~Epoch();

  Epoch(const Epoch& from);
  Epoch(Epoch&& from) noexcept
    : Epoch() {
    *this = ::std::move(from);
  }

  inline Epoch& operator=(const Epoch& from) {
    CopyFrom(from);
    return *this;
  }
  inline Epoch& operator=(Epoch&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Epoch& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Epoch* internal_default_instance() {
    return reinterpret_cast<const Epoch*>(
               &_Epoch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(Epoch& a, Epoch& b) {
    a.Swap(&b);
  }
  inline void Swap(Epoch* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Epoch* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Epoch* New() const final {
    return CreateMaybeMessage<Epoch>(nullptr);
  }

  Epoch* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Epoch>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Epoch& from);
  void MergeFrom(const Epoch& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Epoch* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.Epoch";
  }
  protected:
  explicit Epoch(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetadataSourceReferenceFieldNumber = 3,
    kRelatedArtistFieldNumber = 4,
    kRelatedCreationFieldNumber = 5,
    kValueFieldNumber = 7,
    kApplicableTerritoryCodeFieldNumber = 1,
    kEndDateFieldNumber = 2,
    kStartDateFieldNumber = 6,
  };
  // repeated string metadata_source_reference = 3;
  int metadata_source_reference_size() const;
  private:
  int _internal_metadata_source_reference_size() const;
  public:
  void clear_metadata_source_reference();
  const std::string& metadata_source_reference(int index) const;
  std::string* mutable_metadata_source_reference(int index);
  void set_metadata_source_reference(int index, const std::string& value);
  void set_metadata_source_reference(int index, std::string&& value);
  void set_metadata_source_reference(int index, const char* value);
  void set_metadata_source_reference(int index, const char* value, size_t size);
  std::string* add_metadata_source_reference();
  void add_metadata_source_reference(const std::string& value);
  void add_metadata_source_reference(std::string&& value);
  void add_metadata_source_reference(const char* value);
  void add_metadata_source_reference(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& metadata_source_reference() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_metadata_source_reference();
  private:
  const std::string& _internal_metadata_source_reference(int index) const;
  std::string* _internal_add_metadata_source_reference();
  public:

  // repeated .mead101.mead.PartyWithNames related_artist = 4;
  int related_artist_size() const;
  private:
  int _internal_related_artist_size() const;
  public:
  void clear_related_artist();
  ::mead101::mead::PartyWithNames* mutable_related_artist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::PartyWithNames >*
      mutable_related_artist();
  private:
  const ::mead101::mead::PartyWithNames& _internal_related_artist(int index) const;
  ::mead101::mead::PartyWithNames* _internal_add_related_artist();
  public:
  const ::mead101::mead::PartyWithNames& related_artist(int index) const;
  ::mead101::mead::PartyWithNames* add_related_artist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::PartyWithNames >&
      related_artist() const;

  // repeated .mead101.mead.RelatedCreation related_creation = 5;
  int related_creation_size() const;
  private:
  int _internal_related_creation_size() const;
  public:
  void clear_related_creation();
  ::mead101::mead::RelatedCreation* mutable_related_creation(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::RelatedCreation >*
      mutable_related_creation();
  private:
  const ::mead101::mead::RelatedCreation& _internal_related_creation(int index) const;
  ::mead101::mead::RelatedCreation* _internal_add_related_creation();
  public:
  const ::mead101::mead::RelatedCreation& related_creation(int index) const;
  ::mead101::mead::RelatedCreation* add_related_creation();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::RelatedCreation >&
      related_creation() const;

  // repeated .mead101.mead.Name value = 7;
  int value_size() const;
  private:
  int _internal_value_size() const;
  public:
  void clear_value();
  ::mead101::mead::Name* mutable_value(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Name >*
      mutable_value();
  private:
  const ::mead101::mead::Name& _internal_value(int index) const;
  ::mead101::mead::Name* _internal_add_value();
  public:
  const ::mead101::mead::Name& value(int index) const;
  ::mead101::mead::Name* add_value();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Name >&
      value() const;

  // optional .mead101.avs.CurrentTerritoryCode applicable_territory_code = 1;
  bool has_applicable_territory_code() const;
  private:
  bool _internal_has_applicable_territory_code() const;
  public:
  void clear_applicable_territory_code();
  const ::mead101::avs::CurrentTerritoryCode& applicable_territory_code() const;
  ::mead101::avs::CurrentTerritoryCode* release_applicable_territory_code();
  ::mead101::avs::CurrentTerritoryCode* mutable_applicable_territory_code();
  void set_allocated_applicable_territory_code(::mead101::avs::CurrentTerritoryCode* applicable_territory_code);
  private:
  const ::mead101::avs::CurrentTerritoryCode& _internal_applicable_territory_code() const;
  ::mead101::avs::CurrentTerritoryCode* _internal_mutable_applicable_territory_code();
  public:
  void unsafe_arena_set_allocated_applicable_territory_code(
      ::mead101::avs::CurrentTerritoryCode* applicable_territory_code);
  ::mead101::avs::CurrentTerritoryCode* unsafe_arena_release_applicable_territory_code();

  // optional .mead101.mead.Date end_date = 2;
  bool has_end_date() const;
  private:
  bool _internal_has_end_date() const;
  public:
  void clear_end_date();
  const ::mead101::mead::Date& end_date() const;
  ::mead101::mead::Date* release_end_date();
  ::mead101::mead::Date* mutable_end_date();
  void set_allocated_end_date(::mead101::mead::Date* end_date);
  private:
  const ::mead101::mead::Date& _internal_end_date() const;
  ::mead101::mead::Date* _internal_mutable_end_date();
  public:
  void unsafe_arena_set_allocated_end_date(
      ::mead101::mead::Date* end_date);
  ::mead101::mead::Date* unsafe_arena_release_end_date();

  // optional .mead101.mead.Date start_date = 6;
  bool has_start_date() const;
  private:
  bool _internal_has_start_date() const;
  public:
  void clear_start_date();
  const ::mead101::mead::Date& start_date() const;
  ::mead101::mead::Date* release_start_date();
  ::mead101::mead::Date* mutable_start_date();
  void set_allocated_start_date(::mead101::mead::Date* start_date);
  private:
  const ::mead101::mead::Date& _internal_start_date() const;
  ::mead101::mead::Date* _internal_mutable_start_date();
  public:
  void unsafe_arena_set_allocated_start_date(
      ::mead101::mead::Date* start_date);
  ::mead101::mead::Date* unsafe_arena_release_start_date();

  // @@protoc_insertion_point(class_scope:mead101.mead.Epoch)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> metadata_source_reference_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::PartyWithNames > related_artist_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::RelatedCreation > related_creation_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Name > value_;
  ::mead101::avs::CurrentTerritoryCode* applicable_territory_code_;
  ::mead101::mead::Date* end_date_;
  ::mead101::mead::Date* start_date_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class EventDate PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.EventDate) */ {
 public:
  inline EventDate() : EventDate(nullptr) {}
  virtual ~EventDate();

  EventDate(const EventDate& from);
  EventDate(EventDate&& from) noexcept
    : EventDate() {
    *this = ::std::move(from);
  }

  inline EventDate& operator=(const EventDate& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventDate& operator=(EventDate&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EventDate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EventDate* internal_default_instance() {
    return reinterpret_cast<const EventDate*>(
               &_EventDate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(EventDate& a, EventDate& b) {
    a.Swap(&b);
  }
  inline void Swap(EventDate* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EventDate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EventDate* New() const final {
    return CreateMaybeMessage<EventDate>(nullptr);
  }

  EventDate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EventDate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EventDate& from);
  void MergeFrom(const EventDate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EventDate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.EventDate";
  }
  protected:
  explicit EventDate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLanguageAndScriptCodeFieldNumber = 5,
    kLocationDescriptionFieldNumber = 6,
    kApplicableTerritoryCodeFieldNumber = 1,
    kExtValueFieldNumber = 7,
    kIsAfterFieldNumber = 2,
    kIsApproximateFieldNumber = 3,
    kIsBeforeFieldNumber = 4,
  };
  // optional string language_and_script_code = 5;
  bool has_language_and_script_code() const;
  private:
  bool _internal_has_language_and_script_code() const;
  public:
  void clear_language_and_script_code();
  const std::string& language_and_script_code() const;
  void set_language_and_script_code(const std::string& value);
  void set_language_and_script_code(std::string&& value);
  void set_language_and_script_code(const char* value);
  void set_language_and_script_code(const char* value, size_t size);
  std::string* mutable_language_and_script_code();
  std::string* release_language_and_script_code();
  void set_allocated_language_and_script_code(std::string* language_and_script_code);
  private:
  const std::string& _internal_language_and_script_code() const;
  void _internal_set_language_and_script_code(const std::string& value);
  std::string* _internal_mutable_language_and_script_code();
  public:

  // optional string location_description = 6;
  bool has_location_description() const;
  private:
  bool _internal_has_location_description() const;
  public:
  void clear_location_description();
  const std::string& location_description() const;
  void set_location_description(const std::string& value);
  void set_location_description(std::string&& value);
  void set_location_description(const char* value);
  void set_location_description(const char* value, size_t size);
  std::string* mutable_location_description();
  std::string* release_location_description();
  void set_allocated_location_description(std::string* location_description);
  private:
  const std::string& _internal_location_description() const;
  void _internal_set_location_description(const std::string& value);
  std::string* _internal_mutable_location_description();
  public:

  // optional .mead101.avs.AllTerritoryCode applicable_territory_code = 1;
  bool has_applicable_territory_code() const;
  private:
  bool _internal_has_applicable_territory_code() const;
  public:
  void clear_applicable_territory_code();
  const ::mead101::avs::AllTerritoryCode& applicable_territory_code() const;
  ::mead101::avs::AllTerritoryCode* release_applicable_territory_code();
  ::mead101::avs::AllTerritoryCode* mutable_applicable_territory_code();
  void set_allocated_applicable_territory_code(::mead101::avs::AllTerritoryCode* applicable_territory_code);
  private:
  const ::mead101::avs::AllTerritoryCode& _internal_applicable_territory_code() const;
  ::mead101::avs::AllTerritoryCode* _internal_mutable_applicable_territory_code();
  public:
  void unsafe_arena_set_allocated_applicable_territory_code(
      ::mead101::avs::AllTerritoryCode* applicable_territory_code);
  ::mead101::avs::AllTerritoryCode* unsafe_arena_release_applicable_territory_code();

  // optional .mead101.mead.ddex_IsoDate ext_value = 7;
  bool has_ext_value() const;
  private:
  bool _internal_has_ext_value() const;
  public:
  void clear_ext_value();
  const ::mead101::mead::ddex_IsoDate& ext_value() const;
  ::mead101::mead::ddex_IsoDate* release_ext_value();
  ::mead101::mead::ddex_IsoDate* mutable_ext_value();
  void set_allocated_ext_value(::mead101::mead::ddex_IsoDate* ext_value);
  private:
  const ::mead101::mead::ddex_IsoDate& _internal_ext_value() const;
  ::mead101::mead::ddex_IsoDate* _internal_mutable_ext_value();
  public:
  void unsafe_arena_set_allocated_ext_value(
      ::mead101::mead::ddex_IsoDate* ext_value);
  ::mead101::mead::ddex_IsoDate* unsafe_arena_release_ext_value();

  // optional bool is_after = 2;
  bool has_is_after() const;
  private:
  bool _internal_has_is_after() const;
  public:
  void clear_is_after();
  bool is_after() const;
  void set_is_after(bool value);
  private:
  bool _internal_is_after() const;
  void _internal_set_is_after(bool value);
  public:

  // optional bool is_approximate = 3;
  bool has_is_approximate() const;
  private:
  bool _internal_has_is_approximate() const;
  public:
  void clear_is_approximate();
  bool is_approximate() const;
  void set_is_approximate(bool value);
  private:
  bool _internal_is_approximate() const;
  void _internal_set_is_approximate(bool value);
  public:

  // optional bool is_before = 4;
  bool has_is_before() const;
  private:
  bool _internal_has_is_before() const;
  public:
  void clear_is_before();
  bool is_before() const;
  void set_is_before(bool value);
  private:
  bool _internal_is_before() const;
  void _internal_set_is_before(bool value);
  public:

  // @@protoc_insertion_point(class_scope:mead101.mead.EventDate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_and_script_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr location_description_;
  ::mead101::avs::AllTerritoryCode* applicable_territory_code_;
  ::mead101::mead::ddex_IsoDate* ext_value_;
  bool is_after_;
  bool is_approximate_;
  bool is_before_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class EventDateTime PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.EventDateTime) */ {
 public:
  inline EventDateTime() : EventDateTime(nullptr) {}
  virtual ~EventDateTime();

  EventDateTime(const EventDateTime& from);
  EventDateTime(EventDateTime&& from) noexcept
    : EventDateTime() {
    *this = ::std::move(from);
  }

  inline EventDateTime& operator=(const EventDateTime& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventDateTime& operator=(EventDateTime&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EventDateTime& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EventDateTime* internal_default_instance() {
    return reinterpret_cast<const EventDateTime*>(
               &_EventDateTime_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(EventDateTime& a, EventDateTime& b) {
    a.Swap(&b);
  }
  inline void Swap(EventDateTime* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EventDateTime* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EventDateTime* New() const final {
    return CreateMaybeMessage<EventDateTime>(nullptr);
  }

  EventDateTime* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EventDateTime>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EventDateTime& from);
  void MergeFrom(const EventDateTime& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EventDateTime* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.EventDateTime";
  }
  protected:
  explicit EventDateTime(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLanguageAndScriptCodeFieldNumber = 4,
    kLocationDescriptionFieldNumber = 5,
    kExtValueFieldNumber = 7,
    kTerritoryCodeFieldNumber = 6,
    kIsAfterFieldNumber = 1,
    kIsApproximateFieldNumber = 2,
    kIsBeforeFieldNumber = 3,
  };
  // optional string language_and_script_code = 4;
  bool has_language_and_script_code() const;
  private:
  bool _internal_has_language_and_script_code() const;
  public:
  void clear_language_and_script_code();
  const std::string& language_and_script_code() const;
  void set_language_and_script_code(const std::string& value);
  void set_language_and_script_code(std::string&& value);
  void set_language_and_script_code(const char* value);
  void set_language_and_script_code(const char* value, size_t size);
  std::string* mutable_language_and_script_code();
  std::string* release_language_and_script_code();
  void set_allocated_language_and_script_code(std::string* language_and_script_code);
  private:
  const std::string& _internal_language_and_script_code() const;
  void _internal_set_language_and_script_code(const std::string& value);
  std::string* _internal_mutable_language_and_script_code();
  public:

  // optional string location_description = 5;
  bool has_location_description() const;
  private:
  bool _internal_has_location_description() const;
  public:
  void clear_location_description();
  const std::string& location_description() const;
  void set_location_description(const std::string& value);
  void set_location_description(std::string&& value);
  void set_location_description(const char* value);
  void set_location_description(const char* value, size_t size);
  std::string* mutable_location_description();
  std::string* release_location_description();
  void set_allocated_location_description(std::string* location_description);
  private:
  const std::string& _internal_location_description() const;
  void _internal_set_location_description(const std::string& value);
  std::string* _internal_mutable_location_description();
  public:

  // optional string ext_value = 7;
  bool has_ext_value() const;
  private:
  bool _internal_has_ext_value() const;
  public:
  void clear_ext_value();
  const std::string& ext_value() const;
  void set_ext_value(const std::string& value);
  void set_ext_value(std::string&& value);
  void set_ext_value(const char* value);
  void set_ext_value(const char* value, size_t size);
  std::string* mutable_ext_value();
  std::string* release_ext_value();
  void set_allocated_ext_value(std::string* ext_value);
  private:
  const std::string& _internal_ext_value() const;
  void _internal_set_ext_value(const std::string& value);
  std::string* _internal_mutable_ext_value();
  public:

  // optional .mead101.avs.AllTerritoryCode territory_code = 6;
  bool has_territory_code() const;
  private:
  bool _internal_has_territory_code() const;
  public:
  void clear_territory_code();
  const ::mead101::avs::AllTerritoryCode& territory_code() const;
  ::mead101::avs::AllTerritoryCode* release_territory_code();
  ::mead101::avs::AllTerritoryCode* mutable_territory_code();
  void set_allocated_territory_code(::mead101::avs::AllTerritoryCode* territory_code);
  private:
  const ::mead101::avs::AllTerritoryCode& _internal_territory_code() const;
  ::mead101::avs::AllTerritoryCode* _internal_mutable_territory_code();
  public:
  void unsafe_arena_set_allocated_territory_code(
      ::mead101::avs::AllTerritoryCode* territory_code);
  ::mead101::avs::AllTerritoryCode* unsafe_arena_release_territory_code();

  // optional bool is_after = 1;
  bool has_is_after() const;
  private:
  bool _internal_has_is_after() const;
  public:
  void clear_is_after();
  bool is_after() const;
  void set_is_after(bool value);
  private:
  bool _internal_is_after() const;
  void _internal_set_is_after(bool value);
  public:

  // optional bool is_approximate = 2;
  bool has_is_approximate() const;
  private:
  bool _internal_has_is_approximate() const;
  public:
  void clear_is_approximate();
  bool is_approximate() const;
  void set_is_approximate(bool value);
  private:
  bool _internal_is_approximate() const;
  void _internal_set_is_approximate(bool value);
  public:

  // optional bool is_before = 3;
  bool has_is_before() const;
  private:
  bool _internal_has_is_before() const;
  public:
  void clear_is_before();
  bool is_before() const;
  void set_is_before(bool value);
  private:
  bool _internal_is_before() const;
  void _internal_set_is_before(bool value);
  public:

  // @@protoc_insertion_point(class_scope:mead101.mead.EventDateTime)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_and_script_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr location_description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ext_value_;
  ::mead101::avs::AllTerritoryCode* territory_code_;
  bool is_after_;
  bool is_approximate_;
  bool is_before_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class EventDateWithoutFlags PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.EventDateWithoutFlags) */ {
 public:
  inline EventDateWithoutFlags() : EventDateWithoutFlags(nullptr) {}
  virtual ~EventDateWithoutFlags();

  EventDateWithoutFlags(const EventDateWithoutFlags& from);
  EventDateWithoutFlags(EventDateWithoutFlags&& from) noexcept
    : EventDateWithoutFlags() {
    *this = ::std::move(from);
  }

  inline EventDateWithoutFlags& operator=(const EventDateWithoutFlags& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventDateWithoutFlags& operator=(EventDateWithoutFlags&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EventDateWithoutFlags& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EventDateWithoutFlags* internal_default_instance() {
    return reinterpret_cast<const EventDateWithoutFlags*>(
               &_EventDateWithoutFlags_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(EventDateWithoutFlags& a, EventDateWithoutFlags& b) {
    a.Swap(&b);
  }
  inline void Swap(EventDateWithoutFlags* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EventDateWithoutFlags* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EventDateWithoutFlags* New() const final {
    return CreateMaybeMessage<EventDateWithoutFlags>(nullptr);
  }

  EventDateWithoutFlags* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EventDateWithoutFlags>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EventDateWithoutFlags& from);
  void MergeFrom(const EventDateWithoutFlags& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EventDateWithoutFlags* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.EventDateWithoutFlags";
  }
  protected:
  explicit EventDateWithoutFlags(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLanguageAndScriptCodeFieldNumber = 3,
    kLocationDescriptionFieldNumber = 4,
    kApplicableTerritoryCodeFieldNumber = 1,
    kExtValueFieldNumber = 5,
    kIsApproximateFieldNumber = 2,
  };
  // optional string language_and_script_code = 3;
  bool has_language_and_script_code() const;
  private:
  bool _internal_has_language_and_script_code() const;
  public:
  void clear_language_and_script_code();
  const std::string& language_and_script_code() const;
  void set_language_and_script_code(const std::string& value);
  void set_language_and_script_code(std::string&& value);
  void set_language_and_script_code(const char* value);
  void set_language_and_script_code(const char* value, size_t size);
  std::string* mutable_language_and_script_code();
  std::string* release_language_and_script_code();
  void set_allocated_language_and_script_code(std::string* language_and_script_code);
  private:
  const std::string& _internal_language_and_script_code() const;
  void _internal_set_language_and_script_code(const std::string& value);
  std::string* _internal_mutable_language_and_script_code();
  public:

  // optional string location_description = 4;
  bool has_location_description() const;
  private:
  bool _internal_has_location_description() const;
  public:
  void clear_location_description();
  const std::string& location_description() const;
  void set_location_description(const std::string& value);
  void set_location_description(std::string&& value);
  void set_location_description(const char* value);
  void set_location_description(const char* value, size_t size);
  std::string* mutable_location_description();
  std::string* release_location_description();
  void set_allocated_location_description(std::string* location_description);
  private:
  const std::string& _internal_location_description() const;
  void _internal_set_location_description(const std::string& value);
  std::string* _internal_mutable_location_description();
  public:

  // optional .mead101.avs.AllTerritoryCode applicable_territory_code = 1;
  bool has_applicable_territory_code() const;
  private:
  bool _internal_has_applicable_territory_code() const;
  public:
  void clear_applicable_territory_code();
  const ::mead101::avs::AllTerritoryCode& applicable_territory_code() const;
  ::mead101::avs::AllTerritoryCode* release_applicable_territory_code();
  ::mead101::avs::AllTerritoryCode* mutable_applicable_territory_code();
  void set_allocated_applicable_territory_code(::mead101::avs::AllTerritoryCode* applicable_territory_code);
  private:
  const ::mead101::avs::AllTerritoryCode& _internal_applicable_territory_code() const;
  ::mead101::avs::AllTerritoryCode* _internal_mutable_applicable_territory_code();
  public:
  void unsafe_arena_set_allocated_applicable_territory_code(
      ::mead101::avs::AllTerritoryCode* applicable_territory_code);
  ::mead101::avs::AllTerritoryCode* unsafe_arena_release_applicable_territory_code();

  // optional .mead101.mead.ddex_IsoDate ext_value = 5;
  bool has_ext_value() const;
  private:
  bool _internal_has_ext_value() const;
  public:
  void clear_ext_value();
  const ::mead101::mead::ddex_IsoDate& ext_value() const;
  ::mead101::mead::ddex_IsoDate* release_ext_value();
  ::mead101::mead::ddex_IsoDate* mutable_ext_value();
  void set_allocated_ext_value(::mead101::mead::ddex_IsoDate* ext_value);
  private:
  const ::mead101::mead::ddex_IsoDate& _internal_ext_value() const;
  ::mead101::mead::ddex_IsoDate* _internal_mutable_ext_value();
  public:
  void unsafe_arena_set_allocated_ext_value(
      ::mead101::mead::ddex_IsoDate* ext_value);
  ::mead101::mead::ddex_IsoDate* unsafe_arena_release_ext_value();

  // optional bool is_approximate = 2;
  bool has_is_approximate() const;
  private:
  bool _internal_has_is_approximate() const;
  public:
  void clear_is_approximate();
  bool is_approximate() const;
  void set_is_approximate(bool value);
  private:
  bool _internal_is_approximate() const;
  void _internal_set_is_approximate(bool value);
  public:

  // @@protoc_insertion_point(class_scope:mead101.mead.EventDateWithoutFlags)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_and_script_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr location_description_;
  ::mead101::avs::AllTerritoryCode* applicable_territory_code_;
  ::mead101::mead::ddex_IsoDate* ext_value_;
  bool is_approximate_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class Feed PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.Feed) */ {
 public:
  inline Feed() : Feed(nullptr) {}
  virtual ~Feed();

  Feed(const Feed& from);
  Feed(Feed&& from) noexcept
    : Feed() {
    *this = ::std::move(from);
  }

  inline Feed& operator=(const Feed& from) {
    CopyFrom(from);
    return *this;
  }
  inline Feed& operator=(Feed&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Feed& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Feed* internal_default_instance() {
    return reinterpret_cast<const Feed*>(
               &_Feed_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(Feed& a, Feed& b) {
    a.Swap(&b);
  }
  inline void Swap(Feed* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Feed* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Feed* New() const final {
    return CreateMaybeMessage<Feed>(nullptr);
  }

  Feed* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Feed>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Feed& from);
  void MergeFrom(const Feed& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Feed* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.Feed";
  }
  protected:
  explicit Feed(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnyAttributeValueFieldNumber = 1,
    kAnyValueFieldNumber = 2,
    kAuthorFieldNumber = 3,
    kCategoryFieldNumber = 4,
    kContributorFieldNumber = 5,
    kEntryFieldNumber = 6,
    kLinkFieldNumber = 10,
    kGeneratorFieldNumber = 7,
    kIconFieldNumber = 8,
    kIdFieldNumber = 9,
    kLogoFieldNumber = 11,
    kRightsFieldNumber = 12,
    kSubtitleFieldNumber = 13,
    kTitleFieldNumber = 14,
    kUpdatedFieldNumber = 15,
  };
  // repeated string any_attribute_value = 1;
  int any_attribute_value_size() const;
  private:
  int _internal_any_attribute_value_size() const;
  public:
  void clear_any_attribute_value();
  const std::string& any_attribute_value(int index) const;
  std::string* mutable_any_attribute_value(int index);
  void set_any_attribute_value(int index, const std::string& value);
  void set_any_attribute_value(int index, std::string&& value);
  void set_any_attribute_value(int index, const char* value);
  void set_any_attribute_value(int index, const char* value, size_t size);
  std::string* add_any_attribute_value();
  void add_any_attribute_value(const std::string& value);
  void add_any_attribute_value(std::string&& value);
  void add_any_attribute_value(const char* value);
  void add_any_attribute_value(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& any_attribute_value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_any_attribute_value();
  private:
  const std::string& _internal_any_attribute_value(int index) const;
  std::string* _internal_add_any_attribute_value();
  public:

  // repeated string any_value = 2;
  int any_value_size() const;
  private:
  int _internal_any_value_size() const;
  public:
  void clear_any_value();
  const std::string& any_value(int index) const;
  std::string* mutable_any_value(int index);
  void set_any_value(int index, const std::string& value);
  void set_any_value(int index, std::string&& value);
  void set_any_value(int index, const char* value);
  void set_any_value(int index, const char* value, size_t size);
  std::string* add_any_value();
  void add_any_value(const std::string& value);
  void add_any_value(std::string&& value);
  void add_any_value(const char* value);
  void add_any_value(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& any_value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_any_value();
  private:
  const std::string& _internal_any_value(int index) const;
  std::string* _internal_add_any_value();
  public:

  // repeated .mead101.mead.Person author = 3;
  int author_size() const;
  private:
  int _internal_author_size() const;
  public:
  void clear_author();
  ::mead101::mead::Person* mutable_author(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Person >*
      mutable_author();
  private:
  const ::mead101::mead::Person& _internal_author(int index) const;
  ::mead101::mead::Person* _internal_add_author();
  public:
  const ::mead101::mead::Person& author(int index) const;
  ::mead101::mead::Person* add_author();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Person >&
      author() const;

  // repeated .mead101.mead.Category category = 4;
  int category_size() const;
  private:
  int _internal_category_size() const;
  public:
  void clear_category();
  ::mead101::mead::Category* mutable_category(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Category >*
      mutable_category();
  private:
  const ::mead101::mead::Category& _internal_category(int index) const;
  ::mead101::mead::Category* _internal_add_category();
  public:
  const ::mead101::mead::Category& category(int index) const;
  ::mead101::mead::Category* add_category();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Category >&
      category() const;

  // repeated .mead101.mead.Person contributor = 5;
  int contributor_size() const;
  private:
  int _internal_contributor_size() const;
  public:
  void clear_contributor();
  ::mead101::mead::Person* mutable_contributor(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Person >*
      mutable_contributor();
  private:
  const ::mead101::mead::Person& _internal_contributor(int index) const;
  ::mead101::mead::Person* _internal_add_contributor();
  public:
  const ::mead101::mead::Person& contributor(int index) const;
  ::mead101::mead::Person* add_contributor();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Person >&
      contributor() const;

  // repeated .mead101.mead.Entry entry = 6;
  int entry_size() const;
  private:
  int _internal_entry_size() const;
  public:
  void clear_entry();
  ::mead101::mead::Entry* mutable_entry(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Entry >*
      mutable_entry();
  private:
  const ::mead101::mead::Entry& _internal_entry(int index) const;
  ::mead101::mead::Entry* _internal_add_entry();
  public:
  const ::mead101::mead::Entry& entry(int index) const;
  ::mead101::mead::Entry* add_entry();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Entry >&
      entry() const;

  // repeated .mead101.mead.Link link = 10;
  int link_size() const;
  private:
  int _internal_link_size() const;
  public:
  void clear_link();
  ::mead101::mead::Link* mutable_link(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Link >*
      mutable_link();
  private:
  const ::mead101::mead::Link& _internal_link(int index) const;
  ::mead101::mead::Link* _internal_add_link();
  public:
  const ::mead101::mead::Link& link(int index) const;
  ::mead101::mead::Link* add_link();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Link >&
      link() const;

  // optional .mead101.mead.Generator generator = 7;
  bool has_generator() const;
  private:
  bool _internal_has_generator() const;
  public:
  void clear_generator();
  const ::mead101::mead::Generator& generator() const;
  ::mead101::mead::Generator* release_generator();
  ::mead101::mead::Generator* mutable_generator();
  void set_allocated_generator(::mead101::mead::Generator* generator);
  private:
  const ::mead101::mead::Generator& _internal_generator() const;
  ::mead101::mead::Generator* _internal_mutable_generator();
  public:
  void unsafe_arena_set_allocated_generator(
      ::mead101::mead::Generator* generator);
  ::mead101::mead::Generator* unsafe_arena_release_generator();

  // optional .mead101.mead.Icon icon = 8;
  bool has_icon() const;
  private:
  bool _internal_has_icon() const;
  public:
  void clear_icon();
  const ::mead101::mead::Icon& icon() const;
  ::mead101::mead::Icon* release_icon();
  ::mead101::mead::Icon* mutable_icon();
  void set_allocated_icon(::mead101::mead::Icon* icon);
  private:
  const ::mead101::mead::Icon& _internal_icon() const;
  ::mead101::mead::Icon* _internal_mutable_icon();
  public:
  void unsafe_arena_set_allocated_icon(
      ::mead101::mead::Icon* icon);
  ::mead101::mead::Icon* unsafe_arena_release_icon();

  // optional .mead101.mead.Id id = 9;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::mead101::mead::Id& id() const;
  ::mead101::mead::Id* release_id();
  ::mead101::mead::Id* mutable_id();
  void set_allocated_id(::mead101::mead::Id* id);
  private:
  const ::mead101::mead::Id& _internal_id() const;
  ::mead101::mead::Id* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::mead101::mead::Id* id);
  ::mead101::mead::Id* unsafe_arena_release_id();

  // optional .mead101.mead.Logo logo = 11;
  bool has_logo() const;
  private:
  bool _internal_has_logo() const;
  public:
  void clear_logo();
  const ::mead101::mead::Logo& logo() const;
  ::mead101::mead::Logo* release_logo();
  ::mead101::mead::Logo* mutable_logo();
  void set_allocated_logo(::mead101::mead::Logo* logo);
  private:
  const ::mead101::mead::Logo& _internal_logo() const;
  ::mead101::mead::Logo* _internal_mutable_logo();
  public:
  void unsafe_arena_set_allocated_logo(
      ::mead101::mead::Logo* logo);
  ::mead101::mead::Logo* unsafe_arena_release_logo();

  // optional .mead101.mead.Text rights = 12;
  bool has_rights() const;
  private:
  bool _internal_has_rights() const;
  public:
  void clear_rights();
  const ::mead101::mead::Text& rights() const;
  ::mead101::mead::Text* release_rights();
  ::mead101::mead::Text* mutable_rights();
  void set_allocated_rights(::mead101::mead::Text* rights);
  private:
  const ::mead101::mead::Text& _internal_rights() const;
  ::mead101::mead::Text* _internal_mutable_rights();
  public:
  void unsafe_arena_set_allocated_rights(
      ::mead101::mead::Text* rights);
  ::mead101::mead::Text* unsafe_arena_release_rights();

  // optional .mead101.mead.Text subtitle = 13;
  bool has_subtitle() const;
  private:
  bool _internal_has_subtitle() const;
  public:
  void clear_subtitle();
  const ::mead101::mead::Text& subtitle() const;
  ::mead101::mead::Text* release_subtitle();
  ::mead101::mead::Text* mutable_subtitle();
  void set_allocated_subtitle(::mead101::mead::Text* subtitle);
  private:
  const ::mead101::mead::Text& _internal_subtitle() const;
  ::mead101::mead::Text* _internal_mutable_subtitle();
  public:
  void unsafe_arena_set_allocated_subtitle(
      ::mead101::mead::Text* subtitle);
  ::mead101::mead::Text* unsafe_arena_release_subtitle();

  // optional .mead101.mead.Text title = 14;
  bool has_title() const;
  private:
  bool _internal_has_title() const;
  public:
  void clear_title();
  const ::mead101::mead::Text& title() const;
  ::mead101::mead::Text* release_title();
  ::mead101::mead::Text* mutable_title();
  void set_allocated_title(::mead101::mead::Text* title);
  private:
  const ::mead101::mead::Text& _internal_title() const;
  ::mead101::mead::Text* _internal_mutable_title();
  public:
  void unsafe_arena_set_allocated_title(
      ::mead101::mead::Text* title);
  ::mead101::mead::Text* unsafe_arena_release_title();

  // optional .mead101.mead.DateTime updated = 15;
  bool has_updated() const;
  private:
  bool _internal_has_updated() const;
  public:
  void clear_updated();
  const ::mead101::mead::DateTime& updated() const;
  ::mead101::mead::DateTime* release_updated();
  ::mead101::mead::DateTime* mutable_updated();
  void set_allocated_updated(::mead101::mead::DateTime* updated);
  private:
  const ::mead101::mead::DateTime& _internal_updated() const;
  ::mead101::mead::DateTime* _internal_mutable_updated();
  public:
  void unsafe_arena_set_allocated_updated(
      ::mead101::mead::DateTime* updated);
  ::mead101::mead::DateTime* unsafe_arena_release_updated();

  // @@protoc_insertion_point(class_scope:mead101.mead.Feed)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> any_attribute_value_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> any_value_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Person > author_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Category > category_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Person > contributor_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Entry > entry_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Link > link_;
  ::mead101::mead::Generator* generator_;
  ::mead101::mead::Icon* icon_;
  ::mead101::mead::Id* id_;
  ::mead101::mead::Logo* logo_;
  ::mead101::mead::Text* rights_;
  ::mead101::mead::Text* subtitle_;
  ::mead101::mead::Text* title_;
  ::mead101::mead::DateTime* updated_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class File PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.File) */ {
 public:
  inline File() : File(nullptr) {}
  virtual ~File();

  File(const File& from);
  File(File&& from) noexcept
    : File() {
    *this = ::std::move(from);
  }

  inline File& operator=(const File& from) {
    CopyFrom(from);
    return *this;
  }
  inline File& operator=(File&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const File& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const File* internal_default_instance() {
    return reinterpret_cast<const File*>(
               &_File_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(File& a, File& b) {
    a.Swap(&b);
  }
  inline void Swap(File* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(File* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline File* New() const final {
    return CreateMaybeMessage<File>(nullptr);
  }

  File* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<File>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const File& from);
  void MergeFrom(const File& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(File* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.File";
  }
  protected:
  explicit File(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kURIFieldNumber = 3,
    kHashSumFieldNumber = 2,
    kFileSizeFieldNumber = 1,
  };
  // optional string u_r_i = 3;
  bool has_u_r_i() const;
  private:
  bool _internal_has_u_r_i() const;
  public:
  void clear_u_r_i();
  const std::string& u_r_i() const;
  void set_u_r_i(const std::string& value);
  void set_u_r_i(std::string&& value);
  void set_u_r_i(const char* value);
  void set_u_r_i(const char* value, size_t size);
  std::string* mutable_u_r_i();
  std::string* release_u_r_i();
  void set_allocated_u_r_i(std::string* u_r_i);
  private:
  const std::string& _internal_u_r_i() const;
  void _internal_set_u_r_i(const std::string& value);
  std::string* _internal_mutable_u_r_i();
  public:

  // optional .mead101.mead.DetailedHashSum hash_sum = 2;
  bool has_hash_sum() const;
  private:
  bool _internal_has_hash_sum() const;
  public:
  void clear_hash_sum();
  const ::mead101::mead::DetailedHashSum& hash_sum() const;
  ::mead101::mead::DetailedHashSum* release_hash_sum();
  ::mead101::mead::DetailedHashSum* mutable_hash_sum();
  void set_allocated_hash_sum(::mead101::mead::DetailedHashSum* hash_sum);
  private:
  const ::mead101::mead::DetailedHashSum& _internal_hash_sum() const;
  ::mead101::mead::DetailedHashSum* _internal_mutable_hash_sum();
  public:
  void unsafe_arena_set_allocated_hash_sum(
      ::mead101::mead::DetailedHashSum* hash_sum);
  ::mead101::mead::DetailedHashSum* unsafe_arena_release_hash_sum();

  // optional double file_size = 1;
  bool has_file_size() const;
  private:
  bool _internal_has_file_size() const;
  public:
  void clear_file_size();
  double file_size() const;
  void set_file_size(double value);
  private:
  double _internal_file_size() const;
  void _internal_set_file_size(double value);
  public:

  // @@protoc_insertion_point(class_scope:mead101.mead.File)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr u_r_i_;
  ::mead101::mead::DetailedHashSum* hash_sum_;
  double file_size_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class Flag PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.Flag) */ {
 public:
  inline Flag() : Flag(nullptr) {}
  virtual ~Flag();

  Flag(const Flag& from);
  Flag(Flag&& from) noexcept
    : Flag() {
    *this = ::std::move(from);
  }

  inline Flag& operator=(const Flag& from) {
    CopyFrom(from);
    return *this;
  }
  inline Flag& operator=(Flag&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Flag& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Flag* internal_default_instance() {
    return reinterpret_cast<const Flag*>(
               &_Flag_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(Flag& a, Flag& b) {
    a.Swap(&b);
  }
  inline void Swap(Flag* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Flag* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Flag* New() const final {
    return CreateMaybeMessage<Flag>(nullptr);
  }

  Flag* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Flag>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Flag& from);
  void MergeFrom(const Flag& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Flag* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.Flag";
  }
  protected:
  explicit Flag(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetadataSourceReferenceFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // repeated string metadata_source_reference = 1;
  int metadata_source_reference_size() const;
  private:
  int _internal_metadata_source_reference_size() const;
  public:
  void clear_metadata_source_reference();
  const std::string& metadata_source_reference(int index) const;
  std::string* mutable_metadata_source_reference(int index);
  void set_metadata_source_reference(int index, const std::string& value);
  void set_metadata_source_reference(int index, std::string&& value);
  void set_metadata_source_reference(int index, const char* value);
  void set_metadata_source_reference(int index, const char* value, size_t size);
  std::string* add_metadata_source_reference();
  void add_metadata_source_reference(const std::string& value);
  void add_metadata_source_reference(std::string&& value);
  void add_metadata_source_reference(const char* value);
  void add_metadata_source_reference(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& metadata_source_reference() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_metadata_source_reference();
  private:
  const std::string& _internal_metadata_source_reference(int index) const;
  std::string* _internal_add_metadata_source_reference();
  public:

  // optional bool value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  bool value() const;
  void set_value(bool value);
  private:
  bool _internal_value() const;
  void _internal_set_value(bool value);
  public:

  // @@protoc_insertion_point(class_scope:mead101.mead.Flag)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> metadata_source_reference_;
  bool value_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class FocusTrack PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.FocusTrack) */ {
 public:
  inline FocusTrack() : FocusTrack(nullptr) {}
  virtual ~FocusTrack();

  FocusTrack(const FocusTrack& from);
  FocusTrack(FocusTrack&& from) noexcept
    : FocusTrack() {
    *this = ::std::move(from);
  }

  inline FocusTrack& operator=(const FocusTrack& from) {
    CopyFrom(from);
    return *this;
  }
  inline FocusTrack& operator=(FocusTrack&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FocusTrack& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FocusTrack* internal_default_instance() {
    return reinterpret_cast<const FocusTrack*>(
               &_FocusTrack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(FocusTrack& a, FocusTrack& b) {
    a.Swap(&b);
  }
  inline void Swap(FocusTrack* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FocusTrack* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FocusTrack* New() const final {
    return CreateMaybeMessage<FocusTrack>(nullptr);
  }

  FocusTrack* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FocusTrack>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FocusTrack& from);
  void MergeFrom(const FocusTrack& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FocusTrack* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.FocusTrack";
  }
  protected:
  explicit FocusTrack(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommentFieldNumber = 2,
    kDisplayArtistNameFieldNumber = 3,
    kMetadataSourceReferenceFieldNumber = 5,
    kPeriodOfBeingFocusTrackFieldNumber = 6,
    kTitleFieldNumber = 9,
    kApplicableTerritoryCodeFieldNumber = 1,
    kResourceIdFieldNumber = 7,
    kIsDefaultFieldNumber = 4,
    kSequenceNumberFieldNumber = 8,
  };
  // repeated .mead101.mead.TextWithoutTerritory comment = 2;
  int comment_size() const;
  private:
  int _internal_comment_size() const;
  public:
  void clear_comment();
  ::mead101::mead::TextWithoutTerritory* mutable_comment(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::TextWithoutTerritory >*
      mutable_comment();
  private:
  const ::mead101::mead::TextWithoutTerritory& _internal_comment(int index) const;
  ::mead101::mead::TextWithoutTerritory* _internal_add_comment();
  public:
  const ::mead101::mead::TextWithoutTerritory& comment(int index) const;
  ::mead101::mead::TextWithoutTerritory* add_comment();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::TextWithoutTerritory >&
      comment() const;

  // repeated .mead101.mead.DisplayArtistNameWithPronunciation display_artist_name = 3;
  int display_artist_name_size() const;
  private:
  int _internal_display_artist_name_size() const;
  public:
  void clear_display_artist_name();
  ::mead101::mead::DisplayArtistNameWithPronunciation* mutable_display_artist_name(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::DisplayArtistNameWithPronunciation >*
      mutable_display_artist_name();
  private:
  const ::mead101::mead::DisplayArtistNameWithPronunciation& _internal_display_artist_name(int index) const;
  ::mead101::mead::DisplayArtistNameWithPronunciation* _internal_add_display_artist_name();
  public:
  const ::mead101::mead::DisplayArtistNameWithPronunciation& display_artist_name(int index) const;
  ::mead101::mead::DisplayArtistNameWithPronunciation* add_display_artist_name();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::DisplayArtistNameWithPronunciation >&
      display_artist_name() const;

  // repeated string metadata_source_reference = 5;
  int metadata_source_reference_size() const;
  private:
  int _internal_metadata_source_reference_size() const;
  public:
  void clear_metadata_source_reference();
  const std::string& metadata_source_reference(int index) const;
  std::string* mutable_metadata_source_reference(int index);
  void set_metadata_source_reference(int index, const std::string& value);
  void set_metadata_source_reference(int index, std::string&& value);
  void set_metadata_source_reference(int index, const char* value);
  void set_metadata_source_reference(int index, const char* value, size_t size);
  std::string* add_metadata_source_reference();
  void add_metadata_source_reference(const std::string& value);
  void add_metadata_source_reference(std::string&& value);
  void add_metadata_source_reference(const char* value);
  void add_metadata_source_reference(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& metadata_source_reference() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_metadata_source_reference();
  private:
  const std::string& _internal_metadata_source_reference(int index) const;
  std::string* _internal_add_metadata_source_reference();
  public:

  // repeated .mead101.mead.PeriodWithTime period_of_being_focus_track = 6;
  int period_of_being_focus_track_size() const;
  private:
  int _internal_period_of_being_focus_track_size() const;
  public:
  void clear_period_of_being_focus_track();
  ::mead101::mead::PeriodWithTime* mutable_period_of_being_focus_track(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::PeriodWithTime >*
      mutable_period_of_being_focus_track();
  private:
  const ::mead101::mead::PeriodWithTime& _internal_period_of_being_focus_track(int index) const;
  ::mead101::mead::PeriodWithTime* _internal_add_period_of_being_focus_track();
  public:
  const ::mead101::mead::PeriodWithTime& period_of_being_focus_track(int index) const;
  ::mead101::mead::PeriodWithTime* add_period_of_being_focus_track();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::PeriodWithTime >&
      period_of_being_focus_track() const;

  // repeated .mead101.mead.TitleWithPronunciation title = 9;
  int title_size() const;
  private:
  int _internal_title_size() const;
  public:
  void clear_title();
  ::mead101::mead::TitleWithPronunciation* mutable_title(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::TitleWithPronunciation >*
      mutable_title();
  private:
  const ::mead101::mead::TitleWithPronunciation& _internal_title(int index) const;
  ::mead101::mead::TitleWithPronunciation* _internal_add_title();
  public:
  const ::mead101::mead::TitleWithPronunciation& title(int index) const;
  ::mead101::mead::TitleWithPronunciation* add_title();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::TitleWithPronunciation >&
      title() const;

  // optional .mead101.avs.CurrentTerritoryCode applicable_territory_code = 1;
  bool has_applicable_territory_code() const;
  private:
  bool _internal_has_applicable_territory_code() const;
  public:
  void clear_applicable_territory_code();
  const ::mead101::avs::CurrentTerritoryCode& applicable_territory_code() const;
  ::mead101::avs::CurrentTerritoryCode* release_applicable_territory_code();
  ::mead101::avs::CurrentTerritoryCode* mutable_applicable_territory_code();
  void set_allocated_applicable_territory_code(::mead101::avs::CurrentTerritoryCode* applicable_territory_code);
  private:
  const ::mead101::avs::CurrentTerritoryCode& _internal_applicable_territory_code() const;
  ::mead101::avs::CurrentTerritoryCode* _internal_mutable_applicable_territory_code();
  public:
  void unsafe_arena_set_allocated_applicable_territory_code(
      ::mead101::avs::CurrentTerritoryCode* applicable_territory_code);
  ::mead101::avs::CurrentTerritoryCode* unsafe_arena_release_applicable_territory_code();

  // optional .mead101.mead.ResourceId resource_id = 7;
  bool has_resource_id() const;
  private:
  bool _internal_has_resource_id() const;
  public:
  void clear_resource_id();
  const ::mead101::mead::ResourceId& resource_id() const;
  ::mead101::mead::ResourceId* release_resource_id();
  ::mead101::mead::ResourceId* mutable_resource_id();
  void set_allocated_resource_id(::mead101::mead::ResourceId* resource_id);
  private:
  const ::mead101::mead::ResourceId& _internal_resource_id() const;
  ::mead101::mead::ResourceId* _internal_mutable_resource_id();
  public:
  void unsafe_arena_set_allocated_resource_id(
      ::mead101::mead::ResourceId* resource_id);
  ::mead101::mead::ResourceId* unsafe_arena_release_resource_id();

  // optional bool is_default = 4;
  bool has_is_default() const;
  private:
  bool _internal_has_is_default() const;
  public:
  void clear_is_default();
  bool is_default() const;
  void set_is_default(bool value);
  private:
  bool _internal_is_default() const;
  void _internal_set_is_default(bool value);
  public:

  // optional int32 sequence_number = 8;
  bool has_sequence_number() const;
  private:
  bool _internal_has_sequence_number() const;
  public:
  void clear_sequence_number();
  ::PROTOBUF_NAMESPACE_ID::int32 sequence_number() const;
  void set_sequence_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sequence_number() const;
  void _internal_set_sequence_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mead101.mead.FocusTrack)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::TextWithoutTerritory > comment_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::DisplayArtistNameWithPronunciation > display_artist_name_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> metadata_source_reference_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::PeriodWithTime > period_of_being_focus_track_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::TitleWithPronunciation > title_;
  ::mead101::avs::CurrentTerritoryCode* applicable_territory_code_;
  ::mead101::mead::ResourceId* resource_id_;
  bool is_default_;
  ::PROTOBUF_NAMESPACE_ID::int32 sequence_number_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class Form PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.Form) */ {
 public:
  inline Form() : Form(nullptr) {}
  virtual ~Form();

  Form(const Form& from);
  Form(Form&& from) noexcept
    : Form() {
    *this = ::std::move(from);
  }

  inline Form& operator=(const Form& from) {
    CopyFrom(from);
    return *this;
  }
  inline Form& operator=(Form&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Form& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Form* internal_default_instance() {
    return reinterpret_cast<const Form*>(
               &_Form_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(Form& a, Form& b) {
    a.Swap(&b);
  }
  inline void Swap(Form* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Form* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Form* New() const final {
    return CreateMaybeMessage<Form>(nullptr);
  }

  Form* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Form>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Form& from);
  void MergeFrom(const Form& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Form* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.Form";
  }
  protected:
  explicit Form(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetadataSourceReferenceFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // repeated string metadata_source_reference = 1;
  int metadata_source_reference_size() const;
  private:
  int _internal_metadata_source_reference_size() const;
  public:
  void clear_metadata_source_reference();
  const std::string& metadata_source_reference(int index) const;
  std::string* mutable_metadata_source_reference(int index);
  void set_metadata_source_reference(int index, const std::string& value);
  void set_metadata_source_reference(int index, std::string&& value);
  void set_metadata_source_reference(int index, const char* value);
  void set_metadata_source_reference(int index, const char* value, size_t size);
  std::string* add_metadata_source_reference();
  void add_metadata_source_reference(const std::string& value);
  void add_metadata_source_reference(std::string&& value);
  void add_metadata_source_reference(const char* value);
  void add_metadata_source_reference(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& metadata_source_reference() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_metadata_source_reference();
  private:
  const std::string& _internal_metadata_source_reference(int index) const;
  std::string* _internal_add_metadata_source_reference();
  public:

  // optional .mead101.mead.FormValue value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const ::mead101::mead::FormValue& value() const;
  ::mead101::mead::FormValue* release_value();
  ::mead101::mead::FormValue* mutable_value();
  void set_allocated_value(::mead101::mead::FormValue* value);
  private:
  const ::mead101::mead::FormValue& _internal_value() const;
  ::mead101::mead::FormValue* _internal_mutable_value();
  public:
  void unsafe_arena_set_allocated_value(
      ::mead101::mead::FormValue* value);
  ::mead101::mead::FormValue* unsafe_arena_release_value();

  // @@protoc_insertion_point(class_scope:mead101.mead.Form)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> metadata_source_reference_;
  ::mead101::mead::FormValue* value_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class FormValue PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.FormValue) */ {
 public:
  inline FormValue() : FormValue(nullptr) {}
  virtual ~FormValue();

  FormValue(const FormValue& from);
  FormValue(FormValue&& from) noexcept
    : FormValue() {
    *this = ::std::move(from);
  }

  inline FormValue& operator=(const FormValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline FormValue& operator=(FormValue&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FormValue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FormValue* internal_default_instance() {
    return reinterpret_cast<const FormValue*>(
               &_FormValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(FormValue& a, FormValue& b) {
    a.Swap(&b);
  }
  inline void Swap(FormValue* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FormValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FormValue* New() const final {
    return CreateMaybeMessage<FormValue>(nullptr);
  }

  FormValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FormValue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FormValue& from);
  void MergeFrom(const FormValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FormValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.FormValue";
  }
  protected:
  explicit FormValue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNamespaceFieldNumber = 1,
    kUserDefinedValueFieldNumber = 2,
    kExtValueFieldNumber = 3,
  };
  // optional string namespace = 1;
  bool has_namespace_() const;
  private:
  bool _internal_has_namespace_() const;
  public:
  void clear_namespace_();
  const std::string& namespace_() const;
  void set_namespace_(const std::string& value);
  void set_namespace_(std::string&& value);
  void set_namespace_(const char* value);
  void set_namespace_(const char* value, size_t size);
  std::string* mutable_namespace_();
  std::string* release_namespace_();
  void set_allocated_namespace_(std::string* namespace_);
  private:
  const std::string& _internal_namespace_() const;
  void _internal_set_namespace_(const std::string& value);
  std::string* _internal_mutable_namespace_();
  public:

  // optional string user_defined_value = 2;
  bool has_user_defined_value() const;
  private:
  bool _internal_has_user_defined_value() const;
  public:
  void clear_user_defined_value();
  const std::string& user_defined_value() const;
  void set_user_defined_value(const std::string& value);
  void set_user_defined_value(std::string&& value);
  void set_user_defined_value(const char* value);
  void set_user_defined_value(const char* value, size_t size);
  std::string* mutable_user_defined_value();
  std::string* release_user_defined_value();
  void set_allocated_user_defined_value(std::string* user_defined_value);
  private:
  const std::string& _internal_user_defined_value() const;
  void _internal_set_user_defined_value(const std::string& value);
  std::string* _internal_mutable_user_defined_value();
  public:

  // optional .mead101.avs.Form ext_value = 3;
  bool has_ext_value() const;
  private:
  bool _internal_has_ext_value() const;
  public:
  void clear_ext_value();
  const ::mead101::avs::Form& ext_value() const;
  ::mead101::avs::Form* release_ext_value();
  ::mead101::avs::Form* mutable_ext_value();
  void set_allocated_ext_value(::mead101::avs::Form* ext_value);
  private:
  const ::mead101::avs::Form& _internal_ext_value() const;
  ::mead101::avs::Form* _internal_mutable_ext_value();
  public:
  void unsafe_arena_set_allocated_ext_value(
      ::mead101::avs::Form* ext_value);
  ::mead101::avs::Form* unsafe_arena_release_ext_value();

  // @@protoc_insertion_point(class_scope:mead101.mead.FormValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr namespace__;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_defined_value_;
  ::mead101::avs::Form* ext_value_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class Generator PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.Generator) */ {
 public:
  inline Generator() : Generator(nullptr) {}
  virtual ~Generator();

  Generator(const Generator& from);
  Generator(Generator&& from) noexcept
    : Generator() {
    *this = ::std::move(from);
  }

  inline Generator& operator=(const Generator& from) {
    CopyFrom(from);
    return *this;
  }
  inline Generator& operator=(Generator&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Generator& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Generator* internal_default_instance() {
    return reinterpret_cast<const Generator*>(
               &_Generator_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(Generator& a, Generator& b) {
    a.Swap(&b);
  }
  inline void Swap(Generator* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Generator* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Generator* New() const final {
    return CreateMaybeMessage<Generator>(nullptr);
  }

  Generator* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Generator>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Generator& from);
  void MergeFrom(const Generator& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Generator* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.Generator";
  }
  protected:
  explicit Generator(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnyAttributeValueFieldNumber = 1,
    kExtValueFieldNumber = 2,
    kUriFieldNumber = 3,
    kVersionFieldNumber = 4,
  };
  // repeated string any_attribute_value = 1;
  int any_attribute_value_size() const;
  private:
  int _internal_any_attribute_value_size() const;
  public:
  void clear_any_attribute_value();
  const std::string& any_attribute_value(int index) const;
  std::string* mutable_any_attribute_value(int index);
  void set_any_attribute_value(int index, const std::string& value);
  void set_any_attribute_value(int index, std::string&& value);
  void set_any_attribute_value(int index, const char* value);
  void set_any_attribute_value(int index, const char* value, size_t size);
  std::string* add_any_attribute_value();
  void add_any_attribute_value(const std::string& value);
  void add_any_attribute_value(std::string&& value);
  void add_any_attribute_value(const char* value);
  void add_any_attribute_value(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& any_attribute_value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_any_attribute_value();
  private:
  const std::string& _internal_any_attribute_value(int index) const;
  std::string* _internal_add_any_attribute_value();
  public:

  // optional string ext_value = 2;
  bool has_ext_value() const;
  private:
  bool _internal_has_ext_value() const;
  public:
  void clear_ext_value();
  const std::string& ext_value() const;
  void set_ext_value(const std::string& value);
  void set_ext_value(std::string&& value);
  void set_ext_value(const char* value);
  void set_ext_value(const char* value, size_t size);
  std::string* mutable_ext_value();
  std::string* release_ext_value();
  void set_allocated_ext_value(std::string* ext_value);
  private:
  const std::string& _internal_ext_value() const;
  void _internal_set_ext_value(const std::string& value);
  std::string* _internal_mutable_ext_value();
  public:

  // optional string uri = 3;
  bool has_uri() const;
  private:
  bool _internal_has_uri() const;
  public:
  void clear_uri();
  const std::string& uri() const;
  void set_uri(const std::string& value);
  void set_uri(std::string&& value);
  void set_uri(const char* value);
  void set_uri(const char* value, size_t size);
  std::string* mutable_uri();
  std::string* release_uri();
  void set_allocated_uri(std::string* uri);
  private:
  const std::string& _internal_uri() const;
  void _internal_set_uri(const std::string& value);
  std::string* _internal_mutable_uri();
  public:

  // optional string version = 4;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // @@protoc_insertion_point(class_scope:mead101.mead.Generator)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> any_attribute_value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ext_value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uri_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class GenreCategory PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.GenreCategory) */ {
 public:
  inline GenreCategory() : GenreCategory(nullptr) {}
  virtual ~GenreCategory();

  GenreCategory(const GenreCategory& from);
  GenreCategory(GenreCategory&& from) noexcept
    : GenreCategory() {
    *this = ::std::move(from);
  }

  inline GenreCategory& operator=(const GenreCategory& from) {
    CopyFrom(from);
    return *this;
  }
  inline GenreCategory& operator=(GenreCategory&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GenreCategory& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GenreCategory* internal_default_instance() {
    return reinterpret_cast<const GenreCategory*>(
               &_GenreCategory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(GenreCategory& a, GenreCategory& b) {
    a.Swap(&b);
  }
  inline void Swap(GenreCategory* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GenreCategory* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GenreCategory* New() const final {
    return CreateMaybeMessage<GenreCategory>(nullptr);
  }

  GenreCategory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GenreCategory>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GenreCategory& from);
  void MergeFrom(const GenreCategory& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GenreCategory* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.GenreCategory";
  }
  protected:
  explicit GenreCategory(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDescriptionFieldNumber = 2,
    kMetadataSourceReferenceFieldNumber = 3,
    kApplicableTerritoryCodeFieldNumber = 1,
    kValueFieldNumber = 4,
  };
  // repeated .mead101.mead.TextWithoutTerritory description = 2;
  int description_size() const;
  private:
  int _internal_description_size() const;
  public:
  void clear_description();
  ::mead101::mead::TextWithoutTerritory* mutable_description(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::TextWithoutTerritory >*
      mutable_description();
  private:
  const ::mead101::mead::TextWithoutTerritory& _internal_description(int index) const;
  ::mead101::mead::TextWithoutTerritory* _internal_add_description();
  public:
  const ::mead101::mead::TextWithoutTerritory& description(int index) const;
  ::mead101::mead::TextWithoutTerritory* add_description();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::TextWithoutTerritory >&
      description() const;

  // repeated string metadata_source_reference = 3;
  int metadata_source_reference_size() const;
  private:
  int _internal_metadata_source_reference_size() const;
  public:
  void clear_metadata_source_reference();
  const std::string& metadata_source_reference(int index) const;
  std::string* mutable_metadata_source_reference(int index);
  void set_metadata_source_reference(int index, const std::string& value);
  void set_metadata_source_reference(int index, std::string&& value);
  void set_metadata_source_reference(int index, const char* value);
  void set_metadata_source_reference(int index, const char* value, size_t size);
  std::string* add_metadata_source_reference();
  void add_metadata_source_reference(const std::string& value);
  void add_metadata_source_reference(std::string&& value);
  void add_metadata_source_reference(const char* value);
  void add_metadata_source_reference(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& metadata_source_reference() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_metadata_source_reference();
  private:
  const std::string& _internal_metadata_source_reference(int index) const;
  std::string* _internal_add_metadata_source_reference();
  public:

  // optional .mead101.avs.CurrentTerritoryCode applicable_territory_code = 1;
  bool has_applicable_territory_code() const;
  private:
  bool _internal_has_applicable_territory_code() const;
  public:
  void clear_applicable_territory_code();
  const ::mead101::avs::CurrentTerritoryCode& applicable_territory_code() const;
  ::mead101::avs::CurrentTerritoryCode* release_applicable_territory_code();
  ::mead101::avs::CurrentTerritoryCode* mutable_applicable_territory_code();
  void set_allocated_applicable_territory_code(::mead101::avs::CurrentTerritoryCode* applicable_territory_code);
  private:
  const ::mead101::avs::CurrentTerritoryCode& _internal_applicable_territory_code() const;
  ::mead101::avs::CurrentTerritoryCode* _internal_mutable_applicable_territory_code();
  public:
  void unsafe_arena_set_allocated_applicable_territory_code(
      ::mead101::avs::CurrentTerritoryCode* applicable_territory_code);
  ::mead101::avs::CurrentTerritoryCode* unsafe_arena_release_applicable_territory_code();

  // optional .mead101.mead.GenreCategoryValue value = 4;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const ::mead101::mead::GenreCategoryValue& value() const;
  ::mead101::mead::GenreCategoryValue* release_value();
  ::mead101::mead::GenreCategoryValue* mutable_value();
  void set_allocated_value(::mead101::mead::GenreCategoryValue* value);
  private:
  const ::mead101::mead::GenreCategoryValue& _internal_value() const;
  ::mead101::mead::GenreCategoryValue* _internal_mutable_value();
  public:
  void unsafe_arena_set_allocated_value(
      ::mead101::mead::GenreCategoryValue* value);
  ::mead101::mead::GenreCategoryValue* unsafe_arena_release_value();

  // @@protoc_insertion_point(class_scope:mead101.mead.GenreCategory)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::TextWithoutTerritory > description_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> metadata_source_reference_;
  ::mead101::avs::CurrentTerritoryCode* applicable_territory_code_;
  ::mead101::mead::GenreCategoryValue* value_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class GenreCategoryValue PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.GenreCategoryValue) */ {
 public:
  inline GenreCategoryValue() : GenreCategoryValue(nullptr) {}
  virtual ~GenreCategoryValue();

  GenreCategoryValue(const GenreCategoryValue& from);
  GenreCategoryValue(GenreCategoryValue&& from) noexcept
    : GenreCategoryValue() {
    *this = ::std::move(from);
  }

  inline GenreCategoryValue& operator=(const GenreCategoryValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline GenreCategoryValue& operator=(GenreCategoryValue&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GenreCategoryValue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GenreCategoryValue* internal_default_instance() {
    return reinterpret_cast<const GenreCategoryValue*>(
               &_GenreCategoryValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(GenreCategoryValue& a, GenreCategoryValue& b) {
    a.Swap(&b);
  }
  inline void Swap(GenreCategoryValue* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GenreCategoryValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GenreCategoryValue* New() const final {
    return CreateMaybeMessage<GenreCategoryValue>(nullptr);
  }

  GenreCategoryValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GenreCategoryValue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GenreCategoryValue& from);
  void MergeFrom(const GenreCategoryValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GenreCategoryValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.GenreCategoryValue";
  }
  protected:
  explicit GenreCategoryValue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLanguageAndScriptCodeFieldNumber = 1,
    kNamespaceFieldNumber = 2,
    kUserDefinedValueFieldNumber = 3,
    kExtValueFieldNumber = 4,
  };
  // optional string language_and_script_code = 1;
  bool has_language_and_script_code() const;
  private:
  bool _internal_has_language_and_script_code() const;
  public:
  void clear_language_and_script_code();
  const std::string& language_and_script_code() const;
  void set_language_and_script_code(const std::string& value);
  void set_language_and_script_code(std::string&& value);
  void set_language_and_script_code(const char* value);
  void set_language_and_script_code(const char* value, size_t size);
  std::string* mutable_language_and_script_code();
  std::string* release_language_and_script_code();
  void set_allocated_language_and_script_code(std::string* language_and_script_code);
  private:
  const std::string& _internal_language_and_script_code() const;
  void _internal_set_language_and_script_code(const std::string& value);
  std::string* _internal_mutable_language_and_script_code();
  public:

  // optional string namespace = 2;
  bool has_namespace_() const;
  private:
  bool _internal_has_namespace_() const;
  public:
  void clear_namespace_();
  const std::string& namespace_() const;
  void set_namespace_(const std::string& value);
  void set_namespace_(std::string&& value);
  void set_namespace_(const char* value);
  void set_namespace_(const char* value, size_t size);
  std::string* mutable_namespace_();
  std::string* release_namespace_();
  void set_allocated_namespace_(std::string* namespace_);
  private:
  const std::string& _internal_namespace_() const;
  void _internal_set_namespace_(const std::string& value);
  std::string* _internal_mutable_namespace_();
  public:

  // optional string user_defined_value = 3;
  bool has_user_defined_value() const;
  private:
  bool _internal_has_user_defined_value() const;
  public:
  void clear_user_defined_value();
  const std::string& user_defined_value() const;
  void set_user_defined_value(const std::string& value);
  void set_user_defined_value(std::string&& value);
  void set_user_defined_value(const char* value);
  void set_user_defined_value(const char* value, size_t size);
  std::string* mutable_user_defined_value();
  std::string* release_user_defined_value();
  void set_allocated_user_defined_value(std::string* user_defined_value);
  private:
  const std::string& _internal_user_defined_value() const;
  void _internal_set_user_defined_value(const std::string& value);
  std::string* _internal_mutable_user_defined_value();
  public:

  // optional .mead101.avs.ClassifiedGenre ext_value = 4;
  bool has_ext_value() const;
  private:
  bool _internal_has_ext_value() const;
  public:
  void clear_ext_value();
  const ::mead101::avs::ClassifiedGenre& ext_value() const;
  ::mead101::avs::ClassifiedGenre* release_ext_value();
  ::mead101::avs::ClassifiedGenre* mutable_ext_value();
  void set_allocated_ext_value(::mead101::avs::ClassifiedGenre* ext_value);
  private:
  const ::mead101::avs::ClassifiedGenre& _internal_ext_value() const;
  ::mead101::avs::ClassifiedGenre* _internal_mutable_ext_value();
  public:
  void unsafe_arena_set_allocated_ext_value(
      ::mead101::avs::ClassifiedGenre* ext_value);
  ::mead101::avs::ClassifiedGenre* unsafe_arena_release_ext_value();

  // @@protoc_insertion_point(class_scope:mead101.mead.GenreCategoryValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_and_script_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr namespace__;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_defined_value_;
  ::mead101::avs::ClassifiedGenre* ext_value_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class Harmony PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.Harmony) */ {
 public:
  inline Harmony() : Harmony(nullptr) {}
  virtual ~Harmony();

  Harmony(const Harmony& from);
  Harmony(Harmony&& from) noexcept
    : Harmony() {
    *this = ::std::move(from);
  }

  inline Harmony& operator=(const Harmony& from) {
    CopyFrom(from);
    return *this;
  }
  inline Harmony& operator=(Harmony&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Harmony& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Harmony* internal_default_instance() {
    return reinterpret_cast<const Harmony*>(
               &_Harmony_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(Harmony& a, Harmony& b) {
    a.Swap(&b);
  }
  inline void Swap(Harmony* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Harmony* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Harmony* New() const final {
    return CreateMaybeMessage<Harmony>(nullptr);
  }

  Harmony* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Harmony>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Harmony& from);
  void MergeFrom(const Harmony& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Harmony* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.Harmony";
  }
  protected:
  explicit Harmony(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetadataSourceReferenceFieldNumber = 1,
    kModulationFieldNumber = 3,
    kModeFieldNumber = 2,
    kRootChordNoteFieldNumber = 4,
    kRootChordQualityFieldNumber = 5,
  };
  // repeated string metadata_source_reference = 1;
  int metadata_source_reference_size() const;
  private:
  int _internal_metadata_source_reference_size() const;
  public:
  void clear_metadata_source_reference();
  const std::string& metadata_source_reference(int index) const;
  std::string* mutable_metadata_source_reference(int index);
  void set_metadata_source_reference(int index, const std::string& value);
  void set_metadata_source_reference(int index, std::string&& value);
  void set_metadata_source_reference(int index, const char* value);
  void set_metadata_source_reference(int index, const char* value, size_t size);
  std::string* add_metadata_source_reference();
  void add_metadata_source_reference(const std::string& value);
  void add_metadata_source_reference(std::string&& value);
  void add_metadata_source_reference(const char* value);
  void add_metadata_source_reference(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& metadata_source_reference() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_metadata_source_reference();
  private:
  const std::string& _internal_metadata_source_reference(int index) const;
  std::string* _internal_add_metadata_source_reference();
  public:

  // repeated .mead101.mead.HarmonyModulation modulation = 3;
  int modulation_size() const;
  private:
  int _internal_modulation_size() const;
  public:
  void clear_modulation();
  ::mead101::mead::HarmonyModulation* mutable_modulation(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::HarmonyModulation >*
      mutable_modulation();
  private:
  const ::mead101::mead::HarmonyModulation& _internal_modulation(int index) const;
  ::mead101::mead::HarmonyModulation* _internal_add_modulation();
  public:
  const ::mead101::mead::HarmonyModulation& modulation(int index) const;
  ::mead101::mead::HarmonyModulation* add_modulation();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::HarmonyModulation >&
      modulation() const;

  // optional .mead101.mead.Mode mode = 2;
  bool has_mode() const;
  private:
  bool _internal_has_mode() const;
  public:
  void clear_mode();
  const ::mead101::mead::Mode& mode() const;
  ::mead101::mead::Mode* release_mode();
  ::mead101::mead::Mode* mutable_mode();
  void set_allocated_mode(::mead101::mead::Mode* mode);
  private:
  const ::mead101::mead::Mode& _internal_mode() const;
  ::mead101::mead::Mode* _internal_mutable_mode();
  public:
  void unsafe_arena_set_allocated_mode(
      ::mead101::mead::Mode* mode);
  ::mead101::mead::Mode* unsafe_arena_release_mode();

  // optional .mead101.mead.RootChordNote root_chord_note = 4;
  bool has_root_chord_note() const;
  private:
  bool _internal_has_root_chord_note() const;
  public:
  void clear_root_chord_note();
  const ::mead101::mead::RootChordNote& root_chord_note() const;
  ::mead101::mead::RootChordNote* release_root_chord_note();
  ::mead101::mead::RootChordNote* mutable_root_chord_note();
  void set_allocated_root_chord_note(::mead101::mead::RootChordNote* root_chord_note);
  private:
  const ::mead101::mead::RootChordNote& _internal_root_chord_note() const;
  ::mead101::mead::RootChordNote* _internal_mutable_root_chord_note();
  public:
  void unsafe_arena_set_allocated_root_chord_note(
      ::mead101::mead::RootChordNote* root_chord_note);
  ::mead101::mead::RootChordNote* unsafe_arena_release_root_chord_note();

  // optional .mead101.mead.RootChordQuality root_chord_quality = 5;
  bool has_root_chord_quality() const;
  private:
  bool _internal_has_root_chord_quality() const;
  public:
  void clear_root_chord_quality();
  const ::mead101::mead::RootChordQuality& root_chord_quality() const;
  ::mead101::mead::RootChordQuality* release_root_chord_quality();
  ::mead101::mead::RootChordQuality* mutable_root_chord_quality();
  void set_allocated_root_chord_quality(::mead101::mead::RootChordQuality* root_chord_quality);
  private:
  const ::mead101::mead::RootChordQuality& _internal_root_chord_quality() const;
  ::mead101::mead::RootChordQuality* _internal_mutable_root_chord_quality();
  public:
  void unsafe_arena_set_allocated_root_chord_quality(
      ::mead101::mead::RootChordQuality* root_chord_quality);
  ::mead101::mead::RootChordQuality* unsafe_arena_release_root_chord_quality();

  // @@protoc_insertion_point(class_scope:mead101.mead.Harmony)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> metadata_source_reference_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::HarmonyModulation > modulation_;
  ::mead101::mead::Mode* mode_;
  ::mead101::mead::RootChordNote* root_chord_note_;
  ::mead101::mead::RootChordQuality* root_chord_quality_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class HarmonyModulation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.HarmonyModulation) */ {
 public:
  inline HarmonyModulation() : HarmonyModulation(nullptr) {}
  virtual ~HarmonyModulation();

  HarmonyModulation(const HarmonyModulation& from);
  HarmonyModulation(HarmonyModulation&& from) noexcept
    : HarmonyModulation() {
    *this = ::std::move(from);
  }

  inline HarmonyModulation& operator=(const HarmonyModulation& from) {
    CopyFrom(from);
    return *this;
  }
  inline HarmonyModulation& operator=(HarmonyModulation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HarmonyModulation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HarmonyModulation* internal_default_instance() {
    return reinterpret_cast<const HarmonyModulation*>(
               &_HarmonyModulation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(HarmonyModulation& a, HarmonyModulation& b) {
    a.Swap(&b);
  }
  inline void Swap(HarmonyModulation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HarmonyModulation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HarmonyModulation* New() const final {
    return CreateMaybeMessage<HarmonyModulation>(nullptr);
  }

  HarmonyModulation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HarmonyModulation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HarmonyModulation& from);
  void MergeFrom(const HarmonyModulation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HarmonyModulation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.HarmonyModulation";
  }
  protected:
  explicit HarmonyModulation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModeFieldNumber = 3,
    kRootChordNoteFieldNumber = 4,
    kRootChordQualityFieldNumber = 5,
    kEndPointFieldNumber = 2,
    kEndBarFieldNumber = 1,
    kStartBarFieldNumber = 6,
    kStartPointFieldNumber = 7,
  };
  // optional .mead101.mead.Mode mode = 3;
  bool has_mode() const;
  private:
  bool _internal_has_mode() const;
  public:
  void clear_mode();
  const ::mead101::mead::Mode& mode() const;
  ::mead101::mead::Mode* release_mode();
  ::mead101::mead::Mode* mutable_mode();
  void set_allocated_mode(::mead101::mead::Mode* mode);
  private:
  const ::mead101::mead::Mode& _internal_mode() const;
  ::mead101::mead::Mode* _internal_mutable_mode();
  public:
  void unsafe_arena_set_allocated_mode(
      ::mead101::mead::Mode* mode);
  ::mead101::mead::Mode* unsafe_arena_release_mode();

  // optional .mead101.mead.RootChordNote root_chord_note = 4;
  bool has_root_chord_note() const;
  private:
  bool _internal_has_root_chord_note() const;
  public:
  void clear_root_chord_note();
  const ::mead101::mead::RootChordNote& root_chord_note() const;
  ::mead101::mead::RootChordNote* release_root_chord_note();
  ::mead101::mead::RootChordNote* mutable_root_chord_note();
  void set_allocated_root_chord_note(::mead101::mead::RootChordNote* root_chord_note);
  private:
  const ::mead101::mead::RootChordNote& _internal_root_chord_note() const;
  ::mead101::mead::RootChordNote* _internal_mutable_root_chord_note();
  public:
  void unsafe_arena_set_allocated_root_chord_note(
      ::mead101::mead::RootChordNote* root_chord_note);
  ::mead101::mead::RootChordNote* unsafe_arena_release_root_chord_note();

  // optional .mead101.mead.RootChordQuality root_chord_quality = 5;
  bool has_root_chord_quality() const;
  private:
  bool _internal_has_root_chord_quality() const;
  public:
  void clear_root_chord_quality();
  const ::mead101::mead::RootChordQuality& root_chord_quality() const;
  ::mead101::mead::RootChordQuality* release_root_chord_quality();
  ::mead101::mead::RootChordQuality* mutable_root_chord_quality();
  void set_allocated_root_chord_quality(::mead101::mead::RootChordQuality* root_chord_quality);
  private:
  const ::mead101::mead::RootChordQuality& _internal_root_chord_quality() const;
  ::mead101::mead::RootChordQuality* _internal_mutable_root_chord_quality();
  public:
  void unsafe_arena_set_allocated_root_chord_quality(
      ::mead101::mead::RootChordQuality* root_chord_quality);
  ::mead101::mead::RootChordQuality* unsafe_arena_release_root_chord_quality();

  // optional double end_point = 2;
  bool has_end_point() const;
  private:
  bool _internal_has_end_point() const;
  public:
  void clear_end_point();
  double end_point() const;
  void set_end_point(double value);
  private:
  double _internal_end_point() const;
  void _internal_set_end_point(double value);
  public:

  // optional int32 end_bar = 1;
  bool has_end_bar() const;
  private:
  bool _internal_has_end_bar() const;
  public:
  void clear_end_bar();
  ::PROTOBUF_NAMESPACE_ID::int32 end_bar() const;
  void set_end_bar(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_end_bar() const;
  void _internal_set_end_bar(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 start_bar = 6;
  bool has_start_bar() const;
  private:
  bool _internal_has_start_bar() const;
  public:
  void clear_start_bar();
  ::PROTOBUF_NAMESPACE_ID::int32 start_bar() const;
  void set_start_bar(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_start_bar() const;
  void _internal_set_start_bar(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional double start_point = 7;
  bool has_start_point() const;
  private:
  bool _internal_has_start_point() const;
  public:
  void clear_start_point();
  double start_point() const;
  void set_start_point(double value);
  private:
  double _internal_start_point() const;
  void _internal_set_start_point(double value);
  public:

  // @@protoc_insertion_point(class_scope:mead101.mead.HarmonyModulation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::mead101::mead::Mode* mode_;
  ::mead101::mead::RootChordNote* root_chord_note_;
  ::mead101::mead::RootChordQuality* root_chord_quality_;
  double end_point_;
  ::PROTOBUF_NAMESPACE_ID::int32 end_bar_;
  ::PROTOBUF_NAMESPACE_ID::int32 start_bar_;
  double start_point_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class HashSumAlgorithmType PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.HashSumAlgorithmType) */ {
 public:
  inline HashSumAlgorithmType() : HashSumAlgorithmType(nullptr) {}
  virtual ~HashSumAlgorithmType();

  HashSumAlgorithmType(const HashSumAlgorithmType& from);
  HashSumAlgorithmType(HashSumAlgorithmType&& from) noexcept
    : HashSumAlgorithmType() {
    *this = ::std::move(from);
  }

  inline HashSumAlgorithmType& operator=(const HashSumAlgorithmType& from) {
    CopyFrom(from);
    return *this;
  }
  inline HashSumAlgorithmType& operator=(HashSumAlgorithmType&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HashSumAlgorithmType& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HashSumAlgorithmType* internal_default_instance() {
    return reinterpret_cast<const HashSumAlgorithmType*>(
               &_HashSumAlgorithmType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(HashSumAlgorithmType& a, HashSumAlgorithmType& b) {
    a.Swap(&b);
  }
  inline void Swap(HashSumAlgorithmType* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HashSumAlgorithmType* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HashSumAlgorithmType* New() const final {
    return CreateMaybeMessage<HashSumAlgorithmType>(nullptr);
  }

  HashSumAlgorithmType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HashSumAlgorithmType>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HashSumAlgorithmType& from);
  void MergeFrom(const HashSumAlgorithmType& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HashSumAlgorithmType* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.HashSumAlgorithmType";
  }
  protected:
  explicit HashSumAlgorithmType(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNamespaceFieldNumber = 1,
    kUserDefinedValueFieldNumber = 2,
    kExtValueFieldNumber = 3,
  };
  // optional string namespace = 1;
  bool has_namespace_() const;
  private:
  bool _internal_has_namespace_() const;
  public:
  void clear_namespace_();
  const std::string& namespace_() const;
  void set_namespace_(const std::string& value);
  void set_namespace_(std::string&& value);
  void set_namespace_(const char* value);
  void set_namespace_(const char* value, size_t size);
  std::string* mutable_namespace_();
  std::string* release_namespace_();
  void set_allocated_namespace_(std::string* namespace_);
  private:
  const std::string& _internal_namespace_() const;
  void _internal_set_namespace_(const std::string& value);
  std::string* _internal_mutable_namespace_();
  public:

  // optional string user_defined_value = 2;
  bool has_user_defined_value() const;
  private:
  bool _internal_has_user_defined_value() const;
  public:
  void clear_user_defined_value();
  const std::string& user_defined_value() const;
  void set_user_defined_value(const std::string& value);
  void set_user_defined_value(std::string&& value);
  void set_user_defined_value(const char* value);
  void set_user_defined_value(const char* value, size_t size);
  std::string* mutable_user_defined_value();
  std::string* release_user_defined_value();
  void set_allocated_user_defined_value(std::string* user_defined_value);
  private:
  const std::string& _internal_user_defined_value() const;
  void _internal_set_user_defined_value(const std::string& value);
  std::string* _internal_mutable_user_defined_value();
  public:

  // optional .mead101.avs.HashSumAlgorithmType ext_value = 3;
  bool has_ext_value() const;
  private:
  bool _internal_has_ext_value() const;
  public:
  void clear_ext_value();
  const ::mead101::avs::HashSumAlgorithmType& ext_value() const;
  ::mead101::avs::HashSumAlgorithmType* release_ext_value();
  ::mead101::avs::HashSumAlgorithmType* mutable_ext_value();
  void set_allocated_ext_value(::mead101::avs::HashSumAlgorithmType* ext_value);
  private:
  const ::mead101::avs::HashSumAlgorithmType& _internal_ext_value() const;
  ::mead101::avs::HashSumAlgorithmType* _internal_mutable_ext_value();
  public:
  void unsafe_arena_set_allocated_ext_value(
      ::mead101::avs::HashSumAlgorithmType* ext_value);
  ::mead101::avs::HashSumAlgorithmType* unsafe_arena_release_ext_value();

  // @@protoc_insertion_point(class_scope:mead101.mead.HashSumAlgorithmType)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr namespace__;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_defined_value_;
  ::mead101::avs::HashSumAlgorithmType* ext_value_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class HistoricChartingInformation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.HistoricChartingInformation) */ {
 public:
  inline HistoricChartingInformation() : HistoricChartingInformation(nullptr) {}
  virtual ~HistoricChartingInformation();

  HistoricChartingInformation(const HistoricChartingInformation& from);
  HistoricChartingInformation(HistoricChartingInformation&& from) noexcept
    : HistoricChartingInformation() {
    *this = ::std::move(from);
  }

  inline HistoricChartingInformation& operator=(const HistoricChartingInformation& from) {
    CopyFrom(from);
    return *this;
  }
  inline HistoricChartingInformation& operator=(HistoricChartingInformation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HistoricChartingInformation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HistoricChartingInformation* internal_default_instance() {
    return reinterpret_cast<const HistoricChartingInformation*>(
               &_HistoricChartingInformation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(HistoricChartingInformation& a, HistoricChartingInformation& b) {
    a.Swap(&b);
  }
  inline void Swap(HistoricChartingInformation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HistoricChartingInformation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HistoricChartingInformation* New() const final {
    return CreateMaybeMessage<HistoricChartingInformation>(nullptr);
  }

  HistoricChartingInformation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HistoricChartingInformation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HistoricChartingInformation& from);
  void MergeFrom(const HistoricChartingInformation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HistoricChartingInformation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.HistoricChartingInformation";
  }
  protected:
  explicit HistoricChartingInformation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChartEntryFieldNumber = 1,
    kChartNameFieldNumber = 2,
    kCommentFieldNumber = 3,
    kMetadataSourceReferenceFieldNumber = 5,
    kDurationInChartsFieldNumber = 4,
    kTerritoryCodeFieldNumber = 6,
    kTopPositionFieldNumber = 7,
  };
  // repeated .mead101.mead.ChartEntry chart_entry = 1;
  int chart_entry_size() const;
  private:
  int _internal_chart_entry_size() const;
  public:
  void clear_chart_entry();
  ::mead101::mead::ChartEntry* mutable_chart_entry(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::ChartEntry >*
      mutable_chart_entry();
  private:
  const ::mead101::mead::ChartEntry& _internal_chart_entry(int index) const;
  ::mead101::mead::ChartEntry* _internal_add_chart_entry();
  public:
  const ::mead101::mead::ChartEntry& chart_entry(int index) const;
  ::mead101::mead::ChartEntry* add_chart_entry();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::ChartEntry >&
      chart_entry() const;

  // repeated .mead101.mead.ChartName chart_name = 2;
  int chart_name_size() const;
  private:
  int _internal_chart_name_size() const;
  public:
  void clear_chart_name();
  ::mead101::mead::ChartName* mutable_chart_name(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::ChartName >*
      mutable_chart_name();
  private:
  const ::mead101::mead::ChartName& _internal_chart_name(int index) const;
  ::mead101::mead::ChartName* _internal_add_chart_name();
  public:
  const ::mead101::mead::ChartName& chart_name(int index) const;
  ::mead101::mead::ChartName* add_chart_name();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::ChartName >&
      chart_name() const;

  // repeated .mead101.mead.TextWithFormat comment = 3;
  int comment_size() const;
  private:
  int _internal_comment_size() const;
  public:
  void clear_comment();
  ::mead101::mead::TextWithFormat* mutable_comment(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::TextWithFormat >*
      mutable_comment();
  private:
  const ::mead101::mead::TextWithFormat& _internal_comment(int index) const;
  ::mead101::mead::TextWithFormat* _internal_add_comment();
  public:
  const ::mead101::mead::TextWithFormat& comment(int index) const;
  ::mead101::mead::TextWithFormat* add_comment();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::TextWithFormat >&
      comment() const;

  // repeated string metadata_source_reference = 5;
  int metadata_source_reference_size() const;
  private:
  int _internal_metadata_source_reference_size() const;
  public:
  void clear_metadata_source_reference();
  const std::string& metadata_source_reference(int index) const;
  std::string* mutable_metadata_source_reference(int index);
  void set_metadata_source_reference(int index, const std::string& value);
  void set_metadata_source_reference(int index, std::string&& value);
  void set_metadata_source_reference(int index, const char* value);
  void set_metadata_source_reference(int index, const char* value, size_t size);
  std::string* add_metadata_source_reference();
  void add_metadata_source_reference(const std::string& value);
  void add_metadata_source_reference(std::string&& value);
  void add_metadata_source_reference(const char* value);
  void add_metadata_source_reference(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& metadata_source_reference() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_metadata_source_reference();
  private:
  const std::string& _internal_metadata_source_reference(int index) const;
  std::string* _internal_add_metadata_source_reference();
  public:

  // optional .mead101.mead.Duration duration_in_charts = 4;
  bool has_duration_in_charts() const;
  private:
  bool _internal_has_duration_in_charts() const;
  public:
  void clear_duration_in_charts();
  const ::mead101::mead::Duration& duration_in_charts() const;
  ::mead101::mead::Duration* release_duration_in_charts();
  ::mead101::mead::Duration* mutable_duration_in_charts();
  void set_allocated_duration_in_charts(::mead101::mead::Duration* duration_in_charts);
  private:
  const ::mead101::mead::Duration& _internal_duration_in_charts() const;
  ::mead101::mead::Duration* _internal_mutable_duration_in_charts();
  public:
  void unsafe_arena_set_allocated_duration_in_charts(
      ::mead101::mead::Duration* duration_in_charts);
  ::mead101::mead::Duration* unsafe_arena_release_duration_in_charts();

  // optional .mead101.mead.CurrentTerritoryCode territory_code = 6;
  bool has_territory_code() const;
  private:
  bool _internal_has_territory_code() const;
  public:
  void clear_territory_code();
  const ::mead101::mead::CurrentTerritoryCode& territory_code() const;
  ::mead101::mead::CurrentTerritoryCode* release_territory_code();
  ::mead101::mead::CurrentTerritoryCode* mutable_territory_code();
  void set_allocated_territory_code(::mead101::mead::CurrentTerritoryCode* territory_code);
  private:
  const ::mead101::mead::CurrentTerritoryCode& _internal_territory_code() const;
  ::mead101::mead::CurrentTerritoryCode* _internal_mutable_territory_code();
  public:
  void unsafe_arena_set_allocated_territory_code(
      ::mead101::mead::CurrentTerritoryCode* territory_code);
  ::mead101::mead::CurrentTerritoryCode* unsafe_arena_release_territory_code();

  // optional int32 top_position = 7;
  bool has_top_position() const;
  private:
  bool _internal_has_top_position() const;
  public:
  void clear_top_position();
  ::PROTOBUF_NAMESPACE_ID::int32 top_position() const;
  void set_top_position(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_top_position() const;
  void _internal_set_top_position(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mead101.mead.HistoricChartingInformation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::ChartEntry > chart_entry_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::ChartName > chart_name_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::TextWithFormat > comment_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> metadata_source_reference_;
  ::mead101::mead::Duration* duration_in_charts_;
  ::mead101::mead::CurrentTerritoryCode* territory_code_;
  ::PROTOBUF_NAMESPACE_ID::int32 top_position_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class HistoricChartingInformationForParty PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.HistoricChartingInformationForParty) */ {
 public:
  inline HistoricChartingInformationForParty() : HistoricChartingInformationForParty(nullptr) {}
  virtual ~HistoricChartingInformationForParty();

  HistoricChartingInformationForParty(const HistoricChartingInformationForParty& from);
  HistoricChartingInformationForParty(HistoricChartingInformationForParty&& from) noexcept
    : HistoricChartingInformationForParty() {
    *this = ::std::move(from);
  }

  inline HistoricChartingInformationForParty& operator=(const HistoricChartingInformationForParty& from) {
    CopyFrom(from);
    return *this;
  }
  inline HistoricChartingInformationForParty& operator=(HistoricChartingInformationForParty&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HistoricChartingInformationForParty& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HistoricChartingInformationForParty* internal_default_instance() {
    return reinterpret_cast<const HistoricChartingInformationForParty*>(
               &_HistoricChartingInformationForParty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(HistoricChartingInformationForParty& a, HistoricChartingInformationForParty& b) {
    a.Swap(&b);
  }
  inline void Swap(HistoricChartingInformationForParty* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HistoricChartingInformationForParty* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HistoricChartingInformationForParty* New() const final {
    return CreateMaybeMessage<HistoricChartingInformationForParty>(nullptr);
  }

  HistoricChartingInformationForParty* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HistoricChartingInformationForParty>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HistoricChartingInformationForParty& from);
  void MergeFrom(const HistoricChartingInformationForParty& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HistoricChartingInformationForParty* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.HistoricChartingInformationForParty";
  }
  protected:
  explicit HistoricChartingInformationForParty(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChartEntryFieldNumber = 1,
    kChartNameFieldNumber = 2,
    kCommentFieldNumber = 6,
    kMetadataSourceReferenceFieldNumber = 8,
    kChartedReleaseFieldNumber = 3,
    kChartedResourceFieldNumber = 4,
    kChartedWorkFieldNumber = 5,
    kDurationInChartsFieldNumber = 7,
    kTerritoryCodeFieldNumber = 9,
    kTopPositionFieldNumber = 10,
  };
  // repeated .mead101.mead.ChartEntry chart_entry = 1;
  int chart_entry_size() const;
  private:
  int _internal_chart_entry_size() const;
  public:
  void clear_chart_entry();
  ::mead101::mead::ChartEntry* mutable_chart_entry(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::ChartEntry >*
      mutable_chart_entry();
  private:
  const ::mead101::mead::ChartEntry& _internal_chart_entry(int index) const;
  ::mead101::mead::ChartEntry* _internal_add_chart_entry();
  public:
  const ::mead101::mead::ChartEntry& chart_entry(int index) const;
  ::mead101::mead::ChartEntry* add_chart_entry();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::ChartEntry >&
      chart_entry() const;

  // repeated .mead101.mead.ChartName chart_name = 2;
  int chart_name_size() const;
  private:
  int _internal_chart_name_size() const;
  public:
  void clear_chart_name();
  ::mead101::mead::ChartName* mutable_chart_name(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::ChartName >*
      mutable_chart_name();
  private:
  const ::mead101::mead::ChartName& _internal_chart_name(int index) const;
  ::mead101::mead::ChartName* _internal_add_chart_name();
  public:
  const ::mead101::mead::ChartName& chart_name(int index) const;
  ::mead101::mead::ChartName* add_chart_name();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::ChartName >&
      chart_name() const;

  // repeated .mead101.mead.TextWithFormat comment = 6;
  int comment_size() const;
  private:
  int _internal_comment_size() const;
  public:
  void clear_comment();
  ::mead101::mead::TextWithFormat* mutable_comment(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::TextWithFormat >*
      mutable_comment();
  private:
  const ::mead101::mead::TextWithFormat& _internal_comment(int index) const;
  ::mead101::mead::TextWithFormat* _internal_add_comment();
  public:
  const ::mead101::mead::TextWithFormat& comment(int index) const;
  ::mead101::mead::TextWithFormat* add_comment();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::TextWithFormat >&
      comment() const;

  // repeated string metadata_source_reference = 8;
  int metadata_source_reference_size() const;
  private:
  int _internal_metadata_source_reference_size() const;
  public:
  void clear_metadata_source_reference();
  const std::string& metadata_source_reference(int index) const;
  std::string* mutable_metadata_source_reference(int index);
  void set_metadata_source_reference(int index, const std::string& value);
  void set_metadata_source_reference(int index, std::string&& value);
  void set_metadata_source_reference(int index, const char* value);
  void set_metadata_source_reference(int index, const char* value, size_t size);
  std::string* add_metadata_source_reference();
  void add_metadata_source_reference(const std::string& value);
  void add_metadata_source_reference(std::string&& value);
  void add_metadata_source_reference(const char* value);
  void add_metadata_source_reference(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& metadata_source_reference() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_metadata_source_reference();
  private:
  const std::string& _internal_metadata_source_reference(int index) const;
  std::string* _internal_add_metadata_source_reference();
  public:

  // optional .mead101.mead.Release charted_release = 3;
  bool has_charted_release() const;
  private:
  bool _internal_has_charted_release() const;
  public:
  void clear_charted_release();
  const ::mead101::mead::Release& charted_release() const;
  ::mead101::mead::Release* release_charted_release();
  ::mead101::mead::Release* mutable_charted_release();
  void set_allocated_charted_release(::mead101::mead::Release* charted_release);
  private:
  const ::mead101::mead::Release& _internal_charted_release() const;
  ::mead101::mead::Release* _internal_mutable_charted_release();
  public:
  void unsafe_arena_set_allocated_charted_release(
      ::mead101::mead::Release* charted_release);
  ::mead101::mead::Release* unsafe_arena_release_charted_release();

  // optional .mead101.mead.Resource charted_resource = 4;
  bool has_charted_resource() const;
  private:
  bool _internal_has_charted_resource() const;
  public:
  void clear_charted_resource();
  const ::mead101::mead::Resource& charted_resource() const;
  ::mead101::mead::Resource* release_charted_resource();
  ::mead101::mead::Resource* mutable_charted_resource();
  void set_allocated_charted_resource(::mead101::mead::Resource* charted_resource);
  private:
  const ::mead101::mead::Resource& _internal_charted_resource() const;
  ::mead101::mead::Resource* _internal_mutable_charted_resource();
  public:
  void unsafe_arena_set_allocated_charted_resource(
      ::mead101::mead::Resource* charted_resource);
  ::mead101::mead::Resource* unsafe_arena_release_charted_resource();

  // optional .mead101.mead.Work charted_work = 5;
  bool has_charted_work() const;
  private:
  bool _internal_has_charted_work() const;
  public:
  void clear_charted_work();
  const ::mead101::mead::Work& charted_work() const;
  ::mead101::mead::Work* release_charted_work();
  ::mead101::mead::Work* mutable_charted_work();
  void set_allocated_charted_work(::mead101::mead::Work* charted_work);
  private:
  const ::mead101::mead::Work& _internal_charted_work() const;
  ::mead101::mead::Work* _internal_mutable_charted_work();
  public:
  void unsafe_arena_set_allocated_charted_work(
      ::mead101::mead::Work* charted_work);
  ::mead101::mead::Work* unsafe_arena_release_charted_work();

  // optional .mead101.mead.Duration duration_in_charts = 7;
  bool has_duration_in_charts() const;
  private:
  bool _internal_has_duration_in_charts() const;
  public:
  void clear_duration_in_charts();
  const ::mead101::mead::Duration& duration_in_charts() const;
  ::mead101::mead::Duration* release_duration_in_charts();
  ::mead101::mead::Duration* mutable_duration_in_charts();
  void set_allocated_duration_in_charts(::mead101::mead::Duration* duration_in_charts);
  private:
  const ::mead101::mead::Duration& _internal_duration_in_charts() const;
  ::mead101::mead::Duration* _internal_mutable_duration_in_charts();
  public:
  void unsafe_arena_set_allocated_duration_in_charts(
      ::mead101::mead::Duration* duration_in_charts);
  ::mead101::mead::Duration* unsafe_arena_release_duration_in_charts();

  // optional .mead101.mead.CurrentTerritoryCode territory_code = 9;
  bool has_territory_code() const;
  private:
  bool _internal_has_territory_code() const;
  public:
  void clear_territory_code();
  const ::mead101::mead::CurrentTerritoryCode& territory_code() const;
  ::mead101::mead::CurrentTerritoryCode* release_territory_code();
  ::mead101::mead::CurrentTerritoryCode* mutable_territory_code();
  void set_allocated_territory_code(::mead101::mead::CurrentTerritoryCode* territory_code);
  private:
  const ::mead101::mead::CurrentTerritoryCode& _internal_territory_code() const;
  ::mead101::mead::CurrentTerritoryCode* _internal_mutable_territory_code();
  public:
  void unsafe_arena_set_allocated_territory_code(
      ::mead101::mead::CurrentTerritoryCode* territory_code);
  ::mead101::mead::CurrentTerritoryCode* unsafe_arena_release_territory_code();

  // optional int32 top_position = 10;
  bool has_top_position() const;
  private:
  bool _internal_has_top_position() const;
  public:
  void clear_top_position();
  ::PROTOBUF_NAMESPACE_ID::int32 top_position() const;
  void set_top_position(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_top_position() const;
  void _internal_set_top_position(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mead101.mead.HistoricChartingInformationForParty)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::ChartEntry > chart_entry_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::ChartName > chart_name_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::TextWithFormat > comment_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> metadata_source_reference_;
  ::mead101::mead::Release* charted_release_;
  ::mead101::mead::Resource* charted_resource_;
  ::mead101::mead::Work* charted_work_;
  ::mead101::mead::Duration* duration_in_charts_;
  ::mead101::mead::CurrentTerritoryCode* territory_code_;
  ::PROTOBUF_NAMESPACE_ID::int32 top_position_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class Icon PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.Icon) */ {
 public:
  inline Icon() : Icon(nullptr) {}
  virtual ~Icon();

  Icon(const Icon& from);
  Icon(Icon&& from) noexcept
    : Icon() {
    *this = ::std::move(from);
  }

  inline Icon& operator=(const Icon& from) {
    CopyFrom(from);
    return *this;
  }
  inline Icon& operator=(Icon&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Icon& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Icon* internal_default_instance() {
    return reinterpret_cast<const Icon*>(
               &_Icon_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(Icon& a, Icon& b) {
    a.Swap(&b);
  }
  inline void Swap(Icon* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Icon* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Icon* New() const final {
    return CreateMaybeMessage<Icon>(nullptr);
  }

  Icon* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Icon>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Icon& from);
  void MergeFrom(const Icon& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Icon* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.Icon";
  }
  protected:
  explicit Icon(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnyAttributeValueFieldNumber = 1,
    kExtValueFieldNumber = 2,
  };
  // repeated string any_attribute_value = 1;
  int any_attribute_value_size() const;
  private:
  int _internal_any_attribute_value_size() const;
  public:
  void clear_any_attribute_value();
  const std::string& any_attribute_value(int index) const;
  std::string* mutable_any_attribute_value(int index);
  void set_any_attribute_value(int index, const std::string& value);
  void set_any_attribute_value(int index, std::string&& value);
  void set_any_attribute_value(int index, const char* value);
  void set_any_attribute_value(int index, const char* value, size_t size);
  std::string* add_any_attribute_value();
  void add_any_attribute_value(const std::string& value);
  void add_any_attribute_value(std::string&& value);
  void add_any_attribute_value(const char* value);
  void add_any_attribute_value(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& any_attribute_value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_any_attribute_value();
  private:
  const std::string& _internal_any_attribute_value(int index) const;
  std::string* _internal_add_any_attribute_value();
  public:

  // optional string ext_value = 2;
  bool has_ext_value() const;
  private:
  bool _internal_has_ext_value() const;
  public:
  void clear_ext_value();
  const std::string& ext_value() const;
  void set_ext_value(const std::string& value);
  void set_ext_value(std::string&& value);
  void set_ext_value(const char* value);
  void set_ext_value(const char* value, size_t size);
  std::string* mutable_ext_value();
  std::string* release_ext_value();
  void set_allocated_ext_value(std::string* ext_value);
  private:
  const std::string& _internal_ext_value() const;
  void _internal_set_ext_value(const std::string& value);
  std::string* _internal_mutable_ext_value();
  public:

  // @@protoc_insertion_point(class_scope:mead101.mead.Icon)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> any_attribute_value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ext_value_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class Id PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.Id) */ {
 public:
  inline Id() : Id(nullptr) {}
  virtual ~Id();

  Id(const Id& from);
  Id(Id&& from) noexcept
    : Id() {
    *this = ::std::move(from);
  }

  inline Id& operator=(const Id& from) {
    CopyFrom(from);
    return *this;
  }
  inline Id& operator=(Id&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Id& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Id* internal_default_instance() {
    return reinterpret_cast<const Id*>(
               &_Id_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(Id& a, Id& b) {
    a.Swap(&b);
  }
  inline void Swap(Id* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Id* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Id* New() const final {
    return CreateMaybeMessage<Id>(nullptr);
  }

  Id* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Id>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Id& from);
  void MergeFrom(const Id& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Id* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.Id";
  }
  protected:
  explicit Id(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnyAttributeValueFieldNumber = 1,
    kExtValueFieldNumber = 2,
  };
  // repeated string any_attribute_value = 1;
  int any_attribute_value_size() const;
  private:
  int _internal_any_attribute_value_size() const;
  public:
  void clear_any_attribute_value();
  const std::string& any_attribute_value(int index) const;
  std::string* mutable_any_attribute_value(int index);
  void set_any_attribute_value(int index, const std::string& value);
  void set_any_attribute_value(int index, std::string&& value);
  void set_any_attribute_value(int index, const char* value);
  void set_any_attribute_value(int index, const char* value, size_t size);
  std::string* add_any_attribute_value();
  void add_any_attribute_value(const std::string& value);
  void add_any_attribute_value(std::string&& value);
  void add_any_attribute_value(const char* value);
  void add_any_attribute_value(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& any_attribute_value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_any_attribute_value();
  private:
  const std::string& _internal_any_attribute_value(int index) const;
  std::string* _internal_add_any_attribute_value();
  public:

  // optional string ext_value = 2;
  bool has_ext_value() const;
  private:
  bool _internal_has_ext_value() const;
  public:
  void clear_ext_value();
  const std::string& ext_value() const;
  void set_ext_value(const std::string& value);
  void set_ext_value(std::string&& value);
  void set_ext_value(const char* value);
  void set_ext_value(const char* value, size_t size);
  std::string* mutable_ext_value();
  std::string* release_ext_value();
  void set_allocated_ext_value(std::string* ext_value);
  private:
  const std::string& _internal_ext_value() const;
  void _internal_set_ext_value(const std::string& value);
  std::string* _internal_mutable_ext_value();
  public:

  // @@protoc_insertion_point(class_scope:mead101.mead.Id)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> any_attribute_value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ext_value_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class Image PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.Image) */ {
 public:
  inline Image() : Image(nullptr) {}
  virtual ~Image();

  Image(const Image& from);
  Image(Image&& from) noexcept
    : Image() {
    *this = ::std::move(from);
  }

  inline Image& operator=(const Image& from) {
    CopyFrom(from);
    return *this;
  }
  inline Image& operator=(Image&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Image& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Image* internal_default_instance() {
    return reinterpret_cast<const Image*>(
               &_Image_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(Image& a, Image& b) {
    a.Swap(&b);
  }
  inline void Swap(Image* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Image* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Image* New() const final {
    return CreateMaybeMessage<Image>(nullptr);
  }

  Image* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Image>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Image& from);
  void MergeFrom(const Image& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Image* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.Image";
  }
  protected:
  explicit Image(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImageTypeFieldNumber = 2,
    kMetadataSourceReferenceFieldNumber = 3,
    kFileFieldNumber = 1,
  };
  // repeated .mead101.mead.ImageType image_type = 2;
  int image_type_size() const;
  private:
  int _internal_image_type_size() const;
  public:
  void clear_image_type();
  ::mead101::mead::ImageType* mutable_image_type(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::ImageType >*
      mutable_image_type();
  private:
  const ::mead101::mead::ImageType& _internal_image_type(int index) const;
  ::mead101::mead::ImageType* _internal_add_image_type();
  public:
  const ::mead101::mead::ImageType& image_type(int index) const;
  ::mead101::mead::ImageType* add_image_type();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::ImageType >&
      image_type() const;

  // repeated string metadata_source_reference = 3;
  int metadata_source_reference_size() const;
  private:
  int _internal_metadata_source_reference_size() const;
  public:
  void clear_metadata_source_reference();
  const std::string& metadata_source_reference(int index) const;
  std::string* mutable_metadata_source_reference(int index);
  void set_metadata_source_reference(int index, const std::string& value);
  void set_metadata_source_reference(int index, std::string&& value);
  void set_metadata_source_reference(int index, const char* value);
  void set_metadata_source_reference(int index, const char* value, size_t size);
  std::string* add_metadata_source_reference();
  void add_metadata_source_reference(const std::string& value);
  void add_metadata_source_reference(std::string&& value);
  void add_metadata_source_reference(const char* value);
  void add_metadata_source_reference(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& metadata_source_reference() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_metadata_source_reference();
  private:
  const std::string& _internal_metadata_source_reference(int index) const;
  std::string* _internal_add_metadata_source_reference();
  public:

  // optional .mead101.mead.File file = 1;
  bool has_file() const;
  private:
  bool _internal_has_file() const;
  public:
  void clear_file();
  const ::mead101::mead::File& file() const;
  ::mead101::mead::File* release_file();
  ::mead101::mead::File* mutable_file();
  void set_allocated_file(::mead101::mead::File* file);
  private:
  const ::mead101::mead::File& _internal_file() const;
  ::mead101::mead::File* _internal_mutable_file();
  public:
  void unsafe_arena_set_allocated_file(
      ::mead101::mead::File* file);
  ::mead101::mead::File* unsafe_arena_release_file();

  // @@protoc_insertion_point(class_scope:mead101.mead.Image)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::ImageType > image_type_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> metadata_source_reference_;
  ::mead101::mead::File* file_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class ImageType PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.ImageType) */ {
 public:
  inline ImageType() : ImageType(nullptr) {}
  virtual ~ImageType();

  ImageType(const ImageType& from);
  ImageType(ImageType&& from) noexcept
    : ImageType() {
    *this = ::std::move(from);
  }

  inline ImageType& operator=(const ImageType& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImageType& operator=(ImageType&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImageType& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ImageType* internal_default_instance() {
    return reinterpret_cast<const ImageType*>(
               &_ImageType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(ImageType& a, ImageType& b) {
    a.Swap(&b);
  }
  inline void Swap(ImageType* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImageType* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImageType* New() const final {
    return CreateMaybeMessage<ImageType>(nullptr);
  }

  ImageType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImageType>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImageType& from);
  void MergeFrom(const ImageType& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImageType* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.ImageType";
  }
  protected:
  explicit ImageType(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNamespaceFieldNumber = 1,
    kUserDefinedValueFieldNumber = 2,
    kExtValueFieldNumber = 3,
  };
  // optional string namespace = 1;
  bool has_namespace_() const;
  private:
  bool _internal_has_namespace_() const;
  public:
  void clear_namespace_();
  const std::string& namespace_() const;
  void set_namespace_(const std::string& value);
  void set_namespace_(std::string&& value);
  void set_namespace_(const char* value);
  void set_namespace_(const char* value, size_t size);
  std::string* mutable_namespace_();
  std::string* release_namespace_();
  void set_allocated_namespace_(std::string* namespace_);
  private:
  const std::string& _internal_namespace_() const;
  void _internal_set_namespace_(const std::string& value);
  std::string* _internal_mutable_namespace_();
  public:

  // optional string user_defined_value = 2;
  bool has_user_defined_value() const;
  private:
  bool _internal_has_user_defined_value() const;
  public:
  void clear_user_defined_value();
  const std::string& user_defined_value() const;
  void set_user_defined_value(const std::string& value);
  void set_user_defined_value(std::string&& value);
  void set_user_defined_value(const char* value);
  void set_user_defined_value(const char* value, size_t size);
  std::string* mutable_user_defined_value();
  std::string* release_user_defined_value();
  void set_allocated_user_defined_value(std::string* user_defined_value);
  private:
  const std::string& _internal_user_defined_value() const;
  void _internal_set_user_defined_value(const std::string& value);
  std::string* _internal_mutable_user_defined_value();
  public:

  // optional .mead101.avs.ImageType ext_value = 3;
  bool has_ext_value() const;
  private:
  bool _internal_has_ext_value() const;
  public:
  void clear_ext_value();
  const ::mead101::avs::ImageType& ext_value() const;
  ::mead101::avs::ImageType* release_ext_value();
  ::mead101::avs::ImageType* mutable_ext_value();
  void set_allocated_ext_value(::mead101::avs::ImageType* ext_value);
  private:
  const ::mead101::avs::ImageType& _internal_ext_value() const;
  ::mead101::avs::ImageType* _internal_mutable_ext_value();
  public:
  void unsafe_arena_set_allocated_ext_value(
      ::mead101::avs::ImageType* ext_value);
  ::mead101::avs::ImageType* unsafe_arena_release_ext_value();

  // @@protoc_insertion_point(class_scope:mead101.mead.ImageType)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr namespace__;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_defined_value_;
  ::mead101::avs::ImageType* ext_value_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class Instrument PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.Instrument) */ {
 public:
  inline Instrument() : Instrument(nullptr) {}
  virtual ~Instrument();

  Instrument(const Instrument& from);
  Instrument(Instrument&& from) noexcept
    : Instrument() {
    *this = ::std::move(from);
  }

  inline Instrument& operator=(const Instrument& from) {
    CopyFrom(from);
    return *this;
  }
  inline Instrument& operator=(Instrument&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Instrument& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Instrument* internal_default_instance() {
    return reinterpret_cast<const Instrument*>(
               &_Instrument_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(Instrument& a, Instrument& b) {
    a.Swap(&b);
  }
  inline void Swap(Instrument* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Instrument* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Instrument* New() const final {
    return CreateMaybeMessage<Instrument>(nullptr);
  }

  Instrument* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Instrument>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Instrument& from);
  void MergeFrom(const Instrument& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Instrument* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.Instrument";
  }
  protected:
  explicit Instrument(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetadataSourceReferenceFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // repeated string metadata_source_reference = 1;
  int metadata_source_reference_size() const;
  private:
  int _internal_metadata_source_reference_size() const;
  public:
  void clear_metadata_source_reference();
  const std::string& metadata_source_reference(int index) const;
  std::string* mutable_metadata_source_reference(int index);
  void set_metadata_source_reference(int index, const std::string& value);
  void set_metadata_source_reference(int index, std::string&& value);
  void set_metadata_source_reference(int index, const char* value);
  void set_metadata_source_reference(int index, const char* value, size_t size);
  std::string* add_metadata_source_reference();
  void add_metadata_source_reference(const std::string& value);
  void add_metadata_source_reference(std::string&& value);
  void add_metadata_source_reference(const char* value);
  void add_metadata_source_reference(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& metadata_source_reference() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_metadata_source_reference();
  private:
  const std::string& _internal_metadata_source_reference(int index) const;
  std::string* _internal_add_metadata_source_reference();
  public:

  // optional .mead101.mead.InstrumentValue value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const ::mead101::mead::InstrumentValue& value() const;
  ::mead101::mead::InstrumentValue* release_value();
  ::mead101::mead::InstrumentValue* mutable_value();
  void set_allocated_value(::mead101::mead::InstrumentValue* value);
  private:
  const ::mead101::mead::InstrumentValue& _internal_value() const;
  ::mead101::mead::InstrumentValue* _internal_mutable_value();
  public:
  void unsafe_arena_set_allocated_value(
      ::mead101::mead::InstrumentValue* value);
  ::mead101::mead::InstrumentValue* unsafe_arena_release_value();

  // @@protoc_insertion_point(class_scope:mead101.mead.Instrument)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> metadata_source_reference_;
  ::mead101::mead::InstrumentValue* value_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class InstrumentUsed PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.InstrumentUsed) */ {
 public:
  inline InstrumentUsed() : InstrumentUsed(nullptr) {}
  virtual ~InstrumentUsed();

  InstrumentUsed(const InstrumentUsed& from);
  InstrumentUsed(InstrumentUsed&& from) noexcept
    : InstrumentUsed() {
    *this = ::std::move(from);
  }

  inline InstrumentUsed& operator=(const InstrumentUsed& from) {
    CopyFrom(from);
    return *this;
  }
  inline InstrumentUsed& operator=(InstrumentUsed&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InstrumentUsed& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InstrumentUsed* internal_default_instance() {
    return reinterpret_cast<const InstrumentUsed*>(
               &_InstrumentUsed_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(InstrumentUsed& a, InstrumentUsed& b) {
    a.Swap(&b);
  }
  inline void Swap(InstrumentUsed* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InstrumentUsed* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InstrumentUsed* New() const final {
    return CreateMaybeMessage<InstrumentUsed>(nullptr);
  }

  InstrumentUsed* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InstrumentUsed>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InstrumentUsed& from);
  void MergeFrom(const InstrumentUsed& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InstrumentUsed* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.InstrumentUsed";
  }
  protected:
  explicit InstrumentUsed(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetadataSourceReferenceFieldNumber = 2,
    kValueFieldNumber = 3,
    kIsFeaturedFieldNumber = 1,
  };
  // repeated string metadata_source_reference = 2;
  int metadata_source_reference_size() const;
  private:
  int _internal_metadata_source_reference_size() const;
  public:
  void clear_metadata_source_reference();
  const std::string& metadata_source_reference(int index) const;
  std::string* mutable_metadata_source_reference(int index);
  void set_metadata_source_reference(int index, const std::string& value);
  void set_metadata_source_reference(int index, std::string&& value);
  void set_metadata_source_reference(int index, const char* value);
  void set_metadata_source_reference(int index, const char* value, size_t size);
  std::string* add_metadata_source_reference();
  void add_metadata_source_reference(const std::string& value);
  void add_metadata_source_reference(std::string&& value);
  void add_metadata_source_reference(const char* value);
  void add_metadata_source_reference(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& metadata_source_reference() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_metadata_source_reference();
  private:
  const std::string& _internal_metadata_source_reference(int index) const;
  std::string* _internal_add_metadata_source_reference();
  public:

  // optional .mead101.mead.InstrumentValue value = 3;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const ::mead101::mead::InstrumentValue& value() const;
  ::mead101::mead::InstrumentValue* release_value();
  ::mead101::mead::InstrumentValue* mutable_value();
  void set_allocated_value(::mead101::mead::InstrumentValue* value);
  private:
  const ::mead101::mead::InstrumentValue& _internal_value() const;
  ::mead101::mead::InstrumentValue* _internal_mutable_value();
  public:
  void unsafe_arena_set_allocated_value(
      ::mead101::mead::InstrumentValue* value);
  ::mead101::mead::InstrumentValue* unsafe_arena_release_value();

  // optional bool is_featured = 1;
  bool has_is_featured() const;
  private:
  bool _internal_has_is_featured() const;
  public:
  void clear_is_featured();
  bool is_featured() const;
  void set_is_featured(bool value);
  private:
  bool _internal_is_featured() const;
  void _internal_set_is_featured(bool value);
  public:

  // @@protoc_insertion_point(class_scope:mead101.mead.InstrumentUsed)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> metadata_source_reference_;
  ::mead101::mead::InstrumentValue* value_;
  bool is_featured_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class InstrumentValue PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.InstrumentValue) */ {
 public:
  inline InstrumentValue() : InstrumentValue(nullptr) {}
  virtual ~InstrumentValue();

  InstrumentValue(const InstrumentValue& from);
  InstrumentValue(InstrumentValue&& from) noexcept
    : InstrumentValue() {
    *this = ::std::move(from);
  }

  inline InstrumentValue& operator=(const InstrumentValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline InstrumentValue& operator=(InstrumentValue&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InstrumentValue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InstrumentValue* internal_default_instance() {
    return reinterpret_cast<const InstrumentValue*>(
               &_InstrumentValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(InstrumentValue& a, InstrumentValue& b) {
    a.Swap(&b);
  }
  inline void Swap(InstrumentValue* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InstrumentValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InstrumentValue* New() const final {
    return CreateMaybeMessage<InstrumentValue>(nullptr);
  }

  InstrumentValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InstrumentValue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InstrumentValue& from);
  void MergeFrom(const InstrumentValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InstrumentValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.InstrumentValue";
  }
  protected:
  explicit InstrumentValue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNamespaceFieldNumber = 1,
    kUserDefinedValueFieldNumber = 2,
    kExtValueFieldNumber = 3,
  };
  // optional string namespace = 1;
  bool has_namespace_() const;
  private:
  bool _internal_has_namespace_() const;
  public:
  void clear_namespace_();
  const std::string& namespace_() const;
  void set_namespace_(const std::string& value);
  void set_namespace_(std::string&& value);
  void set_namespace_(const char* value);
  void set_namespace_(const char* value, size_t size);
  std::string* mutable_namespace_();
  std::string* release_namespace_();
  void set_allocated_namespace_(std::string* namespace_);
  private:
  const std::string& _internal_namespace_() const;
  void _internal_set_namespace_(const std::string& value);
  std::string* _internal_mutable_namespace_();
  public:

  // optional string user_defined_value = 2;
  bool has_user_defined_value() const;
  private:
  bool _internal_has_user_defined_value() const;
  public:
  void clear_user_defined_value();
  const std::string& user_defined_value() const;
  void set_user_defined_value(const std::string& value);
  void set_user_defined_value(std::string&& value);
  void set_user_defined_value(const char* value);
  void set_user_defined_value(const char* value, size_t size);
  std::string* mutable_user_defined_value();
  std::string* release_user_defined_value();
  void set_allocated_user_defined_value(std::string* user_defined_value);
  private:
  const std::string& _internal_user_defined_value() const;
  void _internal_set_user_defined_value(const std::string& value);
  std::string* _internal_mutable_user_defined_value();
  public:

  // optional .mead101.avs.InstrumentType ext_value = 3;
  bool has_ext_value() const;
  private:
  bool _internal_has_ext_value() const;
  public:
  void clear_ext_value();
  const ::mead101::avs::InstrumentType& ext_value() const;
  ::mead101::avs::InstrumentType* release_ext_value();
  ::mead101::avs::InstrumentType* mutable_ext_value();
  void set_allocated_ext_value(::mead101::avs::InstrumentType* ext_value);
  private:
  const ::mead101::avs::InstrumentType& _internal_ext_value() const;
  ::mead101::avs::InstrumentType* _internal_mutable_ext_value();
  public:
  void unsafe_arena_set_allocated_ext_value(
      ::mead101::avs::InstrumentType* ext_value);
  ::mead101::avs::InstrumentType* unsafe_arena_release_ext_value();

  // @@protoc_insertion_point(class_scope:mead101.mead.InstrumentValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr namespace__;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_defined_value_;
  ::mead101::avs::InstrumentType* ext_value_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class Link PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.Link) */ {
 public:
  inline Link() : Link(nullptr) {}
  virtual ~Link();

  Link(const Link& from);
  Link(Link&& from) noexcept
    : Link() {
    *this = ::std::move(from);
  }

  inline Link& operator=(const Link& from) {
    CopyFrom(from);
    return *this;
  }
  inline Link& operator=(Link&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Link& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Link* internal_default_instance() {
    return reinterpret_cast<const Link*>(
               &_Link_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  friend void swap(Link& a, Link& b) {
    a.Swap(&b);
  }
  inline void Swap(Link* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Link* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Link* New() const final {
    return CreateMaybeMessage<Link>(nullptr);
  }

  Link* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Link>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Link& from);
  void MergeFrom(const Link& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Link* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.Link";
  }
  protected:
  explicit Link(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnyAttributeValueFieldNumber = 1,
    kHrefFieldNumber = 2,
    kHreflangFieldNumber = 3,
    kRelFieldNumber = 5,
    kTitleFieldNumber = 6,
    kTypeFieldNumber = 7,
    kLengthFieldNumber = 4,
  };
  // repeated string any_attribute_value = 1;
  int any_attribute_value_size() const;
  private:
  int _internal_any_attribute_value_size() const;
  public:
  void clear_any_attribute_value();
  const std::string& any_attribute_value(int index) const;
  std::string* mutable_any_attribute_value(int index);
  void set_any_attribute_value(int index, const std::string& value);
  void set_any_attribute_value(int index, std::string&& value);
  void set_any_attribute_value(int index, const char* value);
  void set_any_attribute_value(int index, const char* value, size_t size);
  std::string* add_any_attribute_value();
  void add_any_attribute_value(const std::string& value);
  void add_any_attribute_value(std::string&& value);
  void add_any_attribute_value(const char* value);
  void add_any_attribute_value(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& any_attribute_value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_any_attribute_value();
  private:
  const std::string& _internal_any_attribute_value(int index) const;
  std::string* _internal_add_any_attribute_value();
  public:

  // optional string href = 2;
  bool has_href() const;
  private:
  bool _internal_has_href() const;
  public:
  void clear_href();
  const std::string& href() const;
  void set_href(const std::string& value);
  void set_href(std::string&& value);
  void set_href(const char* value);
  void set_href(const char* value, size_t size);
  std::string* mutable_href();
  std::string* release_href();
  void set_allocated_href(std::string* href);
  private:
  const std::string& _internal_href() const;
  void _internal_set_href(const std::string& value);
  std::string* _internal_mutable_href();
  public:

  // optional string hreflang = 3;
  bool has_hreflang() const;
  private:
  bool _internal_has_hreflang() const;
  public:
  void clear_hreflang();
  const std::string& hreflang() const;
  void set_hreflang(const std::string& value);
  void set_hreflang(std::string&& value);
  void set_hreflang(const char* value);
  void set_hreflang(const char* value, size_t size);
  std::string* mutable_hreflang();
  std::string* release_hreflang();
  void set_allocated_hreflang(std::string* hreflang);
  private:
  const std::string& _internal_hreflang() const;
  void _internal_set_hreflang(const std::string& value);
  std::string* _internal_mutable_hreflang();
  public:

  // optional string rel = 5;
  bool has_rel() const;
  private:
  bool _internal_has_rel() const;
  public:
  void clear_rel();
  const std::string& rel() const;
  void set_rel(const std::string& value);
  void set_rel(std::string&& value);
  void set_rel(const char* value);
  void set_rel(const char* value, size_t size);
  std::string* mutable_rel();
  std::string* release_rel();
  void set_allocated_rel(std::string* rel);
  private:
  const std::string& _internal_rel() const;
  void _internal_set_rel(const std::string& value);
  std::string* _internal_mutable_rel();
  public:

  // optional string title = 6;
  bool has_title() const;
  private:
  bool _internal_has_title() const;
  public:
  void clear_title();
  const std::string& title() const;
  void set_title(const std::string& value);
  void set_title(std::string&& value);
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  std::string* mutable_title();
  std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // optional string type = 7;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // optional uint32 length = 4;
  bool has_length() const;
  private:
  bool _internal_has_length() const;
  public:
  void clear_length();
  ::PROTOBUF_NAMESPACE_ID::uint32 length() const;
  void set_length(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_length() const;
  void _internal_set_length(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mead101.mead.Link)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> any_attribute_value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr href_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hreflang_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rel_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 length_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class LocationAndDateOfSession PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.LocationAndDateOfSession) */ {
 public:
  inline LocationAndDateOfSession() : LocationAndDateOfSession(nullptr) {}
  virtual ~LocationAndDateOfSession();

  LocationAndDateOfSession(const LocationAndDateOfSession& from);
  LocationAndDateOfSession(LocationAndDateOfSession&& from) noexcept
    : LocationAndDateOfSession() {
    *this = ::std::move(from);
  }

  inline LocationAndDateOfSession& operator=(const LocationAndDateOfSession& from) {
    CopyFrom(from);
    return *this;
  }
  inline LocationAndDateOfSession& operator=(LocationAndDateOfSession&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LocationAndDateOfSession& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LocationAndDateOfSession* internal_default_instance() {
    return reinterpret_cast<const LocationAndDateOfSession*>(
               &_LocationAndDateOfSession_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  friend void swap(LocationAndDateOfSession& a, LocationAndDateOfSession& b) {
    a.Swap(&b);
  }
  inline void Swap(LocationAndDateOfSession* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LocationAndDateOfSession* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LocationAndDateOfSession* New() const final {
    return CreateMaybeMessage<LocationAndDateOfSession>(nullptr);
  }

  LocationAndDateOfSession* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LocationAndDateOfSession>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LocationAndDateOfSession& from);
  void MergeFrom(const LocationAndDateOfSession& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LocationAndDateOfSession* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.LocationAndDateOfSession";
  }
  protected:
  explicit LocationAndDateOfSession(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContributorFieldNumber = 2,
    kMetadataSourceReferenceFieldNumber = 3,
    kSessionTypeFieldNumber = 5,
    kVenueFieldNumber = 6,
    kCommentFieldNumber = 1,
    kPeriodFieldNumber = 4,
  };
  // repeated .mead101.mead.PartyWithRole contributor = 2;
  int contributor_size() const;
  private:
  int _internal_contributor_size() const;
  public:
  void clear_contributor();
  ::mead101::mead::PartyWithRole* mutable_contributor(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::PartyWithRole >*
      mutable_contributor();
  private:
  const ::mead101::mead::PartyWithRole& _internal_contributor(int index) const;
  ::mead101::mead::PartyWithRole* _internal_add_contributor();
  public:
  const ::mead101::mead::PartyWithRole& contributor(int index) const;
  ::mead101::mead::PartyWithRole* add_contributor();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::PartyWithRole >&
      contributor() const;

  // repeated string metadata_source_reference = 3;
  int metadata_source_reference_size() const;
  private:
  int _internal_metadata_source_reference_size() const;
  public:
  void clear_metadata_source_reference();
  const std::string& metadata_source_reference(int index) const;
  std::string* mutable_metadata_source_reference(int index);
  void set_metadata_source_reference(int index, const std::string& value);
  void set_metadata_source_reference(int index, std::string&& value);
  void set_metadata_source_reference(int index, const char* value);
  void set_metadata_source_reference(int index, const char* value, size_t size);
  std::string* add_metadata_source_reference();
  void add_metadata_source_reference(const std::string& value);
  void add_metadata_source_reference(std::string&& value);
  void add_metadata_source_reference(const char* value);
  void add_metadata_source_reference(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& metadata_source_reference() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_metadata_source_reference();
  private:
  const std::string& _internal_metadata_source_reference(int index) const;
  std::string* _internal_add_metadata_source_reference();
  public:

  // repeated .mead101.mead.SessionType session_type = 5;
  int session_type_size() const;
  private:
  int _internal_session_type_size() const;
  public:
  void clear_session_type();
  ::mead101::mead::SessionType* mutable_session_type(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::SessionType >*
      mutable_session_type();
  private:
  const ::mead101::mead::SessionType& _internal_session_type(int index) const;
  ::mead101::mead::SessionType* _internal_add_session_type();
  public:
  const ::mead101::mead::SessionType& session_type(int index) const;
  ::mead101::mead::SessionType* add_session_type();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::SessionType >&
      session_type() const;

  // repeated .mead101.mead.Venue venue = 6;
  int venue_size() const;
  private:
  int _internal_venue_size() const;
  public:
  void clear_venue();
  ::mead101::mead::Venue* mutable_venue(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Venue >*
      mutable_venue();
  private:
  const ::mead101::mead::Venue& _internal_venue(int index) const;
  ::mead101::mead::Venue* _internal_add_venue();
  public:
  const ::mead101::mead::Venue& venue(int index) const;
  ::mead101::mead::Venue* add_venue();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Venue >&
      venue() const;

  // optional .mead101.mead.TextWithFormat comment = 1;
  bool has_comment() const;
  private:
  bool _internal_has_comment() const;
  public:
  void clear_comment();
  const ::mead101::mead::TextWithFormat& comment() const;
  ::mead101::mead::TextWithFormat* release_comment();
  ::mead101::mead::TextWithFormat* mutable_comment();
  void set_allocated_comment(::mead101::mead::TextWithFormat* comment);
  private:
  const ::mead101::mead::TextWithFormat& _internal_comment() const;
  ::mead101::mead::TextWithFormat* _internal_mutable_comment();
  public:
  void unsafe_arena_set_allocated_comment(
      ::mead101::mead::TextWithFormat* comment);
  ::mead101::mead::TextWithFormat* unsafe_arena_release_comment();

  // optional .mead101.mead.Period period = 4;
  bool has_period() const;
  private:
  bool _internal_has_period() const;
  public:
  void clear_period();
  const ::mead101::mead::Period& period() const;
  ::mead101::mead::Period* release_period();
  ::mead101::mead::Period* mutable_period();
  void set_allocated_period(::mead101::mead::Period* period);
  private:
  const ::mead101::mead::Period& _internal_period() const;
  ::mead101::mead::Period* _internal_mutable_period();
  public:
  void unsafe_arena_set_allocated_period(
      ::mead101::mead::Period* period);
  ::mead101::mead::Period* unsafe_arena_release_period();

  // @@protoc_insertion_point(class_scope:mead101.mead.LocationAndDateOfSession)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::PartyWithRole > contributor_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> metadata_source_reference_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::SessionType > session_type_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Venue > venue_;
  ::mead101::mead::TextWithFormat* comment_;
  ::mead101::mead::Period* period_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class Logo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.Logo) */ {
 public:
  inline Logo() : Logo(nullptr) {}
  virtual ~Logo();

  Logo(const Logo& from);
  Logo(Logo&& from) noexcept
    : Logo() {
    *this = ::std::move(from);
  }

  inline Logo& operator=(const Logo& from) {
    CopyFrom(from);
    return *this;
  }
  inline Logo& operator=(Logo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Logo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Logo* internal_default_instance() {
    return reinterpret_cast<const Logo*>(
               &_Logo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  friend void swap(Logo& a, Logo& b) {
    a.Swap(&b);
  }
  inline void Swap(Logo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Logo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Logo* New() const final {
    return CreateMaybeMessage<Logo>(nullptr);
  }

  Logo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Logo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Logo& from);
  void MergeFrom(const Logo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Logo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.Logo";
  }
  protected:
  explicit Logo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnyAttributeValueFieldNumber = 1,
    kExtValueFieldNumber = 2,
  };
  // repeated string any_attribute_value = 1;
  int any_attribute_value_size() const;
  private:
  int _internal_any_attribute_value_size() const;
  public:
  void clear_any_attribute_value();
  const std::string& any_attribute_value(int index) const;
  std::string* mutable_any_attribute_value(int index);
  void set_any_attribute_value(int index, const std::string& value);
  void set_any_attribute_value(int index, std::string&& value);
  void set_any_attribute_value(int index, const char* value);
  void set_any_attribute_value(int index, const char* value, size_t size);
  std::string* add_any_attribute_value();
  void add_any_attribute_value(const std::string& value);
  void add_any_attribute_value(std::string&& value);
  void add_any_attribute_value(const char* value);
  void add_any_attribute_value(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& any_attribute_value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_any_attribute_value();
  private:
  const std::string& _internal_any_attribute_value(int index) const;
  std::string* _internal_add_any_attribute_value();
  public:

  // optional string ext_value = 2;
  bool has_ext_value() const;
  private:
  bool _internal_has_ext_value() const;
  public:
  void clear_ext_value();
  const std::string& ext_value() const;
  void set_ext_value(const std::string& value);
  void set_ext_value(std::string&& value);
  void set_ext_value(const char* value);
  void set_ext_value(const char* value, size_t size);
  std::string* mutable_ext_value();
  std::string* release_ext_value();
  void set_allocated_ext_value(std::string* ext_value);
  private:
  const std::string& _internal_ext_value() const;
  void _internal_set_ext_value(const std::string& value);
  std::string* _internal_mutable_ext_value();
  public:

  // @@protoc_insertion_point(class_scope:mead101.mead.Logo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> any_attribute_value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ext_value_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class Lyrics PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.Lyrics) */ {
 public:
  inline Lyrics() : Lyrics(nullptr) {}
  virtual ~Lyrics();

  Lyrics(const Lyrics& from);
  Lyrics(Lyrics&& from) noexcept
    : Lyrics() {
    *this = ::std::move(from);
  }

  inline Lyrics& operator=(const Lyrics& from) {
    CopyFrom(from);
    return *this;
  }
  inline Lyrics& operator=(Lyrics&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Lyrics& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Lyrics* internal_default_instance() {
    return reinterpret_cast<const Lyrics*>(
               &_Lyrics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  friend void swap(Lyrics& a, Lyrics& b) {
    a.Swap(&b);
  }
  inline void Swap(Lyrics* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Lyrics* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Lyrics* New() const final {
    return CreateMaybeMessage<Lyrics>(nullptr);
  }

  Lyrics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Lyrics>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Lyrics& from);
  void MergeFrom(const Lyrics& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Lyrics* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.Lyrics";
  }
  protected:
  explicit Lyrics(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetadataSourceReferenceFieldNumber = 5,
    kPronunciationFieldNumber = 6,
    kLyricsTypeNamespaceFieldNumber = 3,
    kLyricsTypeUserDefinedValueFieldNumber = 4,
    kLyricsTypeFieldNumber = 2,
    kTextFieldNumber = 8,
    kIsMisquotedFieldNumber = 1,
    kSequenceNumberFieldNumber = 7,
  };
  // repeated string metadata_source_reference = 5;
  int metadata_source_reference_size() const;
  private:
  int _internal_metadata_source_reference_size() const;
  public:
  void clear_metadata_source_reference();
  const std::string& metadata_source_reference(int index) const;
  std::string* mutable_metadata_source_reference(int index);
  void set_metadata_source_reference(int index, const std::string& value);
  void set_metadata_source_reference(int index, std::string&& value);
  void set_metadata_source_reference(int index, const char* value);
  void set_metadata_source_reference(int index, const char* value, size_t size);
  std::string* add_metadata_source_reference();
  void add_metadata_source_reference(const std::string& value);
  void add_metadata_source_reference(std::string&& value);
  void add_metadata_source_reference(const char* value);
  void add_metadata_source_reference(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& metadata_source_reference() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_metadata_source_reference();
  private:
  const std::string& _internal_metadata_source_reference(int index) const;
  std::string* _internal_add_metadata_source_reference();
  public:

  // repeated .mead101.mead.Pronunciation pronunciation = 6;
  int pronunciation_size() const;
  private:
  int _internal_pronunciation_size() const;
  public:
  void clear_pronunciation();
  ::mead101::mead::Pronunciation* mutable_pronunciation(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Pronunciation >*
      mutable_pronunciation();
  private:
  const ::mead101::mead::Pronunciation& _internal_pronunciation(int index) const;
  ::mead101::mead::Pronunciation* _internal_add_pronunciation();
  public:
  const ::mead101::mead::Pronunciation& pronunciation(int index) const;
  ::mead101::mead::Pronunciation* add_pronunciation();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Pronunciation >&
      pronunciation() const;

  // optional string lyrics_type_namespace = 3;
  bool has_lyrics_type_namespace() const;
  private:
  bool _internal_has_lyrics_type_namespace() const;
  public:
  void clear_lyrics_type_namespace();
  const std::string& lyrics_type_namespace() const;
  void set_lyrics_type_namespace(const std::string& value);
  void set_lyrics_type_namespace(std::string&& value);
  void set_lyrics_type_namespace(const char* value);
  void set_lyrics_type_namespace(const char* value, size_t size);
  std::string* mutable_lyrics_type_namespace();
  std::string* release_lyrics_type_namespace();
  void set_allocated_lyrics_type_namespace(std::string* lyrics_type_namespace);
  private:
  const std::string& _internal_lyrics_type_namespace() const;
  void _internal_set_lyrics_type_namespace(const std::string& value);
  std::string* _internal_mutable_lyrics_type_namespace();
  public:

  // optional string lyrics_type_user_defined_value = 4;
  bool has_lyrics_type_user_defined_value() const;
  private:
  bool _internal_has_lyrics_type_user_defined_value() const;
  public:
  void clear_lyrics_type_user_defined_value();
  const std::string& lyrics_type_user_defined_value() const;
  void set_lyrics_type_user_defined_value(const std::string& value);
  void set_lyrics_type_user_defined_value(std::string&& value);
  void set_lyrics_type_user_defined_value(const char* value);
  void set_lyrics_type_user_defined_value(const char* value, size_t size);
  std::string* mutable_lyrics_type_user_defined_value();
  std::string* release_lyrics_type_user_defined_value();
  void set_allocated_lyrics_type_user_defined_value(std::string* lyrics_type_user_defined_value);
  private:
  const std::string& _internal_lyrics_type_user_defined_value() const;
  void _internal_set_lyrics_type_user_defined_value(const std::string& value);
  std::string* _internal_mutable_lyrics_type_user_defined_value();
  public:

  // optional .mead101.avs.LyricsType lyrics_type = 2;
  bool has_lyrics_type() const;
  private:
  bool _internal_has_lyrics_type() const;
  public:
  void clear_lyrics_type();
  const ::mead101::avs::LyricsType& lyrics_type() const;
  ::mead101::avs::LyricsType* release_lyrics_type();
  ::mead101::avs::LyricsType* mutable_lyrics_type();
  void set_allocated_lyrics_type(::mead101::avs::LyricsType* lyrics_type);
  private:
  const ::mead101::avs::LyricsType& _internal_lyrics_type() const;
  ::mead101::avs::LyricsType* _internal_mutable_lyrics_type();
  public:
  void unsafe_arena_set_allocated_lyrics_type(
      ::mead101::avs::LyricsType* lyrics_type);
  ::mead101::avs::LyricsType* unsafe_arena_release_lyrics_type();

  // optional .mead101.mead.LyricsText text = 8;
  bool has_text() const;
  private:
  bool _internal_has_text() const;
  public:
  void clear_text();
  const ::mead101::mead::LyricsText& text() const;
  ::mead101::mead::LyricsText* release_text();
  ::mead101::mead::LyricsText* mutable_text();
  void set_allocated_text(::mead101::mead::LyricsText* text);
  private:
  const ::mead101::mead::LyricsText& _internal_text() const;
  ::mead101::mead::LyricsText* _internal_mutable_text();
  public:
  void unsafe_arena_set_allocated_text(
      ::mead101::mead::LyricsText* text);
  ::mead101::mead::LyricsText* unsafe_arena_release_text();

  // optional bool is_misquoted = 1;
  bool has_is_misquoted() const;
  private:
  bool _internal_has_is_misquoted() const;
  public:
  void clear_is_misquoted();
  bool is_misquoted() const;
  void set_is_misquoted(bool value);
  private:
  bool _internal_is_misquoted() const;
  void _internal_set_is_misquoted(bool value);
  public:

  // optional int32 sequence_number = 7;
  bool has_sequence_number() const;
  private:
  bool _internal_has_sequence_number() const;
  public:
  void clear_sequence_number();
  ::PROTOBUF_NAMESPACE_ID::int32 sequence_number() const;
  void set_sequence_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sequence_number() const;
  void _internal_set_sequence_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mead101.mead.Lyrics)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> metadata_source_reference_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Pronunciation > pronunciation_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lyrics_type_namespace_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lyrics_type_user_defined_value_;
  ::mead101::avs::LyricsType* lyrics_type_;
  ::mead101::mead::LyricsText* text_;
  bool is_misquoted_;
  ::PROTOBUF_NAMESPACE_ID::int32 sequence_number_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class LyricsText PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.LyricsText) */ {
 public:
  inline LyricsText() : LyricsText(nullptr) {}
  virtual ~LyricsText();

  LyricsText(const LyricsText& from);
  LyricsText(LyricsText&& from) noexcept
    : LyricsText() {
    *this = ::std::move(from);
  }

  inline LyricsText& operator=(const LyricsText& from) {
    CopyFrom(from);
    return *this;
  }
  inline LyricsText& operator=(LyricsText&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LyricsText& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LyricsText* internal_default_instance() {
    return reinterpret_cast<const LyricsText*>(
               &_LyricsText_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  friend void swap(LyricsText& a, LyricsText& b) {
    a.Swap(&b);
  }
  inline void Swap(LyricsText* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LyricsText* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LyricsText* New() const final {
    return CreateMaybeMessage<LyricsText>(nullptr);
  }

  LyricsText* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LyricsText>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LyricsText& from);
  void MergeFrom(const LyricsText& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LyricsText* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.LyricsText";
  }
  protected:
  explicit LyricsText(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFormatNamespaceFieldNumber = 3,
    kFormatUserDefinedValueFieldNumber = 4,
    kLanguageAndScriptCodeFieldNumber = 6,
    kExtValueFieldNumber = 7,
    kApplicableTerritoryCodeFieldNumber = 1,
    kFormatFieldNumber = 2,
    kIsCompleteFieldNumber = 5,
  };
  // optional string format_namespace = 3;
  bool has_format_namespace() const;
  private:
  bool _internal_has_format_namespace() const;
  public:
  void clear_format_namespace();
  const std::string& format_namespace() const;
  void set_format_namespace(const std::string& value);
  void set_format_namespace(std::string&& value);
  void set_format_namespace(const char* value);
  void set_format_namespace(const char* value, size_t size);
  std::string* mutable_format_namespace();
  std::string* release_format_namespace();
  void set_allocated_format_namespace(std::string* format_namespace);
  private:
  const std::string& _internal_format_namespace() const;
  void _internal_set_format_namespace(const std::string& value);
  std::string* _internal_mutable_format_namespace();
  public:

  // optional string format_user_defined_value = 4;
  bool has_format_user_defined_value() const;
  private:
  bool _internal_has_format_user_defined_value() const;
  public:
  void clear_format_user_defined_value();
  const std::string& format_user_defined_value() const;
  void set_format_user_defined_value(const std::string& value);
  void set_format_user_defined_value(std::string&& value);
  void set_format_user_defined_value(const char* value);
  void set_format_user_defined_value(const char* value, size_t size);
  std::string* mutable_format_user_defined_value();
  std::string* release_format_user_defined_value();
  void set_allocated_format_user_defined_value(std::string* format_user_defined_value);
  private:
  const std::string& _internal_format_user_defined_value() const;
  void _internal_set_format_user_defined_value(const std::string& value);
  std::string* _internal_mutable_format_user_defined_value();
  public:

  // optional string language_and_script_code = 6;
  bool has_language_and_script_code() const;
  private:
  bool _internal_has_language_and_script_code() const;
  public:
  void clear_language_and_script_code();
  const std::string& language_and_script_code() const;
  void set_language_and_script_code(const std::string& value);
  void set_language_and_script_code(std::string&& value);
  void set_language_and_script_code(const char* value);
  void set_language_and_script_code(const char* value, size_t size);
  std::string* mutable_language_and_script_code();
  std::string* release_language_and_script_code();
  void set_allocated_language_and_script_code(std::string* language_and_script_code);
  private:
  const std::string& _internal_language_and_script_code() const;
  void _internal_set_language_and_script_code(const std::string& value);
  std::string* _internal_mutable_language_and_script_code();
  public:

  // optional string ext_value = 7;
  bool has_ext_value() const;
  private:
  bool _internal_has_ext_value() const;
  public:
  void clear_ext_value();
  const std::string& ext_value() const;
  void set_ext_value(const std::string& value);
  void set_ext_value(std::string&& value);
  void set_ext_value(const char* value);
  void set_ext_value(const char* value, size_t size);
  std::string* mutable_ext_value();
  std::string* release_ext_value();
  void set_allocated_ext_value(std::string* ext_value);
  private:
  const std::string& _internal_ext_value() const;
  void _internal_set_ext_value(const std::string& value);
  std::string* _internal_mutable_ext_value();
  public:

  // optional .mead101.avs.CurrentTerritoryCode applicable_territory_code = 1;
  bool has_applicable_territory_code() const;
  private:
  bool _internal_has_applicable_territory_code() const;
  public:
  void clear_applicable_territory_code();
  const ::mead101::avs::CurrentTerritoryCode& applicable_territory_code() const;
  ::mead101::avs::CurrentTerritoryCode* release_applicable_territory_code();
  ::mead101::avs::CurrentTerritoryCode* mutable_applicable_territory_code();
  void set_allocated_applicable_territory_code(::mead101::avs::CurrentTerritoryCode* applicable_territory_code);
  private:
  const ::mead101::avs::CurrentTerritoryCode& _internal_applicable_territory_code() const;
  ::mead101::avs::CurrentTerritoryCode* _internal_mutable_applicable_territory_code();
  public:
  void unsafe_arena_set_allocated_applicable_territory_code(
      ::mead101::avs::CurrentTerritoryCode* applicable_territory_code);
  ::mead101::avs::CurrentTerritoryCode* unsafe_arena_release_applicable_territory_code();

  // optional .mead101.avs.TextCodecType format = 2;
  bool has_format() const;
  private:
  bool _internal_has_format() const;
  public:
  void clear_format();
  const ::mead101::avs::TextCodecType& format() const;
  ::mead101::avs::TextCodecType* release_format();
  ::mead101::avs::TextCodecType* mutable_format();
  void set_allocated_format(::mead101::avs::TextCodecType* format);
  private:
  const ::mead101::avs::TextCodecType& _internal_format() const;
  ::mead101::avs::TextCodecType* _internal_mutable_format();
  public:
  void unsafe_arena_set_allocated_format(
      ::mead101::avs::TextCodecType* format);
  ::mead101::avs::TextCodecType* unsafe_arena_release_format();

  // optional bool is_complete = 5;
  bool has_is_complete() const;
  private:
  bool _internal_has_is_complete() const;
  public:
  void clear_is_complete();
  bool is_complete() const;
  void set_is_complete(bool value);
  private:
  bool _internal_is_complete() const;
  void _internal_set_is_complete(bool value);
  public:

  // @@protoc_insertion_point(class_scope:mead101.mead.LyricsText)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr format_namespace_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr format_user_defined_value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_and_script_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ext_value_;
  ::mead101::avs::CurrentTerritoryCode* applicable_territory_code_;
  ::mead101::avs::TextCodecType* format_;
  bool is_complete_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class MeadMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.MeadMessage) */ {
 public:
  inline MeadMessage() : MeadMessage(nullptr) {}
  virtual ~MeadMessage();

  MeadMessage(const MeadMessage& from);
  MeadMessage(MeadMessage&& from) noexcept
    : MeadMessage() {
    *this = ::std::move(from);
  }

  inline MeadMessage& operator=(const MeadMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline MeadMessage& operator=(MeadMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MeadMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MeadMessage* internal_default_instance() {
    return reinterpret_cast<const MeadMessage*>(
               &_MeadMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    66;

  friend void swap(MeadMessage& a, MeadMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(MeadMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MeadMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MeadMessage* New() const final {
    return CreateMaybeMessage<MeadMessage>(nullptr);
  }

  MeadMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MeadMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MeadMessage& from);
  void MergeFrom(const MeadMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MeadMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.MeadMessage";
  }
  protected:
  explicit MeadMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnyValueFieldNumber = 9,
    kLanguageAndScriptCodeFieldNumber = 1,
    kSubscriptionIdFieldNumber = 7,
    kMessageHeaderFieldNumber = 2,
    kMetadataSourceListFieldNumber = 3,
    kPartyInformationListFieldNumber = 4,
    kReleaseInformationListFieldNumber = 5,
    kResourceInformationListFieldNumber = 6,
    kWorkInformationListFieldNumber = 8,
  };
  // repeated string any_value = 9;
  int any_value_size() const;
  private:
  int _internal_any_value_size() const;
  public:
  void clear_any_value();
  const std::string& any_value(int index) const;
  std::string* mutable_any_value(int index);
  void set_any_value(int index, const std::string& value);
  void set_any_value(int index, std::string&& value);
  void set_any_value(int index, const char* value);
  void set_any_value(int index, const char* value, size_t size);
  std::string* add_any_value();
  void add_any_value(const std::string& value);
  void add_any_value(std::string&& value);
  void add_any_value(const char* value);
  void add_any_value(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& any_value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_any_value();
  private:
  const std::string& _internal_any_value(int index) const;
  std::string* _internal_add_any_value();
  public:

  // optional string language_and_script_code = 1;
  bool has_language_and_script_code() const;
  private:
  bool _internal_has_language_and_script_code() const;
  public:
  void clear_language_and_script_code();
  const std::string& language_and_script_code() const;
  void set_language_and_script_code(const std::string& value);
  void set_language_and_script_code(std::string&& value);
  void set_language_and_script_code(const char* value);
  void set_language_and_script_code(const char* value, size_t size);
  std::string* mutable_language_and_script_code();
  std::string* release_language_and_script_code();
  void set_allocated_language_and_script_code(std::string* language_and_script_code);
  private:
  const std::string& _internal_language_and_script_code() const;
  void _internal_set_language_and_script_code(const std::string& value);
  std::string* _internal_mutable_language_and_script_code();
  public:

  // optional string subscription_id = 7;
  bool has_subscription_id() const;
  private:
  bool _internal_has_subscription_id() const;
  public:
  void clear_subscription_id();
  const std::string& subscription_id() const;
  void set_subscription_id(const std::string& value);
  void set_subscription_id(std::string&& value);
  void set_subscription_id(const char* value);
  void set_subscription_id(const char* value, size_t size);
  std::string* mutable_subscription_id();
  std::string* release_subscription_id();
  void set_allocated_subscription_id(std::string* subscription_id);
  private:
  const std::string& _internal_subscription_id() const;
  void _internal_set_subscription_id(const std::string& value);
  std::string* _internal_mutable_subscription_id();
  public:

  // optional .mead101.mead.MessageHeader message_header = 2;
  bool has_message_header() const;
  private:
  bool _internal_has_message_header() const;
  public:
  void clear_message_header();
  const ::mead101::mead::MessageHeader& message_header() const;
  ::mead101::mead::MessageHeader* release_message_header();
  ::mead101::mead::MessageHeader* mutable_message_header();
  void set_allocated_message_header(::mead101::mead::MessageHeader* message_header);
  private:
  const ::mead101::mead::MessageHeader& _internal_message_header() const;
  ::mead101::mead::MessageHeader* _internal_mutable_message_header();
  public:
  void unsafe_arena_set_allocated_message_header(
      ::mead101::mead::MessageHeader* message_header);
  ::mead101::mead::MessageHeader* unsafe_arena_release_message_header();

  // optional .mead101.mead.MetadataSourceList metadata_source_list = 3;
  bool has_metadata_source_list() const;
  private:
  bool _internal_has_metadata_source_list() const;
  public:
  void clear_metadata_source_list();
  const ::mead101::mead::MetadataSourceList& metadata_source_list() const;
  ::mead101::mead::MetadataSourceList* release_metadata_source_list();
  ::mead101::mead::MetadataSourceList* mutable_metadata_source_list();
  void set_allocated_metadata_source_list(::mead101::mead::MetadataSourceList* metadata_source_list);
  private:
  const ::mead101::mead::MetadataSourceList& _internal_metadata_source_list() const;
  ::mead101::mead::MetadataSourceList* _internal_mutable_metadata_source_list();
  public:
  void unsafe_arena_set_allocated_metadata_source_list(
      ::mead101::mead::MetadataSourceList* metadata_source_list);
  ::mead101::mead::MetadataSourceList* unsafe_arena_release_metadata_source_list();

  // optional .mead101.mead.PartyInformationList party_information_list = 4;
  bool has_party_information_list() const;
  private:
  bool _internal_has_party_information_list() const;
  public:
  void clear_party_information_list();
  const ::mead101::mead::PartyInformationList& party_information_list() const;
  ::mead101::mead::PartyInformationList* release_party_information_list();
  ::mead101::mead::PartyInformationList* mutable_party_information_list();
  void set_allocated_party_information_list(::mead101::mead::PartyInformationList* party_information_list);
  private:
  const ::mead101::mead::PartyInformationList& _internal_party_information_list() const;
  ::mead101::mead::PartyInformationList* _internal_mutable_party_information_list();
  public:
  void unsafe_arena_set_allocated_party_information_list(
      ::mead101::mead::PartyInformationList* party_information_list);
  ::mead101::mead::PartyInformationList* unsafe_arena_release_party_information_list();

  // optional .mead101.mead.ReleaseInformationList release_information_list = 5;
  bool has_release_information_list() const;
  private:
  bool _internal_has_release_information_list() const;
  public:
  void clear_release_information_list();
  const ::mead101::mead::ReleaseInformationList& release_information_list() const;
  ::mead101::mead::ReleaseInformationList* release_release_information_list();
  ::mead101::mead::ReleaseInformationList* mutable_release_information_list();
  void set_allocated_release_information_list(::mead101::mead::ReleaseInformationList* release_information_list);
  private:
  const ::mead101::mead::ReleaseInformationList& _internal_release_information_list() const;
  ::mead101::mead::ReleaseInformationList* _internal_mutable_release_information_list();
  public:
  void unsafe_arena_set_allocated_release_information_list(
      ::mead101::mead::ReleaseInformationList* release_information_list);
  ::mead101::mead::ReleaseInformationList* unsafe_arena_release_release_information_list();

  // optional .mead101.mead.ResourceInformationList resource_information_list = 6;
  bool has_resource_information_list() const;
  private:
  bool _internal_has_resource_information_list() const;
  public:
  void clear_resource_information_list();
  const ::mead101::mead::ResourceInformationList& resource_information_list() const;
  ::mead101::mead::ResourceInformationList* release_resource_information_list();
  ::mead101::mead::ResourceInformationList* mutable_resource_information_list();
  void set_allocated_resource_information_list(::mead101::mead::ResourceInformationList* resource_information_list);
  private:
  const ::mead101::mead::ResourceInformationList& _internal_resource_information_list() const;
  ::mead101::mead::ResourceInformationList* _internal_mutable_resource_information_list();
  public:
  void unsafe_arena_set_allocated_resource_information_list(
      ::mead101::mead::ResourceInformationList* resource_information_list);
  ::mead101::mead::ResourceInformationList* unsafe_arena_release_resource_information_list();

  // optional .mead101.mead.WorkInformationList work_information_list = 8;
  bool has_work_information_list() const;
  private:
  bool _internal_has_work_information_list() const;
  public:
  void clear_work_information_list();
  const ::mead101::mead::WorkInformationList& work_information_list() const;
  ::mead101::mead::WorkInformationList* release_work_information_list();
  ::mead101::mead::WorkInformationList* mutable_work_information_list();
  void set_allocated_work_information_list(::mead101::mead::WorkInformationList* work_information_list);
  private:
  const ::mead101::mead::WorkInformationList& _internal_work_information_list() const;
  ::mead101::mead::WorkInformationList* _internal_mutable_work_information_list();
  public:
  void unsafe_arena_set_allocated_work_information_list(
      ::mead101::mead::WorkInformationList* work_information_list);
  ::mead101::mead::WorkInformationList* unsafe_arena_release_work_information_list();

  // @@protoc_insertion_point(class_scope:mead101.mead.MeadMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> any_value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_and_script_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subscription_id_;
  ::mead101::mead::MessageHeader* message_header_;
  ::mead101::mead::MetadataSourceList* metadata_source_list_;
  ::mead101::mead::PartyInformationList* party_information_list_;
  ::mead101::mead::ReleaseInformationList* release_information_list_;
  ::mead101::mead::ResourceInformationList* resource_information_list_;
  ::mead101::mead::WorkInformationList* work_information_list_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class MessageAuditTrail PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.MessageAuditTrail) */ {
 public:
  inline MessageAuditTrail() : MessageAuditTrail(nullptr) {}
  virtual ~MessageAuditTrail();

  MessageAuditTrail(const MessageAuditTrail& from);
  MessageAuditTrail(MessageAuditTrail&& from) noexcept
    : MessageAuditTrail() {
    *this = ::std::move(from);
  }

  inline MessageAuditTrail& operator=(const MessageAuditTrail& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessageAuditTrail& operator=(MessageAuditTrail&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MessageAuditTrail& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MessageAuditTrail* internal_default_instance() {
    return reinterpret_cast<const MessageAuditTrail*>(
               &_MessageAuditTrail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    67;

  friend void swap(MessageAuditTrail& a, MessageAuditTrail& b) {
    a.Swap(&b);
  }
  inline void Swap(MessageAuditTrail* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MessageAuditTrail* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MessageAuditTrail* New() const final {
    return CreateMaybeMessage<MessageAuditTrail>(nullptr);
  }

  MessageAuditTrail* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MessageAuditTrail>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MessageAuditTrail& from);
  void MergeFrom(const MessageAuditTrail& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageAuditTrail* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.MessageAuditTrail";
  }
  protected:
  explicit MessageAuditTrail(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageAuditTrailEventFieldNumber = 1,
  };
  // repeated .mead101.mead.MessageAuditTrailEvent message_audit_trail_event = 1;
  int message_audit_trail_event_size() const;
  private:
  int _internal_message_audit_trail_event_size() const;
  public:
  void clear_message_audit_trail_event();
  ::mead101::mead::MessageAuditTrailEvent* mutable_message_audit_trail_event(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::MessageAuditTrailEvent >*
      mutable_message_audit_trail_event();
  private:
  const ::mead101::mead::MessageAuditTrailEvent& _internal_message_audit_trail_event(int index) const;
  ::mead101::mead::MessageAuditTrailEvent* _internal_add_message_audit_trail_event();
  public:
  const ::mead101::mead::MessageAuditTrailEvent& message_audit_trail_event(int index) const;
  ::mead101::mead::MessageAuditTrailEvent* add_message_audit_trail_event();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::MessageAuditTrailEvent >&
      message_audit_trail_event() const;

  // @@protoc_insertion_point(class_scope:mead101.mead.MessageAuditTrail)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::MessageAuditTrailEvent > message_audit_trail_event_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class MessageAuditTrailEvent PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.MessageAuditTrailEvent) */ {
 public:
  inline MessageAuditTrailEvent() : MessageAuditTrailEvent(nullptr) {}
  virtual ~MessageAuditTrailEvent();

  MessageAuditTrailEvent(const MessageAuditTrailEvent& from);
  MessageAuditTrailEvent(MessageAuditTrailEvent&& from) noexcept
    : MessageAuditTrailEvent() {
    *this = ::std::move(from);
  }

  inline MessageAuditTrailEvent& operator=(const MessageAuditTrailEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessageAuditTrailEvent& operator=(MessageAuditTrailEvent&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MessageAuditTrailEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MessageAuditTrailEvent* internal_default_instance() {
    return reinterpret_cast<const MessageAuditTrailEvent*>(
               &_MessageAuditTrailEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    68;

  friend void swap(MessageAuditTrailEvent& a, MessageAuditTrailEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(MessageAuditTrailEvent* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MessageAuditTrailEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MessageAuditTrailEvent* New() const final {
    return CreateMaybeMessage<MessageAuditTrailEvent>(nullptr);
  }

  MessageAuditTrailEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MessageAuditTrailEvent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MessageAuditTrailEvent& from);
  void MergeFrom(const MessageAuditTrailEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageAuditTrailEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.MessageAuditTrailEvent";
  }
  protected:
  explicit MessageAuditTrailEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDateTimeFieldNumber = 1,
    kMessagingPartyDescriptorFieldNumber = 2,
  };
  // optional string date_time = 1;
  bool has_date_time() const;
  private:
  bool _internal_has_date_time() const;
  public:
  void clear_date_time();
  const std::string& date_time() const;
  void set_date_time(const std::string& value);
  void set_date_time(std::string&& value);
  void set_date_time(const char* value);
  void set_date_time(const char* value, size_t size);
  std::string* mutable_date_time();
  std::string* release_date_time();
  void set_allocated_date_time(std::string* date_time);
  private:
  const std::string& _internal_date_time() const;
  void _internal_set_date_time(const std::string& value);
  std::string* _internal_mutable_date_time();
  public:

  // optional .mead101.mead.MessagingPartyWithoutCode messaging_party_descriptor = 2;
  bool has_messaging_party_descriptor() const;
  private:
  bool _internal_has_messaging_party_descriptor() const;
  public:
  void clear_messaging_party_descriptor();
  const ::mead101::mead::MessagingPartyWithoutCode& messaging_party_descriptor() const;
  ::mead101::mead::MessagingPartyWithoutCode* release_messaging_party_descriptor();
  ::mead101::mead::MessagingPartyWithoutCode* mutable_messaging_party_descriptor();
  void set_allocated_messaging_party_descriptor(::mead101::mead::MessagingPartyWithoutCode* messaging_party_descriptor);
  private:
  const ::mead101::mead::MessagingPartyWithoutCode& _internal_messaging_party_descriptor() const;
  ::mead101::mead::MessagingPartyWithoutCode* _internal_mutable_messaging_party_descriptor();
  public:
  void unsafe_arena_set_allocated_messaging_party_descriptor(
      ::mead101::mead::MessagingPartyWithoutCode* messaging_party_descriptor);
  ::mead101::mead::MessagingPartyWithoutCode* unsafe_arena_release_messaging_party_descriptor();

  // @@protoc_insertion_point(class_scope:mead101.mead.MessageAuditTrailEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr date_time_;
  ::mead101::mead::MessagingPartyWithoutCode* messaging_party_descriptor_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class MessageHeader PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.MessageHeader) */ {
 public:
  inline MessageHeader() : MessageHeader(nullptr) {}
  virtual ~MessageHeader();

  MessageHeader(const MessageHeader& from);
  MessageHeader(MessageHeader&& from) noexcept
    : MessageHeader() {
    *this = ::std::move(from);
  }

  inline MessageHeader& operator=(const MessageHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessageHeader& operator=(MessageHeader&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MessageHeader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MessageHeader* internal_default_instance() {
    return reinterpret_cast<const MessageHeader*>(
               &_MessageHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    69;

  friend void swap(MessageHeader& a, MessageHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(MessageHeader* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MessageHeader* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MessageHeader* New() const final {
    return CreateMaybeMessage<MessageHeader>(nullptr);
  }

  MessageHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MessageHeader>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MessageHeader& from);
  void MergeFrom(const MessageHeader& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageHeader* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.MessageHeader";
  }
  protected:
  explicit MessageHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageRecipientFieldNumber = 6,
    kMessageCreatedDateTimeFieldNumber = 3,
    kMessageFileNameFieldNumber = 4,
    kMessageIdFieldNumber = 5,
    kMessageThreadIdFieldNumber = 8,
    kMessageAuditTrailFieldNumber = 1,
    kMessageControlTypeFieldNumber = 2,
    kMessageSenderFieldNumber = 7,
    kSentOnBehalfOfFieldNumber = 9,
  };
  // repeated .mead101.mead.MessagingPartyWithoutCode message_recipient = 6;
  int message_recipient_size() const;
  private:
  int _internal_message_recipient_size() const;
  public:
  void clear_message_recipient();
  ::mead101::mead::MessagingPartyWithoutCode* mutable_message_recipient(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::MessagingPartyWithoutCode >*
      mutable_message_recipient();
  private:
  const ::mead101::mead::MessagingPartyWithoutCode& _internal_message_recipient(int index) const;
  ::mead101::mead::MessagingPartyWithoutCode* _internal_add_message_recipient();
  public:
  const ::mead101::mead::MessagingPartyWithoutCode& message_recipient(int index) const;
  ::mead101::mead::MessagingPartyWithoutCode* add_message_recipient();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::MessagingPartyWithoutCode >&
      message_recipient() const;

  // optional string message_created_date_time = 3;
  bool has_message_created_date_time() const;
  private:
  bool _internal_has_message_created_date_time() const;
  public:
  void clear_message_created_date_time();
  const std::string& message_created_date_time() const;
  void set_message_created_date_time(const std::string& value);
  void set_message_created_date_time(std::string&& value);
  void set_message_created_date_time(const char* value);
  void set_message_created_date_time(const char* value, size_t size);
  std::string* mutable_message_created_date_time();
  std::string* release_message_created_date_time();
  void set_allocated_message_created_date_time(std::string* message_created_date_time);
  private:
  const std::string& _internal_message_created_date_time() const;
  void _internal_set_message_created_date_time(const std::string& value);
  std::string* _internal_mutable_message_created_date_time();
  public:

  // optional string message_file_name = 4;
  bool has_message_file_name() const;
  private:
  bool _internal_has_message_file_name() const;
  public:
  void clear_message_file_name();
  const std::string& message_file_name() const;
  void set_message_file_name(const std::string& value);
  void set_message_file_name(std::string&& value);
  void set_message_file_name(const char* value);
  void set_message_file_name(const char* value, size_t size);
  std::string* mutable_message_file_name();
  std::string* release_message_file_name();
  void set_allocated_message_file_name(std::string* message_file_name);
  private:
  const std::string& _internal_message_file_name() const;
  void _internal_set_message_file_name(const std::string& value);
  std::string* _internal_mutable_message_file_name();
  public:

  // optional string message_id = 5;
  bool has_message_id() const;
  private:
  bool _internal_has_message_id() const;
  public:
  void clear_message_id();
  const std::string& message_id() const;
  void set_message_id(const std::string& value);
  void set_message_id(std::string&& value);
  void set_message_id(const char* value);
  void set_message_id(const char* value, size_t size);
  std::string* mutable_message_id();
  std::string* release_message_id();
  void set_allocated_message_id(std::string* message_id);
  private:
  const std::string& _internal_message_id() const;
  void _internal_set_message_id(const std::string& value);
  std::string* _internal_mutable_message_id();
  public:

  // optional string message_thread_id = 8;
  bool has_message_thread_id() const;
  private:
  bool _internal_has_message_thread_id() const;
  public:
  void clear_message_thread_id();
  const std::string& message_thread_id() const;
  void set_message_thread_id(const std::string& value);
  void set_message_thread_id(std::string&& value);
  void set_message_thread_id(const char* value);
  void set_message_thread_id(const char* value, size_t size);
  std::string* mutable_message_thread_id();
  std::string* release_message_thread_id();
  void set_allocated_message_thread_id(std::string* message_thread_id);
  private:
  const std::string& _internal_message_thread_id() const;
  void _internal_set_message_thread_id(const std::string& value);
  std::string* _internal_mutable_message_thread_id();
  public:

  // optional .mead101.mead.MessageAuditTrail message_audit_trail = 1;
  bool has_message_audit_trail() const;
  private:
  bool _internal_has_message_audit_trail() const;
  public:
  void clear_message_audit_trail();
  const ::mead101::mead::MessageAuditTrail& message_audit_trail() const;
  ::mead101::mead::MessageAuditTrail* release_message_audit_trail();
  ::mead101::mead::MessageAuditTrail* mutable_message_audit_trail();
  void set_allocated_message_audit_trail(::mead101::mead::MessageAuditTrail* message_audit_trail);
  private:
  const ::mead101::mead::MessageAuditTrail& _internal_message_audit_trail() const;
  ::mead101::mead::MessageAuditTrail* _internal_mutable_message_audit_trail();
  public:
  void unsafe_arena_set_allocated_message_audit_trail(
      ::mead101::mead::MessageAuditTrail* message_audit_trail);
  ::mead101::mead::MessageAuditTrail* unsafe_arena_release_message_audit_trail();

  // optional .mead101.avs.MessageControlType message_control_type = 2;
  bool has_message_control_type() const;
  private:
  bool _internal_has_message_control_type() const;
  public:
  void clear_message_control_type();
  const ::mead101::avs::MessageControlType& message_control_type() const;
  ::mead101::avs::MessageControlType* release_message_control_type();
  ::mead101::avs::MessageControlType* mutable_message_control_type();
  void set_allocated_message_control_type(::mead101::avs::MessageControlType* message_control_type);
  private:
  const ::mead101::avs::MessageControlType& _internal_message_control_type() const;
  ::mead101::avs::MessageControlType* _internal_mutable_message_control_type();
  public:
  void unsafe_arena_set_allocated_message_control_type(
      ::mead101::avs::MessageControlType* message_control_type);
  ::mead101::avs::MessageControlType* unsafe_arena_release_message_control_type();

  // optional .mead101.mead.MessagingPartyWithoutCode message_sender = 7;
  bool has_message_sender() const;
  private:
  bool _internal_has_message_sender() const;
  public:
  void clear_message_sender();
  const ::mead101::mead::MessagingPartyWithoutCode& message_sender() const;
  ::mead101::mead::MessagingPartyWithoutCode* release_message_sender();
  ::mead101::mead::MessagingPartyWithoutCode* mutable_message_sender();
  void set_allocated_message_sender(::mead101::mead::MessagingPartyWithoutCode* message_sender);
  private:
  const ::mead101::mead::MessagingPartyWithoutCode& _internal_message_sender() const;
  ::mead101::mead::MessagingPartyWithoutCode* _internal_mutable_message_sender();
  public:
  void unsafe_arena_set_allocated_message_sender(
      ::mead101::mead::MessagingPartyWithoutCode* message_sender);
  ::mead101::mead::MessagingPartyWithoutCode* unsafe_arena_release_message_sender();

  // optional .mead101.mead.MessagingPartyWithoutCode sent_on_behalf_of = 9;
  bool has_sent_on_behalf_of() const;
  private:
  bool _internal_has_sent_on_behalf_of() const;
  public:
  void clear_sent_on_behalf_of();
  const ::mead101::mead::MessagingPartyWithoutCode& sent_on_behalf_of() const;
  ::mead101::mead::MessagingPartyWithoutCode* release_sent_on_behalf_of();
  ::mead101::mead::MessagingPartyWithoutCode* mutable_sent_on_behalf_of();
  void set_allocated_sent_on_behalf_of(::mead101::mead::MessagingPartyWithoutCode* sent_on_behalf_of);
  private:
  const ::mead101::mead::MessagingPartyWithoutCode& _internal_sent_on_behalf_of() const;
  ::mead101::mead::MessagingPartyWithoutCode* _internal_mutable_sent_on_behalf_of();
  public:
  void unsafe_arena_set_allocated_sent_on_behalf_of(
      ::mead101::mead::MessagingPartyWithoutCode* sent_on_behalf_of);
  ::mead101::mead::MessagingPartyWithoutCode* unsafe_arena_release_sent_on_behalf_of();

  // @@protoc_insertion_point(class_scope:mead101.mead.MessageHeader)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::MessagingPartyWithoutCode > message_recipient_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_created_date_time_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_file_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_thread_id_;
  ::mead101::mead::MessageAuditTrail* message_audit_trail_;
  ::mead101::avs::MessageControlType* message_control_type_;
  ::mead101::mead::MessagingPartyWithoutCode* message_sender_;
  ::mead101::mead::MessagingPartyWithoutCode* sent_on_behalf_of_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class MessagingPartyWithoutCode PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.MessagingPartyWithoutCode) */ {
 public:
  inline MessagingPartyWithoutCode() : MessagingPartyWithoutCode(nullptr) {}
  virtual ~MessagingPartyWithoutCode();

  MessagingPartyWithoutCode(const MessagingPartyWithoutCode& from);
  MessagingPartyWithoutCode(MessagingPartyWithoutCode&& from) noexcept
    : MessagingPartyWithoutCode() {
    *this = ::std::move(from);
  }

  inline MessagingPartyWithoutCode& operator=(const MessagingPartyWithoutCode& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessagingPartyWithoutCode& operator=(MessagingPartyWithoutCode&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MessagingPartyWithoutCode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MessagingPartyWithoutCode* internal_default_instance() {
    return reinterpret_cast<const MessagingPartyWithoutCode*>(
               &_MessagingPartyWithoutCode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    70;

  friend void swap(MessagingPartyWithoutCode& a, MessagingPartyWithoutCode& b) {
    a.Swap(&b);
  }
  inline void Swap(MessagingPartyWithoutCode* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MessagingPartyWithoutCode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MessagingPartyWithoutCode* New() const final {
    return CreateMaybeMessage<MessagingPartyWithoutCode>(nullptr);
  }

  MessagingPartyWithoutCode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MessagingPartyWithoutCode>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MessagingPartyWithoutCode& from);
  void MergeFrom(const MessagingPartyWithoutCode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessagingPartyWithoutCode* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.MessagingPartyWithoutCode";
  }
  protected:
  explicit MessagingPartyWithoutCode(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPartyIdFieldNumber = 1,
    kTradingNameFieldNumber = 3,
    kPartyNameFieldNumber = 2,
  };
  // optional string party_id = 1;
  bool has_party_id() const;
  private:
  bool _internal_has_party_id() const;
  public:
  void clear_party_id();
  const std::string& party_id() const;
  void set_party_id(const std::string& value);
  void set_party_id(std::string&& value);
  void set_party_id(const char* value);
  void set_party_id(const char* value, size_t size);
  std::string* mutable_party_id();
  std::string* release_party_id();
  void set_allocated_party_id(std::string* party_id);
  private:
  const std::string& _internal_party_id() const;
  void _internal_set_party_id(const std::string& value);
  std::string* _internal_mutable_party_id();
  public:

  // optional string trading_name = 3;
  bool has_trading_name() const;
  private:
  bool _internal_has_trading_name() const;
  public:
  void clear_trading_name();
  const std::string& trading_name() const;
  void set_trading_name(const std::string& value);
  void set_trading_name(std::string&& value);
  void set_trading_name(const char* value);
  void set_trading_name(const char* value, size_t size);
  std::string* mutable_trading_name();
  std::string* release_trading_name();
  void set_allocated_trading_name(std::string* trading_name);
  private:
  const std::string& _internal_trading_name() const;
  void _internal_set_trading_name(const std::string& value);
  std::string* _internal_mutable_trading_name();
  public:

  // optional .mead101.mead.PartyNameWithoutCode party_name = 2;
  bool has_party_name() const;
  private:
  bool _internal_has_party_name() const;
  public:
  void clear_party_name();
  const ::mead101::mead::PartyNameWithoutCode& party_name() const;
  ::mead101::mead::PartyNameWithoutCode* release_party_name();
  ::mead101::mead::PartyNameWithoutCode* mutable_party_name();
  void set_allocated_party_name(::mead101::mead::PartyNameWithoutCode* party_name);
  private:
  const ::mead101::mead::PartyNameWithoutCode& _internal_party_name() const;
  ::mead101::mead::PartyNameWithoutCode* _internal_mutable_party_name();
  public:
  void unsafe_arena_set_allocated_party_name(
      ::mead101::mead::PartyNameWithoutCode* party_name);
  ::mead101::mead::PartyNameWithoutCode* unsafe_arena_release_party_name();

  // @@protoc_insertion_point(class_scope:mead101.mead.MessagingPartyWithoutCode)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr party_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trading_name_;
  ::mead101::mead::PartyNameWithoutCode* party_name_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class MetadataSource PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.MetadataSource) */ {
 public:
  inline MetadataSource() : MetadataSource(nullptr) {}
  virtual ~MetadataSource();

  MetadataSource(const MetadataSource& from);
  MetadataSource(MetadataSource&& from) noexcept
    : MetadataSource() {
    *this = ::std::move(from);
  }

  inline MetadataSource& operator=(const MetadataSource& from) {
    CopyFrom(from);
    return *this;
  }
  inline MetadataSource& operator=(MetadataSource&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MetadataSource& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MetadataSource* internal_default_instance() {
    return reinterpret_cast<const MetadataSource*>(
               &_MetadataSource_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    71;

  friend void swap(MetadataSource& a, MetadataSource& b) {
    a.Swap(&b);
  }
  inline void Swap(MetadataSource* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MetadataSource* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MetadataSource* New() const final {
    return CreateMaybeMessage<MetadataSource>(nullptr);
  }

  MetadataSource* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MetadataSource>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MetadataSource& from);
  void MergeFrom(const MetadataSource& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MetadataSource* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.MetadataSource";
  }
  protected:
  explicit MetadataSource(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPartyIdFieldNumber = 2,
    kPartyNameFieldNumber = 3,
    kSourceReferenceFieldNumber = 4,
    kMetadataSourceTypeFieldNumber = 1,
  };
  // repeated .mead101.mead.DetailedPartyId party_id = 2;
  int party_id_size() const;
  private:
  int _internal_party_id_size() const;
  public:
  void clear_party_id();
  ::mead101::mead::DetailedPartyId* mutable_party_id(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::DetailedPartyId >*
      mutable_party_id();
  private:
  const ::mead101::mead::DetailedPartyId& _internal_party_id(int index) const;
  ::mead101::mead::DetailedPartyId* _internal_add_party_id();
  public:
  const ::mead101::mead::DetailedPartyId& party_id(int index) const;
  ::mead101::mead::DetailedPartyId* add_party_id();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::DetailedPartyId >&
      party_id() const;

  // repeated .mead101.mead.PartyNameWithTerritory party_name = 3;
  int party_name_size() const;
  private:
  int _internal_party_name_size() const;
  public:
  void clear_party_name();
  ::mead101::mead::PartyNameWithTerritory* mutable_party_name(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::PartyNameWithTerritory >*
      mutable_party_name();
  private:
  const ::mead101::mead::PartyNameWithTerritory& _internal_party_name(int index) const;
  ::mead101::mead::PartyNameWithTerritory* _internal_add_party_name();
  public:
  const ::mead101::mead::PartyNameWithTerritory& party_name(int index) const;
  ::mead101::mead::PartyNameWithTerritory* add_party_name();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::PartyNameWithTerritory >&
      party_name() const;

  // optional string source_reference = 4;
  bool has_source_reference() const;
  private:
  bool _internal_has_source_reference() const;
  public:
  void clear_source_reference();
  const std::string& source_reference() const;
  void set_source_reference(const std::string& value);
  void set_source_reference(std::string&& value);
  void set_source_reference(const char* value);
  void set_source_reference(const char* value, size_t size);
  std::string* mutable_source_reference();
  std::string* release_source_reference();
  void set_allocated_source_reference(std::string* source_reference);
  private:
  const std::string& _internal_source_reference() const;
  void _internal_set_source_reference(const std::string& value);
  std::string* _internal_mutable_source_reference();
  public:

  // optional .mead101.mead.MetadataSourceType metadata_source_type = 1;
  bool has_metadata_source_type() const;
  private:
  bool _internal_has_metadata_source_type() const;
  public:
  void clear_metadata_source_type();
  const ::mead101::mead::MetadataSourceType& metadata_source_type() const;
  ::mead101::mead::MetadataSourceType* release_metadata_source_type();
  ::mead101::mead::MetadataSourceType* mutable_metadata_source_type();
  void set_allocated_metadata_source_type(::mead101::mead::MetadataSourceType* metadata_source_type);
  private:
  const ::mead101::mead::MetadataSourceType& _internal_metadata_source_type() const;
  ::mead101::mead::MetadataSourceType* _internal_mutable_metadata_source_type();
  public:
  void unsafe_arena_set_allocated_metadata_source_type(
      ::mead101::mead::MetadataSourceType* metadata_source_type);
  ::mead101::mead::MetadataSourceType* unsafe_arena_release_metadata_source_type();

  // @@protoc_insertion_point(class_scope:mead101.mead.MetadataSource)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::DetailedPartyId > party_id_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::PartyNameWithTerritory > party_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_reference_;
  ::mead101::mead::MetadataSourceType* metadata_source_type_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class MetadataSourceList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.MetadataSourceList) */ {
 public:
  inline MetadataSourceList() : MetadataSourceList(nullptr) {}
  virtual ~MetadataSourceList();

  MetadataSourceList(const MetadataSourceList& from);
  MetadataSourceList(MetadataSourceList&& from) noexcept
    : MetadataSourceList() {
    *this = ::std::move(from);
  }

  inline MetadataSourceList& operator=(const MetadataSourceList& from) {
    CopyFrom(from);
    return *this;
  }
  inline MetadataSourceList& operator=(MetadataSourceList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MetadataSourceList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MetadataSourceList* internal_default_instance() {
    return reinterpret_cast<const MetadataSourceList*>(
               &_MetadataSourceList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    72;

  friend void swap(MetadataSourceList& a, MetadataSourceList& b) {
    a.Swap(&b);
  }
  inline void Swap(MetadataSourceList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MetadataSourceList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MetadataSourceList* New() const final {
    return CreateMaybeMessage<MetadataSourceList>(nullptr);
  }

  MetadataSourceList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MetadataSourceList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MetadataSourceList& from);
  void MergeFrom(const MetadataSourceList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MetadataSourceList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.MetadataSourceList";
  }
  protected:
  explicit MetadataSourceList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetadataSourceFieldNumber = 1,
  };
  // repeated .mead101.mead.MetadataSource metadata_source = 1;
  int metadata_source_size() const;
  private:
  int _internal_metadata_source_size() const;
  public:
  void clear_metadata_source();
  ::mead101::mead::MetadataSource* mutable_metadata_source(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::MetadataSource >*
      mutable_metadata_source();
  private:
  const ::mead101::mead::MetadataSource& _internal_metadata_source(int index) const;
  ::mead101::mead::MetadataSource* _internal_add_metadata_source();
  public:
  const ::mead101::mead::MetadataSource& metadata_source(int index) const;
  ::mead101::mead::MetadataSource* add_metadata_source();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::MetadataSource >&
      metadata_source() const;

  // @@protoc_insertion_point(class_scope:mead101.mead.MetadataSourceList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::MetadataSource > metadata_source_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class MetadataSourceType PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.MetadataSourceType) */ {
 public:
  inline MetadataSourceType() : MetadataSourceType(nullptr) {}
  virtual ~MetadataSourceType();

  MetadataSourceType(const MetadataSourceType& from);
  MetadataSourceType(MetadataSourceType&& from) noexcept
    : MetadataSourceType() {
    *this = ::std::move(from);
  }

  inline MetadataSourceType& operator=(const MetadataSourceType& from) {
    CopyFrom(from);
    return *this;
  }
  inline MetadataSourceType& operator=(MetadataSourceType&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MetadataSourceType& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MetadataSourceType* internal_default_instance() {
    return reinterpret_cast<const MetadataSourceType*>(
               &_MetadataSourceType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    73;

  friend void swap(MetadataSourceType& a, MetadataSourceType& b) {
    a.Swap(&b);
  }
  inline void Swap(MetadataSourceType* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MetadataSourceType* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MetadataSourceType* New() const final {
    return CreateMaybeMessage<MetadataSourceType>(nullptr);
  }

  MetadataSourceType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MetadataSourceType>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MetadataSourceType& from);
  void MergeFrom(const MetadataSourceType& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MetadataSourceType* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.MetadataSourceType";
  }
  protected:
  explicit MetadataSourceType(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNamespaceFieldNumber = 1,
    kUserDefinedValueFieldNumber = 2,
    kExtValueFieldNumber = 3,
  };
  // optional string namespace = 1;
  bool has_namespace_() const;
  private:
  bool _internal_has_namespace_() const;
  public:
  void clear_namespace_();
  const std::string& namespace_() const;
  void set_namespace_(const std::string& value);
  void set_namespace_(std::string&& value);
  void set_namespace_(const char* value);
  void set_namespace_(const char* value, size_t size);
  std::string* mutable_namespace_();
  std::string* release_namespace_();
  void set_allocated_namespace_(std::string* namespace_);
  private:
  const std::string& _internal_namespace_() const;
  void _internal_set_namespace_(const std::string& value);
  std::string* _internal_mutable_namespace_();
  public:

  // optional string user_defined_value = 2;
  bool has_user_defined_value() const;
  private:
  bool _internal_has_user_defined_value() const;
  public:
  void clear_user_defined_value();
  const std::string& user_defined_value() const;
  void set_user_defined_value(const std::string& value);
  void set_user_defined_value(std::string&& value);
  void set_user_defined_value(const char* value);
  void set_user_defined_value(const char* value, size_t size);
  std::string* mutable_user_defined_value();
  std::string* release_user_defined_value();
  void set_allocated_user_defined_value(std::string* user_defined_value);
  private:
  const std::string& _internal_user_defined_value() const;
  void _internal_set_user_defined_value(const std::string& value);
  std::string* _internal_mutable_user_defined_value();
  public:

  // optional .mead101.avs.MetadataSourceType ext_value = 3;
  bool has_ext_value() const;
  private:
  bool _internal_has_ext_value() const;
  public:
  void clear_ext_value();
  const ::mead101::avs::MetadataSourceType& ext_value() const;
  ::mead101::avs::MetadataSourceType* release_ext_value();
  ::mead101::avs::MetadataSourceType* mutable_ext_value();
  void set_allocated_ext_value(::mead101::avs::MetadataSourceType* ext_value);
  private:
  const ::mead101::avs::MetadataSourceType& _internal_ext_value() const;
  ::mead101::avs::MetadataSourceType* _internal_mutable_ext_value();
  public:
  void unsafe_arena_set_allocated_ext_value(
      ::mead101::avs::MetadataSourceType* ext_value);
  ::mead101::avs::MetadataSourceType* unsafe_arena_release_ext_value();

  // @@protoc_insertion_point(class_scope:mead101.mead.MetadataSourceType)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr namespace__;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_defined_value_;
  ::mead101::avs::MetadataSourceType* ext_value_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class Meter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.Meter) */ {
 public:
  inline Meter() : Meter(nullptr) {}
  virtual ~Meter();

  Meter(const Meter& from);
  Meter(Meter&& from) noexcept
    : Meter() {
    *this = ::std::move(from);
  }

  inline Meter& operator=(const Meter& from) {
    CopyFrom(from);
    return *this;
  }
  inline Meter& operator=(Meter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Meter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Meter* internal_default_instance() {
    return reinterpret_cast<const Meter*>(
               &_Meter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    74;

  friend void swap(Meter& a, Meter& b) {
    a.Swap(&b);
  }
  inline void Swap(Meter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Meter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Meter* New() const final {
    return CreateMaybeMessage<Meter>(nullptr);
  }

  Meter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Meter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Meter& from);
  void MergeFrom(const Meter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Meter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.Meter";
  }
  protected:
  explicit Meter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNoteEquivalentToBeatFieldNumber = 1,
    kNumberOfBeatsInBarFieldNumber = 2,
  };
  // optional int32 note_equivalent_to_beat = 1;
  bool has_note_equivalent_to_beat() const;
  private:
  bool _internal_has_note_equivalent_to_beat() const;
  public:
  void clear_note_equivalent_to_beat();
  ::PROTOBUF_NAMESPACE_ID::int32 note_equivalent_to_beat() const;
  void set_note_equivalent_to_beat(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_note_equivalent_to_beat() const;
  void _internal_set_note_equivalent_to_beat(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 number_of_beats_in_bar = 2;
  bool has_number_of_beats_in_bar() const;
  private:
  bool _internal_has_number_of_beats_in_bar() const;
  public:
  void clear_number_of_beats_in_bar();
  ::PROTOBUF_NAMESPACE_ID::int32 number_of_beats_in_bar() const;
  void set_number_of_beats_in_bar(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_number_of_beats_in_bar() const;
  void _internal_set_number_of_beats_in_bar(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mead101.mead.Meter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 note_equivalent_to_beat_;
  ::PROTOBUF_NAMESPACE_ID::int32 number_of_beats_in_bar_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class Mode PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.Mode) */ {
 public:
  inline Mode() : Mode(nullptr) {}
  virtual ~Mode();

  Mode(const Mode& from);
  Mode(Mode&& from) noexcept
    : Mode() {
    *this = ::std::move(from);
  }

  inline Mode& operator=(const Mode& from) {
    CopyFrom(from);
    return *this;
  }
  inline Mode& operator=(Mode&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Mode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Mode* internal_default_instance() {
    return reinterpret_cast<const Mode*>(
               &_Mode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    75;

  friend void swap(Mode& a, Mode& b) {
    a.Swap(&b);
  }
  inline void Swap(Mode* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Mode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Mode* New() const final {
    return CreateMaybeMessage<Mode>(nullptr);
  }

  Mode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Mode>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Mode& from);
  void MergeFrom(const Mode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Mode* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.Mode";
  }
  protected:
  explicit Mode(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNamespaceFieldNumber = 1,
    kUserDefinedValueFieldNumber = 2,
    kExtValueFieldNumber = 3,
  };
  // optional string namespace = 1;
  bool has_namespace_() const;
  private:
  bool _internal_has_namespace_() const;
  public:
  void clear_namespace_();
  const std::string& namespace_() const;
  void set_namespace_(const std::string& value);
  void set_namespace_(std::string&& value);
  void set_namespace_(const char* value);
  void set_namespace_(const char* value, size_t size);
  std::string* mutable_namespace_();
  std::string* release_namespace_();
  void set_allocated_namespace_(std::string* namespace_);
  private:
  const std::string& _internal_namespace_() const;
  void _internal_set_namespace_(const std::string& value);
  std::string* _internal_mutable_namespace_();
  public:

  // optional string user_defined_value = 2;
  bool has_user_defined_value() const;
  private:
  bool _internal_has_user_defined_value() const;
  public:
  void clear_user_defined_value();
  const std::string& user_defined_value() const;
  void set_user_defined_value(const std::string& value);
  void set_user_defined_value(std::string&& value);
  void set_user_defined_value(const char* value);
  void set_user_defined_value(const char* value, size_t size);
  std::string* mutable_user_defined_value();
  std::string* release_user_defined_value();
  void set_allocated_user_defined_value(std::string* user_defined_value);
  private:
  const std::string& _internal_user_defined_value() const;
  void _internal_set_user_defined_value(const std::string& value);
  std::string* _internal_mutable_user_defined_value();
  public:

  // optional .mead101.avs.Mode ext_value = 3;
  bool has_ext_value() const;
  private:
  bool _internal_has_ext_value() const;
  public:
  void clear_ext_value();
  const ::mead101::avs::Mode& ext_value() const;
  ::mead101::avs::Mode* release_ext_value();
  ::mead101::avs::Mode* mutable_ext_value();
  void set_allocated_ext_value(::mead101::avs::Mode* ext_value);
  private:
  const ::mead101::avs::Mode& _internal_ext_value() const;
  ::mead101::avs::Mode* _internal_mutable_ext_value();
  public:
  void unsafe_arena_set_allocated_ext_value(
      ::mead101::avs::Mode* ext_value);
  ::mead101::avs::Mode* unsafe_arena_release_ext_value();

  // @@protoc_insertion_point(class_scope:mead101.mead.Mode)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr namespace__;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_defined_value_;
  ::mead101::avs::Mode* ext_value_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class Modulation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.Modulation) */ {
 public:
  inline Modulation() : Modulation(nullptr) {}
  virtual ~Modulation();

  Modulation(const Modulation& from);
  Modulation(Modulation&& from) noexcept
    : Modulation() {
    *this = ::std::move(from);
  }

  inline Modulation& operator=(const Modulation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Modulation& operator=(Modulation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Modulation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Modulation* internal_default_instance() {
    return reinterpret_cast<const Modulation*>(
               &_Modulation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    76;

  friend void swap(Modulation& a, Modulation& b) {
    a.Swap(&b);
  }
  inline void Swap(Modulation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Modulation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Modulation* New() const final {
    return CreateMaybeMessage<Modulation>(nullptr);
  }

  Modulation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Modulation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Modulation& from);
  void MergeFrom(const Modulation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Modulation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.Modulation";
  }
  protected:
  explicit Modulation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEndPointFieldNumber = 2,
    kEndBarFieldNumber = 1,
    kStartBarFieldNumber = 3,
    kStartPointFieldNumber = 4,
    kValueFieldNumber = 5,
  };
  // optional double end_point = 2;
  bool has_end_point() const;
  private:
  bool _internal_has_end_point() const;
  public:
  void clear_end_point();
  double end_point() const;
  void set_end_point(double value);
  private:
  double _internal_end_point() const;
  void _internal_set_end_point(double value);
  public:

  // optional int32 end_bar = 1;
  bool has_end_bar() const;
  private:
  bool _internal_has_end_bar() const;
  public:
  void clear_end_bar();
  ::PROTOBUF_NAMESPACE_ID::int32 end_bar() const;
  void set_end_bar(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_end_bar() const;
  void _internal_set_end_bar(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 start_bar = 3;
  bool has_start_bar() const;
  private:
  bool _internal_has_start_bar() const;
  public:
  void clear_start_bar();
  ::PROTOBUF_NAMESPACE_ID::int32 start_bar() const;
  void set_start_bar(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_start_bar() const;
  void _internal_set_start_bar(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional double start_point = 4;
  bool has_start_point() const;
  private:
  bool _internal_has_start_point() const;
  public:
  void clear_start_point();
  double start_point() const;
  void set_start_point(double value);
  private:
  double _internal_start_point() const;
  void _internal_set_start_point(double value);
  public:

  // optional double value = 5;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  double value() const;
  void set_value(double value);
  private:
  double _internal_value() const;
  void _internal_set_value(double value);
  public:

  // @@protoc_insertion_point(class_scope:mead101.mead.Modulation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double end_point_;
  ::PROTOBUF_NAMESPACE_ID::int32 end_bar_;
  ::PROTOBUF_NAMESPACE_ID::int32 start_bar_;
  double start_point_;
  double value_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class Mood PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.Mood) */ {
 public:
  inline Mood() : Mood(nullptr) {}
  virtual ~Mood();

  Mood(const Mood& from);
  Mood(Mood&& from) noexcept
    : Mood() {
    *this = ::std::move(from);
  }

  inline Mood& operator=(const Mood& from) {
    CopyFrom(from);
    return *this;
  }
  inline Mood& operator=(Mood&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Mood& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Mood* internal_default_instance() {
    return reinterpret_cast<const Mood*>(
               &_Mood_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    77;

  friend void swap(Mood& a, Mood& b) {
    a.Swap(&b);
  }
  inline void Swap(Mood* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Mood* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Mood* New() const final {
    return CreateMaybeMessage<Mood>(nullptr);
  }

  Mood* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Mood>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Mood& from);
  void MergeFrom(const Mood& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Mood* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.Mood";
  }
  protected:
  explicit Mood(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDescriptionFieldNumber = 2,
    kMetadataSourceReferenceFieldNumber = 3,
    kApplicableTerritoryCodeFieldNumber = 1,
    kValueFieldNumber = 4,
  };
  // repeated .mead101.mead.TextWithoutTerritory description = 2;
  int description_size() const;
  private:
  int _internal_description_size() const;
  public:
  void clear_description();
  ::mead101::mead::TextWithoutTerritory* mutable_description(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::TextWithoutTerritory >*
      mutable_description();
  private:
  const ::mead101::mead::TextWithoutTerritory& _internal_description(int index) const;
  ::mead101::mead::TextWithoutTerritory* _internal_add_description();
  public:
  const ::mead101::mead::TextWithoutTerritory& description(int index) const;
  ::mead101::mead::TextWithoutTerritory* add_description();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::TextWithoutTerritory >&
      description() const;

  // repeated string metadata_source_reference = 3;
  int metadata_source_reference_size() const;
  private:
  int _internal_metadata_source_reference_size() const;
  public:
  void clear_metadata_source_reference();
  const std::string& metadata_source_reference(int index) const;
  std::string* mutable_metadata_source_reference(int index);
  void set_metadata_source_reference(int index, const std::string& value);
  void set_metadata_source_reference(int index, std::string&& value);
  void set_metadata_source_reference(int index, const char* value);
  void set_metadata_source_reference(int index, const char* value, size_t size);
  std::string* add_metadata_source_reference();
  void add_metadata_source_reference(const std::string& value);
  void add_metadata_source_reference(std::string&& value);
  void add_metadata_source_reference(const char* value);
  void add_metadata_source_reference(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& metadata_source_reference() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_metadata_source_reference();
  private:
  const std::string& _internal_metadata_source_reference(int index) const;
  std::string* _internal_add_metadata_source_reference();
  public:

  // optional .mead101.avs.CurrentTerritoryCode applicable_territory_code = 1;
  bool has_applicable_territory_code() const;
  private:
  bool _internal_has_applicable_territory_code() const;
  public:
  void clear_applicable_territory_code();
  const ::mead101::avs::CurrentTerritoryCode& applicable_territory_code() const;
  ::mead101::avs::CurrentTerritoryCode* release_applicable_territory_code();
  ::mead101::avs::CurrentTerritoryCode* mutable_applicable_territory_code();
  void set_allocated_applicable_territory_code(::mead101::avs::CurrentTerritoryCode* applicable_territory_code);
  private:
  const ::mead101::avs::CurrentTerritoryCode& _internal_applicable_territory_code() const;
  ::mead101::avs::CurrentTerritoryCode* _internal_mutable_applicable_territory_code();
  public:
  void unsafe_arena_set_allocated_applicable_territory_code(
      ::mead101::avs::CurrentTerritoryCode* applicable_territory_code);
  ::mead101::avs::CurrentTerritoryCode* unsafe_arena_release_applicable_territory_code();

  // optional .mead101.mead.MoodValue value = 4;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const ::mead101::mead::MoodValue& value() const;
  ::mead101::mead::MoodValue* release_value();
  ::mead101::mead::MoodValue* mutable_value();
  void set_allocated_value(::mead101::mead::MoodValue* value);
  private:
  const ::mead101::mead::MoodValue& _internal_value() const;
  ::mead101::mead::MoodValue* _internal_mutable_value();
  public:
  void unsafe_arena_set_allocated_value(
      ::mead101::mead::MoodValue* value);
  ::mead101::mead::MoodValue* unsafe_arena_release_value();

  // @@protoc_insertion_point(class_scope:mead101.mead.Mood)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::TextWithoutTerritory > description_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> metadata_source_reference_;
  ::mead101::avs::CurrentTerritoryCode* applicable_territory_code_;
  ::mead101::mead::MoodValue* value_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class MoodValue PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.MoodValue) */ {
 public:
  inline MoodValue() : MoodValue(nullptr) {}
  virtual ~MoodValue();

  MoodValue(const MoodValue& from);
  MoodValue(MoodValue&& from) noexcept
    : MoodValue() {
    *this = ::std::move(from);
  }

  inline MoodValue& operator=(const MoodValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline MoodValue& operator=(MoodValue&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MoodValue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MoodValue* internal_default_instance() {
    return reinterpret_cast<const MoodValue*>(
               &_MoodValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    78;

  friend void swap(MoodValue& a, MoodValue& b) {
    a.Swap(&b);
  }
  inline void Swap(MoodValue* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MoodValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MoodValue* New() const final {
    return CreateMaybeMessage<MoodValue>(nullptr);
  }

  MoodValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MoodValue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MoodValue& from);
  void MergeFrom(const MoodValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MoodValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.MoodValue";
  }
  protected:
  explicit MoodValue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNamespaceFieldNumber = 3,
    kUserDefinedValueFieldNumber = 4,
    kExtValueFieldNumber = 5,
    kAppliesToCompositionFieldNumber = 1,
    kAppliesToLyricsFieldNumber = 2,
  };
  // optional string namespace = 3;
  bool has_namespace_() const;
  private:
  bool _internal_has_namespace_() const;
  public:
  void clear_namespace_();
  const std::string& namespace_() const;
  void set_namespace_(const std::string& value);
  void set_namespace_(std::string&& value);
  void set_namespace_(const char* value);
  void set_namespace_(const char* value, size_t size);
  std::string* mutable_namespace_();
  std::string* release_namespace_();
  void set_allocated_namespace_(std::string* namespace_);
  private:
  const std::string& _internal_namespace_() const;
  void _internal_set_namespace_(const std::string& value);
  std::string* _internal_mutable_namespace_();
  public:

  // optional string user_defined_value = 4;
  bool has_user_defined_value() const;
  private:
  bool _internal_has_user_defined_value() const;
  public:
  void clear_user_defined_value();
  const std::string& user_defined_value() const;
  void set_user_defined_value(const std::string& value);
  void set_user_defined_value(std::string&& value);
  void set_user_defined_value(const char* value);
  void set_user_defined_value(const char* value, size_t size);
  std::string* mutable_user_defined_value();
  std::string* release_user_defined_value();
  void set_allocated_user_defined_value(std::string* user_defined_value);
  private:
  const std::string& _internal_user_defined_value() const;
  void _internal_set_user_defined_value(const std::string& value);
  std::string* _internal_mutable_user_defined_value();
  public:

  // optional .mead101.avs.MoodType ext_value = 5;
  bool has_ext_value() const;
  private:
  bool _internal_has_ext_value() const;
  public:
  void clear_ext_value();
  const ::mead101::avs::MoodType& ext_value() const;
  ::mead101::avs::MoodType* release_ext_value();
  ::mead101::avs::MoodType* mutable_ext_value();
  void set_allocated_ext_value(::mead101::avs::MoodType* ext_value);
  private:
  const ::mead101::avs::MoodType& _internal_ext_value() const;
  ::mead101::avs::MoodType* _internal_mutable_ext_value();
  public:
  void unsafe_arena_set_allocated_ext_value(
      ::mead101::avs::MoodType* ext_value);
  ::mead101::avs::MoodType* unsafe_arena_release_ext_value();

  // optional bool applies_to_composition = 1;
  bool has_applies_to_composition() const;
  private:
  bool _internal_has_applies_to_composition() const;
  public:
  void clear_applies_to_composition();
  bool applies_to_composition() const;
  void set_applies_to_composition(bool value);
  private:
  bool _internal_applies_to_composition() const;
  void _internal_set_applies_to_composition(bool value);
  public:

  // optional bool applies_to_lyrics = 2;
  bool has_applies_to_lyrics() const;
  private:
  bool _internal_has_applies_to_lyrics() const;
  public:
  void clear_applies_to_lyrics();
  bool applies_to_lyrics() const;
  void set_applies_to_lyrics(bool value);
  private:
  bool _internal_applies_to_lyrics() const;
  void _internal_set_applies_to_lyrics(bool value);
  public:

  // @@protoc_insertion_point(class_scope:mead101.mead.MoodValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr namespace__;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_defined_value_;
  ::mead101::avs::MoodType* ext_value_;
  bool applies_to_composition_;
  bool applies_to_lyrics_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class MusicalWorkId PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.MusicalWorkId) */ {
 public:
  inline MusicalWorkId() : MusicalWorkId(nullptr) {}
  virtual ~MusicalWorkId();

  MusicalWorkId(const MusicalWorkId& from);
  MusicalWorkId(MusicalWorkId&& from) noexcept
    : MusicalWorkId() {
    *this = ::std::move(from);
  }

  inline MusicalWorkId& operator=(const MusicalWorkId& from) {
    CopyFrom(from);
    return *this;
  }
  inline MusicalWorkId& operator=(MusicalWorkId&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MusicalWorkId& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MusicalWorkId* internal_default_instance() {
    return reinterpret_cast<const MusicalWorkId*>(
               &_MusicalWorkId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    79;

  friend void swap(MusicalWorkId& a, MusicalWorkId& b) {
    a.Swap(&b);
  }
  inline void Swap(MusicalWorkId* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MusicalWorkId* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MusicalWorkId* New() const final {
    return CreateMaybeMessage<MusicalWorkId>(nullptr);
  }

  MusicalWorkId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MusicalWorkId>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MusicalWorkId& from);
  void MergeFrom(const MusicalWorkId& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MusicalWorkId* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.MusicalWorkId";
  }
  protected:
  explicit MusicalWorkId(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kComposerCatalogNumberFieldNumber = 1,
    kProprietaryIdFieldNumber = 4,
    kISWCFieldNumber = 2,
    kOpusNumberFieldNumber = 3,
  };
  // repeated string composer_catalog_number = 1;
  int composer_catalog_number_size() const;
  private:
  int _internal_composer_catalog_number_size() const;
  public:
  void clear_composer_catalog_number();
  const std::string& composer_catalog_number(int index) const;
  std::string* mutable_composer_catalog_number(int index);
  void set_composer_catalog_number(int index, const std::string& value);
  void set_composer_catalog_number(int index, std::string&& value);
  void set_composer_catalog_number(int index, const char* value);
  void set_composer_catalog_number(int index, const char* value, size_t size);
  std::string* add_composer_catalog_number();
  void add_composer_catalog_number(const std::string& value);
  void add_composer_catalog_number(std::string&& value);
  void add_composer_catalog_number(const char* value);
  void add_composer_catalog_number(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& composer_catalog_number() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_composer_catalog_number();
  private:
  const std::string& _internal_composer_catalog_number(int index) const;
  std::string* _internal_add_composer_catalog_number();
  public:

  // repeated .mead101.mead.ProprietaryId proprietary_id = 4;
  int proprietary_id_size() const;
  private:
  int _internal_proprietary_id_size() const;
  public:
  void clear_proprietary_id();
  ::mead101::mead::ProprietaryId* mutable_proprietary_id(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::ProprietaryId >*
      mutable_proprietary_id();
  private:
  const ::mead101::mead::ProprietaryId& _internal_proprietary_id(int index) const;
  ::mead101::mead::ProprietaryId* _internal_add_proprietary_id();
  public:
  const ::mead101::mead::ProprietaryId& proprietary_id(int index) const;
  ::mead101::mead::ProprietaryId* add_proprietary_id();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::ProprietaryId >&
      proprietary_id() const;

  // optional string i_s_w_c = 2;
  bool has_i_s_w_c() const;
  private:
  bool _internal_has_i_s_w_c() const;
  public:
  void clear_i_s_w_c();
  const std::string& i_s_w_c() const;
  void set_i_s_w_c(const std::string& value);
  void set_i_s_w_c(std::string&& value);
  void set_i_s_w_c(const char* value);
  void set_i_s_w_c(const char* value, size_t size);
  std::string* mutable_i_s_w_c();
  std::string* release_i_s_w_c();
  void set_allocated_i_s_w_c(std::string* i_s_w_c);
  private:
  const std::string& _internal_i_s_w_c() const;
  void _internal_set_i_s_w_c(const std::string& value);
  std::string* _internal_mutable_i_s_w_c();
  public:

  // optional string opus_number = 3;
  bool has_opus_number() const;
  private:
  bool _internal_has_opus_number() const;
  public:
  void clear_opus_number();
  const std::string& opus_number() const;
  void set_opus_number(const std::string& value);
  void set_opus_number(std::string&& value);
  void set_opus_number(const char* value);
  void set_opus_number(const char* value, size_t size);
  std::string* mutable_opus_number();
  std::string* release_opus_number();
  void set_allocated_opus_number(std::string* opus_number);
  private:
  const std::string& _internal_opus_number() const;
  void _internal_set_opus_number(const std::string& value);
  std::string* _internal_mutable_opus_number();
  public:

  // @@protoc_insertion_point(class_scope:mead101.mead.MusicalWorkId)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> composer_catalog_number_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::ProprietaryId > proprietary_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr i_s_w_c_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr opus_number_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class Name PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.Name) */ {
 public:
  inline Name() : Name(nullptr) {}
  virtual ~Name();

  Name(const Name& from);
  Name(Name&& from) noexcept
    : Name() {
    *this = ::std::move(from);
  }

  inline Name& operator=(const Name& from) {
    CopyFrom(from);
    return *this;
  }
  inline Name& operator=(Name&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Name& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Name* internal_default_instance() {
    return reinterpret_cast<const Name*>(
               &_Name_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    80;

  friend void swap(Name& a, Name& b) {
    a.Swap(&b);
  }
  inline void Swap(Name* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Name* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Name* New() const final {
    return CreateMaybeMessage<Name>(nullptr);
  }

  Name* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Name>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Name& from);
  void MergeFrom(const Name& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Name* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.Name";
  }
  protected:
  explicit Name(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLanguageAndScriptCodeFieldNumber = 1,
    kExtValueFieldNumber = 2,
  };
  // optional string language_and_script_code = 1;
  bool has_language_and_script_code() const;
  private:
  bool _internal_has_language_and_script_code() const;
  public:
  void clear_language_and_script_code();
  const std::string& language_and_script_code() const;
  void set_language_and_script_code(const std::string& value);
  void set_language_and_script_code(std::string&& value);
  void set_language_and_script_code(const char* value);
  void set_language_and_script_code(const char* value, size_t size);
  std::string* mutable_language_and_script_code();
  std::string* release_language_and_script_code();
  void set_allocated_language_and_script_code(std::string* language_and_script_code);
  private:
  const std::string& _internal_language_and_script_code() const;
  void _internal_set_language_and_script_code(const std::string& value);
  std::string* _internal_mutable_language_and_script_code();
  public:

  // optional string ext_value = 2;
  bool has_ext_value() const;
  private:
  bool _internal_has_ext_value() const;
  public:
  void clear_ext_value();
  const std::string& ext_value() const;
  void set_ext_value(const std::string& value);
  void set_ext_value(std::string&& value);
  void set_ext_value(const char* value);
  void set_ext_value(const char* value, size_t size);
  std::string* mutable_ext_value();
  std::string* release_ext_value();
  void set_allocated_ext_value(std::string* ext_value);
  private:
  const std::string& _internal_ext_value() const;
  void _internal_set_ext_value(const std::string& value);
  std::string* _internal_mutable_ext_value();
  public:

  // @@protoc_insertion_point(class_scope:mead101.mead.Name)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_and_script_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ext_value_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class NameWithPronunciation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.NameWithPronunciation) */ {
 public:
  inline NameWithPronunciation() : NameWithPronunciation(nullptr) {}
  virtual ~NameWithPronunciation();

  NameWithPronunciation(const NameWithPronunciation& from);
  NameWithPronunciation(NameWithPronunciation&& from) noexcept
    : NameWithPronunciation() {
    *this = ::std::move(from);
  }

  inline NameWithPronunciation& operator=(const NameWithPronunciation& from) {
    CopyFrom(from);
    return *this;
  }
  inline NameWithPronunciation& operator=(NameWithPronunciation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NameWithPronunciation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NameWithPronunciation* internal_default_instance() {
    return reinterpret_cast<const NameWithPronunciation*>(
               &_NameWithPronunciation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    81;

  friend void swap(NameWithPronunciation& a, NameWithPronunciation& b) {
    a.Swap(&b);
  }
  inline void Swap(NameWithPronunciation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NameWithPronunciation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NameWithPronunciation* New() const final {
    return CreateMaybeMessage<NameWithPronunciation>(nullptr);
  }

  NameWithPronunciation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NameWithPronunciation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NameWithPronunciation& from);
  void MergeFrom(const NameWithPronunciation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NameWithPronunciation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.NameWithPronunciation";
  }
  protected:
  explicit NameWithPronunciation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPronunciationFieldNumber = 2,
    kNameFieldNumber = 1,
  };
  // repeated .mead101.mead.Pronunciation pronunciation = 2;
  int pronunciation_size() const;
  private:
  int _internal_pronunciation_size() const;
  public:
  void clear_pronunciation();
  ::mead101::mead::Pronunciation* mutable_pronunciation(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Pronunciation >*
      mutable_pronunciation();
  private:
  const ::mead101::mead::Pronunciation& _internal_pronunciation(int index) const;
  ::mead101::mead::Pronunciation* _internal_add_pronunciation();
  public:
  const ::mead101::mead::Pronunciation& pronunciation(int index) const;
  ::mead101::mead::Pronunciation* add_pronunciation();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Pronunciation >&
      pronunciation() const;

  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:mead101.mead.NameWithPronunciation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Pronunciation > pronunciation_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class NameWithPronunciationAndScriptCode PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.NameWithPronunciationAndScriptCode) */ {
 public:
  inline NameWithPronunciationAndScriptCode() : NameWithPronunciationAndScriptCode(nullptr) {}
  virtual ~NameWithPronunciationAndScriptCode();

  NameWithPronunciationAndScriptCode(const NameWithPronunciationAndScriptCode& from);
  NameWithPronunciationAndScriptCode(NameWithPronunciationAndScriptCode&& from) noexcept
    : NameWithPronunciationAndScriptCode() {
    *this = ::std::move(from);
  }

  inline NameWithPronunciationAndScriptCode& operator=(const NameWithPronunciationAndScriptCode& from) {
    CopyFrom(from);
    return *this;
  }
  inline NameWithPronunciationAndScriptCode& operator=(NameWithPronunciationAndScriptCode&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NameWithPronunciationAndScriptCode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NameWithPronunciationAndScriptCode* internal_default_instance() {
    return reinterpret_cast<const NameWithPronunciationAndScriptCode*>(
               &_NameWithPronunciationAndScriptCode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    82;

  friend void swap(NameWithPronunciationAndScriptCode& a, NameWithPronunciationAndScriptCode& b) {
    a.Swap(&b);
  }
  inline void Swap(NameWithPronunciationAndScriptCode* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NameWithPronunciationAndScriptCode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NameWithPronunciationAndScriptCode* New() const final {
    return CreateMaybeMessage<NameWithPronunciationAndScriptCode>(nullptr);
  }

  NameWithPronunciationAndScriptCode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NameWithPronunciationAndScriptCode>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NameWithPronunciationAndScriptCode& from);
  void MergeFrom(const NameWithPronunciationAndScriptCode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NameWithPronunciationAndScriptCode* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.NameWithPronunciationAndScriptCode";
  }
  protected:
  explicit NameWithPronunciationAndScriptCode(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPronunciationFieldNumber = 2,
    kNameFieldNumber = 1,
  };
  // repeated .mead101.mead.Pronunciation pronunciation = 2;
  int pronunciation_size() const;
  private:
  int _internal_pronunciation_size() const;
  public:
  void clear_pronunciation();
  ::mead101::mead::Pronunciation* mutable_pronunciation(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Pronunciation >*
      mutable_pronunciation();
  private:
  const ::mead101::mead::Pronunciation& _internal_pronunciation(int index) const;
  ::mead101::mead::Pronunciation* _internal_add_pronunciation();
  public:
  const ::mead101::mead::Pronunciation& pronunciation(int index) const;
  ::mead101::mead::Pronunciation* add_pronunciation();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Pronunciation >&
      pronunciation() const;

  // optional .mead101.mead.Name name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const ::mead101::mead::Name& name() const;
  ::mead101::mead::Name* release_name();
  ::mead101::mead::Name* mutable_name();
  void set_allocated_name(::mead101::mead::Name* name);
  private:
  const ::mead101::mead::Name& _internal_name() const;
  ::mead101::mead::Name* _internal_mutable_name();
  public:
  void unsafe_arena_set_allocated_name(
      ::mead101::mead::Name* name);
  ::mead101::mead::Name* unsafe_arena_release_name();

  // @@protoc_insertion_point(class_scope:mead101.mead.NameWithPronunciationAndScriptCode)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Pronunciation > pronunciation_;
  ::mead101::mead::Name* name_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class Party PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.Party) */ {
 public:
  inline Party() : Party(nullptr) {}
  virtual ~Party();

  Party(const Party& from);
  Party(Party&& from) noexcept
    : Party() {
    *this = ::std::move(from);
  }

  inline Party& operator=(const Party& from) {
    CopyFrom(from);
    return *this;
  }
  inline Party& operator=(Party&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Party& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Party* internal_default_instance() {
    return reinterpret_cast<const Party*>(
               &_Party_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    83;

  friend void swap(Party& a, Party& b) {
    a.Swap(&b);
  }
  inline void Swap(Party* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Party* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Party* New() const final {
    return CreateMaybeMessage<Party>(nullptr);
  }

  Party* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Party>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Party& from);
  void MergeFrom(const Party& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Party* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.Party";
  }
  protected:
  explicit Party(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProprietaryIdFieldNumber = 6,
    kDPIDFieldNumber = 1,
    kIPNFieldNumber = 2,
    kISNIFieldNumber = 3,
    kIpiNameNumberFieldNumber = 4,
    kPartyNameFieldNumber = 5,
  };
  // repeated .mead101.mead.ProprietaryId proprietary_id = 6;
  int proprietary_id_size() const;
  private:
  int _internal_proprietary_id_size() const;
  public:
  void clear_proprietary_id();
  ::mead101::mead::ProprietaryId* mutable_proprietary_id(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::ProprietaryId >*
      mutable_proprietary_id();
  private:
  const ::mead101::mead::ProprietaryId& _internal_proprietary_id(int index) const;
  ::mead101::mead::ProprietaryId* _internal_add_proprietary_id();
  public:
  const ::mead101::mead::ProprietaryId& proprietary_id(int index) const;
  ::mead101::mead::ProprietaryId* add_proprietary_id();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::ProprietaryId >&
      proprietary_id() const;

  // optional string d_p_i_d = 1;
  bool has_d_p_i_d() const;
  private:
  bool _internal_has_d_p_i_d() const;
  public:
  void clear_d_p_i_d();
  const std::string& d_p_i_d() const;
  void set_d_p_i_d(const std::string& value);
  void set_d_p_i_d(std::string&& value);
  void set_d_p_i_d(const char* value);
  void set_d_p_i_d(const char* value, size_t size);
  std::string* mutable_d_p_i_d();
  std::string* release_d_p_i_d();
  void set_allocated_d_p_i_d(std::string* d_p_i_d);
  private:
  const std::string& _internal_d_p_i_d() const;
  void _internal_set_d_p_i_d(const std::string& value);
  std::string* _internal_mutable_d_p_i_d();
  public:

  // optional string i_p_n = 2;
  bool has_i_p_n() const;
  private:
  bool _internal_has_i_p_n() const;
  public:
  void clear_i_p_n();
  const std::string& i_p_n() const;
  void set_i_p_n(const std::string& value);
  void set_i_p_n(std::string&& value);
  void set_i_p_n(const char* value);
  void set_i_p_n(const char* value, size_t size);
  std::string* mutable_i_p_n();
  std::string* release_i_p_n();
  void set_allocated_i_p_n(std::string* i_p_n);
  private:
  const std::string& _internal_i_p_n() const;
  void _internal_set_i_p_n(const std::string& value);
  std::string* _internal_mutable_i_p_n();
  public:

  // optional string i_s_n_i = 3;
  bool has_i_s_n_i() const;
  private:
  bool _internal_has_i_s_n_i() const;
  public:
  void clear_i_s_n_i();
  const std::string& i_s_n_i() const;
  void set_i_s_n_i(const std::string& value);
  void set_i_s_n_i(std::string&& value);
  void set_i_s_n_i(const char* value);
  void set_i_s_n_i(const char* value, size_t size);
  std::string* mutable_i_s_n_i();
  std::string* release_i_s_n_i();
  void set_allocated_i_s_n_i(std::string* i_s_n_i);
  private:
  const std::string& _internal_i_s_n_i() const;
  void _internal_set_i_s_n_i(const std::string& value);
  std::string* _internal_mutable_i_s_n_i();
  public:

  // optional string ipi_name_number = 4;
  bool has_ipi_name_number() const;
  private:
  bool _internal_has_ipi_name_number() const;
  public:
  void clear_ipi_name_number();
  const std::string& ipi_name_number() const;
  void set_ipi_name_number(const std::string& value);
  void set_ipi_name_number(std::string&& value);
  void set_ipi_name_number(const char* value);
  void set_ipi_name_number(const char* value, size_t size);
  std::string* mutable_ipi_name_number();
  std::string* release_ipi_name_number();
  void set_allocated_ipi_name_number(std::string* ipi_name_number);
  private:
  const std::string& _internal_ipi_name_number() const;
  void _internal_set_ipi_name_number(const std::string& value);
  std::string* _internal_mutable_ipi_name_number();
  public:

  // optional string party_name = 5;
  bool has_party_name() const;
  private:
  bool _internal_has_party_name() const;
  public:
  void clear_party_name();
  const std::string& party_name() const;
  void set_party_name(const std::string& value);
  void set_party_name(std::string&& value);
  void set_party_name(const char* value);
  void set_party_name(const char* value, size_t size);
  std::string* mutable_party_name();
  std::string* release_party_name();
  void set_allocated_party_name(std::string* party_name);
  private:
  const std::string& _internal_party_name() const;
  void _internal_set_party_name(const std::string& value);
  std::string* _internal_mutable_party_name();
  public:

  // @@protoc_insertion_point(class_scope:mead101.mead.Party)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::ProprietaryId > proprietary_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr d_p_i_d_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr i_p_n_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr i_s_n_i_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ipi_name_number_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr party_name_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class PartyDescriptor PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.PartyDescriptor) */ {
 public:
  inline PartyDescriptor() : PartyDescriptor(nullptr) {}
  virtual ~PartyDescriptor();

  PartyDescriptor(const PartyDescriptor& from);
  PartyDescriptor(PartyDescriptor&& from) noexcept
    : PartyDescriptor() {
    *this = ::std::move(from);
  }

  inline PartyDescriptor& operator=(const PartyDescriptor& from) {
    CopyFrom(from);
    return *this;
  }
  inline PartyDescriptor& operator=(PartyDescriptor&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PartyDescriptor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PartyDescriptor* internal_default_instance() {
    return reinterpret_cast<const PartyDescriptor*>(
               &_PartyDescriptor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    84;

  friend void swap(PartyDescriptor& a, PartyDescriptor& b) {
    a.Swap(&b);
  }
  inline void Swap(PartyDescriptor* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PartyDescriptor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PartyDescriptor* New() const final {
    return CreateMaybeMessage<PartyDescriptor>(nullptr);
  }

  PartyDescriptor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PartyDescriptor>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PartyDescriptor& from);
  void MergeFrom(const PartyDescriptor& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PartyDescriptor* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.PartyDescriptor";
  }
  protected:
  explicit PartyDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPartyIdFieldNumber = 1,
    kPartyNameFieldNumber = 2,
  };
  // repeated .mead101.mead.DetailedPartyId party_id = 1;
  int party_id_size() const;
  private:
  int _internal_party_id_size() const;
  public:
  void clear_party_id();
  ::mead101::mead::DetailedPartyId* mutable_party_id(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::DetailedPartyId >*
      mutable_party_id();
  private:
  const ::mead101::mead::DetailedPartyId& _internal_party_id(int index) const;
  ::mead101::mead::DetailedPartyId* _internal_add_party_id();
  public:
  const ::mead101::mead::DetailedPartyId& party_id(int index) const;
  ::mead101::mead::DetailedPartyId* add_party_id();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::DetailedPartyId >&
      party_id() const;

  // repeated .mead101.mead.PartyName party_name = 2;
  int party_name_size() const;
  private:
  int _internal_party_name_size() const;
  public:
  void clear_party_name();
  ::mead101::mead::PartyName* mutable_party_name(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::PartyName >*
      mutable_party_name();
  private:
  const ::mead101::mead::PartyName& _internal_party_name(int index) const;
  ::mead101::mead::PartyName* _internal_add_party_name();
  public:
  const ::mead101::mead::PartyName& party_name(int index) const;
  ::mead101::mead::PartyName* add_party_name();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::PartyName >&
      party_name() const;

  // @@protoc_insertion_point(class_scope:mead101.mead.PartyDescriptor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::DetailedPartyId > party_id_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::PartyName > party_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class PartyInformation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.PartyInformation) */ {
 public:
  inline PartyInformation() : PartyInformation(nullptr) {}
  virtual ~PartyInformation();

  PartyInformation(const PartyInformation& from);
  PartyInformation(PartyInformation&& from) noexcept
    : PartyInformation() {
    *this = ::std::move(from);
  }

  inline PartyInformation& operator=(const PartyInformation& from) {
    CopyFrom(from);
    return *this;
  }
  inline PartyInformation& operator=(PartyInformation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PartyInformation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PartyInformation* internal_default_instance() {
    return reinterpret_cast<const PartyInformation*>(
               &_PartyInformation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    85;

  friend void swap(PartyInformation& a, PartyInformation& b) {
    a.Swap(&b);
  }
  inline void Swap(PartyInformation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PartyInformation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PartyInformation* New() const final {
    return CreateMaybeMessage<PartyInformation>(nullptr);
  }

  PartyInformation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PartyInformation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PartyInformation& from);
  void MergeFrom(const PartyInformation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PartyInformation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.PartyInformation";
  }
  protected:
  explicit PartyInformation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArtistTypeFieldNumber = 1,
    kArtisticInfluenceFieldNumber = 2,
    kAwardFieldNumber = 3,
    kBiographyFieldNumber = 4,
    kCommentaryNoteFieldNumber = 6,
    kEpochFieldNumber = 7,
    kFocusTrackFieldNumber = 8,
    kHistoricChartingInformationFieldNumber = 9,
    kImageFieldNumber = 10,
    kIsSimilarFieldNumber = 11,
    kPseudonymFieldNumber = 13,
    kRelatedCreationFieldNumber = 14,
    kClassicalPeriodFieldNumber = 5,
    kPartyFieldNumber = 12,
    kVocalRegisterFieldNumber = 15,
  };
  // repeated .mead101.mead.ArtistType artist_type = 1;
  int artist_type_size() const;
  private:
  int _internal_artist_type_size() const;
  public:
  void clear_artist_type();
  ::mead101::mead::ArtistType* mutable_artist_type(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::ArtistType >*
      mutable_artist_type();
  private:
  const ::mead101::mead::ArtistType& _internal_artist_type(int index) const;
  ::mead101::mead::ArtistType* _internal_add_artist_type();
  public:
  const ::mead101::mead::ArtistType& artist_type(int index) const;
  ::mead101::mead::ArtistType* add_artist_type();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::ArtistType >&
      artist_type() const;

  // repeated .mead101.mead.ArtisticInfluence artistic_influence = 2;
  int artistic_influence_size() const;
  private:
  int _internal_artistic_influence_size() const;
  public:
  void clear_artistic_influence();
  ::mead101::mead::ArtisticInfluence* mutable_artistic_influence(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::ArtisticInfluence >*
      mutable_artistic_influence();
  private:
  const ::mead101::mead::ArtisticInfluence& _internal_artistic_influence(int index) const;
  ::mead101::mead::ArtisticInfluence* _internal_add_artistic_influence();
  public:
  const ::mead101::mead::ArtisticInfluence& artistic_influence(int index) const;
  ::mead101::mead::ArtisticInfluence* add_artistic_influence();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::ArtisticInfluence >&
      artistic_influence() const;

  // repeated .mead101.mead.AwardForParty award = 3;
  int award_size() const;
  private:
  int _internal_award_size() const;
  public:
  void clear_award();
  ::mead101::mead::AwardForParty* mutable_award(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::AwardForParty >*
      mutable_award();
  private:
  const ::mead101::mead::AwardForParty& _internal_award(int index) const;
  ::mead101::mead::AwardForParty* _internal_add_award();
  public:
  const ::mead101::mead::AwardForParty& award(int index) const;
  ::mead101::mead::AwardForParty* add_award();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::AwardForParty >&
      award() const;

  // repeated .mead101.mead.Biography biography = 4;
  int biography_size() const;
  private:
  int _internal_biography_size() const;
  public:
  void clear_biography();
  ::mead101::mead::Biography* mutable_biography(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Biography >*
      mutable_biography();
  private:
  const ::mead101::mead::Biography& _internal_biography(int index) const;
  ::mead101::mead::Biography* _internal_add_biography();
  public:
  const ::mead101::mead::Biography& biography(int index) const;
  ::mead101::mead::Biography* add_biography();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Biography >&
      biography() const;

  // repeated .mead101.mead.CommentaryNote commentary_note = 6;
  int commentary_note_size() const;
  private:
  int _internal_commentary_note_size() const;
  public:
  void clear_commentary_note();
  ::mead101::mead::CommentaryNote* mutable_commentary_note(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::CommentaryNote >*
      mutable_commentary_note();
  private:
  const ::mead101::mead::CommentaryNote& _internal_commentary_note(int index) const;
  ::mead101::mead::CommentaryNote* _internal_add_commentary_note();
  public:
  const ::mead101::mead::CommentaryNote& commentary_note(int index) const;
  ::mead101::mead::CommentaryNote* add_commentary_note();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::CommentaryNote >&
      commentary_note() const;

  // repeated .mead101.mead.Epoch epoch = 7;
  int epoch_size() const;
  private:
  int _internal_epoch_size() const;
  public:
  void clear_epoch();
  ::mead101::mead::Epoch* mutable_epoch(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Epoch >*
      mutable_epoch();
  private:
  const ::mead101::mead::Epoch& _internal_epoch(int index) const;
  ::mead101::mead::Epoch* _internal_add_epoch();
  public:
  const ::mead101::mead::Epoch& epoch(int index) const;
  ::mead101::mead::Epoch* add_epoch();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Epoch >&
      epoch() const;

  // repeated .mead101.mead.FocusTrack focus_track = 8;
  int focus_track_size() const;
  private:
  int _internal_focus_track_size() const;
  public:
  void clear_focus_track();
  ::mead101::mead::FocusTrack* mutable_focus_track(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::FocusTrack >*
      mutable_focus_track();
  private:
  const ::mead101::mead::FocusTrack& _internal_focus_track(int index) const;
  ::mead101::mead::FocusTrack* _internal_add_focus_track();
  public:
  const ::mead101::mead::FocusTrack& focus_track(int index) const;
  ::mead101::mead::FocusTrack* add_focus_track();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::FocusTrack >&
      focus_track() const;

  // repeated .mead101.mead.HistoricChartingInformationForParty historic_charting_information = 9;
  int historic_charting_information_size() const;
  private:
  int _internal_historic_charting_information_size() const;
  public:
  void clear_historic_charting_information();
  ::mead101::mead::HistoricChartingInformationForParty* mutable_historic_charting_information(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::HistoricChartingInformationForParty >*
      mutable_historic_charting_information();
  private:
  const ::mead101::mead::HistoricChartingInformationForParty& _internal_historic_charting_information(int index) const;
  ::mead101::mead::HistoricChartingInformationForParty* _internal_add_historic_charting_information();
  public:
  const ::mead101::mead::HistoricChartingInformationForParty& historic_charting_information(int index) const;
  ::mead101::mead::HistoricChartingInformationForParty* add_historic_charting_information();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::HistoricChartingInformationForParty >&
      historic_charting_information() const;

  // repeated .mead101.mead.Image image = 10;
  int image_size() const;
  private:
  int _internal_image_size() const;
  public:
  void clear_image();
  ::mead101::mead::Image* mutable_image(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Image >*
      mutable_image();
  private:
  const ::mead101::mead::Image& _internal_image(int index) const;
  ::mead101::mead::Image* _internal_add_image();
  public:
  const ::mead101::mead::Image& image(int index) const;
  ::mead101::mead::Image* add_image();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Image >&
      image() const;

  // repeated .mead101.mead.SimilarParty is_similar = 11;
  int is_similar_size() const;
  private:
  int _internal_is_similar_size() const;
  public:
  void clear_is_similar();
  ::mead101::mead::SimilarParty* mutable_is_similar(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::SimilarParty >*
      mutable_is_similar();
  private:
  const ::mead101::mead::SimilarParty& _internal_is_similar(int index) const;
  ::mead101::mead::SimilarParty* _internal_add_is_similar();
  public:
  const ::mead101::mead::SimilarParty& is_similar(int index) const;
  ::mead101::mead::SimilarParty* add_is_similar();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::SimilarParty >&
      is_similar() const;

  // repeated .mead101.mead.Pseudonym pseudonym = 13;
  int pseudonym_size() const;
  private:
  int _internal_pseudonym_size() const;
  public:
  void clear_pseudonym();
  ::mead101::mead::Pseudonym* mutable_pseudonym(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Pseudonym >*
      mutable_pseudonym();
  private:
  const ::mead101::mead::Pseudonym& _internal_pseudonym(int index) const;
  ::mead101::mead::Pseudonym* _internal_add_pseudonym();
  public:
  const ::mead101::mead::Pseudonym& pseudonym(int index) const;
  ::mead101::mead::Pseudonym* add_pseudonym();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Pseudonym >&
      pseudonym() const;

  // repeated .mead101.mead.RelatedCreation related_creation = 14;
  int related_creation_size() const;
  private:
  int _internal_related_creation_size() const;
  public:
  void clear_related_creation();
  ::mead101::mead::RelatedCreation* mutable_related_creation(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::RelatedCreation >*
      mutable_related_creation();
  private:
  const ::mead101::mead::RelatedCreation& _internal_related_creation(int index) const;
  ::mead101::mead::RelatedCreation* _internal_add_related_creation();
  public:
  const ::mead101::mead::RelatedCreation& related_creation(int index) const;
  ::mead101::mead::RelatedCreation* add_related_creation();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::RelatedCreation >&
      related_creation() const;

  // optional .mead101.mead.ClassicalPeriod classical_period = 5;
  bool has_classical_period() const;
  private:
  bool _internal_has_classical_period() const;
  public:
  void clear_classical_period();
  const ::mead101::mead::ClassicalPeriod& classical_period() const;
  ::mead101::mead::ClassicalPeriod* release_classical_period();
  ::mead101::mead::ClassicalPeriod* mutable_classical_period();
  void set_allocated_classical_period(::mead101::mead::ClassicalPeriod* classical_period);
  private:
  const ::mead101::mead::ClassicalPeriod& _internal_classical_period() const;
  ::mead101::mead::ClassicalPeriod* _internal_mutable_classical_period();
  public:
  void unsafe_arena_set_allocated_classical_period(
      ::mead101::mead::ClassicalPeriod* classical_period);
  ::mead101::mead::ClassicalPeriod* unsafe_arena_release_classical_period();

  // optional .mead101.mead.PartyWithNames party = 12;
  bool has_party() const;
  private:
  bool _internal_has_party() const;
  public:
  void clear_party();
  const ::mead101::mead::PartyWithNames& party() const;
  ::mead101::mead::PartyWithNames* release_party();
  ::mead101::mead::PartyWithNames* mutable_party();
  void set_allocated_party(::mead101::mead::PartyWithNames* party);
  private:
  const ::mead101::mead::PartyWithNames& _internal_party() const;
  ::mead101::mead::PartyWithNames* _internal_mutable_party();
  public:
  void unsafe_arena_set_allocated_party(
      ::mead101::mead::PartyWithNames* party);
  ::mead101::mead::PartyWithNames* unsafe_arena_release_party();

  // optional .mead101.mead.VocalRegister vocal_register = 15;
  bool has_vocal_register() const;
  private:
  bool _internal_has_vocal_register() const;
  public:
  void clear_vocal_register();
  const ::mead101::mead::VocalRegister& vocal_register() const;
  ::mead101::mead::VocalRegister* release_vocal_register();
  ::mead101::mead::VocalRegister* mutable_vocal_register();
  void set_allocated_vocal_register(::mead101::mead::VocalRegister* vocal_register);
  private:
  const ::mead101::mead::VocalRegister& _internal_vocal_register() const;
  ::mead101::mead::VocalRegister* _internal_mutable_vocal_register();
  public:
  void unsafe_arena_set_allocated_vocal_register(
      ::mead101::mead::VocalRegister* vocal_register);
  ::mead101::mead::VocalRegister* unsafe_arena_release_vocal_register();

  // @@protoc_insertion_point(class_scope:mead101.mead.PartyInformation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::ArtistType > artist_type_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::ArtisticInfluence > artistic_influence_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::AwardForParty > award_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Biography > biography_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::CommentaryNote > commentary_note_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Epoch > epoch_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::FocusTrack > focus_track_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::HistoricChartingInformationForParty > historic_charting_information_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Image > image_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::SimilarParty > is_similar_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Pseudonym > pseudonym_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::RelatedCreation > related_creation_;
  ::mead101::mead::ClassicalPeriod* classical_period_;
  ::mead101::mead::PartyWithNames* party_;
  ::mead101::mead::VocalRegister* vocal_register_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class PartyInformationList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.PartyInformationList) */ {
 public:
  inline PartyInformationList() : PartyInformationList(nullptr) {}
  virtual ~PartyInformationList();

  PartyInformationList(const PartyInformationList& from);
  PartyInformationList(PartyInformationList&& from) noexcept
    : PartyInformationList() {
    *this = ::std::move(from);
  }

  inline PartyInformationList& operator=(const PartyInformationList& from) {
    CopyFrom(from);
    return *this;
  }
  inline PartyInformationList& operator=(PartyInformationList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PartyInformationList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PartyInformationList* internal_default_instance() {
    return reinterpret_cast<const PartyInformationList*>(
               &_PartyInformationList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    86;

  friend void swap(PartyInformationList& a, PartyInformationList& b) {
    a.Swap(&b);
  }
  inline void Swap(PartyInformationList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PartyInformationList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PartyInformationList* New() const final {
    return CreateMaybeMessage<PartyInformationList>(nullptr);
  }

  PartyInformationList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PartyInformationList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PartyInformationList& from);
  void MergeFrom(const PartyInformationList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PartyInformationList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.PartyInformationList";
  }
  protected:
  explicit PartyInformationList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPartyInformationFieldNumber = 1,
  };
  // repeated .mead101.mead.PartyInformation party_information = 1;
  int party_information_size() const;
  private:
  int _internal_party_information_size() const;
  public:
  void clear_party_information();
  ::mead101::mead::PartyInformation* mutable_party_information(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::PartyInformation >*
      mutable_party_information();
  private:
  const ::mead101::mead::PartyInformation& _internal_party_information(int index) const;
  ::mead101::mead::PartyInformation* _internal_add_party_information();
  public:
  const ::mead101::mead::PartyInformation& party_information(int index) const;
  ::mead101::mead::PartyInformation* add_party_information();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::PartyInformation >&
      party_information() const;

  // @@protoc_insertion_point(class_scope:mead101.mead.PartyInformationList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::PartyInformation > party_information_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class PartyName PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.PartyName) */ {
 public:
  inline PartyName() : PartyName(nullptr) {}
  virtual ~PartyName();

  PartyName(const PartyName& from);
  PartyName(PartyName&& from) noexcept
    : PartyName() {
    *this = ::std::move(from);
  }

  inline PartyName& operator=(const PartyName& from) {
    CopyFrom(from);
    return *this;
  }
  inline PartyName& operator=(PartyName&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PartyName& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PartyName* internal_default_instance() {
    return reinterpret_cast<const PartyName*>(
               &_PartyName_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    87;

  friend void swap(PartyName& a, PartyName& b) {
    a.Swap(&b);
  }
  inline void Swap(PartyName* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PartyName* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PartyName* New() const final {
    return CreateMaybeMessage<PartyName>(nullptr);
  }

  PartyName* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PartyName>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PartyName& from);
  void MergeFrom(const PartyName& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PartyName* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.PartyName";
  }
  protected:
  explicit PartyName(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFullNameAsciiTranscribedFieldNumber = 3,
    kLanguageAndScriptCodeFieldNumber = 6,
    kAbbreviatedNameFieldNumber = 1,
    kFullNameFieldNumber = 2,
    kFullNameIndexedFieldNumber = 4,
    kKeyNameFieldNumber = 5,
    kNamesAfterKeyNameFieldNumber = 7,
    kNamesBeforeKeyNameFieldNumber = 8,
  };
  // optional string full_name_ascii_transcribed = 3;
  bool has_full_name_ascii_transcribed() const;
  private:
  bool _internal_has_full_name_ascii_transcribed() const;
  public:
  void clear_full_name_ascii_transcribed();
  const std::string& full_name_ascii_transcribed() const;
  void set_full_name_ascii_transcribed(const std::string& value);
  void set_full_name_ascii_transcribed(std::string&& value);
  void set_full_name_ascii_transcribed(const char* value);
  void set_full_name_ascii_transcribed(const char* value, size_t size);
  std::string* mutable_full_name_ascii_transcribed();
  std::string* release_full_name_ascii_transcribed();
  void set_allocated_full_name_ascii_transcribed(std::string* full_name_ascii_transcribed);
  private:
  const std::string& _internal_full_name_ascii_transcribed() const;
  void _internal_set_full_name_ascii_transcribed(const std::string& value);
  std::string* _internal_mutable_full_name_ascii_transcribed();
  public:

  // optional string language_and_script_code = 6;
  bool has_language_and_script_code() const;
  private:
  bool _internal_has_language_and_script_code() const;
  public:
  void clear_language_and_script_code();
  const std::string& language_and_script_code() const;
  void set_language_and_script_code(const std::string& value);
  void set_language_and_script_code(std::string&& value);
  void set_language_and_script_code(const char* value);
  void set_language_and_script_code(const char* value, size_t size);
  std::string* mutable_language_and_script_code();
  std::string* release_language_and_script_code();
  void set_allocated_language_and_script_code(std::string* language_and_script_code);
  private:
  const std::string& _internal_language_and_script_code() const;
  void _internal_set_language_and_script_code(const std::string& value);
  std::string* _internal_mutable_language_and_script_code();
  public:

  // optional .mead101.mead.Name abbreviated_name = 1;
  bool has_abbreviated_name() const;
  private:
  bool _internal_has_abbreviated_name() const;
  public:
  void clear_abbreviated_name();
  const ::mead101::mead::Name& abbreviated_name() const;
  ::mead101::mead::Name* release_abbreviated_name();
  ::mead101::mead::Name* mutable_abbreviated_name();
  void set_allocated_abbreviated_name(::mead101::mead::Name* abbreviated_name);
  private:
  const ::mead101::mead::Name& _internal_abbreviated_name() const;
  ::mead101::mead::Name* _internal_mutable_abbreviated_name();
  public:
  void unsafe_arena_set_allocated_abbreviated_name(
      ::mead101::mead::Name* abbreviated_name);
  ::mead101::mead::Name* unsafe_arena_release_abbreviated_name();

  // optional .mead101.mead.Name full_name = 2;
  bool has_full_name() const;
  private:
  bool _internal_has_full_name() const;
  public:
  void clear_full_name();
  const ::mead101::mead::Name& full_name() const;
  ::mead101::mead::Name* release_full_name();
  ::mead101::mead::Name* mutable_full_name();
  void set_allocated_full_name(::mead101::mead::Name* full_name);
  private:
  const ::mead101::mead::Name& _internal_full_name() const;
  ::mead101::mead::Name* _internal_mutable_full_name();
  public:
  void unsafe_arena_set_allocated_full_name(
      ::mead101::mead::Name* full_name);
  ::mead101::mead::Name* unsafe_arena_release_full_name();

  // optional .mead101.mead.Name full_name_indexed = 4;
  bool has_full_name_indexed() const;
  private:
  bool _internal_has_full_name_indexed() const;
  public:
  void clear_full_name_indexed();
  const ::mead101::mead::Name& full_name_indexed() const;
  ::mead101::mead::Name* release_full_name_indexed();
  ::mead101::mead::Name* mutable_full_name_indexed();
  void set_allocated_full_name_indexed(::mead101::mead::Name* full_name_indexed);
  private:
  const ::mead101::mead::Name& _internal_full_name_indexed() const;
  ::mead101::mead::Name* _internal_mutable_full_name_indexed();
  public:
  void unsafe_arena_set_allocated_full_name_indexed(
      ::mead101::mead::Name* full_name_indexed);
  ::mead101::mead::Name* unsafe_arena_release_full_name_indexed();

  // optional .mead101.mead.Name key_name = 5;
  bool has_key_name() const;
  private:
  bool _internal_has_key_name() const;
  public:
  void clear_key_name();
  const ::mead101::mead::Name& key_name() const;
  ::mead101::mead::Name* release_key_name();
  ::mead101::mead::Name* mutable_key_name();
  void set_allocated_key_name(::mead101::mead::Name* key_name);
  private:
  const ::mead101::mead::Name& _internal_key_name() const;
  ::mead101::mead::Name* _internal_mutable_key_name();
  public:
  void unsafe_arena_set_allocated_key_name(
      ::mead101::mead::Name* key_name);
  ::mead101::mead::Name* unsafe_arena_release_key_name();

  // optional .mead101.mead.Name names_after_key_name = 7;
  bool has_names_after_key_name() const;
  private:
  bool _internal_has_names_after_key_name() const;
  public:
  void clear_names_after_key_name();
  const ::mead101::mead::Name& names_after_key_name() const;
  ::mead101::mead::Name* release_names_after_key_name();
  ::mead101::mead::Name* mutable_names_after_key_name();
  void set_allocated_names_after_key_name(::mead101::mead::Name* names_after_key_name);
  private:
  const ::mead101::mead::Name& _internal_names_after_key_name() const;
  ::mead101::mead::Name* _internal_mutable_names_after_key_name();
  public:
  void unsafe_arena_set_allocated_names_after_key_name(
      ::mead101::mead::Name* names_after_key_name);
  ::mead101::mead::Name* unsafe_arena_release_names_after_key_name();

  // optional .mead101.mead.Name names_before_key_name = 8;
  bool has_names_before_key_name() const;
  private:
  bool _internal_has_names_before_key_name() const;
  public:
  void clear_names_before_key_name();
  const ::mead101::mead::Name& names_before_key_name() const;
  ::mead101::mead::Name* release_names_before_key_name();
  ::mead101::mead::Name* mutable_names_before_key_name();
  void set_allocated_names_before_key_name(::mead101::mead::Name* names_before_key_name);
  private:
  const ::mead101::mead::Name& _internal_names_before_key_name() const;
  ::mead101::mead::Name* _internal_mutable_names_before_key_name();
  public:
  void unsafe_arena_set_allocated_names_before_key_name(
      ::mead101::mead::Name* names_before_key_name);
  ::mead101::mead::Name* unsafe_arena_release_names_before_key_name();

  // @@protoc_insertion_point(class_scope:mead101.mead.PartyName)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr full_name_ascii_transcribed_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_and_script_code_;
  ::mead101::mead::Name* abbreviated_name_;
  ::mead101::mead::Name* full_name_;
  ::mead101::mead::Name* full_name_indexed_;
  ::mead101::mead::Name* key_name_;
  ::mead101::mead::Name* names_after_key_name_;
  ::mead101::mead::Name* names_before_key_name_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class PartyNameWithPronunciation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.PartyNameWithPronunciation) */ {
 public:
  inline PartyNameWithPronunciation() : PartyNameWithPronunciation(nullptr) {}
  virtual ~PartyNameWithPronunciation();

  PartyNameWithPronunciation(const PartyNameWithPronunciation& from);
  PartyNameWithPronunciation(PartyNameWithPronunciation&& from) noexcept
    : PartyNameWithPronunciation() {
    *this = ::std::move(from);
  }

  inline PartyNameWithPronunciation& operator=(const PartyNameWithPronunciation& from) {
    CopyFrom(from);
    return *this;
  }
  inline PartyNameWithPronunciation& operator=(PartyNameWithPronunciation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PartyNameWithPronunciation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PartyNameWithPronunciation* internal_default_instance() {
    return reinterpret_cast<const PartyNameWithPronunciation*>(
               &_PartyNameWithPronunciation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    88;

  friend void swap(PartyNameWithPronunciation& a, PartyNameWithPronunciation& b) {
    a.Swap(&b);
  }
  inline void Swap(PartyNameWithPronunciation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PartyNameWithPronunciation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PartyNameWithPronunciation* New() const final {
    return CreateMaybeMessage<PartyNameWithPronunciation>(nullptr);
  }

  PartyNameWithPronunciation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PartyNameWithPronunciation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PartyNameWithPronunciation& from);
  void MergeFrom(const PartyNameWithPronunciation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PartyNameWithPronunciation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.PartyNameWithPronunciation";
  }
  protected:
  explicit PartyNameWithPronunciation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLanguageAndScriptCodeFieldNumber = 6,
    kAbbreviatedNameFieldNumber = 1,
    kFullNameFieldNumber = 2,
    kFullNameAsciiTranscribedFieldNumber = 3,
    kFullNameIndexedFieldNumber = 4,
    kKeyNameFieldNumber = 5,
    kNamesAfterKeyNameFieldNumber = 7,
    kNamesBeforeKeyNameFieldNumber = 8,
  };
  // optional string language_and_script_code = 6;
  bool has_language_and_script_code() const;
  private:
  bool _internal_has_language_and_script_code() const;
  public:
  void clear_language_and_script_code();
  const std::string& language_and_script_code() const;
  void set_language_and_script_code(const std::string& value);
  void set_language_and_script_code(std::string&& value);
  void set_language_and_script_code(const char* value);
  void set_language_and_script_code(const char* value, size_t size);
  std::string* mutable_language_and_script_code();
  std::string* release_language_and_script_code();
  void set_allocated_language_and_script_code(std::string* language_and_script_code);
  private:
  const std::string& _internal_language_and_script_code() const;
  void _internal_set_language_and_script_code(const std::string& value);
  std::string* _internal_mutable_language_and_script_code();
  public:

  // optional .mead101.mead.NameWithPronunciationAndScriptCode abbreviated_name = 1;
  bool has_abbreviated_name() const;
  private:
  bool _internal_has_abbreviated_name() const;
  public:
  void clear_abbreviated_name();
  const ::mead101::mead::NameWithPronunciationAndScriptCode& abbreviated_name() const;
  ::mead101::mead::NameWithPronunciationAndScriptCode* release_abbreviated_name();
  ::mead101::mead::NameWithPronunciationAndScriptCode* mutable_abbreviated_name();
  void set_allocated_abbreviated_name(::mead101::mead::NameWithPronunciationAndScriptCode* abbreviated_name);
  private:
  const ::mead101::mead::NameWithPronunciationAndScriptCode& _internal_abbreviated_name() const;
  ::mead101::mead::NameWithPronunciationAndScriptCode* _internal_mutable_abbreviated_name();
  public:
  void unsafe_arena_set_allocated_abbreviated_name(
      ::mead101::mead::NameWithPronunciationAndScriptCode* abbreviated_name);
  ::mead101::mead::NameWithPronunciationAndScriptCode* unsafe_arena_release_abbreviated_name();

  // optional .mead101.mead.NameWithPronunciationAndScriptCode full_name = 2;
  bool has_full_name() const;
  private:
  bool _internal_has_full_name() const;
  public:
  void clear_full_name();
  const ::mead101::mead::NameWithPronunciationAndScriptCode& full_name() const;
  ::mead101::mead::NameWithPronunciationAndScriptCode* release_full_name();
  ::mead101::mead::NameWithPronunciationAndScriptCode* mutable_full_name();
  void set_allocated_full_name(::mead101::mead::NameWithPronunciationAndScriptCode* full_name);
  private:
  const ::mead101::mead::NameWithPronunciationAndScriptCode& _internal_full_name() const;
  ::mead101::mead::NameWithPronunciationAndScriptCode* _internal_mutable_full_name();
  public:
  void unsafe_arena_set_allocated_full_name(
      ::mead101::mead::NameWithPronunciationAndScriptCode* full_name);
  ::mead101::mead::NameWithPronunciationAndScriptCode* unsafe_arena_release_full_name();

  // optional .mead101.mead.NameWithPronunciation full_name_ascii_transcribed = 3;
  bool has_full_name_ascii_transcribed() const;
  private:
  bool _internal_has_full_name_ascii_transcribed() const;
  public:
  void clear_full_name_ascii_transcribed();
  const ::mead101::mead::NameWithPronunciation& full_name_ascii_transcribed() const;
  ::mead101::mead::NameWithPronunciation* release_full_name_ascii_transcribed();
  ::mead101::mead::NameWithPronunciation* mutable_full_name_ascii_transcribed();
  void set_allocated_full_name_ascii_transcribed(::mead101::mead::NameWithPronunciation* full_name_ascii_transcribed);
  private:
  const ::mead101::mead::NameWithPronunciation& _internal_full_name_ascii_transcribed() const;
  ::mead101::mead::NameWithPronunciation* _internal_mutable_full_name_ascii_transcribed();
  public:
  void unsafe_arena_set_allocated_full_name_ascii_transcribed(
      ::mead101::mead::NameWithPronunciation* full_name_ascii_transcribed);
  ::mead101::mead::NameWithPronunciation* unsafe_arena_release_full_name_ascii_transcribed();

  // optional .mead101.mead.NameWithPronunciationAndScriptCode full_name_indexed = 4;
  bool has_full_name_indexed() const;
  private:
  bool _internal_has_full_name_indexed() const;
  public:
  void clear_full_name_indexed();
  const ::mead101::mead::NameWithPronunciationAndScriptCode& full_name_indexed() const;
  ::mead101::mead::NameWithPronunciationAndScriptCode* release_full_name_indexed();
  ::mead101::mead::NameWithPronunciationAndScriptCode* mutable_full_name_indexed();
  void set_allocated_full_name_indexed(::mead101::mead::NameWithPronunciationAndScriptCode* full_name_indexed);
  private:
  const ::mead101::mead::NameWithPronunciationAndScriptCode& _internal_full_name_indexed() const;
  ::mead101::mead::NameWithPronunciationAndScriptCode* _internal_mutable_full_name_indexed();
  public:
  void unsafe_arena_set_allocated_full_name_indexed(
      ::mead101::mead::NameWithPronunciationAndScriptCode* full_name_indexed);
  ::mead101::mead::NameWithPronunciationAndScriptCode* unsafe_arena_release_full_name_indexed();

  // optional .mead101.mead.NameWithPronunciationAndScriptCode key_name = 5;
  bool has_key_name() const;
  private:
  bool _internal_has_key_name() const;
  public:
  void clear_key_name();
  const ::mead101::mead::NameWithPronunciationAndScriptCode& key_name() const;
  ::mead101::mead::NameWithPronunciationAndScriptCode* release_key_name();
  ::mead101::mead::NameWithPronunciationAndScriptCode* mutable_key_name();
  void set_allocated_key_name(::mead101::mead::NameWithPronunciationAndScriptCode* key_name);
  private:
  const ::mead101::mead::NameWithPronunciationAndScriptCode& _internal_key_name() const;
  ::mead101::mead::NameWithPronunciationAndScriptCode* _internal_mutable_key_name();
  public:
  void unsafe_arena_set_allocated_key_name(
      ::mead101::mead::NameWithPronunciationAndScriptCode* key_name);
  ::mead101::mead::NameWithPronunciationAndScriptCode* unsafe_arena_release_key_name();

  // optional .mead101.mead.NameWithPronunciationAndScriptCode names_after_key_name = 7;
  bool has_names_after_key_name() const;
  private:
  bool _internal_has_names_after_key_name() const;
  public:
  void clear_names_after_key_name();
  const ::mead101::mead::NameWithPronunciationAndScriptCode& names_after_key_name() const;
  ::mead101::mead::NameWithPronunciationAndScriptCode* release_names_after_key_name();
  ::mead101::mead::NameWithPronunciationAndScriptCode* mutable_names_after_key_name();
  void set_allocated_names_after_key_name(::mead101::mead::NameWithPronunciationAndScriptCode* names_after_key_name);
  private:
  const ::mead101::mead::NameWithPronunciationAndScriptCode& _internal_names_after_key_name() const;
  ::mead101::mead::NameWithPronunciationAndScriptCode* _internal_mutable_names_after_key_name();
  public:
  void unsafe_arena_set_allocated_names_after_key_name(
      ::mead101::mead::NameWithPronunciationAndScriptCode* names_after_key_name);
  ::mead101::mead::NameWithPronunciationAndScriptCode* unsafe_arena_release_names_after_key_name();

  // optional .mead101.mead.NameWithPronunciationAndScriptCode names_before_key_name = 8;
  bool has_names_before_key_name() const;
  private:
  bool _internal_has_names_before_key_name() const;
  public:
  void clear_names_before_key_name();
  const ::mead101::mead::NameWithPronunciationAndScriptCode& names_before_key_name() const;
  ::mead101::mead::NameWithPronunciationAndScriptCode* release_names_before_key_name();
  ::mead101::mead::NameWithPronunciationAndScriptCode* mutable_names_before_key_name();
  void set_allocated_names_before_key_name(::mead101::mead::NameWithPronunciationAndScriptCode* names_before_key_name);
  private:
  const ::mead101::mead::NameWithPronunciationAndScriptCode& _internal_names_before_key_name() const;
  ::mead101::mead::NameWithPronunciationAndScriptCode* _internal_mutable_names_before_key_name();
  public:
  void unsafe_arena_set_allocated_names_before_key_name(
      ::mead101::mead::NameWithPronunciationAndScriptCode* names_before_key_name);
  ::mead101::mead::NameWithPronunciationAndScriptCode* unsafe_arena_release_names_before_key_name();

  // @@protoc_insertion_point(class_scope:mead101.mead.PartyNameWithPronunciation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_and_script_code_;
  ::mead101::mead::NameWithPronunciationAndScriptCode* abbreviated_name_;
  ::mead101::mead::NameWithPronunciationAndScriptCode* full_name_;
  ::mead101::mead::NameWithPronunciation* full_name_ascii_transcribed_;
  ::mead101::mead::NameWithPronunciationAndScriptCode* full_name_indexed_;
  ::mead101::mead::NameWithPronunciationAndScriptCode* key_name_;
  ::mead101::mead::NameWithPronunciationAndScriptCode* names_after_key_name_;
  ::mead101::mead::NameWithPronunciationAndScriptCode* names_before_key_name_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class PartyNameWithTerritory PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.PartyNameWithTerritory) */ {
 public:
  inline PartyNameWithTerritory() : PartyNameWithTerritory(nullptr) {}
  virtual ~PartyNameWithTerritory();

  PartyNameWithTerritory(const PartyNameWithTerritory& from);
  PartyNameWithTerritory(PartyNameWithTerritory&& from) noexcept
    : PartyNameWithTerritory() {
    *this = ::std::move(from);
  }

  inline PartyNameWithTerritory& operator=(const PartyNameWithTerritory& from) {
    CopyFrom(from);
    return *this;
  }
  inline PartyNameWithTerritory& operator=(PartyNameWithTerritory&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PartyNameWithTerritory& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PartyNameWithTerritory* internal_default_instance() {
    return reinterpret_cast<const PartyNameWithTerritory*>(
               &_PartyNameWithTerritory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    89;

  friend void swap(PartyNameWithTerritory& a, PartyNameWithTerritory& b) {
    a.Swap(&b);
  }
  inline void Swap(PartyNameWithTerritory* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PartyNameWithTerritory* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PartyNameWithTerritory* New() const final {
    return CreateMaybeMessage<PartyNameWithTerritory>(nullptr);
  }

  PartyNameWithTerritory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PartyNameWithTerritory>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PartyNameWithTerritory& from);
  void MergeFrom(const PartyNameWithTerritory& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PartyNameWithTerritory* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.PartyNameWithTerritory";
  }
  protected:
  explicit PartyNameWithTerritory(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLanguageAndScriptCodeFieldNumber = 7,
    kAbbreviatedNameFieldNumber = 1,
    kApplicableTerritoryCodeFieldNumber = 2,
    kFullNameFieldNumber = 3,
    kFullNameAsciiTranscribedFieldNumber = 4,
    kFullNameIndexedFieldNumber = 5,
    kKeyNameFieldNumber = 6,
    kNamesAfterKeyNameFieldNumber = 8,
    kNamesBeforeKeyNameFieldNumber = 9,
  };
  // optional string language_and_script_code = 7;
  bool has_language_and_script_code() const;
  private:
  bool _internal_has_language_and_script_code() const;
  public:
  void clear_language_and_script_code();
  const std::string& language_and_script_code() const;
  void set_language_and_script_code(const std::string& value);
  void set_language_and_script_code(std::string&& value);
  void set_language_and_script_code(const char* value);
  void set_language_and_script_code(const char* value, size_t size);
  std::string* mutable_language_and_script_code();
  std::string* release_language_and_script_code();
  void set_allocated_language_and_script_code(std::string* language_and_script_code);
  private:
  const std::string& _internal_language_and_script_code() const;
  void _internal_set_language_and_script_code(const std::string& value);
  std::string* _internal_mutable_language_and_script_code();
  public:

  // optional .mead101.mead.NameWithPronunciationAndScriptCode abbreviated_name = 1;
  bool has_abbreviated_name() const;
  private:
  bool _internal_has_abbreviated_name() const;
  public:
  void clear_abbreviated_name();
  const ::mead101::mead::NameWithPronunciationAndScriptCode& abbreviated_name() const;
  ::mead101::mead::NameWithPronunciationAndScriptCode* release_abbreviated_name();
  ::mead101::mead::NameWithPronunciationAndScriptCode* mutable_abbreviated_name();
  void set_allocated_abbreviated_name(::mead101::mead::NameWithPronunciationAndScriptCode* abbreviated_name);
  private:
  const ::mead101::mead::NameWithPronunciationAndScriptCode& _internal_abbreviated_name() const;
  ::mead101::mead::NameWithPronunciationAndScriptCode* _internal_mutable_abbreviated_name();
  public:
  void unsafe_arena_set_allocated_abbreviated_name(
      ::mead101::mead::NameWithPronunciationAndScriptCode* abbreviated_name);
  ::mead101::mead::NameWithPronunciationAndScriptCode* unsafe_arena_release_abbreviated_name();

  // optional .mead101.avs.CurrentTerritoryCode applicable_territory_code = 2;
  bool has_applicable_territory_code() const;
  private:
  bool _internal_has_applicable_territory_code() const;
  public:
  void clear_applicable_territory_code();
  const ::mead101::avs::CurrentTerritoryCode& applicable_territory_code() const;
  ::mead101::avs::CurrentTerritoryCode* release_applicable_territory_code();
  ::mead101::avs::CurrentTerritoryCode* mutable_applicable_territory_code();
  void set_allocated_applicable_territory_code(::mead101::avs::CurrentTerritoryCode* applicable_territory_code);
  private:
  const ::mead101::avs::CurrentTerritoryCode& _internal_applicable_territory_code() const;
  ::mead101::avs::CurrentTerritoryCode* _internal_mutable_applicable_territory_code();
  public:
  void unsafe_arena_set_allocated_applicable_territory_code(
      ::mead101::avs::CurrentTerritoryCode* applicable_territory_code);
  ::mead101::avs::CurrentTerritoryCode* unsafe_arena_release_applicable_territory_code();

  // optional .mead101.mead.NameWithPronunciationAndScriptCode full_name = 3;
  bool has_full_name() const;
  private:
  bool _internal_has_full_name() const;
  public:
  void clear_full_name();
  const ::mead101::mead::NameWithPronunciationAndScriptCode& full_name() const;
  ::mead101::mead::NameWithPronunciationAndScriptCode* release_full_name();
  ::mead101::mead::NameWithPronunciationAndScriptCode* mutable_full_name();
  void set_allocated_full_name(::mead101::mead::NameWithPronunciationAndScriptCode* full_name);
  private:
  const ::mead101::mead::NameWithPronunciationAndScriptCode& _internal_full_name() const;
  ::mead101::mead::NameWithPronunciationAndScriptCode* _internal_mutable_full_name();
  public:
  void unsafe_arena_set_allocated_full_name(
      ::mead101::mead::NameWithPronunciationAndScriptCode* full_name);
  ::mead101::mead::NameWithPronunciationAndScriptCode* unsafe_arena_release_full_name();

  // optional .mead101.mead.NameWithPronunciation full_name_ascii_transcribed = 4;
  bool has_full_name_ascii_transcribed() const;
  private:
  bool _internal_has_full_name_ascii_transcribed() const;
  public:
  void clear_full_name_ascii_transcribed();
  const ::mead101::mead::NameWithPronunciation& full_name_ascii_transcribed() const;
  ::mead101::mead::NameWithPronunciation* release_full_name_ascii_transcribed();
  ::mead101::mead::NameWithPronunciation* mutable_full_name_ascii_transcribed();
  void set_allocated_full_name_ascii_transcribed(::mead101::mead::NameWithPronunciation* full_name_ascii_transcribed);
  private:
  const ::mead101::mead::NameWithPronunciation& _internal_full_name_ascii_transcribed() const;
  ::mead101::mead::NameWithPronunciation* _internal_mutable_full_name_ascii_transcribed();
  public:
  void unsafe_arena_set_allocated_full_name_ascii_transcribed(
      ::mead101::mead::NameWithPronunciation* full_name_ascii_transcribed);
  ::mead101::mead::NameWithPronunciation* unsafe_arena_release_full_name_ascii_transcribed();

  // optional .mead101.mead.NameWithPronunciationAndScriptCode full_name_indexed = 5;
  bool has_full_name_indexed() const;
  private:
  bool _internal_has_full_name_indexed() const;
  public:
  void clear_full_name_indexed();
  const ::mead101::mead::NameWithPronunciationAndScriptCode& full_name_indexed() const;
  ::mead101::mead::NameWithPronunciationAndScriptCode* release_full_name_indexed();
  ::mead101::mead::NameWithPronunciationAndScriptCode* mutable_full_name_indexed();
  void set_allocated_full_name_indexed(::mead101::mead::NameWithPronunciationAndScriptCode* full_name_indexed);
  private:
  const ::mead101::mead::NameWithPronunciationAndScriptCode& _internal_full_name_indexed() const;
  ::mead101::mead::NameWithPronunciationAndScriptCode* _internal_mutable_full_name_indexed();
  public:
  void unsafe_arena_set_allocated_full_name_indexed(
      ::mead101::mead::NameWithPronunciationAndScriptCode* full_name_indexed);
  ::mead101::mead::NameWithPronunciationAndScriptCode* unsafe_arena_release_full_name_indexed();

  // optional .mead101.mead.NameWithPronunciationAndScriptCode key_name = 6;
  bool has_key_name() const;
  private:
  bool _internal_has_key_name() const;
  public:
  void clear_key_name();
  const ::mead101::mead::NameWithPronunciationAndScriptCode& key_name() const;
  ::mead101::mead::NameWithPronunciationAndScriptCode* release_key_name();
  ::mead101::mead::NameWithPronunciationAndScriptCode* mutable_key_name();
  void set_allocated_key_name(::mead101::mead::NameWithPronunciationAndScriptCode* key_name);
  private:
  const ::mead101::mead::NameWithPronunciationAndScriptCode& _internal_key_name() const;
  ::mead101::mead::NameWithPronunciationAndScriptCode* _internal_mutable_key_name();
  public:
  void unsafe_arena_set_allocated_key_name(
      ::mead101::mead::NameWithPronunciationAndScriptCode* key_name);
  ::mead101::mead::NameWithPronunciationAndScriptCode* unsafe_arena_release_key_name();

  // optional .mead101.mead.NameWithPronunciationAndScriptCode names_after_key_name = 8;
  bool has_names_after_key_name() const;
  private:
  bool _internal_has_names_after_key_name() const;
  public:
  void clear_names_after_key_name();
  const ::mead101::mead::NameWithPronunciationAndScriptCode& names_after_key_name() const;
  ::mead101::mead::NameWithPronunciationAndScriptCode* release_names_after_key_name();
  ::mead101::mead::NameWithPronunciationAndScriptCode* mutable_names_after_key_name();
  void set_allocated_names_after_key_name(::mead101::mead::NameWithPronunciationAndScriptCode* names_after_key_name);
  private:
  const ::mead101::mead::NameWithPronunciationAndScriptCode& _internal_names_after_key_name() const;
  ::mead101::mead::NameWithPronunciationAndScriptCode* _internal_mutable_names_after_key_name();
  public:
  void unsafe_arena_set_allocated_names_after_key_name(
      ::mead101::mead::NameWithPronunciationAndScriptCode* names_after_key_name);
  ::mead101::mead::NameWithPronunciationAndScriptCode* unsafe_arena_release_names_after_key_name();

  // optional .mead101.mead.NameWithPronunciationAndScriptCode names_before_key_name = 9;
  bool has_names_before_key_name() const;
  private:
  bool _internal_has_names_before_key_name() const;
  public:
  void clear_names_before_key_name();
  const ::mead101::mead::NameWithPronunciationAndScriptCode& names_before_key_name() const;
  ::mead101::mead::NameWithPronunciationAndScriptCode* release_names_before_key_name();
  ::mead101::mead::NameWithPronunciationAndScriptCode* mutable_names_before_key_name();
  void set_allocated_names_before_key_name(::mead101::mead::NameWithPronunciationAndScriptCode* names_before_key_name);
  private:
  const ::mead101::mead::NameWithPronunciationAndScriptCode& _internal_names_before_key_name() const;
  ::mead101::mead::NameWithPronunciationAndScriptCode* _internal_mutable_names_before_key_name();
  public:
  void unsafe_arena_set_allocated_names_before_key_name(
      ::mead101::mead::NameWithPronunciationAndScriptCode* names_before_key_name);
  ::mead101::mead::NameWithPronunciationAndScriptCode* unsafe_arena_release_names_before_key_name();

  // @@protoc_insertion_point(class_scope:mead101.mead.PartyNameWithTerritory)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_and_script_code_;
  ::mead101::mead::NameWithPronunciationAndScriptCode* abbreviated_name_;
  ::mead101::avs::CurrentTerritoryCode* applicable_territory_code_;
  ::mead101::mead::NameWithPronunciationAndScriptCode* full_name_;
  ::mead101::mead::NameWithPronunciation* full_name_ascii_transcribed_;
  ::mead101::mead::NameWithPronunciationAndScriptCode* full_name_indexed_;
  ::mead101::mead::NameWithPronunciationAndScriptCode* key_name_;
  ::mead101::mead::NameWithPronunciationAndScriptCode* names_after_key_name_;
  ::mead101::mead::NameWithPronunciationAndScriptCode* names_before_key_name_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class PartyNameWithoutCode PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.PartyNameWithoutCode) */ {
 public:
  inline PartyNameWithoutCode() : PartyNameWithoutCode(nullptr) {}
  virtual ~PartyNameWithoutCode();

  PartyNameWithoutCode(const PartyNameWithoutCode& from);
  PartyNameWithoutCode(PartyNameWithoutCode&& from) noexcept
    : PartyNameWithoutCode() {
    *this = ::std::move(from);
  }

  inline PartyNameWithoutCode& operator=(const PartyNameWithoutCode& from) {
    CopyFrom(from);
    return *this;
  }
  inline PartyNameWithoutCode& operator=(PartyNameWithoutCode&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PartyNameWithoutCode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PartyNameWithoutCode* internal_default_instance() {
    return reinterpret_cast<const PartyNameWithoutCode*>(
               &_PartyNameWithoutCode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    90;

  friend void swap(PartyNameWithoutCode& a, PartyNameWithoutCode& b) {
    a.Swap(&b);
  }
  inline void Swap(PartyNameWithoutCode* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PartyNameWithoutCode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PartyNameWithoutCode* New() const final {
    return CreateMaybeMessage<PartyNameWithoutCode>(nullptr);
  }

  PartyNameWithoutCode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PartyNameWithoutCode>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PartyNameWithoutCode& from);
  void MergeFrom(const PartyNameWithoutCode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PartyNameWithoutCode* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.PartyNameWithoutCode";
  }
  protected:
  explicit PartyNameWithoutCode(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAbbreviatedNameFieldNumber = 1,
    kFullNameFieldNumber = 2,
    kFullNameAsciiTranscribedFieldNumber = 3,
    kFullNameIndexedFieldNumber = 4,
    kKeyNameFieldNumber = 5,
    kNamesAfterKeyNameFieldNumber = 6,
    kNamesBeforeKeyNameFieldNumber = 7,
  };
  // optional string abbreviated_name = 1;
  bool has_abbreviated_name() const;
  private:
  bool _internal_has_abbreviated_name() const;
  public:
  void clear_abbreviated_name();
  const std::string& abbreviated_name() const;
  void set_abbreviated_name(const std::string& value);
  void set_abbreviated_name(std::string&& value);
  void set_abbreviated_name(const char* value);
  void set_abbreviated_name(const char* value, size_t size);
  std::string* mutable_abbreviated_name();
  std::string* release_abbreviated_name();
  void set_allocated_abbreviated_name(std::string* abbreviated_name);
  private:
  const std::string& _internal_abbreviated_name() const;
  void _internal_set_abbreviated_name(const std::string& value);
  std::string* _internal_mutable_abbreviated_name();
  public:

  // optional string full_name = 2;
  bool has_full_name() const;
  private:
  bool _internal_has_full_name() const;
  public:
  void clear_full_name();
  const std::string& full_name() const;
  void set_full_name(const std::string& value);
  void set_full_name(std::string&& value);
  void set_full_name(const char* value);
  void set_full_name(const char* value, size_t size);
  std::string* mutable_full_name();
  std::string* release_full_name();
  void set_allocated_full_name(std::string* full_name);
  private:
  const std::string& _internal_full_name() const;
  void _internal_set_full_name(const std::string& value);
  std::string* _internal_mutable_full_name();
  public:

  // optional string full_name_ascii_transcribed = 3;
  bool has_full_name_ascii_transcribed() const;
  private:
  bool _internal_has_full_name_ascii_transcribed() const;
  public:
  void clear_full_name_ascii_transcribed();
  const std::string& full_name_ascii_transcribed() const;
  void set_full_name_ascii_transcribed(const std::string& value);
  void set_full_name_ascii_transcribed(std::string&& value);
  void set_full_name_ascii_transcribed(const char* value);
  void set_full_name_ascii_transcribed(const char* value, size_t size);
  std::string* mutable_full_name_ascii_transcribed();
  std::string* release_full_name_ascii_transcribed();
  void set_allocated_full_name_ascii_transcribed(std::string* full_name_ascii_transcribed);
  private:
  const std::string& _internal_full_name_ascii_transcribed() const;
  void _internal_set_full_name_ascii_transcribed(const std::string& value);
  std::string* _internal_mutable_full_name_ascii_transcribed();
  public:

  // optional string full_name_indexed = 4;
  bool has_full_name_indexed() const;
  private:
  bool _internal_has_full_name_indexed() const;
  public:
  void clear_full_name_indexed();
  const std::string& full_name_indexed() const;
  void set_full_name_indexed(const std::string& value);
  void set_full_name_indexed(std::string&& value);
  void set_full_name_indexed(const char* value);
  void set_full_name_indexed(const char* value, size_t size);
  std::string* mutable_full_name_indexed();
  std::string* release_full_name_indexed();
  void set_allocated_full_name_indexed(std::string* full_name_indexed);
  private:
  const std::string& _internal_full_name_indexed() const;
  void _internal_set_full_name_indexed(const std::string& value);
  std::string* _internal_mutable_full_name_indexed();
  public:

  // optional string key_name = 5;
  bool has_key_name() const;
  private:
  bool _internal_has_key_name() const;
  public:
  void clear_key_name();
  const std::string& key_name() const;
  void set_key_name(const std::string& value);
  void set_key_name(std::string&& value);
  void set_key_name(const char* value);
  void set_key_name(const char* value, size_t size);
  std::string* mutable_key_name();
  std::string* release_key_name();
  void set_allocated_key_name(std::string* key_name);
  private:
  const std::string& _internal_key_name() const;
  void _internal_set_key_name(const std::string& value);
  std::string* _internal_mutable_key_name();
  public:

  // optional string names_after_key_name = 6;
  bool has_names_after_key_name() const;
  private:
  bool _internal_has_names_after_key_name() const;
  public:
  void clear_names_after_key_name();
  const std::string& names_after_key_name() const;
  void set_names_after_key_name(const std::string& value);
  void set_names_after_key_name(std::string&& value);
  void set_names_after_key_name(const char* value);
  void set_names_after_key_name(const char* value, size_t size);
  std::string* mutable_names_after_key_name();
  std::string* release_names_after_key_name();
  void set_allocated_names_after_key_name(std::string* names_after_key_name);
  private:
  const std::string& _internal_names_after_key_name() const;
  void _internal_set_names_after_key_name(const std::string& value);
  std::string* _internal_mutable_names_after_key_name();
  public:

  // optional string names_before_key_name = 7;
  bool has_names_before_key_name() const;
  private:
  bool _internal_has_names_before_key_name() const;
  public:
  void clear_names_before_key_name();
  const std::string& names_before_key_name() const;
  void set_names_before_key_name(const std::string& value);
  void set_names_before_key_name(std::string&& value);
  void set_names_before_key_name(const char* value);
  void set_names_before_key_name(const char* value, size_t size);
  std::string* mutable_names_before_key_name();
  std::string* release_names_before_key_name();
  void set_allocated_names_before_key_name(std::string* names_before_key_name);
  private:
  const std::string& _internal_names_before_key_name() const;
  void _internal_set_names_before_key_name(const std::string& value);
  std::string* _internal_mutable_names_before_key_name();
  public:

  // @@protoc_insertion_point(class_scope:mead101.mead.PartyNameWithoutCode)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr abbreviated_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr full_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr full_name_ascii_transcribed_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr full_name_indexed_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr names_after_key_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr names_before_key_name_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class PartyWithNames PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.PartyWithNames) */ {
 public:
  inline PartyWithNames() : PartyWithNames(nullptr) {}
  virtual ~PartyWithNames();

  PartyWithNames(const PartyWithNames& from);
  PartyWithNames(PartyWithNames&& from) noexcept
    : PartyWithNames() {
    *this = ::std::move(from);
  }

  inline PartyWithNames& operator=(const PartyWithNames& from) {
    CopyFrom(from);
    return *this;
  }
  inline PartyWithNames& operator=(PartyWithNames&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PartyWithNames& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PartyWithNames* internal_default_instance() {
    return reinterpret_cast<const PartyWithNames*>(
               &_PartyWithNames_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    91;

  friend void swap(PartyWithNames& a, PartyWithNames& b) {
    a.Swap(&b);
  }
  inline void Swap(PartyWithNames* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PartyWithNames* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PartyWithNames* New() const final {
    return CreateMaybeMessage<PartyWithNames>(nullptr);
  }

  PartyWithNames* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PartyWithNames>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PartyWithNames& from);
  void MergeFrom(const PartyWithNames& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PartyWithNames* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.PartyWithNames";
  }
  protected:
  explicit PartyWithNames(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 5,
    kProprietaryIdFieldNumber = 6,
    kDPIDFieldNumber = 1,
    kIPNFieldNumber = 2,
    kISNIFieldNumber = 3,
    kIpiNameNumberFieldNumber = 4,
  };
  // repeated .mead101.mead.PartyNameWithTerritory name = 5;
  int name_size() const;
  private:
  int _internal_name_size() const;
  public:
  void clear_name();
  ::mead101::mead::PartyNameWithTerritory* mutable_name(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::PartyNameWithTerritory >*
      mutable_name();
  private:
  const ::mead101::mead::PartyNameWithTerritory& _internal_name(int index) const;
  ::mead101::mead::PartyNameWithTerritory* _internal_add_name();
  public:
  const ::mead101::mead::PartyNameWithTerritory& name(int index) const;
  ::mead101::mead::PartyNameWithTerritory* add_name();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::PartyNameWithTerritory >&
      name() const;

  // repeated .mead101.mead.ProprietaryId proprietary_id = 6;
  int proprietary_id_size() const;
  private:
  int _internal_proprietary_id_size() const;
  public:
  void clear_proprietary_id();
  ::mead101::mead::ProprietaryId* mutable_proprietary_id(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::ProprietaryId >*
      mutable_proprietary_id();
  private:
  const ::mead101::mead::ProprietaryId& _internal_proprietary_id(int index) const;
  ::mead101::mead::ProprietaryId* _internal_add_proprietary_id();
  public:
  const ::mead101::mead::ProprietaryId& proprietary_id(int index) const;
  ::mead101::mead::ProprietaryId* add_proprietary_id();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::ProprietaryId >&
      proprietary_id() const;

  // optional string d_p_i_d = 1;
  bool has_d_p_i_d() const;
  private:
  bool _internal_has_d_p_i_d() const;
  public:
  void clear_d_p_i_d();
  const std::string& d_p_i_d() const;
  void set_d_p_i_d(const std::string& value);
  void set_d_p_i_d(std::string&& value);
  void set_d_p_i_d(const char* value);
  void set_d_p_i_d(const char* value, size_t size);
  std::string* mutable_d_p_i_d();
  std::string* release_d_p_i_d();
  void set_allocated_d_p_i_d(std::string* d_p_i_d);
  private:
  const std::string& _internal_d_p_i_d() const;
  void _internal_set_d_p_i_d(const std::string& value);
  std::string* _internal_mutable_d_p_i_d();
  public:

  // optional string i_p_n = 2;
  bool has_i_p_n() const;
  private:
  bool _internal_has_i_p_n() const;
  public:
  void clear_i_p_n();
  const std::string& i_p_n() const;
  void set_i_p_n(const std::string& value);
  void set_i_p_n(std::string&& value);
  void set_i_p_n(const char* value);
  void set_i_p_n(const char* value, size_t size);
  std::string* mutable_i_p_n();
  std::string* release_i_p_n();
  void set_allocated_i_p_n(std::string* i_p_n);
  private:
  const std::string& _internal_i_p_n() const;
  void _internal_set_i_p_n(const std::string& value);
  std::string* _internal_mutable_i_p_n();
  public:

  // optional string i_s_n_i = 3;
  bool has_i_s_n_i() const;
  private:
  bool _internal_has_i_s_n_i() const;
  public:
  void clear_i_s_n_i();
  const std::string& i_s_n_i() const;
  void set_i_s_n_i(const std::string& value);
  void set_i_s_n_i(std::string&& value);
  void set_i_s_n_i(const char* value);
  void set_i_s_n_i(const char* value, size_t size);
  std::string* mutable_i_s_n_i();
  std::string* release_i_s_n_i();
  void set_allocated_i_s_n_i(std::string* i_s_n_i);
  private:
  const std::string& _internal_i_s_n_i() const;
  void _internal_set_i_s_n_i(const std::string& value);
  std::string* _internal_mutable_i_s_n_i();
  public:

  // optional string ipi_name_number = 4;
  bool has_ipi_name_number() const;
  private:
  bool _internal_has_ipi_name_number() const;
  public:
  void clear_ipi_name_number();
  const std::string& ipi_name_number() const;
  void set_ipi_name_number(const std::string& value);
  void set_ipi_name_number(std::string&& value);
  void set_ipi_name_number(const char* value);
  void set_ipi_name_number(const char* value, size_t size);
  std::string* mutable_ipi_name_number();
  std::string* release_ipi_name_number();
  void set_allocated_ipi_name_number(std::string* ipi_name_number);
  private:
  const std::string& _internal_ipi_name_number() const;
  void _internal_set_ipi_name_number(const std::string& value);
  std::string* _internal_mutable_ipi_name_number();
  public:

  // @@protoc_insertion_point(class_scope:mead101.mead.PartyWithNames)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::PartyNameWithTerritory > name_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::ProprietaryId > proprietary_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr d_p_i_d_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr i_p_n_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr i_s_n_i_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ipi_name_number_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class PartyWithRole PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.PartyWithRole) */ {
 public:
  inline PartyWithRole() : PartyWithRole(nullptr) {}
  virtual ~PartyWithRole();

  PartyWithRole(const PartyWithRole& from);
  PartyWithRole(PartyWithRole&& from) noexcept
    : PartyWithRole() {
    *this = ::std::move(from);
  }

  inline PartyWithRole& operator=(const PartyWithRole& from) {
    CopyFrom(from);
    return *this;
  }
  inline PartyWithRole& operator=(PartyWithRole&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PartyWithRole& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PartyWithRole* internal_default_instance() {
    return reinterpret_cast<const PartyWithRole*>(
               &_PartyWithRole_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    92;

  friend void swap(PartyWithRole& a, PartyWithRole& b) {
    a.Swap(&b);
  }
  inline void Swap(PartyWithRole* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PartyWithRole* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PartyWithRole* New() const final {
    return CreateMaybeMessage<PartyWithRole>(nullptr);
  }

  PartyWithRole* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PartyWithRole>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PartyWithRole& from);
  void MergeFrom(const PartyWithRole& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PartyWithRole* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.PartyWithRole";
  }
  protected:
  explicit PartyWithRole(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProprietaryIdFieldNumber = 6,
    kDPIDFieldNumber = 1,
    kIPNFieldNumber = 2,
    kISNIFieldNumber = 3,
    kIpiNameNumberFieldNumber = 4,
    kPartyNameFieldNumber = 5,
    kRoleFieldNumber = 7,
  };
  // repeated .mead101.mead.ProprietaryId proprietary_id = 6;
  int proprietary_id_size() const;
  private:
  int _internal_proprietary_id_size() const;
  public:
  void clear_proprietary_id();
  ::mead101::mead::ProprietaryId* mutable_proprietary_id(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::ProprietaryId >*
      mutable_proprietary_id();
  private:
  const ::mead101::mead::ProprietaryId& _internal_proprietary_id(int index) const;
  ::mead101::mead::ProprietaryId* _internal_add_proprietary_id();
  public:
  const ::mead101::mead::ProprietaryId& proprietary_id(int index) const;
  ::mead101::mead::ProprietaryId* add_proprietary_id();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::ProprietaryId >&
      proprietary_id() const;

  // optional string d_p_i_d = 1;
  bool has_d_p_i_d() const;
  private:
  bool _internal_has_d_p_i_d() const;
  public:
  void clear_d_p_i_d();
  const std::string& d_p_i_d() const;
  void set_d_p_i_d(const std::string& value);
  void set_d_p_i_d(std::string&& value);
  void set_d_p_i_d(const char* value);
  void set_d_p_i_d(const char* value, size_t size);
  std::string* mutable_d_p_i_d();
  std::string* release_d_p_i_d();
  void set_allocated_d_p_i_d(std::string* d_p_i_d);
  private:
  const std::string& _internal_d_p_i_d() const;
  void _internal_set_d_p_i_d(const std::string& value);
  std::string* _internal_mutable_d_p_i_d();
  public:

  // optional string i_p_n = 2;
  bool has_i_p_n() const;
  private:
  bool _internal_has_i_p_n() const;
  public:
  void clear_i_p_n();
  const std::string& i_p_n() const;
  void set_i_p_n(const std::string& value);
  void set_i_p_n(std::string&& value);
  void set_i_p_n(const char* value);
  void set_i_p_n(const char* value, size_t size);
  std::string* mutable_i_p_n();
  std::string* release_i_p_n();
  void set_allocated_i_p_n(std::string* i_p_n);
  private:
  const std::string& _internal_i_p_n() const;
  void _internal_set_i_p_n(const std::string& value);
  std::string* _internal_mutable_i_p_n();
  public:

  // optional string i_s_n_i = 3;
  bool has_i_s_n_i() const;
  private:
  bool _internal_has_i_s_n_i() const;
  public:
  void clear_i_s_n_i();
  const std::string& i_s_n_i() const;
  void set_i_s_n_i(const std::string& value);
  void set_i_s_n_i(std::string&& value);
  void set_i_s_n_i(const char* value);
  void set_i_s_n_i(const char* value, size_t size);
  std::string* mutable_i_s_n_i();
  std::string* release_i_s_n_i();
  void set_allocated_i_s_n_i(std::string* i_s_n_i);
  private:
  const std::string& _internal_i_s_n_i() const;
  void _internal_set_i_s_n_i(const std::string& value);
  std::string* _internal_mutable_i_s_n_i();
  public:

  // optional string ipi_name_number = 4;
  bool has_ipi_name_number() const;
  private:
  bool _internal_has_ipi_name_number() const;
  public:
  void clear_ipi_name_number();
  const std::string& ipi_name_number() const;
  void set_ipi_name_number(const std::string& value);
  void set_ipi_name_number(std::string&& value);
  void set_ipi_name_number(const char* value);
  void set_ipi_name_number(const char* value, size_t size);
  std::string* mutable_ipi_name_number();
  std::string* release_ipi_name_number();
  void set_allocated_ipi_name_number(std::string* ipi_name_number);
  private:
  const std::string& _internal_ipi_name_number() const;
  void _internal_set_ipi_name_number(const std::string& value);
  std::string* _internal_mutable_ipi_name_number();
  public:

  // optional .mead101.mead.PartyNameWithPronunciation party_name = 5;
  bool has_party_name() const;
  private:
  bool _internal_has_party_name() const;
  public:
  void clear_party_name();
  const ::mead101::mead::PartyNameWithPronunciation& party_name() const;
  ::mead101::mead::PartyNameWithPronunciation* release_party_name();
  ::mead101::mead::PartyNameWithPronunciation* mutable_party_name();
  void set_allocated_party_name(::mead101::mead::PartyNameWithPronunciation* party_name);
  private:
  const ::mead101::mead::PartyNameWithPronunciation& _internal_party_name() const;
  ::mead101::mead::PartyNameWithPronunciation* _internal_mutable_party_name();
  public:
  void unsafe_arena_set_allocated_party_name(
      ::mead101::mead::PartyNameWithPronunciation* party_name);
  ::mead101::mead::PartyNameWithPronunciation* unsafe_arena_release_party_name();

  // optional .mead101.mead.ResourceContributorRole role = 7;
  bool has_role() const;
  private:
  bool _internal_has_role() const;
  public:
  void clear_role();
  const ::mead101::mead::ResourceContributorRole& role() const;
  ::mead101::mead::ResourceContributorRole* release_role();
  ::mead101::mead::ResourceContributorRole* mutable_role();
  void set_allocated_role(::mead101::mead::ResourceContributorRole* role);
  private:
  const ::mead101::mead::ResourceContributorRole& _internal_role() const;
  ::mead101::mead::ResourceContributorRole* _internal_mutable_role();
  public:
  void unsafe_arena_set_allocated_role(
      ::mead101::mead::ResourceContributorRole* role);
  ::mead101::mead::ResourceContributorRole* unsafe_arena_release_role();

  // @@protoc_insertion_point(class_scope:mead101.mead.PartyWithRole)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::ProprietaryId > proprietary_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr d_p_i_d_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr i_p_n_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr i_s_n_i_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ipi_name_number_;
  ::mead101::mead::PartyNameWithPronunciation* party_name_;
  ::mead101::mead::ResourceContributorRole* role_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class Period PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.Period) */ {
 public:
  inline Period() : Period(nullptr) {}
  virtual ~Period();

  Period(const Period& from);
  Period(Period&& from) noexcept
    : Period() {
    *this = ::std::move(from);
  }

  inline Period& operator=(const Period& from) {
    CopyFrom(from);
    return *this;
  }
  inline Period& operator=(Period&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Period& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Period* internal_default_instance() {
    return reinterpret_cast<const Period*>(
               &_Period_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    93;

  friend void swap(Period& a, Period& b) {
    a.Swap(&b);
  }
  inline void Swap(Period* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Period* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Period* New() const final {
    return CreateMaybeMessage<Period>(nullptr);
  }

  Period* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Period>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Period& from);
  void MergeFrom(const Period& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Period* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.Period";
  }
  protected:
  explicit Period(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEndDateFieldNumber = 1,
    kEndDateTimeFieldNumber = 2,
    kStartDateFieldNumber = 3,
    kStartDateTimeFieldNumber = 4,
  };
  // optional .mead101.mead.EventDate end_date = 1;
  bool has_end_date() const;
  private:
  bool _internal_has_end_date() const;
  public:
  void clear_end_date();
  const ::mead101::mead::EventDate& end_date() const;
  ::mead101::mead::EventDate* release_end_date();
  ::mead101::mead::EventDate* mutable_end_date();
  void set_allocated_end_date(::mead101::mead::EventDate* end_date);
  private:
  const ::mead101::mead::EventDate& _internal_end_date() const;
  ::mead101::mead::EventDate* _internal_mutable_end_date();
  public:
  void unsafe_arena_set_allocated_end_date(
      ::mead101::mead::EventDate* end_date);
  ::mead101::mead::EventDate* unsafe_arena_release_end_date();

  // optional .mead101.mead.EventDateTime end_date_time = 2;
  bool has_end_date_time() const;
  private:
  bool _internal_has_end_date_time() const;
  public:
  void clear_end_date_time();
  const ::mead101::mead::EventDateTime& end_date_time() const;
  ::mead101::mead::EventDateTime* release_end_date_time();
  ::mead101::mead::EventDateTime* mutable_end_date_time();
  void set_allocated_end_date_time(::mead101::mead::EventDateTime* end_date_time);
  private:
  const ::mead101::mead::EventDateTime& _internal_end_date_time() const;
  ::mead101::mead::EventDateTime* _internal_mutable_end_date_time();
  public:
  void unsafe_arena_set_allocated_end_date_time(
      ::mead101::mead::EventDateTime* end_date_time);
  ::mead101::mead::EventDateTime* unsafe_arena_release_end_date_time();

  // optional .mead101.mead.EventDate start_date = 3;
  bool has_start_date() const;
  private:
  bool _internal_has_start_date() const;
  public:
  void clear_start_date();
  const ::mead101::mead::EventDate& start_date() const;
  ::mead101::mead::EventDate* release_start_date();
  ::mead101::mead::EventDate* mutable_start_date();
  void set_allocated_start_date(::mead101::mead::EventDate* start_date);
  private:
  const ::mead101::mead::EventDate& _internal_start_date() const;
  ::mead101::mead::EventDate* _internal_mutable_start_date();
  public:
  void unsafe_arena_set_allocated_start_date(
      ::mead101::mead::EventDate* start_date);
  ::mead101::mead::EventDate* unsafe_arena_release_start_date();

  // optional .mead101.mead.EventDateTime start_date_time = 4;
  bool has_start_date_time() const;
  private:
  bool _internal_has_start_date_time() const;
  public:
  void clear_start_date_time();
  const ::mead101::mead::EventDateTime& start_date_time() const;
  ::mead101::mead::EventDateTime* release_start_date_time();
  ::mead101::mead::EventDateTime* mutable_start_date_time();
  void set_allocated_start_date_time(::mead101::mead::EventDateTime* start_date_time);
  private:
  const ::mead101::mead::EventDateTime& _internal_start_date_time() const;
  ::mead101::mead::EventDateTime* _internal_mutable_start_date_time();
  public:
  void unsafe_arena_set_allocated_start_date_time(
      ::mead101::mead::EventDateTime* start_date_time);
  ::mead101::mead::EventDateTime* unsafe_arena_release_start_date_time();

  // @@protoc_insertion_point(class_scope:mead101.mead.Period)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::mead101::mead::EventDate* end_date_;
  ::mead101::mead::EventDateTime* end_date_time_;
  ::mead101::mead::EventDate* start_date_;
  ::mead101::mead::EventDateTime* start_date_time_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class PeriodValue PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.PeriodValue) */ {
 public:
  inline PeriodValue() : PeriodValue(nullptr) {}
  virtual ~PeriodValue();

  PeriodValue(const PeriodValue& from);
  PeriodValue(PeriodValue&& from) noexcept
    : PeriodValue() {
    *this = ::std::move(from);
  }

  inline PeriodValue& operator=(const PeriodValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline PeriodValue& operator=(PeriodValue&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PeriodValue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PeriodValue* internal_default_instance() {
    return reinterpret_cast<const PeriodValue*>(
               &_PeriodValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    94;

  friend void swap(PeriodValue& a, PeriodValue& b) {
    a.Swap(&b);
  }
  inline void Swap(PeriodValue* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PeriodValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PeriodValue* New() const final {
    return CreateMaybeMessage<PeriodValue>(nullptr);
  }

  PeriodValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PeriodValue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PeriodValue& from);
  void MergeFrom(const PeriodValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PeriodValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.PeriodValue";
  }
  protected:
  explicit PeriodValue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNamespaceFieldNumber = 1,
    kUserDefinedValueFieldNumber = 2,
    kExtValueFieldNumber = 3,
  };
  // optional string namespace = 1;
  bool has_namespace_() const;
  private:
  bool _internal_has_namespace_() const;
  public:
  void clear_namespace_();
  const std::string& namespace_() const;
  void set_namespace_(const std::string& value);
  void set_namespace_(std::string&& value);
  void set_namespace_(const char* value);
  void set_namespace_(const char* value, size_t size);
  std::string* mutable_namespace_();
  std::string* release_namespace_();
  void set_allocated_namespace_(std::string* namespace_);
  private:
  const std::string& _internal_namespace_() const;
  void _internal_set_namespace_(const std::string& value);
  std::string* _internal_mutable_namespace_();
  public:

  // optional string user_defined_value = 2;
  bool has_user_defined_value() const;
  private:
  bool _internal_has_user_defined_value() const;
  public:
  void clear_user_defined_value();
  const std::string& user_defined_value() const;
  void set_user_defined_value(const std::string& value);
  void set_user_defined_value(std::string&& value);
  void set_user_defined_value(const char* value);
  void set_user_defined_value(const char* value, size_t size);
  std::string* mutable_user_defined_value();
  std::string* release_user_defined_value();
  void set_allocated_user_defined_value(std::string* user_defined_value);
  private:
  const std::string& _internal_user_defined_value() const;
  void _internal_set_user_defined_value(const std::string& value);
  std::string* _internal_mutable_user_defined_value();
  public:

  // optional .mead101.avs.Period ext_value = 3;
  bool has_ext_value() const;
  private:
  bool _internal_has_ext_value() const;
  public:
  void clear_ext_value();
  const ::mead101::avs::Period& ext_value() const;
  ::mead101::avs::Period* release_ext_value();
  ::mead101::avs::Period* mutable_ext_value();
  void set_allocated_ext_value(::mead101::avs::Period* ext_value);
  private:
  const ::mead101::avs::Period& _internal_ext_value() const;
  ::mead101::avs::Period* _internal_mutable_ext_value();
  public:
  void unsafe_arena_set_allocated_ext_value(
      ::mead101::avs::Period* ext_value);
  ::mead101::avs::Period* unsafe_arena_release_ext_value();

  // @@protoc_insertion_point(class_scope:mead101.mead.PeriodValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr namespace__;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_defined_value_;
  ::mead101::avs::Period* ext_value_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class PeriodWithTime PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.PeriodWithTime) */ {
 public:
  inline PeriodWithTime() : PeriodWithTime(nullptr) {}
  virtual ~PeriodWithTime();

  PeriodWithTime(const PeriodWithTime& from);
  PeriodWithTime(PeriodWithTime&& from) noexcept
    : PeriodWithTime() {
    *this = ::std::move(from);
  }

  inline PeriodWithTime& operator=(const PeriodWithTime& from) {
    CopyFrom(from);
    return *this;
  }
  inline PeriodWithTime& operator=(PeriodWithTime&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PeriodWithTime& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PeriodWithTime* internal_default_instance() {
    return reinterpret_cast<const PeriodWithTime*>(
               &_PeriodWithTime_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    95;

  friend void swap(PeriodWithTime& a, PeriodWithTime& b) {
    a.Swap(&b);
  }
  inline void Swap(PeriodWithTime* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PeriodWithTime* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PeriodWithTime* New() const final {
    return CreateMaybeMessage<PeriodWithTime>(nullptr);
  }

  PeriodWithTime* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PeriodWithTime>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PeriodWithTime& from);
  void MergeFrom(const PeriodWithTime& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PeriodWithTime* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.PeriodWithTime";
  }
  protected:
  explicit PeriodWithTime(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEndDateTimeFieldNumber = 1,
    kStartDateTimeFieldNumber = 2,
  };
  // optional string end_date_time = 1;
  bool has_end_date_time() const;
  private:
  bool _internal_has_end_date_time() const;
  public:
  void clear_end_date_time();
  const std::string& end_date_time() const;
  void set_end_date_time(const std::string& value);
  void set_end_date_time(std::string&& value);
  void set_end_date_time(const char* value);
  void set_end_date_time(const char* value, size_t size);
  std::string* mutable_end_date_time();
  std::string* release_end_date_time();
  void set_allocated_end_date_time(std::string* end_date_time);
  private:
  const std::string& _internal_end_date_time() const;
  void _internal_set_end_date_time(const std::string& value);
  std::string* _internal_mutable_end_date_time();
  public:

  // optional string start_date_time = 2;
  bool has_start_date_time() const;
  private:
  bool _internal_has_start_date_time() const;
  public:
  void clear_start_date_time();
  const std::string& start_date_time() const;
  void set_start_date_time(const std::string& value);
  void set_start_date_time(std::string&& value);
  void set_start_date_time(const char* value);
  void set_start_date_time(const char* value, size_t size);
  std::string* mutable_start_date_time();
  std::string* release_start_date_time();
  void set_allocated_start_date_time(std::string* start_date_time);
  private:
  const std::string& _internal_start_date_time() const;
  void _internal_set_start_date_time(const std::string& value);
  std::string* _internal_mutable_start_date_time();
  public:

  // @@protoc_insertion_point(class_scope:mead101.mead.PeriodWithTime)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr end_date_time_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr start_date_time_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class Person PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.Person) */ {
 public:
  inline Person() : Person(nullptr) {}
  virtual ~Person();

  Person(const Person& from);
  Person(Person&& from) noexcept
    : Person() {
    *this = ::std::move(from);
  }

  inline Person& operator=(const Person& from) {
    CopyFrom(from);
    return *this;
  }
  inline Person& operator=(Person&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Person& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Person* internal_default_instance() {
    return reinterpret_cast<const Person*>(
               &_Person_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    96;

  friend void swap(Person& a, Person& b) {
    a.Swap(&b);
  }
  inline void Swap(Person* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Person* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Person* New() const final {
    return CreateMaybeMessage<Person>(nullptr);
  }

  Person* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Person>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Person& from);
  void MergeFrom(const Person& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Person* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.Person";
  }
  protected:
  explicit Person(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnyAttributeValueFieldNumber = 1,
    kAnyValueFieldNumber = 2,
    kEmailFieldNumber = 3,
    kNameFieldNumber = 4,
    kUriFieldNumber = 5,
  };
  // repeated string any_attribute_value = 1;
  int any_attribute_value_size() const;
  private:
  int _internal_any_attribute_value_size() const;
  public:
  void clear_any_attribute_value();
  const std::string& any_attribute_value(int index) const;
  std::string* mutable_any_attribute_value(int index);
  void set_any_attribute_value(int index, const std::string& value);
  void set_any_attribute_value(int index, std::string&& value);
  void set_any_attribute_value(int index, const char* value);
  void set_any_attribute_value(int index, const char* value, size_t size);
  std::string* add_any_attribute_value();
  void add_any_attribute_value(const std::string& value);
  void add_any_attribute_value(std::string&& value);
  void add_any_attribute_value(const char* value);
  void add_any_attribute_value(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& any_attribute_value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_any_attribute_value();
  private:
  const std::string& _internal_any_attribute_value(int index) const;
  std::string* _internal_add_any_attribute_value();
  public:

  // optional string any_value = 2;
  bool has_any_value() const;
  private:
  bool _internal_has_any_value() const;
  public:
  void clear_any_value();
  const std::string& any_value() const;
  void set_any_value(const std::string& value);
  void set_any_value(std::string&& value);
  void set_any_value(const char* value);
  void set_any_value(const char* value, size_t size);
  std::string* mutable_any_value();
  std::string* release_any_value();
  void set_allocated_any_value(std::string* any_value);
  private:
  const std::string& _internal_any_value() const;
  void _internal_set_any_value(const std::string& value);
  std::string* _internal_mutable_any_value();
  public:

  // optional string email = 3;
  bool has_email() const;
  private:
  bool _internal_has_email() const;
  public:
  void clear_email();
  const std::string& email() const;
  void set_email(const std::string& value);
  void set_email(std::string&& value);
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  std::string* mutable_email();
  std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // optional string name = 4;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional .mead101.mead.URI uri = 5;
  bool has_uri() const;
  private:
  bool _internal_has_uri() const;
  public:
  void clear_uri();
  const ::mead101::mead::URI& uri() const;
  ::mead101::mead::URI* release_uri();
  ::mead101::mead::URI* mutable_uri();
  void set_allocated_uri(::mead101::mead::URI* uri);
  private:
  const ::mead101::mead::URI& _internal_uri() const;
  ::mead101::mead::URI* _internal_mutable_uri();
  public:
  void unsafe_arena_set_allocated_uri(
      ::mead101::mead::URI* uri);
  ::mead101::mead::URI* unsafe_arena_release_uri();

  // @@protoc_insertion_point(class_scope:mead101.mead.Person)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> any_attribute_value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr any_value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::mead101::mead::URI* uri_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class Pronunciation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.Pronunciation) */ {
 public:
  inline Pronunciation() : Pronunciation(nullptr) {}
  virtual ~Pronunciation();

  Pronunciation(const Pronunciation& from);
  Pronunciation(Pronunciation&& from) noexcept
    : Pronunciation() {
    *this = ::std::move(from);
  }

  inline Pronunciation& operator=(const Pronunciation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pronunciation& operator=(Pronunciation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Pronunciation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Pronunciation* internal_default_instance() {
    return reinterpret_cast<const Pronunciation*>(
               &_Pronunciation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    97;

  friend void swap(Pronunciation& a, Pronunciation& b) {
    a.Swap(&b);
  }
  inline void Swap(Pronunciation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Pronunciation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Pronunciation* New() const final {
    return CreateMaybeMessage<Pronunciation>(nullptr);
  }

  Pronunciation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Pronunciation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Pronunciation& from);
  void MergeFrom(const Pronunciation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pronunciation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.Pronunciation";
  }
  protected:
  explicit Pronunciation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEncodingNamespaceFieldNumber = 1,
    kEncodingUserDefinedValueFieldNumber = 3,
    kLanguageCodeFieldNumber = 5,
    kExtValueFieldNumber = 6,
    kEncodingTypeFieldNumber = 2,
    kIsCanonicalFieldNumber = 4,
  };
  // optional string encoding_namespace = 1;
  bool has_encoding_namespace() const;
  private:
  bool _internal_has_encoding_namespace() const;
  public:
  void clear_encoding_namespace();
  const std::string& encoding_namespace() const;
  void set_encoding_namespace(const std::string& value);
  void set_encoding_namespace(std::string&& value);
  void set_encoding_namespace(const char* value);
  void set_encoding_namespace(const char* value, size_t size);
  std::string* mutable_encoding_namespace();
  std::string* release_encoding_namespace();
  void set_allocated_encoding_namespace(std::string* encoding_namespace);
  private:
  const std::string& _internal_encoding_namespace() const;
  void _internal_set_encoding_namespace(const std::string& value);
  std::string* _internal_mutable_encoding_namespace();
  public:

  // optional string encoding_user_defined_value = 3;
  bool has_encoding_user_defined_value() const;
  private:
  bool _internal_has_encoding_user_defined_value() const;
  public:
  void clear_encoding_user_defined_value();
  const std::string& encoding_user_defined_value() const;
  void set_encoding_user_defined_value(const std::string& value);
  void set_encoding_user_defined_value(std::string&& value);
  void set_encoding_user_defined_value(const char* value);
  void set_encoding_user_defined_value(const char* value, size_t size);
  std::string* mutable_encoding_user_defined_value();
  std::string* release_encoding_user_defined_value();
  void set_allocated_encoding_user_defined_value(std::string* encoding_user_defined_value);
  private:
  const std::string& _internal_encoding_user_defined_value() const;
  void _internal_set_encoding_user_defined_value(const std::string& value);
  std::string* _internal_mutable_encoding_user_defined_value();
  public:

  // optional string language_code = 5;
  bool has_language_code() const;
  private:
  bool _internal_has_language_code() const;
  public:
  void clear_language_code();
  const std::string& language_code() const;
  void set_language_code(const std::string& value);
  void set_language_code(std::string&& value);
  void set_language_code(const char* value);
  void set_language_code(const char* value, size_t size);
  std::string* mutable_language_code();
  std::string* release_language_code();
  void set_allocated_language_code(std::string* language_code);
  private:
  const std::string& _internal_language_code() const;
  void _internal_set_language_code(const std::string& value);
  std::string* _internal_mutable_language_code();
  public:

  // optional string ext_value = 6;
  bool has_ext_value() const;
  private:
  bool _internal_has_ext_value() const;
  public:
  void clear_ext_value();
  const std::string& ext_value() const;
  void set_ext_value(const std::string& value);
  void set_ext_value(std::string&& value);
  void set_ext_value(const char* value);
  void set_ext_value(const char* value, size_t size);
  std::string* mutable_ext_value();
  std::string* release_ext_value();
  void set_allocated_ext_value(std::string* ext_value);
  private:
  const std::string& _internal_ext_value() const;
  void _internal_set_ext_value(const std::string& value);
  std::string* _internal_mutable_ext_value();
  public:

  // optional .mead101.avs.EncodingType encoding_type = 2;
  bool has_encoding_type() const;
  private:
  bool _internal_has_encoding_type() const;
  public:
  void clear_encoding_type();
  const ::mead101::avs::EncodingType& encoding_type() const;
  ::mead101::avs::EncodingType* release_encoding_type();
  ::mead101::avs::EncodingType* mutable_encoding_type();
  void set_allocated_encoding_type(::mead101::avs::EncodingType* encoding_type);
  private:
  const ::mead101::avs::EncodingType& _internal_encoding_type() const;
  ::mead101::avs::EncodingType* _internal_mutable_encoding_type();
  public:
  void unsafe_arena_set_allocated_encoding_type(
      ::mead101::avs::EncodingType* encoding_type);
  ::mead101::avs::EncodingType* unsafe_arena_release_encoding_type();

  // optional bool is_canonical = 4;
  bool has_is_canonical() const;
  private:
  bool _internal_has_is_canonical() const;
  public:
  void clear_is_canonical();
  bool is_canonical() const;
  void set_is_canonical(bool value);
  private:
  bool _internal_is_canonical() const;
  void _internal_set_is_canonical(bool value);
  public:

  // @@protoc_insertion_point(class_scope:mead101.mead.Pronunciation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr encoding_namespace_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr encoding_user_defined_value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ext_value_;
  ::mead101::avs::EncodingType* encoding_type_;
  bool is_canonical_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class ProprietaryId PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.ProprietaryId) */ {
 public:
  inline ProprietaryId() : ProprietaryId(nullptr) {}
  virtual ~ProprietaryId();

  ProprietaryId(const ProprietaryId& from);
  ProprietaryId(ProprietaryId&& from) noexcept
    : ProprietaryId() {
    *this = ::std::move(from);
  }

  inline ProprietaryId& operator=(const ProprietaryId& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProprietaryId& operator=(ProprietaryId&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProprietaryId& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProprietaryId* internal_default_instance() {
    return reinterpret_cast<const ProprietaryId*>(
               &_ProprietaryId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    98;

  friend void swap(ProprietaryId& a, ProprietaryId& b) {
    a.Swap(&b);
  }
  inline void Swap(ProprietaryId* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProprietaryId* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProprietaryId* New() const final {
    return CreateMaybeMessage<ProprietaryId>(nullptr);
  }

  ProprietaryId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProprietaryId>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProprietaryId& from);
  void MergeFrom(const ProprietaryId& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProprietaryId* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.ProprietaryId";
  }
  protected:
  explicit ProprietaryId(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNamespaceFieldNumber = 1,
    kExtValueFieldNumber = 2,
  };
  // optional string namespace = 1;
  bool has_namespace_() const;
  private:
  bool _internal_has_namespace_() const;
  public:
  void clear_namespace_();
  const std::string& namespace_() const;
  void set_namespace_(const std::string& value);
  void set_namespace_(std::string&& value);
  void set_namespace_(const char* value);
  void set_namespace_(const char* value, size_t size);
  std::string* mutable_namespace_();
  std::string* release_namespace_();
  void set_allocated_namespace_(std::string* namespace_);
  private:
  const std::string& _internal_namespace_() const;
  void _internal_set_namespace_(const std::string& value);
  std::string* _internal_mutable_namespace_();
  public:

  // optional string ext_value = 2;
  bool has_ext_value() const;
  private:
  bool _internal_has_ext_value() const;
  public:
  void clear_ext_value();
  const std::string& ext_value() const;
  void set_ext_value(const std::string& value);
  void set_ext_value(std::string&& value);
  void set_ext_value(const char* value);
  void set_ext_value(const char* value, size_t size);
  std::string* mutable_ext_value();
  std::string* release_ext_value();
  void set_allocated_ext_value(std::string* ext_value);
  private:
  const std::string& _internal_ext_value() const;
  void _internal_set_ext_value(const std::string& value);
  std::string* _internal_mutable_ext_value();
  public:

  // @@protoc_insertion_point(class_scope:mead101.mead.ProprietaryId)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr namespace__;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ext_value_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class Pseudonym PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.Pseudonym) */ {
 public:
  inline Pseudonym() : Pseudonym(nullptr) {}
  virtual ~Pseudonym();

  Pseudonym(const Pseudonym& from);
  Pseudonym(Pseudonym&& from) noexcept
    : Pseudonym() {
    *this = ::std::move(from);
  }

  inline Pseudonym& operator=(const Pseudonym& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pseudonym& operator=(Pseudonym&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Pseudonym& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Pseudonym* internal_default_instance() {
    return reinterpret_cast<const Pseudonym*>(
               &_Pseudonym_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    99;

  friend void swap(Pseudonym& a, Pseudonym& b) {
    a.Swap(&b);
  }
  inline void Swap(Pseudonym* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Pseudonym* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Pseudonym* New() const final {
    return CreateMaybeMessage<Pseudonym>(nullptr);
  }

  Pseudonym* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Pseudonym>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Pseudonym& from);
  void MergeFrom(const Pseudonym& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pseudonym* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.Pseudonym";
  }
  protected:
  explicit Pseudonym(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetadataSourceReferenceFieldNumber = 4,
    kApplicableTerritoryCodeFieldNumber = 1,
    kNameFieldNumber = 5,
    kIsDefaultFieldNumber = 2,
    kIsOfficialFieldNumber = 3,
  };
  // repeated string metadata_source_reference = 4;
  int metadata_source_reference_size() const;
  private:
  int _internal_metadata_source_reference_size() const;
  public:
  void clear_metadata_source_reference();
  const std::string& metadata_source_reference(int index) const;
  std::string* mutable_metadata_source_reference(int index);
  void set_metadata_source_reference(int index, const std::string& value);
  void set_metadata_source_reference(int index, std::string&& value);
  void set_metadata_source_reference(int index, const char* value);
  void set_metadata_source_reference(int index, const char* value, size_t size);
  std::string* add_metadata_source_reference();
  void add_metadata_source_reference(const std::string& value);
  void add_metadata_source_reference(std::string&& value);
  void add_metadata_source_reference(const char* value);
  void add_metadata_source_reference(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& metadata_source_reference() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_metadata_source_reference();
  private:
  const std::string& _internal_metadata_source_reference(int index) const;
  std::string* _internal_add_metadata_source_reference();
  public:

  // optional .mead101.avs.CurrentTerritoryCode applicable_territory_code = 1;
  bool has_applicable_territory_code() const;
  private:
  bool _internal_has_applicable_territory_code() const;
  public:
  void clear_applicable_territory_code();
  const ::mead101::avs::CurrentTerritoryCode& applicable_territory_code() const;
  ::mead101::avs::CurrentTerritoryCode* release_applicable_territory_code();
  ::mead101::avs::CurrentTerritoryCode* mutable_applicable_territory_code();
  void set_allocated_applicable_territory_code(::mead101::avs::CurrentTerritoryCode* applicable_territory_code);
  private:
  const ::mead101::avs::CurrentTerritoryCode& _internal_applicable_territory_code() const;
  ::mead101::avs::CurrentTerritoryCode* _internal_mutable_applicable_territory_code();
  public:
  void unsafe_arena_set_allocated_applicable_territory_code(
      ::mead101::avs::CurrentTerritoryCode* applicable_territory_code);
  ::mead101::avs::CurrentTerritoryCode* unsafe_arena_release_applicable_territory_code();

  // optional .mead101.mead.PartyNameWithPronunciation name = 5;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const ::mead101::mead::PartyNameWithPronunciation& name() const;
  ::mead101::mead::PartyNameWithPronunciation* release_name();
  ::mead101::mead::PartyNameWithPronunciation* mutable_name();
  void set_allocated_name(::mead101::mead::PartyNameWithPronunciation* name);
  private:
  const ::mead101::mead::PartyNameWithPronunciation& _internal_name() const;
  ::mead101::mead::PartyNameWithPronunciation* _internal_mutable_name();
  public:
  void unsafe_arena_set_allocated_name(
      ::mead101::mead::PartyNameWithPronunciation* name);
  ::mead101::mead::PartyNameWithPronunciation* unsafe_arena_release_name();

  // optional bool is_default = 2;
  bool has_is_default() const;
  private:
  bool _internal_has_is_default() const;
  public:
  void clear_is_default();
  bool is_default() const;
  void set_is_default(bool value);
  private:
  bool _internal_is_default() const;
  void _internal_set_is_default(bool value);
  public:

  // optional bool is_official = 3;
  bool has_is_official() const;
  private:
  bool _internal_has_is_official() const;
  public:
  void clear_is_official();
  bool is_official() const;
  void set_is_official(bool value);
  private:
  bool _internal_is_official() const;
  void _internal_set_is_official(bool value);
  public:

  // @@protoc_insertion_point(class_scope:mead101.mead.Pseudonym)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> metadata_source_reference_;
  ::mead101::avs::CurrentTerritoryCode* applicable_territory_code_;
  ::mead101::mead::PartyNameWithPronunciation* name_;
  bool is_default_;
  bool is_official_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class RecordingPart PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.RecordingPart) */ {
 public:
  inline RecordingPart() : RecordingPart(nullptr) {}
  virtual ~RecordingPart();

  RecordingPart(const RecordingPart& from);
  RecordingPart(RecordingPart&& from) noexcept
    : RecordingPart() {
    *this = ::std::move(from);
  }

  inline RecordingPart& operator=(const RecordingPart& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecordingPart& operator=(RecordingPart&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RecordingPart& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RecordingPart* internal_default_instance() {
    return reinterpret_cast<const RecordingPart*>(
               &_RecordingPart_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    100;

  friend void swap(RecordingPart& a, RecordingPart& b) {
    a.Swap(&b);
  }
  inline void Swap(RecordingPart* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecordingPart* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RecordingPart* New() const final {
    return CreateMaybeMessage<RecordingPart>(nullptr);
  }

  RecordingPart* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RecordingPart>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RecordingPart& from);
  void MergeFrom(const RecordingPart& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecordingPart* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.RecordingPart";
  }
  protected:
  explicit RecordingPart(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommentFieldNumber = 1,
    kMetadataSourceReferenceFieldNumber = 3,
    kUsageInformationFieldNumber = 8,
    kRecordingPartTypeFieldNumber = 4,
    kUnitFieldNumber = 7,
    kEndPointFieldNumber = 2,
    kStartPointFieldNumber = 6,
    kSequenceNumberFieldNumber = 5,
  };
  // repeated .mead101.mead.Annotation comment = 1;
  int comment_size() const;
  private:
  int _internal_comment_size() const;
  public:
  void clear_comment();
  ::mead101::mead::Annotation* mutable_comment(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Annotation >*
      mutable_comment();
  private:
  const ::mead101::mead::Annotation& _internal_comment(int index) const;
  ::mead101::mead::Annotation* _internal_add_comment();
  public:
  const ::mead101::mead::Annotation& comment(int index) const;
  ::mead101::mead::Annotation* add_comment();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Annotation >&
      comment() const;

  // repeated string metadata_source_reference = 3;
  int metadata_source_reference_size() const;
  private:
  int _internal_metadata_source_reference_size() const;
  public:
  void clear_metadata_source_reference();
  const std::string& metadata_source_reference(int index) const;
  std::string* mutable_metadata_source_reference(int index);
  void set_metadata_source_reference(int index, const std::string& value);
  void set_metadata_source_reference(int index, std::string&& value);
  void set_metadata_source_reference(int index, const char* value);
  void set_metadata_source_reference(int index, const char* value, size_t size);
  std::string* add_metadata_source_reference();
  void add_metadata_source_reference(const std::string& value);
  void add_metadata_source_reference(std::string&& value);
  void add_metadata_source_reference(const char* value);
  void add_metadata_source_reference(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& metadata_source_reference() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_metadata_source_reference();
  private:
  const std::string& _internal_metadata_source_reference(int index) const;
  std::string* _internal_add_metadata_source_reference();
  public:

  // repeated .mead101.mead.TextWithFormat usage_information = 8;
  int usage_information_size() const;
  private:
  int _internal_usage_information_size() const;
  public:
  void clear_usage_information();
  ::mead101::mead::TextWithFormat* mutable_usage_information(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::TextWithFormat >*
      mutable_usage_information();
  private:
  const ::mead101::mead::TextWithFormat& _internal_usage_information(int index) const;
  ::mead101::mead::TextWithFormat* _internal_add_usage_information();
  public:
  const ::mead101::mead::TextWithFormat& usage_information(int index) const;
  ::mead101::mead::TextWithFormat* add_usage_information();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::TextWithFormat >&
      usage_information() const;

  // optional .mead101.mead.RecordingPartType recording_part_type = 4;
  bool has_recording_part_type() const;
  private:
  bool _internal_has_recording_part_type() const;
  public:
  void clear_recording_part_type();
  const ::mead101::mead::RecordingPartType& recording_part_type() const;
  ::mead101::mead::RecordingPartType* release_recording_part_type();
  ::mead101::mead::RecordingPartType* mutable_recording_part_type();
  void set_allocated_recording_part_type(::mead101::mead::RecordingPartType* recording_part_type);
  private:
  const ::mead101::mead::RecordingPartType& _internal_recording_part_type() const;
  ::mead101::mead::RecordingPartType* _internal_mutable_recording_part_type();
  public:
  void unsafe_arena_set_allocated_recording_part_type(
      ::mead101::mead::RecordingPartType* recording_part_type);
  ::mead101::mead::RecordingPartType* unsafe_arena_release_recording_part_type();

  // optional .mead101.avs.UnitOfCuePoints unit = 7;
  bool has_unit() const;
  private:
  bool _internal_has_unit() const;
  public:
  void clear_unit();
  const ::mead101::avs::UnitOfCuePoints& unit() const;
  ::mead101::avs::UnitOfCuePoints* release_unit();
  ::mead101::avs::UnitOfCuePoints* mutable_unit();
  void set_allocated_unit(::mead101::avs::UnitOfCuePoints* unit);
  private:
  const ::mead101::avs::UnitOfCuePoints& _internal_unit() const;
  ::mead101::avs::UnitOfCuePoints* _internal_mutable_unit();
  public:
  void unsafe_arena_set_allocated_unit(
      ::mead101::avs::UnitOfCuePoints* unit);
  ::mead101::avs::UnitOfCuePoints* unsafe_arena_release_unit();

  // optional double end_point = 2;
  bool has_end_point() const;
  private:
  bool _internal_has_end_point() const;
  public:
  void clear_end_point();
  double end_point() const;
  void set_end_point(double value);
  private:
  double _internal_end_point() const;
  void _internal_set_end_point(double value);
  public:

  // optional double start_point = 6;
  bool has_start_point() const;
  private:
  bool _internal_has_start_point() const;
  public:
  void clear_start_point();
  double start_point() const;
  void set_start_point(double value);
  private:
  double _internal_start_point() const;
  void _internal_set_start_point(double value);
  public:

  // optional int32 sequence_number = 5;
  bool has_sequence_number() const;
  private:
  bool _internal_has_sequence_number() const;
  public:
  void clear_sequence_number();
  ::PROTOBUF_NAMESPACE_ID::int32 sequence_number() const;
  void set_sequence_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sequence_number() const;
  void _internal_set_sequence_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mead101.mead.RecordingPart)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Annotation > comment_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> metadata_source_reference_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::TextWithFormat > usage_information_;
  ::mead101::mead::RecordingPartType* recording_part_type_;
  ::mead101::avs::UnitOfCuePoints* unit_;
  double end_point_;
  double start_point_;
  ::PROTOBUF_NAMESPACE_ID::int32 sequence_number_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class RecordingPartType PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.RecordingPartType) */ {
 public:
  inline RecordingPartType() : RecordingPartType(nullptr) {}
  virtual ~RecordingPartType();

  RecordingPartType(const RecordingPartType& from);
  RecordingPartType(RecordingPartType&& from) noexcept
    : RecordingPartType() {
    *this = ::std::move(from);
  }

  inline RecordingPartType& operator=(const RecordingPartType& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecordingPartType& operator=(RecordingPartType&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RecordingPartType& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RecordingPartType* internal_default_instance() {
    return reinterpret_cast<const RecordingPartType*>(
               &_RecordingPartType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    101;

  friend void swap(RecordingPartType& a, RecordingPartType& b) {
    a.Swap(&b);
  }
  inline void Swap(RecordingPartType* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecordingPartType* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RecordingPartType* New() const final {
    return CreateMaybeMessage<RecordingPartType>(nullptr);
  }

  RecordingPartType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RecordingPartType>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RecordingPartType& from);
  void MergeFrom(const RecordingPartType& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecordingPartType* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.RecordingPartType";
  }
  protected:
  explicit RecordingPartType(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNamespaceFieldNumber = 1,
    kUserDefinedValueFieldNumber = 2,
    kExtValueFieldNumber = 3,
  };
  // optional string namespace = 1;
  bool has_namespace_() const;
  private:
  bool _internal_has_namespace_() const;
  public:
  void clear_namespace_();
  const std::string& namespace_() const;
  void set_namespace_(const std::string& value);
  void set_namespace_(std::string&& value);
  void set_namespace_(const char* value);
  void set_namespace_(const char* value, size_t size);
  std::string* mutable_namespace_();
  std::string* release_namespace_();
  void set_allocated_namespace_(std::string* namespace_);
  private:
  const std::string& _internal_namespace_() const;
  void _internal_set_namespace_(const std::string& value);
  std::string* _internal_mutable_namespace_();
  public:

  // optional string user_defined_value = 2;
  bool has_user_defined_value() const;
  private:
  bool _internal_has_user_defined_value() const;
  public:
  void clear_user_defined_value();
  const std::string& user_defined_value() const;
  void set_user_defined_value(const std::string& value);
  void set_user_defined_value(std::string&& value);
  void set_user_defined_value(const char* value);
  void set_user_defined_value(const char* value, size_t size);
  std::string* mutable_user_defined_value();
  std::string* release_user_defined_value();
  void set_allocated_user_defined_value(std::string* user_defined_value);
  private:
  const std::string& _internal_user_defined_value() const;
  void _internal_set_user_defined_value(const std::string& value);
  std::string* _internal_mutable_user_defined_value();
  public:

  // optional .mead101.avs.RecordingPartType ext_value = 3;
  bool has_ext_value() const;
  private:
  bool _internal_has_ext_value() const;
  public:
  void clear_ext_value();
  const ::mead101::avs::RecordingPartType& ext_value() const;
  ::mead101::avs::RecordingPartType* release_ext_value();
  ::mead101::avs::RecordingPartType* mutable_ext_value();
  void set_allocated_ext_value(::mead101::avs::RecordingPartType* ext_value);
  private:
  const ::mead101::avs::RecordingPartType& _internal_ext_value() const;
  ::mead101::avs::RecordingPartType* _internal_mutable_ext_value();
  public:
  void unsafe_arena_set_allocated_ext_value(
      ::mead101::avs::RecordingPartType* ext_value);
  ::mead101::avs::RecordingPartType* unsafe_arena_release_ext_value();

  // @@protoc_insertion_point(class_scope:mead101.mead.RecordingPartType)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr namespace__;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_defined_value_;
  ::mead101::avs::RecordingPartType* ext_value_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class RelatedCreation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.RelatedCreation) */ {
 public:
  inline RelatedCreation() : RelatedCreation(nullptr) {}
  virtual ~RelatedCreation();

  RelatedCreation(const RelatedCreation& from);
  RelatedCreation(RelatedCreation&& from) noexcept
    : RelatedCreation() {
    *this = ::std::move(from);
  }

  inline RelatedCreation& operator=(const RelatedCreation& from) {
    CopyFrom(from);
    return *this;
  }
  inline RelatedCreation& operator=(RelatedCreation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RelatedCreation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RelatedCreation* internal_default_instance() {
    return reinterpret_cast<const RelatedCreation*>(
               &_RelatedCreation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    102;

  friend void swap(RelatedCreation& a, RelatedCreation& b) {
    a.Swap(&b);
  }
  inline void Swap(RelatedCreation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RelatedCreation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RelatedCreation* New() const final {
    return CreateMaybeMessage<RelatedCreation>(nullptr);
  }

  RelatedCreation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RelatedCreation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RelatedCreation& from);
  void MergeFrom(const RelatedCreation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RelatedCreation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.RelatedCreation";
  }
  protected:
  explicit RelatedCreation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMusicalWorkIdFieldNumber = 1,
    kReleaseIdFieldNumber = 2,
    kResourceIdFieldNumber = 3,
    kTitleFieldNumber = 4,
  };
  // optional .mead101.mead.MusicalWorkId musical_work_id = 1;
  bool has_musical_work_id() const;
  private:
  bool _internal_has_musical_work_id() const;
  public:
  void clear_musical_work_id();
  const ::mead101::mead::MusicalWorkId& musical_work_id() const;
  ::mead101::mead::MusicalWorkId* release_musical_work_id();
  ::mead101::mead::MusicalWorkId* mutable_musical_work_id();
  void set_allocated_musical_work_id(::mead101::mead::MusicalWorkId* musical_work_id);
  private:
  const ::mead101::mead::MusicalWorkId& _internal_musical_work_id() const;
  ::mead101::mead::MusicalWorkId* _internal_mutable_musical_work_id();
  public:
  void unsafe_arena_set_allocated_musical_work_id(
      ::mead101::mead::MusicalWorkId* musical_work_id);
  ::mead101::mead::MusicalWorkId* unsafe_arena_release_musical_work_id();

  // optional .mead101.mead.ReleaseId release_id = 2;
  bool has_release_id() const;
  private:
  bool _internal_has_release_id() const;
  public:
  void clear_release_id();
  const ::mead101::mead::ReleaseId& release_id() const;
  ::mead101::mead::ReleaseId* release_release_id();
  ::mead101::mead::ReleaseId* mutable_release_id();
  void set_allocated_release_id(::mead101::mead::ReleaseId* release_id);
  private:
  const ::mead101::mead::ReleaseId& _internal_release_id() const;
  ::mead101::mead::ReleaseId* _internal_mutable_release_id();
  public:
  void unsafe_arena_set_allocated_release_id(
      ::mead101::mead::ReleaseId* release_id);
  ::mead101::mead::ReleaseId* unsafe_arena_release_release_id();

  // optional .mead101.mead.ResourceId resource_id = 3;
  bool has_resource_id() const;
  private:
  bool _internal_has_resource_id() const;
  public:
  void clear_resource_id();
  const ::mead101::mead::ResourceId& resource_id() const;
  ::mead101::mead::ResourceId* release_resource_id();
  ::mead101::mead::ResourceId* mutable_resource_id();
  void set_allocated_resource_id(::mead101::mead::ResourceId* resource_id);
  private:
  const ::mead101::mead::ResourceId& _internal_resource_id() const;
  ::mead101::mead::ResourceId* _internal_mutable_resource_id();
  public:
  void unsafe_arena_set_allocated_resource_id(
      ::mead101::mead::ResourceId* resource_id);
  ::mead101::mead::ResourceId* unsafe_arena_release_resource_id();

  // optional .mead101.mead.TitleWithPronunciation title = 4;
  bool has_title() const;
  private:
  bool _internal_has_title() const;
  public:
  void clear_title();
  const ::mead101::mead::TitleWithPronunciation& title() const;
  ::mead101::mead::TitleWithPronunciation* release_title();
  ::mead101::mead::TitleWithPronunciation* mutable_title();
  void set_allocated_title(::mead101::mead::TitleWithPronunciation* title);
  private:
  const ::mead101::mead::TitleWithPronunciation& _internal_title() const;
  ::mead101::mead::TitleWithPronunciation* _internal_mutable_title();
  public:
  void unsafe_arena_set_allocated_title(
      ::mead101::mead::TitleWithPronunciation* title);
  ::mead101::mead::TitleWithPronunciation* unsafe_arena_release_title();

  // @@protoc_insertion_point(class_scope:mead101.mead.RelatedCreation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::mead101::mead::MusicalWorkId* musical_work_id_;
  ::mead101::mead::ReleaseId* release_id_;
  ::mead101::mead::ResourceId* resource_id_;
  ::mead101::mead::TitleWithPronunciation* title_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class RelatedResource PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.RelatedResource) */ {
 public:
  inline RelatedResource() : RelatedResource(nullptr) {}
  virtual ~RelatedResource();

  RelatedResource(const RelatedResource& from);
  RelatedResource(RelatedResource&& from) noexcept
    : RelatedResource() {
    *this = ::std::move(from);
  }

  inline RelatedResource& operator=(const RelatedResource& from) {
    CopyFrom(from);
    return *this;
  }
  inline RelatedResource& operator=(RelatedResource&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RelatedResource& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RelatedResource* internal_default_instance() {
    return reinterpret_cast<const RelatedResource*>(
               &_RelatedResource_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    103;

  friend void swap(RelatedResource& a, RelatedResource& b) {
    a.Swap(&b);
  }
  inline void Swap(RelatedResource* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RelatedResource* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RelatedResource* New() const final {
    return CreateMaybeMessage<RelatedResource>(nullptr);
  }

  RelatedResource* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RelatedResource>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RelatedResource& from);
  void MergeFrom(const RelatedResource& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RelatedResource* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.RelatedResource";
  }
  protected:
  explicit RelatedResource(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResourceIdFieldNumber = 1,
    kResourceRelationshipTypeFieldNumber = 2,
  };
  // optional .mead101.mead.ResourceId resource_id = 1;
  bool has_resource_id() const;
  private:
  bool _internal_has_resource_id() const;
  public:
  void clear_resource_id();
  const ::mead101::mead::ResourceId& resource_id() const;
  ::mead101::mead::ResourceId* release_resource_id();
  ::mead101::mead::ResourceId* mutable_resource_id();
  void set_allocated_resource_id(::mead101::mead::ResourceId* resource_id);
  private:
  const ::mead101::mead::ResourceId& _internal_resource_id() const;
  ::mead101::mead::ResourceId* _internal_mutable_resource_id();
  public:
  void unsafe_arena_set_allocated_resource_id(
      ::mead101::mead::ResourceId* resource_id);
  ::mead101::mead::ResourceId* unsafe_arena_release_resource_id();

  // optional .mead101.mead.ResourceRelationshipType resource_relationship_type = 2;
  bool has_resource_relationship_type() const;
  private:
  bool _internal_has_resource_relationship_type() const;
  public:
  void clear_resource_relationship_type();
  const ::mead101::mead::ResourceRelationshipType& resource_relationship_type() const;
  ::mead101::mead::ResourceRelationshipType* release_resource_relationship_type();
  ::mead101::mead::ResourceRelationshipType* mutable_resource_relationship_type();
  void set_allocated_resource_relationship_type(::mead101::mead::ResourceRelationshipType* resource_relationship_type);
  private:
  const ::mead101::mead::ResourceRelationshipType& _internal_resource_relationship_type() const;
  ::mead101::mead::ResourceRelationshipType* _internal_mutable_resource_relationship_type();
  public:
  void unsafe_arena_set_allocated_resource_relationship_type(
      ::mead101::mead::ResourceRelationshipType* resource_relationship_type);
  ::mead101::mead::ResourceRelationshipType* unsafe_arena_release_resource_relationship_type();

  // @@protoc_insertion_point(class_scope:mead101.mead.RelatedResource)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::mead101::mead::ResourceId* resource_id_;
  ::mead101::mead::ResourceRelationshipType* resource_relationship_type_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class RelatedResourceType PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.RelatedResourceType) */ {
 public:
  inline RelatedResourceType() : RelatedResourceType(nullptr) {}
  virtual ~RelatedResourceType();

  RelatedResourceType(const RelatedResourceType& from);
  RelatedResourceType(RelatedResourceType&& from) noexcept
    : RelatedResourceType() {
    *this = ::std::move(from);
  }

  inline RelatedResourceType& operator=(const RelatedResourceType& from) {
    CopyFrom(from);
    return *this;
  }
  inline RelatedResourceType& operator=(RelatedResourceType&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RelatedResourceType& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RelatedResourceType* internal_default_instance() {
    return reinterpret_cast<const RelatedResourceType*>(
               &_RelatedResourceType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    104;

  friend void swap(RelatedResourceType& a, RelatedResourceType& b) {
    a.Swap(&b);
  }
  inline void Swap(RelatedResourceType* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RelatedResourceType* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RelatedResourceType* New() const final {
    return CreateMaybeMessage<RelatedResourceType>(nullptr);
  }

  RelatedResourceType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RelatedResourceType>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RelatedResourceType& from);
  void MergeFrom(const RelatedResourceType& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RelatedResourceType* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.RelatedResourceType";
  }
  protected:
  explicit RelatedResourceType(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNamespaceFieldNumber = 1,
    kUserDefinedValueFieldNumber = 2,
    kExtValueFieldNumber = 3,
  };
  // optional string namespace = 1;
  bool has_namespace_() const;
  private:
  bool _internal_has_namespace_() const;
  public:
  void clear_namespace_();
  const std::string& namespace_() const;
  void set_namespace_(const std::string& value);
  void set_namespace_(std::string&& value);
  void set_namespace_(const char* value);
  void set_namespace_(const char* value, size_t size);
  std::string* mutable_namespace_();
  std::string* release_namespace_();
  void set_allocated_namespace_(std::string* namespace_);
  private:
  const std::string& _internal_namespace_() const;
  void _internal_set_namespace_(const std::string& value);
  std::string* _internal_mutable_namespace_();
  public:

  // optional string user_defined_value = 2;
  bool has_user_defined_value() const;
  private:
  bool _internal_has_user_defined_value() const;
  public:
  void clear_user_defined_value();
  const std::string& user_defined_value() const;
  void set_user_defined_value(const std::string& value);
  void set_user_defined_value(std::string&& value);
  void set_user_defined_value(const char* value);
  void set_user_defined_value(const char* value, size_t size);
  std::string* mutable_user_defined_value();
  std::string* release_user_defined_value();
  void set_allocated_user_defined_value(std::string* user_defined_value);
  private:
  const std::string& _internal_user_defined_value() const;
  void _internal_set_user_defined_value(const std::string& value);
  std::string* _internal_mutable_user_defined_value();
  public:

  // optional .mead101.avs.RelatedResourceType ext_value = 3;
  bool has_ext_value() const;
  private:
  bool _internal_has_ext_value() const;
  public:
  void clear_ext_value();
  const ::mead101::avs::RelatedResourceType& ext_value() const;
  ::mead101::avs::RelatedResourceType* release_ext_value();
  ::mead101::avs::RelatedResourceType* mutable_ext_value();
  void set_allocated_ext_value(::mead101::avs::RelatedResourceType* ext_value);
  private:
  const ::mead101::avs::RelatedResourceType& _internal_ext_value() const;
  ::mead101::avs::RelatedResourceType* _internal_mutable_ext_value();
  public:
  void unsafe_arena_set_allocated_ext_value(
      ::mead101::avs::RelatedResourceType* ext_value);
  ::mead101::avs::RelatedResourceType* unsafe_arena_release_ext_value();

  // @@protoc_insertion_point(class_scope:mead101.mead.RelatedResourceType)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr namespace__;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_defined_value_;
  ::mead101::avs::RelatedResourceType* ext_value_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class RelatedWork PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.RelatedWork) */ {
 public:
  inline RelatedWork() : RelatedWork(nullptr) {}
  virtual ~RelatedWork();

  RelatedWork(const RelatedWork& from);
  RelatedWork(RelatedWork&& from) noexcept
    : RelatedWork() {
    *this = ::std::move(from);
  }

  inline RelatedWork& operator=(const RelatedWork& from) {
    CopyFrom(from);
    return *this;
  }
  inline RelatedWork& operator=(RelatedWork&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RelatedWork& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RelatedWork* internal_default_instance() {
    return reinterpret_cast<const RelatedWork*>(
               &_RelatedWork_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    105;

  friend void swap(RelatedWork& a, RelatedWork& b) {
    a.Swap(&b);
  }
  inline void Swap(RelatedWork* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RelatedWork* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RelatedWork* New() const final {
    return CreateMaybeMessage<RelatedWork>(nullptr);
  }

  RelatedWork* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RelatedWork>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RelatedWork& from);
  void MergeFrom(const RelatedWork& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RelatedWork* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.RelatedWork";
  }
  protected:
  explicit RelatedWork(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetadataSourceReferenceFieldNumber = 1,
    kWorkTitleFieldNumber = 4,
    kWriterFieldNumber = 5,
    kWorkIdFieldNumber = 2,
    kWorkRelationshipTypeFieldNumber = 3,
  };
  // repeated string metadata_source_reference = 1;
  int metadata_source_reference_size() const;
  private:
  int _internal_metadata_source_reference_size() const;
  public:
  void clear_metadata_source_reference();
  const std::string& metadata_source_reference(int index) const;
  std::string* mutable_metadata_source_reference(int index);
  void set_metadata_source_reference(int index, const std::string& value);
  void set_metadata_source_reference(int index, std::string&& value);
  void set_metadata_source_reference(int index, const char* value);
  void set_metadata_source_reference(int index, const char* value, size_t size);
  std::string* add_metadata_source_reference();
  void add_metadata_source_reference(const std::string& value);
  void add_metadata_source_reference(std::string&& value);
  void add_metadata_source_reference(const char* value);
  void add_metadata_source_reference(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& metadata_source_reference() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_metadata_source_reference();
  private:
  const std::string& _internal_metadata_source_reference(int index) const;
  std::string* _internal_add_metadata_source_reference();
  public:

  // repeated .mead101.mead.WorkTitle work_title = 4;
  int work_title_size() const;
  private:
  int _internal_work_title_size() const;
  public:
  void clear_work_title();
  ::mead101::mead::WorkTitle* mutable_work_title(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::WorkTitle >*
      mutable_work_title();
  private:
  const ::mead101::mead::WorkTitle& _internal_work_title(int index) const;
  ::mead101::mead::WorkTitle* _internal_add_work_title();
  public:
  const ::mead101::mead::WorkTitle& work_title(int index) const;
  ::mead101::mead::WorkTitle* add_work_title();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::WorkTitle >&
      work_title() const;

  // repeated .mead101.mead.PartyWithNames writer = 5;
  int writer_size() const;
  private:
  int _internal_writer_size() const;
  public:
  void clear_writer();
  ::mead101::mead::PartyWithNames* mutable_writer(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::PartyWithNames >*
      mutable_writer();
  private:
  const ::mead101::mead::PartyWithNames& _internal_writer(int index) const;
  ::mead101::mead::PartyWithNames* _internal_add_writer();
  public:
  const ::mead101::mead::PartyWithNames& writer(int index) const;
  ::mead101::mead::PartyWithNames* add_writer();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::PartyWithNames >&
      writer() const;

  // optional .mead101.mead.MusicalWorkId work_id = 2;
  bool has_work_id() const;
  private:
  bool _internal_has_work_id() const;
  public:
  void clear_work_id();
  const ::mead101::mead::MusicalWorkId& work_id() const;
  ::mead101::mead::MusicalWorkId* release_work_id();
  ::mead101::mead::MusicalWorkId* mutable_work_id();
  void set_allocated_work_id(::mead101::mead::MusicalWorkId* work_id);
  private:
  const ::mead101::mead::MusicalWorkId& _internal_work_id() const;
  ::mead101::mead::MusicalWorkId* _internal_mutable_work_id();
  public:
  void unsafe_arena_set_allocated_work_id(
      ::mead101::mead::MusicalWorkId* work_id);
  ::mead101::mead::MusicalWorkId* unsafe_arena_release_work_id();

  // optional .mead101.mead.WorkRelationshipType work_relationship_type = 3;
  bool has_work_relationship_type() const;
  private:
  bool _internal_has_work_relationship_type() const;
  public:
  void clear_work_relationship_type();
  const ::mead101::mead::WorkRelationshipType& work_relationship_type() const;
  ::mead101::mead::WorkRelationshipType* release_work_relationship_type();
  ::mead101::mead::WorkRelationshipType* mutable_work_relationship_type();
  void set_allocated_work_relationship_type(::mead101::mead::WorkRelationshipType* work_relationship_type);
  private:
  const ::mead101::mead::WorkRelationshipType& _internal_work_relationship_type() const;
  ::mead101::mead::WorkRelationshipType* _internal_mutable_work_relationship_type();
  public:
  void unsafe_arena_set_allocated_work_relationship_type(
      ::mead101::mead::WorkRelationshipType* work_relationship_type);
  ::mead101::mead::WorkRelationshipType* unsafe_arena_release_work_relationship_type();

  // @@protoc_insertion_point(class_scope:mead101.mead.RelatedWork)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> metadata_source_reference_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::WorkTitle > work_title_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::PartyWithNames > writer_;
  ::mead101::mead::MusicalWorkId* work_id_;
  ::mead101::mead::WorkRelationshipType* work_relationship_type_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class Release PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.Release) */ {
 public:
  inline Release() : Release(nullptr) {}
  virtual ~Release();

  Release(const Release& from);
  Release(Release&& from) noexcept
    : Release() {
    *this = ::std::move(from);
  }

  inline Release& operator=(const Release& from) {
    CopyFrom(from);
    return *this;
  }
  inline Release& operator=(Release&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Release& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Release* internal_default_instance() {
    return reinterpret_cast<const Release*>(
               &_Release_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    106;

  friend void swap(Release& a, Release& b) {
    a.Swap(&b);
  }
  inline void Swap(Release* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Release* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Release* New() const final {
    return CreateMaybeMessage<Release>(nullptr);
  }

  Release* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Release>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Release& from);
  void MergeFrom(const Release& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Release* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.Release";
  }
  protected:
  explicit Release(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDisplayArtistFieldNumber = 1,
    kReleaseTitleFieldNumber = 5,
    kGRidFieldNumber = 2,
    kICPNFieldNumber = 3,
    kProprietaryReleaseIdFieldNumber = 4,
  };
  // repeated .mead101.mead.DisplayArtist display_artist = 1;
  int display_artist_size() const;
  private:
  int _internal_display_artist_size() const;
  public:
  void clear_display_artist();
  ::mead101::mead::DisplayArtist* mutable_display_artist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::DisplayArtist >*
      mutable_display_artist();
  private:
  const ::mead101::mead::DisplayArtist& _internal_display_artist(int index) const;
  ::mead101::mead::DisplayArtist* _internal_add_display_artist();
  public:
  const ::mead101::mead::DisplayArtist& display_artist(int index) const;
  ::mead101::mead::DisplayArtist* add_display_artist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::DisplayArtist >&
      display_artist() const;

  // repeated .mead101.mead.ReleaseTitle release_title = 5;
  int release_title_size() const;
  private:
  int _internal_release_title_size() const;
  public:
  void clear_release_title();
  ::mead101::mead::ReleaseTitle* mutable_release_title(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::ReleaseTitle >*
      mutable_release_title();
  private:
  const ::mead101::mead::ReleaseTitle& _internal_release_title(int index) const;
  ::mead101::mead::ReleaseTitle* _internal_add_release_title();
  public:
  const ::mead101::mead::ReleaseTitle& release_title(int index) const;
  ::mead101::mead::ReleaseTitle* add_release_title();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::ReleaseTitle >&
      release_title() const;

  // optional string g_rid = 2;
  bool has_g_rid() const;
  private:
  bool _internal_has_g_rid() const;
  public:
  void clear_g_rid();
  const std::string& g_rid() const;
  void set_g_rid(const std::string& value);
  void set_g_rid(std::string&& value);
  void set_g_rid(const char* value);
  void set_g_rid(const char* value, size_t size);
  std::string* mutable_g_rid();
  std::string* release_g_rid();
  void set_allocated_g_rid(std::string* g_rid);
  private:
  const std::string& _internal_g_rid() const;
  void _internal_set_g_rid(const std::string& value);
  std::string* _internal_mutable_g_rid();
  public:

  // optional string i_c_p_n = 3;
  bool has_i_c_p_n() const;
  private:
  bool _internal_has_i_c_p_n() const;
  public:
  void clear_i_c_p_n();
  const std::string& i_c_p_n() const;
  void set_i_c_p_n(const std::string& value);
  void set_i_c_p_n(std::string&& value);
  void set_i_c_p_n(const char* value);
  void set_i_c_p_n(const char* value, size_t size);
  std::string* mutable_i_c_p_n();
  std::string* release_i_c_p_n();
  void set_allocated_i_c_p_n(std::string* i_c_p_n);
  private:
  const std::string& _internal_i_c_p_n() const;
  void _internal_set_i_c_p_n(const std::string& value);
  std::string* _internal_mutable_i_c_p_n();
  public:

  // optional string proprietary_release_id = 4;
  bool has_proprietary_release_id() const;
  private:
  bool _internal_has_proprietary_release_id() const;
  public:
  void clear_proprietary_release_id();
  const std::string& proprietary_release_id() const;
  void set_proprietary_release_id(const std::string& value);
  void set_proprietary_release_id(std::string&& value);
  void set_proprietary_release_id(const char* value);
  void set_proprietary_release_id(const char* value, size_t size);
  std::string* mutable_proprietary_release_id();
  std::string* release_proprietary_release_id();
  void set_allocated_proprietary_release_id(std::string* proprietary_release_id);
  private:
  const std::string& _internal_proprietary_release_id() const;
  void _internal_set_proprietary_release_id(const std::string& value);
  std::string* _internal_mutable_proprietary_release_id();
  public:

  // @@protoc_insertion_point(class_scope:mead101.mead.Release)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::DisplayArtist > display_artist_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::ReleaseTitle > release_title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr g_rid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr i_c_p_n_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr proprietary_release_id_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class ReleaseId PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.ReleaseId) */ {
 public:
  inline ReleaseId() : ReleaseId(nullptr) {}
  virtual ~ReleaseId();

  ReleaseId(const ReleaseId& from);
  ReleaseId(ReleaseId&& from) noexcept
    : ReleaseId() {
    *this = ::std::move(from);
  }

  inline ReleaseId& operator=(const ReleaseId& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReleaseId& operator=(ReleaseId&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReleaseId& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReleaseId* internal_default_instance() {
    return reinterpret_cast<const ReleaseId*>(
               &_ReleaseId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    107;

  friend void swap(ReleaseId& a, ReleaseId& b) {
    a.Swap(&b);
  }
  inline void Swap(ReleaseId* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReleaseId* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReleaseId* New() const final {
    return CreateMaybeMessage<ReleaseId>(nullptr);
  }

  ReleaseId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReleaseId>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReleaseId& from);
  void MergeFrom(const ReleaseId& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReleaseId* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.ReleaseId";
  }
  protected:
  explicit ReleaseId(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProprietaryIdFieldNumber = 5,
    kGRidFieldNumber = 2,
    kICPNFieldNumber = 3,
    kISRCFieldNumber = 4,
    kCatalogNumberFieldNumber = 1,
  };
  // repeated .mead101.mead.ProprietaryId proprietary_id = 5;
  int proprietary_id_size() const;
  private:
  int _internal_proprietary_id_size() const;
  public:
  void clear_proprietary_id();
  ::mead101::mead::ProprietaryId* mutable_proprietary_id(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::ProprietaryId >*
      mutable_proprietary_id();
  private:
  const ::mead101::mead::ProprietaryId& _internal_proprietary_id(int index) const;
  ::mead101::mead::ProprietaryId* _internal_add_proprietary_id();
  public:
  const ::mead101::mead::ProprietaryId& proprietary_id(int index) const;
  ::mead101::mead::ProprietaryId* add_proprietary_id();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::ProprietaryId >&
      proprietary_id() const;

  // optional string g_rid = 2;
  bool has_g_rid() const;
  private:
  bool _internal_has_g_rid() const;
  public:
  void clear_g_rid();
  const std::string& g_rid() const;
  void set_g_rid(const std::string& value);
  void set_g_rid(std::string&& value);
  void set_g_rid(const char* value);
  void set_g_rid(const char* value, size_t size);
  std::string* mutable_g_rid();
  std::string* release_g_rid();
  void set_allocated_g_rid(std::string* g_rid);
  private:
  const std::string& _internal_g_rid() const;
  void _internal_set_g_rid(const std::string& value);
  std::string* _internal_mutable_g_rid();
  public:

  // optional string i_c_p_n = 3;
  bool has_i_c_p_n() const;
  private:
  bool _internal_has_i_c_p_n() const;
  public:
  void clear_i_c_p_n();
  const std::string& i_c_p_n() const;
  void set_i_c_p_n(const std::string& value);
  void set_i_c_p_n(std::string&& value);
  void set_i_c_p_n(const char* value);
  void set_i_c_p_n(const char* value, size_t size);
  std::string* mutable_i_c_p_n();
  std::string* release_i_c_p_n();
  void set_allocated_i_c_p_n(std::string* i_c_p_n);
  private:
  const std::string& _internal_i_c_p_n() const;
  void _internal_set_i_c_p_n(const std::string& value);
  std::string* _internal_mutable_i_c_p_n();
  public:

  // optional string i_s_r_c = 4;
  bool has_i_s_r_c() const;
  private:
  bool _internal_has_i_s_r_c() const;
  public:
  void clear_i_s_r_c();
  const std::string& i_s_r_c() const;
  void set_i_s_r_c(const std::string& value);
  void set_i_s_r_c(std::string&& value);
  void set_i_s_r_c(const char* value);
  void set_i_s_r_c(const char* value, size_t size);
  std::string* mutable_i_s_r_c();
  std::string* release_i_s_r_c();
  void set_allocated_i_s_r_c(std::string* i_s_r_c);
  private:
  const std::string& _internal_i_s_r_c() const;
  void _internal_set_i_s_r_c(const std::string& value);
  std::string* _internal_mutable_i_s_r_c();
  public:

  // optional .mead101.mead.CatalogNumber catalog_number = 1;
  bool has_catalog_number() const;
  private:
  bool _internal_has_catalog_number() const;
  public:
  void clear_catalog_number();
  const ::mead101::mead::CatalogNumber& catalog_number() const;
  ::mead101::mead::CatalogNumber* release_catalog_number();
  ::mead101::mead::CatalogNumber* mutable_catalog_number();
  void set_allocated_catalog_number(::mead101::mead::CatalogNumber* catalog_number);
  private:
  const ::mead101::mead::CatalogNumber& _internal_catalog_number() const;
  ::mead101::mead::CatalogNumber* _internal_mutable_catalog_number();
  public:
  void unsafe_arena_set_allocated_catalog_number(
      ::mead101::mead::CatalogNumber* catalog_number);
  ::mead101::mead::CatalogNumber* unsafe_arena_release_catalog_number();

  // @@protoc_insertion_point(class_scope:mead101.mead.ReleaseId)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::ProprietaryId > proprietary_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr g_rid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr i_c_p_n_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr i_s_r_c_;
  ::mead101::mead::CatalogNumber* catalog_number_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class ReleaseInformation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.ReleaseInformation) */ {
 public:
  inline ReleaseInformation() : ReleaseInformation(nullptr) {}
  virtual ~ReleaseInformation();

  ReleaseInformation(const ReleaseInformation& from);
  ReleaseInformation(ReleaseInformation&& from) noexcept
    : ReleaseInformation() {
    *this = ::std::move(from);
  }

  inline ReleaseInformation& operator=(const ReleaseInformation& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReleaseInformation& operator=(ReleaseInformation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReleaseInformation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReleaseInformation* internal_default_instance() {
    return reinterpret_cast<const ReleaseInformation*>(
               &_ReleaseInformation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    108;

  friend void swap(ReleaseInformation& a, ReleaseInformation& b) {
    a.Swap(&b);
  }
  inline void Swap(ReleaseInformation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReleaseInformation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReleaseInformation* New() const final {
    return CreateMaybeMessage<ReleaseInformation>(nullptr);
  }

  ReleaseInformation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReleaseInformation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReleaseInformation& from);
  void MergeFrom(const ReleaseInformation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReleaseInformation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.ReleaseInformation";
  }
  protected:
  explicit ReleaseInformation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAlternativeTitleFieldNumber = 1,
    kArtisticInfluenceFieldNumber = 3,
    kAwardFieldNumber = 4,
    kCommentaryNoteFieldNumber = 5,
    kEpochFieldNumber = 6,
    kGenreCategoryFieldNumber = 7,
    kHistoricChartingInformationFieldNumber = 8,
    kImageFieldNumber = 9,
    kIsSimilarFieldNumber = 10,
    kMoodFieldNumber = 11,
    kThemeFieldNumber = 16,
    kApplicableTerritoryCodeFieldNumber = 2,
    kPriorityPeriodEndDateFieldNumber = 12,
    kPriorityPeriodStartDateFieldNumber = 13,
    kReleaseSummaryFieldNumber = 14,
    kSubGenreCategoryFieldNumber = 15,
  };
  // repeated .mead101.mead.AlternativeTitle alternative_title = 1;
  int alternative_title_size() const;
  private:
  int _internal_alternative_title_size() const;
  public:
  void clear_alternative_title();
  ::mead101::mead::AlternativeTitle* mutable_alternative_title(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::AlternativeTitle >*
      mutable_alternative_title();
  private:
  const ::mead101::mead::AlternativeTitle& _internal_alternative_title(int index) const;
  ::mead101::mead::AlternativeTitle* _internal_add_alternative_title();
  public:
  const ::mead101::mead::AlternativeTitle& alternative_title(int index) const;
  ::mead101::mead::AlternativeTitle* add_alternative_title();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::AlternativeTitle >&
      alternative_title() const;

  // repeated .mead101.mead.ArtisticInfluence artistic_influence = 3;
  int artistic_influence_size() const;
  private:
  int _internal_artistic_influence_size() const;
  public:
  void clear_artistic_influence();
  ::mead101::mead::ArtisticInfluence* mutable_artistic_influence(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::ArtisticInfluence >*
      mutable_artistic_influence();
  private:
  const ::mead101::mead::ArtisticInfluence& _internal_artistic_influence(int index) const;
  ::mead101::mead::ArtisticInfluence* _internal_add_artistic_influence();
  public:
  const ::mead101::mead::ArtisticInfluence& artistic_influence(int index) const;
  ::mead101::mead::ArtisticInfluence* add_artistic_influence();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::ArtisticInfluence >&
      artistic_influence() const;

  // repeated .mead101.mead.Award award = 4;
  int award_size() const;
  private:
  int _internal_award_size() const;
  public:
  void clear_award();
  ::mead101::mead::Award* mutable_award(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Award >*
      mutable_award();
  private:
  const ::mead101::mead::Award& _internal_award(int index) const;
  ::mead101::mead::Award* _internal_add_award();
  public:
  const ::mead101::mead::Award& award(int index) const;
  ::mead101::mead::Award* add_award();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Award >&
      award() const;

  // repeated .mead101.mead.CommentaryNote commentary_note = 5;
  int commentary_note_size() const;
  private:
  int _internal_commentary_note_size() const;
  public:
  void clear_commentary_note();
  ::mead101::mead::CommentaryNote* mutable_commentary_note(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::CommentaryNote >*
      mutable_commentary_note();
  private:
  const ::mead101::mead::CommentaryNote& _internal_commentary_note(int index) const;
  ::mead101::mead::CommentaryNote* _internal_add_commentary_note();
  public:
  const ::mead101::mead::CommentaryNote& commentary_note(int index) const;
  ::mead101::mead::CommentaryNote* add_commentary_note();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::CommentaryNote >&
      commentary_note() const;

  // repeated .mead101.mead.Epoch epoch = 6;
  int epoch_size() const;
  private:
  int _internal_epoch_size() const;
  public:
  void clear_epoch();
  ::mead101::mead::Epoch* mutable_epoch(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Epoch >*
      mutable_epoch();
  private:
  const ::mead101::mead::Epoch& _internal_epoch(int index) const;
  ::mead101::mead::Epoch* _internal_add_epoch();
  public:
  const ::mead101::mead::Epoch& epoch(int index) const;
  ::mead101::mead::Epoch* add_epoch();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Epoch >&
      epoch() const;

  // repeated .mead101.mead.GenreCategory genre_category = 7;
  int genre_category_size() const;
  private:
  int _internal_genre_category_size() const;
  public:
  void clear_genre_category();
  ::mead101::mead::GenreCategory* mutable_genre_category(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::GenreCategory >*
      mutable_genre_category();
  private:
  const ::mead101::mead::GenreCategory& _internal_genre_category(int index) const;
  ::mead101::mead::GenreCategory* _internal_add_genre_category();
  public:
  const ::mead101::mead::GenreCategory& genre_category(int index) const;
  ::mead101::mead::GenreCategory* add_genre_category();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::GenreCategory >&
      genre_category() const;

  // repeated .mead101.mead.HistoricChartingInformation historic_charting_information = 8;
  int historic_charting_information_size() const;
  private:
  int _internal_historic_charting_information_size() const;
  public:
  void clear_historic_charting_information();
  ::mead101::mead::HistoricChartingInformation* mutable_historic_charting_information(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::HistoricChartingInformation >*
      mutable_historic_charting_information();
  private:
  const ::mead101::mead::HistoricChartingInformation& _internal_historic_charting_information(int index) const;
  ::mead101::mead::HistoricChartingInformation* _internal_add_historic_charting_information();
  public:
  const ::mead101::mead::HistoricChartingInformation& historic_charting_information(int index) const;
  ::mead101::mead::HistoricChartingInformation* add_historic_charting_information();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::HistoricChartingInformation >&
      historic_charting_information() const;

  // repeated .mead101.mead.Image image = 9;
  int image_size() const;
  private:
  int _internal_image_size() const;
  public:
  void clear_image();
  ::mead101::mead::Image* mutable_image(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Image >*
      mutable_image();
  private:
  const ::mead101::mead::Image& _internal_image(int index) const;
  ::mead101::mead::Image* _internal_add_image();
  public:
  const ::mead101::mead::Image& image(int index) const;
  ::mead101::mead::Image* add_image();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Image >&
      image() const;

  // repeated .mead101.mead.SimilarRelease is_similar = 10;
  int is_similar_size() const;
  private:
  int _internal_is_similar_size() const;
  public:
  void clear_is_similar();
  ::mead101::mead::SimilarRelease* mutable_is_similar(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::SimilarRelease >*
      mutable_is_similar();
  private:
  const ::mead101::mead::SimilarRelease& _internal_is_similar(int index) const;
  ::mead101::mead::SimilarRelease* _internal_add_is_similar();
  public:
  const ::mead101::mead::SimilarRelease& is_similar(int index) const;
  ::mead101::mead::SimilarRelease* add_is_similar();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::SimilarRelease >&
      is_similar() const;

  // repeated .mead101.mead.Mood mood = 11;
  int mood_size() const;
  private:
  int _internal_mood_size() const;
  public:
  void clear_mood();
  ::mead101::mead::Mood* mutable_mood(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Mood >*
      mutable_mood();
  private:
  const ::mead101::mead::Mood& _internal_mood(int index) const;
  ::mead101::mead::Mood* _internal_add_mood();
  public:
  const ::mead101::mead::Mood& mood(int index) const;
  ::mead101::mead::Mood* add_mood();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Mood >&
      mood() const;

  // repeated .mead101.mead.Theme theme = 16;
  int theme_size() const;
  private:
  int _internal_theme_size() const;
  public:
  void clear_theme();
  ::mead101::mead::Theme* mutable_theme(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Theme >*
      mutable_theme();
  private:
  const ::mead101::mead::Theme& _internal_theme(int index) const;
  ::mead101::mead::Theme* _internal_add_theme();
  public:
  const ::mead101::mead::Theme& theme(int index) const;
  ::mead101::mead::Theme* add_theme();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Theme >&
      theme() const;

  // optional .mead101.avs.CurrentTerritoryCode applicable_territory_code = 2;
  bool has_applicable_territory_code() const;
  private:
  bool _internal_has_applicable_territory_code() const;
  public:
  void clear_applicable_territory_code();
  const ::mead101::avs::CurrentTerritoryCode& applicable_territory_code() const;
  ::mead101::avs::CurrentTerritoryCode* release_applicable_territory_code();
  ::mead101::avs::CurrentTerritoryCode* mutable_applicable_territory_code();
  void set_allocated_applicable_territory_code(::mead101::avs::CurrentTerritoryCode* applicable_territory_code);
  private:
  const ::mead101::avs::CurrentTerritoryCode& _internal_applicable_territory_code() const;
  ::mead101::avs::CurrentTerritoryCode* _internal_mutable_applicable_territory_code();
  public:
  void unsafe_arena_set_allocated_applicable_territory_code(
      ::mead101::avs::CurrentTerritoryCode* applicable_territory_code);
  ::mead101::avs::CurrentTerritoryCode* unsafe_arena_release_applicable_territory_code();

  // optional .mead101.mead.ddex_IsoDate priority_period_end_date = 12;
  bool has_priority_period_end_date() const;
  private:
  bool _internal_has_priority_period_end_date() const;
  public:
  void clear_priority_period_end_date();
  const ::mead101::mead::ddex_IsoDate& priority_period_end_date() const;
  ::mead101::mead::ddex_IsoDate* release_priority_period_end_date();
  ::mead101::mead::ddex_IsoDate* mutable_priority_period_end_date();
  void set_allocated_priority_period_end_date(::mead101::mead::ddex_IsoDate* priority_period_end_date);
  private:
  const ::mead101::mead::ddex_IsoDate& _internal_priority_period_end_date() const;
  ::mead101::mead::ddex_IsoDate* _internal_mutable_priority_period_end_date();
  public:
  void unsafe_arena_set_allocated_priority_period_end_date(
      ::mead101::mead::ddex_IsoDate* priority_period_end_date);
  ::mead101::mead::ddex_IsoDate* unsafe_arena_release_priority_period_end_date();

  // optional .mead101.mead.ddex_IsoDate priority_period_start_date = 13;
  bool has_priority_period_start_date() const;
  private:
  bool _internal_has_priority_period_start_date() const;
  public:
  void clear_priority_period_start_date();
  const ::mead101::mead::ddex_IsoDate& priority_period_start_date() const;
  ::mead101::mead::ddex_IsoDate* release_priority_period_start_date();
  ::mead101::mead::ddex_IsoDate* mutable_priority_period_start_date();
  void set_allocated_priority_period_start_date(::mead101::mead::ddex_IsoDate* priority_period_start_date);
  private:
  const ::mead101::mead::ddex_IsoDate& _internal_priority_period_start_date() const;
  ::mead101::mead::ddex_IsoDate* _internal_mutable_priority_period_start_date();
  public:
  void unsafe_arena_set_allocated_priority_period_start_date(
      ::mead101::mead::ddex_IsoDate* priority_period_start_date);
  ::mead101::mead::ddex_IsoDate* unsafe_arena_release_priority_period_start_date();

  // optional .mead101.mead.ReleaseSummary release_summary = 14;
  bool has_release_summary() const;
  private:
  bool _internal_has_release_summary() const;
  public:
  void clear_release_summary();
  const ::mead101::mead::ReleaseSummary& release_summary() const;
  ::mead101::mead::ReleaseSummary* release_release_summary();
  ::mead101::mead::ReleaseSummary* mutable_release_summary();
  void set_allocated_release_summary(::mead101::mead::ReleaseSummary* release_summary);
  private:
  const ::mead101::mead::ReleaseSummary& _internal_release_summary() const;
  ::mead101::mead::ReleaseSummary* _internal_mutable_release_summary();
  public:
  void unsafe_arena_set_allocated_release_summary(
      ::mead101::mead::ReleaseSummary* release_summary);
  ::mead101::mead::ReleaseSummary* unsafe_arena_release_release_summary();

  // optional .mead101.mead.SubGenreCategory sub_genre_category = 15;
  bool has_sub_genre_category() const;
  private:
  bool _internal_has_sub_genre_category() const;
  public:
  void clear_sub_genre_category();
  const ::mead101::mead::SubGenreCategory& sub_genre_category() const;
  ::mead101::mead::SubGenreCategory* release_sub_genre_category();
  ::mead101::mead::SubGenreCategory* mutable_sub_genre_category();
  void set_allocated_sub_genre_category(::mead101::mead::SubGenreCategory* sub_genre_category);
  private:
  const ::mead101::mead::SubGenreCategory& _internal_sub_genre_category() const;
  ::mead101::mead::SubGenreCategory* _internal_mutable_sub_genre_category();
  public:
  void unsafe_arena_set_allocated_sub_genre_category(
      ::mead101::mead::SubGenreCategory* sub_genre_category);
  ::mead101::mead::SubGenreCategory* unsafe_arena_release_sub_genre_category();

  // @@protoc_insertion_point(class_scope:mead101.mead.ReleaseInformation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::AlternativeTitle > alternative_title_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::ArtisticInfluence > artistic_influence_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Award > award_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::CommentaryNote > commentary_note_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Epoch > epoch_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::GenreCategory > genre_category_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::HistoricChartingInformation > historic_charting_information_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Image > image_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::SimilarRelease > is_similar_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Mood > mood_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Theme > theme_;
  ::mead101::avs::CurrentTerritoryCode* applicable_territory_code_;
  ::mead101::mead::ddex_IsoDate* priority_period_end_date_;
  ::mead101::mead::ddex_IsoDate* priority_period_start_date_;
  ::mead101::mead::ReleaseSummary* release_summary_;
  ::mead101::mead::SubGenreCategory* sub_genre_category_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class ReleaseInformationList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.ReleaseInformationList) */ {
 public:
  inline ReleaseInformationList() : ReleaseInformationList(nullptr) {}
  virtual ~ReleaseInformationList();

  ReleaseInformationList(const ReleaseInformationList& from);
  ReleaseInformationList(ReleaseInformationList&& from) noexcept
    : ReleaseInformationList() {
    *this = ::std::move(from);
  }

  inline ReleaseInformationList& operator=(const ReleaseInformationList& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReleaseInformationList& operator=(ReleaseInformationList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReleaseInformationList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReleaseInformationList* internal_default_instance() {
    return reinterpret_cast<const ReleaseInformationList*>(
               &_ReleaseInformationList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    109;

  friend void swap(ReleaseInformationList& a, ReleaseInformationList& b) {
    a.Swap(&b);
  }
  inline void Swap(ReleaseInformationList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReleaseInformationList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReleaseInformationList* New() const final {
    return CreateMaybeMessage<ReleaseInformationList>(nullptr);
  }

  ReleaseInformationList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReleaseInformationList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReleaseInformationList& from);
  void MergeFrom(const ReleaseInformationList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReleaseInformationList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.ReleaseInformationList";
  }
  protected:
  explicit ReleaseInformationList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReleaseInformationFieldNumber = 1,
  };
  // repeated .mead101.mead.ReleaseInformation release_information = 1;
  int release_information_size() const;
  private:
  int _internal_release_information_size() const;
  public:
  void clear_release_information();
  ::mead101::mead::ReleaseInformation* mutable_release_information(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::ReleaseInformation >*
      mutable_release_information();
  private:
  const ::mead101::mead::ReleaseInformation& _internal_release_information(int index) const;
  ::mead101::mead::ReleaseInformation* _internal_add_release_information();
  public:
  const ::mead101::mead::ReleaseInformation& release_information(int index) const;
  ::mead101::mead::ReleaseInformation* add_release_information();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::ReleaseInformation >&
      release_information() const;

  // @@protoc_insertion_point(class_scope:mead101.mead.ReleaseInformationList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::ReleaseInformation > release_information_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class ReleaseSummary PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.ReleaseSummary) */ {
 public:
  inline ReleaseSummary() : ReleaseSummary(nullptr) {}
  virtual ~ReleaseSummary();

  ReleaseSummary(const ReleaseSummary& from);
  ReleaseSummary(ReleaseSummary&& from) noexcept
    : ReleaseSummary() {
    *this = ::std::move(from);
  }

  inline ReleaseSummary& operator=(const ReleaseSummary& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReleaseSummary& operator=(ReleaseSummary&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReleaseSummary& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReleaseSummary* internal_default_instance() {
    return reinterpret_cast<const ReleaseSummary*>(
               &_ReleaseSummary_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    110;

  friend void swap(ReleaseSummary& a, ReleaseSummary& b) {
    a.Swap(&b);
  }
  inline void Swap(ReleaseSummary* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReleaseSummary* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReleaseSummary* New() const final {
    return CreateMaybeMessage<ReleaseSummary>(nullptr);
  }

  ReleaseSummary* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReleaseSummary>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReleaseSummary& from);
  void MergeFrom(const ReleaseSummary& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReleaseSummary* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.ReleaseSummary";
  }
  protected:
  explicit ReleaseSummary(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDisplayArtistFieldNumber = 1,
    kDisplayTitleFieldNumber = 2,
    kReleaseIdFieldNumber = 3,
  };
  // repeated .mead101.mead.PartyNameWithTerritory display_artist = 1;
  int display_artist_size() const;
  private:
  int _internal_display_artist_size() const;
  public:
  void clear_display_artist();
  ::mead101::mead::PartyNameWithTerritory* mutable_display_artist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::PartyNameWithTerritory >*
      mutable_display_artist();
  private:
  const ::mead101::mead::PartyNameWithTerritory& _internal_display_artist(int index) const;
  ::mead101::mead::PartyNameWithTerritory* _internal_add_display_artist();
  public:
  const ::mead101::mead::PartyNameWithTerritory& display_artist(int index) const;
  ::mead101::mead::PartyNameWithTerritory* add_display_artist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::PartyNameWithTerritory >&
      display_artist() const;

  // repeated .mead101.mead.DisplayTitle display_title = 2;
  int display_title_size() const;
  private:
  int _internal_display_title_size() const;
  public:
  void clear_display_title();
  ::mead101::mead::DisplayTitle* mutable_display_title(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::DisplayTitle >*
      mutable_display_title();
  private:
  const ::mead101::mead::DisplayTitle& _internal_display_title(int index) const;
  ::mead101::mead::DisplayTitle* _internal_add_display_title();
  public:
  const ::mead101::mead::DisplayTitle& display_title(int index) const;
  ::mead101::mead::DisplayTitle* add_display_title();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::DisplayTitle >&
      display_title() const;

  // optional .mead101.mead.ReleaseId release_id = 3;
  bool has_release_id() const;
  private:
  bool _internal_has_release_id() const;
  public:
  void clear_release_id();
  const ::mead101::mead::ReleaseId& release_id() const;
  ::mead101::mead::ReleaseId* release_release_id();
  ::mead101::mead::ReleaseId* mutable_release_id();
  void set_allocated_release_id(::mead101::mead::ReleaseId* release_id);
  private:
  const ::mead101::mead::ReleaseId& _internal_release_id() const;
  ::mead101::mead::ReleaseId* _internal_mutable_release_id();
  public:
  void unsafe_arena_set_allocated_release_id(
      ::mead101::mead::ReleaseId* release_id);
  ::mead101::mead::ReleaseId* unsafe_arena_release_release_id();

  // @@protoc_insertion_point(class_scope:mead101.mead.ReleaseSummary)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::PartyNameWithTerritory > display_artist_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::DisplayTitle > display_title_;
  ::mead101::mead::ReleaseId* release_id_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class ReleaseTitle PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.ReleaseTitle) */ {
 public:
  inline ReleaseTitle() : ReleaseTitle(nullptr) {}
  virtual ~ReleaseTitle();

  ReleaseTitle(const ReleaseTitle& from);
  ReleaseTitle(ReleaseTitle&& from) noexcept
    : ReleaseTitle() {
    *this = ::std::move(from);
  }

  inline ReleaseTitle& operator=(const ReleaseTitle& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReleaseTitle& operator=(ReleaseTitle&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReleaseTitle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReleaseTitle* internal_default_instance() {
    return reinterpret_cast<const ReleaseTitle*>(
               &_ReleaseTitle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    111;

  friend void swap(ReleaseTitle& a, ReleaseTitle& b) {
    a.Swap(&b);
  }
  inline void Swap(ReleaseTitle* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReleaseTitle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReleaseTitle* New() const final {
    return CreateMaybeMessage<ReleaseTitle>(nullptr);
  }

  ReleaseTitle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReleaseTitle>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReleaseTitle& from);
  void MergeFrom(const ReleaseTitle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReleaseTitle* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.ReleaseTitle";
  }
  protected:
  explicit ReleaseTitle(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLanguageAndScriptCodeFieldNumber = 1,
    kExtValueFieldNumber = 2,
  };
  // optional string language_and_script_code = 1;
  bool has_language_and_script_code() const;
  private:
  bool _internal_has_language_and_script_code() const;
  public:
  void clear_language_and_script_code();
  const std::string& language_and_script_code() const;
  void set_language_and_script_code(const std::string& value);
  void set_language_and_script_code(std::string&& value);
  void set_language_and_script_code(const char* value);
  void set_language_and_script_code(const char* value, size_t size);
  std::string* mutable_language_and_script_code();
  std::string* release_language_and_script_code();
  void set_allocated_language_and_script_code(std::string* language_and_script_code);
  private:
  const std::string& _internal_language_and_script_code() const;
  void _internal_set_language_and_script_code(const std::string& value);
  std::string* _internal_mutable_language_and_script_code();
  public:

  // optional string ext_value = 2;
  bool has_ext_value() const;
  private:
  bool _internal_has_ext_value() const;
  public:
  void clear_ext_value();
  const std::string& ext_value() const;
  void set_ext_value(const std::string& value);
  void set_ext_value(std::string&& value);
  void set_ext_value(const char* value);
  void set_ext_value(const char* value, size_t size);
  std::string* mutable_ext_value();
  std::string* release_ext_value();
  void set_allocated_ext_value(std::string* ext_value);
  private:
  const std::string& _internal_ext_value() const;
  void _internal_set_ext_value(const std::string& value);
  std::string* _internal_mutable_ext_value();
  public:

  // @@protoc_insertion_point(class_scope:mead101.mead.ReleaseTitle)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_and_script_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ext_value_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class Resource PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.Resource) */ {
 public:
  inline Resource() : Resource(nullptr) {}
  virtual ~Resource();

  Resource(const Resource& from);
  Resource(Resource&& from) noexcept
    : Resource() {
    *this = ::std::move(from);
  }

  inline Resource& operator=(const Resource& from) {
    CopyFrom(from);
    return *this;
  }
  inline Resource& operator=(Resource&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Resource& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Resource* internal_default_instance() {
    return reinterpret_cast<const Resource*>(
               &_Resource_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    112;

  friend void swap(Resource& a, Resource& b) {
    a.Swap(&b);
  }
  inline void Swap(Resource* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Resource* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Resource* New() const final {
    return CreateMaybeMessage<Resource>(nullptr);
  }

  Resource* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Resource>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Resource& from);
  void MergeFrom(const Resource& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Resource* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.Resource";
  }
  protected:
  explicit Resource(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDisplayArtistFieldNumber = 2,
    kResourceTitleFieldNumber = 5,
    kCatalogNumberFieldNumber = 1,
    kISRCFieldNumber = 3,
    kProprietaryResourceIdFieldNumber = 4,
  };
  // repeated .mead101.mead.DisplayArtist display_artist = 2;
  int display_artist_size() const;
  private:
  int _internal_display_artist_size() const;
  public:
  void clear_display_artist();
  ::mead101::mead::DisplayArtist* mutable_display_artist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::DisplayArtist >*
      mutable_display_artist();
  private:
  const ::mead101::mead::DisplayArtist& _internal_display_artist(int index) const;
  ::mead101::mead::DisplayArtist* _internal_add_display_artist();
  public:
  const ::mead101::mead::DisplayArtist& display_artist(int index) const;
  ::mead101::mead::DisplayArtist* add_display_artist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::DisplayArtist >&
      display_artist() const;

  // repeated .mead101.mead.ResourceTitle resource_title = 5;
  int resource_title_size() const;
  private:
  int _internal_resource_title_size() const;
  public:
  void clear_resource_title();
  ::mead101::mead::ResourceTitle* mutable_resource_title(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::ResourceTitle >*
      mutable_resource_title();
  private:
  const ::mead101::mead::ResourceTitle& _internal_resource_title(int index) const;
  ::mead101::mead::ResourceTitle* _internal_add_resource_title();
  public:
  const ::mead101::mead::ResourceTitle& resource_title(int index) const;
  ::mead101::mead::ResourceTitle* add_resource_title();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::ResourceTitle >&
      resource_title() const;

  // optional string catalog_number = 1;
  bool has_catalog_number() const;
  private:
  bool _internal_has_catalog_number() const;
  public:
  void clear_catalog_number();
  const std::string& catalog_number() const;
  void set_catalog_number(const std::string& value);
  void set_catalog_number(std::string&& value);
  void set_catalog_number(const char* value);
  void set_catalog_number(const char* value, size_t size);
  std::string* mutable_catalog_number();
  std::string* release_catalog_number();
  void set_allocated_catalog_number(std::string* catalog_number);
  private:
  const std::string& _internal_catalog_number() const;
  void _internal_set_catalog_number(const std::string& value);
  std::string* _internal_mutable_catalog_number();
  public:

  // optional string i_s_r_c = 3;
  bool has_i_s_r_c() const;
  private:
  bool _internal_has_i_s_r_c() const;
  public:
  void clear_i_s_r_c();
  const std::string& i_s_r_c() const;
  void set_i_s_r_c(const std::string& value);
  void set_i_s_r_c(std::string&& value);
  void set_i_s_r_c(const char* value);
  void set_i_s_r_c(const char* value, size_t size);
  std::string* mutable_i_s_r_c();
  std::string* release_i_s_r_c();
  void set_allocated_i_s_r_c(std::string* i_s_r_c);
  private:
  const std::string& _internal_i_s_r_c() const;
  void _internal_set_i_s_r_c(const std::string& value);
  std::string* _internal_mutable_i_s_r_c();
  public:

  // optional string proprietary_resource_id = 4;
  bool has_proprietary_resource_id() const;
  private:
  bool _internal_has_proprietary_resource_id() const;
  public:
  void clear_proprietary_resource_id();
  const std::string& proprietary_resource_id() const;
  void set_proprietary_resource_id(const std::string& value);
  void set_proprietary_resource_id(std::string&& value);
  void set_proprietary_resource_id(const char* value);
  void set_proprietary_resource_id(const char* value, size_t size);
  std::string* mutable_proprietary_resource_id();
  std::string* release_proprietary_resource_id();
  void set_allocated_proprietary_resource_id(std::string* proprietary_resource_id);
  private:
  const std::string& _internal_proprietary_resource_id() const;
  void _internal_set_proprietary_resource_id(const std::string& value);
  std::string* _internal_mutable_proprietary_resource_id();
  public:

  // @@protoc_insertion_point(class_scope:mead101.mead.Resource)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::DisplayArtist > display_artist_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::ResourceTitle > resource_title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr catalog_number_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr i_s_r_c_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr proprietary_resource_id_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class ResourceContributorRole PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.ResourceContributorRole) */ {
 public:
  inline ResourceContributorRole() : ResourceContributorRole(nullptr) {}
  virtual ~ResourceContributorRole();

  ResourceContributorRole(const ResourceContributorRole& from);
  ResourceContributorRole(ResourceContributorRole&& from) noexcept
    : ResourceContributorRole() {
    *this = ::std::move(from);
  }

  inline ResourceContributorRole& operator=(const ResourceContributorRole& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResourceContributorRole& operator=(ResourceContributorRole&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResourceContributorRole& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResourceContributorRole* internal_default_instance() {
    return reinterpret_cast<const ResourceContributorRole*>(
               &_ResourceContributorRole_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    113;

  friend void swap(ResourceContributorRole& a, ResourceContributorRole& b) {
    a.Swap(&b);
  }
  inline void Swap(ResourceContributorRole* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResourceContributorRole* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResourceContributorRole* New() const final {
    return CreateMaybeMessage<ResourceContributorRole>(nullptr);
  }

  ResourceContributorRole* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResourceContributorRole>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResourceContributorRole& from);
  void MergeFrom(const ResourceContributorRole& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResourceContributorRole* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.ResourceContributorRole";
  }
  protected:
  explicit ResourceContributorRole(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNamespaceFieldNumber = 1,
    kUserDefinedValueFieldNumber = 2,
    kExtValueFieldNumber = 3,
  };
  // optional string namespace = 1;
  bool has_namespace_() const;
  private:
  bool _internal_has_namespace_() const;
  public:
  void clear_namespace_();
  const std::string& namespace_() const;
  void set_namespace_(const std::string& value);
  void set_namespace_(std::string&& value);
  void set_namespace_(const char* value);
  void set_namespace_(const char* value, size_t size);
  std::string* mutable_namespace_();
  std::string* release_namespace_();
  void set_allocated_namespace_(std::string* namespace_);
  private:
  const std::string& _internal_namespace_() const;
  void _internal_set_namespace_(const std::string& value);
  std::string* _internal_mutable_namespace_();
  public:

  // optional string user_defined_value = 2;
  bool has_user_defined_value() const;
  private:
  bool _internal_has_user_defined_value() const;
  public:
  void clear_user_defined_value();
  const std::string& user_defined_value() const;
  void set_user_defined_value(const std::string& value);
  void set_user_defined_value(std::string&& value);
  void set_user_defined_value(const char* value);
  void set_user_defined_value(const char* value, size_t size);
  std::string* mutable_user_defined_value();
  std::string* release_user_defined_value();
  void set_allocated_user_defined_value(std::string* user_defined_value);
  private:
  const std::string& _internal_user_defined_value() const;
  void _internal_set_user_defined_value(const std::string& value);
  std::string* _internal_mutable_user_defined_value();
  public:

  // optional .mead101.avs.ResourceContributorRole ext_value = 3;
  bool has_ext_value() const;
  private:
  bool _internal_has_ext_value() const;
  public:
  void clear_ext_value();
  const ::mead101::avs::ResourceContributorRole& ext_value() const;
  ::mead101::avs::ResourceContributorRole* release_ext_value();
  ::mead101::avs::ResourceContributorRole* mutable_ext_value();
  void set_allocated_ext_value(::mead101::avs::ResourceContributorRole* ext_value);
  private:
  const ::mead101::avs::ResourceContributorRole& _internal_ext_value() const;
  ::mead101::avs::ResourceContributorRole* _internal_mutable_ext_value();
  public:
  void unsafe_arena_set_allocated_ext_value(
      ::mead101::avs::ResourceContributorRole* ext_value);
  ::mead101::avs::ResourceContributorRole* unsafe_arena_release_ext_value();

  // @@protoc_insertion_point(class_scope:mead101.mead.ResourceContributorRole)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr namespace__;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_defined_value_;
  ::mead101::avs::ResourceContributorRole* ext_value_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class ResourceId PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.ResourceId) */ {
 public:
  inline ResourceId() : ResourceId(nullptr) {}
  virtual ~ResourceId();

  ResourceId(const ResourceId& from);
  ResourceId(ResourceId&& from) noexcept
    : ResourceId() {
    *this = ::std::move(from);
  }

  inline ResourceId& operator=(const ResourceId& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResourceId& operator=(ResourceId&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResourceId& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResourceId* internal_default_instance() {
    return reinterpret_cast<const ResourceId*>(
               &_ResourceId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    114;

  friend void swap(ResourceId& a, ResourceId& b) {
    a.Swap(&b);
  }
  inline void Swap(ResourceId* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResourceId* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResourceId* New() const final {
    return CreateMaybeMessage<ResourceId>(nullptr);
  }

  ResourceId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResourceId>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResourceId& from);
  void MergeFrom(const ResourceId& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResourceId* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.ResourceId";
  }
  protected:
  explicit ResourceId(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProprietaryIdFieldNumber = 7,
    kISANFieldNumber = 2,
    kISBNFieldNumber = 3,
    kISMNFieldNumber = 4,
    kISRCFieldNumber = 5,
    kISSNFieldNumber = 6,
    kSICIFieldNumber = 8,
    kVISANFieldNumber = 9,
    kCatalogNumberFieldNumber = 1,
  };
  // repeated .mead101.mead.ProprietaryId proprietary_id = 7;
  int proprietary_id_size() const;
  private:
  int _internal_proprietary_id_size() const;
  public:
  void clear_proprietary_id();
  ::mead101::mead::ProprietaryId* mutable_proprietary_id(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::ProprietaryId >*
      mutable_proprietary_id();
  private:
  const ::mead101::mead::ProprietaryId& _internal_proprietary_id(int index) const;
  ::mead101::mead::ProprietaryId* _internal_add_proprietary_id();
  public:
  const ::mead101::mead::ProprietaryId& proprietary_id(int index) const;
  ::mead101::mead::ProprietaryId* add_proprietary_id();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::ProprietaryId >&
      proprietary_id() const;

  // optional string i_s_a_n = 2;
  bool has_i_s_a_n() const;
  private:
  bool _internal_has_i_s_a_n() const;
  public:
  void clear_i_s_a_n();
  const std::string& i_s_a_n() const;
  void set_i_s_a_n(const std::string& value);
  void set_i_s_a_n(std::string&& value);
  void set_i_s_a_n(const char* value);
  void set_i_s_a_n(const char* value, size_t size);
  std::string* mutable_i_s_a_n();
  std::string* release_i_s_a_n();
  void set_allocated_i_s_a_n(std::string* i_s_a_n);
  private:
  const std::string& _internal_i_s_a_n() const;
  void _internal_set_i_s_a_n(const std::string& value);
  std::string* _internal_mutable_i_s_a_n();
  public:

  // optional string i_s_b_n = 3;
  bool has_i_s_b_n() const;
  private:
  bool _internal_has_i_s_b_n() const;
  public:
  void clear_i_s_b_n();
  const std::string& i_s_b_n() const;
  void set_i_s_b_n(const std::string& value);
  void set_i_s_b_n(std::string&& value);
  void set_i_s_b_n(const char* value);
  void set_i_s_b_n(const char* value, size_t size);
  std::string* mutable_i_s_b_n();
  std::string* release_i_s_b_n();
  void set_allocated_i_s_b_n(std::string* i_s_b_n);
  private:
  const std::string& _internal_i_s_b_n() const;
  void _internal_set_i_s_b_n(const std::string& value);
  std::string* _internal_mutable_i_s_b_n();
  public:

  // optional string i_s_m_n = 4;
  bool has_i_s_m_n() const;
  private:
  bool _internal_has_i_s_m_n() const;
  public:
  void clear_i_s_m_n();
  const std::string& i_s_m_n() const;
  void set_i_s_m_n(const std::string& value);
  void set_i_s_m_n(std::string&& value);
  void set_i_s_m_n(const char* value);
  void set_i_s_m_n(const char* value, size_t size);
  std::string* mutable_i_s_m_n();
  std::string* release_i_s_m_n();
  void set_allocated_i_s_m_n(std::string* i_s_m_n);
  private:
  const std::string& _internal_i_s_m_n() const;
  void _internal_set_i_s_m_n(const std::string& value);
  std::string* _internal_mutable_i_s_m_n();
  public:

  // optional string i_s_r_c = 5;
  bool has_i_s_r_c() const;
  private:
  bool _internal_has_i_s_r_c() const;
  public:
  void clear_i_s_r_c();
  const std::string& i_s_r_c() const;
  void set_i_s_r_c(const std::string& value);
  void set_i_s_r_c(std::string&& value);
  void set_i_s_r_c(const char* value);
  void set_i_s_r_c(const char* value, size_t size);
  std::string* mutable_i_s_r_c();
  std::string* release_i_s_r_c();
  void set_allocated_i_s_r_c(std::string* i_s_r_c);
  private:
  const std::string& _internal_i_s_r_c() const;
  void _internal_set_i_s_r_c(const std::string& value);
  std::string* _internal_mutable_i_s_r_c();
  public:

  // optional string i_s_s_n = 6;
  bool has_i_s_s_n() const;
  private:
  bool _internal_has_i_s_s_n() const;
  public:
  void clear_i_s_s_n();
  const std::string& i_s_s_n() const;
  void set_i_s_s_n(const std::string& value);
  void set_i_s_s_n(std::string&& value);
  void set_i_s_s_n(const char* value);
  void set_i_s_s_n(const char* value, size_t size);
  std::string* mutable_i_s_s_n();
  std::string* release_i_s_s_n();
  void set_allocated_i_s_s_n(std::string* i_s_s_n);
  private:
  const std::string& _internal_i_s_s_n() const;
  void _internal_set_i_s_s_n(const std::string& value);
  std::string* _internal_mutable_i_s_s_n();
  public:

  // optional string s_i_c_i = 8;
  bool has_s_i_c_i() const;
  private:
  bool _internal_has_s_i_c_i() const;
  public:
  void clear_s_i_c_i();
  const std::string& s_i_c_i() const;
  void set_s_i_c_i(const std::string& value);
  void set_s_i_c_i(std::string&& value);
  void set_s_i_c_i(const char* value);
  void set_s_i_c_i(const char* value, size_t size);
  std::string* mutable_s_i_c_i();
  std::string* release_s_i_c_i();
  void set_allocated_s_i_c_i(std::string* s_i_c_i);
  private:
  const std::string& _internal_s_i_c_i() const;
  void _internal_set_s_i_c_i(const std::string& value);
  std::string* _internal_mutable_s_i_c_i();
  public:

  // optional string v_i_s_a_n = 9;
  bool has_v_i_s_a_n() const;
  private:
  bool _internal_has_v_i_s_a_n() const;
  public:
  void clear_v_i_s_a_n();
  const std::string& v_i_s_a_n() const;
  void set_v_i_s_a_n(const std::string& value);
  void set_v_i_s_a_n(std::string&& value);
  void set_v_i_s_a_n(const char* value);
  void set_v_i_s_a_n(const char* value, size_t size);
  std::string* mutable_v_i_s_a_n();
  std::string* release_v_i_s_a_n();
  void set_allocated_v_i_s_a_n(std::string* v_i_s_a_n);
  private:
  const std::string& _internal_v_i_s_a_n() const;
  void _internal_set_v_i_s_a_n(const std::string& value);
  std::string* _internal_mutable_v_i_s_a_n();
  public:

  // optional .mead101.mead.CatalogNumber catalog_number = 1;
  bool has_catalog_number() const;
  private:
  bool _internal_has_catalog_number() const;
  public:
  void clear_catalog_number();
  const ::mead101::mead::CatalogNumber& catalog_number() const;
  ::mead101::mead::CatalogNumber* release_catalog_number();
  ::mead101::mead::CatalogNumber* mutable_catalog_number();
  void set_allocated_catalog_number(::mead101::mead::CatalogNumber* catalog_number);
  private:
  const ::mead101::mead::CatalogNumber& _internal_catalog_number() const;
  ::mead101::mead::CatalogNumber* _internal_mutable_catalog_number();
  public:
  void unsafe_arena_set_allocated_catalog_number(
      ::mead101::mead::CatalogNumber* catalog_number);
  ::mead101::mead::CatalogNumber* unsafe_arena_release_catalog_number();

  // @@protoc_insertion_point(class_scope:mead101.mead.ResourceId)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::ProprietaryId > proprietary_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr i_s_a_n_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr i_s_b_n_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr i_s_m_n_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr i_s_r_c_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr i_s_s_n_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr s_i_c_i_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr v_i_s_a_n_;
  ::mead101::mead::CatalogNumber* catalog_number_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class ResourceInformation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.ResourceInformation) */ {
 public:
  inline ResourceInformation() : ResourceInformation(nullptr) {}
  virtual ~ResourceInformation();

  ResourceInformation(const ResourceInformation& from);
  ResourceInformation(ResourceInformation&& from) noexcept
    : ResourceInformation() {
    *this = ::std::move(from);
  }

  inline ResourceInformation& operator=(const ResourceInformation& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResourceInformation& operator=(ResourceInformation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResourceInformation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResourceInformation* internal_default_instance() {
    return reinterpret_cast<const ResourceInformation*>(
               &_ResourceInformation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    115;

  friend void swap(ResourceInformation& a, ResourceInformation& b) {
    a.Swap(&b);
  }
  inline void Swap(ResourceInformation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResourceInformation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResourceInformation* New() const final {
    return CreateMaybeMessage<ResourceInformation>(nullptr);
  }

  ResourceInformation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResourceInformation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResourceInformation& from);
  void MergeFrom(const ResourceInformation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResourceInformation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.ResourceInformation";
  }
  protected:
  explicit ResourceInformation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAlternativeTitleFieldNumber = 2,
    kArtisticInfluenceFieldNumber = 4,
    kAwardFieldNumber = 5,
    kCommentaryNoteFieldNumber = 7,
    kDanceAndRhythmStyleFieldNumber = 8,
    kEpochFieldNumber = 9,
    kGenreCategoryFieldNumber = 10,
    kHistoricChartingInformationFieldNumber = 12,
    kImageFieldNumber = 13,
    kInstrumentUsedFieldNumber = 14,
    kIsSimilarFieldNumber = 17,
    kLocationAndDateOfSessionFieldNumber = 18,
    kLyricThemeFieldNumber = 19,
    kLyricsFieldNumber = 20,
    kMoodFieldNumber = 21,
    kProgrammaticThemeFieldNumber = 24,
    kRecordingPartFieldNumber = 25,
    kRelatedResourceFieldNumber = 26,
    kSampleFieldNumber = 28,
    kUsageFieldNumber = 31,
    kUsedMusicalWorkFieldNumber = 32,
    kAbsolutePitchFieldNumber = 1,
    kApplicableTerritoryCodeFieldNumber = 3,
    kBeatsPerMinuteFieldNumber = 6,
    kHarmonyFieldNumber = 11,
    kIsCoverFieldNumber = 15,
    kIsOriginalFieldNumber = 16,
    kPriorityPeriodEndDateFieldNumber = 22,
    kPriorityPeriodStartDateFieldNumber = 23,
    kResourceSummaryFieldNumber = 27,
    kSubGenreCategoryFieldNumber = 29,
    kTimeSignatureFieldNumber = 30,
    kVocalRegisterFieldNumber = 33,
  };
  // repeated .mead101.mead.AlternativeTitle alternative_title = 2;
  int alternative_title_size() const;
  private:
  int _internal_alternative_title_size() const;
  public:
  void clear_alternative_title();
  ::mead101::mead::AlternativeTitle* mutable_alternative_title(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::AlternativeTitle >*
      mutable_alternative_title();
  private:
  const ::mead101::mead::AlternativeTitle& _internal_alternative_title(int index) const;
  ::mead101::mead::AlternativeTitle* _internal_add_alternative_title();
  public:
  const ::mead101::mead::AlternativeTitle& alternative_title(int index) const;
  ::mead101::mead::AlternativeTitle* add_alternative_title();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::AlternativeTitle >&
      alternative_title() const;

  // repeated .mead101.mead.ArtisticInfluence artistic_influence = 4;
  int artistic_influence_size() const;
  private:
  int _internal_artistic_influence_size() const;
  public:
  void clear_artistic_influence();
  ::mead101::mead::ArtisticInfluence* mutable_artistic_influence(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::ArtisticInfluence >*
      mutable_artistic_influence();
  private:
  const ::mead101::mead::ArtisticInfluence& _internal_artistic_influence(int index) const;
  ::mead101::mead::ArtisticInfluence* _internal_add_artistic_influence();
  public:
  const ::mead101::mead::ArtisticInfluence& artistic_influence(int index) const;
  ::mead101::mead::ArtisticInfluence* add_artistic_influence();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::ArtisticInfluence >&
      artistic_influence() const;

  // repeated .mead101.mead.Award award = 5;
  int award_size() const;
  private:
  int _internal_award_size() const;
  public:
  void clear_award();
  ::mead101::mead::Award* mutable_award(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Award >*
      mutable_award();
  private:
  const ::mead101::mead::Award& _internal_award(int index) const;
  ::mead101::mead::Award* _internal_add_award();
  public:
  const ::mead101::mead::Award& award(int index) const;
  ::mead101::mead::Award* add_award();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Award >&
      award() const;

  // repeated .mead101.mead.CommentaryNote commentary_note = 7;
  int commentary_note_size() const;
  private:
  int _internal_commentary_note_size() const;
  public:
  void clear_commentary_note();
  ::mead101::mead::CommentaryNote* mutable_commentary_note(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::CommentaryNote >*
      mutable_commentary_note();
  private:
  const ::mead101::mead::CommentaryNote& _internal_commentary_note(int index) const;
  ::mead101::mead::CommentaryNote* _internal_add_commentary_note();
  public:
  const ::mead101::mead::CommentaryNote& commentary_note(int index) const;
  ::mead101::mead::CommentaryNote* add_commentary_note();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::CommentaryNote >&
      commentary_note() const;

  // repeated .mead101.mead.DanceAndRhythmStyle dance_and_rhythm_style = 8;
  int dance_and_rhythm_style_size() const;
  private:
  int _internal_dance_and_rhythm_style_size() const;
  public:
  void clear_dance_and_rhythm_style();
  ::mead101::mead::DanceAndRhythmStyle* mutable_dance_and_rhythm_style(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::DanceAndRhythmStyle >*
      mutable_dance_and_rhythm_style();
  private:
  const ::mead101::mead::DanceAndRhythmStyle& _internal_dance_and_rhythm_style(int index) const;
  ::mead101::mead::DanceAndRhythmStyle* _internal_add_dance_and_rhythm_style();
  public:
  const ::mead101::mead::DanceAndRhythmStyle& dance_and_rhythm_style(int index) const;
  ::mead101::mead::DanceAndRhythmStyle* add_dance_and_rhythm_style();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::DanceAndRhythmStyle >&
      dance_and_rhythm_style() const;

  // repeated .mead101.mead.Epoch epoch = 9;
  int epoch_size() const;
  private:
  int _internal_epoch_size() const;
  public:
  void clear_epoch();
  ::mead101::mead::Epoch* mutable_epoch(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Epoch >*
      mutable_epoch();
  private:
  const ::mead101::mead::Epoch& _internal_epoch(int index) const;
  ::mead101::mead::Epoch* _internal_add_epoch();
  public:
  const ::mead101::mead::Epoch& epoch(int index) const;
  ::mead101::mead::Epoch* add_epoch();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Epoch >&
      epoch() const;

  // repeated .mead101.mead.GenreCategory genre_category = 10;
  int genre_category_size() const;
  private:
  int _internal_genre_category_size() const;
  public:
  void clear_genre_category();
  ::mead101::mead::GenreCategory* mutable_genre_category(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::GenreCategory >*
      mutable_genre_category();
  private:
  const ::mead101::mead::GenreCategory& _internal_genre_category(int index) const;
  ::mead101::mead::GenreCategory* _internal_add_genre_category();
  public:
  const ::mead101::mead::GenreCategory& genre_category(int index) const;
  ::mead101::mead::GenreCategory* add_genre_category();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::GenreCategory >&
      genre_category() const;

  // repeated .mead101.mead.HistoricChartingInformation historic_charting_information = 12;
  int historic_charting_information_size() const;
  private:
  int _internal_historic_charting_information_size() const;
  public:
  void clear_historic_charting_information();
  ::mead101::mead::HistoricChartingInformation* mutable_historic_charting_information(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::HistoricChartingInformation >*
      mutable_historic_charting_information();
  private:
  const ::mead101::mead::HistoricChartingInformation& _internal_historic_charting_information(int index) const;
  ::mead101::mead::HistoricChartingInformation* _internal_add_historic_charting_information();
  public:
  const ::mead101::mead::HistoricChartingInformation& historic_charting_information(int index) const;
  ::mead101::mead::HistoricChartingInformation* add_historic_charting_information();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::HistoricChartingInformation >&
      historic_charting_information() const;

  // repeated .mead101.mead.Image image = 13;
  int image_size() const;
  private:
  int _internal_image_size() const;
  public:
  void clear_image();
  ::mead101::mead::Image* mutable_image(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Image >*
      mutable_image();
  private:
  const ::mead101::mead::Image& _internal_image(int index) const;
  ::mead101::mead::Image* _internal_add_image();
  public:
  const ::mead101::mead::Image& image(int index) const;
  ::mead101::mead::Image* add_image();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Image >&
      image() const;

  // repeated .mead101.mead.InstrumentUsed instrument_used = 14;
  int instrument_used_size() const;
  private:
  int _internal_instrument_used_size() const;
  public:
  void clear_instrument_used();
  ::mead101::mead::InstrumentUsed* mutable_instrument_used(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::InstrumentUsed >*
      mutable_instrument_used();
  private:
  const ::mead101::mead::InstrumentUsed& _internal_instrument_used(int index) const;
  ::mead101::mead::InstrumentUsed* _internal_add_instrument_used();
  public:
  const ::mead101::mead::InstrumentUsed& instrument_used(int index) const;
  ::mead101::mead::InstrumentUsed* add_instrument_used();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::InstrumentUsed >&
      instrument_used() const;

  // repeated .mead101.mead.SimilarResource is_similar = 17;
  int is_similar_size() const;
  private:
  int _internal_is_similar_size() const;
  public:
  void clear_is_similar();
  ::mead101::mead::SimilarResource* mutable_is_similar(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::SimilarResource >*
      mutable_is_similar();
  private:
  const ::mead101::mead::SimilarResource& _internal_is_similar(int index) const;
  ::mead101::mead::SimilarResource* _internal_add_is_similar();
  public:
  const ::mead101::mead::SimilarResource& is_similar(int index) const;
  ::mead101::mead::SimilarResource* add_is_similar();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::SimilarResource >&
      is_similar() const;

  // repeated .mead101.mead.LocationAndDateOfSession location_and_date_of_session = 18;
  int location_and_date_of_session_size() const;
  private:
  int _internal_location_and_date_of_session_size() const;
  public:
  void clear_location_and_date_of_session();
  ::mead101::mead::LocationAndDateOfSession* mutable_location_and_date_of_session(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::LocationAndDateOfSession >*
      mutable_location_and_date_of_session();
  private:
  const ::mead101::mead::LocationAndDateOfSession& _internal_location_and_date_of_session(int index) const;
  ::mead101::mead::LocationAndDateOfSession* _internal_add_location_and_date_of_session();
  public:
  const ::mead101::mead::LocationAndDateOfSession& location_and_date_of_session(int index) const;
  ::mead101::mead::LocationAndDateOfSession* add_location_and_date_of_session();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::LocationAndDateOfSession >&
      location_and_date_of_session() const;

  // repeated .mead101.mead.Theme lyric_theme = 19;
  int lyric_theme_size() const;
  private:
  int _internal_lyric_theme_size() const;
  public:
  void clear_lyric_theme();
  ::mead101::mead::Theme* mutable_lyric_theme(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Theme >*
      mutable_lyric_theme();
  private:
  const ::mead101::mead::Theme& _internal_lyric_theme(int index) const;
  ::mead101::mead::Theme* _internal_add_lyric_theme();
  public:
  const ::mead101::mead::Theme& lyric_theme(int index) const;
  ::mead101::mead::Theme* add_lyric_theme();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Theme >&
      lyric_theme() const;

  // repeated .mead101.mead.Lyrics lyrics = 20;
  int lyrics_size() const;
  private:
  int _internal_lyrics_size() const;
  public:
  void clear_lyrics();
  ::mead101::mead::Lyrics* mutable_lyrics(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Lyrics >*
      mutable_lyrics();
  private:
  const ::mead101::mead::Lyrics& _internal_lyrics(int index) const;
  ::mead101::mead::Lyrics* _internal_add_lyrics();
  public:
  const ::mead101::mead::Lyrics& lyrics(int index) const;
  ::mead101::mead::Lyrics* add_lyrics();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Lyrics >&
      lyrics() const;

  // repeated .mead101.mead.Mood mood = 21;
  int mood_size() const;
  private:
  int _internal_mood_size() const;
  public:
  void clear_mood();
  ::mead101::mead::Mood* mutable_mood(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Mood >*
      mutable_mood();
  private:
  const ::mead101::mead::Mood& _internal_mood(int index) const;
  ::mead101::mead::Mood* _internal_add_mood();
  public:
  const ::mead101::mead::Mood& mood(int index) const;
  ::mead101::mead::Mood* add_mood();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Mood >&
      mood() const;

  // repeated .mead101.mead.Theme programmatic_theme = 24;
  int programmatic_theme_size() const;
  private:
  int _internal_programmatic_theme_size() const;
  public:
  void clear_programmatic_theme();
  ::mead101::mead::Theme* mutable_programmatic_theme(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Theme >*
      mutable_programmatic_theme();
  private:
  const ::mead101::mead::Theme& _internal_programmatic_theme(int index) const;
  ::mead101::mead::Theme* _internal_add_programmatic_theme();
  public:
  const ::mead101::mead::Theme& programmatic_theme(int index) const;
  ::mead101::mead::Theme* add_programmatic_theme();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Theme >&
      programmatic_theme() const;

  // repeated .mead101.mead.RecordingPart recording_part = 25;
  int recording_part_size() const;
  private:
  int _internal_recording_part_size() const;
  public:
  void clear_recording_part();
  ::mead101::mead::RecordingPart* mutable_recording_part(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::RecordingPart >*
      mutable_recording_part();
  private:
  const ::mead101::mead::RecordingPart& _internal_recording_part(int index) const;
  ::mead101::mead::RecordingPart* _internal_add_recording_part();
  public:
  const ::mead101::mead::RecordingPart& recording_part(int index) const;
  ::mead101::mead::RecordingPart* add_recording_part();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::RecordingPart >&
      recording_part() const;

  // repeated .mead101.mead.ResourceRelationship related_resource = 26;
  int related_resource_size() const;
  private:
  int _internal_related_resource_size() const;
  public:
  void clear_related_resource();
  ::mead101::mead::ResourceRelationship* mutable_related_resource(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::ResourceRelationship >*
      mutable_related_resource();
  private:
  const ::mead101::mead::ResourceRelationship& _internal_related_resource(int index) const;
  ::mead101::mead::ResourceRelationship* _internal_add_related_resource();
  public:
  const ::mead101::mead::ResourceRelationship& related_resource(int index) const;
  ::mead101::mead::ResourceRelationship* add_related_resource();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::ResourceRelationship >&
      related_resource() const;

  // repeated .mead101.mead.Sample sample = 28;
  int sample_size() const;
  private:
  int _internal_sample_size() const;
  public:
  void clear_sample();
  ::mead101::mead::Sample* mutable_sample(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Sample >*
      mutable_sample();
  private:
  const ::mead101::mead::Sample& _internal_sample(int index) const;
  ::mead101::mead::Sample* _internal_add_sample();
  public:
  const ::mead101::mead::Sample& sample(int index) const;
  ::mead101::mead::Sample* add_sample();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Sample >&
      sample() const;

  // repeated .mead101.mead.Usage usage = 31;
  int usage_size() const;
  private:
  int _internal_usage_size() const;
  public:
  void clear_usage();
  ::mead101::mead::Usage* mutable_usage(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Usage >*
      mutable_usage();
  private:
  const ::mead101::mead::Usage& _internal_usage(int index) const;
  ::mead101::mead::Usage* _internal_add_usage();
  public:
  const ::mead101::mead::Usage& usage(int index) const;
  ::mead101::mead::Usage* add_usage();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Usage >&
      usage() const;

  // repeated .mead101.mead.UsedMusicalWork used_musical_work = 32;
  int used_musical_work_size() const;
  private:
  int _internal_used_musical_work_size() const;
  public:
  void clear_used_musical_work();
  ::mead101::mead::UsedMusicalWork* mutable_used_musical_work(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::UsedMusicalWork >*
      mutable_used_musical_work();
  private:
  const ::mead101::mead::UsedMusicalWork& _internal_used_musical_work(int index) const;
  ::mead101::mead::UsedMusicalWork* _internal_add_used_musical_work();
  public:
  const ::mead101::mead::UsedMusicalWork& used_musical_work(int index) const;
  ::mead101::mead::UsedMusicalWork* add_used_musical_work();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::UsedMusicalWork >&
      used_musical_work() const;

  // optional .mead101.mead.AbsolutePitch absolute_pitch = 1;
  bool has_absolute_pitch() const;
  private:
  bool _internal_has_absolute_pitch() const;
  public:
  void clear_absolute_pitch();
  const ::mead101::mead::AbsolutePitch& absolute_pitch() const;
  ::mead101::mead::AbsolutePitch* release_absolute_pitch();
  ::mead101::mead::AbsolutePitch* mutable_absolute_pitch();
  void set_allocated_absolute_pitch(::mead101::mead::AbsolutePitch* absolute_pitch);
  private:
  const ::mead101::mead::AbsolutePitch& _internal_absolute_pitch() const;
  ::mead101::mead::AbsolutePitch* _internal_mutable_absolute_pitch();
  public:
  void unsafe_arena_set_allocated_absolute_pitch(
      ::mead101::mead::AbsolutePitch* absolute_pitch);
  ::mead101::mead::AbsolutePitch* unsafe_arena_release_absolute_pitch();

  // optional .mead101.avs.CurrentTerritoryCode applicable_territory_code = 3;
  bool has_applicable_territory_code() const;
  private:
  bool _internal_has_applicable_territory_code() const;
  public:
  void clear_applicable_territory_code();
  const ::mead101::avs::CurrentTerritoryCode& applicable_territory_code() const;
  ::mead101::avs::CurrentTerritoryCode* release_applicable_territory_code();
  ::mead101::avs::CurrentTerritoryCode* mutable_applicable_territory_code();
  void set_allocated_applicable_territory_code(::mead101::avs::CurrentTerritoryCode* applicable_territory_code);
  private:
  const ::mead101::avs::CurrentTerritoryCode& _internal_applicable_territory_code() const;
  ::mead101::avs::CurrentTerritoryCode* _internal_mutable_applicable_territory_code();
  public:
  void unsafe_arena_set_allocated_applicable_territory_code(
      ::mead101::avs::CurrentTerritoryCode* applicable_territory_code);
  ::mead101::avs::CurrentTerritoryCode* unsafe_arena_release_applicable_territory_code();

  // optional .mead101.mead.BeatsPerMinute beats_per_minute = 6;
  bool has_beats_per_minute() const;
  private:
  bool _internal_has_beats_per_minute() const;
  public:
  void clear_beats_per_minute();
  const ::mead101::mead::BeatsPerMinute& beats_per_minute() const;
  ::mead101::mead::BeatsPerMinute* release_beats_per_minute();
  ::mead101::mead::BeatsPerMinute* mutable_beats_per_minute();
  void set_allocated_beats_per_minute(::mead101::mead::BeatsPerMinute* beats_per_minute);
  private:
  const ::mead101::mead::BeatsPerMinute& _internal_beats_per_minute() const;
  ::mead101::mead::BeatsPerMinute* _internal_mutable_beats_per_minute();
  public:
  void unsafe_arena_set_allocated_beats_per_minute(
      ::mead101::mead::BeatsPerMinute* beats_per_minute);
  ::mead101::mead::BeatsPerMinute* unsafe_arena_release_beats_per_minute();

  // optional .mead101.mead.Harmony harmony = 11;
  bool has_harmony() const;
  private:
  bool _internal_has_harmony() const;
  public:
  void clear_harmony();
  const ::mead101::mead::Harmony& harmony() const;
  ::mead101::mead::Harmony* release_harmony();
  ::mead101::mead::Harmony* mutable_harmony();
  void set_allocated_harmony(::mead101::mead::Harmony* harmony);
  private:
  const ::mead101::mead::Harmony& _internal_harmony() const;
  ::mead101::mead::Harmony* _internal_mutable_harmony();
  public:
  void unsafe_arena_set_allocated_harmony(
      ::mead101::mead::Harmony* harmony);
  ::mead101::mead::Harmony* unsafe_arena_release_harmony();

  // optional .mead101.mead.Flag is_cover = 15;
  bool has_is_cover() const;
  private:
  bool _internal_has_is_cover() const;
  public:
  void clear_is_cover();
  const ::mead101::mead::Flag& is_cover() const;
  ::mead101::mead::Flag* release_is_cover();
  ::mead101::mead::Flag* mutable_is_cover();
  void set_allocated_is_cover(::mead101::mead::Flag* is_cover);
  private:
  const ::mead101::mead::Flag& _internal_is_cover() const;
  ::mead101::mead::Flag* _internal_mutable_is_cover();
  public:
  void unsafe_arena_set_allocated_is_cover(
      ::mead101::mead::Flag* is_cover);
  ::mead101::mead::Flag* unsafe_arena_release_is_cover();

  // optional .mead101.mead.Flag is_original = 16;
  bool has_is_original() const;
  private:
  bool _internal_has_is_original() const;
  public:
  void clear_is_original();
  const ::mead101::mead::Flag& is_original() const;
  ::mead101::mead::Flag* release_is_original();
  ::mead101::mead::Flag* mutable_is_original();
  void set_allocated_is_original(::mead101::mead::Flag* is_original);
  private:
  const ::mead101::mead::Flag& _internal_is_original() const;
  ::mead101::mead::Flag* _internal_mutable_is_original();
  public:
  void unsafe_arena_set_allocated_is_original(
      ::mead101::mead::Flag* is_original);
  ::mead101::mead::Flag* unsafe_arena_release_is_original();

  // optional .mead101.mead.ddex_IsoDate priority_period_end_date = 22;
  bool has_priority_period_end_date() const;
  private:
  bool _internal_has_priority_period_end_date() const;
  public:
  void clear_priority_period_end_date();
  const ::mead101::mead::ddex_IsoDate& priority_period_end_date() const;
  ::mead101::mead::ddex_IsoDate* release_priority_period_end_date();
  ::mead101::mead::ddex_IsoDate* mutable_priority_period_end_date();
  void set_allocated_priority_period_end_date(::mead101::mead::ddex_IsoDate* priority_period_end_date);
  private:
  const ::mead101::mead::ddex_IsoDate& _internal_priority_period_end_date() const;
  ::mead101::mead::ddex_IsoDate* _internal_mutable_priority_period_end_date();
  public:
  void unsafe_arena_set_allocated_priority_period_end_date(
      ::mead101::mead::ddex_IsoDate* priority_period_end_date);
  ::mead101::mead::ddex_IsoDate* unsafe_arena_release_priority_period_end_date();

  // optional .mead101.mead.ddex_IsoDate priority_period_start_date = 23;
  bool has_priority_period_start_date() const;
  private:
  bool _internal_has_priority_period_start_date() const;
  public:
  void clear_priority_period_start_date();
  const ::mead101::mead::ddex_IsoDate& priority_period_start_date() const;
  ::mead101::mead::ddex_IsoDate* release_priority_period_start_date();
  ::mead101::mead::ddex_IsoDate* mutable_priority_period_start_date();
  void set_allocated_priority_period_start_date(::mead101::mead::ddex_IsoDate* priority_period_start_date);
  private:
  const ::mead101::mead::ddex_IsoDate& _internal_priority_period_start_date() const;
  ::mead101::mead::ddex_IsoDate* _internal_mutable_priority_period_start_date();
  public:
  void unsafe_arena_set_allocated_priority_period_start_date(
      ::mead101::mead::ddex_IsoDate* priority_period_start_date);
  ::mead101::mead::ddex_IsoDate* unsafe_arena_release_priority_period_start_date();

  // optional .mead101.mead.ResourceSummary resource_summary = 27;
  bool has_resource_summary() const;
  private:
  bool _internal_has_resource_summary() const;
  public:
  void clear_resource_summary();
  const ::mead101::mead::ResourceSummary& resource_summary() const;
  ::mead101::mead::ResourceSummary* release_resource_summary();
  ::mead101::mead::ResourceSummary* mutable_resource_summary();
  void set_allocated_resource_summary(::mead101::mead::ResourceSummary* resource_summary);
  private:
  const ::mead101::mead::ResourceSummary& _internal_resource_summary() const;
  ::mead101::mead::ResourceSummary* _internal_mutable_resource_summary();
  public:
  void unsafe_arena_set_allocated_resource_summary(
      ::mead101::mead::ResourceSummary* resource_summary);
  ::mead101::mead::ResourceSummary* unsafe_arena_release_resource_summary();

  // optional .mead101.mead.SubGenreCategory sub_genre_category = 29;
  bool has_sub_genre_category() const;
  private:
  bool _internal_has_sub_genre_category() const;
  public:
  void clear_sub_genre_category();
  const ::mead101::mead::SubGenreCategory& sub_genre_category() const;
  ::mead101::mead::SubGenreCategory* release_sub_genre_category();
  ::mead101::mead::SubGenreCategory* mutable_sub_genre_category();
  void set_allocated_sub_genre_category(::mead101::mead::SubGenreCategory* sub_genre_category);
  private:
  const ::mead101::mead::SubGenreCategory& _internal_sub_genre_category() const;
  ::mead101::mead::SubGenreCategory* _internal_mutable_sub_genre_category();
  public:
  void unsafe_arena_set_allocated_sub_genre_category(
      ::mead101::mead::SubGenreCategory* sub_genre_category);
  ::mead101::mead::SubGenreCategory* unsafe_arena_release_sub_genre_category();

  // optional .mead101.mead.TimeSignature time_signature = 30;
  bool has_time_signature() const;
  private:
  bool _internal_has_time_signature() const;
  public:
  void clear_time_signature();
  const ::mead101::mead::TimeSignature& time_signature() const;
  ::mead101::mead::TimeSignature* release_time_signature();
  ::mead101::mead::TimeSignature* mutable_time_signature();
  void set_allocated_time_signature(::mead101::mead::TimeSignature* time_signature);
  private:
  const ::mead101::mead::TimeSignature& _internal_time_signature() const;
  ::mead101::mead::TimeSignature* _internal_mutable_time_signature();
  public:
  void unsafe_arena_set_allocated_time_signature(
      ::mead101::mead::TimeSignature* time_signature);
  ::mead101::mead::TimeSignature* unsafe_arena_release_time_signature();

  // optional .mead101.mead.VocalRegister vocal_register = 33;
  bool has_vocal_register() const;
  private:
  bool _internal_has_vocal_register() const;
  public:
  void clear_vocal_register();
  const ::mead101::mead::VocalRegister& vocal_register() const;
  ::mead101::mead::VocalRegister* release_vocal_register();
  ::mead101::mead::VocalRegister* mutable_vocal_register();
  void set_allocated_vocal_register(::mead101::mead::VocalRegister* vocal_register);
  private:
  const ::mead101::mead::VocalRegister& _internal_vocal_register() const;
  ::mead101::mead::VocalRegister* _internal_mutable_vocal_register();
  public:
  void unsafe_arena_set_allocated_vocal_register(
      ::mead101::mead::VocalRegister* vocal_register);
  ::mead101::mead::VocalRegister* unsafe_arena_release_vocal_register();

  // @@protoc_insertion_point(class_scope:mead101.mead.ResourceInformation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::AlternativeTitle > alternative_title_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::ArtisticInfluence > artistic_influence_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Award > award_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::CommentaryNote > commentary_note_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::DanceAndRhythmStyle > dance_and_rhythm_style_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Epoch > epoch_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::GenreCategory > genre_category_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::HistoricChartingInformation > historic_charting_information_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Image > image_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::InstrumentUsed > instrument_used_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::SimilarResource > is_similar_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::LocationAndDateOfSession > location_and_date_of_session_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Theme > lyric_theme_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Lyrics > lyrics_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Mood > mood_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Theme > programmatic_theme_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::RecordingPart > recording_part_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::ResourceRelationship > related_resource_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Sample > sample_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Usage > usage_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::UsedMusicalWork > used_musical_work_;
  ::mead101::mead::AbsolutePitch* absolute_pitch_;
  ::mead101::avs::CurrentTerritoryCode* applicable_territory_code_;
  ::mead101::mead::BeatsPerMinute* beats_per_minute_;
  ::mead101::mead::Harmony* harmony_;
  ::mead101::mead::Flag* is_cover_;
  ::mead101::mead::Flag* is_original_;
  ::mead101::mead::ddex_IsoDate* priority_period_end_date_;
  ::mead101::mead::ddex_IsoDate* priority_period_start_date_;
  ::mead101::mead::ResourceSummary* resource_summary_;
  ::mead101::mead::SubGenreCategory* sub_genre_category_;
  ::mead101::mead::TimeSignature* time_signature_;
  ::mead101::mead::VocalRegister* vocal_register_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class ResourceInformationList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.ResourceInformationList) */ {
 public:
  inline ResourceInformationList() : ResourceInformationList(nullptr) {}
  virtual ~ResourceInformationList();

  ResourceInformationList(const ResourceInformationList& from);
  ResourceInformationList(ResourceInformationList&& from) noexcept
    : ResourceInformationList() {
    *this = ::std::move(from);
  }

  inline ResourceInformationList& operator=(const ResourceInformationList& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResourceInformationList& operator=(ResourceInformationList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResourceInformationList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResourceInformationList* internal_default_instance() {
    return reinterpret_cast<const ResourceInformationList*>(
               &_ResourceInformationList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    116;

  friend void swap(ResourceInformationList& a, ResourceInformationList& b) {
    a.Swap(&b);
  }
  inline void Swap(ResourceInformationList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResourceInformationList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResourceInformationList* New() const final {
    return CreateMaybeMessage<ResourceInformationList>(nullptr);
  }

  ResourceInformationList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResourceInformationList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResourceInformationList& from);
  void MergeFrom(const ResourceInformationList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResourceInformationList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.ResourceInformationList";
  }
  protected:
  explicit ResourceInformationList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResourceInformationFieldNumber = 1,
  };
  // repeated .mead101.mead.ResourceInformation resource_information = 1;
  int resource_information_size() const;
  private:
  int _internal_resource_information_size() const;
  public:
  void clear_resource_information();
  ::mead101::mead::ResourceInformation* mutable_resource_information(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::ResourceInformation >*
      mutable_resource_information();
  private:
  const ::mead101::mead::ResourceInformation& _internal_resource_information(int index) const;
  ::mead101::mead::ResourceInformation* _internal_add_resource_information();
  public:
  const ::mead101::mead::ResourceInformation& resource_information(int index) const;
  ::mead101::mead::ResourceInformation* add_resource_information();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::ResourceInformation >&
      resource_information() const;

  // @@protoc_insertion_point(class_scope:mead101.mead.ResourceInformationList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::ResourceInformation > resource_information_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class ResourceRelationship PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.ResourceRelationship) */ {
 public:
  inline ResourceRelationship() : ResourceRelationship(nullptr) {}
  virtual ~ResourceRelationship();

  ResourceRelationship(const ResourceRelationship& from);
  ResourceRelationship(ResourceRelationship&& from) noexcept
    : ResourceRelationship() {
    *this = ::std::move(from);
  }

  inline ResourceRelationship& operator=(const ResourceRelationship& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResourceRelationship& operator=(ResourceRelationship&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResourceRelationship& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResourceRelationship* internal_default_instance() {
    return reinterpret_cast<const ResourceRelationship*>(
               &_ResourceRelationship_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    117;

  friend void swap(ResourceRelationship& a, ResourceRelationship& b) {
    a.Swap(&b);
  }
  inline void Swap(ResourceRelationship* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResourceRelationship* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResourceRelationship* New() const final {
    return CreateMaybeMessage<ResourceRelationship>(nullptr);
  }

  ResourceRelationship* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResourceRelationship>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResourceRelationship& from);
  void MergeFrom(const ResourceRelationship& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResourceRelationship* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.ResourceRelationship";
  }
  protected:
  explicit ResourceRelationship(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetadataSourceReferenceFieldNumber = 2,
    kTitleFieldNumber = 5,
    kDisplayArtistNameFieldNumber = 1,
    kRelatedResourceTypeFieldNumber = 3,
    kResourceIdFieldNumber = 4,
  };
  // repeated string metadata_source_reference = 2;
  int metadata_source_reference_size() const;
  private:
  int _internal_metadata_source_reference_size() const;
  public:
  void clear_metadata_source_reference();
  const std::string& metadata_source_reference(int index) const;
  std::string* mutable_metadata_source_reference(int index);
  void set_metadata_source_reference(int index, const std::string& value);
  void set_metadata_source_reference(int index, std::string&& value);
  void set_metadata_source_reference(int index, const char* value);
  void set_metadata_source_reference(int index, const char* value, size_t size);
  std::string* add_metadata_source_reference();
  void add_metadata_source_reference(const std::string& value);
  void add_metadata_source_reference(std::string&& value);
  void add_metadata_source_reference(const char* value);
  void add_metadata_source_reference(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& metadata_source_reference() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_metadata_source_reference();
  private:
  const std::string& _internal_metadata_source_reference(int index) const;
  std::string* _internal_add_metadata_source_reference();
  public:

  // repeated .mead101.mead.TitleWithPronunciation title = 5;
  int title_size() const;
  private:
  int _internal_title_size() const;
  public:
  void clear_title();
  ::mead101::mead::TitleWithPronunciation* mutable_title(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::TitleWithPronunciation >*
      mutable_title();
  private:
  const ::mead101::mead::TitleWithPronunciation& _internal_title(int index) const;
  ::mead101::mead::TitleWithPronunciation* _internal_add_title();
  public:
  const ::mead101::mead::TitleWithPronunciation& title(int index) const;
  ::mead101::mead::TitleWithPronunciation* add_title();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::TitleWithPronunciation >&
      title() const;

  // optional .mead101.mead.DisplayArtistNameWithDefault display_artist_name = 1;
  bool has_display_artist_name() const;
  private:
  bool _internal_has_display_artist_name() const;
  public:
  void clear_display_artist_name();
  const ::mead101::mead::DisplayArtistNameWithDefault& display_artist_name() const;
  ::mead101::mead::DisplayArtistNameWithDefault* release_display_artist_name();
  ::mead101::mead::DisplayArtistNameWithDefault* mutable_display_artist_name();
  void set_allocated_display_artist_name(::mead101::mead::DisplayArtistNameWithDefault* display_artist_name);
  private:
  const ::mead101::mead::DisplayArtistNameWithDefault& _internal_display_artist_name() const;
  ::mead101::mead::DisplayArtistNameWithDefault* _internal_mutable_display_artist_name();
  public:
  void unsafe_arena_set_allocated_display_artist_name(
      ::mead101::mead::DisplayArtistNameWithDefault* display_artist_name);
  ::mead101::mead::DisplayArtistNameWithDefault* unsafe_arena_release_display_artist_name();

  // optional .mead101.mead.RelatedResourceType related_resource_type = 3;
  bool has_related_resource_type() const;
  private:
  bool _internal_has_related_resource_type() const;
  public:
  void clear_related_resource_type();
  const ::mead101::mead::RelatedResourceType& related_resource_type() const;
  ::mead101::mead::RelatedResourceType* release_related_resource_type();
  ::mead101::mead::RelatedResourceType* mutable_related_resource_type();
  void set_allocated_related_resource_type(::mead101::mead::RelatedResourceType* related_resource_type);
  private:
  const ::mead101::mead::RelatedResourceType& _internal_related_resource_type() const;
  ::mead101::mead::RelatedResourceType* _internal_mutable_related_resource_type();
  public:
  void unsafe_arena_set_allocated_related_resource_type(
      ::mead101::mead::RelatedResourceType* related_resource_type);
  ::mead101::mead::RelatedResourceType* unsafe_arena_release_related_resource_type();

  // optional .mead101.mead.ResourceId resource_id = 4;
  bool has_resource_id() const;
  private:
  bool _internal_has_resource_id() const;
  public:
  void clear_resource_id();
  const ::mead101::mead::ResourceId& resource_id() const;
  ::mead101::mead::ResourceId* release_resource_id();
  ::mead101::mead::ResourceId* mutable_resource_id();
  void set_allocated_resource_id(::mead101::mead::ResourceId* resource_id);
  private:
  const ::mead101::mead::ResourceId& _internal_resource_id() const;
  ::mead101::mead::ResourceId* _internal_mutable_resource_id();
  public:
  void unsafe_arena_set_allocated_resource_id(
      ::mead101::mead::ResourceId* resource_id);
  ::mead101::mead::ResourceId* unsafe_arena_release_resource_id();

  // @@protoc_insertion_point(class_scope:mead101.mead.ResourceRelationship)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> metadata_source_reference_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::TitleWithPronunciation > title_;
  ::mead101::mead::DisplayArtistNameWithDefault* display_artist_name_;
  ::mead101::mead::RelatedResourceType* related_resource_type_;
  ::mead101::mead::ResourceId* resource_id_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class ResourceRelationshipType PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.ResourceRelationshipType) */ {
 public:
  inline ResourceRelationshipType() : ResourceRelationshipType(nullptr) {}
  virtual ~ResourceRelationshipType();

  ResourceRelationshipType(const ResourceRelationshipType& from);
  ResourceRelationshipType(ResourceRelationshipType&& from) noexcept
    : ResourceRelationshipType() {
    *this = ::std::move(from);
  }

  inline ResourceRelationshipType& operator=(const ResourceRelationshipType& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResourceRelationshipType& operator=(ResourceRelationshipType&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResourceRelationshipType& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResourceRelationshipType* internal_default_instance() {
    return reinterpret_cast<const ResourceRelationshipType*>(
               &_ResourceRelationshipType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    118;

  friend void swap(ResourceRelationshipType& a, ResourceRelationshipType& b) {
    a.Swap(&b);
  }
  inline void Swap(ResourceRelationshipType* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResourceRelationshipType* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResourceRelationshipType* New() const final {
    return CreateMaybeMessage<ResourceRelationshipType>(nullptr);
  }

  ResourceRelationshipType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResourceRelationshipType>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResourceRelationshipType& from);
  void MergeFrom(const ResourceRelationshipType& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResourceRelationshipType* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.ResourceRelationshipType";
  }
  protected:
  explicit ResourceRelationshipType(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNamespaceFieldNumber = 1,
    kUserDefinedValueFieldNumber = 2,
    kExtValueFieldNumber = 3,
  };
  // optional string namespace = 1;
  bool has_namespace_() const;
  private:
  bool _internal_has_namespace_() const;
  public:
  void clear_namespace_();
  const std::string& namespace_() const;
  void set_namespace_(const std::string& value);
  void set_namespace_(std::string&& value);
  void set_namespace_(const char* value);
  void set_namespace_(const char* value, size_t size);
  std::string* mutable_namespace_();
  std::string* release_namespace_();
  void set_allocated_namespace_(std::string* namespace_);
  private:
  const std::string& _internal_namespace_() const;
  void _internal_set_namespace_(const std::string& value);
  std::string* _internal_mutable_namespace_();
  public:

  // optional string user_defined_value = 2;
  bool has_user_defined_value() const;
  private:
  bool _internal_has_user_defined_value() const;
  public:
  void clear_user_defined_value();
  const std::string& user_defined_value() const;
  void set_user_defined_value(const std::string& value);
  void set_user_defined_value(std::string&& value);
  void set_user_defined_value(const char* value);
  void set_user_defined_value(const char* value, size_t size);
  std::string* mutable_user_defined_value();
  std::string* release_user_defined_value();
  void set_allocated_user_defined_value(std::string* user_defined_value);
  private:
  const std::string& _internal_user_defined_value() const;
  void _internal_set_user_defined_value(const std::string& value);
  std::string* _internal_mutable_user_defined_value();
  public:

  // optional .mead101.avs.ResourceRelationshipType ext_value = 3;
  bool has_ext_value() const;
  private:
  bool _internal_has_ext_value() const;
  public:
  void clear_ext_value();
  const ::mead101::avs::ResourceRelationshipType& ext_value() const;
  ::mead101::avs::ResourceRelationshipType* release_ext_value();
  ::mead101::avs::ResourceRelationshipType* mutable_ext_value();
  void set_allocated_ext_value(::mead101::avs::ResourceRelationshipType* ext_value);
  private:
  const ::mead101::avs::ResourceRelationshipType& _internal_ext_value() const;
  ::mead101::avs::ResourceRelationshipType* _internal_mutable_ext_value();
  public:
  void unsafe_arena_set_allocated_ext_value(
      ::mead101::avs::ResourceRelationshipType* ext_value);
  ::mead101::avs::ResourceRelationshipType* unsafe_arena_release_ext_value();

  // @@protoc_insertion_point(class_scope:mead101.mead.ResourceRelationshipType)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr namespace__;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_defined_value_;
  ::mead101::avs::ResourceRelationshipType* ext_value_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class ResourceSummary PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.ResourceSummary) */ {
 public:
  inline ResourceSummary() : ResourceSummary(nullptr) {}
  virtual ~ResourceSummary();

  ResourceSummary(const ResourceSummary& from);
  ResourceSummary(ResourceSummary&& from) noexcept
    : ResourceSummary() {
    *this = ::std::move(from);
  }

  inline ResourceSummary& operator=(const ResourceSummary& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResourceSummary& operator=(ResourceSummary&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResourceSummary& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResourceSummary* internal_default_instance() {
    return reinterpret_cast<const ResourceSummary*>(
               &_ResourceSummary_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    119;

  friend void swap(ResourceSummary& a, ResourceSummary& b) {
    a.Swap(&b);
  }
  inline void Swap(ResourceSummary* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResourceSummary* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResourceSummary* New() const final {
    return CreateMaybeMessage<ResourceSummary>(nullptr);
  }

  ResourceSummary* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResourceSummary>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResourceSummary& from);
  void MergeFrom(const ResourceSummary& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResourceSummary* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.ResourceSummary";
  }
  protected:
  explicit ResourceSummary(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDisplayArtistFieldNumber = 1,
    kDisplayTitleFieldNumber = 2,
    kResourceIdFieldNumber = 3,
  };
  // repeated .mead101.mead.PartyNameWithTerritory display_artist = 1;
  int display_artist_size() const;
  private:
  int _internal_display_artist_size() const;
  public:
  void clear_display_artist();
  ::mead101::mead::PartyNameWithTerritory* mutable_display_artist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::PartyNameWithTerritory >*
      mutable_display_artist();
  private:
  const ::mead101::mead::PartyNameWithTerritory& _internal_display_artist(int index) const;
  ::mead101::mead::PartyNameWithTerritory* _internal_add_display_artist();
  public:
  const ::mead101::mead::PartyNameWithTerritory& display_artist(int index) const;
  ::mead101::mead::PartyNameWithTerritory* add_display_artist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::PartyNameWithTerritory >&
      display_artist() const;

  // repeated .mead101.mead.DisplayTitle display_title = 2;
  int display_title_size() const;
  private:
  int _internal_display_title_size() const;
  public:
  void clear_display_title();
  ::mead101::mead::DisplayTitle* mutable_display_title(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::DisplayTitle >*
      mutable_display_title();
  private:
  const ::mead101::mead::DisplayTitle& _internal_display_title(int index) const;
  ::mead101::mead::DisplayTitle* _internal_add_display_title();
  public:
  const ::mead101::mead::DisplayTitle& display_title(int index) const;
  ::mead101::mead::DisplayTitle* add_display_title();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::DisplayTitle >&
      display_title() const;

  // optional .mead101.mead.ResourceId resource_id = 3;
  bool has_resource_id() const;
  private:
  bool _internal_has_resource_id() const;
  public:
  void clear_resource_id();
  const ::mead101::mead::ResourceId& resource_id() const;
  ::mead101::mead::ResourceId* release_resource_id();
  ::mead101::mead::ResourceId* mutable_resource_id();
  void set_allocated_resource_id(::mead101::mead::ResourceId* resource_id);
  private:
  const ::mead101::mead::ResourceId& _internal_resource_id() const;
  ::mead101::mead::ResourceId* _internal_mutable_resource_id();
  public:
  void unsafe_arena_set_allocated_resource_id(
      ::mead101::mead::ResourceId* resource_id);
  ::mead101::mead::ResourceId* unsafe_arena_release_resource_id();

  // @@protoc_insertion_point(class_scope:mead101.mead.ResourceSummary)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::PartyNameWithTerritory > display_artist_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::DisplayTitle > display_title_;
  ::mead101::mead::ResourceId* resource_id_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class ResourceTitle PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.ResourceTitle) */ {
 public:
  inline ResourceTitle() : ResourceTitle(nullptr) {}
  virtual ~ResourceTitle();

  ResourceTitle(const ResourceTitle& from);
  ResourceTitle(ResourceTitle&& from) noexcept
    : ResourceTitle() {
    *this = ::std::move(from);
  }

  inline ResourceTitle& operator=(const ResourceTitle& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResourceTitle& operator=(ResourceTitle&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResourceTitle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResourceTitle* internal_default_instance() {
    return reinterpret_cast<const ResourceTitle*>(
               &_ResourceTitle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    120;

  friend void swap(ResourceTitle& a, ResourceTitle& b) {
    a.Swap(&b);
  }
  inline void Swap(ResourceTitle* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResourceTitle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResourceTitle* New() const final {
    return CreateMaybeMessage<ResourceTitle>(nullptr);
  }

  ResourceTitle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResourceTitle>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResourceTitle& from);
  void MergeFrom(const ResourceTitle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResourceTitle* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.ResourceTitle";
  }
  protected:
  explicit ResourceTitle(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLanguageAndScriptCodeFieldNumber = 1,
    kExtValueFieldNumber = 2,
  };
  // optional string language_and_script_code = 1;
  bool has_language_and_script_code() const;
  private:
  bool _internal_has_language_and_script_code() const;
  public:
  void clear_language_and_script_code();
  const std::string& language_and_script_code() const;
  void set_language_and_script_code(const std::string& value);
  void set_language_and_script_code(std::string&& value);
  void set_language_and_script_code(const char* value);
  void set_language_and_script_code(const char* value, size_t size);
  std::string* mutable_language_and_script_code();
  std::string* release_language_and_script_code();
  void set_allocated_language_and_script_code(std::string* language_and_script_code);
  private:
  const std::string& _internal_language_and_script_code() const;
  void _internal_set_language_and_script_code(const std::string& value);
  std::string* _internal_mutable_language_and_script_code();
  public:

  // optional string ext_value = 2;
  bool has_ext_value() const;
  private:
  bool _internal_has_ext_value() const;
  public:
  void clear_ext_value();
  const std::string& ext_value() const;
  void set_ext_value(const std::string& value);
  void set_ext_value(std::string&& value);
  void set_ext_value(const char* value);
  void set_ext_value(const char* value, size_t size);
  std::string* mutable_ext_value();
  std::string* release_ext_value();
  void set_allocated_ext_value(std::string* ext_value);
  private:
  const std::string& _internal_ext_value() const;
  void _internal_set_ext_value(const std::string& value);
  std::string* _internal_mutable_ext_value();
  public:

  // @@protoc_insertion_point(class_scope:mead101.mead.ResourceTitle)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_and_script_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ext_value_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class RootChordNote PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.RootChordNote) */ {
 public:
  inline RootChordNote() : RootChordNote(nullptr) {}
  virtual ~RootChordNote();

  RootChordNote(const RootChordNote& from);
  RootChordNote(RootChordNote&& from) noexcept
    : RootChordNote() {
    *this = ::std::move(from);
  }

  inline RootChordNote& operator=(const RootChordNote& from) {
    CopyFrom(from);
    return *this;
  }
  inline RootChordNote& operator=(RootChordNote&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RootChordNote& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RootChordNote* internal_default_instance() {
    return reinterpret_cast<const RootChordNote*>(
               &_RootChordNote_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    121;

  friend void swap(RootChordNote& a, RootChordNote& b) {
    a.Swap(&b);
  }
  inline void Swap(RootChordNote* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RootChordNote* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RootChordNote* New() const final {
    return CreateMaybeMessage<RootChordNote>(nullptr);
  }

  RootChordNote* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RootChordNote>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RootChordNote& from);
  void MergeFrom(const RootChordNote& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RootChordNote* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.RootChordNote";
  }
  protected:
  explicit RootChordNote(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNamespaceFieldNumber = 1,
    kUserDefinedValueFieldNumber = 2,
    kExtValueFieldNumber = 3,
  };
  // optional string namespace = 1;
  bool has_namespace_() const;
  private:
  bool _internal_has_namespace_() const;
  public:
  void clear_namespace_();
  const std::string& namespace_() const;
  void set_namespace_(const std::string& value);
  void set_namespace_(std::string&& value);
  void set_namespace_(const char* value);
  void set_namespace_(const char* value, size_t size);
  std::string* mutable_namespace_();
  std::string* release_namespace_();
  void set_allocated_namespace_(std::string* namespace_);
  private:
  const std::string& _internal_namespace_() const;
  void _internal_set_namespace_(const std::string& value);
  std::string* _internal_mutable_namespace_();
  public:

  // optional string user_defined_value = 2;
  bool has_user_defined_value() const;
  private:
  bool _internal_has_user_defined_value() const;
  public:
  void clear_user_defined_value();
  const std::string& user_defined_value() const;
  void set_user_defined_value(const std::string& value);
  void set_user_defined_value(std::string&& value);
  void set_user_defined_value(const char* value);
  void set_user_defined_value(const char* value, size_t size);
  std::string* mutable_user_defined_value();
  std::string* release_user_defined_value();
  void set_allocated_user_defined_value(std::string* user_defined_value);
  private:
  const std::string& _internal_user_defined_value() const;
  void _internal_set_user_defined_value(const std::string& value);
  std::string* _internal_mutable_user_defined_value();
  public:

  // optional .mead101.avs.RootChordNote ext_value = 3;
  bool has_ext_value() const;
  private:
  bool _internal_has_ext_value() const;
  public:
  void clear_ext_value();
  const ::mead101::avs::RootChordNote& ext_value() const;
  ::mead101::avs::RootChordNote* release_ext_value();
  ::mead101::avs::RootChordNote* mutable_ext_value();
  void set_allocated_ext_value(::mead101::avs::RootChordNote* ext_value);
  private:
  const ::mead101::avs::RootChordNote& _internal_ext_value() const;
  ::mead101::avs::RootChordNote* _internal_mutable_ext_value();
  public:
  void unsafe_arena_set_allocated_ext_value(
      ::mead101::avs::RootChordNote* ext_value);
  ::mead101::avs::RootChordNote* unsafe_arena_release_ext_value();

  // @@protoc_insertion_point(class_scope:mead101.mead.RootChordNote)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr namespace__;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_defined_value_;
  ::mead101::avs::RootChordNote* ext_value_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class RootChordQuality PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.RootChordQuality) */ {
 public:
  inline RootChordQuality() : RootChordQuality(nullptr) {}
  virtual ~RootChordQuality();

  RootChordQuality(const RootChordQuality& from);
  RootChordQuality(RootChordQuality&& from) noexcept
    : RootChordQuality() {
    *this = ::std::move(from);
  }

  inline RootChordQuality& operator=(const RootChordQuality& from) {
    CopyFrom(from);
    return *this;
  }
  inline RootChordQuality& operator=(RootChordQuality&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RootChordQuality& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RootChordQuality* internal_default_instance() {
    return reinterpret_cast<const RootChordQuality*>(
               &_RootChordQuality_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    122;

  friend void swap(RootChordQuality& a, RootChordQuality& b) {
    a.Swap(&b);
  }
  inline void Swap(RootChordQuality* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RootChordQuality* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RootChordQuality* New() const final {
    return CreateMaybeMessage<RootChordQuality>(nullptr);
  }

  RootChordQuality* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RootChordQuality>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RootChordQuality& from);
  void MergeFrom(const RootChordQuality& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RootChordQuality* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.RootChordQuality";
  }
  protected:
  explicit RootChordQuality(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNamespaceFieldNumber = 1,
    kUserDefinedValueFieldNumber = 2,
    kExtValueFieldNumber = 3,
  };
  // optional string namespace = 1;
  bool has_namespace_() const;
  private:
  bool _internal_has_namespace_() const;
  public:
  void clear_namespace_();
  const std::string& namespace_() const;
  void set_namespace_(const std::string& value);
  void set_namespace_(std::string&& value);
  void set_namespace_(const char* value);
  void set_namespace_(const char* value, size_t size);
  std::string* mutable_namespace_();
  std::string* release_namespace_();
  void set_allocated_namespace_(std::string* namespace_);
  private:
  const std::string& _internal_namespace_() const;
  void _internal_set_namespace_(const std::string& value);
  std::string* _internal_mutable_namespace_();
  public:

  // optional string user_defined_value = 2;
  bool has_user_defined_value() const;
  private:
  bool _internal_has_user_defined_value() const;
  public:
  void clear_user_defined_value();
  const std::string& user_defined_value() const;
  void set_user_defined_value(const std::string& value);
  void set_user_defined_value(std::string&& value);
  void set_user_defined_value(const char* value);
  void set_user_defined_value(const char* value, size_t size);
  std::string* mutable_user_defined_value();
  std::string* release_user_defined_value();
  void set_allocated_user_defined_value(std::string* user_defined_value);
  private:
  const std::string& _internal_user_defined_value() const;
  void _internal_set_user_defined_value(const std::string& value);
  std::string* _internal_mutable_user_defined_value();
  public:

  // optional .mead101.avs.RootChordQuality ext_value = 3;
  bool has_ext_value() const;
  private:
  bool _internal_has_ext_value() const;
  public:
  void clear_ext_value();
  const ::mead101::avs::RootChordQuality& ext_value() const;
  ::mead101::avs::RootChordQuality* release_ext_value();
  ::mead101::avs::RootChordQuality* mutable_ext_value();
  void set_allocated_ext_value(::mead101::avs::RootChordQuality* ext_value);
  private:
  const ::mead101::avs::RootChordQuality& _internal_ext_value() const;
  ::mead101::avs::RootChordQuality* _internal_mutable_ext_value();
  public:
  void unsafe_arena_set_allocated_ext_value(
      ::mead101::avs::RootChordQuality* ext_value);
  ::mead101::avs::RootChordQuality* unsafe_arena_release_ext_value();

  // @@protoc_insertion_point(class_scope:mead101.mead.RootChordQuality)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr namespace__;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_defined_value_;
  ::mead101::avs::RootChordQuality* ext_value_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class Sample PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.Sample) */ {
 public:
  inline Sample() : Sample(nullptr) {}
  virtual ~Sample();

  Sample(const Sample& from);
  Sample(Sample&& from) noexcept
    : Sample() {
    *this = ::std::move(from);
  }

  inline Sample& operator=(const Sample& from) {
    CopyFrom(from);
    return *this;
  }
  inline Sample& operator=(Sample&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Sample& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Sample* internal_default_instance() {
    return reinterpret_cast<const Sample*>(
               &_Sample_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    123;

  friend void swap(Sample& a, Sample& b) {
    a.Swap(&b);
  }
  inline void Swap(Sample* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Sample* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Sample* New() const final {
    return CreateMaybeMessage<Sample>(nullptr);
  }

  Sample* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Sample>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Sample& from);
  void MergeFrom(const Sample& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Sample* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.Sample";
  }
  protected:
  explicit Sample(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDescriptionFieldNumber = 2,
    kHostTimingFieldNumber = 3,
    kMetadataSourceReferenceFieldNumber = 5,
    kSampleFeatureFieldNumber = 7,
    kSampleTimingFieldNumber = 8,
    kRelatedResourceFieldNumber = 6,
    kContainsSamplesFieldNumber = 1,
    kIsContainedInSampleFieldNumber = 4,
  };
  // repeated .mead101.mead.TextWithFormat description = 2;
  int description_size() const;
  private:
  int _internal_description_size() const;
  public:
  void clear_description();
  ::mead101::mead::TextWithFormat* mutable_description(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::TextWithFormat >*
      mutable_description();
  private:
  const ::mead101::mead::TextWithFormat& _internal_description(int index) const;
  ::mead101::mead::TextWithFormat* _internal_add_description();
  public:
  const ::mead101::mead::TextWithFormat& description(int index) const;
  ::mead101::mead::TextWithFormat* add_description();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::TextWithFormat >&
      description() const;

  // repeated .mead101.mead.Timing host_timing = 3;
  int host_timing_size() const;
  private:
  int _internal_host_timing_size() const;
  public:
  void clear_host_timing();
  ::mead101::mead::Timing* mutable_host_timing(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Timing >*
      mutable_host_timing();
  private:
  const ::mead101::mead::Timing& _internal_host_timing(int index) const;
  ::mead101::mead::Timing* _internal_add_host_timing();
  public:
  const ::mead101::mead::Timing& host_timing(int index) const;
  ::mead101::mead::Timing* add_host_timing();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Timing >&
      host_timing() const;

  // repeated string metadata_source_reference = 5;
  int metadata_source_reference_size() const;
  private:
  int _internal_metadata_source_reference_size() const;
  public:
  void clear_metadata_source_reference();
  const std::string& metadata_source_reference(int index) const;
  std::string* mutable_metadata_source_reference(int index);
  void set_metadata_source_reference(int index, const std::string& value);
  void set_metadata_source_reference(int index, std::string&& value);
  void set_metadata_source_reference(int index, const char* value);
  void set_metadata_source_reference(int index, const char* value, size_t size);
  std::string* add_metadata_source_reference();
  void add_metadata_source_reference(const std::string& value);
  void add_metadata_source_reference(std::string&& value);
  void add_metadata_source_reference(const char* value);
  void add_metadata_source_reference(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& metadata_source_reference() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_metadata_source_reference();
  private:
  const std::string& _internal_metadata_source_reference(int index) const;
  std::string* _internal_add_metadata_source_reference();
  public:

  // repeated .mead101.mead.SampleFeature sample_feature = 7;
  int sample_feature_size() const;
  private:
  int _internal_sample_feature_size() const;
  public:
  void clear_sample_feature();
  ::mead101::mead::SampleFeature* mutable_sample_feature(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::SampleFeature >*
      mutable_sample_feature();
  private:
  const ::mead101::mead::SampleFeature& _internal_sample_feature(int index) const;
  ::mead101::mead::SampleFeature* _internal_add_sample_feature();
  public:
  const ::mead101::mead::SampleFeature& sample_feature(int index) const;
  ::mead101::mead::SampleFeature* add_sample_feature();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::SampleFeature >&
      sample_feature() const;

  // repeated .mead101.mead.Timing sample_timing = 8;
  int sample_timing_size() const;
  private:
  int _internal_sample_timing_size() const;
  public:
  void clear_sample_timing();
  ::mead101::mead::Timing* mutable_sample_timing(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Timing >*
      mutable_sample_timing();
  private:
  const ::mead101::mead::Timing& _internal_sample_timing(int index) const;
  ::mead101::mead::Timing* _internal_add_sample_timing();
  public:
  const ::mead101::mead::Timing& sample_timing(int index) const;
  ::mead101::mead::Timing* add_sample_timing();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Timing >&
      sample_timing() const;

  // optional .mead101.mead.ResourceSummary related_resource = 6;
  bool has_related_resource() const;
  private:
  bool _internal_has_related_resource() const;
  public:
  void clear_related_resource();
  const ::mead101::mead::ResourceSummary& related_resource() const;
  ::mead101::mead::ResourceSummary* release_related_resource();
  ::mead101::mead::ResourceSummary* mutable_related_resource();
  void set_allocated_related_resource(::mead101::mead::ResourceSummary* related_resource);
  private:
  const ::mead101::mead::ResourceSummary& _internal_related_resource() const;
  ::mead101::mead::ResourceSummary* _internal_mutable_related_resource();
  public:
  void unsafe_arena_set_allocated_related_resource(
      ::mead101::mead::ResourceSummary* related_resource);
  ::mead101::mead::ResourceSummary* unsafe_arena_release_related_resource();

  // optional bool contains_samples = 1;
  bool has_contains_samples() const;
  private:
  bool _internal_has_contains_samples() const;
  public:
  void clear_contains_samples();
  bool contains_samples() const;
  void set_contains_samples(bool value);
  private:
  bool _internal_contains_samples() const;
  void _internal_set_contains_samples(bool value);
  public:

  // optional bool is_contained_in_sample = 4;
  bool has_is_contained_in_sample() const;
  private:
  bool _internal_has_is_contained_in_sample() const;
  public:
  void clear_is_contained_in_sample();
  bool is_contained_in_sample() const;
  void set_is_contained_in_sample(bool value);
  private:
  bool _internal_is_contained_in_sample() const;
  void _internal_set_is_contained_in_sample(bool value);
  public:

  // @@protoc_insertion_point(class_scope:mead101.mead.Sample)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::TextWithFormat > description_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Timing > host_timing_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> metadata_source_reference_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::SampleFeature > sample_feature_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Timing > sample_timing_;
  ::mead101::mead::ResourceSummary* related_resource_;
  bool contains_samples_;
  bool is_contained_in_sample_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class SampleFeature PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.SampleFeature) */ {
 public:
  inline SampleFeature() : SampleFeature(nullptr) {}
  virtual ~SampleFeature();

  SampleFeature(const SampleFeature& from);
  SampleFeature(SampleFeature&& from) noexcept
    : SampleFeature() {
    *this = ::std::move(from);
  }

  inline SampleFeature& operator=(const SampleFeature& from) {
    CopyFrom(from);
    return *this;
  }
  inline SampleFeature& operator=(SampleFeature&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SampleFeature& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SampleFeature* internal_default_instance() {
    return reinterpret_cast<const SampleFeature*>(
               &_SampleFeature_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    124;

  friend void swap(SampleFeature& a, SampleFeature& b) {
    a.Swap(&b);
  }
  inline void Swap(SampleFeature* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SampleFeature* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SampleFeature* New() const final {
    return CreateMaybeMessage<SampleFeature>(nullptr);
  }

  SampleFeature* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SampleFeature>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SampleFeature& from);
  void MergeFrom(const SampleFeature& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SampleFeature* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.SampleFeature";
  }
  protected:
  explicit SampleFeature(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLanguageAndScriptCodeFieldNumber = 1,
    kExtValueFieldNumber = 2,
  };
  // optional string language_and_script_code = 1;
  bool has_language_and_script_code() const;
  private:
  bool _internal_has_language_and_script_code() const;
  public:
  void clear_language_and_script_code();
  const std::string& language_and_script_code() const;
  void set_language_and_script_code(const std::string& value);
  void set_language_and_script_code(std::string&& value);
  void set_language_and_script_code(const char* value);
  void set_language_and_script_code(const char* value, size_t size);
  std::string* mutable_language_and_script_code();
  std::string* release_language_and_script_code();
  void set_allocated_language_and_script_code(std::string* language_and_script_code);
  private:
  const std::string& _internal_language_and_script_code() const;
  void _internal_set_language_and_script_code(const std::string& value);
  std::string* _internal_mutable_language_and_script_code();
  public:

  // optional string ext_value = 2;
  bool has_ext_value() const;
  private:
  bool _internal_has_ext_value() const;
  public:
  void clear_ext_value();
  const std::string& ext_value() const;
  void set_ext_value(const std::string& value);
  void set_ext_value(std::string&& value);
  void set_ext_value(const char* value);
  void set_ext_value(const char* value, size_t size);
  std::string* mutable_ext_value();
  std::string* release_ext_value();
  void set_allocated_ext_value(std::string* ext_value);
  private:
  const std::string& _internal_ext_value() const;
  void _internal_set_ext_value(const std::string& value);
  std::string* _internal_mutable_ext_value();
  public:

  // @@protoc_insertion_point(class_scope:mead101.mead.SampleFeature)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_and_script_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ext_value_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class SessionType PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.SessionType) */ {
 public:
  inline SessionType() : SessionType(nullptr) {}
  virtual ~SessionType();

  SessionType(const SessionType& from);
  SessionType(SessionType&& from) noexcept
    : SessionType() {
    *this = ::std::move(from);
  }

  inline SessionType& operator=(const SessionType& from) {
    CopyFrom(from);
    return *this;
  }
  inline SessionType& operator=(SessionType&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SessionType& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SessionType* internal_default_instance() {
    return reinterpret_cast<const SessionType*>(
               &_SessionType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    125;

  friend void swap(SessionType& a, SessionType& b) {
    a.Swap(&b);
  }
  inline void Swap(SessionType* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SessionType* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SessionType* New() const final {
    return CreateMaybeMessage<SessionType>(nullptr);
  }

  SessionType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SessionType>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SessionType& from);
  void MergeFrom(const SessionType& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SessionType* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.SessionType";
  }
  protected:
  explicit SessionType(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNamespaceFieldNumber = 1,
    kUserDefinedValueFieldNumber = 2,
    kExtValueFieldNumber = 3,
  };
  // optional string namespace = 1;
  bool has_namespace_() const;
  private:
  bool _internal_has_namespace_() const;
  public:
  void clear_namespace_();
  const std::string& namespace_() const;
  void set_namespace_(const std::string& value);
  void set_namespace_(std::string&& value);
  void set_namespace_(const char* value);
  void set_namespace_(const char* value, size_t size);
  std::string* mutable_namespace_();
  std::string* release_namespace_();
  void set_allocated_namespace_(std::string* namespace_);
  private:
  const std::string& _internal_namespace_() const;
  void _internal_set_namespace_(const std::string& value);
  std::string* _internal_mutable_namespace_();
  public:

  // optional string user_defined_value = 2;
  bool has_user_defined_value() const;
  private:
  bool _internal_has_user_defined_value() const;
  public:
  void clear_user_defined_value();
  const std::string& user_defined_value() const;
  void set_user_defined_value(const std::string& value);
  void set_user_defined_value(std::string&& value);
  void set_user_defined_value(const char* value);
  void set_user_defined_value(const char* value, size_t size);
  std::string* mutable_user_defined_value();
  std::string* release_user_defined_value();
  void set_allocated_user_defined_value(std::string* user_defined_value);
  private:
  const std::string& _internal_user_defined_value() const;
  void _internal_set_user_defined_value(const std::string& value);
  std::string* _internal_mutable_user_defined_value();
  public:

  // optional .mead101.avs.SessionType ext_value = 3;
  bool has_ext_value() const;
  private:
  bool _internal_has_ext_value() const;
  public:
  void clear_ext_value();
  const ::mead101::avs::SessionType& ext_value() const;
  ::mead101::avs::SessionType* release_ext_value();
  ::mead101::avs::SessionType* mutable_ext_value();
  void set_allocated_ext_value(::mead101::avs::SessionType* ext_value);
  private:
  const ::mead101::avs::SessionType& _internal_ext_value() const;
  ::mead101::avs::SessionType* _internal_mutable_ext_value();
  public:
  void unsafe_arena_set_allocated_ext_value(
      ::mead101::avs::SessionType* ext_value);
  ::mead101::avs::SessionType* unsafe_arena_release_ext_value();

  // @@protoc_insertion_point(class_scope:mead101.mead.SessionType)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr namespace__;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_defined_value_;
  ::mead101::avs::SessionType* ext_value_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class SimilarParty PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.SimilarParty) */ {
 public:
  inline SimilarParty() : SimilarParty(nullptr) {}
  virtual ~SimilarParty();

  SimilarParty(const SimilarParty& from);
  SimilarParty(SimilarParty&& from) noexcept
    : SimilarParty() {
    *this = ::std::move(from);
  }

  inline SimilarParty& operator=(const SimilarParty& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimilarParty& operator=(SimilarParty&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SimilarParty& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SimilarParty* internal_default_instance() {
    return reinterpret_cast<const SimilarParty*>(
               &_SimilarParty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    126;

  friend void swap(SimilarParty& a, SimilarParty& b) {
    a.Swap(&b);
  }
  inline void Swap(SimilarParty* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SimilarParty* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SimilarParty* New() const final {
    return CreateMaybeMessage<SimilarParty>(nullptr);
  }

  SimilarParty* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SimilarParty>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SimilarParty& from);
  void MergeFrom(const SimilarParty& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimilarParty* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.SimilarParty";
  }
  protected:
  explicit SimilarParty(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDescriptionFieldNumber = 1,
    kMetadataSourceReferenceFieldNumber = 2,
    kPartyFieldNumber = 3,
  };
  // repeated .mead101.mead.Annotation description = 1;
  int description_size() const;
  private:
  int _internal_description_size() const;
  public:
  void clear_description();
  ::mead101::mead::Annotation* mutable_description(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Annotation >*
      mutable_description();
  private:
  const ::mead101::mead::Annotation& _internal_description(int index) const;
  ::mead101::mead::Annotation* _internal_add_description();
  public:
  const ::mead101::mead::Annotation& description(int index) const;
  ::mead101::mead::Annotation* add_description();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Annotation >&
      description() const;

  // repeated string metadata_source_reference = 2;
  int metadata_source_reference_size() const;
  private:
  int _internal_metadata_source_reference_size() const;
  public:
  void clear_metadata_source_reference();
  const std::string& metadata_source_reference(int index) const;
  std::string* mutable_metadata_source_reference(int index);
  void set_metadata_source_reference(int index, const std::string& value);
  void set_metadata_source_reference(int index, std::string&& value);
  void set_metadata_source_reference(int index, const char* value);
  void set_metadata_source_reference(int index, const char* value, size_t size);
  std::string* add_metadata_source_reference();
  void add_metadata_source_reference(const std::string& value);
  void add_metadata_source_reference(std::string&& value);
  void add_metadata_source_reference(const char* value);
  void add_metadata_source_reference(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& metadata_source_reference() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_metadata_source_reference();
  private:
  const std::string& _internal_metadata_source_reference(int index) const;
  std::string* _internal_add_metadata_source_reference();
  public:

  // optional .mead101.mead.PartyWithNames party = 3;
  bool has_party() const;
  private:
  bool _internal_has_party() const;
  public:
  void clear_party();
  const ::mead101::mead::PartyWithNames& party() const;
  ::mead101::mead::PartyWithNames* release_party();
  ::mead101::mead::PartyWithNames* mutable_party();
  void set_allocated_party(::mead101::mead::PartyWithNames* party);
  private:
  const ::mead101::mead::PartyWithNames& _internal_party() const;
  ::mead101::mead::PartyWithNames* _internal_mutable_party();
  public:
  void unsafe_arena_set_allocated_party(
      ::mead101::mead::PartyWithNames* party);
  ::mead101::mead::PartyWithNames* unsafe_arena_release_party();

  // @@protoc_insertion_point(class_scope:mead101.mead.SimilarParty)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Annotation > description_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> metadata_source_reference_;
  ::mead101::mead::PartyWithNames* party_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class SimilarRelease PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.SimilarRelease) */ {
 public:
  inline SimilarRelease() : SimilarRelease(nullptr) {}
  virtual ~SimilarRelease();

  SimilarRelease(const SimilarRelease& from);
  SimilarRelease(SimilarRelease&& from) noexcept
    : SimilarRelease() {
    *this = ::std::move(from);
  }

  inline SimilarRelease& operator=(const SimilarRelease& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimilarRelease& operator=(SimilarRelease&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SimilarRelease& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SimilarRelease* internal_default_instance() {
    return reinterpret_cast<const SimilarRelease*>(
               &_SimilarRelease_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    127;

  friend void swap(SimilarRelease& a, SimilarRelease& b) {
    a.Swap(&b);
  }
  inline void Swap(SimilarRelease* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SimilarRelease* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SimilarRelease* New() const final {
    return CreateMaybeMessage<SimilarRelease>(nullptr);
  }

  SimilarRelease* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SimilarRelease>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SimilarRelease& from);
  void MergeFrom(const SimilarRelease& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimilarRelease* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.SimilarRelease";
  }
  protected:
  explicit SimilarRelease(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDescriptionFieldNumber = 1,
    kMetadataSourceReferenceFieldNumber = 2,
    kReleaseFieldNumber = 3,
  };
  // repeated .mead101.mead.Annotation description = 1;
  int description_size() const;
  private:
  int _internal_description_size() const;
  public:
  void clear_description();
  ::mead101::mead::Annotation* mutable_description(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Annotation >*
      mutable_description();
  private:
  const ::mead101::mead::Annotation& _internal_description(int index) const;
  ::mead101::mead::Annotation* _internal_add_description();
  public:
  const ::mead101::mead::Annotation& description(int index) const;
  ::mead101::mead::Annotation* add_description();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Annotation >&
      description() const;

  // repeated string metadata_source_reference = 2;
  int metadata_source_reference_size() const;
  private:
  int _internal_metadata_source_reference_size() const;
  public:
  void clear_metadata_source_reference();
  const std::string& metadata_source_reference(int index) const;
  std::string* mutable_metadata_source_reference(int index);
  void set_metadata_source_reference(int index, const std::string& value);
  void set_metadata_source_reference(int index, std::string&& value);
  void set_metadata_source_reference(int index, const char* value);
  void set_metadata_source_reference(int index, const char* value, size_t size);
  std::string* add_metadata_source_reference();
  void add_metadata_source_reference(const std::string& value);
  void add_metadata_source_reference(std::string&& value);
  void add_metadata_source_reference(const char* value);
  void add_metadata_source_reference(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& metadata_source_reference() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_metadata_source_reference();
  private:
  const std::string& _internal_metadata_source_reference(int index) const;
  std::string* _internal_add_metadata_source_reference();
  public:

  // optional .mead101.mead.Release release = 3;
  bool has_release() const;
  private:
  bool _internal_has_release() const;
  public:
  void clear_release();
  const ::mead101::mead::Release& release() const;
  ::mead101::mead::Release* release_release();
  ::mead101::mead::Release* mutable_release();
  void set_allocated_release(::mead101::mead::Release* release);
  private:
  const ::mead101::mead::Release& _internal_release() const;
  ::mead101::mead::Release* _internal_mutable_release();
  public:
  void unsafe_arena_set_allocated_release(
      ::mead101::mead::Release* release);
  ::mead101::mead::Release* unsafe_arena_release_release();

  // @@protoc_insertion_point(class_scope:mead101.mead.SimilarRelease)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Annotation > description_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> metadata_source_reference_;
  ::mead101::mead::Release* release_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class SimilarResource PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.SimilarResource) */ {
 public:
  inline SimilarResource() : SimilarResource(nullptr) {}
  virtual ~SimilarResource();

  SimilarResource(const SimilarResource& from);
  SimilarResource(SimilarResource&& from) noexcept
    : SimilarResource() {
    *this = ::std::move(from);
  }

  inline SimilarResource& operator=(const SimilarResource& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimilarResource& operator=(SimilarResource&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SimilarResource& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SimilarResource* internal_default_instance() {
    return reinterpret_cast<const SimilarResource*>(
               &_SimilarResource_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    128;

  friend void swap(SimilarResource& a, SimilarResource& b) {
    a.Swap(&b);
  }
  inline void Swap(SimilarResource* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SimilarResource* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SimilarResource* New() const final {
    return CreateMaybeMessage<SimilarResource>(nullptr);
  }

  SimilarResource* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SimilarResource>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SimilarResource& from);
  void MergeFrom(const SimilarResource& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimilarResource* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.SimilarResource";
  }
  protected:
  explicit SimilarResource(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDescriptionFieldNumber = 1,
    kMetadataSourceReferenceFieldNumber = 2,
    kResourceFieldNumber = 3,
  };
  // repeated .mead101.mead.Annotation description = 1;
  int description_size() const;
  private:
  int _internal_description_size() const;
  public:
  void clear_description();
  ::mead101::mead::Annotation* mutable_description(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Annotation >*
      mutable_description();
  private:
  const ::mead101::mead::Annotation& _internal_description(int index) const;
  ::mead101::mead::Annotation* _internal_add_description();
  public:
  const ::mead101::mead::Annotation& description(int index) const;
  ::mead101::mead::Annotation* add_description();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Annotation >&
      description() const;

  // repeated string metadata_source_reference = 2;
  int metadata_source_reference_size() const;
  private:
  int _internal_metadata_source_reference_size() const;
  public:
  void clear_metadata_source_reference();
  const std::string& metadata_source_reference(int index) const;
  std::string* mutable_metadata_source_reference(int index);
  void set_metadata_source_reference(int index, const std::string& value);
  void set_metadata_source_reference(int index, std::string&& value);
  void set_metadata_source_reference(int index, const char* value);
  void set_metadata_source_reference(int index, const char* value, size_t size);
  std::string* add_metadata_source_reference();
  void add_metadata_source_reference(const std::string& value);
  void add_metadata_source_reference(std::string&& value);
  void add_metadata_source_reference(const char* value);
  void add_metadata_source_reference(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& metadata_source_reference() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_metadata_source_reference();
  private:
  const std::string& _internal_metadata_source_reference(int index) const;
  std::string* _internal_add_metadata_source_reference();
  public:

  // optional .mead101.mead.Resource resource = 3;
  bool has_resource() const;
  private:
  bool _internal_has_resource() const;
  public:
  void clear_resource();
  const ::mead101::mead::Resource& resource() const;
  ::mead101::mead::Resource* release_resource();
  ::mead101::mead::Resource* mutable_resource();
  void set_allocated_resource(::mead101::mead::Resource* resource);
  private:
  const ::mead101::mead::Resource& _internal_resource() const;
  ::mead101::mead::Resource* _internal_mutable_resource();
  public:
  void unsafe_arena_set_allocated_resource(
      ::mead101::mead::Resource* resource);
  ::mead101::mead::Resource* unsafe_arena_release_resource();

  // @@protoc_insertion_point(class_scope:mead101.mead.SimilarResource)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Annotation > description_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> metadata_source_reference_;
  ::mead101::mead::Resource* resource_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class SimilarWork PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.SimilarWork) */ {
 public:
  inline SimilarWork() : SimilarWork(nullptr) {}
  virtual ~SimilarWork();

  SimilarWork(const SimilarWork& from);
  SimilarWork(SimilarWork&& from) noexcept
    : SimilarWork() {
    *this = ::std::move(from);
  }

  inline SimilarWork& operator=(const SimilarWork& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimilarWork& operator=(SimilarWork&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SimilarWork& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SimilarWork* internal_default_instance() {
    return reinterpret_cast<const SimilarWork*>(
               &_SimilarWork_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    129;

  friend void swap(SimilarWork& a, SimilarWork& b) {
    a.Swap(&b);
  }
  inline void Swap(SimilarWork* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SimilarWork* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SimilarWork* New() const final {
    return CreateMaybeMessage<SimilarWork>(nullptr);
  }

  SimilarWork* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SimilarWork>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SimilarWork& from);
  void MergeFrom(const SimilarWork& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimilarWork* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.SimilarWork";
  }
  protected:
  explicit SimilarWork(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDescriptionFieldNumber = 1,
    kMetadataSourceReferenceFieldNumber = 2,
    kWorkFieldNumber = 3,
  };
  // repeated .mead101.mead.Annotation description = 1;
  int description_size() const;
  private:
  int _internal_description_size() const;
  public:
  void clear_description();
  ::mead101::mead::Annotation* mutable_description(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Annotation >*
      mutable_description();
  private:
  const ::mead101::mead::Annotation& _internal_description(int index) const;
  ::mead101::mead::Annotation* _internal_add_description();
  public:
  const ::mead101::mead::Annotation& description(int index) const;
  ::mead101::mead::Annotation* add_description();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Annotation >&
      description() const;

  // repeated string metadata_source_reference = 2;
  int metadata_source_reference_size() const;
  private:
  int _internal_metadata_source_reference_size() const;
  public:
  void clear_metadata_source_reference();
  const std::string& metadata_source_reference(int index) const;
  std::string* mutable_metadata_source_reference(int index);
  void set_metadata_source_reference(int index, const std::string& value);
  void set_metadata_source_reference(int index, std::string&& value);
  void set_metadata_source_reference(int index, const char* value);
  void set_metadata_source_reference(int index, const char* value, size_t size);
  std::string* add_metadata_source_reference();
  void add_metadata_source_reference(const std::string& value);
  void add_metadata_source_reference(std::string&& value);
  void add_metadata_source_reference(const char* value);
  void add_metadata_source_reference(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& metadata_source_reference() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_metadata_source_reference();
  private:
  const std::string& _internal_metadata_source_reference(int index) const;
  std::string* _internal_add_metadata_source_reference();
  public:

  // optional .mead101.mead.Work work = 3;
  bool has_work() const;
  private:
  bool _internal_has_work() const;
  public:
  void clear_work();
  const ::mead101::mead::Work& work() const;
  ::mead101::mead::Work* release_work();
  ::mead101::mead::Work* mutable_work();
  void set_allocated_work(::mead101::mead::Work* work);
  private:
  const ::mead101::mead::Work& _internal_work() const;
  ::mead101::mead::Work* _internal_mutable_work();
  public:
  void unsafe_arena_set_allocated_work(
      ::mead101::mead::Work* work);
  ::mead101::mead::Work* unsafe_arena_release_work();

  // @@protoc_insertion_point(class_scope:mead101.mead.SimilarWork)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Annotation > description_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> metadata_source_reference_;
  ::mead101::mead::Work* work_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class Source PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.Source) */ {
 public:
  inline Source() : Source(nullptr) {}
  virtual ~Source();

  Source(const Source& from);
  Source(Source&& from) noexcept
    : Source() {
    *this = ::std::move(from);
  }

  inline Source& operator=(const Source& from) {
    CopyFrom(from);
    return *this;
  }
  inline Source& operator=(Source&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Source& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Source* internal_default_instance() {
    return reinterpret_cast<const Source*>(
               &_Source_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    130;

  friend void swap(Source& a, Source& b) {
    a.Swap(&b);
  }
  inline void Swap(Source* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Source* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Source* New() const final {
    return CreateMaybeMessage<Source>(nullptr);
  }

  Source* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Source>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Source& from);
  void MergeFrom(const Source& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Source* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.Source";
  }
  protected:
  explicit Source(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnyAttributeValueFieldNumber = 1,
    kAnyValueFieldNumber = 2,
    kAuthorFieldNumber = 3,
    kCategoryFieldNumber = 4,
    kContributorFieldNumber = 5,
    kLinkFieldNumber = 9,
    kGeneratorFieldNumber = 6,
    kIconFieldNumber = 7,
    kIdFieldNumber = 8,
    kLogoFieldNumber = 10,
    kRightsFieldNumber = 11,
    kSubtitleFieldNumber = 12,
    kTitleFieldNumber = 13,
    kUpdatedFieldNumber = 14,
  };
  // repeated string any_attribute_value = 1;
  int any_attribute_value_size() const;
  private:
  int _internal_any_attribute_value_size() const;
  public:
  void clear_any_attribute_value();
  const std::string& any_attribute_value(int index) const;
  std::string* mutable_any_attribute_value(int index);
  void set_any_attribute_value(int index, const std::string& value);
  void set_any_attribute_value(int index, std::string&& value);
  void set_any_attribute_value(int index, const char* value);
  void set_any_attribute_value(int index, const char* value, size_t size);
  std::string* add_any_attribute_value();
  void add_any_attribute_value(const std::string& value);
  void add_any_attribute_value(std::string&& value);
  void add_any_attribute_value(const char* value);
  void add_any_attribute_value(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& any_attribute_value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_any_attribute_value();
  private:
  const std::string& _internal_any_attribute_value(int index) const;
  std::string* _internal_add_any_attribute_value();
  public:

  // repeated string any_value = 2;
  int any_value_size() const;
  private:
  int _internal_any_value_size() const;
  public:
  void clear_any_value();
  const std::string& any_value(int index) const;
  std::string* mutable_any_value(int index);
  void set_any_value(int index, const std::string& value);
  void set_any_value(int index, std::string&& value);
  void set_any_value(int index, const char* value);
  void set_any_value(int index, const char* value, size_t size);
  std::string* add_any_value();
  void add_any_value(const std::string& value);
  void add_any_value(std::string&& value);
  void add_any_value(const char* value);
  void add_any_value(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& any_value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_any_value();
  private:
  const std::string& _internal_any_value(int index) const;
  std::string* _internal_add_any_value();
  public:

  // repeated .mead101.mead.Person author = 3;
  int author_size() const;
  private:
  int _internal_author_size() const;
  public:
  void clear_author();
  ::mead101::mead::Person* mutable_author(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Person >*
      mutable_author();
  private:
  const ::mead101::mead::Person& _internal_author(int index) const;
  ::mead101::mead::Person* _internal_add_author();
  public:
  const ::mead101::mead::Person& author(int index) const;
  ::mead101::mead::Person* add_author();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Person >&
      author() const;

  // repeated .mead101.mead.Category category = 4;
  int category_size() const;
  private:
  int _internal_category_size() const;
  public:
  void clear_category();
  ::mead101::mead::Category* mutable_category(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Category >*
      mutable_category();
  private:
  const ::mead101::mead::Category& _internal_category(int index) const;
  ::mead101::mead::Category* _internal_add_category();
  public:
  const ::mead101::mead::Category& category(int index) const;
  ::mead101::mead::Category* add_category();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Category >&
      category() const;

  // repeated .mead101.mead.Person contributor = 5;
  int contributor_size() const;
  private:
  int _internal_contributor_size() const;
  public:
  void clear_contributor();
  ::mead101::mead::Person* mutable_contributor(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Person >*
      mutable_contributor();
  private:
  const ::mead101::mead::Person& _internal_contributor(int index) const;
  ::mead101::mead::Person* _internal_add_contributor();
  public:
  const ::mead101::mead::Person& contributor(int index) const;
  ::mead101::mead::Person* add_contributor();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Person >&
      contributor() const;

  // repeated .mead101.mead.Link link = 9;
  int link_size() const;
  private:
  int _internal_link_size() const;
  public:
  void clear_link();
  ::mead101::mead::Link* mutable_link(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Link >*
      mutable_link();
  private:
  const ::mead101::mead::Link& _internal_link(int index) const;
  ::mead101::mead::Link* _internal_add_link();
  public:
  const ::mead101::mead::Link& link(int index) const;
  ::mead101::mead::Link* add_link();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Link >&
      link() const;

  // optional .mead101.mead.Generator generator = 6;
  bool has_generator() const;
  private:
  bool _internal_has_generator() const;
  public:
  void clear_generator();
  const ::mead101::mead::Generator& generator() const;
  ::mead101::mead::Generator* release_generator();
  ::mead101::mead::Generator* mutable_generator();
  void set_allocated_generator(::mead101::mead::Generator* generator);
  private:
  const ::mead101::mead::Generator& _internal_generator() const;
  ::mead101::mead::Generator* _internal_mutable_generator();
  public:
  void unsafe_arena_set_allocated_generator(
      ::mead101::mead::Generator* generator);
  ::mead101::mead::Generator* unsafe_arena_release_generator();

  // optional .mead101.mead.Icon icon = 7;
  bool has_icon() const;
  private:
  bool _internal_has_icon() const;
  public:
  void clear_icon();
  const ::mead101::mead::Icon& icon() const;
  ::mead101::mead::Icon* release_icon();
  ::mead101::mead::Icon* mutable_icon();
  void set_allocated_icon(::mead101::mead::Icon* icon);
  private:
  const ::mead101::mead::Icon& _internal_icon() const;
  ::mead101::mead::Icon* _internal_mutable_icon();
  public:
  void unsafe_arena_set_allocated_icon(
      ::mead101::mead::Icon* icon);
  ::mead101::mead::Icon* unsafe_arena_release_icon();

  // optional .mead101.mead.Id id = 8;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::mead101::mead::Id& id() const;
  ::mead101::mead::Id* release_id();
  ::mead101::mead::Id* mutable_id();
  void set_allocated_id(::mead101::mead::Id* id);
  private:
  const ::mead101::mead::Id& _internal_id() const;
  ::mead101::mead::Id* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::mead101::mead::Id* id);
  ::mead101::mead::Id* unsafe_arena_release_id();

  // optional .mead101.mead.Logo logo = 10;
  bool has_logo() const;
  private:
  bool _internal_has_logo() const;
  public:
  void clear_logo();
  const ::mead101::mead::Logo& logo() const;
  ::mead101::mead::Logo* release_logo();
  ::mead101::mead::Logo* mutable_logo();
  void set_allocated_logo(::mead101::mead::Logo* logo);
  private:
  const ::mead101::mead::Logo& _internal_logo() const;
  ::mead101::mead::Logo* _internal_mutable_logo();
  public:
  void unsafe_arena_set_allocated_logo(
      ::mead101::mead::Logo* logo);
  ::mead101::mead::Logo* unsafe_arena_release_logo();

  // optional .mead101.mead.Text rights = 11;
  bool has_rights() const;
  private:
  bool _internal_has_rights() const;
  public:
  void clear_rights();
  const ::mead101::mead::Text& rights() const;
  ::mead101::mead::Text* release_rights();
  ::mead101::mead::Text* mutable_rights();
  void set_allocated_rights(::mead101::mead::Text* rights);
  private:
  const ::mead101::mead::Text& _internal_rights() const;
  ::mead101::mead::Text* _internal_mutable_rights();
  public:
  void unsafe_arena_set_allocated_rights(
      ::mead101::mead::Text* rights);
  ::mead101::mead::Text* unsafe_arena_release_rights();

  // optional .mead101.mead.Text subtitle = 12;
  bool has_subtitle() const;
  private:
  bool _internal_has_subtitle() const;
  public:
  void clear_subtitle();
  const ::mead101::mead::Text& subtitle() const;
  ::mead101::mead::Text* release_subtitle();
  ::mead101::mead::Text* mutable_subtitle();
  void set_allocated_subtitle(::mead101::mead::Text* subtitle);
  private:
  const ::mead101::mead::Text& _internal_subtitle() const;
  ::mead101::mead::Text* _internal_mutable_subtitle();
  public:
  void unsafe_arena_set_allocated_subtitle(
      ::mead101::mead::Text* subtitle);
  ::mead101::mead::Text* unsafe_arena_release_subtitle();

  // optional .mead101.mead.Text title = 13;
  bool has_title() const;
  private:
  bool _internal_has_title() const;
  public:
  void clear_title();
  const ::mead101::mead::Text& title() const;
  ::mead101::mead::Text* release_title();
  ::mead101::mead::Text* mutable_title();
  void set_allocated_title(::mead101::mead::Text* title);
  private:
  const ::mead101::mead::Text& _internal_title() const;
  ::mead101::mead::Text* _internal_mutable_title();
  public:
  void unsafe_arena_set_allocated_title(
      ::mead101::mead::Text* title);
  ::mead101::mead::Text* unsafe_arena_release_title();

  // optional .mead101.mead.DateTime updated = 14;
  bool has_updated() const;
  private:
  bool _internal_has_updated() const;
  public:
  void clear_updated();
  const ::mead101::mead::DateTime& updated() const;
  ::mead101::mead::DateTime* release_updated();
  ::mead101::mead::DateTime* mutable_updated();
  void set_allocated_updated(::mead101::mead::DateTime* updated);
  private:
  const ::mead101::mead::DateTime& _internal_updated() const;
  ::mead101::mead::DateTime* _internal_mutable_updated();
  public:
  void unsafe_arena_set_allocated_updated(
      ::mead101::mead::DateTime* updated);
  ::mead101::mead::DateTime* unsafe_arena_release_updated();

  // @@protoc_insertion_point(class_scope:mead101.mead.Source)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> any_attribute_value_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> any_value_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Person > author_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Category > category_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Person > contributor_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Link > link_;
  ::mead101::mead::Generator* generator_;
  ::mead101::mead::Icon* icon_;
  ::mead101::mead::Id* id_;
  ::mead101::mead::Logo* logo_;
  ::mead101::mead::Text* rights_;
  ::mead101::mead::Text* subtitle_;
  ::mead101::mead::Text* title_;
  ::mead101::mead::DateTime* updated_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class SubGenreCategory PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.SubGenreCategory) */ {
 public:
  inline SubGenreCategory() : SubGenreCategory(nullptr) {}
  virtual ~SubGenreCategory();

  SubGenreCategory(const SubGenreCategory& from);
  SubGenreCategory(SubGenreCategory&& from) noexcept
    : SubGenreCategory() {
    *this = ::std::move(from);
  }

  inline SubGenreCategory& operator=(const SubGenreCategory& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubGenreCategory& operator=(SubGenreCategory&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubGenreCategory& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubGenreCategory* internal_default_instance() {
    return reinterpret_cast<const SubGenreCategory*>(
               &_SubGenreCategory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    131;

  friend void swap(SubGenreCategory& a, SubGenreCategory& b) {
    a.Swap(&b);
  }
  inline void Swap(SubGenreCategory* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubGenreCategory* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubGenreCategory* New() const final {
    return CreateMaybeMessage<SubGenreCategory>(nullptr);
  }

  SubGenreCategory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubGenreCategory>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubGenreCategory& from);
  void MergeFrom(const SubGenreCategory& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubGenreCategory* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.SubGenreCategory";
  }
  protected:
  explicit SubGenreCategory(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetadataSourceReferenceFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // repeated string metadata_source_reference = 1;
  int metadata_source_reference_size() const;
  private:
  int _internal_metadata_source_reference_size() const;
  public:
  void clear_metadata_source_reference();
  const std::string& metadata_source_reference(int index) const;
  std::string* mutable_metadata_source_reference(int index);
  void set_metadata_source_reference(int index, const std::string& value);
  void set_metadata_source_reference(int index, std::string&& value);
  void set_metadata_source_reference(int index, const char* value);
  void set_metadata_source_reference(int index, const char* value, size_t size);
  std::string* add_metadata_source_reference();
  void add_metadata_source_reference(const std::string& value);
  void add_metadata_source_reference(std::string&& value);
  void add_metadata_source_reference(const char* value);
  void add_metadata_source_reference(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& metadata_source_reference() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_metadata_source_reference();
  private:
  const std::string& _internal_metadata_source_reference(int index) const;
  std::string* _internal_add_metadata_source_reference();
  public:

  // repeated .mead101.mead.SubGenreCategoryValue value = 2;
  int value_size() const;
  private:
  int _internal_value_size() const;
  public:
  void clear_value();
  ::mead101::mead::SubGenreCategoryValue* mutable_value(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::SubGenreCategoryValue >*
      mutable_value();
  private:
  const ::mead101::mead::SubGenreCategoryValue& _internal_value(int index) const;
  ::mead101::mead::SubGenreCategoryValue* _internal_add_value();
  public:
  const ::mead101::mead::SubGenreCategoryValue& value(int index) const;
  ::mead101::mead::SubGenreCategoryValue* add_value();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::SubGenreCategoryValue >&
      value() const;

  // @@protoc_insertion_point(class_scope:mead101.mead.SubGenreCategory)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> metadata_source_reference_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::SubGenreCategoryValue > value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class SubGenreCategoryValue PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.SubGenreCategoryValue) */ {
 public:
  inline SubGenreCategoryValue() : SubGenreCategoryValue(nullptr) {}
  virtual ~SubGenreCategoryValue();

  SubGenreCategoryValue(const SubGenreCategoryValue& from);
  SubGenreCategoryValue(SubGenreCategoryValue&& from) noexcept
    : SubGenreCategoryValue() {
    *this = ::std::move(from);
  }

  inline SubGenreCategoryValue& operator=(const SubGenreCategoryValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubGenreCategoryValue& operator=(SubGenreCategoryValue&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubGenreCategoryValue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubGenreCategoryValue* internal_default_instance() {
    return reinterpret_cast<const SubGenreCategoryValue*>(
               &_SubGenreCategoryValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    132;

  friend void swap(SubGenreCategoryValue& a, SubGenreCategoryValue& b) {
    a.Swap(&b);
  }
  inline void Swap(SubGenreCategoryValue* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubGenreCategoryValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubGenreCategoryValue* New() const final {
    return CreateMaybeMessage<SubGenreCategoryValue>(nullptr);
  }

  SubGenreCategoryValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubGenreCategoryValue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubGenreCategoryValue& from);
  void MergeFrom(const SubGenreCategoryValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubGenreCategoryValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.SubGenreCategoryValue";
  }
  protected:
  explicit SubGenreCategoryValue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNamespaceFieldNumber = 1,
    kUserDefinedValueFieldNumber = 2,
    kExtValueFieldNumber = 3,
  };
  // optional string namespace = 1;
  bool has_namespace_() const;
  private:
  bool _internal_has_namespace_() const;
  public:
  void clear_namespace_();
  const std::string& namespace_() const;
  void set_namespace_(const std::string& value);
  void set_namespace_(std::string&& value);
  void set_namespace_(const char* value);
  void set_namespace_(const char* value, size_t size);
  std::string* mutable_namespace_();
  std::string* release_namespace_();
  void set_allocated_namespace_(std::string* namespace_);
  private:
  const std::string& _internal_namespace_() const;
  void _internal_set_namespace_(const std::string& value);
  std::string* _internal_mutable_namespace_();
  public:

  // optional string user_defined_value = 2;
  bool has_user_defined_value() const;
  private:
  bool _internal_has_user_defined_value() const;
  public:
  void clear_user_defined_value();
  const std::string& user_defined_value() const;
  void set_user_defined_value(const std::string& value);
  void set_user_defined_value(std::string&& value);
  void set_user_defined_value(const char* value);
  void set_user_defined_value(const char* value, size_t size);
  std::string* mutable_user_defined_value();
  std::string* release_user_defined_value();
  void set_allocated_user_defined_value(std::string* user_defined_value);
  private:
  const std::string& _internal_user_defined_value() const;
  void _internal_set_user_defined_value(const std::string& value);
  std::string* _internal_mutable_user_defined_value();
  public:

  // optional .mead101.avs.SubGenre ext_value = 3;
  bool has_ext_value() const;
  private:
  bool _internal_has_ext_value() const;
  public:
  void clear_ext_value();
  const ::mead101::avs::SubGenre& ext_value() const;
  ::mead101::avs::SubGenre* release_ext_value();
  ::mead101::avs::SubGenre* mutable_ext_value();
  void set_allocated_ext_value(::mead101::avs::SubGenre* ext_value);
  private:
  const ::mead101::avs::SubGenre& _internal_ext_value() const;
  ::mead101::avs::SubGenre* _internal_mutable_ext_value();
  public:
  void unsafe_arena_set_allocated_ext_value(
      ::mead101::avs::SubGenre* ext_value);
  ::mead101::avs::SubGenre* unsafe_arena_release_ext_value();

  // @@protoc_insertion_point(class_scope:mead101.mead.SubGenreCategoryValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr namespace__;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_defined_value_;
  ::mead101::avs::SubGenre* ext_value_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class Tempo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.Tempo) */ {
 public:
  inline Tempo() : Tempo(nullptr) {}
  virtual ~Tempo();

  Tempo(const Tempo& from);
  Tempo(Tempo&& from) noexcept
    : Tempo() {
    *this = ::std::move(from);
  }

  inline Tempo& operator=(const Tempo& from) {
    CopyFrom(from);
    return *this;
  }
  inline Tempo& operator=(Tempo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Tempo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Tempo* internal_default_instance() {
    return reinterpret_cast<const Tempo*>(
               &_Tempo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    133;

  friend void swap(Tempo& a, Tempo& b) {
    a.Swap(&b);
  }
  inline void Swap(Tempo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Tempo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Tempo* New() const final {
    return CreateMaybeMessage<Tempo>(nullptr);
  }

  Tempo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Tempo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Tempo& from);
  void MergeFrom(const Tempo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Tempo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.Tempo";
  }
  protected:
  explicit Tempo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetadataSourceReferenceFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // repeated string metadata_source_reference = 1;
  int metadata_source_reference_size() const;
  private:
  int _internal_metadata_source_reference_size() const;
  public:
  void clear_metadata_source_reference();
  const std::string& metadata_source_reference(int index) const;
  std::string* mutable_metadata_source_reference(int index);
  void set_metadata_source_reference(int index, const std::string& value);
  void set_metadata_source_reference(int index, std::string&& value);
  void set_metadata_source_reference(int index, const char* value);
  void set_metadata_source_reference(int index, const char* value, size_t size);
  std::string* add_metadata_source_reference();
  void add_metadata_source_reference(const std::string& value);
  void add_metadata_source_reference(std::string&& value);
  void add_metadata_source_reference(const char* value);
  void add_metadata_source_reference(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& metadata_source_reference() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_metadata_source_reference();
  private:
  const std::string& _internal_metadata_source_reference(int index) const;
  std::string* _internal_add_metadata_source_reference();
  public:

  // optional .mead101.mead.TempoValue value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const ::mead101::mead::TempoValue& value() const;
  ::mead101::mead::TempoValue* release_value();
  ::mead101::mead::TempoValue* mutable_value();
  void set_allocated_value(::mead101::mead::TempoValue* value);
  private:
  const ::mead101::mead::TempoValue& _internal_value() const;
  ::mead101::mead::TempoValue* _internal_mutable_value();
  public:
  void unsafe_arena_set_allocated_value(
      ::mead101::mead::TempoValue* value);
  ::mead101::mead::TempoValue* unsafe_arena_release_value();

  // @@protoc_insertion_point(class_scope:mead101.mead.Tempo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> metadata_source_reference_;
  ::mead101::mead::TempoValue* value_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class TempoValue PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.TempoValue) */ {
 public:
  inline TempoValue() : TempoValue(nullptr) {}
  virtual ~TempoValue();

  TempoValue(const TempoValue& from);
  TempoValue(TempoValue&& from) noexcept
    : TempoValue() {
    *this = ::std::move(from);
  }

  inline TempoValue& operator=(const TempoValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline TempoValue& operator=(TempoValue&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TempoValue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TempoValue* internal_default_instance() {
    return reinterpret_cast<const TempoValue*>(
               &_TempoValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    134;

  friend void swap(TempoValue& a, TempoValue& b) {
    a.Swap(&b);
  }
  inline void Swap(TempoValue* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TempoValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TempoValue* New() const final {
    return CreateMaybeMessage<TempoValue>(nullptr);
  }

  TempoValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TempoValue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TempoValue& from);
  void MergeFrom(const TempoValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TempoValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.TempoValue";
  }
  protected:
  explicit TempoValue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNamespaceFieldNumber = 1,
    kUserDefinedValueFieldNumber = 2,
    kExtValueFieldNumber = 3,
  };
  // optional string namespace = 1;
  bool has_namespace_() const;
  private:
  bool _internal_has_namespace_() const;
  public:
  void clear_namespace_();
  const std::string& namespace_() const;
  void set_namespace_(const std::string& value);
  void set_namespace_(std::string&& value);
  void set_namespace_(const char* value);
  void set_namespace_(const char* value, size_t size);
  std::string* mutable_namespace_();
  std::string* release_namespace_();
  void set_allocated_namespace_(std::string* namespace_);
  private:
  const std::string& _internal_namespace_() const;
  void _internal_set_namespace_(const std::string& value);
  std::string* _internal_mutable_namespace_();
  public:

  // optional string user_defined_value = 2;
  bool has_user_defined_value() const;
  private:
  bool _internal_has_user_defined_value() const;
  public:
  void clear_user_defined_value();
  const std::string& user_defined_value() const;
  void set_user_defined_value(const std::string& value);
  void set_user_defined_value(std::string&& value);
  void set_user_defined_value(const char* value);
  void set_user_defined_value(const char* value, size_t size);
  std::string* mutable_user_defined_value();
  std::string* release_user_defined_value();
  void set_allocated_user_defined_value(std::string* user_defined_value);
  private:
  const std::string& _internal_user_defined_value() const;
  void _internal_set_user_defined_value(const std::string& value);
  std::string* _internal_mutable_user_defined_value();
  public:

  // optional .mead101.avs.Tempo ext_value = 3;
  bool has_ext_value() const;
  private:
  bool _internal_has_ext_value() const;
  public:
  void clear_ext_value();
  const ::mead101::avs::Tempo& ext_value() const;
  ::mead101::avs::Tempo* release_ext_value();
  ::mead101::avs::Tempo* mutable_ext_value();
  void set_allocated_ext_value(::mead101::avs::Tempo* ext_value);
  private:
  const ::mead101::avs::Tempo& _internal_ext_value() const;
  ::mead101::avs::Tempo* _internal_mutable_ext_value();
  public:
  void unsafe_arena_set_allocated_ext_value(
      ::mead101::avs::Tempo* ext_value);
  ::mead101::avs::Tempo* unsafe_arena_release_ext_value();

  // @@protoc_insertion_point(class_scope:mead101.mead.TempoValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr namespace__;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_defined_value_;
  ::mead101::avs::Tempo* ext_value_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class Text PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.Text) */ {
 public:
  inline Text() : Text(nullptr) {}
  virtual ~Text();

  Text(const Text& from);
  Text(Text&& from) noexcept
    : Text() {
    *this = ::std::move(from);
  }

  inline Text& operator=(const Text& from) {
    CopyFrom(from);
    return *this;
  }
  inline Text& operator=(Text&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Text& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Text* internal_default_instance() {
    return reinterpret_cast<const Text*>(
               &_Text_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    135;

  friend void swap(Text& a, Text& b) {
    a.Swap(&b);
  }
  inline void Swap(Text* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Text* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Text* New() const final {
    return CreateMaybeMessage<Text>(nullptr);
  }

  Text* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Text>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Text& from);
  void MergeFrom(const Text& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Text* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.Text";
  }
  protected:
  explicit Text(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnyAttributeValueFieldNumber = 1,
    kAnyValueFieldNumber = 2,
    kTypeFieldNumber = 3,
  };
  // repeated string any_attribute_value = 1;
  int any_attribute_value_size() const;
  private:
  int _internal_any_attribute_value_size() const;
  public:
  void clear_any_attribute_value();
  const std::string& any_attribute_value(int index) const;
  std::string* mutable_any_attribute_value(int index);
  void set_any_attribute_value(int index, const std::string& value);
  void set_any_attribute_value(int index, std::string&& value);
  void set_any_attribute_value(int index, const char* value);
  void set_any_attribute_value(int index, const char* value, size_t size);
  std::string* add_any_attribute_value();
  void add_any_attribute_value(const std::string& value);
  void add_any_attribute_value(std::string&& value);
  void add_any_attribute_value(const char* value);
  void add_any_attribute_value(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& any_attribute_value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_any_attribute_value();
  private:
  const std::string& _internal_any_attribute_value(int index) const;
  std::string* _internal_add_any_attribute_value();
  public:

  // optional string any_value = 2;
  bool has_any_value() const;
  private:
  bool _internal_has_any_value() const;
  public:
  void clear_any_value();
  const std::string& any_value() const;
  void set_any_value(const std::string& value);
  void set_any_value(std::string&& value);
  void set_any_value(const char* value);
  void set_any_value(const char* value, size_t size);
  std::string* mutable_any_value();
  std::string* release_any_value();
  void set_allocated_any_value(std::string* any_value);
  private:
  const std::string& _internal_any_value() const;
  void _internal_set_any_value(const std::string& value);
  std::string* _internal_mutable_any_value();
  public:

  // optional .mead101.avs.TextType_ATOM type = 3;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  const ::mead101::avs::TextType_ATOM& type() const;
  ::mead101::avs::TextType_ATOM* release_type();
  ::mead101::avs::TextType_ATOM* mutable_type();
  void set_allocated_type(::mead101::avs::TextType_ATOM* type);
  private:
  const ::mead101::avs::TextType_ATOM& _internal_type() const;
  ::mead101::avs::TextType_ATOM* _internal_mutable_type();
  public:
  void unsafe_arena_set_allocated_type(
      ::mead101::avs::TextType_ATOM* type);
  ::mead101::avs::TextType_ATOM* unsafe_arena_release_type();

  // @@protoc_insertion_point(class_scope:mead101.mead.Text)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> any_attribute_value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr any_value_;
  ::mead101::avs::TextType_ATOM* type_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class TextWithFormat PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.TextWithFormat) */ {
 public:
  inline TextWithFormat() : TextWithFormat(nullptr) {}
  virtual ~TextWithFormat();

  TextWithFormat(const TextWithFormat& from);
  TextWithFormat(TextWithFormat&& from) noexcept
    : TextWithFormat() {
    *this = ::std::move(from);
  }

  inline TextWithFormat& operator=(const TextWithFormat& from) {
    CopyFrom(from);
    return *this;
  }
  inline TextWithFormat& operator=(TextWithFormat&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TextWithFormat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TextWithFormat* internal_default_instance() {
    return reinterpret_cast<const TextWithFormat*>(
               &_TextWithFormat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    136;

  friend void swap(TextWithFormat& a, TextWithFormat& b) {
    a.Swap(&b);
  }
  inline void Swap(TextWithFormat* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TextWithFormat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TextWithFormat* New() const final {
    return CreateMaybeMessage<TextWithFormat>(nullptr);
  }

  TextWithFormat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TextWithFormat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TextWithFormat& from);
  void MergeFrom(const TextWithFormat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TextWithFormat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.TextWithFormat";
  }
  protected:
  explicit TextWithFormat(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLanguageAndScriptCodeFieldNumber = 4,
    kNamespaceFieldNumber = 5,
    kUserDefinedValueFieldNumber = 6,
    kExtValueFieldNumber = 7,
    kApplicableTerritoryCodeFieldNumber = 1,
    kFormatFieldNumber = 2,
    kIsDefaultFieldNumber = 3,
  };
  // optional string language_and_script_code = 4;
  bool has_language_and_script_code() const;
  private:
  bool _internal_has_language_and_script_code() const;
  public:
  void clear_language_and_script_code();
  const std::string& language_and_script_code() const;
  void set_language_and_script_code(const std::string& value);
  void set_language_and_script_code(std::string&& value);
  void set_language_and_script_code(const char* value);
  void set_language_and_script_code(const char* value, size_t size);
  std::string* mutable_language_and_script_code();
  std::string* release_language_and_script_code();
  void set_allocated_language_and_script_code(std::string* language_and_script_code);
  private:
  const std::string& _internal_language_and_script_code() const;
  void _internal_set_language_and_script_code(const std::string& value);
  std::string* _internal_mutable_language_and_script_code();
  public:

  // optional string namespace = 5;
  bool has_namespace_() const;
  private:
  bool _internal_has_namespace_() const;
  public:
  void clear_namespace_();
  const std::string& namespace_() const;
  void set_namespace_(const std::string& value);
  void set_namespace_(std::string&& value);
  void set_namespace_(const char* value);
  void set_namespace_(const char* value, size_t size);
  std::string* mutable_namespace_();
  std::string* release_namespace_();
  void set_allocated_namespace_(std::string* namespace_);
  private:
  const std::string& _internal_namespace_() const;
  void _internal_set_namespace_(const std::string& value);
  std::string* _internal_mutable_namespace_();
  public:

  // optional string user_defined_value = 6;
  bool has_user_defined_value() const;
  private:
  bool _internal_has_user_defined_value() const;
  public:
  void clear_user_defined_value();
  const std::string& user_defined_value() const;
  void set_user_defined_value(const std::string& value);
  void set_user_defined_value(std::string&& value);
  void set_user_defined_value(const char* value);
  void set_user_defined_value(const char* value, size_t size);
  std::string* mutable_user_defined_value();
  std::string* release_user_defined_value();
  void set_allocated_user_defined_value(std::string* user_defined_value);
  private:
  const std::string& _internal_user_defined_value() const;
  void _internal_set_user_defined_value(const std::string& value);
  std::string* _internal_mutable_user_defined_value();
  public:

  // optional string ext_value = 7;
  bool has_ext_value() const;
  private:
  bool _internal_has_ext_value() const;
  public:
  void clear_ext_value();
  const std::string& ext_value() const;
  void set_ext_value(const std::string& value);
  void set_ext_value(std::string&& value);
  void set_ext_value(const char* value);
  void set_ext_value(const char* value, size_t size);
  std::string* mutable_ext_value();
  std::string* release_ext_value();
  void set_allocated_ext_value(std::string* ext_value);
  private:
  const std::string& _internal_ext_value() const;
  void _internal_set_ext_value(const std::string& value);
  std::string* _internal_mutable_ext_value();
  public:

  // optional .mead101.avs.CurrentTerritoryCode applicable_territory_code = 1;
  bool has_applicable_territory_code() const;
  private:
  bool _internal_has_applicable_territory_code() const;
  public:
  void clear_applicable_territory_code();
  const ::mead101::avs::CurrentTerritoryCode& applicable_territory_code() const;
  ::mead101::avs::CurrentTerritoryCode* release_applicable_territory_code();
  ::mead101::avs::CurrentTerritoryCode* mutable_applicable_territory_code();
  void set_allocated_applicable_territory_code(::mead101::avs::CurrentTerritoryCode* applicable_territory_code);
  private:
  const ::mead101::avs::CurrentTerritoryCode& _internal_applicable_territory_code() const;
  ::mead101::avs::CurrentTerritoryCode* _internal_mutable_applicable_territory_code();
  public:
  void unsafe_arena_set_allocated_applicable_territory_code(
      ::mead101::avs::CurrentTerritoryCode* applicable_territory_code);
  ::mead101::avs::CurrentTerritoryCode* unsafe_arena_release_applicable_territory_code();

  // optional .mead101.avs.TextCodecType format = 2;
  bool has_format() const;
  private:
  bool _internal_has_format() const;
  public:
  void clear_format();
  const ::mead101::avs::TextCodecType& format() const;
  ::mead101::avs::TextCodecType* release_format();
  ::mead101::avs::TextCodecType* mutable_format();
  void set_allocated_format(::mead101::avs::TextCodecType* format);
  private:
  const ::mead101::avs::TextCodecType& _internal_format() const;
  ::mead101::avs::TextCodecType* _internal_mutable_format();
  public:
  void unsafe_arena_set_allocated_format(
      ::mead101::avs::TextCodecType* format);
  ::mead101::avs::TextCodecType* unsafe_arena_release_format();

  // optional bool is_default = 3;
  bool has_is_default() const;
  private:
  bool _internal_has_is_default() const;
  public:
  void clear_is_default();
  bool is_default() const;
  void set_is_default(bool value);
  private:
  bool _internal_is_default() const;
  void _internal_set_is_default(bool value);
  public:

  // @@protoc_insertion_point(class_scope:mead101.mead.TextWithFormat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_and_script_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr namespace__;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_defined_value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ext_value_;
  ::mead101::avs::CurrentTerritoryCode* applicable_territory_code_;
  ::mead101::avs::TextCodecType* format_;
  bool is_default_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class TextWithoutTerritory PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.TextWithoutTerritory) */ {
 public:
  inline TextWithoutTerritory() : TextWithoutTerritory(nullptr) {}
  virtual ~TextWithoutTerritory();

  TextWithoutTerritory(const TextWithoutTerritory& from);
  TextWithoutTerritory(TextWithoutTerritory&& from) noexcept
    : TextWithoutTerritory() {
    *this = ::std::move(from);
  }

  inline TextWithoutTerritory& operator=(const TextWithoutTerritory& from) {
    CopyFrom(from);
    return *this;
  }
  inline TextWithoutTerritory& operator=(TextWithoutTerritory&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TextWithoutTerritory& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TextWithoutTerritory* internal_default_instance() {
    return reinterpret_cast<const TextWithoutTerritory*>(
               &_TextWithoutTerritory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    137;

  friend void swap(TextWithoutTerritory& a, TextWithoutTerritory& b) {
    a.Swap(&b);
  }
  inline void Swap(TextWithoutTerritory* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TextWithoutTerritory* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TextWithoutTerritory* New() const final {
    return CreateMaybeMessage<TextWithoutTerritory>(nullptr);
  }

  TextWithoutTerritory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TextWithoutTerritory>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TextWithoutTerritory& from);
  void MergeFrom(const TextWithoutTerritory& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TextWithoutTerritory* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.TextWithoutTerritory";
  }
  protected:
  explicit TextWithoutTerritory(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLanguageAndScriptCodeFieldNumber = 4,
    kNamespaceFieldNumber = 5,
    kUserDefinedValueFieldNumber = 6,
    kExtValueFieldNumber = 7,
    kApplicableTerritoryCodeFieldNumber = 1,
    kFormatFieldNumber = 2,
    kIsDefaultFieldNumber = 3,
  };
  // optional string language_and_script_code = 4;
  bool has_language_and_script_code() const;
  private:
  bool _internal_has_language_and_script_code() const;
  public:
  void clear_language_and_script_code();
  const std::string& language_and_script_code() const;
  void set_language_and_script_code(const std::string& value);
  void set_language_and_script_code(std::string&& value);
  void set_language_and_script_code(const char* value);
  void set_language_and_script_code(const char* value, size_t size);
  std::string* mutable_language_and_script_code();
  std::string* release_language_and_script_code();
  void set_allocated_language_and_script_code(std::string* language_and_script_code);
  private:
  const std::string& _internal_language_and_script_code() const;
  void _internal_set_language_and_script_code(const std::string& value);
  std::string* _internal_mutable_language_and_script_code();
  public:

  // optional string namespace = 5;
  bool has_namespace_() const;
  private:
  bool _internal_has_namespace_() const;
  public:
  void clear_namespace_();
  const std::string& namespace_() const;
  void set_namespace_(const std::string& value);
  void set_namespace_(std::string&& value);
  void set_namespace_(const char* value);
  void set_namespace_(const char* value, size_t size);
  std::string* mutable_namespace_();
  std::string* release_namespace_();
  void set_allocated_namespace_(std::string* namespace_);
  private:
  const std::string& _internal_namespace_() const;
  void _internal_set_namespace_(const std::string& value);
  std::string* _internal_mutable_namespace_();
  public:

  // optional string user_defined_value = 6;
  bool has_user_defined_value() const;
  private:
  bool _internal_has_user_defined_value() const;
  public:
  void clear_user_defined_value();
  const std::string& user_defined_value() const;
  void set_user_defined_value(const std::string& value);
  void set_user_defined_value(std::string&& value);
  void set_user_defined_value(const char* value);
  void set_user_defined_value(const char* value, size_t size);
  std::string* mutable_user_defined_value();
  std::string* release_user_defined_value();
  void set_allocated_user_defined_value(std::string* user_defined_value);
  private:
  const std::string& _internal_user_defined_value() const;
  void _internal_set_user_defined_value(const std::string& value);
  std::string* _internal_mutable_user_defined_value();
  public:

  // optional string ext_value = 7;
  bool has_ext_value() const;
  private:
  bool _internal_has_ext_value() const;
  public:
  void clear_ext_value();
  const std::string& ext_value() const;
  void set_ext_value(const std::string& value);
  void set_ext_value(std::string&& value);
  void set_ext_value(const char* value);
  void set_ext_value(const char* value, size_t size);
  std::string* mutable_ext_value();
  std::string* release_ext_value();
  void set_allocated_ext_value(std::string* ext_value);
  private:
  const std::string& _internal_ext_value() const;
  void _internal_set_ext_value(const std::string& value);
  std::string* _internal_mutable_ext_value();
  public:

  // optional .mead101.avs.CurrentTerritoryCode applicable_territory_code = 1;
  bool has_applicable_territory_code() const;
  private:
  bool _internal_has_applicable_territory_code() const;
  public:
  void clear_applicable_territory_code();
  const ::mead101::avs::CurrentTerritoryCode& applicable_territory_code() const;
  ::mead101::avs::CurrentTerritoryCode* release_applicable_territory_code();
  ::mead101::avs::CurrentTerritoryCode* mutable_applicable_territory_code();
  void set_allocated_applicable_territory_code(::mead101::avs::CurrentTerritoryCode* applicable_territory_code);
  private:
  const ::mead101::avs::CurrentTerritoryCode& _internal_applicable_territory_code() const;
  ::mead101::avs::CurrentTerritoryCode* _internal_mutable_applicable_territory_code();
  public:
  void unsafe_arena_set_allocated_applicable_territory_code(
      ::mead101::avs::CurrentTerritoryCode* applicable_territory_code);
  ::mead101::avs::CurrentTerritoryCode* unsafe_arena_release_applicable_territory_code();

  // optional .mead101.avs.TextCodecType format = 2;
  bool has_format() const;
  private:
  bool _internal_has_format() const;
  public:
  void clear_format();
  const ::mead101::avs::TextCodecType& format() const;
  ::mead101::avs::TextCodecType* release_format();
  ::mead101::avs::TextCodecType* mutable_format();
  void set_allocated_format(::mead101::avs::TextCodecType* format);
  private:
  const ::mead101::avs::TextCodecType& _internal_format() const;
  ::mead101::avs::TextCodecType* _internal_mutable_format();
  public:
  void unsafe_arena_set_allocated_format(
      ::mead101::avs::TextCodecType* format);
  ::mead101::avs::TextCodecType* unsafe_arena_release_format();

  // optional bool is_default = 3;
  bool has_is_default() const;
  private:
  bool _internal_has_is_default() const;
  public:
  void clear_is_default();
  bool is_default() const;
  void set_is_default(bool value);
  private:
  bool _internal_is_default() const;
  void _internal_set_is_default(bool value);
  public:

  // @@protoc_insertion_point(class_scope:mead101.mead.TextWithoutTerritory)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_and_script_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr namespace__;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_defined_value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ext_value_;
  ::mead101::avs::CurrentTerritoryCode* applicable_territory_code_;
  ::mead101::avs::TextCodecType* format_;
  bool is_default_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class Theme PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.Theme) */ {
 public:
  inline Theme() : Theme(nullptr) {}
  virtual ~Theme();

  Theme(const Theme& from);
  Theme(Theme&& from) noexcept
    : Theme() {
    *this = ::std::move(from);
  }

  inline Theme& operator=(const Theme& from) {
    CopyFrom(from);
    return *this;
  }
  inline Theme& operator=(Theme&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Theme& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Theme* internal_default_instance() {
    return reinterpret_cast<const Theme*>(
               &_Theme_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    138;

  friend void swap(Theme& a, Theme& b) {
    a.Swap(&b);
  }
  inline void Swap(Theme* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Theme* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Theme* New() const final {
    return CreateMaybeMessage<Theme>(nullptr);
  }

  Theme* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Theme>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Theme& from);
  void MergeFrom(const Theme& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Theme* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.Theme";
  }
  protected:
  explicit Theme(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDescriptionFieldNumber = 2,
    kMetadataSourceReferenceFieldNumber = 3,
    kApplicableTerritoryCodeFieldNumber = 1,
    kValueFieldNumber = 4,
  };
  // repeated .mead101.mead.TextWithoutTerritory description = 2;
  int description_size() const;
  private:
  int _internal_description_size() const;
  public:
  void clear_description();
  ::mead101::mead::TextWithoutTerritory* mutable_description(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::TextWithoutTerritory >*
      mutable_description();
  private:
  const ::mead101::mead::TextWithoutTerritory& _internal_description(int index) const;
  ::mead101::mead::TextWithoutTerritory* _internal_add_description();
  public:
  const ::mead101::mead::TextWithoutTerritory& description(int index) const;
  ::mead101::mead::TextWithoutTerritory* add_description();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::TextWithoutTerritory >&
      description() const;

  // repeated string metadata_source_reference = 3;
  int metadata_source_reference_size() const;
  private:
  int _internal_metadata_source_reference_size() const;
  public:
  void clear_metadata_source_reference();
  const std::string& metadata_source_reference(int index) const;
  std::string* mutable_metadata_source_reference(int index);
  void set_metadata_source_reference(int index, const std::string& value);
  void set_metadata_source_reference(int index, std::string&& value);
  void set_metadata_source_reference(int index, const char* value);
  void set_metadata_source_reference(int index, const char* value, size_t size);
  std::string* add_metadata_source_reference();
  void add_metadata_source_reference(const std::string& value);
  void add_metadata_source_reference(std::string&& value);
  void add_metadata_source_reference(const char* value);
  void add_metadata_source_reference(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& metadata_source_reference() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_metadata_source_reference();
  private:
  const std::string& _internal_metadata_source_reference(int index) const;
  std::string* _internal_add_metadata_source_reference();
  public:

  // optional .mead101.avs.CurrentTerritoryCode applicable_territory_code = 1;
  bool has_applicable_territory_code() const;
  private:
  bool _internal_has_applicable_territory_code() const;
  public:
  void clear_applicable_territory_code();
  const ::mead101::avs::CurrentTerritoryCode& applicable_territory_code() const;
  ::mead101::avs::CurrentTerritoryCode* release_applicable_territory_code();
  ::mead101::avs::CurrentTerritoryCode* mutable_applicable_territory_code();
  void set_allocated_applicable_territory_code(::mead101::avs::CurrentTerritoryCode* applicable_territory_code);
  private:
  const ::mead101::avs::CurrentTerritoryCode& _internal_applicable_territory_code() const;
  ::mead101::avs::CurrentTerritoryCode* _internal_mutable_applicable_territory_code();
  public:
  void unsafe_arena_set_allocated_applicable_territory_code(
      ::mead101::avs::CurrentTerritoryCode* applicable_territory_code);
  ::mead101::avs::CurrentTerritoryCode* unsafe_arena_release_applicable_territory_code();

  // optional .mead101.mead.ThemeValue value = 4;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const ::mead101::mead::ThemeValue& value() const;
  ::mead101::mead::ThemeValue* release_value();
  ::mead101::mead::ThemeValue* mutable_value();
  void set_allocated_value(::mead101::mead::ThemeValue* value);
  private:
  const ::mead101::mead::ThemeValue& _internal_value() const;
  ::mead101::mead::ThemeValue* _internal_mutable_value();
  public:
  void unsafe_arena_set_allocated_value(
      ::mead101::mead::ThemeValue* value);
  ::mead101::mead::ThemeValue* unsafe_arena_release_value();

  // @@protoc_insertion_point(class_scope:mead101.mead.Theme)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::TextWithoutTerritory > description_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> metadata_source_reference_;
  ::mead101::avs::CurrentTerritoryCode* applicable_territory_code_;
  ::mead101::mead::ThemeValue* value_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class ThemeValue PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.ThemeValue) */ {
 public:
  inline ThemeValue() : ThemeValue(nullptr) {}
  virtual ~ThemeValue();

  ThemeValue(const ThemeValue& from);
  ThemeValue(ThemeValue&& from) noexcept
    : ThemeValue() {
    *this = ::std::move(from);
  }

  inline ThemeValue& operator=(const ThemeValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline ThemeValue& operator=(ThemeValue&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ThemeValue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ThemeValue* internal_default_instance() {
    return reinterpret_cast<const ThemeValue*>(
               &_ThemeValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    139;

  friend void swap(ThemeValue& a, ThemeValue& b) {
    a.Swap(&b);
  }
  inline void Swap(ThemeValue* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ThemeValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ThemeValue* New() const final {
    return CreateMaybeMessage<ThemeValue>(nullptr);
  }

  ThemeValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ThemeValue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ThemeValue& from);
  void MergeFrom(const ThemeValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ThemeValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.ThemeValue";
  }
  protected:
  explicit ThemeValue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNamespaceFieldNumber = 1,
    kUserDefinedValueFieldNumber = 2,
    kExtValueFieldNumber = 3,
  };
  // optional string namespace = 1;
  bool has_namespace_() const;
  private:
  bool _internal_has_namespace_() const;
  public:
  void clear_namespace_();
  const std::string& namespace_() const;
  void set_namespace_(const std::string& value);
  void set_namespace_(std::string&& value);
  void set_namespace_(const char* value);
  void set_namespace_(const char* value, size_t size);
  std::string* mutable_namespace_();
  std::string* release_namespace_();
  void set_allocated_namespace_(std::string* namespace_);
  private:
  const std::string& _internal_namespace_() const;
  void _internal_set_namespace_(const std::string& value);
  std::string* _internal_mutable_namespace_();
  public:

  // optional string user_defined_value = 2;
  bool has_user_defined_value() const;
  private:
  bool _internal_has_user_defined_value() const;
  public:
  void clear_user_defined_value();
  const std::string& user_defined_value() const;
  void set_user_defined_value(const std::string& value);
  void set_user_defined_value(std::string&& value);
  void set_user_defined_value(const char* value);
  void set_user_defined_value(const char* value, size_t size);
  std::string* mutable_user_defined_value();
  std::string* release_user_defined_value();
  void set_allocated_user_defined_value(std::string* user_defined_value);
  private:
  const std::string& _internal_user_defined_value() const;
  void _internal_set_user_defined_value(const std::string& value);
  std::string* _internal_mutable_user_defined_value();
  public:

  // optional .mead101.avs.Theme ext_value = 3;
  bool has_ext_value() const;
  private:
  bool _internal_has_ext_value() const;
  public:
  void clear_ext_value();
  const ::mead101::avs::Theme& ext_value() const;
  ::mead101::avs::Theme* release_ext_value();
  ::mead101::avs::Theme* mutable_ext_value();
  void set_allocated_ext_value(::mead101::avs::Theme* ext_value);
  private:
  const ::mead101::avs::Theme& _internal_ext_value() const;
  ::mead101::avs::Theme* _internal_mutable_ext_value();
  public:
  void unsafe_arena_set_allocated_ext_value(
      ::mead101::avs::Theme* ext_value);
  ::mead101::avs::Theme* unsafe_arena_release_ext_value();

  // @@protoc_insertion_point(class_scope:mead101.mead.ThemeValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr namespace__;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_defined_value_;
  ::mead101::avs::Theme* ext_value_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class TimeSignature PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.TimeSignature) */ {
 public:
  inline TimeSignature() : TimeSignature(nullptr) {}
  virtual ~TimeSignature();

  TimeSignature(const TimeSignature& from);
  TimeSignature(TimeSignature&& from) noexcept
    : TimeSignature() {
    *this = ::std::move(from);
  }

  inline TimeSignature& operator=(const TimeSignature& from) {
    CopyFrom(from);
    return *this;
  }
  inline TimeSignature& operator=(TimeSignature&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TimeSignature& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TimeSignature* internal_default_instance() {
    return reinterpret_cast<const TimeSignature*>(
               &_TimeSignature_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    140;

  friend void swap(TimeSignature& a, TimeSignature& b) {
    a.Swap(&b);
  }
  inline void Swap(TimeSignature* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TimeSignature* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TimeSignature* New() const final {
    return CreateMaybeMessage<TimeSignature>(nullptr);
  }

  TimeSignature* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TimeSignature>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TimeSignature& from);
  void MergeFrom(const TimeSignature& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TimeSignature* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.TimeSignature";
  }
  protected:
  explicit TimeSignature(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetadataSourceReferenceFieldNumber = 1,
    kModulationFieldNumber = 3,
    kMeterFieldNumber = 2,
    kTempoFieldNumber = 5,
    kNoMeterAvailableFieldNumber = 4,
    kTooManyTempiFieldNumber = 6,
  };
  // repeated string metadata_source_reference = 1;
  int metadata_source_reference_size() const;
  private:
  int _internal_metadata_source_reference_size() const;
  public:
  void clear_metadata_source_reference();
  const std::string& metadata_source_reference(int index) const;
  std::string* mutable_metadata_source_reference(int index);
  void set_metadata_source_reference(int index, const std::string& value);
  void set_metadata_source_reference(int index, std::string&& value);
  void set_metadata_source_reference(int index, const char* value);
  void set_metadata_source_reference(int index, const char* value, size_t size);
  std::string* add_metadata_source_reference();
  void add_metadata_source_reference(const std::string& value);
  void add_metadata_source_reference(std::string&& value);
  void add_metadata_source_reference(const char* value);
  void add_metadata_source_reference(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& metadata_source_reference() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_metadata_source_reference();
  private:
  const std::string& _internal_metadata_source_reference(int index) const;
  std::string* _internal_add_metadata_source_reference();
  public:

  // repeated .mead101.mead.TimeSignatureModulation modulation = 3;
  int modulation_size() const;
  private:
  int _internal_modulation_size() const;
  public:
  void clear_modulation();
  ::mead101::mead::TimeSignatureModulation* mutable_modulation(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::TimeSignatureModulation >*
      mutable_modulation();
  private:
  const ::mead101::mead::TimeSignatureModulation& _internal_modulation(int index) const;
  ::mead101::mead::TimeSignatureModulation* _internal_add_modulation();
  public:
  const ::mead101::mead::TimeSignatureModulation& modulation(int index) const;
  ::mead101::mead::TimeSignatureModulation* add_modulation();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::TimeSignatureModulation >&
      modulation() const;

  // optional .mead101.mead.Meter meter = 2;
  bool has_meter() const;
  private:
  bool _internal_has_meter() const;
  public:
  void clear_meter();
  const ::mead101::mead::Meter& meter() const;
  ::mead101::mead::Meter* release_meter();
  ::mead101::mead::Meter* mutable_meter();
  void set_allocated_meter(::mead101::mead::Meter* meter);
  private:
  const ::mead101::mead::Meter& _internal_meter() const;
  ::mead101::mead::Meter* _internal_mutable_meter();
  public:
  void unsafe_arena_set_allocated_meter(
      ::mead101::mead::Meter* meter);
  ::mead101::mead::Meter* unsafe_arena_release_meter();

  // optional .mead101.mead.TempoValue tempo = 5;
  bool has_tempo() const;
  private:
  bool _internal_has_tempo() const;
  public:
  void clear_tempo();
  const ::mead101::mead::TempoValue& tempo() const;
  ::mead101::mead::TempoValue* release_tempo();
  ::mead101::mead::TempoValue* mutable_tempo();
  void set_allocated_tempo(::mead101::mead::TempoValue* tempo);
  private:
  const ::mead101::mead::TempoValue& _internal_tempo() const;
  ::mead101::mead::TempoValue* _internal_mutable_tempo();
  public:
  void unsafe_arena_set_allocated_tempo(
      ::mead101::mead::TempoValue* tempo);
  ::mead101::mead::TempoValue* unsafe_arena_release_tempo();

  // optional bool no_meter_available = 4;
  bool has_no_meter_available() const;
  private:
  bool _internal_has_no_meter_available() const;
  public:
  void clear_no_meter_available();
  bool no_meter_available() const;
  void set_no_meter_available(bool value);
  private:
  bool _internal_no_meter_available() const;
  void _internal_set_no_meter_available(bool value);
  public:

  // optional bool too_many_tempi = 6;
  bool has_too_many_tempi() const;
  private:
  bool _internal_has_too_many_tempi() const;
  public:
  void clear_too_many_tempi();
  bool too_many_tempi() const;
  void set_too_many_tempi(bool value);
  private:
  bool _internal_too_many_tempi() const;
  void _internal_set_too_many_tempi(bool value);
  public:

  // @@protoc_insertion_point(class_scope:mead101.mead.TimeSignature)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> metadata_source_reference_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::TimeSignatureModulation > modulation_;
  ::mead101::mead::Meter* meter_;
  ::mead101::mead::TempoValue* tempo_;
  bool no_meter_available_;
  bool too_many_tempi_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class TimeSignatureModulation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.TimeSignatureModulation) */ {
 public:
  inline TimeSignatureModulation() : TimeSignatureModulation(nullptr) {}
  virtual ~TimeSignatureModulation();

  TimeSignatureModulation(const TimeSignatureModulation& from);
  TimeSignatureModulation(TimeSignatureModulation&& from) noexcept
    : TimeSignatureModulation() {
    *this = ::std::move(from);
  }

  inline TimeSignatureModulation& operator=(const TimeSignatureModulation& from) {
    CopyFrom(from);
    return *this;
  }
  inline TimeSignatureModulation& operator=(TimeSignatureModulation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TimeSignatureModulation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TimeSignatureModulation* internal_default_instance() {
    return reinterpret_cast<const TimeSignatureModulation*>(
               &_TimeSignatureModulation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    141;

  friend void swap(TimeSignatureModulation& a, TimeSignatureModulation& b) {
    a.Swap(&b);
  }
  inline void Swap(TimeSignatureModulation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TimeSignatureModulation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TimeSignatureModulation* New() const final {
    return CreateMaybeMessage<TimeSignatureModulation>(nullptr);
  }

  TimeSignatureModulation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TimeSignatureModulation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TimeSignatureModulation& from);
  void MergeFrom(const TimeSignatureModulation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TimeSignatureModulation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.TimeSignatureModulation";
  }
  protected:
  explicit TimeSignatureModulation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMeterFieldNumber = 3,
    kTempoFieldNumber = 7,
    kEndPointFieldNumber = 2,
    kEndBarFieldNumber = 1,
    kNoMeterAvailableFieldNumber = 4,
    kStartPointFieldNumber = 6,
    kStartBarFieldNumber = 5,
  };
  // optional .mead101.mead.Meter meter = 3;
  bool has_meter() const;
  private:
  bool _internal_has_meter() const;
  public:
  void clear_meter();
  const ::mead101::mead::Meter& meter() const;
  ::mead101::mead::Meter* release_meter();
  ::mead101::mead::Meter* mutable_meter();
  void set_allocated_meter(::mead101::mead::Meter* meter);
  private:
  const ::mead101::mead::Meter& _internal_meter() const;
  ::mead101::mead::Meter* _internal_mutable_meter();
  public:
  void unsafe_arena_set_allocated_meter(
      ::mead101::mead::Meter* meter);
  ::mead101::mead::Meter* unsafe_arena_release_meter();

  // optional .mead101.mead.Tempo tempo = 7;
  bool has_tempo() const;
  private:
  bool _internal_has_tempo() const;
  public:
  void clear_tempo();
  const ::mead101::mead::Tempo& tempo() const;
  ::mead101::mead::Tempo* release_tempo();
  ::mead101::mead::Tempo* mutable_tempo();
  void set_allocated_tempo(::mead101::mead::Tempo* tempo);
  private:
  const ::mead101::mead::Tempo& _internal_tempo() const;
  ::mead101::mead::Tempo* _internal_mutable_tempo();
  public:
  void unsafe_arena_set_allocated_tempo(
      ::mead101::mead::Tempo* tempo);
  ::mead101::mead::Tempo* unsafe_arena_release_tempo();

  // optional double end_point = 2;
  bool has_end_point() const;
  private:
  bool _internal_has_end_point() const;
  public:
  void clear_end_point();
  double end_point() const;
  void set_end_point(double value);
  private:
  double _internal_end_point() const;
  void _internal_set_end_point(double value);
  public:

  // optional int32 end_bar = 1;
  bool has_end_bar() const;
  private:
  bool _internal_has_end_bar() const;
  public:
  void clear_end_bar();
  ::PROTOBUF_NAMESPACE_ID::int32 end_bar() const;
  void set_end_bar(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_end_bar() const;
  void _internal_set_end_bar(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool no_meter_available = 4;
  bool has_no_meter_available() const;
  private:
  bool _internal_has_no_meter_available() const;
  public:
  void clear_no_meter_available();
  bool no_meter_available() const;
  void set_no_meter_available(bool value);
  private:
  bool _internal_no_meter_available() const;
  void _internal_set_no_meter_available(bool value);
  public:

  // optional double start_point = 6;
  bool has_start_point() const;
  private:
  bool _internal_has_start_point() const;
  public:
  void clear_start_point();
  double start_point() const;
  void set_start_point(double value);
  private:
  double _internal_start_point() const;
  void _internal_set_start_point(double value);
  public:

  // optional int32 start_bar = 5;
  bool has_start_bar() const;
  private:
  bool _internal_has_start_bar() const;
  public:
  void clear_start_bar();
  ::PROTOBUF_NAMESPACE_ID::int32 start_bar() const;
  void set_start_bar(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_start_bar() const;
  void _internal_set_start_bar(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mead101.mead.TimeSignatureModulation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::mead101::mead::Meter* meter_;
  ::mead101::mead::Tempo* tempo_;
  double end_point_;
  ::PROTOBUF_NAMESPACE_ID::int32 end_bar_;
  bool no_meter_available_;
  double start_point_;
  ::PROTOBUF_NAMESPACE_ID::int32 start_bar_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class Timing PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.Timing) */ {
 public:
  inline Timing() : Timing(nullptr) {}
  virtual ~Timing();

  Timing(const Timing& from);
  Timing(Timing&& from) noexcept
    : Timing() {
    *this = ::std::move(from);
  }

  inline Timing& operator=(const Timing& from) {
    CopyFrom(from);
    return *this;
  }
  inline Timing& operator=(Timing&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Timing& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Timing* internal_default_instance() {
    return reinterpret_cast<const Timing*>(
               &_Timing_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    142;

  friend void swap(Timing& a, Timing& b) {
    a.Swap(&b);
  }
  inline void Swap(Timing* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Timing* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Timing* New() const final {
    return CreateMaybeMessage<Timing>(nullptr);
  }

  Timing* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Timing>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Timing& from);
  void MergeFrom(const Timing& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Timing* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.Timing";
  }
  protected:
  explicit Timing(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDurationUsedFieldNumber = 1,
    kStartPointFieldNumber = 2,
  };
  // optional string duration_used = 1;
  bool has_duration_used() const;
  private:
  bool _internal_has_duration_used() const;
  public:
  void clear_duration_used();
  const std::string& duration_used() const;
  void set_duration_used(const std::string& value);
  void set_duration_used(std::string&& value);
  void set_duration_used(const char* value);
  void set_duration_used(const char* value, size_t size);
  std::string* mutable_duration_used();
  std::string* release_duration_used();
  void set_allocated_duration_used(std::string* duration_used);
  private:
  const std::string& _internal_duration_used() const;
  void _internal_set_duration_used(const std::string& value);
  std::string* _internal_mutable_duration_used();
  public:

  // optional string start_point = 2;
  bool has_start_point() const;
  private:
  bool _internal_has_start_point() const;
  public:
  void clear_start_point();
  const std::string& start_point() const;
  void set_start_point(const std::string& value);
  void set_start_point(std::string&& value);
  void set_start_point(const char* value);
  void set_start_point(const char* value, size_t size);
  std::string* mutable_start_point();
  std::string* release_start_point();
  void set_allocated_start_point(std::string* start_point);
  private:
  const std::string& _internal_start_point() const;
  void _internal_set_start_point(const std::string& value);
  std::string* _internal_mutable_start_point();
  public:

  // @@protoc_insertion_point(class_scope:mead101.mead.Timing)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr duration_used_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr start_point_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class TitleTextWithPronunciation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.TitleTextWithPronunciation) */ {
 public:
  inline TitleTextWithPronunciation() : TitleTextWithPronunciation(nullptr) {}
  virtual ~TitleTextWithPronunciation();

  TitleTextWithPronunciation(const TitleTextWithPronunciation& from);
  TitleTextWithPronunciation(TitleTextWithPronunciation&& from) noexcept
    : TitleTextWithPronunciation() {
    *this = ::std::move(from);
  }

  inline TitleTextWithPronunciation& operator=(const TitleTextWithPronunciation& from) {
    CopyFrom(from);
    return *this;
  }
  inline TitleTextWithPronunciation& operator=(TitleTextWithPronunciation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TitleTextWithPronunciation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TitleTextWithPronunciation* internal_default_instance() {
    return reinterpret_cast<const TitleTextWithPronunciation*>(
               &_TitleTextWithPronunciation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    143;

  friend void swap(TitleTextWithPronunciation& a, TitleTextWithPronunciation& b) {
    a.Swap(&b);
  }
  inline void Swap(TitleTextWithPronunciation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TitleTextWithPronunciation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TitleTextWithPronunciation* New() const final {
    return CreateMaybeMessage<TitleTextWithPronunciation>(nullptr);
  }

  TitleTextWithPronunciation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TitleTextWithPronunciation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TitleTextWithPronunciation& from);
  void MergeFrom(const TitleTextWithPronunciation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TitleTextWithPronunciation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.TitleTextWithPronunciation";
  }
  protected:
  explicit TitleTextWithPronunciation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPronunciationFieldNumber = 1,
    kTitleFieldNumber = 2,
  };
  // repeated .mead101.mead.Pronunciation pronunciation = 1;
  int pronunciation_size() const;
  private:
  int _internal_pronunciation_size() const;
  public:
  void clear_pronunciation();
  ::mead101::mead::Pronunciation* mutable_pronunciation(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Pronunciation >*
      mutable_pronunciation();
  private:
  const ::mead101::mead::Pronunciation& _internal_pronunciation(int index) const;
  ::mead101::mead::Pronunciation* _internal_add_pronunciation();
  public:
  const ::mead101::mead::Pronunciation& pronunciation(int index) const;
  ::mead101::mead::Pronunciation* add_pronunciation();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Pronunciation >&
      pronunciation() const;

  // optional string title = 2;
  bool has_title() const;
  private:
  bool _internal_has_title() const;
  public:
  void clear_title();
  const std::string& title() const;
  void set_title(const std::string& value);
  void set_title(std::string&& value);
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  std::string* mutable_title();
  std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // @@protoc_insertion_point(class_scope:mead101.mead.TitleTextWithPronunciation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Pronunciation > pronunciation_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class TitleWithPronunciation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.TitleWithPronunciation) */ {
 public:
  inline TitleWithPronunciation() : TitleWithPronunciation(nullptr) {}
  virtual ~TitleWithPronunciation();

  TitleWithPronunciation(const TitleWithPronunciation& from);
  TitleWithPronunciation(TitleWithPronunciation&& from) noexcept
    : TitleWithPronunciation() {
    *this = ::std::move(from);
  }

  inline TitleWithPronunciation& operator=(const TitleWithPronunciation& from) {
    CopyFrom(from);
    return *this;
  }
  inline TitleWithPronunciation& operator=(TitleWithPronunciation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TitleWithPronunciation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TitleWithPronunciation* internal_default_instance() {
    return reinterpret_cast<const TitleWithPronunciation*>(
               &_TitleWithPronunciation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    144;

  friend void swap(TitleWithPronunciation& a, TitleWithPronunciation& b) {
    a.Swap(&b);
  }
  inline void Swap(TitleWithPronunciation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TitleWithPronunciation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TitleWithPronunciation* New() const final {
    return CreateMaybeMessage<TitleWithPronunciation>(nullptr);
  }

  TitleWithPronunciation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TitleWithPronunciation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TitleWithPronunciation& from);
  void MergeFrom(const TitleWithPronunciation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TitleWithPronunciation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.TitleWithPronunciation";
  }
  protected:
  explicit TitleWithPronunciation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLanguageAndScriptCodeFieldNumber = 1,
    kNamespaceFieldNumber = 2,
    kUserDefinedValueFieldNumber = 6,
    kSubTitleFieldNumber = 3,
    kTitleTextFieldNumber = 4,
    kTitleTypeFieldNumber = 5,
  };
  // optional string language_and_script_code = 1;
  bool has_language_and_script_code() const;
  private:
  bool _internal_has_language_and_script_code() const;
  public:
  void clear_language_and_script_code();
  const std::string& language_and_script_code() const;
  void set_language_and_script_code(const std::string& value);
  void set_language_and_script_code(std::string&& value);
  void set_language_and_script_code(const char* value);
  void set_language_and_script_code(const char* value, size_t size);
  std::string* mutable_language_and_script_code();
  std::string* release_language_and_script_code();
  void set_allocated_language_and_script_code(std::string* language_and_script_code);
  private:
  const std::string& _internal_language_and_script_code() const;
  void _internal_set_language_and_script_code(const std::string& value);
  std::string* _internal_mutable_language_and_script_code();
  public:

  // optional string namespace = 2;
  bool has_namespace_() const;
  private:
  bool _internal_has_namespace_() const;
  public:
  void clear_namespace_();
  const std::string& namespace_() const;
  void set_namespace_(const std::string& value);
  void set_namespace_(std::string&& value);
  void set_namespace_(const char* value);
  void set_namespace_(const char* value, size_t size);
  std::string* mutable_namespace_();
  std::string* release_namespace_();
  void set_allocated_namespace_(std::string* namespace_);
  private:
  const std::string& _internal_namespace_() const;
  void _internal_set_namespace_(const std::string& value);
  std::string* _internal_mutable_namespace_();
  public:

  // optional string user_defined_value = 6;
  bool has_user_defined_value() const;
  private:
  bool _internal_has_user_defined_value() const;
  public:
  void clear_user_defined_value();
  const std::string& user_defined_value() const;
  void set_user_defined_value(const std::string& value);
  void set_user_defined_value(std::string&& value);
  void set_user_defined_value(const char* value);
  void set_user_defined_value(const char* value, size_t size);
  std::string* mutable_user_defined_value();
  std::string* release_user_defined_value();
  void set_allocated_user_defined_value(std::string* user_defined_value);
  private:
  const std::string& _internal_user_defined_value() const;
  void _internal_set_user_defined_value(const std::string& value);
  std::string* _internal_mutable_user_defined_value();
  public:

  // optional .mead101.mead.TitleTextWithPronunciation sub_title = 3;
  bool has_sub_title() const;
  private:
  bool _internal_has_sub_title() const;
  public:
  void clear_sub_title();
  const ::mead101::mead::TitleTextWithPronunciation& sub_title() const;
  ::mead101::mead::TitleTextWithPronunciation* release_sub_title();
  ::mead101::mead::TitleTextWithPronunciation* mutable_sub_title();
  void set_allocated_sub_title(::mead101::mead::TitleTextWithPronunciation* sub_title);
  private:
  const ::mead101::mead::TitleTextWithPronunciation& _internal_sub_title() const;
  ::mead101::mead::TitleTextWithPronunciation* _internal_mutable_sub_title();
  public:
  void unsafe_arena_set_allocated_sub_title(
      ::mead101::mead::TitleTextWithPronunciation* sub_title);
  ::mead101::mead::TitleTextWithPronunciation* unsafe_arena_release_sub_title();

  // optional .mead101.mead.TitleTextWithPronunciation title_text = 4;
  bool has_title_text() const;
  private:
  bool _internal_has_title_text() const;
  public:
  void clear_title_text();
  const ::mead101::mead::TitleTextWithPronunciation& title_text() const;
  ::mead101::mead::TitleTextWithPronunciation* release_title_text();
  ::mead101::mead::TitleTextWithPronunciation* mutable_title_text();
  void set_allocated_title_text(::mead101::mead::TitleTextWithPronunciation* title_text);
  private:
  const ::mead101::mead::TitleTextWithPronunciation& _internal_title_text() const;
  ::mead101::mead::TitleTextWithPronunciation* _internal_mutable_title_text();
  public:
  void unsafe_arena_set_allocated_title_text(
      ::mead101::mead::TitleTextWithPronunciation* title_text);
  ::mead101::mead::TitleTextWithPronunciation* unsafe_arena_release_title_text();

  // optional .mead101.avs.TitleType title_type = 5;
  bool has_title_type() const;
  private:
  bool _internal_has_title_type() const;
  public:
  void clear_title_type();
  const ::mead101::avs::TitleType& title_type() const;
  ::mead101::avs::TitleType* release_title_type();
  ::mead101::avs::TitleType* mutable_title_type();
  void set_allocated_title_type(::mead101::avs::TitleType* title_type);
  private:
  const ::mead101::avs::TitleType& _internal_title_type() const;
  ::mead101::avs::TitleType* _internal_mutable_title_type();
  public:
  void unsafe_arena_set_allocated_title_type(
      ::mead101::avs::TitleType* title_type);
  ::mead101::avs::TitleType* unsafe_arena_release_title_type();

  // @@protoc_insertion_point(class_scope:mead101.mead.TitleWithPronunciation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_and_script_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr namespace__;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_defined_value_;
  ::mead101::mead::TitleTextWithPronunciation* sub_title_;
  ::mead101::mead::TitleTextWithPronunciation* title_text_;
  ::mead101::avs::TitleType* title_type_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class URI PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.URI) */ {
 public:
  inline URI() : URI(nullptr) {}
  virtual ~URI();

  URI(const URI& from);
  URI(URI&& from) noexcept
    : URI() {
    *this = ::std::move(from);
  }

  inline URI& operator=(const URI& from) {
    CopyFrom(from);
    return *this;
  }
  inline URI& operator=(URI&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const URI& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const URI* internal_default_instance() {
    return reinterpret_cast<const URI*>(
               &_URI_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    145;

  friend void swap(URI& a, URI& b) {
    a.Swap(&b);
  }
  inline void Swap(URI* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(URI* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline URI* New() const final {
    return CreateMaybeMessage<URI>(nullptr);
  }

  URI* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<URI>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const URI& from);
  void MergeFrom(const URI& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(URI* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.URI";
  }
  protected:
  explicit URI(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnyAttributeValueFieldNumber = 1,
    kExtValueFieldNumber = 2,
  };
  // repeated string any_attribute_value = 1;
  int any_attribute_value_size() const;
  private:
  int _internal_any_attribute_value_size() const;
  public:
  void clear_any_attribute_value();
  const std::string& any_attribute_value(int index) const;
  std::string* mutable_any_attribute_value(int index);
  void set_any_attribute_value(int index, const std::string& value);
  void set_any_attribute_value(int index, std::string&& value);
  void set_any_attribute_value(int index, const char* value);
  void set_any_attribute_value(int index, const char* value, size_t size);
  std::string* add_any_attribute_value();
  void add_any_attribute_value(const std::string& value);
  void add_any_attribute_value(std::string&& value);
  void add_any_attribute_value(const char* value);
  void add_any_attribute_value(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& any_attribute_value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_any_attribute_value();
  private:
  const std::string& _internal_any_attribute_value(int index) const;
  std::string* _internal_add_any_attribute_value();
  public:

  // optional string ext_value = 2;
  bool has_ext_value() const;
  private:
  bool _internal_has_ext_value() const;
  public:
  void clear_ext_value();
  const std::string& ext_value() const;
  void set_ext_value(const std::string& value);
  void set_ext_value(std::string&& value);
  void set_ext_value(const char* value);
  void set_ext_value(const char* value, size_t size);
  std::string* mutable_ext_value();
  std::string* release_ext_value();
  void set_allocated_ext_value(std::string* ext_value);
  private:
  const std::string& _internal_ext_value() const;
  void _internal_set_ext_value(const std::string& value);
  std::string* _internal_mutable_ext_value();
  public:

  // @@protoc_insertion_point(class_scope:mead101.mead.URI)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> any_attribute_value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ext_value_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class Usage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.Usage) */ {
 public:
  inline Usage() : Usage(nullptr) {}
  virtual ~Usage();

  Usage(const Usage& from);
  Usage(Usage&& from) noexcept
    : Usage() {
    *this = ::std::move(from);
  }

  inline Usage& operator=(const Usage& from) {
    CopyFrom(from);
    return *this;
  }
  inline Usage& operator=(Usage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Usage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Usage* internal_default_instance() {
    return reinterpret_cast<const Usage*>(
               &_Usage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    146;

  friend void swap(Usage& a, Usage& b) {
    a.Swap(&b);
  }
  inline void Swap(Usage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Usage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Usage* New() const final {
    return CreateMaybeMessage<Usage>(nullptr);
  }

  Usage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Usage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Usage& from);
  void MergeFrom(const Usage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Usage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.Usage";
  }
  protected:
  explicit Usage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDescriptionFieldNumber = 1,
    kMetadataSourceReferenceFieldNumber = 2,
    kRelevantResourceFieldNumber = 3,
    kUsageDateFieldNumber = 5,
    kUsagePeriodFieldNumber = 6,
    kSequenceNumberFieldNumber = 4,
  };
  // repeated .mead101.mead.TextWithFormat description = 1;
  int description_size() const;
  private:
  int _internal_description_size() const;
  public:
  void clear_description();
  ::mead101::mead::TextWithFormat* mutable_description(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::TextWithFormat >*
      mutable_description();
  private:
  const ::mead101::mead::TextWithFormat& _internal_description(int index) const;
  ::mead101::mead::TextWithFormat* _internal_add_description();
  public:
  const ::mead101::mead::TextWithFormat& description(int index) const;
  ::mead101::mead::TextWithFormat* add_description();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::TextWithFormat >&
      description() const;

  // repeated string metadata_source_reference = 2;
  int metadata_source_reference_size() const;
  private:
  int _internal_metadata_source_reference_size() const;
  public:
  void clear_metadata_source_reference();
  const std::string& metadata_source_reference(int index) const;
  std::string* mutable_metadata_source_reference(int index);
  void set_metadata_source_reference(int index, const std::string& value);
  void set_metadata_source_reference(int index, std::string&& value);
  void set_metadata_source_reference(int index, const char* value);
  void set_metadata_source_reference(int index, const char* value, size_t size);
  std::string* add_metadata_source_reference();
  void add_metadata_source_reference(const std::string& value);
  void add_metadata_source_reference(std::string&& value);
  void add_metadata_source_reference(const char* value);
  void add_metadata_source_reference(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& metadata_source_reference() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_metadata_source_reference();
  private:
  const std::string& _internal_metadata_source_reference(int index) const;
  std::string* _internal_add_metadata_source_reference();
  public:

  // repeated .mead101.mead.RelatedResource relevant_resource = 3;
  int relevant_resource_size() const;
  private:
  int _internal_relevant_resource_size() const;
  public:
  void clear_relevant_resource();
  ::mead101::mead::RelatedResource* mutable_relevant_resource(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::RelatedResource >*
      mutable_relevant_resource();
  private:
  const ::mead101::mead::RelatedResource& _internal_relevant_resource(int index) const;
  ::mead101::mead::RelatedResource* _internal_add_relevant_resource();
  public:
  const ::mead101::mead::RelatedResource& relevant_resource(int index) const;
  ::mead101::mead::RelatedResource* add_relevant_resource();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::RelatedResource >&
      relevant_resource() const;

  // repeated .mead101.mead.EventDate usage_date = 5;
  int usage_date_size() const;
  private:
  int _internal_usage_date_size() const;
  public:
  void clear_usage_date();
  ::mead101::mead::EventDate* mutable_usage_date(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::EventDate >*
      mutable_usage_date();
  private:
  const ::mead101::mead::EventDate& _internal_usage_date(int index) const;
  ::mead101::mead::EventDate* _internal_add_usage_date();
  public:
  const ::mead101::mead::EventDate& usage_date(int index) const;
  ::mead101::mead::EventDate* add_usage_date();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::EventDate >&
      usage_date() const;

  // repeated .mead101.mead.UsagePeriod usage_period = 6;
  int usage_period_size() const;
  private:
  int _internal_usage_period_size() const;
  public:
  void clear_usage_period();
  ::mead101::mead::UsagePeriod* mutable_usage_period(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::UsagePeriod >*
      mutable_usage_period();
  private:
  const ::mead101::mead::UsagePeriod& _internal_usage_period(int index) const;
  ::mead101::mead::UsagePeriod* _internal_add_usage_period();
  public:
  const ::mead101::mead::UsagePeriod& usage_period(int index) const;
  ::mead101::mead::UsagePeriod* add_usage_period();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::UsagePeriod >&
      usage_period() const;

  // optional int32 sequence_number = 4;
  bool has_sequence_number() const;
  private:
  bool _internal_has_sequence_number() const;
  public:
  void clear_sequence_number();
  ::PROTOBUF_NAMESPACE_ID::int32 sequence_number() const;
  void set_sequence_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sequence_number() const;
  void _internal_set_sequence_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mead101.mead.Usage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::TextWithFormat > description_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> metadata_source_reference_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::RelatedResource > relevant_resource_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::EventDate > usage_date_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::UsagePeriod > usage_period_;
  ::PROTOBUF_NAMESPACE_ID::int32 sequence_number_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class UsagePeriod PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.UsagePeriod) */ {
 public:
  inline UsagePeriod() : UsagePeriod(nullptr) {}
  virtual ~UsagePeriod();

  UsagePeriod(const UsagePeriod& from);
  UsagePeriod(UsagePeriod&& from) noexcept
    : UsagePeriod() {
    *this = ::std::move(from);
  }

  inline UsagePeriod& operator=(const UsagePeriod& from) {
    CopyFrom(from);
    return *this;
  }
  inline UsagePeriod& operator=(UsagePeriod&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UsagePeriod& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UsagePeriod* internal_default_instance() {
    return reinterpret_cast<const UsagePeriod*>(
               &_UsagePeriod_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    147;

  friend void swap(UsagePeriod& a, UsagePeriod& b) {
    a.Swap(&b);
  }
  inline void Swap(UsagePeriod* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UsagePeriod* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UsagePeriod* New() const final {
    return CreateMaybeMessage<UsagePeriod>(nullptr);
  }

  UsagePeriod* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UsagePeriod>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UsagePeriod& from);
  void MergeFrom(const UsagePeriod& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UsagePeriod* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.UsagePeriod";
  }
  protected:
  explicit UsagePeriod(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEndDateFieldNumber = 1,
    kStartDateFieldNumber = 2,
  };
  // optional .mead101.mead.EventDateWithoutFlags end_date = 1;
  bool has_end_date() const;
  private:
  bool _internal_has_end_date() const;
  public:
  void clear_end_date();
  const ::mead101::mead::EventDateWithoutFlags& end_date() const;
  ::mead101::mead::EventDateWithoutFlags* release_end_date();
  ::mead101::mead::EventDateWithoutFlags* mutable_end_date();
  void set_allocated_end_date(::mead101::mead::EventDateWithoutFlags* end_date);
  private:
  const ::mead101::mead::EventDateWithoutFlags& _internal_end_date() const;
  ::mead101::mead::EventDateWithoutFlags* _internal_mutable_end_date();
  public:
  void unsafe_arena_set_allocated_end_date(
      ::mead101::mead::EventDateWithoutFlags* end_date);
  ::mead101::mead::EventDateWithoutFlags* unsafe_arena_release_end_date();

  // optional .mead101.mead.EventDateWithoutFlags start_date = 2;
  bool has_start_date() const;
  private:
  bool _internal_has_start_date() const;
  public:
  void clear_start_date();
  const ::mead101::mead::EventDateWithoutFlags& start_date() const;
  ::mead101::mead::EventDateWithoutFlags* release_start_date();
  ::mead101::mead::EventDateWithoutFlags* mutable_start_date();
  void set_allocated_start_date(::mead101::mead::EventDateWithoutFlags* start_date);
  private:
  const ::mead101::mead::EventDateWithoutFlags& _internal_start_date() const;
  ::mead101::mead::EventDateWithoutFlags* _internal_mutable_start_date();
  public:
  void unsafe_arena_set_allocated_start_date(
      ::mead101::mead::EventDateWithoutFlags* start_date);
  ::mead101::mead::EventDateWithoutFlags* unsafe_arena_release_start_date();

  // @@protoc_insertion_point(class_scope:mead101.mead.UsagePeriod)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::mead101::mead::EventDateWithoutFlags* end_date_;
  ::mead101::mead::EventDateWithoutFlags* start_date_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class UsedMusicalWork PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.UsedMusicalWork) */ {
 public:
  inline UsedMusicalWork() : UsedMusicalWork(nullptr) {}
  virtual ~UsedMusicalWork();

  UsedMusicalWork(const UsedMusicalWork& from);
  UsedMusicalWork(UsedMusicalWork&& from) noexcept
    : UsedMusicalWork() {
    *this = ::std::move(from);
  }

  inline UsedMusicalWork& operator=(const UsedMusicalWork& from) {
    CopyFrom(from);
    return *this;
  }
  inline UsedMusicalWork& operator=(UsedMusicalWork&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UsedMusicalWork& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UsedMusicalWork* internal_default_instance() {
    return reinterpret_cast<const UsedMusicalWork*>(
               &_UsedMusicalWork_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    148;

  friend void swap(UsedMusicalWork& a, UsedMusicalWork& b) {
    a.Swap(&b);
  }
  inline void Swap(UsedMusicalWork* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UsedMusicalWork* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UsedMusicalWork* New() const final {
    return CreateMaybeMessage<UsedMusicalWork>(nullptr);
  }

  UsedMusicalWork* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UsedMusicalWork>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UsedMusicalWork& from);
  void MergeFrom(const UsedMusicalWork& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UsedMusicalWork* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.UsedMusicalWork";
  }
  protected:
  explicit UsedMusicalWork(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetadataSourceReferenceFieldNumber = 1,
    kResourceMusicalWorkReferenceFieldNumber = 2,
  };
  // repeated string metadata_source_reference = 1;
  int metadata_source_reference_size() const;
  private:
  int _internal_metadata_source_reference_size() const;
  public:
  void clear_metadata_source_reference();
  const std::string& metadata_source_reference(int index) const;
  std::string* mutable_metadata_source_reference(int index);
  void set_metadata_source_reference(int index, const std::string& value);
  void set_metadata_source_reference(int index, std::string&& value);
  void set_metadata_source_reference(int index, const char* value);
  void set_metadata_source_reference(int index, const char* value, size_t size);
  std::string* add_metadata_source_reference();
  void add_metadata_source_reference(const std::string& value);
  void add_metadata_source_reference(std::string&& value);
  void add_metadata_source_reference(const char* value);
  void add_metadata_source_reference(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& metadata_source_reference() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_metadata_source_reference();
  private:
  const std::string& _internal_metadata_source_reference(int index) const;
  std::string* _internal_add_metadata_source_reference();
  public:

  // repeated string resource_musical_work_reference = 2;
  int resource_musical_work_reference_size() const;
  private:
  int _internal_resource_musical_work_reference_size() const;
  public:
  void clear_resource_musical_work_reference();
  const std::string& resource_musical_work_reference(int index) const;
  std::string* mutable_resource_musical_work_reference(int index);
  void set_resource_musical_work_reference(int index, const std::string& value);
  void set_resource_musical_work_reference(int index, std::string&& value);
  void set_resource_musical_work_reference(int index, const char* value);
  void set_resource_musical_work_reference(int index, const char* value, size_t size);
  std::string* add_resource_musical_work_reference();
  void add_resource_musical_work_reference(const std::string& value);
  void add_resource_musical_work_reference(std::string&& value);
  void add_resource_musical_work_reference(const char* value);
  void add_resource_musical_work_reference(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& resource_musical_work_reference() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_resource_musical_work_reference();
  private:
  const std::string& _internal_resource_musical_work_reference(int index) const;
  std::string* _internal_add_resource_musical_work_reference();
  public:

  // @@protoc_insertion_point(class_scope:mead101.mead.UsedMusicalWork)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> metadata_source_reference_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> resource_musical_work_reference_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class Venue PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.Venue) */ {
 public:
  inline Venue() : Venue(nullptr) {}
  virtual ~Venue();

  Venue(const Venue& from);
  Venue(Venue&& from) noexcept
    : Venue() {
    *this = ::std::move(from);
  }

  inline Venue& operator=(const Venue& from) {
    CopyFrom(from);
    return *this;
  }
  inline Venue& operator=(Venue&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Venue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Venue* internal_default_instance() {
    return reinterpret_cast<const Venue*>(
               &_Venue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    149;

  friend void swap(Venue& a, Venue& b) {
    a.Swap(&b);
  }
  inline void Swap(Venue* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Venue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Venue* New() const final {
    return CreateMaybeMessage<Venue>(nullptr);
  }

  Venue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Venue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Venue& from);
  void MergeFrom(const Venue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Venue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.Venue";
  }
  protected:
  explicit Venue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocationCodeFieldNumber = 1,
    kVenueAddressFieldNumber = 3,
    kVenueNameFieldNumber = 4,
    kVenueRoomFieldNumber = 5,
    kTerritoryCodeFieldNumber = 2,
  };
  // optional string location_code = 1;
  bool has_location_code() const;
  private:
  bool _internal_has_location_code() const;
  public:
  void clear_location_code();
  const std::string& location_code() const;
  void set_location_code(const std::string& value);
  void set_location_code(std::string&& value);
  void set_location_code(const char* value);
  void set_location_code(const char* value, size_t size);
  std::string* mutable_location_code();
  std::string* release_location_code();
  void set_allocated_location_code(std::string* location_code);
  private:
  const std::string& _internal_location_code() const;
  void _internal_set_location_code(const std::string& value);
  std::string* _internal_mutable_location_code();
  public:

  // optional string venue_address = 3;
  bool has_venue_address() const;
  private:
  bool _internal_has_venue_address() const;
  public:
  void clear_venue_address();
  const std::string& venue_address() const;
  void set_venue_address(const std::string& value);
  void set_venue_address(std::string&& value);
  void set_venue_address(const char* value);
  void set_venue_address(const char* value, size_t size);
  std::string* mutable_venue_address();
  std::string* release_venue_address();
  void set_allocated_venue_address(std::string* venue_address);
  private:
  const std::string& _internal_venue_address() const;
  void _internal_set_venue_address(const std::string& value);
  std::string* _internal_mutable_venue_address();
  public:

  // optional string venue_name = 4;
  bool has_venue_name() const;
  private:
  bool _internal_has_venue_name() const;
  public:
  void clear_venue_name();
  const std::string& venue_name() const;
  void set_venue_name(const std::string& value);
  void set_venue_name(std::string&& value);
  void set_venue_name(const char* value);
  void set_venue_name(const char* value, size_t size);
  std::string* mutable_venue_name();
  std::string* release_venue_name();
  void set_allocated_venue_name(std::string* venue_name);
  private:
  const std::string& _internal_venue_name() const;
  void _internal_set_venue_name(const std::string& value);
  std::string* _internal_mutable_venue_name();
  public:

  // optional string venue_room = 5;
  bool has_venue_room() const;
  private:
  bool _internal_has_venue_room() const;
  public:
  void clear_venue_room();
  const std::string& venue_room() const;
  void set_venue_room(const std::string& value);
  void set_venue_room(std::string&& value);
  void set_venue_room(const char* value);
  void set_venue_room(const char* value, size_t size);
  std::string* mutable_venue_room();
  std::string* release_venue_room();
  void set_allocated_venue_room(std::string* venue_room);
  private:
  const std::string& _internal_venue_room() const;
  void _internal_set_venue_room(const std::string& value);
  std::string* _internal_mutable_venue_room();
  public:

  // optional .mead101.mead.AllTerritoryCode territory_code = 2;
  bool has_territory_code() const;
  private:
  bool _internal_has_territory_code() const;
  public:
  void clear_territory_code();
  const ::mead101::mead::AllTerritoryCode& territory_code() const;
  ::mead101::mead::AllTerritoryCode* release_territory_code();
  ::mead101::mead::AllTerritoryCode* mutable_territory_code();
  void set_allocated_territory_code(::mead101::mead::AllTerritoryCode* territory_code);
  private:
  const ::mead101::mead::AllTerritoryCode& _internal_territory_code() const;
  ::mead101::mead::AllTerritoryCode* _internal_mutable_territory_code();
  public:
  void unsafe_arena_set_allocated_territory_code(
      ::mead101::mead::AllTerritoryCode* territory_code);
  ::mead101::mead::AllTerritoryCode* unsafe_arena_release_territory_code();

  // @@protoc_insertion_point(class_scope:mead101.mead.Venue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr location_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr venue_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr venue_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr venue_room_;
  ::mead101::mead::AllTerritoryCode* territory_code_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class VocalRegister PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.VocalRegister) */ {
 public:
  inline VocalRegister() : VocalRegister(nullptr) {}
  virtual ~VocalRegister();

  VocalRegister(const VocalRegister& from);
  VocalRegister(VocalRegister&& from) noexcept
    : VocalRegister() {
    *this = ::std::move(from);
  }

  inline VocalRegister& operator=(const VocalRegister& from) {
    CopyFrom(from);
    return *this;
  }
  inline VocalRegister& operator=(VocalRegister&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VocalRegister& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VocalRegister* internal_default_instance() {
    return reinterpret_cast<const VocalRegister*>(
               &_VocalRegister_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    150;

  friend void swap(VocalRegister& a, VocalRegister& b) {
    a.Swap(&b);
  }
  inline void Swap(VocalRegister* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VocalRegister* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VocalRegister* New() const final {
    return CreateMaybeMessage<VocalRegister>(nullptr);
  }

  VocalRegister* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VocalRegister>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VocalRegister& from);
  void MergeFrom(const VocalRegister& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VocalRegister* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.VocalRegister";
  }
  protected:
  explicit VocalRegister(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetadataSourceReferenceFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // repeated string metadata_source_reference = 1;
  int metadata_source_reference_size() const;
  private:
  int _internal_metadata_source_reference_size() const;
  public:
  void clear_metadata_source_reference();
  const std::string& metadata_source_reference(int index) const;
  std::string* mutable_metadata_source_reference(int index);
  void set_metadata_source_reference(int index, const std::string& value);
  void set_metadata_source_reference(int index, std::string&& value);
  void set_metadata_source_reference(int index, const char* value);
  void set_metadata_source_reference(int index, const char* value, size_t size);
  std::string* add_metadata_source_reference();
  void add_metadata_source_reference(const std::string& value);
  void add_metadata_source_reference(std::string&& value);
  void add_metadata_source_reference(const char* value);
  void add_metadata_source_reference(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& metadata_source_reference() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_metadata_source_reference();
  private:
  const std::string& _internal_metadata_source_reference(int index) const;
  std::string* _internal_add_metadata_source_reference();
  public:

  // optional .mead101.mead.VocalRegisterValue value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const ::mead101::mead::VocalRegisterValue& value() const;
  ::mead101::mead::VocalRegisterValue* release_value();
  ::mead101::mead::VocalRegisterValue* mutable_value();
  void set_allocated_value(::mead101::mead::VocalRegisterValue* value);
  private:
  const ::mead101::mead::VocalRegisterValue& _internal_value() const;
  ::mead101::mead::VocalRegisterValue* _internal_mutable_value();
  public:
  void unsafe_arena_set_allocated_value(
      ::mead101::mead::VocalRegisterValue* value);
  ::mead101::mead::VocalRegisterValue* unsafe_arena_release_value();

  // @@protoc_insertion_point(class_scope:mead101.mead.VocalRegister)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> metadata_source_reference_;
  ::mead101::mead::VocalRegisterValue* value_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class VocalRegisterValue PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.VocalRegisterValue) */ {
 public:
  inline VocalRegisterValue() : VocalRegisterValue(nullptr) {}
  virtual ~VocalRegisterValue();

  VocalRegisterValue(const VocalRegisterValue& from);
  VocalRegisterValue(VocalRegisterValue&& from) noexcept
    : VocalRegisterValue() {
    *this = ::std::move(from);
  }

  inline VocalRegisterValue& operator=(const VocalRegisterValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline VocalRegisterValue& operator=(VocalRegisterValue&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VocalRegisterValue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VocalRegisterValue* internal_default_instance() {
    return reinterpret_cast<const VocalRegisterValue*>(
               &_VocalRegisterValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    151;

  friend void swap(VocalRegisterValue& a, VocalRegisterValue& b) {
    a.Swap(&b);
  }
  inline void Swap(VocalRegisterValue* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VocalRegisterValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VocalRegisterValue* New() const final {
    return CreateMaybeMessage<VocalRegisterValue>(nullptr);
  }

  VocalRegisterValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VocalRegisterValue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VocalRegisterValue& from);
  void MergeFrom(const VocalRegisterValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VocalRegisterValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.VocalRegisterValue";
  }
  protected:
  explicit VocalRegisterValue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNamespaceFieldNumber = 1,
    kUserDefinedValueFieldNumber = 2,
    kExtValueFieldNumber = 3,
  };
  // optional string namespace = 1;
  bool has_namespace_() const;
  private:
  bool _internal_has_namespace_() const;
  public:
  void clear_namespace_();
  const std::string& namespace_() const;
  void set_namespace_(const std::string& value);
  void set_namespace_(std::string&& value);
  void set_namespace_(const char* value);
  void set_namespace_(const char* value, size_t size);
  std::string* mutable_namespace_();
  std::string* release_namespace_();
  void set_allocated_namespace_(std::string* namespace_);
  private:
  const std::string& _internal_namespace_() const;
  void _internal_set_namespace_(const std::string& value);
  std::string* _internal_mutable_namespace_();
  public:

  // optional string user_defined_value = 2;
  bool has_user_defined_value() const;
  private:
  bool _internal_has_user_defined_value() const;
  public:
  void clear_user_defined_value();
  const std::string& user_defined_value() const;
  void set_user_defined_value(const std::string& value);
  void set_user_defined_value(std::string&& value);
  void set_user_defined_value(const char* value);
  void set_user_defined_value(const char* value, size_t size);
  std::string* mutable_user_defined_value();
  std::string* release_user_defined_value();
  void set_allocated_user_defined_value(std::string* user_defined_value);
  private:
  const std::string& _internal_user_defined_value() const;
  void _internal_set_user_defined_value(const std::string& value);
  std::string* _internal_mutable_user_defined_value();
  public:

  // optional .mead101.avs.VocalRegister ext_value = 3;
  bool has_ext_value() const;
  private:
  bool _internal_has_ext_value() const;
  public:
  void clear_ext_value();
  const ::mead101::avs::VocalRegister& ext_value() const;
  ::mead101::avs::VocalRegister* release_ext_value();
  ::mead101::avs::VocalRegister* mutable_ext_value();
  void set_allocated_ext_value(::mead101::avs::VocalRegister* ext_value);
  private:
  const ::mead101::avs::VocalRegister& _internal_ext_value() const;
  ::mead101::avs::VocalRegister* _internal_mutable_ext_value();
  public:
  void unsafe_arena_set_allocated_ext_value(
      ::mead101::avs::VocalRegister* ext_value);
  ::mead101::avs::VocalRegister* unsafe_arena_release_ext_value();

  // @@protoc_insertion_point(class_scope:mead101.mead.VocalRegisterValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr namespace__;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_defined_value_;
  ::mead101::avs::VocalRegister* ext_value_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class Work PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.Work) */ {
 public:
  inline Work() : Work(nullptr) {}
  virtual ~Work();

  Work(const Work& from);
  Work(Work&& from) noexcept
    : Work() {
    *this = ::std::move(from);
  }

  inline Work& operator=(const Work& from) {
    CopyFrom(from);
    return *this;
  }
  inline Work& operator=(Work&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Work& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Work* internal_default_instance() {
    return reinterpret_cast<const Work*>(
               &_Work_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    152;

  friend void swap(Work& a, Work& b) {
    a.Swap(&b);
  }
  inline void Swap(Work* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Work* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Work* New() const final {
    return CreateMaybeMessage<Work>(nullptr);
  }

  Work* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Work>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Work& from);
  void MergeFrom(const Work& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Work* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.Work";
  }
  protected:
  explicit Work(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWorkTitleFieldNumber = 3,
    kWriterFieldNumber = 4,
    kISWCFieldNumber = 1,
    kProprietaryWorkIdFieldNumber = 2,
  };
  // repeated .mead101.mead.WorkTitle work_title = 3;
  int work_title_size() const;
  private:
  int _internal_work_title_size() const;
  public:
  void clear_work_title();
  ::mead101::mead::WorkTitle* mutable_work_title(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::WorkTitle >*
      mutable_work_title();
  private:
  const ::mead101::mead::WorkTitle& _internal_work_title(int index) const;
  ::mead101::mead::WorkTitle* _internal_add_work_title();
  public:
  const ::mead101::mead::WorkTitle& work_title(int index) const;
  ::mead101::mead::WorkTitle* add_work_title();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::WorkTitle >&
      work_title() const;

  // repeated .mead101.mead.PartyWithNames writer = 4;
  int writer_size() const;
  private:
  int _internal_writer_size() const;
  public:
  void clear_writer();
  ::mead101::mead::PartyWithNames* mutable_writer(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::PartyWithNames >*
      mutable_writer();
  private:
  const ::mead101::mead::PartyWithNames& _internal_writer(int index) const;
  ::mead101::mead::PartyWithNames* _internal_add_writer();
  public:
  const ::mead101::mead::PartyWithNames& writer(int index) const;
  ::mead101::mead::PartyWithNames* add_writer();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::PartyWithNames >&
      writer() const;

  // optional string i_s_w_c = 1;
  bool has_i_s_w_c() const;
  private:
  bool _internal_has_i_s_w_c() const;
  public:
  void clear_i_s_w_c();
  const std::string& i_s_w_c() const;
  void set_i_s_w_c(const std::string& value);
  void set_i_s_w_c(std::string&& value);
  void set_i_s_w_c(const char* value);
  void set_i_s_w_c(const char* value, size_t size);
  std::string* mutable_i_s_w_c();
  std::string* release_i_s_w_c();
  void set_allocated_i_s_w_c(std::string* i_s_w_c);
  private:
  const std::string& _internal_i_s_w_c() const;
  void _internal_set_i_s_w_c(const std::string& value);
  std::string* _internal_mutable_i_s_w_c();
  public:

  // optional string proprietary_work_id = 2;
  bool has_proprietary_work_id() const;
  private:
  bool _internal_has_proprietary_work_id() const;
  public:
  void clear_proprietary_work_id();
  const std::string& proprietary_work_id() const;
  void set_proprietary_work_id(const std::string& value);
  void set_proprietary_work_id(std::string&& value);
  void set_proprietary_work_id(const char* value);
  void set_proprietary_work_id(const char* value, size_t size);
  std::string* mutable_proprietary_work_id();
  std::string* release_proprietary_work_id();
  void set_allocated_proprietary_work_id(std::string* proprietary_work_id);
  private:
  const std::string& _internal_proprietary_work_id() const;
  void _internal_set_proprietary_work_id(const std::string& value);
  std::string* _internal_mutable_proprietary_work_id();
  public:

  // @@protoc_insertion_point(class_scope:mead101.mead.Work)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::WorkTitle > work_title_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::PartyWithNames > writer_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr i_s_w_c_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr proprietary_work_id_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class WorkHierarchy PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.WorkHierarchy) */ {
 public:
  inline WorkHierarchy() : WorkHierarchy(nullptr) {}
  virtual ~WorkHierarchy();

  WorkHierarchy(const WorkHierarchy& from);
  WorkHierarchy(WorkHierarchy&& from) noexcept
    : WorkHierarchy() {
    *this = ::std::move(from);
  }

  inline WorkHierarchy& operator=(const WorkHierarchy& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorkHierarchy& operator=(WorkHierarchy&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WorkHierarchy& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WorkHierarchy* internal_default_instance() {
    return reinterpret_cast<const WorkHierarchy*>(
               &_WorkHierarchy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    153;

  friend void swap(WorkHierarchy& a, WorkHierarchy& b) {
    a.Swap(&b);
  }
  inline void Swap(WorkHierarchy* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WorkHierarchy* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WorkHierarchy* New() const final {
    return CreateMaybeMessage<WorkHierarchy>(nullptr);
  }

  WorkHierarchy* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WorkHierarchy>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WorkHierarchy& from);
  void MergeFrom(const WorkHierarchy& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorkHierarchy* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.WorkHierarchy";
  }
  protected:
  explicit WorkHierarchy(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChildFieldNumber = 1,
    kMetadataSourceReferenceFieldNumber = 5,
    kWorkTitleFieldNumber = 8,
    kFormFieldNumber = 2,
    kWorkIdFieldNumber = 7,
    kIsCompleteFieldNumber = 3,
    kIsDescribedElementFieldNumber = 4,
    kSequenceNumberFieldNumber = 6,
  };
  // repeated .mead101.mead.ChildWorkHierarchy child = 1;
  int child_size() const;
  private:
  int _internal_child_size() const;
  public:
  void clear_child();
  ::mead101::mead::ChildWorkHierarchy* mutable_child(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::ChildWorkHierarchy >*
      mutable_child();
  private:
  const ::mead101::mead::ChildWorkHierarchy& _internal_child(int index) const;
  ::mead101::mead::ChildWorkHierarchy* _internal_add_child();
  public:
  const ::mead101::mead::ChildWorkHierarchy& child(int index) const;
  ::mead101::mead::ChildWorkHierarchy* add_child();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::ChildWorkHierarchy >&
      child() const;

  // repeated string metadata_source_reference = 5;
  int metadata_source_reference_size() const;
  private:
  int _internal_metadata_source_reference_size() const;
  public:
  void clear_metadata_source_reference();
  const std::string& metadata_source_reference(int index) const;
  std::string* mutable_metadata_source_reference(int index);
  void set_metadata_source_reference(int index, const std::string& value);
  void set_metadata_source_reference(int index, std::string&& value);
  void set_metadata_source_reference(int index, const char* value);
  void set_metadata_source_reference(int index, const char* value, size_t size);
  std::string* add_metadata_source_reference();
  void add_metadata_source_reference(const std::string& value);
  void add_metadata_source_reference(std::string&& value);
  void add_metadata_source_reference(const char* value);
  void add_metadata_source_reference(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& metadata_source_reference() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_metadata_source_reference();
  private:
  const std::string& _internal_metadata_source_reference(int index) const;
  std::string* _internal_add_metadata_source_reference();
  public:

  // repeated .mead101.mead.WorkTitle work_title = 8;
  int work_title_size() const;
  private:
  int _internal_work_title_size() const;
  public:
  void clear_work_title();
  ::mead101::mead::WorkTitle* mutable_work_title(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::WorkTitle >*
      mutable_work_title();
  private:
  const ::mead101::mead::WorkTitle& _internal_work_title(int index) const;
  ::mead101::mead::WorkTitle* _internal_add_work_title();
  public:
  const ::mead101::mead::WorkTitle& work_title(int index) const;
  ::mead101::mead::WorkTitle* add_work_title();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::WorkTitle >&
      work_title() const;

  // optional .mead101.mead.Form form = 2;
  bool has_form() const;
  private:
  bool _internal_has_form() const;
  public:
  void clear_form();
  const ::mead101::mead::Form& form() const;
  ::mead101::mead::Form* release_form();
  ::mead101::mead::Form* mutable_form();
  void set_allocated_form(::mead101::mead::Form* form);
  private:
  const ::mead101::mead::Form& _internal_form() const;
  ::mead101::mead::Form* _internal_mutable_form();
  public:
  void unsafe_arena_set_allocated_form(
      ::mead101::mead::Form* form);
  ::mead101::mead::Form* unsafe_arena_release_form();

  // optional .mead101.mead.MusicalWorkId work_id = 7;
  bool has_work_id() const;
  private:
  bool _internal_has_work_id() const;
  public:
  void clear_work_id();
  const ::mead101::mead::MusicalWorkId& work_id() const;
  ::mead101::mead::MusicalWorkId* release_work_id();
  ::mead101::mead::MusicalWorkId* mutable_work_id();
  void set_allocated_work_id(::mead101::mead::MusicalWorkId* work_id);
  private:
  const ::mead101::mead::MusicalWorkId& _internal_work_id() const;
  ::mead101::mead::MusicalWorkId* _internal_mutable_work_id();
  public:
  void unsafe_arena_set_allocated_work_id(
      ::mead101::mead::MusicalWorkId* work_id);
  ::mead101::mead::MusicalWorkId* unsafe_arena_release_work_id();

  // optional bool is_complete = 3;
  bool has_is_complete() const;
  private:
  bool _internal_has_is_complete() const;
  public:
  void clear_is_complete();
  bool is_complete() const;
  void set_is_complete(bool value);
  private:
  bool _internal_is_complete() const;
  void _internal_set_is_complete(bool value);
  public:

  // optional bool is_described_element = 4;
  bool has_is_described_element() const;
  private:
  bool _internal_has_is_described_element() const;
  public:
  void clear_is_described_element();
  bool is_described_element() const;
  void set_is_described_element(bool value);
  private:
  bool _internal_is_described_element() const;
  void _internal_set_is_described_element(bool value);
  public:

  // optional int32 sequence_number = 6;
  bool has_sequence_number() const;
  private:
  bool _internal_has_sequence_number() const;
  public:
  void clear_sequence_number();
  ::PROTOBUF_NAMESPACE_ID::int32 sequence_number() const;
  void set_sequence_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sequence_number() const;
  void _internal_set_sequence_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mead101.mead.WorkHierarchy)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::ChildWorkHierarchy > child_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> metadata_source_reference_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::WorkTitle > work_title_;
  ::mead101::mead::Form* form_;
  ::mead101::mead::MusicalWorkId* work_id_;
  bool is_complete_;
  bool is_described_element_;
  ::PROTOBUF_NAMESPACE_ID::int32 sequence_number_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class WorkInformation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.WorkInformation) */ {
 public:
  inline WorkInformation() : WorkInformation(nullptr) {}
  virtual ~WorkInformation();

  WorkInformation(const WorkInformation& from);
  WorkInformation(WorkInformation&& from) noexcept
    : WorkInformation() {
    *this = ::std::move(from);
  }

  inline WorkInformation& operator=(const WorkInformation& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorkInformation& operator=(WorkInformation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WorkInformation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WorkInformation* internal_default_instance() {
    return reinterpret_cast<const WorkInformation*>(
               &_WorkInformation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    154;

  friend void swap(WorkInformation& a, WorkInformation& b) {
    a.Swap(&b);
  }
  inline void Swap(WorkInformation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WorkInformation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WorkInformation* New() const final {
    return CreateMaybeMessage<WorkInformation>(nullptr);
  }

  WorkInformation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WorkInformation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WorkInformation& from);
  void MergeFrom(const WorkInformation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorkInformation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.WorkInformation";
  }
  protected:
  explicit WorkInformation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAlternativeTitleFieldNumber = 1,
    kArtisticInfluenceFieldNumber = 2,
    kAwardFieldNumber = 3,
    kCommentaryNoteFieldNumber = 5,
    kDanceAndRhythmStyleFieldNumber = 6,
    kDerivedRecordingFieldNumber = 7,
    kEpochFieldNumber = 8,
    kIsSimilarFieldNumber = 11,
    kLyricsFieldNumber = 12,
    kLyricsMoodFieldNumber = 13,
    kRelatedWorkFieldNumber = 15,
    kTargetInstrumentFieldNumber = 17,
    kThemeFieldNumber = 18,
    kWorkHierarchyFieldNumber = 21,
    kMusicalWorkReferenceFieldNumber = 14,
    kClassicalPeriodFieldNumber = 4,
    kFormFieldNumber = 9,
    kHarmonyFieldNumber = 10,
    kSubGenreCategoryFieldNumber = 16,
    kTimeSignatureFieldNumber = 19,
    kVocalRegisterFieldNumber = 20,
    kWorkSummaryFieldNumber = 22,
  };
  // repeated .mead101.mead.AlternativeTitle alternative_title = 1;
  int alternative_title_size() const;
  private:
  int _internal_alternative_title_size() const;
  public:
  void clear_alternative_title();
  ::mead101::mead::AlternativeTitle* mutable_alternative_title(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::AlternativeTitle >*
      mutable_alternative_title();
  private:
  const ::mead101::mead::AlternativeTitle& _internal_alternative_title(int index) const;
  ::mead101::mead::AlternativeTitle* _internal_add_alternative_title();
  public:
  const ::mead101::mead::AlternativeTitle& alternative_title(int index) const;
  ::mead101::mead::AlternativeTitle* add_alternative_title();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::AlternativeTitle >&
      alternative_title() const;

  // repeated .mead101.mead.ArtisticInfluence artistic_influence = 2;
  int artistic_influence_size() const;
  private:
  int _internal_artistic_influence_size() const;
  public:
  void clear_artistic_influence();
  ::mead101::mead::ArtisticInfluence* mutable_artistic_influence(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::ArtisticInfluence >*
      mutable_artistic_influence();
  private:
  const ::mead101::mead::ArtisticInfluence& _internal_artistic_influence(int index) const;
  ::mead101::mead::ArtisticInfluence* _internal_add_artistic_influence();
  public:
  const ::mead101::mead::ArtisticInfluence& artistic_influence(int index) const;
  ::mead101::mead::ArtisticInfluence* add_artistic_influence();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::ArtisticInfluence >&
      artistic_influence() const;

  // repeated .mead101.mead.Award award = 3;
  int award_size() const;
  private:
  int _internal_award_size() const;
  public:
  void clear_award();
  ::mead101::mead::Award* mutable_award(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Award >*
      mutable_award();
  private:
  const ::mead101::mead::Award& _internal_award(int index) const;
  ::mead101::mead::Award* _internal_add_award();
  public:
  const ::mead101::mead::Award& award(int index) const;
  ::mead101::mead::Award* add_award();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Award >&
      award() const;

  // repeated .mead101.mead.CommentaryNote commentary_note = 5;
  int commentary_note_size() const;
  private:
  int _internal_commentary_note_size() const;
  public:
  void clear_commentary_note();
  ::mead101::mead::CommentaryNote* mutable_commentary_note(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::CommentaryNote >*
      mutable_commentary_note();
  private:
  const ::mead101::mead::CommentaryNote& _internal_commentary_note(int index) const;
  ::mead101::mead::CommentaryNote* _internal_add_commentary_note();
  public:
  const ::mead101::mead::CommentaryNote& commentary_note(int index) const;
  ::mead101::mead::CommentaryNote* add_commentary_note();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::CommentaryNote >&
      commentary_note() const;

  // repeated .mead101.mead.DanceAndRhythmStyle dance_and_rhythm_style = 6;
  int dance_and_rhythm_style_size() const;
  private:
  int _internal_dance_and_rhythm_style_size() const;
  public:
  void clear_dance_and_rhythm_style();
  ::mead101::mead::DanceAndRhythmStyle* mutable_dance_and_rhythm_style(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::DanceAndRhythmStyle >*
      mutable_dance_and_rhythm_style();
  private:
  const ::mead101::mead::DanceAndRhythmStyle& _internal_dance_and_rhythm_style(int index) const;
  ::mead101::mead::DanceAndRhythmStyle* _internal_add_dance_and_rhythm_style();
  public:
  const ::mead101::mead::DanceAndRhythmStyle& dance_and_rhythm_style(int index) const;
  ::mead101::mead::DanceAndRhythmStyle* add_dance_and_rhythm_style();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::DanceAndRhythmStyle >&
      dance_and_rhythm_style() const;

  // repeated .mead101.mead.DerivedRecording derived_recording = 7;
  int derived_recording_size() const;
  private:
  int _internal_derived_recording_size() const;
  public:
  void clear_derived_recording();
  ::mead101::mead::DerivedRecording* mutable_derived_recording(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::DerivedRecording >*
      mutable_derived_recording();
  private:
  const ::mead101::mead::DerivedRecording& _internal_derived_recording(int index) const;
  ::mead101::mead::DerivedRecording* _internal_add_derived_recording();
  public:
  const ::mead101::mead::DerivedRecording& derived_recording(int index) const;
  ::mead101::mead::DerivedRecording* add_derived_recording();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::DerivedRecording >&
      derived_recording() const;

  // repeated .mead101.mead.Epoch epoch = 8;
  int epoch_size() const;
  private:
  int _internal_epoch_size() const;
  public:
  void clear_epoch();
  ::mead101::mead::Epoch* mutable_epoch(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Epoch >*
      mutable_epoch();
  private:
  const ::mead101::mead::Epoch& _internal_epoch(int index) const;
  ::mead101::mead::Epoch* _internal_add_epoch();
  public:
  const ::mead101::mead::Epoch& epoch(int index) const;
  ::mead101::mead::Epoch* add_epoch();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Epoch >&
      epoch() const;

  // repeated .mead101.mead.SimilarWork is_similar = 11;
  int is_similar_size() const;
  private:
  int _internal_is_similar_size() const;
  public:
  void clear_is_similar();
  ::mead101::mead::SimilarWork* mutable_is_similar(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::SimilarWork >*
      mutable_is_similar();
  private:
  const ::mead101::mead::SimilarWork& _internal_is_similar(int index) const;
  ::mead101::mead::SimilarWork* _internal_add_is_similar();
  public:
  const ::mead101::mead::SimilarWork& is_similar(int index) const;
  ::mead101::mead::SimilarWork* add_is_similar();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::SimilarWork >&
      is_similar() const;

  // repeated .mead101.mead.Lyrics lyrics = 12;
  int lyrics_size() const;
  private:
  int _internal_lyrics_size() const;
  public:
  void clear_lyrics();
  ::mead101::mead::Lyrics* mutable_lyrics(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Lyrics >*
      mutable_lyrics();
  private:
  const ::mead101::mead::Lyrics& _internal_lyrics(int index) const;
  ::mead101::mead::Lyrics* _internal_add_lyrics();
  public:
  const ::mead101::mead::Lyrics& lyrics(int index) const;
  ::mead101::mead::Lyrics* add_lyrics();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Lyrics >&
      lyrics() const;

  // repeated .mead101.mead.Mood lyrics_mood = 13;
  int lyrics_mood_size() const;
  private:
  int _internal_lyrics_mood_size() const;
  public:
  void clear_lyrics_mood();
  ::mead101::mead::Mood* mutable_lyrics_mood(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Mood >*
      mutable_lyrics_mood();
  private:
  const ::mead101::mead::Mood& _internal_lyrics_mood(int index) const;
  ::mead101::mead::Mood* _internal_add_lyrics_mood();
  public:
  const ::mead101::mead::Mood& lyrics_mood(int index) const;
  ::mead101::mead::Mood* add_lyrics_mood();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Mood >&
      lyrics_mood() const;

  // repeated .mead101.mead.RelatedWork related_work = 15;
  int related_work_size() const;
  private:
  int _internal_related_work_size() const;
  public:
  void clear_related_work();
  ::mead101::mead::RelatedWork* mutable_related_work(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::RelatedWork >*
      mutable_related_work();
  private:
  const ::mead101::mead::RelatedWork& _internal_related_work(int index) const;
  ::mead101::mead::RelatedWork* _internal_add_related_work();
  public:
  const ::mead101::mead::RelatedWork& related_work(int index) const;
  ::mead101::mead::RelatedWork* add_related_work();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::RelatedWork >&
      related_work() const;

  // repeated .mead101.mead.Instrument target_instrument = 17;
  int target_instrument_size() const;
  private:
  int _internal_target_instrument_size() const;
  public:
  void clear_target_instrument();
  ::mead101::mead::Instrument* mutable_target_instrument(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Instrument >*
      mutable_target_instrument();
  private:
  const ::mead101::mead::Instrument& _internal_target_instrument(int index) const;
  ::mead101::mead::Instrument* _internal_add_target_instrument();
  public:
  const ::mead101::mead::Instrument& target_instrument(int index) const;
  ::mead101::mead::Instrument* add_target_instrument();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Instrument >&
      target_instrument() const;

  // repeated .mead101.mead.Theme theme = 18;
  int theme_size() const;
  private:
  int _internal_theme_size() const;
  public:
  void clear_theme();
  ::mead101::mead::Theme* mutable_theme(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Theme >*
      mutable_theme();
  private:
  const ::mead101::mead::Theme& _internal_theme(int index) const;
  ::mead101::mead::Theme* _internal_add_theme();
  public:
  const ::mead101::mead::Theme& theme(int index) const;
  ::mead101::mead::Theme* add_theme();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Theme >&
      theme() const;

  // repeated .mead101.mead.WorkHierarchy work_hierarchy = 21;
  int work_hierarchy_size() const;
  private:
  int _internal_work_hierarchy_size() const;
  public:
  void clear_work_hierarchy();
  ::mead101::mead::WorkHierarchy* mutable_work_hierarchy(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::WorkHierarchy >*
      mutable_work_hierarchy();
  private:
  const ::mead101::mead::WorkHierarchy& _internal_work_hierarchy(int index) const;
  ::mead101::mead::WorkHierarchy* _internal_add_work_hierarchy();
  public:
  const ::mead101::mead::WorkHierarchy& work_hierarchy(int index) const;
  ::mead101::mead::WorkHierarchy* add_work_hierarchy();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::WorkHierarchy >&
      work_hierarchy() const;

  // optional string musical_work_reference = 14;
  bool has_musical_work_reference() const;
  private:
  bool _internal_has_musical_work_reference() const;
  public:
  void clear_musical_work_reference();
  const std::string& musical_work_reference() const;
  void set_musical_work_reference(const std::string& value);
  void set_musical_work_reference(std::string&& value);
  void set_musical_work_reference(const char* value);
  void set_musical_work_reference(const char* value, size_t size);
  std::string* mutable_musical_work_reference();
  std::string* release_musical_work_reference();
  void set_allocated_musical_work_reference(std::string* musical_work_reference);
  private:
  const std::string& _internal_musical_work_reference() const;
  void _internal_set_musical_work_reference(const std::string& value);
  std::string* _internal_mutable_musical_work_reference();
  public:

  // optional .mead101.mead.ClassicalPeriod classical_period = 4;
  bool has_classical_period() const;
  private:
  bool _internal_has_classical_period() const;
  public:
  void clear_classical_period();
  const ::mead101::mead::ClassicalPeriod& classical_period() const;
  ::mead101::mead::ClassicalPeriod* release_classical_period();
  ::mead101::mead::ClassicalPeriod* mutable_classical_period();
  void set_allocated_classical_period(::mead101::mead::ClassicalPeriod* classical_period);
  private:
  const ::mead101::mead::ClassicalPeriod& _internal_classical_period() const;
  ::mead101::mead::ClassicalPeriod* _internal_mutable_classical_period();
  public:
  void unsafe_arena_set_allocated_classical_period(
      ::mead101::mead::ClassicalPeriod* classical_period);
  ::mead101::mead::ClassicalPeriod* unsafe_arena_release_classical_period();

  // optional .mead101.mead.Form form = 9;
  bool has_form() const;
  private:
  bool _internal_has_form() const;
  public:
  void clear_form();
  const ::mead101::mead::Form& form() const;
  ::mead101::mead::Form* release_form();
  ::mead101::mead::Form* mutable_form();
  void set_allocated_form(::mead101::mead::Form* form);
  private:
  const ::mead101::mead::Form& _internal_form() const;
  ::mead101::mead::Form* _internal_mutable_form();
  public:
  void unsafe_arena_set_allocated_form(
      ::mead101::mead::Form* form);
  ::mead101::mead::Form* unsafe_arena_release_form();

  // optional .mead101.mead.Harmony harmony = 10;
  bool has_harmony() const;
  private:
  bool _internal_has_harmony() const;
  public:
  void clear_harmony();
  const ::mead101::mead::Harmony& harmony() const;
  ::mead101::mead::Harmony* release_harmony();
  ::mead101::mead::Harmony* mutable_harmony();
  void set_allocated_harmony(::mead101::mead::Harmony* harmony);
  private:
  const ::mead101::mead::Harmony& _internal_harmony() const;
  ::mead101::mead::Harmony* _internal_mutable_harmony();
  public:
  void unsafe_arena_set_allocated_harmony(
      ::mead101::mead::Harmony* harmony);
  ::mead101::mead::Harmony* unsafe_arena_release_harmony();

  // optional .mead101.mead.SubGenreCategory sub_genre_category = 16;
  bool has_sub_genre_category() const;
  private:
  bool _internal_has_sub_genre_category() const;
  public:
  void clear_sub_genre_category();
  const ::mead101::mead::SubGenreCategory& sub_genre_category() const;
  ::mead101::mead::SubGenreCategory* release_sub_genre_category();
  ::mead101::mead::SubGenreCategory* mutable_sub_genre_category();
  void set_allocated_sub_genre_category(::mead101::mead::SubGenreCategory* sub_genre_category);
  private:
  const ::mead101::mead::SubGenreCategory& _internal_sub_genre_category() const;
  ::mead101::mead::SubGenreCategory* _internal_mutable_sub_genre_category();
  public:
  void unsafe_arena_set_allocated_sub_genre_category(
      ::mead101::mead::SubGenreCategory* sub_genre_category);
  ::mead101::mead::SubGenreCategory* unsafe_arena_release_sub_genre_category();

  // optional .mead101.mead.TimeSignature time_signature = 19;
  bool has_time_signature() const;
  private:
  bool _internal_has_time_signature() const;
  public:
  void clear_time_signature();
  const ::mead101::mead::TimeSignature& time_signature() const;
  ::mead101::mead::TimeSignature* release_time_signature();
  ::mead101::mead::TimeSignature* mutable_time_signature();
  void set_allocated_time_signature(::mead101::mead::TimeSignature* time_signature);
  private:
  const ::mead101::mead::TimeSignature& _internal_time_signature() const;
  ::mead101::mead::TimeSignature* _internal_mutable_time_signature();
  public:
  void unsafe_arena_set_allocated_time_signature(
      ::mead101::mead::TimeSignature* time_signature);
  ::mead101::mead::TimeSignature* unsafe_arena_release_time_signature();

  // optional .mead101.mead.VocalRegister vocal_register = 20;
  bool has_vocal_register() const;
  private:
  bool _internal_has_vocal_register() const;
  public:
  void clear_vocal_register();
  const ::mead101::mead::VocalRegister& vocal_register() const;
  ::mead101::mead::VocalRegister* release_vocal_register();
  ::mead101::mead::VocalRegister* mutable_vocal_register();
  void set_allocated_vocal_register(::mead101::mead::VocalRegister* vocal_register);
  private:
  const ::mead101::mead::VocalRegister& _internal_vocal_register() const;
  ::mead101::mead::VocalRegister* _internal_mutable_vocal_register();
  public:
  void unsafe_arena_set_allocated_vocal_register(
      ::mead101::mead::VocalRegister* vocal_register);
  ::mead101::mead::VocalRegister* unsafe_arena_release_vocal_register();

  // optional .mead101.mead.WorkSummary work_summary = 22;
  bool has_work_summary() const;
  private:
  bool _internal_has_work_summary() const;
  public:
  void clear_work_summary();
  const ::mead101::mead::WorkSummary& work_summary() const;
  ::mead101::mead::WorkSummary* release_work_summary();
  ::mead101::mead::WorkSummary* mutable_work_summary();
  void set_allocated_work_summary(::mead101::mead::WorkSummary* work_summary);
  private:
  const ::mead101::mead::WorkSummary& _internal_work_summary() const;
  ::mead101::mead::WorkSummary* _internal_mutable_work_summary();
  public:
  void unsafe_arena_set_allocated_work_summary(
      ::mead101::mead::WorkSummary* work_summary);
  ::mead101::mead::WorkSummary* unsafe_arena_release_work_summary();

  // @@protoc_insertion_point(class_scope:mead101.mead.WorkInformation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::AlternativeTitle > alternative_title_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::ArtisticInfluence > artistic_influence_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Award > award_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::CommentaryNote > commentary_note_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::DanceAndRhythmStyle > dance_and_rhythm_style_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::DerivedRecording > derived_recording_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Epoch > epoch_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::SimilarWork > is_similar_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Lyrics > lyrics_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Mood > lyrics_mood_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::RelatedWork > related_work_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Instrument > target_instrument_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Theme > theme_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::WorkHierarchy > work_hierarchy_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr musical_work_reference_;
  ::mead101::mead::ClassicalPeriod* classical_period_;
  ::mead101::mead::Form* form_;
  ::mead101::mead::Harmony* harmony_;
  ::mead101::mead::SubGenreCategory* sub_genre_category_;
  ::mead101::mead::TimeSignature* time_signature_;
  ::mead101::mead::VocalRegister* vocal_register_;
  ::mead101::mead::WorkSummary* work_summary_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class WorkInformationList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.WorkInformationList) */ {
 public:
  inline WorkInformationList() : WorkInformationList(nullptr) {}
  virtual ~WorkInformationList();

  WorkInformationList(const WorkInformationList& from);
  WorkInformationList(WorkInformationList&& from) noexcept
    : WorkInformationList() {
    *this = ::std::move(from);
  }

  inline WorkInformationList& operator=(const WorkInformationList& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorkInformationList& operator=(WorkInformationList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WorkInformationList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WorkInformationList* internal_default_instance() {
    return reinterpret_cast<const WorkInformationList*>(
               &_WorkInformationList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    155;

  friend void swap(WorkInformationList& a, WorkInformationList& b) {
    a.Swap(&b);
  }
  inline void Swap(WorkInformationList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WorkInformationList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WorkInformationList* New() const final {
    return CreateMaybeMessage<WorkInformationList>(nullptr);
  }

  WorkInformationList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WorkInformationList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WorkInformationList& from);
  void MergeFrom(const WorkInformationList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorkInformationList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.WorkInformationList";
  }
  protected:
  explicit WorkInformationList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWorkInformationFieldNumber = 1,
  };
  // repeated .mead101.mead.WorkInformation work_information = 1;
  int work_information_size() const;
  private:
  int _internal_work_information_size() const;
  public:
  void clear_work_information();
  ::mead101::mead::WorkInformation* mutable_work_information(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::WorkInformation >*
      mutable_work_information();
  private:
  const ::mead101::mead::WorkInformation& _internal_work_information(int index) const;
  ::mead101::mead::WorkInformation* _internal_add_work_information();
  public:
  const ::mead101::mead::WorkInformation& work_information(int index) const;
  ::mead101::mead::WorkInformation* add_work_information();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::WorkInformation >&
      work_information() const;

  // @@protoc_insertion_point(class_scope:mead101.mead.WorkInformationList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::WorkInformation > work_information_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class WorkRelationshipType PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.WorkRelationshipType) */ {
 public:
  inline WorkRelationshipType() : WorkRelationshipType(nullptr) {}
  virtual ~WorkRelationshipType();

  WorkRelationshipType(const WorkRelationshipType& from);
  WorkRelationshipType(WorkRelationshipType&& from) noexcept
    : WorkRelationshipType() {
    *this = ::std::move(from);
  }

  inline WorkRelationshipType& operator=(const WorkRelationshipType& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorkRelationshipType& operator=(WorkRelationshipType&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WorkRelationshipType& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WorkRelationshipType* internal_default_instance() {
    return reinterpret_cast<const WorkRelationshipType*>(
               &_WorkRelationshipType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    156;

  friend void swap(WorkRelationshipType& a, WorkRelationshipType& b) {
    a.Swap(&b);
  }
  inline void Swap(WorkRelationshipType* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WorkRelationshipType* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WorkRelationshipType* New() const final {
    return CreateMaybeMessage<WorkRelationshipType>(nullptr);
  }

  WorkRelationshipType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WorkRelationshipType>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WorkRelationshipType& from);
  void MergeFrom(const WorkRelationshipType& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorkRelationshipType* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.WorkRelationshipType";
  }
  protected:
  explicit WorkRelationshipType(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNamespaceFieldNumber = 1,
    kUserDefinedValueFieldNumber = 2,
    kExtValueFieldNumber = 3,
  };
  // optional string namespace = 1;
  bool has_namespace_() const;
  private:
  bool _internal_has_namespace_() const;
  public:
  void clear_namespace_();
  const std::string& namespace_() const;
  void set_namespace_(const std::string& value);
  void set_namespace_(std::string&& value);
  void set_namespace_(const char* value);
  void set_namespace_(const char* value, size_t size);
  std::string* mutable_namespace_();
  std::string* release_namespace_();
  void set_allocated_namespace_(std::string* namespace_);
  private:
  const std::string& _internal_namespace_() const;
  void _internal_set_namespace_(const std::string& value);
  std::string* _internal_mutable_namespace_();
  public:

  // optional string user_defined_value = 2;
  bool has_user_defined_value() const;
  private:
  bool _internal_has_user_defined_value() const;
  public:
  void clear_user_defined_value();
  const std::string& user_defined_value() const;
  void set_user_defined_value(const std::string& value);
  void set_user_defined_value(std::string&& value);
  void set_user_defined_value(const char* value);
  void set_user_defined_value(const char* value, size_t size);
  std::string* mutable_user_defined_value();
  std::string* release_user_defined_value();
  void set_allocated_user_defined_value(std::string* user_defined_value);
  private:
  const std::string& _internal_user_defined_value() const;
  void _internal_set_user_defined_value(const std::string& value);
  std::string* _internal_mutable_user_defined_value();
  public:

  // optional .mead101.avs.WorkRelationshipType ext_value = 3;
  bool has_ext_value() const;
  private:
  bool _internal_has_ext_value() const;
  public:
  void clear_ext_value();
  const ::mead101::avs::WorkRelationshipType& ext_value() const;
  ::mead101::avs::WorkRelationshipType* release_ext_value();
  ::mead101::avs::WorkRelationshipType* mutable_ext_value();
  void set_allocated_ext_value(::mead101::avs::WorkRelationshipType* ext_value);
  private:
  const ::mead101::avs::WorkRelationshipType& _internal_ext_value() const;
  ::mead101::avs::WorkRelationshipType* _internal_mutable_ext_value();
  public:
  void unsafe_arena_set_allocated_ext_value(
      ::mead101::avs::WorkRelationshipType* ext_value);
  ::mead101::avs::WorkRelationshipType* unsafe_arena_release_ext_value();

  // @@protoc_insertion_point(class_scope:mead101.mead.WorkRelationshipType)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr namespace__;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_defined_value_;
  ::mead101::avs::WorkRelationshipType* ext_value_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class WorkSummary PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.WorkSummary) */ {
 public:
  inline WorkSummary() : WorkSummary(nullptr) {}
  virtual ~WorkSummary();

  WorkSummary(const WorkSummary& from);
  WorkSummary(WorkSummary&& from) noexcept
    : WorkSummary() {
    *this = ::std::move(from);
  }

  inline WorkSummary& operator=(const WorkSummary& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorkSummary& operator=(WorkSummary&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WorkSummary& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WorkSummary* internal_default_instance() {
    return reinterpret_cast<const WorkSummary*>(
               &_WorkSummary_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    157;

  friend void swap(WorkSummary& a, WorkSummary& b) {
    a.Swap(&b);
  }
  inline void Swap(WorkSummary* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WorkSummary* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WorkSummary* New() const final {
    return CreateMaybeMessage<WorkSummary>(nullptr);
  }

  WorkSummary* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WorkSummary>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WorkSummary& from);
  void MergeFrom(const WorkSummary& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorkSummary* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.WorkSummary";
  }
  protected:
  explicit WorkSummary(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWorkTitleFieldNumber = 2,
    kWriterFieldNumber = 3,
    kMusicalWorkIdFieldNumber = 1,
  };
  // repeated .mead101.mead.TitleWithPronunciation work_title = 2;
  int work_title_size() const;
  private:
  int _internal_work_title_size() const;
  public:
  void clear_work_title();
  ::mead101::mead::TitleWithPronunciation* mutable_work_title(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::TitleWithPronunciation >*
      mutable_work_title();
  private:
  const ::mead101::mead::TitleWithPronunciation& _internal_work_title(int index) const;
  ::mead101::mead::TitleWithPronunciation* _internal_add_work_title();
  public:
  const ::mead101::mead::TitleWithPronunciation& work_title(int index) const;
  ::mead101::mead::TitleWithPronunciation* add_work_title();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::TitleWithPronunciation >&
      work_title() const;

  // repeated .mead101.mead.PartyNameWithTerritory writer = 3;
  int writer_size() const;
  private:
  int _internal_writer_size() const;
  public:
  void clear_writer();
  ::mead101::mead::PartyNameWithTerritory* mutable_writer(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::PartyNameWithTerritory >*
      mutable_writer();
  private:
  const ::mead101::mead::PartyNameWithTerritory& _internal_writer(int index) const;
  ::mead101::mead::PartyNameWithTerritory* _internal_add_writer();
  public:
  const ::mead101::mead::PartyNameWithTerritory& writer(int index) const;
  ::mead101::mead::PartyNameWithTerritory* add_writer();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::PartyNameWithTerritory >&
      writer() const;

  // optional .mead101.mead.MusicalWorkId musical_work_id = 1;
  bool has_musical_work_id() const;
  private:
  bool _internal_has_musical_work_id() const;
  public:
  void clear_musical_work_id();
  const ::mead101::mead::MusicalWorkId& musical_work_id() const;
  ::mead101::mead::MusicalWorkId* release_musical_work_id();
  ::mead101::mead::MusicalWorkId* mutable_musical_work_id();
  void set_allocated_musical_work_id(::mead101::mead::MusicalWorkId* musical_work_id);
  private:
  const ::mead101::mead::MusicalWorkId& _internal_musical_work_id() const;
  ::mead101::mead::MusicalWorkId* _internal_mutable_musical_work_id();
  public:
  void unsafe_arena_set_allocated_musical_work_id(
      ::mead101::mead::MusicalWorkId* musical_work_id);
  ::mead101::mead::MusicalWorkId* unsafe_arena_release_musical_work_id();

  // @@protoc_insertion_point(class_scope:mead101.mead.WorkSummary)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::TitleWithPronunciation > work_title_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::PartyNameWithTerritory > writer_;
  ::mead101::mead::MusicalWorkId* musical_work_id_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class WorkTitle PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.WorkTitle) */ {
 public:
  inline WorkTitle() : WorkTitle(nullptr) {}
  virtual ~WorkTitle();

  WorkTitle(const WorkTitle& from);
  WorkTitle(WorkTitle&& from) noexcept
    : WorkTitle() {
    *this = ::std::move(from);
  }

  inline WorkTitle& operator=(const WorkTitle& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorkTitle& operator=(WorkTitle&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WorkTitle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WorkTitle* internal_default_instance() {
    return reinterpret_cast<const WorkTitle*>(
               &_WorkTitle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    158;

  friend void swap(WorkTitle& a, WorkTitle& b) {
    a.Swap(&b);
  }
  inline void Swap(WorkTitle* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WorkTitle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WorkTitle* New() const final {
    return CreateMaybeMessage<WorkTitle>(nullptr);
  }

  WorkTitle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WorkTitle>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WorkTitle& from);
  void MergeFrom(const WorkTitle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorkTitle* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.WorkTitle";
  }
  protected:
  explicit WorkTitle(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLanguageAndScriptCodeFieldNumber = 1,
    kExtValueFieldNumber = 2,
  };
  // optional string language_and_script_code = 1;
  bool has_language_and_script_code() const;
  private:
  bool _internal_has_language_and_script_code() const;
  public:
  void clear_language_and_script_code();
  const std::string& language_and_script_code() const;
  void set_language_and_script_code(const std::string& value);
  void set_language_and_script_code(std::string&& value);
  void set_language_and_script_code(const char* value);
  void set_language_and_script_code(const char* value, size_t size);
  std::string* mutable_language_and_script_code();
  std::string* release_language_and_script_code();
  void set_allocated_language_and_script_code(std::string* language_and_script_code);
  private:
  const std::string& _internal_language_and_script_code() const;
  void _internal_set_language_and_script_code(const std::string& value);
  std::string* _internal_mutable_language_and_script_code();
  public:

  // optional string ext_value = 2;
  bool has_ext_value() const;
  private:
  bool _internal_has_ext_value() const;
  public:
  void clear_ext_value();
  const std::string& ext_value() const;
  void set_ext_value(const std::string& value);
  void set_ext_value(std::string&& value);
  void set_ext_value(const char* value);
  void set_ext_value(const char* value, size_t size);
  std::string* mutable_ext_value();
  std::string* release_ext_value();
  void set_allocated_ext_value(std::string* ext_value);
  private:
  const std::string& _internal_ext_value() const;
  void _internal_set_ext_value(const std::string& value);
  std::string* _internal_mutable_ext_value();
  public:

  // @@protoc_insertion_point(class_scope:mead101.mead.WorkTitle)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_and_script_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ext_value_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// -------------------------------------------------------------------

class ddex_IsoDate PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mead101.mead.ddex_IsoDate) */ {
 public:
  inline ddex_IsoDate() : ddex_IsoDate(nullptr) {}
  virtual ~ddex_IsoDate();

  ddex_IsoDate(const ddex_IsoDate& from);
  ddex_IsoDate(ddex_IsoDate&& from) noexcept
    : ddex_IsoDate() {
    *this = ::std::move(from);
  }

  inline ddex_IsoDate& operator=(const ddex_IsoDate& from) {
    CopyFrom(from);
    return *this;
  }
  inline ddex_IsoDate& operator=(ddex_IsoDate&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ddex_IsoDate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ddex_IsoDate* internal_default_instance() {
    return reinterpret_cast<const ddex_IsoDate*>(
               &_ddex_IsoDate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    159;

  friend void swap(ddex_IsoDate& a, ddex_IsoDate& b) {
    a.Swap(&b);
  }
  inline void Swap(ddex_IsoDate* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ddex_IsoDate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ddex_IsoDate* New() const final {
    return CreateMaybeMessage<ddex_IsoDate>(nullptr);
  }

  ddex_IsoDate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ddex_IsoDate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ddex_IsoDate& from);
  void MergeFrom(const ddex_IsoDate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ddex_IsoDate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mead101.mead.ddex_IsoDate";
  }
  protected:
  explicit ddex_IsoDate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto);
    return ::descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAutoValueFieldNumber = 1,
  };
  // optional string auto_value = 1;
  bool has_auto_value() const;
  private:
  bool _internal_has_auto_value() const;
  public:
  void clear_auto_value();
  const std::string& auto_value() const;
  void set_auto_value(const std::string& value);
  void set_auto_value(std::string&& value);
  void set_auto_value(const char* value);
  void set_auto_value(const char* value, size_t size);
  std::string* mutable_auto_value();
  std::string* release_auto_value();
  void set_allocated_auto_value(std::string* auto_value);
  private:
  const std::string& _internal_auto_value() const;
  void _internal_set_auto_value(const std::string& value);
  std::string* _internal_mutable_auto_value();
  public:

  // @@protoc_insertion_point(class_scope:mead101.mead.ddex_IsoDate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr auto_value_;
  friend struct ::TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AbsolutePitch

// repeated string metadata_source_reference = 1;
inline int AbsolutePitch::_internal_metadata_source_reference_size() const {
  return metadata_source_reference_.size();
}
inline int AbsolutePitch::metadata_source_reference_size() const {
  return _internal_metadata_source_reference_size();
}
inline void AbsolutePitch::clear_metadata_source_reference() {
  metadata_source_reference_.Clear();
}
inline std::string* AbsolutePitch::add_metadata_source_reference() {
  // @@protoc_insertion_point(field_add_mutable:mead101.mead.AbsolutePitch.metadata_source_reference)
  return _internal_add_metadata_source_reference();
}
inline const std::string& AbsolutePitch::_internal_metadata_source_reference(int index) const {
  return metadata_source_reference_.Get(index);
}
inline const std::string& AbsolutePitch::metadata_source_reference(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.AbsolutePitch.metadata_source_reference)
  return _internal_metadata_source_reference(index);
}
inline std::string* AbsolutePitch::mutable_metadata_source_reference(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.AbsolutePitch.metadata_source_reference)
  return metadata_source_reference_.Mutable(index);
}
inline void AbsolutePitch::set_metadata_source_reference(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:mead101.mead.AbsolutePitch.metadata_source_reference)
  metadata_source_reference_.Mutable(index)->assign(value);
}
inline void AbsolutePitch::set_metadata_source_reference(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:mead101.mead.AbsolutePitch.metadata_source_reference)
  metadata_source_reference_.Mutable(index)->assign(std::move(value));
}
inline void AbsolutePitch::set_metadata_source_reference(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  metadata_source_reference_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mead101.mead.AbsolutePitch.metadata_source_reference)
}
inline void AbsolutePitch::set_metadata_source_reference(int index, const char* value, size_t size) {
  metadata_source_reference_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.AbsolutePitch.metadata_source_reference)
}
inline std::string* AbsolutePitch::_internal_add_metadata_source_reference() {
  return metadata_source_reference_.Add();
}
inline void AbsolutePitch::add_metadata_source_reference(const std::string& value) {
  metadata_source_reference_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mead101.mead.AbsolutePitch.metadata_source_reference)
}
inline void AbsolutePitch::add_metadata_source_reference(std::string&& value) {
  metadata_source_reference_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:mead101.mead.AbsolutePitch.metadata_source_reference)
}
inline void AbsolutePitch::add_metadata_source_reference(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  metadata_source_reference_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mead101.mead.AbsolutePitch.metadata_source_reference)
}
inline void AbsolutePitch::add_metadata_source_reference(const char* value, size_t size) {
  metadata_source_reference_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mead101.mead.AbsolutePitch.metadata_source_reference)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AbsolutePitch::metadata_source_reference() const {
  // @@protoc_insertion_point(field_list:mead101.mead.AbsolutePitch.metadata_source_reference)
  return metadata_source_reference_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
AbsolutePitch::mutable_metadata_source_reference() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.AbsolutePitch.metadata_source_reference)
  return &metadata_source_reference_;
}

// optional double value = 2;
inline bool AbsolutePitch::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AbsolutePitch::has_value() const {
  return _internal_has_value();
}
inline void AbsolutePitch::clear_value() {
  value_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double AbsolutePitch::_internal_value() const {
  return value_;
}
inline double AbsolutePitch::value() const {
  // @@protoc_insertion_point(field_get:mead101.mead.AbsolutePitch.value)
  return _internal_value();
}
inline void AbsolutePitch::_internal_set_value(double value) {
  _has_bits_[0] |= 0x00000001u;
  value_ = value;
}
inline void AbsolutePitch::set_value(double value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:mead101.mead.AbsolutePitch.value)
}

// -------------------------------------------------------------------

// AllTerritoryCode

// optional .mead101.avs.TerritoryCodeTypeIncludingDeprecatedCodes identifier_type = 1;
inline bool AllTerritoryCode::_internal_has_identifier_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || identifier_type_ != nullptr);
  return value;
}
inline bool AllTerritoryCode::has_identifier_type() const {
  return _internal_has_identifier_type();
}
inline const ::mead101::avs::TerritoryCodeTypeIncludingDeprecatedCodes& AllTerritoryCode::_internal_identifier_type() const {
  const ::mead101::avs::TerritoryCodeTypeIncludingDeprecatedCodes* p = identifier_type_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::avs::TerritoryCodeTypeIncludingDeprecatedCodes*>(
      &::mead101::avs::_TerritoryCodeTypeIncludingDeprecatedCodes_default_instance_);
}
inline const ::mead101::avs::TerritoryCodeTypeIncludingDeprecatedCodes& AllTerritoryCode::identifier_type() const {
  // @@protoc_insertion_point(field_get:mead101.mead.AllTerritoryCode.identifier_type)
  return _internal_identifier_type();
}
inline void AllTerritoryCode::unsafe_arena_set_allocated_identifier_type(
    ::mead101::avs::TerritoryCodeTypeIncludingDeprecatedCodes* identifier_type) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(identifier_type_);
  }
  identifier_type_ = identifier_type;
  if (identifier_type) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.AllTerritoryCode.identifier_type)
}
inline ::mead101::avs::TerritoryCodeTypeIncludingDeprecatedCodes* AllTerritoryCode::release_identifier_type() {
  _has_bits_[0] &= ~0x00000001u;
  ::mead101::avs::TerritoryCodeTypeIncludingDeprecatedCodes* temp = identifier_type_;
  identifier_type_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::avs::TerritoryCodeTypeIncludingDeprecatedCodes* AllTerritoryCode::unsafe_arena_release_identifier_type() {
  // @@protoc_insertion_point(field_release:mead101.mead.AllTerritoryCode.identifier_type)
  _has_bits_[0] &= ~0x00000001u;
  ::mead101::avs::TerritoryCodeTypeIncludingDeprecatedCodes* temp = identifier_type_;
  identifier_type_ = nullptr;
  return temp;
}
inline ::mead101::avs::TerritoryCodeTypeIncludingDeprecatedCodes* AllTerritoryCode::_internal_mutable_identifier_type() {
  _has_bits_[0] |= 0x00000001u;
  if (identifier_type_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::avs::TerritoryCodeTypeIncludingDeprecatedCodes>(GetArena());
    identifier_type_ = p;
  }
  return identifier_type_;
}
inline ::mead101::avs::TerritoryCodeTypeIncludingDeprecatedCodes* AllTerritoryCode::mutable_identifier_type() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.AllTerritoryCode.identifier_type)
  return _internal_mutable_identifier_type();
}
inline void AllTerritoryCode::set_allocated_identifier_type(::mead101::avs::TerritoryCodeTypeIncludingDeprecatedCodes* identifier_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(identifier_type_);
  }
  if (identifier_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(identifier_type)->GetArena();
    if (message_arena != submessage_arena) {
      identifier_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, identifier_type, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  identifier_type_ = identifier_type;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.AllTerritoryCode.identifier_type)
}

// optional .mead101.avs.AllTerritoryCode ext_value = 2;
inline bool AllTerritoryCode::_internal_has_ext_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || ext_value_ != nullptr);
  return value;
}
inline bool AllTerritoryCode::has_ext_value() const {
  return _internal_has_ext_value();
}
inline const ::mead101::avs::AllTerritoryCode& AllTerritoryCode::_internal_ext_value() const {
  const ::mead101::avs::AllTerritoryCode* p = ext_value_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::avs::AllTerritoryCode*>(
      &::mead101::avs::_AllTerritoryCode_default_instance_);
}
inline const ::mead101::avs::AllTerritoryCode& AllTerritoryCode::ext_value() const {
  // @@protoc_insertion_point(field_get:mead101.mead.AllTerritoryCode.ext_value)
  return _internal_ext_value();
}
inline void AllTerritoryCode::unsafe_arena_set_allocated_ext_value(
    ::mead101::avs::AllTerritoryCode* ext_value) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext_value_);
  }
  ext_value_ = ext_value;
  if (ext_value) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.AllTerritoryCode.ext_value)
}
inline ::mead101::avs::AllTerritoryCode* AllTerritoryCode::release_ext_value() {
  _has_bits_[0] &= ~0x00000002u;
  ::mead101::avs::AllTerritoryCode* temp = ext_value_;
  ext_value_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::avs::AllTerritoryCode* AllTerritoryCode::unsafe_arena_release_ext_value() {
  // @@protoc_insertion_point(field_release:mead101.mead.AllTerritoryCode.ext_value)
  _has_bits_[0] &= ~0x00000002u;
  ::mead101::avs::AllTerritoryCode* temp = ext_value_;
  ext_value_ = nullptr;
  return temp;
}
inline ::mead101::avs::AllTerritoryCode* AllTerritoryCode::_internal_mutable_ext_value() {
  _has_bits_[0] |= 0x00000002u;
  if (ext_value_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::avs::AllTerritoryCode>(GetArena());
    ext_value_ = p;
  }
  return ext_value_;
}
inline ::mead101::avs::AllTerritoryCode* AllTerritoryCode::mutable_ext_value() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.AllTerritoryCode.ext_value)
  return _internal_mutable_ext_value();
}
inline void AllTerritoryCode::set_allocated_ext_value(::mead101::avs::AllTerritoryCode* ext_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext_value_);
  }
  if (ext_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext_value)->GetArena();
    if (message_arena != submessage_arena) {
      ext_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext_value, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  ext_value_ = ext_value;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.AllTerritoryCode.ext_value)
}

// -------------------------------------------------------------------

// AlternativeTitle

// optional string language_and_script_code = 1;
inline bool AlternativeTitle::_internal_has_language_and_script_code() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AlternativeTitle::has_language_and_script_code() const {
  return _internal_has_language_and_script_code();
}
inline void AlternativeTitle::clear_language_and_script_code() {
  language_and_script_code_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AlternativeTitle::language_and_script_code() const {
  // @@protoc_insertion_point(field_get:mead101.mead.AlternativeTitle.language_and_script_code)
  return _internal_language_and_script_code();
}
inline void AlternativeTitle::set_language_and_script_code(const std::string& value) {
  _internal_set_language_and_script_code(value);
  // @@protoc_insertion_point(field_set:mead101.mead.AlternativeTitle.language_and_script_code)
}
inline std::string* AlternativeTitle::mutable_language_and_script_code() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.AlternativeTitle.language_and_script_code)
  return _internal_mutable_language_and_script_code();
}
inline const std::string& AlternativeTitle::_internal_language_and_script_code() const {
  return language_and_script_code_.Get();
}
inline void AlternativeTitle::_internal_set_language_and_script_code(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  language_and_script_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AlternativeTitle::set_language_and_script_code(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  language_and_script_code_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.AlternativeTitle.language_and_script_code)
}
inline void AlternativeTitle::set_language_and_script_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  language_and_script_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.AlternativeTitle.language_and_script_code)
}
inline void AlternativeTitle::set_language_and_script_code(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  language_and_script_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.AlternativeTitle.language_and_script_code)
}
inline std::string* AlternativeTitle::_internal_mutable_language_and_script_code() {
  _has_bits_[0] |= 0x00000001u;
  return language_and_script_code_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AlternativeTitle::release_language_and_script_code() {
  // @@protoc_insertion_point(field_release:mead101.mead.AlternativeTitle.language_and_script_code)
  if (!_internal_has_language_and_script_code()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return language_and_script_code_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AlternativeTitle::set_allocated_language_and_script_code(std::string* language_and_script_code) {
  if (language_and_script_code != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  language_and_script_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), language_and_script_code,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.AlternativeTitle.language_and_script_code)
}

// repeated string metadata_source_reference = 2;
inline int AlternativeTitle::_internal_metadata_source_reference_size() const {
  return metadata_source_reference_.size();
}
inline int AlternativeTitle::metadata_source_reference_size() const {
  return _internal_metadata_source_reference_size();
}
inline void AlternativeTitle::clear_metadata_source_reference() {
  metadata_source_reference_.Clear();
}
inline std::string* AlternativeTitle::add_metadata_source_reference() {
  // @@protoc_insertion_point(field_add_mutable:mead101.mead.AlternativeTitle.metadata_source_reference)
  return _internal_add_metadata_source_reference();
}
inline const std::string& AlternativeTitle::_internal_metadata_source_reference(int index) const {
  return metadata_source_reference_.Get(index);
}
inline const std::string& AlternativeTitle::metadata_source_reference(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.AlternativeTitle.metadata_source_reference)
  return _internal_metadata_source_reference(index);
}
inline std::string* AlternativeTitle::mutable_metadata_source_reference(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.AlternativeTitle.metadata_source_reference)
  return metadata_source_reference_.Mutable(index);
}
inline void AlternativeTitle::set_metadata_source_reference(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:mead101.mead.AlternativeTitle.metadata_source_reference)
  metadata_source_reference_.Mutable(index)->assign(value);
}
inline void AlternativeTitle::set_metadata_source_reference(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:mead101.mead.AlternativeTitle.metadata_source_reference)
  metadata_source_reference_.Mutable(index)->assign(std::move(value));
}
inline void AlternativeTitle::set_metadata_source_reference(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  metadata_source_reference_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mead101.mead.AlternativeTitle.metadata_source_reference)
}
inline void AlternativeTitle::set_metadata_source_reference(int index, const char* value, size_t size) {
  metadata_source_reference_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.AlternativeTitle.metadata_source_reference)
}
inline std::string* AlternativeTitle::_internal_add_metadata_source_reference() {
  return metadata_source_reference_.Add();
}
inline void AlternativeTitle::add_metadata_source_reference(const std::string& value) {
  metadata_source_reference_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mead101.mead.AlternativeTitle.metadata_source_reference)
}
inline void AlternativeTitle::add_metadata_source_reference(std::string&& value) {
  metadata_source_reference_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:mead101.mead.AlternativeTitle.metadata_source_reference)
}
inline void AlternativeTitle::add_metadata_source_reference(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  metadata_source_reference_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mead101.mead.AlternativeTitle.metadata_source_reference)
}
inline void AlternativeTitle::add_metadata_source_reference(const char* value, size_t size) {
  metadata_source_reference_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mead101.mead.AlternativeTitle.metadata_source_reference)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AlternativeTitle::metadata_source_reference() const {
  // @@protoc_insertion_point(field_list:mead101.mead.AlternativeTitle.metadata_source_reference)
  return metadata_source_reference_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
AlternativeTitle::mutable_metadata_source_reference() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.AlternativeTitle.metadata_source_reference)
  return &metadata_source_reference_;
}

// optional string namespace = 3;
inline bool AlternativeTitle::_internal_has_namespace_() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AlternativeTitle::has_namespace_() const {
  return _internal_has_namespace_();
}
inline void AlternativeTitle::clear_namespace_() {
  namespace__.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& AlternativeTitle::namespace_() const {
  // @@protoc_insertion_point(field_get:mead101.mead.AlternativeTitle.namespace)
  return _internal_namespace_();
}
inline void AlternativeTitle::set_namespace_(const std::string& value) {
  _internal_set_namespace_(value);
  // @@protoc_insertion_point(field_set:mead101.mead.AlternativeTitle.namespace)
}
inline std::string* AlternativeTitle::mutable_namespace_() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.AlternativeTitle.namespace)
  return _internal_mutable_namespace_();
}
inline const std::string& AlternativeTitle::_internal_namespace_() const {
  return namespace__.Get();
}
inline void AlternativeTitle::_internal_set_namespace_(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AlternativeTitle::set_namespace_(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  namespace__.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.AlternativeTitle.namespace)
}
inline void AlternativeTitle::set_namespace_(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.AlternativeTitle.namespace)
}
inline void AlternativeTitle::set_namespace_(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.AlternativeTitle.namespace)
}
inline std::string* AlternativeTitle::_internal_mutable_namespace_() {
  _has_bits_[0] |= 0x00000002u;
  return namespace__.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AlternativeTitle::release_namespace_() {
  // @@protoc_insertion_point(field_release:mead101.mead.AlternativeTitle.namespace)
  if (!_internal_has_namespace_()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return namespace__.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AlternativeTitle::set_allocated_namespace_(std::string* namespace_) {
  if (namespace_ != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  namespace__.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), namespace_,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.AlternativeTitle.namespace)
}

// optional .mead101.mead.TitleTextWithPronunciation sub_title = 4;
inline bool AlternativeTitle::_internal_has_sub_title() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || sub_title_ != nullptr);
  return value;
}
inline bool AlternativeTitle::has_sub_title() const {
  return _internal_has_sub_title();
}
inline void AlternativeTitle::clear_sub_title() {
  if (sub_title_ != nullptr) sub_title_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::mead101::mead::TitleTextWithPronunciation& AlternativeTitle::_internal_sub_title() const {
  const ::mead101::mead::TitleTextWithPronunciation* p = sub_title_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::TitleTextWithPronunciation*>(
      &::mead101::mead::_TitleTextWithPronunciation_default_instance_);
}
inline const ::mead101::mead::TitleTextWithPronunciation& AlternativeTitle::sub_title() const {
  // @@protoc_insertion_point(field_get:mead101.mead.AlternativeTitle.sub_title)
  return _internal_sub_title();
}
inline void AlternativeTitle::unsafe_arena_set_allocated_sub_title(
    ::mead101::mead::TitleTextWithPronunciation* sub_title) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sub_title_);
  }
  sub_title_ = sub_title;
  if (sub_title) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.AlternativeTitle.sub_title)
}
inline ::mead101::mead::TitleTextWithPronunciation* AlternativeTitle::release_sub_title() {
  _has_bits_[0] &= ~0x00000008u;
  ::mead101::mead::TitleTextWithPronunciation* temp = sub_title_;
  sub_title_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::TitleTextWithPronunciation* AlternativeTitle::unsafe_arena_release_sub_title() {
  // @@protoc_insertion_point(field_release:mead101.mead.AlternativeTitle.sub_title)
  _has_bits_[0] &= ~0x00000008u;
  ::mead101::mead::TitleTextWithPronunciation* temp = sub_title_;
  sub_title_ = nullptr;
  return temp;
}
inline ::mead101::mead::TitleTextWithPronunciation* AlternativeTitle::_internal_mutable_sub_title() {
  _has_bits_[0] |= 0x00000008u;
  if (sub_title_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::TitleTextWithPronunciation>(GetArena());
    sub_title_ = p;
  }
  return sub_title_;
}
inline ::mead101::mead::TitleTextWithPronunciation* AlternativeTitle::mutable_sub_title() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.AlternativeTitle.sub_title)
  return _internal_mutable_sub_title();
}
inline void AlternativeTitle::set_allocated_sub_title(::mead101::mead::TitleTextWithPronunciation* sub_title) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete sub_title_;
  }
  if (sub_title) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(sub_title);
    if (message_arena != submessage_arena) {
      sub_title = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sub_title, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  sub_title_ = sub_title;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.AlternativeTitle.sub_title)
}

// optional .mead101.mead.TitleTextWithPronunciation title_text = 5;
inline bool AlternativeTitle::_internal_has_title_text() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || title_text_ != nullptr);
  return value;
}
inline bool AlternativeTitle::has_title_text() const {
  return _internal_has_title_text();
}
inline void AlternativeTitle::clear_title_text() {
  if (title_text_ != nullptr) title_text_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::mead101::mead::TitleTextWithPronunciation& AlternativeTitle::_internal_title_text() const {
  const ::mead101::mead::TitleTextWithPronunciation* p = title_text_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::TitleTextWithPronunciation*>(
      &::mead101::mead::_TitleTextWithPronunciation_default_instance_);
}
inline const ::mead101::mead::TitleTextWithPronunciation& AlternativeTitle::title_text() const {
  // @@protoc_insertion_point(field_get:mead101.mead.AlternativeTitle.title_text)
  return _internal_title_text();
}
inline void AlternativeTitle::unsafe_arena_set_allocated_title_text(
    ::mead101::mead::TitleTextWithPronunciation* title_text) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(title_text_);
  }
  title_text_ = title_text;
  if (title_text) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.AlternativeTitle.title_text)
}
inline ::mead101::mead::TitleTextWithPronunciation* AlternativeTitle::release_title_text() {
  _has_bits_[0] &= ~0x00000010u;
  ::mead101::mead::TitleTextWithPronunciation* temp = title_text_;
  title_text_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::TitleTextWithPronunciation* AlternativeTitle::unsafe_arena_release_title_text() {
  // @@protoc_insertion_point(field_release:mead101.mead.AlternativeTitle.title_text)
  _has_bits_[0] &= ~0x00000010u;
  ::mead101::mead::TitleTextWithPronunciation* temp = title_text_;
  title_text_ = nullptr;
  return temp;
}
inline ::mead101::mead::TitleTextWithPronunciation* AlternativeTitle::_internal_mutable_title_text() {
  _has_bits_[0] |= 0x00000010u;
  if (title_text_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::TitleTextWithPronunciation>(GetArena());
    title_text_ = p;
  }
  return title_text_;
}
inline ::mead101::mead::TitleTextWithPronunciation* AlternativeTitle::mutable_title_text() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.AlternativeTitle.title_text)
  return _internal_mutable_title_text();
}
inline void AlternativeTitle::set_allocated_title_text(::mead101::mead::TitleTextWithPronunciation* title_text) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete title_text_;
  }
  if (title_text) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(title_text);
    if (message_arena != submessage_arena) {
      title_text = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, title_text, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  title_text_ = title_text;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.AlternativeTitle.title_text)
}

// optional .mead101.avs.TitleType title_type = 6;
inline bool AlternativeTitle::_internal_has_title_type() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || title_type_ != nullptr);
  return value;
}
inline bool AlternativeTitle::has_title_type() const {
  return _internal_has_title_type();
}
inline const ::mead101::avs::TitleType& AlternativeTitle::_internal_title_type() const {
  const ::mead101::avs::TitleType* p = title_type_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::avs::TitleType*>(
      &::mead101::avs::_TitleType_default_instance_);
}
inline const ::mead101::avs::TitleType& AlternativeTitle::title_type() const {
  // @@protoc_insertion_point(field_get:mead101.mead.AlternativeTitle.title_type)
  return _internal_title_type();
}
inline void AlternativeTitle::unsafe_arena_set_allocated_title_type(
    ::mead101::avs::TitleType* title_type) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(title_type_);
  }
  title_type_ = title_type;
  if (title_type) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.AlternativeTitle.title_type)
}
inline ::mead101::avs::TitleType* AlternativeTitle::release_title_type() {
  _has_bits_[0] &= ~0x00000020u;
  ::mead101::avs::TitleType* temp = title_type_;
  title_type_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::avs::TitleType* AlternativeTitle::unsafe_arena_release_title_type() {
  // @@protoc_insertion_point(field_release:mead101.mead.AlternativeTitle.title_type)
  _has_bits_[0] &= ~0x00000020u;
  ::mead101::avs::TitleType* temp = title_type_;
  title_type_ = nullptr;
  return temp;
}
inline ::mead101::avs::TitleType* AlternativeTitle::_internal_mutable_title_type() {
  _has_bits_[0] |= 0x00000020u;
  if (title_type_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::avs::TitleType>(GetArena());
    title_type_ = p;
  }
  return title_type_;
}
inline ::mead101::avs::TitleType* AlternativeTitle::mutable_title_type() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.AlternativeTitle.title_type)
  return _internal_mutable_title_type();
}
inline void AlternativeTitle::set_allocated_title_type(::mead101::avs::TitleType* title_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(title_type_);
  }
  if (title_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(title_type)->GetArena();
    if (message_arena != submessage_arena) {
      title_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, title_type, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  title_type_ = title_type;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.AlternativeTitle.title_type)
}

// optional string user_defined_value = 7;
inline bool AlternativeTitle::_internal_has_user_defined_value() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AlternativeTitle::has_user_defined_value() const {
  return _internal_has_user_defined_value();
}
inline void AlternativeTitle::clear_user_defined_value() {
  user_defined_value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& AlternativeTitle::user_defined_value() const {
  // @@protoc_insertion_point(field_get:mead101.mead.AlternativeTitle.user_defined_value)
  return _internal_user_defined_value();
}
inline void AlternativeTitle::set_user_defined_value(const std::string& value) {
  _internal_set_user_defined_value(value);
  // @@protoc_insertion_point(field_set:mead101.mead.AlternativeTitle.user_defined_value)
}
inline std::string* AlternativeTitle::mutable_user_defined_value() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.AlternativeTitle.user_defined_value)
  return _internal_mutable_user_defined_value();
}
inline const std::string& AlternativeTitle::_internal_user_defined_value() const {
  return user_defined_value_.Get();
}
inline void AlternativeTitle::_internal_set_user_defined_value(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AlternativeTitle::set_user_defined_value(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  user_defined_value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.AlternativeTitle.user_defined_value)
}
inline void AlternativeTitle::set_user_defined_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.AlternativeTitle.user_defined_value)
}
inline void AlternativeTitle::set_user_defined_value(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.AlternativeTitle.user_defined_value)
}
inline std::string* AlternativeTitle::_internal_mutable_user_defined_value() {
  _has_bits_[0] |= 0x00000004u;
  return user_defined_value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AlternativeTitle::release_user_defined_value() {
  // @@protoc_insertion_point(field_release:mead101.mead.AlternativeTitle.user_defined_value)
  if (!_internal_has_user_defined_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return user_defined_value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AlternativeTitle::set_allocated_user_defined_value(std::string* user_defined_value) {
  if (user_defined_value != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  user_defined_value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_defined_value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.AlternativeTitle.user_defined_value)
}

// -------------------------------------------------------------------

// Annotation

// repeated string metadata_source_reference = 1;
inline int Annotation::_internal_metadata_source_reference_size() const {
  return metadata_source_reference_.size();
}
inline int Annotation::metadata_source_reference_size() const {
  return _internal_metadata_source_reference_size();
}
inline void Annotation::clear_metadata_source_reference() {
  metadata_source_reference_.Clear();
}
inline std::string* Annotation::add_metadata_source_reference() {
  // @@protoc_insertion_point(field_add_mutable:mead101.mead.Annotation.metadata_source_reference)
  return _internal_add_metadata_source_reference();
}
inline const std::string& Annotation::_internal_metadata_source_reference(int index) const {
  return metadata_source_reference_.Get(index);
}
inline const std::string& Annotation::metadata_source_reference(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.Annotation.metadata_source_reference)
  return _internal_metadata_source_reference(index);
}
inline std::string* Annotation::mutable_metadata_source_reference(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Annotation.metadata_source_reference)
  return metadata_source_reference_.Mutable(index);
}
inline void Annotation::set_metadata_source_reference(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:mead101.mead.Annotation.metadata_source_reference)
  metadata_source_reference_.Mutable(index)->assign(value);
}
inline void Annotation::set_metadata_source_reference(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:mead101.mead.Annotation.metadata_source_reference)
  metadata_source_reference_.Mutable(index)->assign(std::move(value));
}
inline void Annotation::set_metadata_source_reference(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  metadata_source_reference_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mead101.mead.Annotation.metadata_source_reference)
}
inline void Annotation::set_metadata_source_reference(int index, const char* value, size_t size) {
  metadata_source_reference_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.Annotation.metadata_source_reference)
}
inline std::string* Annotation::_internal_add_metadata_source_reference() {
  return metadata_source_reference_.Add();
}
inline void Annotation::add_metadata_source_reference(const std::string& value) {
  metadata_source_reference_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mead101.mead.Annotation.metadata_source_reference)
}
inline void Annotation::add_metadata_source_reference(std::string&& value) {
  metadata_source_reference_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:mead101.mead.Annotation.metadata_source_reference)
}
inline void Annotation::add_metadata_source_reference(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  metadata_source_reference_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mead101.mead.Annotation.metadata_source_reference)
}
inline void Annotation::add_metadata_source_reference(const char* value, size_t size) {
  metadata_source_reference_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mead101.mead.Annotation.metadata_source_reference)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Annotation::metadata_source_reference() const {
  // @@protoc_insertion_point(field_list:mead101.mead.Annotation.metadata_source_reference)
  return metadata_source_reference_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Annotation::mutable_metadata_source_reference() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.Annotation.metadata_source_reference)
  return &metadata_source_reference_;
}

// optional .mead101.mead.TextWithFormat text = 2;
inline bool Annotation::_internal_has_text() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || text_ != nullptr);
  return value;
}
inline bool Annotation::has_text() const {
  return _internal_has_text();
}
inline void Annotation::clear_text() {
  if (text_ != nullptr) text_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::mead101::mead::TextWithFormat& Annotation::_internal_text() const {
  const ::mead101::mead::TextWithFormat* p = text_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::TextWithFormat*>(
      &::mead101::mead::_TextWithFormat_default_instance_);
}
inline const ::mead101::mead::TextWithFormat& Annotation::text() const {
  // @@protoc_insertion_point(field_get:mead101.mead.Annotation.text)
  return _internal_text();
}
inline void Annotation::unsafe_arena_set_allocated_text(
    ::mead101::mead::TextWithFormat* text) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(text_);
  }
  text_ = text;
  if (text) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.Annotation.text)
}
inline ::mead101::mead::TextWithFormat* Annotation::release_text() {
  _has_bits_[0] &= ~0x00000001u;
  ::mead101::mead::TextWithFormat* temp = text_;
  text_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::TextWithFormat* Annotation::unsafe_arena_release_text() {
  // @@protoc_insertion_point(field_release:mead101.mead.Annotation.text)
  _has_bits_[0] &= ~0x00000001u;
  ::mead101::mead::TextWithFormat* temp = text_;
  text_ = nullptr;
  return temp;
}
inline ::mead101::mead::TextWithFormat* Annotation::_internal_mutable_text() {
  _has_bits_[0] |= 0x00000001u;
  if (text_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::TextWithFormat>(GetArena());
    text_ = p;
  }
  return text_;
}
inline ::mead101::mead::TextWithFormat* Annotation::mutable_text() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Annotation.text)
  return _internal_mutable_text();
}
inline void Annotation::set_allocated_text(::mead101::mead::TextWithFormat* text) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete text_;
  }
  if (text) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(text);
    if (message_arena != submessage_arena) {
      text = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, text, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  text_ = text;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.Annotation.text)
}

// -------------------------------------------------------------------

// ArtistType

// optional .mead101.avs.CurrentTerritoryCode applicable_territory_code = 1;
inline bool ArtistType::_internal_has_applicable_territory_code() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || applicable_territory_code_ != nullptr);
  return value;
}
inline bool ArtistType::has_applicable_territory_code() const {
  return _internal_has_applicable_territory_code();
}
inline const ::mead101::avs::CurrentTerritoryCode& ArtistType::_internal_applicable_territory_code() const {
  const ::mead101::avs::CurrentTerritoryCode* p = applicable_territory_code_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::avs::CurrentTerritoryCode*>(
      &::mead101::avs::_CurrentTerritoryCode_default_instance_);
}
inline const ::mead101::avs::CurrentTerritoryCode& ArtistType::applicable_territory_code() const {
  // @@protoc_insertion_point(field_get:mead101.mead.ArtistType.applicable_territory_code)
  return _internal_applicable_territory_code();
}
inline void ArtistType::unsafe_arena_set_allocated_applicable_territory_code(
    ::mead101::avs::CurrentTerritoryCode* applicable_territory_code) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(applicable_territory_code_);
  }
  applicable_territory_code_ = applicable_territory_code;
  if (applicable_territory_code) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.ArtistType.applicable_territory_code)
}
inline ::mead101::avs::CurrentTerritoryCode* ArtistType::release_applicable_territory_code() {
  _has_bits_[0] &= ~0x00000001u;
  ::mead101::avs::CurrentTerritoryCode* temp = applicable_territory_code_;
  applicable_territory_code_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::avs::CurrentTerritoryCode* ArtistType::unsafe_arena_release_applicable_territory_code() {
  // @@protoc_insertion_point(field_release:mead101.mead.ArtistType.applicable_territory_code)
  _has_bits_[0] &= ~0x00000001u;
  ::mead101::avs::CurrentTerritoryCode* temp = applicable_territory_code_;
  applicable_territory_code_ = nullptr;
  return temp;
}
inline ::mead101::avs::CurrentTerritoryCode* ArtistType::_internal_mutable_applicable_territory_code() {
  _has_bits_[0] |= 0x00000001u;
  if (applicable_territory_code_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::avs::CurrentTerritoryCode>(GetArena());
    applicable_territory_code_ = p;
  }
  return applicable_territory_code_;
}
inline ::mead101::avs::CurrentTerritoryCode* ArtistType::mutable_applicable_territory_code() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.ArtistType.applicable_territory_code)
  return _internal_mutable_applicable_territory_code();
}
inline void ArtistType::set_allocated_applicable_territory_code(::mead101::avs::CurrentTerritoryCode* applicable_territory_code) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(applicable_territory_code_);
  }
  if (applicable_territory_code) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(applicable_territory_code)->GetArena();
    if (message_arena != submessage_arena) {
      applicable_territory_code = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, applicable_territory_code, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  applicable_territory_code_ = applicable_territory_code;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.ArtistType.applicable_territory_code)
}

// repeated string metadata_source_reference = 2;
inline int ArtistType::_internal_metadata_source_reference_size() const {
  return metadata_source_reference_.size();
}
inline int ArtistType::metadata_source_reference_size() const {
  return _internal_metadata_source_reference_size();
}
inline void ArtistType::clear_metadata_source_reference() {
  metadata_source_reference_.Clear();
}
inline std::string* ArtistType::add_metadata_source_reference() {
  // @@protoc_insertion_point(field_add_mutable:mead101.mead.ArtistType.metadata_source_reference)
  return _internal_add_metadata_source_reference();
}
inline const std::string& ArtistType::_internal_metadata_source_reference(int index) const {
  return metadata_source_reference_.Get(index);
}
inline const std::string& ArtistType::metadata_source_reference(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.ArtistType.metadata_source_reference)
  return _internal_metadata_source_reference(index);
}
inline std::string* ArtistType::mutable_metadata_source_reference(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.ArtistType.metadata_source_reference)
  return metadata_source_reference_.Mutable(index);
}
inline void ArtistType::set_metadata_source_reference(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:mead101.mead.ArtistType.metadata_source_reference)
  metadata_source_reference_.Mutable(index)->assign(value);
}
inline void ArtistType::set_metadata_source_reference(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:mead101.mead.ArtistType.metadata_source_reference)
  metadata_source_reference_.Mutable(index)->assign(std::move(value));
}
inline void ArtistType::set_metadata_source_reference(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  metadata_source_reference_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mead101.mead.ArtistType.metadata_source_reference)
}
inline void ArtistType::set_metadata_source_reference(int index, const char* value, size_t size) {
  metadata_source_reference_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.ArtistType.metadata_source_reference)
}
inline std::string* ArtistType::_internal_add_metadata_source_reference() {
  return metadata_source_reference_.Add();
}
inline void ArtistType::add_metadata_source_reference(const std::string& value) {
  metadata_source_reference_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mead101.mead.ArtistType.metadata_source_reference)
}
inline void ArtistType::add_metadata_source_reference(std::string&& value) {
  metadata_source_reference_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:mead101.mead.ArtistType.metadata_source_reference)
}
inline void ArtistType::add_metadata_source_reference(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  metadata_source_reference_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mead101.mead.ArtistType.metadata_source_reference)
}
inline void ArtistType::add_metadata_source_reference(const char* value, size_t size) {
  metadata_source_reference_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mead101.mead.ArtistType.metadata_source_reference)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ArtistType::metadata_source_reference() const {
  // @@protoc_insertion_point(field_list:mead101.mead.ArtistType.metadata_source_reference)
  return metadata_source_reference_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ArtistType::mutable_metadata_source_reference() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.ArtistType.metadata_source_reference)
  return &metadata_source_reference_;
}

// optional .mead101.mead.ArtistTypeValue value = 3;
inline bool ArtistType::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || value_ != nullptr);
  return value;
}
inline bool ArtistType::has_value() const {
  return _internal_has_value();
}
inline void ArtistType::clear_value() {
  if (value_ != nullptr) value_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::mead101::mead::ArtistTypeValue& ArtistType::_internal_value() const {
  const ::mead101::mead::ArtistTypeValue* p = value_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::ArtistTypeValue*>(
      &::mead101::mead::_ArtistTypeValue_default_instance_);
}
inline const ::mead101::mead::ArtistTypeValue& ArtistType::value() const {
  // @@protoc_insertion_point(field_get:mead101.mead.ArtistType.value)
  return _internal_value();
}
inline void ArtistType::unsafe_arena_set_allocated_value(
    ::mead101::mead::ArtistTypeValue* value) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(value_);
  }
  value_ = value;
  if (value) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.ArtistType.value)
}
inline ::mead101::mead::ArtistTypeValue* ArtistType::release_value() {
  _has_bits_[0] &= ~0x00000002u;
  ::mead101::mead::ArtistTypeValue* temp = value_;
  value_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::ArtistTypeValue* ArtistType::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_release:mead101.mead.ArtistType.value)
  _has_bits_[0] &= ~0x00000002u;
  ::mead101::mead::ArtistTypeValue* temp = value_;
  value_ = nullptr;
  return temp;
}
inline ::mead101::mead::ArtistTypeValue* ArtistType::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000002u;
  if (value_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::ArtistTypeValue>(GetArena());
    value_ = p;
  }
  return value_;
}
inline ::mead101::mead::ArtistTypeValue* ArtistType::mutable_value() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.ArtistType.value)
  return _internal_mutable_value();
}
inline void ArtistType::set_allocated_value(::mead101::mead::ArtistTypeValue* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete value_;
  }
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(value);
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.ArtistType.value)
}

// -------------------------------------------------------------------

// ArtistTypeValue

// optional string namespace = 1;
inline bool ArtistTypeValue::_internal_has_namespace_() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ArtistTypeValue::has_namespace_() const {
  return _internal_has_namespace_();
}
inline void ArtistTypeValue::clear_namespace_() {
  namespace__.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ArtistTypeValue::namespace_() const {
  // @@protoc_insertion_point(field_get:mead101.mead.ArtistTypeValue.namespace)
  return _internal_namespace_();
}
inline void ArtistTypeValue::set_namespace_(const std::string& value) {
  _internal_set_namespace_(value);
  // @@protoc_insertion_point(field_set:mead101.mead.ArtistTypeValue.namespace)
}
inline std::string* ArtistTypeValue::mutable_namespace_() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.ArtistTypeValue.namespace)
  return _internal_mutable_namespace_();
}
inline const std::string& ArtistTypeValue::_internal_namespace_() const {
  return namespace__.Get();
}
inline void ArtistTypeValue::_internal_set_namespace_(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ArtistTypeValue::set_namespace_(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  namespace__.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.ArtistTypeValue.namespace)
}
inline void ArtistTypeValue::set_namespace_(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.ArtistTypeValue.namespace)
}
inline void ArtistTypeValue::set_namespace_(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.ArtistTypeValue.namespace)
}
inline std::string* ArtistTypeValue::_internal_mutable_namespace_() {
  _has_bits_[0] |= 0x00000001u;
  return namespace__.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ArtistTypeValue::release_namespace_() {
  // @@protoc_insertion_point(field_release:mead101.mead.ArtistTypeValue.namespace)
  if (!_internal_has_namespace_()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return namespace__.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ArtistTypeValue::set_allocated_namespace_(std::string* namespace_) {
  if (namespace_ != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  namespace__.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), namespace_,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.ArtistTypeValue.namespace)
}

// optional string user_defined_value = 2;
inline bool ArtistTypeValue::_internal_has_user_defined_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ArtistTypeValue::has_user_defined_value() const {
  return _internal_has_user_defined_value();
}
inline void ArtistTypeValue::clear_user_defined_value() {
  user_defined_value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ArtistTypeValue::user_defined_value() const {
  // @@protoc_insertion_point(field_get:mead101.mead.ArtistTypeValue.user_defined_value)
  return _internal_user_defined_value();
}
inline void ArtistTypeValue::set_user_defined_value(const std::string& value) {
  _internal_set_user_defined_value(value);
  // @@protoc_insertion_point(field_set:mead101.mead.ArtistTypeValue.user_defined_value)
}
inline std::string* ArtistTypeValue::mutable_user_defined_value() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.ArtistTypeValue.user_defined_value)
  return _internal_mutable_user_defined_value();
}
inline const std::string& ArtistTypeValue::_internal_user_defined_value() const {
  return user_defined_value_.Get();
}
inline void ArtistTypeValue::_internal_set_user_defined_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ArtistTypeValue::set_user_defined_value(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  user_defined_value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.ArtistTypeValue.user_defined_value)
}
inline void ArtistTypeValue::set_user_defined_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.ArtistTypeValue.user_defined_value)
}
inline void ArtistTypeValue::set_user_defined_value(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.ArtistTypeValue.user_defined_value)
}
inline std::string* ArtistTypeValue::_internal_mutable_user_defined_value() {
  _has_bits_[0] |= 0x00000002u;
  return user_defined_value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ArtistTypeValue::release_user_defined_value() {
  // @@protoc_insertion_point(field_release:mead101.mead.ArtistTypeValue.user_defined_value)
  if (!_internal_has_user_defined_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return user_defined_value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ArtistTypeValue::set_allocated_user_defined_value(std::string* user_defined_value) {
  if (user_defined_value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  user_defined_value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_defined_value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.ArtistTypeValue.user_defined_value)
}

// optional .mead101.avs.ArtistType ext_value = 3;
inline bool ArtistTypeValue::_internal_has_ext_value() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || ext_value_ != nullptr);
  return value;
}
inline bool ArtistTypeValue::has_ext_value() const {
  return _internal_has_ext_value();
}
inline const ::mead101::avs::ArtistType& ArtistTypeValue::_internal_ext_value() const {
  const ::mead101::avs::ArtistType* p = ext_value_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::avs::ArtistType*>(
      &::mead101::avs::_ArtistType_default_instance_);
}
inline const ::mead101::avs::ArtistType& ArtistTypeValue::ext_value() const {
  // @@protoc_insertion_point(field_get:mead101.mead.ArtistTypeValue.ext_value)
  return _internal_ext_value();
}
inline void ArtistTypeValue::unsafe_arena_set_allocated_ext_value(
    ::mead101::avs::ArtistType* ext_value) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext_value_);
  }
  ext_value_ = ext_value;
  if (ext_value) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.ArtistTypeValue.ext_value)
}
inline ::mead101::avs::ArtistType* ArtistTypeValue::release_ext_value() {
  _has_bits_[0] &= ~0x00000004u;
  ::mead101::avs::ArtistType* temp = ext_value_;
  ext_value_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::avs::ArtistType* ArtistTypeValue::unsafe_arena_release_ext_value() {
  // @@protoc_insertion_point(field_release:mead101.mead.ArtistTypeValue.ext_value)
  _has_bits_[0] &= ~0x00000004u;
  ::mead101::avs::ArtistType* temp = ext_value_;
  ext_value_ = nullptr;
  return temp;
}
inline ::mead101::avs::ArtistType* ArtistTypeValue::_internal_mutable_ext_value() {
  _has_bits_[0] |= 0x00000004u;
  if (ext_value_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::avs::ArtistType>(GetArena());
    ext_value_ = p;
  }
  return ext_value_;
}
inline ::mead101::avs::ArtistType* ArtistTypeValue::mutable_ext_value() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.ArtistTypeValue.ext_value)
  return _internal_mutable_ext_value();
}
inline void ArtistTypeValue::set_allocated_ext_value(::mead101::avs::ArtistType* ext_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext_value_);
  }
  if (ext_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext_value)->GetArena();
    if (message_arena != submessage_arena) {
      ext_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext_value, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  ext_value_ = ext_value;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.ArtistTypeValue.ext_value)
}

// -------------------------------------------------------------------

// ArtisticInfluence

// repeated .mead101.mead.TextWithFormat description = 1;
inline int ArtisticInfluence::_internal_description_size() const {
  return description_.size();
}
inline int ArtisticInfluence::description_size() const {
  return _internal_description_size();
}
inline void ArtisticInfluence::clear_description() {
  description_.Clear();
}
inline ::mead101::mead::TextWithFormat* ArtisticInfluence::mutable_description(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.ArtisticInfluence.description)
  return description_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::TextWithFormat >*
ArtisticInfluence::mutable_description() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.ArtisticInfluence.description)
  return &description_;
}
inline const ::mead101::mead::TextWithFormat& ArtisticInfluence::_internal_description(int index) const {
  return description_.Get(index);
}
inline const ::mead101::mead::TextWithFormat& ArtisticInfluence::description(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.ArtisticInfluence.description)
  return _internal_description(index);
}
inline ::mead101::mead::TextWithFormat* ArtisticInfluence::_internal_add_description() {
  return description_.Add();
}
inline ::mead101::mead::TextWithFormat* ArtisticInfluence::add_description() {
  // @@protoc_insertion_point(field_add:mead101.mead.ArtisticInfluence.description)
  return _internal_add_description();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::TextWithFormat >&
ArtisticInfluence::description() const {
  // @@protoc_insertion_point(field_list:mead101.mead.ArtisticInfluence.description)
  return description_;
}

// optional bool is_influenced = 2;
inline bool ArtisticInfluence::_internal_has_is_influenced() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ArtisticInfluence::has_is_influenced() const {
  return _internal_has_is_influenced();
}
inline void ArtisticInfluence::clear_is_influenced() {
  is_influenced_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool ArtisticInfluence::_internal_is_influenced() const {
  return is_influenced_;
}
inline bool ArtisticInfluence::is_influenced() const {
  // @@protoc_insertion_point(field_get:mead101.mead.ArtisticInfluence.is_influenced)
  return _internal_is_influenced();
}
inline void ArtisticInfluence::_internal_set_is_influenced(bool value) {
  _has_bits_[0] |= 0x00000001u;
  is_influenced_ = value;
}
inline void ArtisticInfluence::set_is_influenced(bool value) {
  _internal_set_is_influenced(value);
  // @@protoc_insertion_point(field_set:mead101.mead.ArtisticInfluence.is_influenced)
}

// optional bool is_influencer = 3;
inline bool ArtisticInfluence::_internal_has_is_influencer() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ArtisticInfluence::has_is_influencer() const {
  return _internal_has_is_influencer();
}
inline void ArtisticInfluence::clear_is_influencer() {
  is_influencer_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool ArtisticInfluence::_internal_is_influencer() const {
  return is_influencer_;
}
inline bool ArtisticInfluence::is_influencer() const {
  // @@protoc_insertion_point(field_get:mead101.mead.ArtisticInfluence.is_influencer)
  return _internal_is_influencer();
}
inline void ArtisticInfluence::_internal_set_is_influencer(bool value) {
  _has_bits_[0] |= 0x00000002u;
  is_influencer_ = value;
}
inline void ArtisticInfluence::set_is_influencer(bool value) {
  _internal_set_is_influencer(value);
  // @@protoc_insertion_point(field_set:mead101.mead.ArtisticInfluence.is_influencer)
}

// repeated string metadata_source_reference = 4;
inline int ArtisticInfluence::_internal_metadata_source_reference_size() const {
  return metadata_source_reference_.size();
}
inline int ArtisticInfluence::metadata_source_reference_size() const {
  return _internal_metadata_source_reference_size();
}
inline void ArtisticInfluence::clear_metadata_source_reference() {
  metadata_source_reference_.Clear();
}
inline std::string* ArtisticInfluence::add_metadata_source_reference() {
  // @@protoc_insertion_point(field_add_mutable:mead101.mead.ArtisticInfluence.metadata_source_reference)
  return _internal_add_metadata_source_reference();
}
inline const std::string& ArtisticInfluence::_internal_metadata_source_reference(int index) const {
  return metadata_source_reference_.Get(index);
}
inline const std::string& ArtisticInfluence::metadata_source_reference(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.ArtisticInfluence.metadata_source_reference)
  return _internal_metadata_source_reference(index);
}
inline std::string* ArtisticInfluence::mutable_metadata_source_reference(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.ArtisticInfluence.metadata_source_reference)
  return metadata_source_reference_.Mutable(index);
}
inline void ArtisticInfluence::set_metadata_source_reference(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:mead101.mead.ArtisticInfluence.metadata_source_reference)
  metadata_source_reference_.Mutable(index)->assign(value);
}
inline void ArtisticInfluence::set_metadata_source_reference(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:mead101.mead.ArtisticInfluence.metadata_source_reference)
  metadata_source_reference_.Mutable(index)->assign(std::move(value));
}
inline void ArtisticInfluence::set_metadata_source_reference(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  metadata_source_reference_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mead101.mead.ArtisticInfluence.metadata_source_reference)
}
inline void ArtisticInfluence::set_metadata_source_reference(int index, const char* value, size_t size) {
  metadata_source_reference_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.ArtisticInfluence.metadata_source_reference)
}
inline std::string* ArtisticInfluence::_internal_add_metadata_source_reference() {
  return metadata_source_reference_.Add();
}
inline void ArtisticInfluence::add_metadata_source_reference(const std::string& value) {
  metadata_source_reference_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mead101.mead.ArtisticInfluence.metadata_source_reference)
}
inline void ArtisticInfluence::add_metadata_source_reference(std::string&& value) {
  metadata_source_reference_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:mead101.mead.ArtisticInfluence.metadata_source_reference)
}
inline void ArtisticInfluence::add_metadata_source_reference(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  metadata_source_reference_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mead101.mead.ArtisticInfluence.metadata_source_reference)
}
inline void ArtisticInfluence::add_metadata_source_reference(const char* value, size_t size) {
  metadata_source_reference_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mead101.mead.ArtisticInfluence.metadata_source_reference)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ArtisticInfluence::metadata_source_reference() const {
  // @@protoc_insertion_point(field_list:mead101.mead.ArtisticInfluence.metadata_source_reference)
  return metadata_source_reference_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ArtisticInfluence::mutable_metadata_source_reference() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.ArtisticInfluence.metadata_source_reference)
  return &metadata_source_reference_;
}

// repeated .mead101.mead.PartyWithNames party = 5;
inline int ArtisticInfluence::_internal_party_size() const {
  return party_.size();
}
inline int ArtisticInfluence::party_size() const {
  return _internal_party_size();
}
inline void ArtisticInfluence::clear_party() {
  party_.Clear();
}
inline ::mead101::mead::PartyWithNames* ArtisticInfluence::mutable_party(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.ArtisticInfluence.party)
  return party_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::PartyWithNames >*
ArtisticInfluence::mutable_party() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.ArtisticInfluence.party)
  return &party_;
}
inline const ::mead101::mead::PartyWithNames& ArtisticInfluence::_internal_party(int index) const {
  return party_.Get(index);
}
inline const ::mead101::mead::PartyWithNames& ArtisticInfluence::party(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.ArtisticInfluence.party)
  return _internal_party(index);
}
inline ::mead101::mead::PartyWithNames* ArtisticInfluence::_internal_add_party() {
  return party_.Add();
}
inline ::mead101::mead::PartyWithNames* ArtisticInfluence::add_party() {
  // @@protoc_insertion_point(field_add:mead101.mead.ArtisticInfluence.party)
  return _internal_add_party();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::PartyWithNames >&
ArtisticInfluence::party() const {
  // @@protoc_insertion_point(field_list:mead101.mead.ArtisticInfluence.party)
  return party_;
}

// repeated .mead101.mead.Release release = 6;
inline int ArtisticInfluence::_internal_release_size() const {
  return release_.size();
}
inline int ArtisticInfluence::release_size() const {
  return _internal_release_size();
}
inline void ArtisticInfluence::clear_release() {
  release_.Clear();
}
inline ::mead101::mead::Release* ArtisticInfluence::mutable_release(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.ArtisticInfluence.release)
  return release_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Release >*
ArtisticInfluence::mutable_release() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.ArtisticInfluence.release)
  return &release_;
}
inline const ::mead101::mead::Release& ArtisticInfluence::_internal_release(int index) const {
  return release_.Get(index);
}
inline const ::mead101::mead::Release& ArtisticInfluence::release(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.ArtisticInfluence.release)
  return _internal_release(index);
}
inline ::mead101::mead::Release* ArtisticInfluence::_internal_add_release() {
  return release_.Add();
}
inline ::mead101::mead::Release* ArtisticInfluence::add_release() {
  // @@protoc_insertion_point(field_add:mead101.mead.ArtisticInfluence.release)
  return _internal_add_release();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Release >&
ArtisticInfluence::release() const {
  // @@protoc_insertion_point(field_list:mead101.mead.ArtisticInfluence.release)
  return release_;
}

// repeated .mead101.mead.Resource resource = 7;
inline int ArtisticInfluence::_internal_resource_size() const {
  return resource_.size();
}
inline int ArtisticInfluence::resource_size() const {
  return _internal_resource_size();
}
inline void ArtisticInfluence::clear_resource() {
  resource_.Clear();
}
inline ::mead101::mead::Resource* ArtisticInfluence::mutable_resource(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.ArtisticInfluence.resource)
  return resource_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Resource >*
ArtisticInfluence::mutable_resource() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.ArtisticInfluence.resource)
  return &resource_;
}
inline const ::mead101::mead::Resource& ArtisticInfluence::_internal_resource(int index) const {
  return resource_.Get(index);
}
inline const ::mead101::mead::Resource& ArtisticInfluence::resource(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.ArtisticInfluence.resource)
  return _internal_resource(index);
}
inline ::mead101::mead::Resource* ArtisticInfluence::_internal_add_resource() {
  return resource_.Add();
}
inline ::mead101::mead::Resource* ArtisticInfluence::add_resource() {
  // @@protoc_insertion_point(field_add:mead101.mead.ArtisticInfluence.resource)
  return _internal_add_resource();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Resource >&
ArtisticInfluence::resource() const {
  // @@protoc_insertion_point(field_list:mead101.mead.ArtisticInfluence.resource)
  return resource_;
}

// repeated .mead101.mead.Work work = 8;
inline int ArtisticInfluence::_internal_work_size() const {
  return work_.size();
}
inline int ArtisticInfluence::work_size() const {
  return _internal_work_size();
}
inline void ArtisticInfluence::clear_work() {
  work_.Clear();
}
inline ::mead101::mead::Work* ArtisticInfluence::mutable_work(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.ArtisticInfluence.work)
  return work_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Work >*
ArtisticInfluence::mutable_work() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.ArtisticInfluence.work)
  return &work_;
}
inline const ::mead101::mead::Work& ArtisticInfluence::_internal_work(int index) const {
  return work_.Get(index);
}
inline const ::mead101::mead::Work& ArtisticInfluence::work(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.ArtisticInfluence.work)
  return _internal_work(index);
}
inline ::mead101::mead::Work* ArtisticInfluence::_internal_add_work() {
  return work_.Add();
}
inline ::mead101::mead::Work* ArtisticInfluence::add_work() {
  // @@protoc_insertion_point(field_add:mead101.mead.ArtisticInfluence.work)
  return _internal_add_work();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Work >&
ArtisticInfluence::work() const {
  // @@protoc_insertion_point(field_list:mead101.mead.ArtisticInfluence.work)
  return work_;
}

// -------------------------------------------------------------------

// Award

// optional .mead101.mead.NameWithPronunciation award_name = 1;
inline bool Award::_internal_has_award_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || award_name_ != nullptr);
  return value;
}
inline bool Award::has_award_name() const {
  return _internal_has_award_name();
}
inline void Award::clear_award_name() {
  if (award_name_ != nullptr) award_name_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::mead101::mead::NameWithPronunciation& Award::_internal_award_name() const {
  const ::mead101::mead::NameWithPronunciation* p = award_name_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::NameWithPronunciation*>(
      &::mead101::mead::_NameWithPronunciation_default_instance_);
}
inline const ::mead101::mead::NameWithPronunciation& Award::award_name() const {
  // @@protoc_insertion_point(field_get:mead101.mead.Award.award_name)
  return _internal_award_name();
}
inline void Award::unsafe_arena_set_allocated_award_name(
    ::mead101::mead::NameWithPronunciation* award_name) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(award_name_);
  }
  award_name_ = award_name;
  if (award_name) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.Award.award_name)
}
inline ::mead101::mead::NameWithPronunciation* Award::release_award_name() {
  _has_bits_[0] &= ~0x00000001u;
  ::mead101::mead::NameWithPronunciation* temp = award_name_;
  award_name_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::NameWithPronunciation* Award::unsafe_arena_release_award_name() {
  // @@protoc_insertion_point(field_release:mead101.mead.Award.award_name)
  _has_bits_[0] &= ~0x00000001u;
  ::mead101::mead::NameWithPronunciation* temp = award_name_;
  award_name_ = nullptr;
  return temp;
}
inline ::mead101::mead::NameWithPronunciation* Award::_internal_mutable_award_name() {
  _has_bits_[0] |= 0x00000001u;
  if (award_name_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::NameWithPronunciation>(GetArena());
    award_name_ = p;
  }
  return award_name_;
}
inline ::mead101::mead::NameWithPronunciation* Award::mutable_award_name() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Award.award_name)
  return _internal_mutable_award_name();
}
inline void Award::set_allocated_award_name(::mead101::mead::NameWithPronunciation* award_name) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete award_name_;
  }
  if (award_name) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(award_name);
    if (message_arena != submessage_arena) {
      award_name = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, award_name, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  award_name_ = award_name;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.Award.award_name)
}

// optional .mead101.mead.PartyWithNames awarded_party = 2;
inline bool Award::_internal_has_awarded_party() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || awarded_party_ != nullptr);
  return value;
}
inline bool Award::has_awarded_party() const {
  return _internal_has_awarded_party();
}
inline void Award::clear_awarded_party() {
  if (awarded_party_ != nullptr) awarded_party_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::mead101::mead::PartyWithNames& Award::_internal_awarded_party() const {
  const ::mead101::mead::PartyWithNames* p = awarded_party_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::PartyWithNames*>(
      &::mead101::mead::_PartyWithNames_default_instance_);
}
inline const ::mead101::mead::PartyWithNames& Award::awarded_party() const {
  // @@protoc_insertion_point(field_get:mead101.mead.Award.awarded_party)
  return _internal_awarded_party();
}
inline void Award::unsafe_arena_set_allocated_awarded_party(
    ::mead101::mead::PartyWithNames* awarded_party) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(awarded_party_);
  }
  awarded_party_ = awarded_party;
  if (awarded_party) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.Award.awarded_party)
}
inline ::mead101::mead::PartyWithNames* Award::release_awarded_party() {
  _has_bits_[0] &= ~0x00000002u;
  ::mead101::mead::PartyWithNames* temp = awarded_party_;
  awarded_party_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::PartyWithNames* Award::unsafe_arena_release_awarded_party() {
  // @@protoc_insertion_point(field_release:mead101.mead.Award.awarded_party)
  _has_bits_[0] &= ~0x00000002u;
  ::mead101::mead::PartyWithNames* temp = awarded_party_;
  awarded_party_ = nullptr;
  return temp;
}
inline ::mead101::mead::PartyWithNames* Award::_internal_mutable_awarded_party() {
  _has_bits_[0] |= 0x00000002u;
  if (awarded_party_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::PartyWithNames>(GetArena());
    awarded_party_ = p;
  }
  return awarded_party_;
}
inline ::mead101::mead::PartyWithNames* Award::mutable_awarded_party() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Award.awarded_party)
  return _internal_mutable_awarded_party();
}
inline void Award::set_allocated_awarded_party(::mead101::mead::PartyWithNames* awarded_party) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete awarded_party_;
  }
  if (awarded_party) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(awarded_party);
    if (message_arena != submessage_arena) {
      awarded_party = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, awarded_party, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  awarded_party_ = awarded_party;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.Award.awarded_party)
}

// optional .mead101.mead.PartyDescriptor awarding_body = 3;
inline bool Award::_internal_has_awarding_body() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || awarding_body_ != nullptr);
  return value;
}
inline bool Award::has_awarding_body() const {
  return _internal_has_awarding_body();
}
inline void Award::clear_awarding_body() {
  if (awarding_body_ != nullptr) awarding_body_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::mead101::mead::PartyDescriptor& Award::_internal_awarding_body() const {
  const ::mead101::mead::PartyDescriptor* p = awarding_body_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::PartyDescriptor*>(
      &::mead101::mead::_PartyDescriptor_default_instance_);
}
inline const ::mead101::mead::PartyDescriptor& Award::awarding_body() const {
  // @@protoc_insertion_point(field_get:mead101.mead.Award.awarding_body)
  return _internal_awarding_body();
}
inline void Award::unsafe_arena_set_allocated_awarding_body(
    ::mead101::mead::PartyDescriptor* awarding_body) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(awarding_body_);
  }
  awarding_body_ = awarding_body;
  if (awarding_body) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.Award.awarding_body)
}
inline ::mead101::mead::PartyDescriptor* Award::release_awarding_body() {
  _has_bits_[0] &= ~0x00000004u;
  ::mead101::mead::PartyDescriptor* temp = awarding_body_;
  awarding_body_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::PartyDescriptor* Award::unsafe_arena_release_awarding_body() {
  // @@protoc_insertion_point(field_release:mead101.mead.Award.awarding_body)
  _has_bits_[0] &= ~0x00000004u;
  ::mead101::mead::PartyDescriptor* temp = awarding_body_;
  awarding_body_ = nullptr;
  return temp;
}
inline ::mead101::mead::PartyDescriptor* Award::_internal_mutable_awarding_body() {
  _has_bits_[0] |= 0x00000004u;
  if (awarding_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::PartyDescriptor>(GetArena());
    awarding_body_ = p;
  }
  return awarding_body_;
}
inline ::mead101::mead::PartyDescriptor* Award::mutable_awarding_body() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Award.awarding_body)
  return _internal_mutable_awarding_body();
}
inline void Award::set_allocated_awarding_body(::mead101::mead::PartyDescriptor* awarding_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete awarding_body_;
  }
  if (awarding_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(awarding_body);
    if (message_arena != submessage_arena) {
      awarding_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, awarding_body, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  awarding_body_ = awarding_body;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.Award.awarding_body)
}

// repeated .mead101.mead.TextWithFormat comment = 4;
inline int Award::_internal_comment_size() const {
  return comment_.size();
}
inline int Award::comment_size() const {
  return _internal_comment_size();
}
inline void Award::clear_comment() {
  comment_.Clear();
}
inline ::mead101::mead::TextWithFormat* Award::mutable_comment(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Award.comment)
  return comment_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::TextWithFormat >*
Award::mutable_comment() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.Award.comment)
  return &comment_;
}
inline const ::mead101::mead::TextWithFormat& Award::_internal_comment(int index) const {
  return comment_.Get(index);
}
inline const ::mead101::mead::TextWithFormat& Award::comment(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.Award.comment)
  return _internal_comment(index);
}
inline ::mead101::mead::TextWithFormat* Award::_internal_add_comment() {
  return comment_.Add();
}
inline ::mead101::mead::TextWithFormat* Award::add_comment() {
  // @@protoc_insertion_point(field_add:mead101.mead.Award.comment)
  return _internal_add_comment();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::TextWithFormat >&
Award::comment() const {
  // @@protoc_insertion_point(field_list:mead101.mead.Award.comment)
  return comment_;
}

// optional .mead101.mead.EventDate date = 5;
inline bool Award::_internal_has_date() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || date_ != nullptr);
  return value;
}
inline bool Award::has_date() const {
  return _internal_has_date();
}
inline void Award::clear_date() {
  if (date_ != nullptr) date_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::mead101::mead::EventDate& Award::_internal_date() const {
  const ::mead101::mead::EventDate* p = date_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::EventDate*>(
      &::mead101::mead::_EventDate_default_instance_);
}
inline const ::mead101::mead::EventDate& Award::date() const {
  // @@protoc_insertion_point(field_get:mead101.mead.Award.date)
  return _internal_date();
}
inline void Award::unsafe_arena_set_allocated_date(
    ::mead101::mead::EventDate* date) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(date_);
  }
  date_ = date;
  if (date) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.Award.date)
}
inline ::mead101::mead::EventDate* Award::release_date() {
  _has_bits_[0] &= ~0x00000008u;
  ::mead101::mead::EventDate* temp = date_;
  date_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::EventDate* Award::unsafe_arena_release_date() {
  // @@protoc_insertion_point(field_release:mead101.mead.Award.date)
  _has_bits_[0] &= ~0x00000008u;
  ::mead101::mead::EventDate* temp = date_;
  date_ = nullptr;
  return temp;
}
inline ::mead101::mead::EventDate* Award::_internal_mutable_date() {
  _has_bits_[0] |= 0x00000008u;
  if (date_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::EventDate>(GetArena());
    date_ = p;
  }
  return date_;
}
inline ::mead101::mead::EventDate* Award::mutable_date() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Award.date)
  return _internal_mutable_date();
}
inline void Award::set_allocated_date(::mead101::mead::EventDate* date) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete date_;
  }
  if (date) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(date);
    if (message_arena != submessage_arena) {
      date = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, date, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  date_ = date;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.Award.date)
}

// optional bool is_winner = 6;
inline bool Award::_internal_has_is_winner() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Award::has_is_winner() const {
  return _internal_has_is_winner();
}
inline void Award::clear_is_winner() {
  is_winner_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool Award::_internal_is_winner() const {
  return is_winner_;
}
inline bool Award::is_winner() const {
  // @@protoc_insertion_point(field_get:mead101.mead.Award.is_winner)
  return _internal_is_winner();
}
inline void Award::_internal_set_is_winner(bool value) {
  _has_bits_[0] |= 0x00000010u;
  is_winner_ = value;
}
inline void Award::set_is_winner(bool value) {
  _internal_set_is_winner(value);
  // @@protoc_insertion_point(field_set:mead101.mead.Award.is_winner)
}

// repeated string metadata_source_reference = 7;
inline int Award::_internal_metadata_source_reference_size() const {
  return metadata_source_reference_.size();
}
inline int Award::metadata_source_reference_size() const {
  return _internal_metadata_source_reference_size();
}
inline void Award::clear_metadata_source_reference() {
  metadata_source_reference_.Clear();
}
inline std::string* Award::add_metadata_source_reference() {
  // @@protoc_insertion_point(field_add_mutable:mead101.mead.Award.metadata_source_reference)
  return _internal_add_metadata_source_reference();
}
inline const std::string& Award::_internal_metadata_source_reference(int index) const {
  return metadata_source_reference_.Get(index);
}
inline const std::string& Award::metadata_source_reference(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.Award.metadata_source_reference)
  return _internal_metadata_source_reference(index);
}
inline std::string* Award::mutable_metadata_source_reference(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Award.metadata_source_reference)
  return metadata_source_reference_.Mutable(index);
}
inline void Award::set_metadata_source_reference(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:mead101.mead.Award.metadata_source_reference)
  metadata_source_reference_.Mutable(index)->assign(value);
}
inline void Award::set_metadata_source_reference(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:mead101.mead.Award.metadata_source_reference)
  metadata_source_reference_.Mutable(index)->assign(std::move(value));
}
inline void Award::set_metadata_source_reference(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  metadata_source_reference_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mead101.mead.Award.metadata_source_reference)
}
inline void Award::set_metadata_source_reference(int index, const char* value, size_t size) {
  metadata_source_reference_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.Award.metadata_source_reference)
}
inline std::string* Award::_internal_add_metadata_source_reference() {
  return metadata_source_reference_.Add();
}
inline void Award::add_metadata_source_reference(const std::string& value) {
  metadata_source_reference_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mead101.mead.Award.metadata_source_reference)
}
inline void Award::add_metadata_source_reference(std::string&& value) {
  metadata_source_reference_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:mead101.mead.Award.metadata_source_reference)
}
inline void Award::add_metadata_source_reference(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  metadata_source_reference_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mead101.mead.Award.metadata_source_reference)
}
inline void Award::add_metadata_source_reference(const char* value, size_t size) {
  metadata_source_reference_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mead101.mead.Award.metadata_source_reference)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Award::metadata_source_reference() const {
  // @@protoc_insertion_point(field_list:mead101.mead.Award.metadata_source_reference)
  return metadata_source_reference_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Award::mutable_metadata_source_reference() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.Award.metadata_source_reference)
  return &metadata_source_reference_;
}

// -------------------------------------------------------------------

// AwardForParty

// optional .mead101.mead.NameWithPronunciation award_name = 1;
inline bool AwardForParty::_internal_has_award_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || award_name_ != nullptr);
  return value;
}
inline bool AwardForParty::has_award_name() const {
  return _internal_has_award_name();
}
inline void AwardForParty::clear_award_name() {
  if (award_name_ != nullptr) award_name_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::mead101::mead::NameWithPronunciation& AwardForParty::_internal_award_name() const {
  const ::mead101::mead::NameWithPronunciation* p = award_name_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::NameWithPronunciation*>(
      &::mead101::mead::_NameWithPronunciation_default_instance_);
}
inline const ::mead101::mead::NameWithPronunciation& AwardForParty::award_name() const {
  // @@protoc_insertion_point(field_get:mead101.mead.AwardForParty.award_name)
  return _internal_award_name();
}
inline void AwardForParty::unsafe_arena_set_allocated_award_name(
    ::mead101::mead::NameWithPronunciation* award_name) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(award_name_);
  }
  award_name_ = award_name;
  if (award_name) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.AwardForParty.award_name)
}
inline ::mead101::mead::NameWithPronunciation* AwardForParty::release_award_name() {
  _has_bits_[0] &= ~0x00000001u;
  ::mead101::mead::NameWithPronunciation* temp = award_name_;
  award_name_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::NameWithPronunciation* AwardForParty::unsafe_arena_release_award_name() {
  // @@protoc_insertion_point(field_release:mead101.mead.AwardForParty.award_name)
  _has_bits_[0] &= ~0x00000001u;
  ::mead101::mead::NameWithPronunciation* temp = award_name_;
  award_name_ = nullptr;
  return temp;
}
inline ::mead101::mead::NameWithPronunciation* AwardForParty::_internal_mutable_award_name() {
  _has_bits_[0] |= 0x00000001u;
  if (award_name_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::NameWithPronunciation>(GetArena());
    award_name_ = p;
  }
  return award_name_;
}
inline ::mead101::mead::NameWithPronunciation* AwardForParty::mutable_award_name() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.AwardForParty.award_name)
  return _internal_mutable_award_name();
}
inline void AwardForParty::set_allocated_award_name(::mead101::mead::NameWithPronunciation* award_name) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete award_name_;
  }
  if (award_name) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(award_name);
    if (message_arena != submessage_arena) {
      award_name = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, award_name, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  award_name_ = award_name;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.AwardForParty.award_name)
}

// optional .mead101.mead.PartyWithNames awarded_party = 2;
inline bool AwardForParty::_internal_has_awarded_party() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || awarded_party_ != nullptr);
  return value;
}
inline bool AwardForParty::has_awarded_party() const {
  return _internal_has_awarded_party();
}
inline void AwardForParty::clear_awarded_party() {
  if (awarded_party_ != nullptr) awarded_party_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::mead101::mead::PartyWithNames& AwardForParty::_internal_awarded_party() const {
  const ::mead101::mead::PartyWithNames* p = awarded_party_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::PartyWithNames*>(
      &::mead101::mead::_PartyWithNames_default_instance_);
}
inline const ::mead101::mead::PartyWithNames& AwardForParty::awarded_party() const {
  // @@protoc_insertion_point(field_get:mead101.mead.AwardForParty.awarded_party)
  return _internal_awarded_party();
}
inline void AwardForParty::unsafe_arena_set_allocated_awarded_party(
    ::mead101::mead::PartyWithNames* awarded_party) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(awarded_party_);
  }
  awarded_party_ = awarded_party;
  if (awarded_party) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.AwardForParty.awarded_party)
}
inline ::mead101::mead::PartyWithNames* AwardForParty::release_awarded_party() {
  _has_bits_[0] &= ~0x00000002u;
  ::mead101::mead::PartyWithNames* temp = awarded_party_;
  awarded_party_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::PartyWithNames* AwardForParty::unsafe_arena_release_awarded_party() {
  // @@protoc_insertion_point(field_release:mead101.mead.AwardForParty.awarded_party)
  _has_bits_[0] &= ~0x00000002u;
  ::mead101::mead::PartyWithNames* temp = awarded_party_;
  awarded_party_ = nullptr;
  return temp;
}
inline ::mead101::mead::PartyWithNames* AwardForParty::_internal_mutable_awarded_party() {
  _has_bits_[0] |= 0x00000002u;
  if (awarded_party_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::PartyWithNames>(GetArena());
    awarded_party_ = p;
  }
  return awarded_party_;
}
inline ::mead101::mead::PartyWithNames* AwardForParty::mutable_awarded_party() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.AwardForParty.awarded_party)
  return _internal_mutable_awarded_party();
}
inline void AwardForParty::set_allocated_awarded_party(::mead101::mead::PartyWithNames* awarded_party) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete awarded_party_;
  }
  if (awarded_party) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(awarded_party);
    if (message_arena != submessage_arena) {
      awarded_party = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, awarded_party, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  awarded_party_ = awarded_party;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.AwardForParty.awarded_party)
}

// optional .mead101.mead.Release awarded_release = 3;
inline bool AwardForParty::_internal_has_awarded_release() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || awarded_release_ != nullptr);
  return value;
}
inline bool AwardForParty::has_awarded_release() const {
  return _internal_has_awarded_release();
}
inline void AwardForParty::clear_awarded_release() {
  if (awarded_release_ != nullptr) awarded_release_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::mead101::mead::Release& AwardForParty::_internal_awarded_release() const {
  const ::mead101::mead::Release* p = awarded_release_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::Release*>(
      &::mead101::mead::_Release_default_instance_);
}
inline const ::mead101::mead::Release& AwardForParty::awarded_release() const {
  // @@protoc_insertion_point(field_get:mead101.mead.AwardForParty.awarded_release)
  return _internal_awarded_release();
}
inline void AwardForParty::unsafe_arena_set_allocated_awarded_release(
    ::mead101::mead::Release* awarded_release) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(awarded_release_);
  }
  awarded_release_ = awarded_release;
  if (awarded_release) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.AwardForParty.awarded_release)
}
inline ::mead101::mead::Release* AwardForParty::release_awarded_release() {
  _has_bits_[0] &= ~0x00000004u;
  ::mead101::mead::Release* temp = awarded_release_;
  awarded_release_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::Release* AwardForParty::unsafe_arena_release_awarded_release() {
  // @@protoc_insertion_point(field_release:mead101.mead.AwardForParty.awarded_release)
  _has_bits_[0] &= ~0x00000004u;
  ::mead101::mead::Release* temp = awarded_release_;
  awarded_release_ = nullptr;
  return temp;
}
inline ::mead101::mead::Release* AwardForParty::_internal_mutable_awarded_release() {
  _has_bits_[0] |= 0x00000004u;
  if (awarded_release_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::Release>(GetArena());
    awarded_release_ = p;
  }
  return awarded_release_;
}
inline ::mead101::mead::Release* AwardForParty::mutable_awarded_release() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.AwardForParty.awarded_release)
  return _internal_mutable_awarded_release();
}
inline void AwardForParty::set_allocated_awarded_release(::mead101::mead::Release* awarded_release) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete awarded_release_;
  }
  if (awarded_release) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(awarded_release);
    if (message_arena != submessage_arena) {
      awarded_release = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, awarded_release, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  awarded_release_ = awarded_release;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.AwardForParty.awarded_release)
}

// optional .mead101.mead.Resource awarded_resource = 4;
inline bool AwardForParty::_internal_has_awarded_resource() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || awarded_resource_ != nullptr);
  return value;
}
inline bool AwardForParty::has_awarded_resource() const {
  return _internal_has_awarded_resource();
}
inline void AwardForParty::clear_awarded_resource() {
  if (awarded_resource_ != nullptr) awarded_resource_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::mead101::mead::Resource& AwardForParty::_internal_awarded_resource() const {
  const ::mead101::mead::Resource* p = awarded_resource_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::Resource*>(
      &::mead101::mead::_Resource_default_instance_);
}
inline const ::mead101::mead::Resource& AwardForParty::awarded_resource() const {
  // @@protoc_insertion_point(field_get:mead101.mead.AwardForParty.awarded_resource)
  return _internal_awarded_resource();
}
inline void AwardForParty::unsafe_arena_set_allocated_awarded_resource(
    ::mead101::mead::Resource* awarded_resource) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(awarded_resource_);
  }
  awarded_resource_ = awarded_resource;
  if (awarded_resource) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.AwardForParty.awarded_resource)
}
inline ::mead101::mead::Resource* AwardForParty::release_awarded_resource() {
  _has_bits_[0] &= ~0x00000008u;
  ::mead101::mead::Resource* temp = awarded_resource_;
  awarded_resource_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::Resource* AwardForParty::unsafe_arena_release_awarded_resource() {
  // @@protoc_insertion_point(field_release:mead101.mead.AwardForParty.awarded_resource)
  _has_bits_[0] &= ~0x00000008u;
  ::mead101::mead::Resource* temp = awarded_resource_;
  awarded_resource_ = nullptr;
  return temp;
}
inline ::mead101::mead::Resource* AwardForParty::_internal_mutable_awarded_resource() {
  _has_bits_[0] |= 0x00000008u;
  if (awarded_resource_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::Resource>(GetArena());
    awarded_resource_ = p;
  }
  return awarded_resource_;
}
inline ::mead101::mead::Resource* AwardForParty::mutable_awarded_resource() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.AwardForParty.awarded_resource)
  return _internal_mutable_awarded_resource();
}
inline void AwardForParty::set_allocated_awarded_resource(::mead101::mead::Resource* awarded_resource) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete awarded_resource_;
  }
  if (awarded_resource) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(awarded_resource);
    if (message_arena != submessage_arena) {
      awarded_resource = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, awarded_resource, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  awarded_resource_ = awarded_resource;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.AwardForParty.awarded_resource)
}

// optional .mead101.mead.Work awarded_work = 5;
inline bool AwardForParty::_internal_has_awarded_work() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || awarded_work_ != nullptr);
  return value;
}
inline bool AwardForParty::has_awarded_work() const {
  return _internal_has_awarded_work();
}
inline void AwardForParty::clear_awarded_work() {
  if (awarded_work_ != nullptr) awarded_work_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::mead101::mead::Work& AwardForParty::_internal_awarded_work() const {
  const ::mead101::mead::Work* p = awarded_work_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::Work*>(
      &::mead101::mead::_Work_default_instance_);
}
inline const ::mead101::mead::Work& AwardForParty::awarded_work() const {
  // @@protoc_insertion_point(field_get:mead101.mead.AwardForParty.awarded_work)
  return _internal_awarded_work();
}
inline void AwardForParty::unsafe_arena_set_allocated_awarded_work(
    ::mead101::mead::Work* awarded_work) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(awarded_work_);
  }
  awarded_work_ = awarded_work;
  if (awarded_work) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.AwardForParty.awarded_work)
}
inline ::mead101::mead::Work* AwardForParty::release_awarded_work() {
  _has_bits_[0] &= ~0x00000010u;
  ::mead101::mead::Work* temp = awarded_work_;
  awarded_work_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::Work* AwardForParty::unsafe_arena_release_awarded_work() {
  // @@protoc_insertion_point(field_release:mead101.mead.AwardForParty.awarded_work)
  _has_bits_[0] &= ~0x00000010u;
  ::mead101::mead::Work* temp = awarded_work_;
  awarded_work_ = nullptr;
  return temp;
}
inline ::mead101::mead::Work* AwardForParty::_internal_mutable_awarded_work() {
  _has_bits_[0] |= 0x00000010u;
  if (awarded_work_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::Work>(GetArena());
    awarded_work_ = p;
  }
  return awarded_work_;
}
inline ::mead101::mead::Work* AwardForParty::mutable_awarded_work() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.AwardForParty.awarded_work)
  return _internal_mutable_awarded_work();
}
inline void AwardForParty::set_allocated_awarded_work(::mead101::mead::Work* awarded_work) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete awarded_work_;
  }
  if (awarded_work) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(awarded_work);
    if (message_arena != submessage_arena) {
      awarded_work = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, awarded_work, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  awarded_work_ = awarded_work;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.AwardForParty.awarded_work)
}

// optional .mead101.mead.PartyDescriptor awarding_body = 6;
inline bool AwardForParty::_internal_has_awarding_body() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || awarding_body_ != nullptr);
  return value;
}
inline bool AwardForParty::has_awarding_body() const {
  return _internal_has_awarding_body();
}
inline void AwardForParty::clear_awarding_body() {
  if (awarding_body_ != nullptr) awarding_body_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::mead101::mead::PartyDescriptor& AwardForParty::_internal_awarding_body() const {
  const ::mead101::mead::PartyDescriptor* p = awarding_body_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::PartyDescriptor*>(
      &::mead101::mead::_PartyDescriptor_default_instance_);
}
inline const ::mead101::mead::PartyDescriptor& AwardForParty::awarding_body() const {
  // @@protoc_insertion_point(field_get:mead101.mead.AwardForParty.awarding_body)
  return _internal_awarding_body();
}
inline void AwardForParty::unsafe_arena_set_allocated_awarding_body(
    ::mead101::mead::PartyDescriptor* awarding_body) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(awarding_body_);
  }
  awarding_body_ = awarding_body;
  if (awarding_body) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.AwardForParty.awarding_body)
}
inline ::mead101::mead::PartyDescriptor* AwardForParty::release_awarding_body() {
  _has_bits_[0] &= ~0x00000020u;
  ::mead101::mead::PartyDescriptor* temp = awarding_body_;
  awarding_body_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::PartyDescriptor* AwardForParty::unsafe_arena_release_awarding_body() {
  // @@protoc_insertion_point(field_release:mead101.mead.AwardForParty.awarding_body)
  _has_bits_[0] &= ~0x00000020u;
  ::mead101::mead::PartyDescriptor* temp = awarding_body_;
  awarding_body_ = nullptr;
  return temp;
}
inline ::mead101::mead::PartyDescriptor* AwardForParty::_internal_mutable_awarding_body() {
  _has_bits_[0] |= 0x00000020u;
  if (awarding_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::PartyDescriptor>(GetArena());
    awarding_body_ = p;
  }
  return awarding_body_;
}
inline ::mead101::mead::PartyDescriptor* AwardForParty::mutable_awarding_body() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.AwardForParty.awarding_body)
  return _internal_mutable_awarding_body();
}
inline void AwardForParty::set_allocated_awarding_body(::mead101::mead::PartyDescriptor* awarding_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete awarding_body_;
  }
  if (awarding_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(awarding_body);
    if (message_arena != submessage_arena) {
      awarding_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, awarding_body, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  awarding_body_ = awarding_body;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.AwardForParty.awarding_body)
}

// repeated .mead101.mead.TextWithFormat comment = 7;
inline int AwardForParty::_internal_comment_size() const {
  return comment_.size();
}
inline int AwardForParty::comment_size() const {
  return _internal_comment_size();
}
inline void AwardForParty::clear_comment() {
  comment_.Clear();
}
inline ::mead101::mead::TextWithFormat* AwardForParty::mutable_comment(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.AwardForParty.comment)
  return comment_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::TextWithFormat >*
AwardForParty::mutable_comment() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.AwardForParty.comment)
  return &comment_;
}
inline const ::mead101::mead::TextWithFormat& AwardForParty::_internal_comment(int index) const {
  return comment_.Get(index);
}
inline const ::mead101::mead::TextWithFormat& AwardForParty::comment(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.AwardForParty.comment)
  return _internal_comment(index);
}
inline ::mead101::mead::TextWithFormat* AwardForParty::_internal_add_comment() {
  return comment_.Add();
}
inline ::mead101::mead::TextWithFormat* AwardForParty::add_comment() {
  // @@protoc_insertion_point(field_add:mead101.mead.AwardForParty.comment)
  return _internal_add_comment();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::TextWithFormat >&
AwardForParty::comment() const {
  // @@protoc_insertion_point(field_list:mead101.mead.AwardForParty.comment)
  return comment_;
}

// optional .mead101.mead.EventDate date = 8;
inline bool AwardForParty::_internal_has_date() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || date_ != nullptr);
  return value;
}
inline bool AwardForParty::has_date() const {
  return _internal_has_date();
}
inline void AwardForParty::clear_date() {
  if (date_ != nullptr) date_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::mead101::mead::EventDate& AwardForParty::_internal_date() const {
  const ::mead101::mead::EventDate* p = date_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::EventDate*>(
      &::mead101::mead::_EventDate_default_instance_);
}
inline const ::mead101::mead::EventDate& AwardForParty::date() const {
  // @@protoc_insertion_point(field_get:mead101.mead.AwardForParty.date)
  return _internal_date();
}
inline void AwardForParty::unsafe_arena_set_allocated_date(
    ::mead101::mead::EventDate* date) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(date_);
  }
  date_ = date;
  if (date) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.AwardForParty.date)
}
inline ::mead101::mead::EventDate* AwardForParty::release_date() {
  _has_bits_[0] &= ~0x00000040u;
  ::mead101::mead::EventDate* temp = date_;
  date_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::EventDate* AwardForParty::unsafe_arena_release_date() {
  // @@protoc_insertion_point(field_release:mead101.mead.AwardForParty.date)
  _has_bits_[0] &= ~0x00000040u;
  ::mead101::mead::EventDate* temp = date_;
  date_ = nullptr;
  return temp;
}
inline ::mead101::mead::EventDate* AwardForParty::_internal_mutable_date() {
  _has_bits_[0] |= 0x00000040u;
  if (date_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::EventDate>(GetArena());
    date_ = p;
  }
  return date_;
}
inline ::mead101::mead::EventDate* AwardForParty::mutable_date() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.AwardForParty.date)
  return _internal_mutable_date();
}
inline void AwardForParty::set_allocated_date(::mead101::mead::EventDate* date) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete date_;
  }
  if (date) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(date);
    if (message_arena != submessage_arena) {
      date = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, date, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  date_ = date;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.AwardForParty.date)
}

// optional bool is_winner = 9;
inline bool AwardForParty::_internal_has_is_winner() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool AwardForParty::has_is_winner() const {
  return _internal_has_is_winner();
}
inline void AwardForParty::clear_is_winner() {
  is_winner_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool AwardForParty::_internal_is_winner() const {
  return is_winner_;
}
inline bool AwardForParty::is_winner() const {
  // @@protoc_insertion_point(field_get:mead101.mead.AwardForParty.is_winner)
  return _internal_is_winner();
}
inline void AwardForParty::_internal_set_is_winner(bool value) {
  _has_bits_[0] |= 0x00000080u;
  is_winner_ = value;
}
inline void AwardForParty::set_is_winner(bool value) {
  _internal_set_is_winner(value);
  // @@protoc_insertion_point(field_set:mead101.mead.AwardForParty.is_winner)
}

// repeated string metadata_source_reference = 10;
inline int AwardForParty::_internal_metadata_source_reference_size() const {
  return metadata_source_reference_.size();
}
inline int AwardForParty::metadata_source_reference_size() const {
  return _internal_metadata_source_reference_size();
}
inline void AwardForParty::clear_metadata_source_reference() {
  metadata_source_reference_.Clear();
}
inline std::string* AwardForParty::add_metadata_source_reference() {
  // @@protoc_insertion_point(field_add_mutable:mead101.mead.AwardForParty.metadata_source_reference)
  return _internal_add_metadata_source_reference();
}
inline const std::string& AwardForParty::_internal_metadata_source_reference(int index) const {
  return metadata_source_reference_.Get(index);
}
inline const std::string& AwardForParty::metadata_source_reference(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.AwardForParty.metadata_source_reference)
  return _internal_metadata_source_reference(index);
}
inline std::string* AwardForParty::mutable_metadata_source_reference(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.AwardForParty.metadata_source_reference)
  return metadata_source_reference_.Mutable(index);
}
inline void AwardForParty::set_metadata_source_reference(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:mead101.mead.AwardForParty.metadata_source_reference)
  metadata_source_reference_.Mutable(index)->assign(value);
}
inline void AwardForParty::set_metadata_source_reference(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:mead101.mead.AwardForParty.metadata_source_reference)
  metadata_source_reference_.Mutable(index)->assign(std::move(value));
}
inline void AwardForParty::set_metadata_source_reference(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  metadata_source_reference_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mead101.mead.AwardForParty.metadata_source_reference)
}
inline void AwardForParty::set_metadata_source_reference(int index, const char* value, size_t size) {
  metadata_source_reference_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.AwardForParty.metadata_source_reference)
}
inline std::string* AwardForParty::_internal_add_metadata_source_reference() {
  return metadata_source_reference_.Add();
}
inline void AwardForParty::add_metadata_source_reference(const std::string& value) {
  metadata_source_reference_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mead101.mead.AwardForParty.metadata_source_reference)
}
inline void AwardForParty::add_metadata_source_reference(std::string&& value) {
  metadata_source_reference_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:mead101.mead.AwardForParty.metadata_source_reference)
}
inline void AwardForParty::add_metadata_source_reference(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  metadata_source_reference_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mead101.mead.AwardForParty.metadata_source_reference)
}
inline void AwardForParty::add_metadata_source_reference(const char* value, size_t size) {
  metadata_source_reference_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mead101.mead.AwardForParty.metadata_source_reference)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AwardForParty::metadata_source_reference() const {
  // @@protoc_insertion_point(field_list:mead101.mead.AwardForParty.metadata_source_reference)
  return metadata_source_reference_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
AwardForParty::mutable_metadata_source_reference() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.AwardForParty.metadata_source_reference)
  return &metadata_source_reference_;
}

// -------------------------------------------------------------------

// BeatsPerMinute

// repeated string metadata_source_reference = 1;
inline int BeatsPerMinute::_internal_metadata_source_reference_size() const {
  return metadata_source_reference_.size();
}
inline int BeatsPerMinute::metadata_source_reference_size() const {
  return _internal_metadata_source_reference_size();
}
inline void BeatsPerMinute::clear_metadata_source_reference() {
  metadata_source_reference_.Clear();
}
inline std::string* BeatsPerMinute::add_metadata_source_reference() {
  // @@protoc_insertion_point(field_add_mutable:mead101.mead.BeatsPerMinute.metadata_source_reference)
  return _internal_add_metadata_source_reference();
}
inline const std::string& BeatsPerMinute::_internal_metadata_source_reference(int index) const {
  return metadata_source_reference_.Get(index);
}
inline const std::string& BeatsPerMinute::metadata_source_reference(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.BeatsPerMinute.metadata_source_reference)
  return _internal_metadata_source_reference(index);
}
inline std::string* BeatsPerMinute::mutable_metadata_source_reference(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.BeatsPerMinute.metadata_source_reference)
  return metadata_source_reference_.Mutable(index);
}
inline void BeatsPerMinute::set_metadata_source_reference(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:mead101.mead.BeatsPerMinute.metadata_source_reference)
  metadata_source_reference_.Mutable(index)->assign(value);
}
inline void BeatsPerMinute::set_metadata_source_reference(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:mead101.mead.BeatsPerMinute.metadata_source_reference)
  metadata_source_reference_.Mutable(index)->assign(std::move(value));
}
inline void BeatsPerMinute::set_metadata_source_reference(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  metadata_source_reference_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mead101.mead.BeatsPerMinute.metadata_source_reference)
}
inline void BeatsPerMinute::set_metadata_source_reference(int index, const char* value, size_t size) {
  metadata_source_reference_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.BeatsPerMinute.metadata_source_reference)
}
inline std::string* BeatsPerMinute::_internal_add_metadata_source_reference() {
  return metadata_source_reference_.Add();
}
inline void BeatsPerMinute::add_metadata_source_reference(const std::string& value) {
  metadata_source_reference_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mead101.mead.BeatsPerMinute.metadata_source_reference)
}
inline void BeatsPerMinute::add_metadata_source_reference(std::string&& value) {
  metadata_source_reference_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:mead101.mead.BeatsPerMinute.metadata_source_reference)
}
inline void BeatsPerMinute::add_metadata_source_reference(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  metadata_source_reference_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mead101.mead.BeatsPerMinute.metadata_source_reference)
}
inline void BeatsPerMinute::add_metadata_source_reference(const char* value, size_t size) {
  metadata_source_reference_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mead101.mead.BeatsPerMinute.metadata_source_reference)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
BeatsPerMinute::metadata_source_reference() const {
  // @@protoc_insertion_point(field_list:mead101.mead.BeatsPerMinute.metadata_source_reference)
  return metadata_source_reference_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
BeatsPerMinute::mutable_metadata_source_reference() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.BeatsPerMinute.metadata_source_reference)
  return &metadata_source_reference_;
}

// repeated .mead101.mead.Modulation modulation = 2;
inline int BeatsPerMinute::_internal_modulation_size() const {
  return modulation_.size();
}
inline int BeatsPerMinute::modulation_size() const {
  return _internal_modulation_size();
}
inline void BeatsPerMinute::clear_modulation() {
  modulation_.Clear();
}
inline ::mead101::mead::Modulation* BeatsPerMinute::mutable_modulation(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.BeatsPerMinute.modulation)
  return modulation_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Modulation >*
BeatsPerMinute::mutable_modulation() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.BeatsPerMinute.modulation)
  return &modulation_;
}
inline const ::mead101::mead::Modulation& BeatsPerMinute::_internal_modulation(int index) const {
  return modulation_.Get(index);
}
inline const ::mead101::mead::Modulation& BeatsPerMinute::modulation(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.BeatsPerMinute.modulation)
  return _internal_modulation(index);
}
inline ::mead101::mead::Modulation* BeatsPerMinute::_internal_add_modulation() {
  return modulation_.Add();
}
inline ::mead101::mead::Modulation* BeatsPerMinute::add_modulation() {
  // @@protoc_insertion_point(field_add:mead101.mead.BeatsPerMinute.modulation)
  return _internal_add_modulation();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Modulation >&
BeatsPerMinute::modulation() const {
  // @@protoc_insertion_point(field_list:mead101.mead.BeatsPerMinute.modulation)
  return modulation_;
}

// optional double value = 3;
inline bool BeatsPerMinute::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BeatsPerMinute::has_value() const {
  return _internal_has_value();
}
inline void BeatsPerMinute::clear_value() {
  value_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double BeatsPerMinute::_internal_value() const {
  return value_;
}
inline double BeatsPerMinute::value() const {
  // @@protoc_insertion_point(field_get:mead101.mead.BeatsPerMinute.value)
  return _internal_value();
}
inline void BeatsPerMinute::_internal_set_value(double value) {
  _has_bits_[0] |= 0x00000001u;
  value_ = value;
}
inline void BeatsPerMinute::set_value(double value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:mead101.mead.BeatsPerMinute.value)
}

// -------------------------------------------------------------------

// Biography

// repeated .mead101.mead.PartyWithNames author = 1;
inline int Biography::_internal_author_size() const {
  return author_.size();
}
inline int Biography::author_size() const {
  return _internal_author_size();
}
inline void Biography::clear_author() {
  author_.Clear();
}
inline ::mead101::mead::PartyWithNames* Biography::mutable_author(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Biography.author)
  return author_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::PartyWithNames >*
Biography::mutable_author() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.Biography.author)
  return &author_;
}
inline const ::mead101::mead::PartyWithNames& Biography::_internal_author(int index) const {
  return author_.Get(index);
}
inline const ::mead101::mead::PartyWithNames& Biography::author(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.Biography.author)
  return _internal_author(index);
}
inline ::mead101::mead::PartyWithNames* Biography::_internal_add_author() {
  return author_.Add();
}
inline ::mead101::mead::PartyWithNames* Biography::add_author() {
  // @@protoc_insertion_point(field_add:mead101.mead.Biography.author)
  return _internal_add_author();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::PartyWithNames >&
Biography::author() const {
  // @@protoc_insertion_point(field_list:mead101.mead.Biography.author)
  return author_;
}

// repeated string metadata_source_reference = 2;
inline int Biography::_internal_metadata_source_reference_size() const {
  return metadata_source_reference_.size();
}
inline int Biography::metadata_source_reference_size() const {
  return _internal_metadata_source_reference_size();
}
inline void Biography::clear_metadata_source_reference() {
  metadata_source_reference_.Clear();
}
inline std::string* Biography::add_metadata_source_reference() {
  // @@protoc_insertion_point(field_add_mutable:mead101.mead.Biography.metadata_source_reference)
  return _internal_add_metadata_source_reference();
}
inline const std::string& Biography::_internal_metadata_source_reference(int index) const {
  return metadata_source_reference_.Get(index);
}
inline const std::string& Biography::metadata_source_reference(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.Biography.metadata_source_reference)
  return _internal_metadata_source_reference(index);
}
inline std::string* Biography::mutable_metadata_source_reference(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Biography.metadata_source_reference)
  return metadata_source_reference_.Mutable(index);
}
inline void Biography::set_metadata_source_reference(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:mead101.mead.Biography.metadata_source_reference)
  metadata_source_reference_.Mutable(index)->assign(value);
}
inline void Biography::set_metadata_source_reference(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:mead101.mead.Biography.metadata_source_reference)
  metadata_source_reference_.Mutable(index)->assign(std::move(value));
}
inline void Biography::set_metadata_source_reference(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  metadata_source_reference_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mead101.mead.Biography.metadata_source_reference)
}
inline void Biography::set_metadata_source_reference(int index, const char* value, size_t size) {
  metadata_source_reference_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.Biography.metadata_source_reference)
}
inline std::string* Biography::_internal_add_metadata_source_reference() {
  return metadata_source_reference_.Add();
}
inline void Biography::add_metadata_source_reference(const std::string& value) {
  metadata_source_reference_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mead101.mead.Biography.metadata_source_reference)
}
inline void Biography::add_metadata_source_reference(std::string&& value) {
  metadata_source_reference_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:mead101.mead.Biography.metadata_source_reference)
}
inline void Biography::add_metadata_source_reference(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  metadata_source_reference_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mead101.mead.Biography.metadata_source_reference)
}
inline void Biography::add_metadata_source_reference(const char* value, size_t size) {
  metadata_source_reference_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mead101.mead.Biography.metadata_source_reference)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Biography::metadata_source_reference() const {
  // @@protoc_insertion_point(field_list:mead101.mead.Biography.metadata_source_reference)
  return metadata_source_reference_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Biography::mutable_metadata_source_reference() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.Biography.metadata_source_reference)
  return &metadata_source_reference_;
}

// repeated .mead101.mead.BiographyText text = 3;
inline int Biography::_internal_text_size() const {
  return text_.size();
}
inline int Biography::text_size() const {
  return _internal_text_size();
}
inline void Biography::clear_text() {
  text_.Clear();
}
inline ::mead101::mead::BiographyText* Biography::mutable_text(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Biography.text)
  return text_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::BiographyText >*
Biography::mutable_text() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.Biography.text)
  return &text_;
}
inline const ::mead101::mead::BiographyText& Biography::_internal_text(int index) const {
  return text_.Get(index);
}
inline const ::mead101::mead::BiographyText& Biography::text(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.Biography.text)
  return _internal_text(index);
}
inline ::mead101::mead::BiographyText* Biography::_internal_add_text() {
  return text_.Add();
}
inline ::mead101::mead::BiographyText* Biography::add_text() {
  // @@protoc_insertion_point(field_add:mead101.mead.Biography.text)
  return _internal_add_text();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::BiographyText >&
Biography::text() const {
  // @@protoc_insertion_point(field_list:mead101.mead.Biography.text)
  return text_;
}

// -------------------------------------------------------------------

// BiographyText

// optional .mead101.avs.CurrentTerritoryCode applicable_territory_code = 1;
inline bool BiographyText::_internal_has_applicable_territory_code() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || applicable_territory_code_ != nullptr);
  return value;
}
inline bool BiographyText::has_applicable_territory_code() const {
  return _internal_has_applicable_territory_code();
}
inline const ::mead101::avs::CurrentTerritoryCode& BiographyText::_internal_applicable_territory_code() const {
  const ::mead101::avs::CurrentTerritoryCode* p = applicable_territory_code_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::avs::CurrentTerritoryCode*>(
      &::mead101::avs::_CurrentTerritoryCode_default_instance_);
}
inline const ::mead101::avs::CurrentTerritoryCode& BiographyText::applicable_territory_code() const {
  // @@protoc_insertion_point(field_get:mead101.mead.BiographyText.applicable_territory_code)
  return _internal_applicable_territory_code();
}
inline void BiographyText::unsafe_arena_set_allocated_applicable_territory_code(
    ::mead101::avs::CurrentTerritoryCode* applicable_territory_code) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(applicable_territory_code_);
  }
  applicable_territory_code_ = applicable_territory_code;
  if (applicable_territory_code) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.BiographyText.applicable_territory_code)
}
inline ::mead101::avs::CurrentTerritoryCode* BiographyText::release_applicable_territory_code() {
  _has_bits_[0] &= ~0x00000010u;
  ::mead101::avs::CurrentTerritoryCode* temp = applicable_territory_code_;
  applicable_territory_code_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::avs::CurrentTerritoryCode* BiographyText::unsafe_arena_release_applicable_territory_code() {
  // @@protoc_insertion_point(field_release:mead101.mead.BiographyText.applicable_territory_code)
  _has_bits_[0] &= ~0x00000010u;
  ::mead101::avs::CurrentTerritoryCode* temp = applicable_territory_code_;
  applicable_territory_code_ = nullptr;
  return temp;
}
inline ::mead101::avs::CurrentTerritoryCode* BiographyText::_internal_mutable_applicable_territory_code() {
  _has_bits_[0] |= 0x00000010u;
  if (applicable_territory_code_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::avs::CurrentTerritoryCode>(GetArena());
    applicable_territory_code_ = p;
  }
  return applicable_territory_code_;
}
inline ::mead101::avs::CurrentTerritoryCode* BiographyText::mutable_applicable_territory_code() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.BiographyText.applicable_territory_code)
  return _internal_mutable_applicable_territory_code();
}
inline void BiographyText::set_allocated_applicable_territory_code(::mead101::avs::CurrentTerritoryCode* applicable_territory_code) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(applicable_territory_code_);
  }
  if (applicable_territory_code) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(applicable_territory_code)->GetArena();
    if (message_arena != submessage_arena) {
      applicable_territory_code = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, applicable_territory_code, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  applicable_territory_code_ = applicable_territory_code;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.BiographyText.applicable_territory_code)
}

// optional .mead101.avs.TextCodecType format = 2;
inline bool BiographyText::_internal_has_format() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || format_ != nullptr);
  return value;
}
inline bool BiographyText::has_format() const {
  return _internal_has_format();
}
inline const ::mead101::avs::TextCodecType& BiographyText::_internal_format() const {
  const ::mead101::avs::TextCodecType* p = format_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::avs::TextCodecType*>(
      &::mead101::avs::_TextCodecType_default_instance_);
}
inline const ::mead101::avs::TextCodecType& BiographyText::format() const {
  // @@protoc_insertion_point(field_get:mead101.mead.BiographyText.format)
  return _internal_format();
}
inline void BiographyText::unsafe_arena_set_allocated_format(
    ::mead101::avs::TextCodecType* format) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(format_);
  }
  format_ = format;
  if (format) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.BiographyText.format)
}
inline ::mead101::avs::TextCodecType* BiographyText::release_format() {
  _has_bits_[0] &= ~0x00000020u;
  ::mead101::avs::TextCodecType* temp = format_;
  format_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::avs::TextCodecType* BiographyText::unsafe_arena_release_format() {
  // @@protoc_insertion_point(field_release:mead101.mead.BiographyText.format)
  _has_bits_[0] &= ~0x00000020u;
  ::mead101::avs::TextCodecType* temp = format_;
  format_ = nullptr;
  return temp;
}
inline ::mead101::avs::TextCodecType* BiographyText::_internal_mutable_format() {
  _has_bits_[0] |= 0x00000020u;
  if (format_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::avs::TextCodecType>(GetArena());
    format_ = p;
  }
  return format_;
}
inline ::mead101::avs::TextCodecType* BiographyText::mutable_format() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.BiographyText.format)
  return _internal_mutable_format();
}
inline void BiographyText::set_allocated_format(::mead101::avs::TextCodecType* format) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(format_);
  }
  if (format) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(format)->GetArena();
    if (message_arena != submessage_arena) {
      format = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, format, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  format_ = format;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.BiographyText.format)
}

// optional string language_and_script_code = 3;
inline bool BiographyText::_internal_has_language_and_script_code() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BiographyText::has_language_and_script_code() const {
  return _internal_has_language_and_script_code();
}
inline void BiographyText::clear_language_and_script_code() {
  language_and_script_code_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BiographyText::language_and_script_code() const {
  // @@protoc_insertion_point(field_get:mead101.mead.BiographyText.language_and_script_code)
  return _internal_language_and_script_code();
}
inline void BiographyText::set_language_and_script_code(const std::string& value) {
  _internal_set_language_and_script_code(value);
  // @@protoc_insertion_point(field_set:mead101.mead.BiographyText.language_and_script_code)
}
inline std::string* BiographyText::mutable_language_and_script_code() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.BiographyText.language_and_script_code)
  return _internal_mutable_language_and_script_code();
}
inline const std::string& BiographyText::_internal_language_and_script_code() const {
  return language_and_script_code_.Get();
}
inline void BiographyText::_internal_set_language_and_script_code(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  language_and_script_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BiographyText::set_language_and_script_code(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  language_and_script_code_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.BiographyText.language_and_script_code)
}
inline void BiographyText::set_language_and_script_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  language_and_script_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.BiographyText.language_and_script_code)
}
inline void BiographyText::set_language_and_script_code(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  language_and_script_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.BiographyText.language_and_script_code)
}
inline std::string* BiographyText::_internal_mutable_language_and_script_code() {
  _has_bits_[0] |= 0x00000001u;
  return language_and_script_code_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BiographyText::release_language_and_script_code() {
  // @@protoc_insertion_point(field_release:mead101.mead.BiographyText.language_and_script_code)
  if (!_internal_has_language_and_script_code()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return language_and_script_code_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BiographyText::set_allocated_language_and_script_code(std::string* language_and_script_code) {
  if (language_and_script_code != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  language_and_script_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), language_and_script_code,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.BiographyText.language_and_script_code)
}

// optional string namespace = 4;
inline bool BiographyText::_internal_has_namespace_() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool BiographyText::has_namespace_() const {
  return _internal_has_namespace_();
}
inline void BiographyText::clear_namespace_() {
  namespace__.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& BiographyText::namespace_() const {
  // @@protoc_insertion_point(field_get:mead101.mead.BiographyText.namespace)
  return _internal_namespace_();
}
inline void BiographyText::set_namespace_(const std::string& value) {
  _internal_set_namespace_(value);
  // @@protoc_insertion_point(field_set:mead101.mead.BiographyText.namespace)
}
inline std::string* BiographyText::mutable_namespace_() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.BiographyText.namespace)
  return _internal_mutable_namespace_();
}
inline const std::string& BiographyText::_internal_namespace_() const {
  return namespace__.Get();
}
inline void BiographyText::_internal_set_namespace_(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BiographyText::set_namespace_(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  namespace__.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.BiographyText.namespace)
}
inline void BiographyText::set_namespace_(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.BiographyText.namespace)
}
inline void BiographyText::set_namespace_(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.BiographyText.namespace)
}
inline std::string* BiographyText::_internal_mutable_namespace_() {
  _has_bits_[0] |= 0x00000002u;
  return namespace__.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BiographyText::release_namespace_() {
  // @@protoc_insertion_point(field_release:mead101.mead.BiographyText.namespace)
  if (!_internal_has_namespace_()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return namespace__.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BiographyText::set_allocated_namespace_(std::string* namespace_) {
  if (namespace_ != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  namespace__.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), namespace_,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.BiographyText.namespace)
}

// optional string user_defined_value = 5;
inline bool BiographyText::_internal_has_user_defined_value() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool BiographyText::has_user_defined_value() const {
  return _internal_has_user_defined_value();
}
inline void BiographyText::clear_user_defined_value() {
  user_defined_value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& BiographyText::user_defined_value() const {
  // @@protoc_insertion_point(field_get:mead101.mead.BiographyText.user_defined_value)
  return _internal_user_defined_value();
}
inline void BiographyText::set_user_defined_value(const std::string& value) {
  _internal_set_user_defined_value(value);
  // @@protoc_insertion_point(field_set:mead101.mead.BiographyText.user_defined_value)
}
inline std::string* BiographyText::mutable_user_defined_value() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.BiographyText.user_defined_value)
  return _internal_mutable_user_defined_value();
}
inline const std::string& BiographyText::_internal_user_defined_value() const {
  return user_defined_value_.Get();
}
inline void BiographyText::_internal_set_user_defined_value(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BiographyText::set_user_defined_value(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  user_defined_value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.BiographyText.user_defined_value)
}
inline void BiographyText::set_user_defined_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.BiographyText.user_defined_value)
}
inline void BiographyText::set_user_defined_value(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.BiographyText.user_defined_value)
}
inline std::string* BiographyText::_internal_mutable_user_defined_value() {
  _has_bits_[0] |= 0x00000004u;
  return user_defined_value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BiographyText::release_user_defined_value() {
  // @@protoc_insertion_point(field_release:mead101.mead.BiographyText.user_defined_value)
  if (!_internal_has_user_defined_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return user_defined_value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BiographyText::set_allocated_user_defined_value(std::string* user_defined_value) {
  if (user_defined_value != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  user_defined_value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_defined_value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.BiographyText.user_defined_value)
}

// optional string ext_value = 6;
inline bool BiographyText::_internal_has_ext_value() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool BiographyText::has_ext_value() const {
  return _internal_has_ext_value();
}
inline void BiographyText::clear_ext_value() {
  ext_value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& BiographyText::ext_value() const {
  // @@protoc_insertion_point(field_get:mead101.mead.BiographyText.ext_value)
  return _internal_ext_value();
}
inline void BiographyText::set_ext_value(const std::string& value) {
  _internal_set_ext_value(value);
  // @@protoc_insertion_point(field_set:mead101.mead.BiographyText.ext_value)
}
inline std::string* BiographyText::mutable_ext_value() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.BiographyText.ext_value)
  return _internal_mutable_ext_value();
}
inline const std::string& BiographyText::_internal_ext_value() const {
  return ext_value_.Get();
}
inline void BiographyText::_internal_set_ext_value(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  ext_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BiographyText::set_ext_value(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  ext_value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.BiographyText.ext_value)
}
inline void BiographyText::set_ext_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  ext_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.BiographyText.ext_value)
}
inline void BiographyText::set_ext_value(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  ext_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.BiographyText.ext_value)
}
inline std::string* BiographyText::_internal_mutable_ext_value() {
  _has_bits_[0] |= 0x00000008u;
  return ext_value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BiographyText::release_ext_value() {
  // @@protoc_insertion_point(field_release:mead101.mead.BiographyText.ext_value)
  if (!_internal_has_ext_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return ext_value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BiographyText::set_allocated_ext_value(std::string* ext_value) {
  if (ext_value != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  ext_value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ext_value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.BiographyText.ext_value)
}

// -------------------------------------------------------------------

// CatalogNumber

// optional string namespace = 1;
inline bool CatalogNumber::_internal_has_namespace_() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CatalogNumber::has_namespace_() const {
  return _internal_has_namespace_();
}
inline void CatalogNumber::clear_namespace_() {
  namespace__.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CatalogNumber::namespace_() const {
  // @@protoc_insertion_point(field_get:mead101.mead.CatalogNumber.namespace)
  return _internal_namespace_();
}
inline void CatalogNumber::set_namespace_(const std::string& value) {
  _internal_set_namespace_(value);
  // @@protoc_insertion_point(field_set:mead101.mead.CatalogNumber.namespace)
}
inline std::string* CatalogNumber::mutable_namespace_() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.CatalogNumber.namespace)
  return _internal_mutable_namespace_();
}
inline const std::string& CatalogNumber::_internal_namespace_() const {
  return namespace__.Get();
}
inline void CatalogNumber::_internal_set_namespace_(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CatalogNumber::set_namespace_(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  namespace__.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.CatalogNumber.namespace)
}
inline void CatalogNumber::set_namespace_(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.CatalogNumber.namespace)
}
inline void CatalogNumber::set_namespace_(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.CatalogNumber.namespace)
}
inline std::string* CatalogNumber::_internal_mutable_namespace_() {
  _has_bits_[0] |= 0x00000001u;
  return namespace__.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CatalogNumber::release_namespace_() {
  // @@protoc_insertion_point(field_release:mead101.mead.CatalogNumber.namespace)
  if (!_internal_has_namespace_()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return namespace__.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CatalogNumber::set_allocated_namespace_(std::string* namespace_) {
  if (namespace_ != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  namespace__.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), namespace_,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.CatalogNumber.namespace)
}

// optional string ext_value = 2;
inline bool CatalogNumber::_internal_has_ext_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CatalogNumber::has_ext_value() const {
  return _internal_has_ext_value();
}
inline void CatalogNumber::clear_ext_value() {
  ext_value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CatalogNumber::ext_value() const {
  // @@protoc_insertion_point(field_get:mead101.mead.CatalogNumber.ext_value)
  return _internal_ext_value();
}
inline void CatalogNumber::set_ext_value(const std::string& value) {
  _internal_set_ext_value(value);
  // @@protoc_insertion_point(field_set:mead101.mead.CatalogNumber.ext_value)
}
inline std::string* CatalogNumber::mutable_ext_value() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.CatalogNumber.ext_value)
  return _internal_mutable_ext_value();
}
inline const std::string& CatalogNumber::_internal_ext_value() const {
  return ext_value_.Get();
}
inline void CatalogNumber::_internal_set_ext_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  ext_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CatalogNumber::set_ext_value(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  ext_value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.CatalogNumber.ext_value)
}
inline void CatalogNumber::set_ext_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  ext_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.CatalogNumber.ext_value)
}
inline void CatalogNumber::set_ext_value(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  ext_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.CatalogNumber.ext_value)
}
inline std::string* CatalogNumber::_internal_mutable_ext_value() {
  _has_bits_[0] |= 0x00000002u;
  return ext_value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CatalogNumber::release_ext_value() {
  // @@protoc_insertion_point(field_release:mead101.mead.CatalogNumber.ext_value)
  if (!_internal_has_ext_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return ext_value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CatalogNumber::set_allocated_ext_value(std::string* ext_value) {
  if (ext_value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  ext_value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ext_value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.CatalogNumber.ext_value)
}

// -------------------------------------------------------------------

// Category

// repeated string any_attribute_value = 1;
inline int Category::_internal_any_attribute_value_size() const {
  return any_attribute_value_.size();
}
inline int Category::any_attribute_value_size() const {
  return _internal_any_attribute_value_size();
}
inline void Category::clear_any_attribute_value() {
  any_attribute_value_.Clear();
}
inline std::string* Category::add_any_attribute_value() {
  // @@protoc_insertion_point(field_add_mutable:mead101.mead.Category.any_attribute_value)
  return _internal_add_any_attribute_value();
}
inline const std::string& Category::_internal_any_attribute_value(int index) const {
  return any_attribute_value_.Get(index);
}
inline const std::string& Category::any_attribute_value(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.Category.any_attribute_value)
  return _internal_any_attribute_value(index);
}
inline std::string* Category::mutable_any_attribute_value(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Category.any_attribute_value)
  return any_attribute_value_.Mutable(index);
}
inline void Category::set_any_attribute_value(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:mead101.mead.Category.any_attribute_value)
  any_attribute_value_.Mutable(index)->assign(value);
}
inline void Category::set_any_attribute_value(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:mead101.mead.Category.any_attribute_value)
  any_attribute_value_.Mutable(index)->assign(std::move(value));
}
inline void Category::set_any_attribute_value(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  any_attribute_value_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mead101.mead.Category.any_attribute_value)
}
inline void Category::set_any_attribute_value(int index, const char* value, size_t size) {
  any_attribute_value_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.Category.any_attribute_value)
}
inline std::string* Category::_internal_add_any_attribute_value() {
  return any_attribute_value_.Add();
}
inline void Category::add_any_attribute_value(const std::string& value) {
  any_attribute_value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mead101.mead.Category.any_attribute_value)
}
inline void Category::add_any_attribute_value(std::string&& value) {
  any_attribute_value_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:mead101.mead.Category.any_attribute_value)
}
inline void Category::add_any_attribute_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  any_attribute_value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mead101.mead.Category.any_attribute_value)
}
inline void Category::add_any_attribute_value(const char* value, size_t size) {
  any_attribute_value_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mead101.mead.Category.any_attribute_value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Category::any_attribute_value() const {
  // @@protoc_insertion_point(field_list:mead101.mead.Category.any_attribute_value)
  return any_attribute_value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Category::mutable_any_attribute_value() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.Category.any_attribute_value)
  return &any_attribute_value_;
}

// optional string label = 2;
inline bool Category::_internal_has_label() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Category::has_label() const {
  return _internal_has_label();
}
inline void Category::clear_label() {
  label_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Category::label() const {
  // @@protoc_insertion_point(field_get:mead101.mead.Category.label)
  return _internal_label();
}
inline void Category::set_label(const std::string& value) {
  _internal_set_label(value);
  // @@protoc_insertion_point(field_set:mead101.mead.Category.label)
}
inline std::string* Category::mutable_label() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Category.label)
  return _internal_mutable_label();
}
inline const std::string& Category::_internal_label() const {
  return label_.Get();
}
inline void Category::_internal_set_label(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  label_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Category::set_label(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  label_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.Category.label)
}
inline void Category::set_label(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  label_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.Category.label)
}
inline void Category::set_label(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  label_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.Category.label)
}
inline std::string* Category::_internal_mutable_label() {
  _has_bits_[0] |= 0x00000001u;
  return label_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Category::release_label() {
  // @@protoc_insertion_point(field_release:mead101.mead.Category.label)
  if (!_internal_has_label()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return label_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Category::set_allocated_label(std::string* label) {
  if (label != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  label_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), label,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.Category.label)
}

// optional string scheme = 3;
inline bool Category::_internal_has_scheme() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Category::has_scheme() const {
  return _internal_has_scheme();
}
inline void Category::clear_scheme() {
  scheme_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Category::scheme() const {
  // @@protoc_insertion_point(field_get:mead101.mead.Category.scheme)
  return _internal_scheme();
}
inline void Category::set_scheme(const std::string& value) {
  _internal_set_scheme(value);
  // @@protoc_insertion_point(field_set:mead101.mead.Category.scheme)
}
inline std::string* Category::mutable_scheme() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Category.scheme)
  return _internal_mutable_scheme();
}
inline const std::string& Category::_internal_scheme() const {
  return scheme_.Get();
}
inline void Category::_internal_set_scheme(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  scheme_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Category::set_scheme(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  scheme_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.Category.scheme)
}
inline void Category::set_scheme(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  scheme_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.Category.scheme)
}
inline void Category::set_scheme(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  scheme_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.Category.scheme)
}
inline std::string* Category::_internal_mutable_scheme() {
  _has_bits_[0] |= 0x00000002u;
  return scheme_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Category::release_scheme() {
  // @@protoc_insertion_point(field_release:mead101.mead.Category.scheme)
  if (!_internal_has_scheme()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return scheme_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Category::set_allocated_scheme(std::string* scheme) {
  if (scheme != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  scheme_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), scheme,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.Category.scheme)
}

// optional string term = 4;
inline bool Category::_internal_has_term() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Category::has_term() const {
  return _internal_has_term();
}
inline void Category::clear_term() {
  term_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Category::term() const {
  // @@protoc_insertion_point(field_get:mead101.mead.Category.term)
  return _internal_term();
}
inline void Category::set_term(const std::string& value) {
  _internal_set_term(value);
  // @@protoc_insertion_point(field_set:mead101.mead.Category.term)
}
inline std::string* Category::mutable_term() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Category.term)
  return _internal_mutable_term();
}
inline const std::string& Category::_internal_term() const {
  return term_.Get();
}
inline void Category::_internal_set_term(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  term_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Category::set_term(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  term_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.Category.term)
}
inline void Category::set_term(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  term_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.Category.term)
}
inline void Category::set_term(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  term_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.Category.term)
}
inline std::string* Category::_internal_mutable_term() {
  _has_bits_[0] |= 0x00000004u;
  return term_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Category::release_term() {
  // @@protoc_insertion_point(field_release:mead101.mead.Category.term)
  if (!_internal_has_term()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return term_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Category::set_allocated_term(std::string* term) {
  if (term != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  term_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), term,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.Category.term)
}

// -------------------------------------------------------------------

// ChartEntry

// repeated .mead101.mead.TextWithFormat comment = 1;
inline int ChartEntry::_internal_comment_size() const {
  return comment_.size();
}
inline int ChartEntry::comment_size() const {
  return _internal_comment_size();
}
inline void ChartEntry::clear_comment() {
  comment_.Clear();
}
inline ::mead101::mead::TextWithFormat* ChartEntry::mutable_comment(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.ChartEntry.comment)
  return comment_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::TextWithFormat >*
ChartEntry::mutable_comment() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.ChartEntry.comment)
  return &comment_;
}
inline const ::mead101::mead::TextWithFormat& ChartEntry::_internal_comment(int index) const {
  return comment_.Get(index);
}
inline const ::mead101::mead::TextWithFormat& ChartEntry::comment(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.ChartEntry.comment)
  return _internal_comment(index);
}
inline ::mead101::mead::TextWithFormat* ChartEntry::_internal_add_comment() {
  return comment_.Add();
}
inline ::mead101::mead::TextWithFormat* ChartEntry::add_comment() {
  // @@protoc_insertion_point(field_add:mead101.mead.ChartEntry.comment)
  return _internal_add_comment();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::TextWithFormat >&
ChartEntry::comment() const {
  // @@protoc_insertion_point(field_list:mead101.mead.ChartEntry.comment)
  return comment_;
}

// optional .mead101.mead.ddex_IsoDate date = 2;
inline bool ChartEntry::_internal_has_date() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || date_ != nullptr);
  return value;
}
inline bool ChartEntry::has_date() const {
  return _internal_has_date();
}
inline void ChartEntry::clear_date() {
  if (date_ != nullptr) date_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::mead101::mead::ddex_IsoDate& ChartEntry::_internal_date() const {
  const ::mead101::mead::ddex_IsoDate* p = date_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::ddex_IsoDate*>(
      &::mead101::mead::_ddex_IsoDate_default_instance_);
}
inline const ::mead101::mead::ddex_IsoDate& ChartEntry::date() const {
  // @@protoc_insertion_point(field_get:mead101.mead.ChartEntry.date)
  return _internal_date();
}
inline void ChartEntry::unsafe_arena_set_allocated_date(
    ::mead101::mead::ddex_IsoDate* date) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(date_);
  }
  date_ = date;
  if (date) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.ChartEntry.date)
}
inline ::mead101::mead::ddex_IsoDate* ChartEntry::release_date() {
  _has_bits_[0] &= ~0x00000001u;
  ::mead101::mead::ddex_IsoDate* temp = date_;
  date_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::ddex_IsoDate* ChartEntry::unsafe_arena_release_date() {
  // @@protoc_insertion_point(field_release:mead101.mead.ChartEntry.date)
  _has_bits_[0] &= ~0x00000001u;
  ::mead101::mead::ddex_IsoDate* temp = date_;
  date_ = nullptr;
  return temp;
}
inline ::mead101::mead::ddex_IsoDate* ChartEntry::_internal_mutable_date() {
  _has_bits_[0] |= 0x00000001u;
  if (date_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::ddex_IsoDate>(GetArena());
    date_ = p;
  }
  return date_;
}
inline ::mead101::mead::ddex_IsoDate* ChartEntry::mutable_date() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.ChartEntry.date)
  return _internal_mutable_date();
}
inline void ChartEntry::set_allocated_date(::mead101::mead::ddex_IsoDate* date) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete date_;
  }
  if (date) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(date);
    if (message_arena != submessage_arena) {
      date = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, date, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  date_ = date;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.ChartEntry.date)
}

// optional .mead101.mead.Duration duration = 3;
inline bool ChartEntry::_internal_has_duration() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || duration_ != nullptr);
  return value;
}
inline bool ChartEntry::has_duration() const {
  return _internal_has_duration();
}
inline void ChartEntry::clear_duration() {
  if (duration_ != nullptr) duration_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::mead101::mead::Duration& ChartEntry::_internal_duration() const {
  const ::mead101::mead::Duration* p = duration_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::Duration*>(
      &::mead101::mead::_Duration_default_instance_);
}
inline const ::mead101::mead::Duration& ChartEntry::duration() const {
  // @@protoc_insertion_point(field_get:mead101.mead.ChartEntry.duration)
  return _internal_duration();
}
inline void ChartEntry::unsafe_arena_set_allocated_duration(
    ::mead101::mead::Duration* duration) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(duration_);
  }
  duration_ = duration;
  if (duration) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.ChartEntry.duration)
}
inline ::mead101::mead::Duration* ChartEntry::release_duration() {
  _has_bits_[0] &= ~0x00000002u;
  ::mead101::mead::Duration* temp = duration_;
  duration_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::Duration* ChartEntry::unsafe_arena_release_duration() {
  // @@protoc_insertion_point(field_release:mead101.mead.ChartEntry.duration)
  _has_bits_[0] &= ~0x00000002u;
  ::mead101::mead::Duration* temp = duration_;
  duration_ = nullptr;
  return temp;
}
inline ::mead101::mead::Duration* ChartEntry::_internal_mutable_duration() {
  _has_bits_[0] |= 0x00000002u;
  if (duration_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::Duration>(GetArena());
    duration_ = p;
  }
  return duration_;
}
inline ::mead101::mead::Duration* ChartEntry::mutable_duration() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.ChartEntry.duration)
  return _internal_mutable_duration();
}
inline void ChartEntry::set_allocated_duration(::mead101::mead::Duration* duration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete duration_;
  }
  if (duration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(duration);
    if (message_arena != submessage_arena) {
      duration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, duration, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  duration_ = duration;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.ChartEntry.duration)
}

// optional int32 position = 4;
inline bool ChartEntry::_internal_has_position() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ChartEntry::has_position() const {
  return _internal_has_position();
}
inline void ChartEntry::clear_position() {
  position_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartEntry::_internal_position() const {
  return position_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChartEntry::position() const {
  // @@protoc_insertion_point(field_get:mead101.mead.ChartEntry.position)
  return _internal_position();
}
inline void ChartEntry::_internal_set_position(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  position_ = value;
}
inline void ChartEntry::set_position(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_position(value);
  // @@protoc_insertion_point(field_set:mead101.mead.ChartEntry.position)
}

// -------------------------------------------------------------------

// ChartName

// optional string language_and_script_code = 1;
inline bool ChartName::_internal_has_language_and_script_code() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ChartName::has_language_and_script_code() const {
  return _internal_has_language_and_script_code();
}
inline void ChartName::clear_language_and_script_code() {
  language_and_script_code_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ChartName::language_and_script_code() const {
  // @@protoc_insertion_point(field_get:mead101.mead.ChartName.language_and_script_code)
  return _internal_language_and_script_code();
}
inline void ChartName::set_language_and_script_code(const std::string& value) {
  _internal_set_language_and_script_code(value);
  // @@protoc_insertion_point(field_set:mead101.mead.ChartName.language_and_script_code)
}
inline std::string* ChartName::mutable_language_and_script_code() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.ChartName.language_and_script_code)
  return _internal_mutable_language_and_script_code();
}
inline const std::string& ChartName::_internal_language_and_script_code() const {
  return language_and_script_code_.Get();
}
inline void ChartName::_internal_set_language_and_script_code(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  language_and_script_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ChartName::set_language_and_script_code(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  language_and_script_code_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.ChartName.language_and_script_code)
}
inline void ChartName::set_language_and_script_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  language_and_script_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.ChartName.language_and_script_code)
}
inline void ChartName::set_language_and_script_code(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  language_and_script_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.ChartName.language_and_script_code)
}
inline std::string* ChartName::_internal_mutable_language_and_script_code() {
  _has_bits_[0] |= 0x00000001u;
  return language_and_script_code_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ChartName::release_language_and_script_code() {
  // @@protoc_insertion_point(field_release:mead101.mead.ChartName.language_and_script_code)
  if (!_internal_has_language_and_script_code()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return language_and_script_code_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ChartName::set_allocated_language_and_script_code(std::string* language_and_script_code) {
  if (language_and_script_code != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  language_and_script_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), language_and_script_code,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.ChartName.language_and_script_code)
}

// optional string name = 2;
inline bool ChartName::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ChartName::has_name() const {
  return _internal_has_name();
}
inline void ChartName::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ChartName::name() const {
  // @@protoc_insertion_point(field_get:mead101.mead.ChartName.name)
  return _internal_name();
}
inline void ChartName::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:mead101.mead.ChartName.name)
}
inline std::string* ChartName::mutable_name() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.ChartName.name)
  return _internal_mutable_name();
}
inline const std::string& ChartName::_internal_name() const {
  return name_.Get();
}
inline void ChartName::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ChartName::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.ChartName.name)
}
inline void ChartName::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.ChartName.name)
}
inline void ChartName::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.ChartName.name)
}
inline std::string* ChartName::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000002u;
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ChartName::release_name() {
  // @@protoc_insertion_point(field_release:mead101.mead.ChartName.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ChartName::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.ChartName.name)
}

// repeated .mead101.mead.Pronunciation pronunciation = 3;
inline int ChartName::_internal_pronunciation_size() const {
  return pronunciation_.size();
}
inline int ChartName::pronunciation_size() const {
  return _internal_pronunciation_size();
}
inline void ChartName::clear_pronunciation() {
  pronunciation_.Clear();
}
inline ::mead101::mead::Pronunciation* ChartName::mutable_pronunciation(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.ChartName.pronunciation)
  return pronunciation_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Pronunciation >*
ChartName::mutable_pronunciation() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.ChartName.pronunciation)
  return &pronunciation_;
}
inline const ::mead101::mead::Pronunciation& ChartName::_internal_pronunciation(int index) const {
  return pronunciation_.Get(index);
}
inline const ::mead101::mead::Pronunciation& ChartName::pronunciation(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.ChartName.pronunciation)
  return _internal_pronunciation(index);
}
inline ::mead101::mead::Pronunciation* ChartName::_internal_add_pronunciation() {
  return pronunciation_.Add();
}
inline ::mead101::mead::Pronunciation* ChartName::add_pronunciation() {
  // @@protoc_insertion_point(field_add:mead101.mead.ChartName.pronunciation)
  return _internal_add_pronunciation();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Pronunciation >&
ChartName::pronunciation() const {
  // @@protoc_insertion_point(field_list:mead101.mead.ChartName.pronunciation)
  return pronunciation_;
}

// -------------------------------------------------------------------

// ChildWorkHierarchy

// repeated .mead101.mead.ChildWorkHierarchy child = 1;
inline int ChildWorkHierarchy::_internal_child_size() const {
  return child_.size();
}
inline int ChildWorkHierarchy::child_size() const {
  return _internal_child_size();
}
inline void ChildWorkHierarchy::clear_child() {
  child_.Clear();
}
inline ::mead101::mead::ChildWorkHierarchy* ChildWorkHierarchy::mutable_child(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.ChildWorkHierarchy.child)
  return child_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::ChildWorkHierarchy >*
ChildWorkHierarchy::mutable_child() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.ChildWorkHierarchy.child)
  return &child_;
}
inline const ::mead101::mead::ChildWorkHierarchy& ChildWorkHierarchy::_internal_child(int index) const {
  return child_.Get(index);
}
inline const ::mead101::mead::ChildWorkHierarchy& ChildWorkHierarchy::child(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.ChildWorkHierarchy.child)
  return _internal_child(index);
}
inline ::mead101::mead::ChildWorkHierarchy* ChildWorkHierarchy::_internal_add_child() {
  return child_.Add();
}
inline ::mead101::mead::ChildWorkHierarchy* ChildWorkHierarchy::add_child() {
  // @@protoc_insertion_point(field_add:mead101.mead.ChildWorkHierarchy.child)
  return _internal_add_child();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::ChildWorkHierarchy >&
ChildWorkHierarchy::child() const {
  // @@protoc_insertion_point(field_list:mead101.mead.ChildWorkHierarchy.child)
  return child_;
}

// optional .mead101.mead.Form form = 2;
inline bool ChildWorkHierarchy::_internal_has_form() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || form_ != nullptr);
  return value;
}
inline bool ChildWorkHierarchy::has_form() const {
  return _internal_has_form();
}
inline void ChildWorkHierarchy::clear_form() {
  if (form_ != nullptr) form_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::mead101::mead::Form& ChildWorkHierarchy::_internal_form() const {
  const ::mead101::mead::Form* p = form_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::Form*>(
      &::mead101::mead::_Form_default_instance_);
}
inline const ::mead101::mead::Form& ChildWorkHierarchy::form() const {
  // @@protoc_insertion_point(field_get:mead101.mead.ChildWorkHierarchy.form)
  return _internal_form();
}
inline void ChildWorkHierarchy::unsafe_arena_set_allocated_form(
    ::mead101::mead::Form* form) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(form_);
  }
  form_ = form;
  if (form) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.ChildWorkHierarchy.form)
}
inline ::mead101::mead::Form* ChildWorkHierarchy::release_form() {
  _has_bits_[0] &= ~0x00000001u;
  ::mead101::mead::Form* temp = form_;
  form_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::Form* ChildWorkHierarchy::unsafe_arena_release_form() {
  // @@protoc_insertion_point(field_release:mead101.mead.ChildWorkHierarchy.form)
  _has_bits_[0] &= ~0x00000001u;
  ::mead101::mead::Form* temp = form_;
  form_ = nullptr;
  return temp;
}
inline ::mead101::mead::Form* ChildWorkHierarchy::_internal_mutable_form() {
  _has_bits_[0] |= 0x00000001u;
  if (form_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::Form>(GetArena());
    form_ = p;
  }
  return form_;
}
inline ::mead101::mead::Form* ChildWorkHierarchy::mutable_form() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.ChildWorkHierarchy.form)
  return _internal_mutable_form();
}
inline void ChildWorkHierarchy::set_allocated_form(::mead101::mead::Form* form) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete form_;
  }
  if (form) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(form);
    if (message_arena != submessage_arena) {
      form = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, form, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  form_ = form;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.ChildWorkHierarchy.form)
}

// optional bool is_complete = 3;
inline bool ChildWorkHierarchy::_internal_has_is_complete() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ChildWorkHierarchy::has_is_complete() const {
  return _internal_has_is_complete();
}
inline void ChildWorkHierarchy::clear_is_complete() {
  is_complete_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool ChildWorkHierarchy::_internal_is_complete() const {
  return is_complete_;
}
inline bool ChildWorkHierarchy::is_complete() const {
  // @@protoc_insertion_point(field_get:mead101.mead.ChildWorkHierarchy.is_complete)
  return _internal_is_complete();
}
inline void ChildWorkHierarchy::_internal_set_is_complete(bool value) {
  _has_bits_[0] |= 0x00000004u;
  is_complete_ = value;
}
inline void ChildWorkHierarchy::set_is_complete(bool value) {
  _internal_set_is_complete(value);
  // @@protoc_insertion_point(field_set:mead101.mead.ChildWorkHierarchy.is_complete)
}

// optional bool is_described_element = 4;
inline bool ChildWorkHierarchy::_internal_has_is_described_element() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ChildWorkHierarchy::has_is_described_element() const {
  return _internal_has_is_described_element();
}
inline void ChildWorkHierarchy::clear_is_described_element() {
  is_described_element_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool ChildWorkHierarchy::_internal_is_described_element() const {
  return is_described_element_;
}
inline bool ChildWorkHierarchy::is_described_element() const {
  // @@protoc_insertion_point(field_get:mead101.mead.ChildWorkHierarchy.is_described_element)
  return _internal_is_described_element();
}
inline void ChildWorkHierarchy::_internal_set_is_described_element(bool value) {
  _has_bits_[0] |= 0x00000008u;
  is_described_element_ = value;
}
inline void ChildWorkHierarchy::set_is_described_element(bool value) {
  _internal_set_is_described_element(value);
  // @@protoc_insertion_point(field_set:mead101.mead.ChildWorkHierarchy.is_described_element)
}

// optional int32 sequence_number = 5;
inline bool ChildWorkHierarchy::_internal_has_sequence_number() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ChildWorkHierarchy::has_sequence_number() const {
  return _internal_has_sequence_number();
}
inline void ChildWorkHierarchy::clear_sequence_number() {
  sequence_number_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChildWorkHierarchy::_internal_sequence_number() const {
  return sequence_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChildWorkHierarchy::sequence_number() const {
  // @@protoc_insertion_point(field_get:mead101.mead.ChildWorkHierarchy.sequence_number)
  return _internal_sequence_number();
}
inline void ChildWorkHierarchy::_internal_set_sequence_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  sequence_number_ = value;
}
inline void ChildWorkHierarchy::set_sequence_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sequence_number(value);
  // @@protoc_insertion_point(field_set:mead101.mead.ChildWorkHierarchy.sequence_number)
}

// optional .mead101.mead.MusicalWorkId work_id = 6;
inline bool ChildWorkHierarchy::_internal_has_work_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || work_id_ != nullptr);
  return value;
}
inline bool ChildWorkHierarchy::has_work_id() const {
  return _internal_has_work_id();
}
inline void ChildWorkHierarchy::clear_work_id() {
  if (work_id_ != nullptr) work_id_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::mead101::mead::MusicalWorkId& ChildWorkHierarchy::_internal_work_id() const {
  const ::mead101::mead::MusicalWorkId* p = work_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::MusicalWorkId*>(
      &::mead101::mead::_MusicalWorkId_default_instance_);
}
inline const ::mead101::mead::MusicalWorkId& ChildWorkHierarchy::work_id() const {
  // @@protoc_insertion_point(field_get:mead101.mead.ChildWorkHierarchy.work_id)
  return _internal_work_id();
}
inline void ChildWorkHierarchy::unsafe_arena_set_allocated_work_id(
    ::mead101::mead::MusicalWorkId* work_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(work_id_);
  }
  work_id_ = work_id;
  if (work_id) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.ChildWorkHierarchy.work_id)
}
inline ::mead101::mead::MusicalWorkId* ChildWorkHierarchy::release_work_id() {
  _has_bits_[0] &= ~0x00000002u;
  ::mead101::mead::MusicalWorkId* temp = work_id_;
  work_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::MusicalWorkId* ChildWorkHierarchy::unsafe_arena_release_work_id() {
  // @@protoc_insertion_point(field_release:mead101.mead.ChildWorkHierarchy.work_id)
  _has_bits_[0] &= ~0x00000002u;
  ::mead101::mead::MusicalWorkId* temp = work_id_;
  work_id_ = nullptr;
  return temp;
}
inline ::mead101::mead::MusicalWorkId* ChildWorkHierarchy::_internal_mutable_work_id() {
  _has_bits_[0] |= 0x00000002u;
  if (work_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::MusicalWorkId>(GetArena());
    work_id_ = p;
  }
  return work_id_;
}
inline ::mead101::mead::MusicalWorkId* ChildWorkHierarchy::mutable_work_id() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.ChildWorkHierarchy.work_id)
  return _internal_mutable_work_id();
}
inline void ChildWorkHierarchy::set_allocated_work_id(::mead101::mead::MusicalWorkId* work_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete work_id_;
  }
  if (work_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(work_id);
    if (message_arena != submessage_arena) {
      work_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, work_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  work_id_ = work_id;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.ChildWorkHierarchy.work_id)
}

// repeated .mead101.mead.WorkTitle work_title = 7;
inline int ChildWorkHierarchy::_internal_work_title_size() const {
  return work_title_.size();
}
inline int ChildWorkHierarchy::work_title_size() const {
  return _internal_work_title_size();
}
inline void ChildWorkHierarchy::clear_work_title() {
  work_title_.Clear();
}
inline ::mead101::mead::WorkTitle* ChildWorkHierarchy::mutable_work_title(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.ChildWorkHierarchy.work_title)
  return work_title_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::WorkTitle >*
ChildWorkHierarchy::mutable_work_title() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.ChildWorkHierarchy.work_title)
  return &work_title_;
}
inline const ::mead101::mead::WorkTitle& ChildWorkHierarchy::_internal_work_title(int index) const {
  return work_title_.Get(index);
}
inline const ::mead101::mead::WorkTitle& ChildWorkHierarchy::work_title(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.ChildWorkHierarchy.work_title)
  return _internal_work_title(index);
}
inline ::mead101::mead::WorkTitle* ChildWorkHierarchy::_internal_add_work_title() {
  return work_title_.Add();
}
inline ::mead101::mead::WorkTitle* ChildWorkHierarchy::add_work_title() {
  // @@protoc_insertion_point(field_add:mead101.mead.ChildWorkHierarchy.work_title)
  return _internal_add_work_title();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::WorkTitle >&
ChildWorkHierarchy::work_title() const {
  // @@protoc_insertion_point(field_list:mead101.mead.ChildWorkHierarchy.work_title)
  return work_title_;
}

// -------------------------------------------------------------------

// ClassicalPeriod

// optional .mead101.avs.CurrentTerritoryCode applicable_territory_code = 1;
inline bool ClassicalPeriod::_internal_has_applicable_territory_code() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || applicable_territory_code_ != nullptr);
  return value;
}
inline bool ClassicalPeriod::has_applicable_territory_code() const {
  return _internal_has_applicable_territory_code();
}
inline const ::mead101::avs::CurrentTerritoryCode& ClassicalPeriod::_internal_applicable_territory_code() const {
  const ::mead101::avs::CurrentTerritoryCode* p = applicable_territory_code_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::avs::CurrentTerritoryCode*>(
      &::mead101::avs::_CurrentTerritoryCode_default_instance_);
}
inline const ::mead101::avs::CurrentTerritoryCode& ClassicalPeriod::applicable_territory_code() const {
  // @@protoc_insertion_point(field_get:mead101.mead.ClassicalPeriod.applicable_territory_code)
  return _internal_applicable_territory_code();
}
inline void ClassicalPeriod::unsafe_arena_set_allocated_applicable_territory_code(
    ::mead101::avs::CurrentTerritoryCode* applicable_territory_code) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(applicable_territory_code_);
  }
  applicable_territory_code_ = applicable_territory_code;
  if (applicable_territory_code) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.ClassicalPeriod.applicable_territory_code)
}
inline ::mead101::avs::CurrentTerritoryCode* ClassicalPeriod::release_applicable_territory_code() {
  _has_bits_[0] &= ~0x00000001u;
  ::mead101::avs::CurrentTerritoryCode* temp = applicable_territory_code_;
  applicable_territory_code_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::avs::CurrentTerritoryCode* ClassicalPeriod::unsafe_arena_release_applicable_territory_code() {
  // @@protoc_insertion_point(field_release:mead101.mead.ClassicalPeriod.applicable_territory_code)
  _has_bits_[0] &= ~0x00000001u;
  ::mead101::avs::CurrentTerritoryCode* temp = applicable_territory_code_;
  applicable_territory_code_ = nullptr;
  return temp;
}
inline ::mead101::avs::CurrentTerritoryCode* ClassicalPeriod::_internal_mutable_applicable_territory_code() {
  _has_bits_[0] |= 0x00000001u;
  if (applicable_territory_code_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::avs::CurrentTerritoryCode>(GetArena());
    applicable_territory_code_ = p;
  }
  return applicable_territory_code_;
}
inline ::mead101::avs::CurrentTerritoryCode* ClassicalPeriod::mutable_applicable_territory_code() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.ClassicalPeriod.applicable_territory_code)
  return _internal_mutable_applicable_territory_code();
}
inline void ClassicalPeriod::set_allocated_applicable_territory_code(::mead101::avs::CurrentTerritoryCode* applicable_territory_code) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(applicable_territory_code_);
  }
  if (applicable_territory_code) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(applicable_territory_code)->GetArena();
    if (message_arena != submessage_arena) {
      applicable_territory_code = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, applicable_territory_code, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  applicable_territory_code_ = applicable_territory_code;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.ClassicalPeriod.applicable_territory_code)
}

// repeated string metadata_source_reference = 2;
inline int ClassicalPeriod::_internal_metadata_source_reference_size() const {
  return metadata_source_reference_.size();
}
inline int ClassicalPeriod::metadata_source_reference_size() const {
  return _internal_metadata_source_reference_size();
}
inline void ClassicalPeriod::clear_metadata_source_reference() {
  metadata_source_reference_.Clear();
}
inline std::string* ClassicalPeriod::add_metadata_source_reference() {
  // @@protoc_insertion_point(field_add_mutable:mead101.mead.ClassicalPeriod.metadata_source_reference)
  return _internal_add_metadata_source_reference();
}
inline const std::string& ClassicalPeriod::_internal_metadata_source_reference(int index) const {
  return metadata_source_reference_.Get(index);
}
inline const std::string& ClassicalPeriod::metadata_source_reference(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.ClassicalPeriod.metadata_source_reference)
  return _internal_metadata_source_reference(index);
}
inline std::string* ClassicalPeriod::mutable_metadata_source_reference(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.ClassicalPeriod.metadata_source_reference)
  return metadata_source_reference_.Mutable(index);
}
inline void ClassicalPeriod::set_metadata_source_reference(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:mead101.mead.ClassicalPeriod.metadata_source_reference)
  metadata_source_reference_.Mutable(index)->assign(value);
}
inline void ClassicalPeriod::set_metadata_source_reference(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:mead101.mead.ClassicalPeriod.metadata_source_reference)
  metadata_source_reference_.Mutable(index)->assign(std::move(value));
}
inline void ClassicalPeriod::set_metadata_source_reference(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  metadata_source_reference_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mead101.mead.ClassicalPeriod.metadata_source_reference)
}
inline void ClassicalPeriod::set_metadata_source_reference(int index, const char* value, size_t size) {
  metadata_source_reference_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.ClassicalPeriod.metadata_source_reference)
}
inline std::string* ClassicalPeriod::_internal_add_metadata_source_reference() {
  return metadata_source_reference_.Add();
}
inline void ClassicalPeriod::add_metadata_source_reference(const std::string& value) {
  metadata_source_reference_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mead101.mead.ClassicalPeriod.metadata_source_reference)
}
inline void ClassicalPeriod::add_metadata_source_reference(std::string&& value) {
  metadata_source_reference_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:mead101.mead.ClassicalPeriod.metadata_source_reference)
}
inline void ClassicalPeriod::add_metadata_source_reference(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  metadata_source_reference_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mead101.mead.ClassicalPeriod.metadata_source_reference)
}
inline void ClassicalPeriod::add_metadata_source_reference(const char* value, size_t size) {
  metadata_source_reference_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mead101.mead.ClassicalPeriod.metadata_source_reference)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ClassicalPeriod::metadata_source_reference() const {
  // @@protoc_insertion_point(field_list:mead101.mead.ClassicalPeriod.metadata_source_reference)
  return metadata_source_reference_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ClassicalPeriod::mutable_metadata_source_reference() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.ClassicalPeriod.metadata_source_reference)
  return &metadata_source_reference_;
}

// optional .mead101.mead.PeriodValue name = 3;
inline bool ClassicalPeriod::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || name_ != nullptr);
  return value;
}
inline bool ClassicalPeriod::has_name() const {
  return _internal_has_name();
}
inline void ClassicalPeriod::clear_name() {
  if (name_ != nullptr) name_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::mead101::mead::PeriodValue& ClassicalPeriod::_internal_name() const {
  const ::mead101::mead::PeriodValue* p = name_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::PeriodValue*>(
      &::mead101::mead::_PeriodValue_default_instance_);
}
inline const ::mead101::mead::PeriodValue& ClassicalPeriod::name() const {
  // @@protoc_insertion_point(field_get:mead101.mead.ClassicalPeriod.name)
  return _internal_name();
}
inline void ClassicalPeriod::unsafe_arena_set_allocated_name(
    ::mead101::mead::PeriodValue* name) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(name_);
  }
  name_ = name;
  if (name) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.ClassicalPeriod.name)
}
inline ::mead101::mead::PeriodValue* ClassicalPeriod::release_name() {
  _has_bits_[0] &= ~0x00000002u;
  ::mead101::mead::PeriodValue* temp = name_;
  name_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::PeriodValue* ClassicalPeriod::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_release:mead101.mead.ClassicalPeriod.name)
  _has_bits_[0] &= ~0x00000002u;
  ::mead101::mead::PeriodValue* temp = name_;
  name_ = nullptr;
  return temp;
}
inline ::mead101::mead::PeriodValue* ClassicalPeriod::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000002u;
  if (name_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::PeriodValue>(GetArena());
    name_ = p;
  }
  return name_;
}
inline ::mead101::mead::PeriodValue* ClassicalPeriod::mutable_name() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.ClassicalPeriod.name)
  return _internal_mutable_name();
}
inline void ClassicalPeriod::set_allocated_name(::mead101::mead::PeriodValue* name) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete name_;
  }
  if (name) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(name);
    if (message_arena != submessage_arena) {
      name = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, name, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  name_ = name;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.ClassicalPeriod.name)
}

// -------------------------------------------------------------------

// CommentaryNote

// optional .mead101.avs.CurrentTerritoryCode applicable_territory_code = 1;
inline bool CommentaryNote::_internal_has_applicable_territory_code() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || applicable_territory_code_ != nullptr);
  return value;
}
inline bool CommentaryNote::has_applicable_territory_code() const {
  return _internal_has_applicable_territory_code();
}
inline const ::mead101::avs::CurrentTerritoryCode& CommentaryNote::_internal_applicable_territory_code() const {
  const ::mead101::avs::CurrentTerritoryCode* p = applicable_territory_code_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::avs::CurrentTerritoryCode*>(
      &::mead101::avs::_CurrentTerritoryCode_default_instance_);
}
inline const ::mead101::avs::CurrentTerritoryCode& CommentaryNote::applicable_territory_code() const {
  // @@protoc_insertion_point(field_get:mead101.mead.CommentaryNote.applicable_territory_code)
  return _internal_applicable_territory_code();
}
inline void CommentaryNote::unsafe_arena_set_allocated_applicable_territory_code(
    ::mead101::avs::CurrentTerritoryCode* applicable_territory_code) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(applicable_territory_code_);
  }
  applicable_territory_code_ = applicable_territory_code;
  if (applicable_territory_code) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.CommentaryNote.applicable_territory_code)
}
inline ::mead101::avs::CurrentTerritoryCode* CommentaryNote::release_applicable_territory_code() {
  _has_bits_[0] &= ~0x00000001u;
  ::mead101::avs::CurrentTerritoryCode* temp = applicable_territory_code_;
  applicable_territory_code_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::avs::CurrentTerritoryCode* CommentaryNote::unsafe_arena_release_applicable_territory_code() {
  // @@protoc_insertion_point(field_release:mead101.mead.CommentaryNote.applicable_territory_code)
  _has_bits_[0] &= ~0x00000001u;
  ::mead101::avs::CurrentTerritoryCode* temp = applicable_territory_code_;
  applicable_territory_code_ = nullptr;
  return temp;
}
inline ::mead101::avs::CurrentTerritoryCode* CommentaryNote::_internal_mutable_applicable_territory_code() {
  _has_bits_[0] |= 0x00000001u;
  if (applicable_territory_code_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::avs::CurrentTerritoryCode>(GetArena());
    applicable_territory_code_ = p;
  }
  return applicable_territory_code_;
}
inline ::mead101::avs::CurrentTerritoryCode* CommentaryNote::mutable_applicable_territory_code() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.CommentaryNote.applicable_territory_code)
  return _internal_mutable_applicable_territory_code();
}
inline void CommentaryNote::set_allocated_applicable_territory_code(::mead101::avs::CurrentTerritoryCode* applicable_territory_code) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(applicable_territory_code_);
  }
  if (applicable_territory_code) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(applicable_territory_code)->GetArena();
    if (message_arena != submessage_arena) {
      applicable_territory_code = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, applicable_territory_code, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  applicable_territory_code_ = applicable_territory_code;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.CommentaryNote.applicable_territory_code)
}

// repeated .mead101.mead.PartyWithNames author = 2;
inline int CommentaryNote::_internal_author_size() const {
  return author_.size();
}
inline int CommentaryNote::author_size() const {
  return _internal_author_size();
}
inline void CommentaryNote::clear_author() {
  author_.Clear();
}
inline ::mead101::mead::PartyWithNames* CommentaryNote::mutable_author(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.CommentaryNote.author)
  return author_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::PartyWithNames >*
CommentaryNote::mutable_author() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.CommentaryNote.author)
  return &author_;
}
inline const ::mead101::mead::PartyWithNames& CommentaryNote::_internal_author(int index) const {
  return author_.Get(index);
}
inline const ::mead101::mead::PartyWithNames& CommentaryNote::author(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.CommentaryNote.author)
  return _internal_author(index);
}
inline ::mead101::mead::PartyWithNames* CommentaryNote::_internal_add_author() {
  return author_.Add();
}
inline ::mead101::mead::PartyWithNames* CommentaryNote::add_author() {
  // @@protoc_insertion_point(field_add:mead101.mead.CommentaryNote.author)
  return _internal_add_author();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::PartyWithNames >&
CommentaryNote::author() const {
  // @@protoc_insertion_point(field_list:mead101.mead.CommentaryNote.author)
  return author_;
}

// repeated .mead101.mead.CommentaryNoteType commentary_note_type = 3;
inline int CommentaryNote::_internal_commentary_note_type_size() const {
  return commentary_note_type_.size();
}
inline int CommentaryNote::commentary_note_type_size() const {
  return _internal_commentary_note_type_size();
}
inline void CommentaryNote::clear_commentary_note_type() {
  commentary_note_type_.Clear();
}
inline ::mead101::mead::CommentaryNoteType* CommentaryNote::mutable_commentary_note_type(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.CommentaryNote.commentary_note_type)
  return commentary_note_type_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::CommentaryNoteType >*
CommentaryNote::mutable_commentary_note_type() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.CommentaryNote.commentary_note_type)
  return &commentary_note_type_;
}
inline const ::mead101::mead::CommentaryNoteType& CommentaryNote::_internal_commentary_note_type(int index) const {
  return commentary_note_type_.Get(index);
}
inline const ::mead101::mead::CommentaryNoteType& CommentaryNote::commentary_note_type(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.CommentaryNote.commentary_note_type)
  return _internal_commentary_note_type(index);
}
inline ::mead101::mead::CommentaryNoteType* CommentaryNote::_internal_add_commentary_note_type() {
  return commentary_note_type_.Add();
}
inline ::mead101::mead::CommentaryNoteType* CommentaryNote::add_commentary_note_type() {
  // @@protoc_insertion_point(field_add:mead101.mead.CommentaryNote.commentary_note_type)
  return _internal_add_commentary_note_type();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::CommentaryNoteType >&
CommentaryNote::commentary_note_type() const {
  // @@protoc_insertion_point(field_list:mead101.mead.CommentaryNote.commentary_note_type)
  return commentary_note_type_;
}

// repeated string metadata_source_reference = 4;
inline int CommentaryNote::_internal_metadata_source_reference_size() const {
  return metadata_source_reference_.size();
}
inline int CommentaryNote::metadata_source_reference_size() const {
  return _internal_metadata_source_reference_size();
}
inline void CommentaryNote::clear_metadata_source_reference() {
  metadata_source_reference_.Clear();
}
inline std::string* CommentaryNote::add_metadata_source_reference() {
  // @@protoc_insertion_point(field_add_mutable:mead101.mead.CommentaryNote.metadata_source_reference)
  return _internal_add_metadata_source_reference();
}
inline const std::string& CommentaryNote::_internal_metadata_source_reference(int index) const {
  return metadata_source_reference_.Get(index);
}
inline const std::string& CommentaryNote::metadata_source_reference(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.CommentaryNote.metadata_source_reference)
  return _internal_metadata_source_reference(index);
}
inline std::string* CommentaryNote::mutable_metadata_source_reference(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.CommentaryNote.metadata_source_reference)
  return metadata_source_reference_.Mutable(index);
}
inline void CommentaryNote::set_metadata_source_reference(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:mead101.mead.CommentaryNote.metadata_source_reference)
  metadata_source_reference_.Mutable(index)->assign(value);
}
inline void CommentaryNote::set_metadata_source_reference(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:mead101.mead.CommentaryNote.metadata_source_reference)
  metadata_source_reference_.Mutable(index)->assign(std::move(value));
}
inline void CommentaryNote::set_metadata_source_reference(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  metadata_source_reference_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mead101.mead.CommentaryNote.metadata_source_reference)
}
inline void CommentaryNote::set_metadata_source_reference(int index, const char* value, size_t size) {
  metadata_source_reference_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.CommentaryNote.metadata_source_reference)
}
inline std::string* CommentaryNote::_internal_add_metadata_source_reference() {
  return metadata_source_reference_.Add();
}
inline void CommentaryNote::add_metadata_source_reference(const std::string& value) {
  metadata_source_reference_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mead101.mead.CommentaryNote.metadata_source_reference)
}
inline void CommentaryNote::add_metadata_source_reference(std::string&& value) {
  metadata_source_reference_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:mead101.mead.CommentaryNote.metadata_source_reference)
}
inline void CommentaryNote::add_metadata_source_reference(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  metadata_source_reference_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mead101.mead.CommentaryNote.metadata_source_reference)
}
inline void CommentaryNote::add_metadata_source_reference(const char* value, size_t size) {
  metadata_source_reference_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mead101.mead.CommentaryNote.metadata_source_reference)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CommentaryNote::metadata_source_reference() const {
  // @@protoc_insertion_point(field_list:mead101.mead.CommentaryNote.metadata_source_reference)
  return metadata_source_reference_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CommentaryNote::mutable_metadata_source_reference() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.CommentaryNote.metadata_source_reference)
  return &metadata_source_reference_;
}

// repeated .mead101.mead.TextWithoutTerritory text = 5;
inline int CommentaryNote::_internal_text_size() const {
  return text_.size();
}
inline int CommentaryNote::text_size() const {
  return _internal_text_size();
}
inline void CommentaryNote::clear_text() {
  text_.Clear();
}
inline ::mead101::mead::TextWithoutTerritory* CommentaryNote::mutable_text(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.CommentaryNote.text)
  return text_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::TextWithoutTerritory >*
CommentaryNote::mutable_text() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.CommentaryNote.text)
  return &text_;
}
inline const ::mead101::mead::TextWithoutTerritory& CommentaryNote::_internal_text(int index) const {
  return text_.Get(index);
}
inline const ::mead101::mead::TextWithoutTerritory& CommentaryNote::text(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.CommentaryNote.text)
  return _internal_text(index);
}
inline ::mead101::mead::TextWithoutTerritory* CommentaryNote::_internal_add_text() {
  return text_.Add();
}
inline ::mead101::mead::TextWithoutTerritory* CommentaryNote::add_text() {
  // @@protoc_insertion_point(field_add:mead101.mead.CommentaryNote.text)
  return _internal_add_text();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::TextWithoutTerritory >&
CommentaryNote::text() const {
  // @@protoc_insertion_point(field_list:mead101.mead.CommentaryNote.text)
  return text_;
}

// -------------------------------------------------------------------

// CommentaryNoteType

// optional string namespace = 1;
inline bool CommentaryNoteType::_internal_has_namespace_() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CommentaryNoteType::has_namespace_() const {
  return _internal_has_namespace_();
}
inline void CommentaryNoteType::clear_namespace_() {
  namespace__.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CommentaryNoteType::namespace_() const {
  // @@protoc_insertion_point(field_get:mead101.mead.CommentaryNoteType.namespace)
  return _internal_namespace_();
}
inline void CommentaryNoteType::set_namespace_(const std::string& value) {
  _internal_set_namespace_(value);
  // @@protoc_insertion_point(field_set:mead101.mead.CommentaryNoteType.namespace)
}
inline std::string* CommentaryNoteType::mutable_namespace_() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.CommentaryNoteType.namespace)
  return _internal_mutable_namespace_();
}
inline const std::string& CommentaryNoteType::_internal_namespace_() const {
  return namespace__.Get();
}
inline void CommentaryNoteType::_internal_set_namespace_(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CommentaryNoteType::set_namespace_(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  namespace__.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.CommentaryNoteType.namespace)
}
inline void CommentaryNoteType::set_namespace_(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.CommentaryNoteType.namespace)
}
inline void CommentaryNoteType::set_namespace_(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.CommentaryNoteType.namespace)
}
inline std::string* CommentaryNoteType::_internal_mutable_namespace_() {
  _has_bits_[0] |= 0x00000001u;
  return namespace__.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CommentaryNoteType::release_namespace_() {
  // @@protoc_insertion_point(field_release:mead101.mead.CommentaryNoteType.namespace)
  if (!_internal_has_namespace_()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return namespace__.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CommentaryNoteType::set_allocated_namespace_(std::string* namespace_) {
  if (namespace_ != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  namespace__.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), namespace_,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.CommentaryNoteType.namespace)
}

// optional string user_defined_value = 2;
inline bool CommentaryNoteType::_internal_has_user_defined_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CommentaryNoteType::has_user_defined_value() const {
  return _internal_has_user_defined_value();
}
inline void CommentaryNoteType::clear_user_defined_value() {
  user_defined_value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CommentaryNoteType::user_defined_value() const {
  // @@protoc_insertion_point(field_get:mead101.mead.CommentaryNoteType.user_defined_value)
  return _internal_user_defined_value();
}
inline void CommentaryNoteType::set_user_defined_value(const std::string& value) {
  _internal_set_user_defined_value(value);
  // @@protoc_insertion_point(field_set:mead101.mead.CommentaryNoteType.user_defined_value)
}
inline std::string* CommentaryNoteType::mutable_user_defined_value() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.CommentaryNoteType.user_defined_value)
  return _internal_mutable_user_defined_value();
}
inline const std::string& CommentaryNoteType::_internal_user_defined_value() const {
  return user_defined_value_.Get();
}
inline void CommentaryNoteType::_internal_set_user_defined_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CommentaryNoteType::set_user_defined_value(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  user_defined_value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.CommentaryNoteType.user_defined_value)
}
inline void CommentaryNoteType::set_user_defined_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.CommentaryNoteType.user_defined_value)
}
inline void CommentaryNoteType::set_user_defined_value(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.CommentaryNoteType.user_defined_value)
}
inline std::string* CommentaryNoteType::_internal_mutable_user_defined_value() {
  _has_bits_[0] |= 0x00000002u;
  return user_defined_value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CommentaryNoteType::release_user_defined_value() {
  // @@protoc_insertion_point(field_release:mead101.mead.CommentaryNoteType.user_defined_value)
  if (!_internal_has_user_defined_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return user_defined_value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CommentaryNoteType::set_allocated_user_defined_value(std::string* user_defined_value) {
  if (user_defined_value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  user_defined_value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_defined_value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.CommentaryNoteType.user_defined_value)
}

// optional .mead101.avs.CommentaryNoteType ext_value = 3;
inline bool CommentaryNoteType::_internal_has_ext_value() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || ext_value_ != nullptr);
  return value;
}
inline bool CommentaryNoteType::has_ext_value() const {
  return _internal_has_ext_value();
}
inline const ::mead101::avs::CommentaryNoteType& CommentaryNoteType::_internal_ext_value() const {
  const ::mead101::avs::CommentaryNoteType* p = ext_value_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::avs::CommentaryNoteType*>(
      &::mead101::avs::_CommentaryNoteType_default_instance_);
}
inline const ::mead101::avs::CommentaryNoteType& CommentaryNoteType::ext_value() const {
  // @@protoc_insertion_point(field_get:mead101.mead.CommentaryNoteType.ext_value)
  return _internal_ext_value();
}
inline void CommentaryNoteType::unsafe_arena_set_allocated_ext_value(
    ::mead101::avs::CommentaryNoteType* ext_value) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext_value_);
  }
  ext_value_ = ext_value;
  if (ext_value) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.CommentaryNoteType.ext_value)
}
inline ::mead101::avs::CommentaryNoteType* CommentaryNoteType::release_ext_value() {
  _has_bits_[0] &= ~0x00000004u;
  ::mead101::avs::CommentaryNoteType* temp = ext_value_;
  ext_value_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::avs::CommentaryNoteType* CommentaryNoteType::unsafe_arena_release_ext_value() {
  // @@protoc_insertion_point(field_release:mead101.mead.CommentaryNoteType.ext_value)
  _has_bits_[0] &= ~0x00000004u;
  ::mead101::avs::CommentaryNoteType* temp = ext_value_;
  ext_value_ = nullptr;
  return temp;
}
inline ::mead101::avs::CommentaryNoteType* CommentaryNoteType::_internal_mutable_ext_value() {
  _has_bits_[0] |= 0x00000004u;
  if (ext_value_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::avs::CommentaryNoteType>(GetArena());
    ext_value_ = p;
  }
  return ext_value_;
}
inline ::mead101::avs::CommentaryNoteType* CommentaryNoteType::mutable_ext_value() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.CommentaryNoteType.ext_value)
  return _internal_mutable_ext_value();
}
inline void CommentaryNoteType::set_allocated_ext_value(::mead101::avs::CommentaryNoteType* ext_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext_value_);
  }
  if (ext_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext_value)->GetArena();
    if (message_arena != submessage_arena) {
      ext_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext_value, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  ext_value_ = ext_value;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.CommentaryNoteType.ext_value)
}

// -------------------------------------------------------------------

// Content

// repeated string any_attribute_value = 1;
inline int Content::_internal_any_attribute_value_size() const {
  return any_attribute_value_.size();
}
inline int Content::any_attribute_value_size() const {
  return _internal_any_attribute_value_size();
}
inline void Content::clear_any_attribute_value() {
  any_attribute_value_.Clear();
}
inline std::string* Content::add_any_attribute_value() {
  // @@protoc_insertion_point(field_add_mutable:mead101.mead.Content.any_attribute_value)
  return _internal_add_any_attribute_value();
}
inline const std::string& Content::_internal_any_attribute_value(int index) const {
  return any_attribute_value_.Get(index);
}
inline const std::string& Content::any_attribute_value(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.Content.any_attribute_value)
  return _internal_any_attribute_value(index);
}
inline std::string* Content::mutable_any_attribute_value(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Content.any_attribute_value)
  return any_attribute_value_.Mutable(index);
}
inline void Content::set_any_attribute_value(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:mead101.mead.Content.any_attribute_value)
  any_attribute_value_.Mutable(index)->assign(value);
}
inline void Content::set_any_attribute_value(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:mead101.mead.Content.any_attribute_value)
  any_attribute_value_.Mutable(index)->assign(std::move(value));
}
inline void Content::set_any_attribute_value(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  any_attribute_value_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mead101.mead.Content.any_attribute_value)
}
inline void Content::set_any_attribute_value(int index, const char* value, size_t size) {
  any_attribute_value_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.Content.any_attribute_value)
}
inline std::string* Content::_internal_add_any_attribute_value() {
  return any_attribute_value_.Add();
}
inline void Content::add_any_attribute_value(const std::string& value) {
  any_attribute_value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mead101.mead.Content.any_attribute_value)
}
inline void Content::add_any_attribute_value(std::string&& value) {
  any_attribute_value_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:mead101.mead.Content.any_attribute_value)
}
inline void Content::add_any_attribute_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  any_attribute_value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mead101.mead.Content.any_attribute_value)
}
inline void Content::add_any_attribute_value(const char* value, size_t size) {
  any_attribute_value_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mead101.mead.Content.any_attribute_value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Content::any_attribute_value() const {
  // @@protoc_insertion_point(field_list:mead101.mead.Content.any_attribute_value)
  return any_attribute_value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Content::mutable_any_attribute_value() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.Content.any_attribute_value)
  return &any_attribute_value_;
}

// repeated string any_value = 2;
inline int Content::_internal_any_value_size() const {
  return any_value_.size();
}
inline int Content::any_value_size() const {
  return _internal_any_value_size();
}
inline void Content::clear_any_value() {
  any_value_.Clear();
}
inline std::string* Content::add_any_value() {
  // @@protoc_insertion_point(field_add_mutable:mead101.mead.Content.any_value)
  return _internal_add_any_value();
}
inline const std::string& Content::_internal_any_value(int index) const {
  return any_value_.Get(index);
}
inline const std::string& Content::any_value(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.Content.any_value)
  return _internal_any_value(index);
}
inline std::string* Content::mutable_any_value(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Content.any_value)
  return any_value_.Mutable(index);
}
inline void Content::set_any_value(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:mead101.mead.Content.any_value)
  any_value_.Mutable(index)->assign(value);
}
inline void Content::set_any_value(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:mead101.mead.Content.any_value)
  any_value_.Mutable(index)->assign(std::move(value));
}
inline void Content::set_any_value(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  any_value_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mead101.mead.Content.any_value)
}
inline void Content::set_any_value(int index, const char* value, size_t size) {
  any_value_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.Content.any_value)
}
inline std::string* Content::_internal_add_any_value() {
  return any_value_.Add();
}
inline void Content::add_any_value(const std::string& value) {
  any_value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mead101.mead.Content.any_value)
}
inline void Content::add_any_value(std::string&& value) {
  any_value_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:mead101.mead.Content.any_value)
}
inline void Content::add_any_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  any_value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mead101.mead.Content.any_value)
}
inline void Content::add_any_value(const char* value, size_t size) {
  any_value_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mead101.mead.Content.any_value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Content::any_value() const {
  // @@protoc_insertion_point(field_list:mead101.mead.Content.any_value)
  return any_value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Content::mutable_any_value() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.Content.any_value)
  return &any_value_;
}

// optional string src = 3;
inline bool Content::_internal_has_src() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Content::has_src() const {
  return _internal_has_src();
}
inline void Content::clear_src() {
  src_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Content::src() const {
  // @@protoc_insertion_point(field_get:mead101.mead.Content.src)
  return _internal_src();
}
inline void Content::set_src(const std::string& value) {
  _internal_set_src(value);
  // @@protoc_insertion_point(field_set:mead101.mead.Content.src)
}
inline std::string* Content::mutable_src() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Content.src)
  return _internal_mutable_src();
}
inline const std::string& Content::_internal_src() const {
  return src_.Get();
}
inline void Content::_internal_set_src(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  src_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Content::set_src(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  src_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.Content.src)
}
inline void Content::set_src(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  src_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.Content.src)
}
inline void Content::set_src(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  src_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.Content.src)
}
inline std::string* Content::_internal_mutable_src() {
  _has_bits_[0] |= 0x00000001u;
  return src_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Content::release_src() {
  // @@protoc_insertion_point(field_release:mead101.mead.Content.src)
  if (!_internal_has_src()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return src_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Content::set_allocated_src(std::string* src) {
  if (src != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  src_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), src,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.Content.src)
}

// optional string type = 4;
inline bool Content::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Content::has_type() const {
  return _internal_has_type();
}
inline void Content::clear_type() {
  type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Content::type() const {
  // @@protoc_insertion_point(field_get:mead101.mead.Content.type)
  return _internal_type();
}
inline void Content::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:mead101.mead.Content.type)
}
inline std::string* Content::mutable_type() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Content.type)
  return _internal_mutable_type();
}
inline const std::string& Content::_internal_type() const {
  return type_.Get();
}
inline void Content::_internal_set_type(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Content::set_type(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.Content.type)
}
inline void Content::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.Content.type)
}
inline void Content::set_type(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.Content.type)
}
inline std::string* Content::_internal_mutable_type() {
  _has_bits_[0] |= 0x00000002u;
  return type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Content::release_type() {
  // @@protoc_insertion_point(field_release:mead101.mead.Content.type)
  if (!_internal_has_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return type_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Content::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.Content.type)
}

// -------------------------------------------------------------------

// CurrentTerritoryCode

// optional .mead101.avs.TerritoryCodeType identifier_type = 1;
inline bool CurrentTerritoryCode::_internal_has_identifier_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || identifier_type_ != nullptr);
  return value;
}
inline bool CurrentTerritoryCode::has_identifier_type() const {
  return _internal_has_identifier_type();
}
inline const ::mead101::avs::TerritoryCodeType& CurrentTerritoryCode::_internal_identifier_type() const {
  const ::mead101::avs::TerritoryCodeType* p = identifier_type_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::avs::TerritoryCodeType*>(
      &::mead101::avs::_TerritoryCodeType_default_instance_);
}
inline const ::mead101::avs::TerritoryCodeType& CurrentTerritoryCode::identifier_type() const {
  // @@protoc_insertion_point(field_get:mead101.mead.CurrentTerritoryCode.identifier_type)
  return _internal_identifier_type();
}
inline void CurrentTerritoryCode::unsafe_arena_set_allocated_identifier_type(
    ::mead101::avs::TerritoryCodeType* identifier_type) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(identifier_type_);
  }
  identifier_type_ = identifier_type;
  if (identifier_type) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.CurrentTerritoryCode.identifier_type)
}
inline ::mead101::avs::TerritoryCodeType* CurrentTerritoryCode::release_identifier_type() {
  _has_bits_[0] &= ~0x00000001u;
  ::mead101::avs::TerritoryCodeType* temp = identifier_type_;
  identifier_type_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::avs::TerritoryCodeType* CurrentTerritoryCode::unsafe_arena_release_identifier_type() {
  // @@protoc_insertion_point(field_release:mead101.mead.CurrentTerritoryCode.identifier_type)
  _has_bits_[0] &= ~0x00000001u;
  ::mead101::avs::TerritoryCodeType* temp = identifier_type_;
  identifier_type_ = nullptr;
  return temp;
}
inline ::mead101::avs::TerritoryCodeType* CurrentTerritoryCode::_internal_mutable_identifier_type() {
  _has_bits_[0] |= 0x00000001u;
  if (identifier_type_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::avs::TerritoryCodeType>(GetArena());
    identifier_type_ = p;
  }
  return identifier_type_;
}
inline ::mead101::avs::TerritoryCodeType* CurrentTerritoryCode::mutable_identifier_type() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.CurrentTerritoryCode.identifier_type)
  return _internal_mutable_identifier_type();
}
inline void CurrentTerritoryCode::set_allocated_identifier_type(::mead101::avs::TerritoryCodeType* identifier_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(identifier_type_);
  }
  if (identifier_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(identifier_type)->GetArena();
    if (message_arena != submessage_arena) {
      identifier_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, identifier_type, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  identifier_type_ = identifier_type;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.CurrentTerritoryCode.identifier_type)
}

// optional .mead101.avs.CurrentTerritoryCode ext_value = 2;
inline bool CurrentTerritoryCode::_internal_has_ext_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || ext_value_ != nullptr);
  return value;
}
inline bool CurrentTerritoryCode::has_ext_value() const {
  return _internal_has_ext_value();
}
inline const ::mead101::avs::CurrentTerritoryCode& CurrentTerritoryCode::_internal_ext_value() const {
  const ::mead101::avs::CurrentTerritoryCode* p = ext_value_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::avs::CurrentTerritoryCode*>(
      &::mead101::avs::_CurrentTerritoryCode_default_instance_);
}
inline const ::mead101::avs::CurrentTerritoryCode& CurrentTerritoryCode::ext_value() const {
  // @@protoc_insertion_point(field_get:mead101.mead.CurrentTerritoryCode.ext_value)
  return _internal_ext_value();
}
inline void CurrentTerritoryCode::unsafe_arena_set_allocated_ext_value(
    ::mead101::avs::CurrentTerritoryCode* ext_value) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext_value_);
  }
  ext_value_ = ext_value;
  if (ext_value) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.CurrentTerritoryCode.ext_value)
}
inline ::mead101::avs::CurrentTerritoryCode* CurrentTerritoryCode::release_ext_value() {
  _has_bits_[0] &= ~0x00000002u;
  ::mead101::avs::CurrentTerritoryCode* temp = ext_value_;
  ext_value_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::avs::CurrentTerritoryCode* CurrentTerritoryCode::unsafe_arena_release_ext_value() {
  // @@protoc_insertion_point(field_release:mead101.mead.CurrentTerritoryCode.ext_value)
  _has_bits_[0] &= ~0x00000002u;
  ::mead101::avs::CurrentTerritoryCode* temp = ext_value_;
  ext_value_ = nullptr;
  return temp;
}
inline ::mead101::avs::CurrentTerritoryCode* CurrentTerritoryCode::_internal_mutable_ext_value() {
  _has_bits_[0] |= 0x00000002u;
  if (ext_value_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::avs::CurrentTerritoryCode>(GetArena());
    ext_value_ = p;
  }
  return ext_value_;
}
inline ::mead101::avs::CurrentTerritoryCode* CurrentTerritoryCode::mutable_ext_value() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.CurrentTerritoryCode.ext_value)
  return _internal_mutable_ext_value();
}
inline void CurrentTerritoryCode::set_allocated_ext_value(::mead101::avs::CurrentTerritoryCode* ext_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext_value_);
  }
  if (ext_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext_value)->GetArena();
    if (message_arena != submessage_arena) {
      ext_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext_value, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  ext_value_ = ext_value;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.CurrentTerritoryCode.ext_value)
}

// -------------------------------------------------------------------

// DanceAndRhythmStyle

// optional .mead101.avs.CurrentTerritoryCode applicable_territory_code = 1;
inline bool DanceAndRhythmStyle::_internal_has_applicable_territory_code() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || applicable_territory_code_ != nullptr);
  return value;
}
inline bool DanceAndRhythmStyle::has_applicable_territory_code() const {
  return _internal_has_applicable_territory_code();
}
inline const ::mead101::avs::CurrentTerritoryCode& DanceAndRhythmStyle::_internal_applicable_territory_code() const {
  const ::mead101::avs::CurrentTerritoryCode* p = applicable_territory_code_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::avs::CurrentTerritoryCode*>(
      &::mead101::avs::_CurrentTerritoryCode_default_instance_);
}
inline const ::mead101::avs::CurrentTerritoryCode& DanceAndRhythmStyle::applicable_territory_code() const {
  // @@protoc_insertion_point(field_get:mead101.mead.DanceAndRhythmStyle.applicable_territory_code)
  return _internal_applicable_territory_code();
}
inline void DanceAndRhythmStyle::unsafe_arena_set_allocated_applicable_territory_code(
    ::mead101::avs::CurrentTerritoryCode* applicable_territory_code) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(applicable_territory_code_);
  }
  applicable_territory_code_ = applicable_territory_code;
  if (applicable_territory_code) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.DanceAndRhythmStyle.applicable_territory_code)
}
inline ::mead101::avs::CurrentTerritoryCode* DanceAndRhythmStyle::release_applicable_territory_code() {
  _has_bits_[0] &= ~0x00000001u;
  ::mead101::avs::CurrentTerritoryCode* temp = applicable_territory_code_;
  applicable_territory_code_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::avs::CurrentTerritoryCode* DanceAndRhythmStyle::unsafe_arena_release_applicable_territory_code() {
  // @@protoc_insertion_point(field_release:mead101.mead.DanceAndRhythmStyle.applicable_territory_code)
  _has_bits_[0] &= ~0x00000001u;
  ::mead101::avs::CurrentTerritoryCode* temp = applicable_territory_code_;
  applicable_territory_code_ = nullptr;
  return temp;
}
inline ::mead101::avs::CurrentTerritoryCode* DanceAndRhythmStyle::_internal_mutable_applicable_territory_code() {
  _has_bits_[0] |= 0x00000001u;
  if (applicable_territory_code_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::avs::CurrentTerritoryCode>(GetArena());
    applicable_territory_code_ = p;
  }
  return applicable_territory_code_;
}
inline ::mead101::avs::CurrentTerritoryCode* DanceAndRhythmStyle::mutable_applicable_territory_code() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.DanceAndRhythmStyle.applicable_territory_code)
  return _internal_mutable_applicable_territory_code();
}
inline void DanceAndRhythmStyle::set_allocated_applicable_territory_code(::mead101::avs::CurrentTerritoryCode* applicable_territory_code) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(applicable_territory_code_);
  }
  if (applicable_territory_code) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(applicable_territory_code)->GetArena();
    if (message_arena != submessage_arena) {
      applicable_territory_code = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, applicable_territory_code, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  applicable_territory_code_ = applicable_territory_code;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.DanceAndRhythmStyle.applicable_territory_code)
}

// repeated .mead101.mead.TextWithoutTerritory description = 2;
inline int DanceAndRhythmStyle::_internal_description_size() const {
  return description_.size();
}
inline int DanceAndRhythmStyle::description_size() const {
  return _internal_description_size();
}
inline void DanceAndRhythmStyle::clear_description() {
  description_.Clear();
}
inline ::mead101::mead::TextWithoutTerritory* DanceAndRhythmStyle::mutable_description(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.DanceAndRhythmStyle.description)
  return description_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::TextWithoutTerritory >*
DanceAndRhythmStyle::mutable_description() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.DanceAndRhythmStyle.description)
  return &description_;
}
inline const ::mead101::mead::TextWithoutTerritory& DanceAndRhythmStyle::_internal_description(int index) const {
  return description_.Get(index);
}
inline const ::mead101::mead::TextWithoutTerritory& DanceAndRhythmStyle::description(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.DanceAndRhythmStyle.description)
  return _internal_description(index);
}
inline ::mead101::mead::TextWithoutTerritory* DanceAndRhythmStyle::_internal_add_description() {
  return description_.Add();
}
inline ::mead101::mead::TextWithoutTerritory* DanceAndRhythmStyle::add_description() {
  // @@protoc_insertion_point(field_add:mead101.mead.DanceAndRhythmStyle.description)
  return _internal_add_description();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::TextWithoutTerritory >&
DanceAndRhythmStyle::description() const {
  // @@protoc_insertion_point(field_list:mead101.mead.DanceAndRhythmStyle.description)
  return description_;
}

// repeated string metadata_source_reference = 3;
inline int DanceAndRhythmStyle::_internal_metadata_source_reference_size() const {
  return metadata_source_reference_.size();
}
inline int DanceAndRhythmStyle::metadata_source_reference_size() const {
  return _internal_metadata_source_reference_size();
}
inline void DanceAndRhythmStyle::clear_metadata_source_reference() {
  metadata_source_reference_.Clear();
}
inline std::string* DanceAndRhythmStyle::add_metadata_source_reference() {
  // @@protoc_insertion_point(field_add_mutable:mead101.mead.DanceAndRhythmStyle.metadata_source_reference)
  return _internal_add_metadata_source_reference();
}
inline const std::string& DanceAndRhythmStyle::_internal_metadata_source_reference(int index) const {
  return metadata_source_reference_.Get(index);
}
inline const std::string& DanceAndRhythmStyle::metadata_source_reference(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.DanceAndRhythmStyle.metadata_source_reference)
  return _internal_metadata_source_reference(index);
}
inline std::string* DanceAndRhythmStyle::mutable_metadata_source_reference(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.DanceAndRhythmStyle.metadata_source_reference)
  return metadata_source_reference_.Mutable(index);
}
inline void DanceAndRhythmStyle::set_metadata_source_reference(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:mead101.mead.DanceAndRhythmStyle.metadata_source_reference)
  metadata_source_reference_.Mutable(index)->assign(value);
}
inline void DanceAndRhythmStyle::set_metadata_source_reference(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:mead101.mead.DanceAndRhythmStyle.metadata_source_reference)
  metadata_source_reference_.Mutable(index)->assign(std::move(value));
}
inline void DanceAndRhythmStyle::set_metadata_source_reference(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  metadata_source_reference_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mead101.mead.DanceAndRhythmStyle.metadata_source_reference)
}
inline void DanceAndRhythmStyle::set_metadata_source_reference(int index, const char* value, size_t size) {
  metadata_source_reference_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.DanceAndRhythmStyle.metadata_source_reference)
}
inline std::string* DanceAndRhythmStyle::_internal_add_metadata_source_reference() {
  return metadata_source_reference_.Add();
}
inline void DanceAndRhythmStyle::add_metadata_source_reference(const std::string& value) {
  metadata_source_reference_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mead101.mead.DanceAndRhythmStyle.metadata_source_reference)
}
inline void DanceAndRhythmStyle::add_metadata_source_reference(std::string&& value) {
  metadata_source_reference_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:mead101.mead.DanceAndRhythmStyle.metadata_source_reference)
}
inline void DanceAndRhythmStyle::add_metadata_source_reference(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  metadata_source_reference_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mead101.mead.DanceAndRhythmStyle.metadata_source_reference)
}
inline void DanceAndRhythmStyle::add_metadata_source_reference(const char* value, size_t size) {
  metadata_source_reference_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mead101.mead.DanceAndRhythmStyle.metadata_source_reference)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
DanceAndRhythmStyle::metadata_source_reference() const {
  // @@protoc_insertion_point(field_list:mead101.mead.DanceAndRhythmStyle.metadata_source_reference)
  return metadata_source_reference_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
DanceAndRhythmStyle::mutable_metadata_source_reference() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.DanceAndRhythmStyle.metadata_source_reference)
  return &metadata_source_reference_;
}

// optional .mead101.mead.DanceAndRhythmStyleValue value = 4;
inline bool DanceAndRhythmStyle::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || value_ != nullptr);
  return value;
}
inline bool DanceAndRhythmStyle::has_value() const {
  return _internal_has_value();
}
inline void DanceAndRhythmStyle::clear_value() {
  if (value_ != nullptr) value_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::mead101::mead::DanceAndRhythmStyleValue& DanceAndRhythmStyle::_internal_value() const {
  const ::mead101::mead::DanceAndRhythmStyleValue* p = value_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::DanceAndRhythmStyleValue*>(
      &::mead101::mead::_DanceAndRhythmStyleValue_default_instance_);
}
inline const ::mead101::mead::DanceAndRhythmStyleValue& DanceAndRhythmStyle::value() const {
  // @@protoc_insertion_point(field_get:mead101.mead.DanceAndRhythmStyle.value)
  return _internal_value();
}
inline void DanceAndRhythmStyle::unsafe_arena_set_allocated_value(
    ::mead101::mead::DanceAndRhythmStyleValue* value) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(value_);
  }
  value_ = value;
  if (value) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.DanceAndRhythmStyle.value)
}
inline ::mead101::mead::DanceAndRhythmStyleValue* DanceAndRhythmStyle::release_value() {
  _has_bits_[0] &= ~0x00000002u;
  ::mead101::mead::DanceAndRhythmStyleValue* temp = value_;
  value_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::DanceAndRhythmStyleValue* DanceAndRhythmStyle::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_release:mead101.mead.DanceAndRhythmStyle.value)
  _has_bits_[0] &= ~0x00000002u;
  ::mead101::mead::DanceAndRhythmStyleValue* temp = value_;
  value_ = nullptr;
  return temp;
}
inline ::mead101::mead::DanceAndRhythmStyleValue* DanceAndRhythmStyle::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000002u;
  if (value_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::DanceAndRhythmStyleValue>(GetArena());
    value_ = p;
  }
  return value_;
}
inline ::mead101::mead::DanceAndRhythmStyleValue* DanceAndRhythmStyle::mutable_value() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.DanceAndRhythmStyle.value)
  return _internal_mutable_value();
}
inline void DanceAndRhythmStyle::set_allocated_value(::mead101::mead::DanceAndRhythmStyleValue* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete value_;
  }
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(value);
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.DanceAndRhythmStyle.value)
}

// -------------------------------------------------------------------

// DanceAndRhythmStyleValue

// optional string namespace = 1;
inline bool DanceAndRhythmStyleValue::_internal_has_namespace_() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DanceAndRhythmStyleValue::has_namespace_() const {
  return _internal_has_namespace_();
}
inline void DanceAndRhythmStyleValue::clear_namespace_() {
  namespace__.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DanceAndRhythmStyleValue::namespace_() const {
  // @@protoc_insertion_point(field_get:mead101.mead.DanceAndRhythmStyleValue.namespace)
  return _internal_namespace_();
}
inline void DanceAndRhythmStyleValue::set_namespace_(const std::string& value) {
  _internal_set_namespace_(value);
  // @@protoc_insertion_point(field_set:mead101.mead.DanceAndRhythmStyleValue.namespace)
}
inline std::string* DanceAndRhythmStyleValue::mutable_namespace_() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.DanceAndRhythmStyleValue.namespace)
  return _internal_mutable_namespace_();
}
inline const std::string& DanceAndRhythmStyleValue::_internal_namespace_() const {
  return namespace__.Get();
}
inline void DanceAndRhythmStyleValue::_internal_set_namespace_(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DanceAndRhythmStyleValue::set_namespace_(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  namespace__.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.DanceAndRhythmStyleValue.namespace)
}
inline void DanceAndRhythmStyleValue::set_namespace_(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.DanceAndRhythmStyleValue.namespace)
}
inline void DanceAndRhythmStyleValue::set_namespace_(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.DanceAndRhythmStyleValue.namespace)
}
inline std::string* DanceAndRhythmStyleValue::_internal_mutable_namespace_() {
  _has_bits_[0] |= 0x00000001u;
  return namespace__.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DanceAndRhythmStyleValue::release_namespace_() {
  // @@protoc_insertion_point(field_release:mead101.mead.DanceAndRhythmStyleValue.namespace)
  if (!_internal_has_namespace_()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return namespace__.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DanceAndRhythmStyleValue::set_allocated_namespace_(std::string* namespace_) {
  if (namespace_ != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  namespace__.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), namespace_,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.DanceAndRhythmStyleValue.namespace)
}

// optional string user_defined_value = 2;
inline bool DanceAndRhythmStyleValue::_internal_has_user_defined_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DanceAndRhythmStyleValue::has_user_defined_value() const {
  return _internal_has_user_defined_value();
}
inline void DanceAndRhythmStyleValue::clear_user_defined_value() {
  user_defined_value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& DanceAndRhythmStyleValue::user_defined_value() const {
  // @@protoc_insertion_point(field_get:mead101.mead.DanceAndRhythmStyleValue.user_defined_value)
  return _internal_user_defined_value();
}
inline void DanceAndRhythmStyleValue::set_user_defined_value(const std::string& value) {
  _internal_set_user_defined_value(value);
  // @@protoc_insertion_point(field_set:mead101.mead.DanceAndRhythmStyleValue.user_defined_value)
}
inline std::string* DanceAndRhythmStyleValue::mutable_user_defined_value() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.DanceAndRhythmStyleValue.user_defined_value)
  return _internal_mutable_user_defined_value();
}
inline const std::string& DanceAndRhythmStyleValue::_internal_user_defined_value() const {
  return user_defined_value_.Get();
}
inline void DanceAndRhythmStyleValue::_internal_set_user_defined_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DanceAndRhythmStyleValue::set_user_defined_value(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  user_defined_value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.DanceAndRhythmStyleValue.user_defined_value)
}
inline void DanceAndRhythmStyleValue::set_user_defined_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.DanceAndRhythmStyleValue.user_defined_value)
}
inline void DanceAndRhythmStyleValue::set_user_defined_value(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.DanceAndRhythmStyleValue.user_defined_value)
}
inline std::string* DanceAndRhythmStyleValue::_internal_mutable_user_defined_value() {
  _has_bits_[0] |= 0x00000002u;
  return user_defined_value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DanceAndRhythmStyleValue::release_user_defined_value() {
  // @@protoc_insertion_point(field_release:mead101.mead.DanceAndRhythmStyleValue.user_defined_value)
  if (!_internal_has_user_defined_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return user_defined_value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DanceAndRhythmStyleValue::set_allocated_user_defined_value(std::string* user_defined_value) {
  if (user_defined_value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  user_defined_value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_defined_value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.DanceAndRhythmStyleValue.user_defined_value)
}

// optional .mead101.avs.DanceAndRhythmStyle ext_value = 3;
inline bool DanceAndRhythmStyleValue::_internal_has_ext_value() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || ext_value_ != nullptr);
  return value;
}
inline bool DanceAndRhythmStyleValue::has_ext_value() const {
  return _internal_has_ext_value();
}
inline const ::mead101::avs::DanceAndRhythmStyle& DanceAndRhythmStyleValue::_internal_ext_value() const {
  const ::mead101::avs::DanceAndRhythmStyle* p = ext_value_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::avs::DanceAndRhythmStyle*>(
      &::mead101::avs::_DanceAndRhythmStyle_default_instance_);
}
inline const ::mead101::avs::DanceAndRhythmStyle& DanceAndRhythmStyleValue::ext_value() const {
  // @@protoc_insertion_point(field_get:mead101.mead.DanceAndRhythmStyleValue.ext_value)
  return _internal_ext_value();
}
inline void DanceAndRhythmStyleValue::unsafe_arena_set_allocated_ext_value(
    ::mead101::avs::DanceAndRhythmStyle* ext_value) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext_value_);
  }
  ext_value_ = ext_value;
  if (ext_value) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.DanceAndRhythmStyleValue.ext_value)
}
inline ::mead101::avs::DanceAndRhythmStyle* DanceAndRhythmStyleValue::release_ext_value() {
  _has_bits_[0] &= ~0x00000004u;
  ::mead101::avs::DanceAndRhythmStyle* temp = ext_value_;
  ext_value_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::avs::DanceAndRhythmStyle* DanceAndRhythmStyleValue::unsafe_arena_release_ext_value() {
  // @@protoc_insertion_point(field_release:mead101.mead.DanceAndRhythmStyleValue.ext_value)
  _has_bits_[0] &= ~0x00000004u;
  ::mead101::avs::DanceAndRhythmStyle* temp = ext_value_;
  ext_value_ = nullptr;
  return temp;
}
inline ::mead101::avs::DanceAndRhythmStyle* DanceAndRhythmStyleValue::_internal_mutable_ext_value() {
  _has_bits_[0] |= 0x00000004u;
  if (ext_value_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::avs::DanceAndRhythmStyle>(GetArena());
    ext_value_ = p;
  }
  return ext_value_;
}
inline ::mead101::avs::DanceAndRhythmStyle* DanceAndRhythmStyleValue::mutable_ext_value() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.DanceAndRhythmStyleValue.ext_value)
  return _internal_mutable_ext_value();
}
inline void DanceAndRhythmStyleValue::set_allocated_ext_value(::mead101::avs::DanceAndRhythmStyle* ext_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext_value_);
  }
  if (ext_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext_value)->GetArena();
    if (message_arena != submessage_arena) {
      ext_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext_value, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  ext_value_ = ext_value;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.DanceAndRhythmStyleValue.ext_value)
}

// -------------------------------------------------------------------

// Date

// optional bool is_approximate = 1;
inline bool Date::_internal_has_is_approximate() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Date::has_is_approximate() const {
  return _internal_has_is_approximate();
}
inline void Date::clear_is_approximate() {
  is_approximate_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool Date::_internal_is_approximate() const {
  return is_approximate_;
}
inline bool Date::is_approximate() const {
  // @@protoc_insertion_point(field_get:mead101.mead.Date.is_approximate)
  return _internal_is_approximate();
}
inline void Date::_internal_set_is_approximate(bool value) {
  _has_bits_[0] |= 0x00000002u;
  is_approximate_ = value;
}
inline void Date::set_is_approximate(bool value) {
  _internal_set_is_approximate(value);
  // @@protoc_insertion_point(field_set:mead101.mead.Date.is_approximate)
}

// optional .mead101.mead.ddex_IsoDate ext_value = 2;
inline bool Date::_internal_has_ext_value() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || ext_value_ != nullptr);
  return value;
}
inline bool Date::has_ext_value() const {
  return _internal_has_ext_value();
}
inline void Date::clear_ext_value() {
  if (ext_value_ != nullptr) ext_value_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::mead101::mead::ddex_IsoDate& Date::_internal_ext_value() const {
  const ::mead101::mead::ddex_IsoDate* p = ext_value_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::ddex_IsoDate*>(
      &::mead101::mead::_ddex_IsoDate_default_instance_);
}
inline const ::mead101::mead::ddex_IsoDate& Date::ext_value() const {
  // @@protoc_insertion_point(field_get:mead101.mead.Date.ext_value)
  return _internal_ext_value();
}
inline void Date::unsafe_arena_set_allocated_ext_value(
    ::mead101::mead::ddex_IsoDate* ext_value) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext_value_);
  }
  ext_value_ = ext_value;
  if (ext_value) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.Date.ext_value)
}
inline ::mead101::mead::ddex_IsoDate* Date::release_ext_value() {
  _has_bits_[0] &= ~0x00000001u;
  ::mead101::mead::ddex_IsoDate* temp = ext_value_;
  ext_value_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::ddex_IsoDate* Date::unsafe_arena_release_ext_value() {
  // @@protoc_insertion_point(field_release:mead101.mead.Date.ext_value)
  _has_bits_[0] &= ~0x00000001u;
  ::mead101::mead::ddex_IsoDate* temp = ext_value_;
  ext_value_ = nullptr;
  return temp;
}
inline ::mead101::mead::ddex_IsoDate* Date::_internal_mutable_ext_value() {
  _has_bits_[0] |= 0x00000001u;
  if (ext_value_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::ddex_IsoDate>(GetArena());
    ext_value_ = p;
  }
  return ext_value_;
}
inline ::mead101::mead::ddex_IsoDate* Date::mutable_ext_value() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Date.ext_value)
  return _internal_mutable_ext_value();
}
inline void Date::set_allocated_ext_value(::mead101::mead::ddex_IsoDate* ext_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete ext_value_;
  }
  if (ext_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ext_value);
    if (message_arena != submessage_arena) {
      ext_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext_value, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  ext_value_ = ext_value;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.Date.ext_value)
}

// -------------------------------------------------------------------

// DateTime

// repeated string any_attribute_value = 1;
inline int DateTime::_internal_any_attribute_value_size() const {
  return any_attribute_value_.size();
}
inline int DateTime::any_attribute_value_size() const {
  return _internal_any_attribute_value_size();
}
inline void DateTime::clear_any_attribute_value() {
  any_attribute_value_.Clear();
}
inline std::string* DateTime::add_any_attribute_value() {
  // @@protoc_insertion_point(field_add_mutable:mead101.mead.DateTime.any_attribute_value)
  return _internal_add_any_attribute_value();
}
inline const std::string& DateTime::_internal_any_attribute_value(int index) const {
  return any_attribute_value_.Get(index);
}
inline const std::string& DateTime::any_attribute_value(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.DateTime.any_attribute_value)
  return _internal_any_attribute_value(index);
}
inline std::string* DateTime::mutable_any_attribute_value(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.DateTime.any_attribute_value)
  return any_attribute_value_.Mutable(index);
}
inline void DateTime::set_any_attribute_value(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:mead101.mead.DateTime.any_attribute_value)
  any_attribute_value_.Mutable(index)->assign(value);
}
inline void DateTime::set_any_attribute_value(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:mead101.mead.DateTime.any_attribute_value)
  any_attribute_value_.Mutable(index)->assign(std::move(value));
}
inline void DateTime::set_any_attribute_value(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  any_attribute_value_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mead101.mead.DateTime.any_attribute_value)
}
inline void DateTime::set_any_attribute_value(int index, const char* value, size_t size) {
  any_attribute_value_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.DateTime.any_attribute_value)
}
inline std::string* DateTime::_internal_add_any_attribute_value() {
  return any_attribute_value_.Add();
}
inline void DateTime::add_any_attribute_value(const std::string& value) {
  any_attribute_value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mead101.mead.DateTime.any_attribute_value)
}
inline void DateTime::add_any_attribute_value(std::string&& value) {
  any_attribute_value_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:mead101.mead.DateTime.any_attribute_value)
}
inline void DateTime::add_any_attribute_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  any_attribute_value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mead101.mead.DateTime.any_attribute_value)
}
inline void DateTime::add_any_attribute_value(const char* value, size_t size) {
  any_attribute_value_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mead101.mead.DateTime.any_attribute_value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
DateTime::any_attribute_value() const {
  // @@protoc_insertion_point(field_list:mead101.mead.DateTime.any_attribute_value)
  return any_attribute_value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
DateTime::mutable_any_attribute_value() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.DateTime.any_attribute_value)
  return &any_attribute_value_;
}

// optional string ext_value = 2;
inline bool DateTime::_internal_has_ext_value() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DateTime::has_ext_value() const {
  return _internal_has_ext_value();
}
inline void DateTime::clear_ext_value() {
  ext_value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DateTime::ext_value() const {
  // @@protoc_insertion_point(field_get:mead101.mead.DateTime.ext_value)
  return _internal_ext_value();
}
inline void DateTime::set_ext_value(const std::string& value) {
  _internal_set_ext_value(value);
  // @@protoc_insertion_point(field_set:mead101.mead.DateTime.ext_value)
}
inline std::string* DateTime::mutable_ext_value() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.DateTime.ext_value)
  return _internal_mutable_ext_value();
}
inline const std::string& DateTime::_internal_ext_value() const {
  return ext_value_.Get();
}
inline void DateTime::_internal_set_ext_value(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  ext_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DateTime::set_ext_value(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  ext_value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.DateTime.ext_value)
}
inline void DateTime::set_ext_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  ext_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.DateTime.ext_value)
}
inline void DateTime::set_ext_value(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  ext_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.DateTime.ext_value)
}
inline std::string* DateTime::_internal_mutable_ext_value() {
  _has_bits_[0] |= 0x00000001u;
  return ext_value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DateTime::release_ext_value() {
  // @@protoc_insertion_point(field_release:mead101.mead.DateTime.ext_value)
  if (!_internal_has_ext_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return ext_value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DateTime::set_allocated_ext_value(std::string* ext_value) {
  if (ext_value != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  ext_value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ext_value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.DateTime.ext_value)
}

// -------------------------------------------------------------------

// DerivedRecording

// optional .mead101.mead.DisplayArtistNameWithDefault display_artist_name = 1;
inline bool DerivedRecording::_internal_has_display_artist_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || display_artist_name_ != nullptr);
  return value;
}
inline bool DerivedRecording::has_display_artist_name() const {
  return _internal_has_display_artist_name();
}
inline void DerivedRecording::clear_display_artist_name() {
  if (display_artist_name_ != nullptr) display_artist_name_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::mead101::mead::DisplayArtistNameWithDefault& DerivedRecording::_internal_display_artist_name() const {
  const ::mead101::mead::DisplayArtistNameWithDefault* p = display_artist_name_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::DisplayArtistNameWithDefault*>(
      &::mead101::mead::_DisplayArtistNameWithDefault_default_instance_);
}
inline const ::mead101::mead::DisplayArtistNameWithDefault& DerivedRecording::display_artist_name() const {
  // @@protoc_insertion_point(field_get:mead101.mead.DerivedRecording.display_artist_name)
  return _internal_display_artist_name();
}
inline void DerivedRecording::unsafe_arena_set_allocated_display_artist_name(
    ::mead101::mead::DisplayArtistNameWithDefault* display_artist_name) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(display_artist_name_);
  }
  display_artist_name_ = display_artist_name;
  if (display_artist_name) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.DerivedRecording.display_artist_name)
}
inline ::mead101::mead::DisplayArtistNameWithDefault* DerivedRecording::release_display_artist_name() {
  _has_bits_[0] &= ~0x00000001u;
  ::mead101::mead::DisplayArtistNameWithDefault* temp = display_artist_name_;
  display_artist_name_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::DisplayArtistNameWithDefault* DerivedRecording::unsafe_arena_release_display_artist_name() {
  // @@protoc_insertion_point(field_release:mead101.mead.DerivedRecording.display_artist_name)
  _has_bits_[0] &= ~0x00000001u;
  ::mead101::mead::DisplayArtistNameWithDefault* temp = display_artist_name_;
  display_artist_name_ = nullptr;
  return temp;
}
inline ::mead101::mead::DisplayArtistNameWithDefault* DerivedRecording::_internal_mutable_display_artist_name() {
  _has_bits_[0] |= 0x00000001u;
  if (display_artist_name_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::DisplayArtistNameWithDefault>(GetArena());
    display_artist_name_ = p;
  }
  return display_artist_name_;
}
inline ::mead101::mead::DisplayArtistNameWithDefault* DerivedRecording::mutable_display_artist_name() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.DerivedRecording.display_artist_name)
  return _internal_mutable_display_artist_name();
}
inline void DerivedRecording::set_allocated_display_artist_name(::mead101::mead::DisplayArtistNameWithDefault* display_artist_name) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete display_artist_name_;
  }
  if (display_artist_name) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(display_artist_name);
    if (message_arena != submessage_arena) {
      display_artist_name = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, display_artist_name, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  display_artist_name_ = display_artist_name;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.DerivedRecording.display_artist_name)
}

// repeated string metadata_source_reference = 2;
inline int DerivedRecording::_internal_metadata_source_reference_size() const {
  return metadata_source_reference_.size();
}
inline int DerivedRecording::metadata_source_reference_size() const {
  return _internal_metadata_source_reference_size();
}
inline void DerivedRecording::clear_metadata_source_reference() {
  metadata_source_reference_.Clear();
}
inline std::string* DerivedRecording::add_metadata_source_reference() {
  // @@protoc_insertion_point(field_add_mutable:mead101.mead.DerivedRecording.metadata_source_reference)
  return _internal_add_metadata_source_reference();
}
inline const std::string& DerivedRecording::_internal_metadata_source_reference(int index) const {
  return metadata_source_reference_.Get(index);
}
inline const std::string& DerivedRecording::metadata_source_reference(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.DerivedRecording.metadata_source_reference)
  return _internal_metadata_source_reference(index);
}
inline std::string* DerivedRecording::mutable_metadata_source_reference(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.DerivedRecording.metadata_source_reference)
  return metadata_source_reference_.Mutable(index);
}
inline void DerivedRecording::set_metadata_source_reference(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:mead101.mead.DerivedRecording.metadata_source_reference)
  metadata_source_reference_.Mutable(index)->assign(value);
}
inline void DerivedRecording::set_metadata_source_reference(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:mead101.mead.DerivedRecording.metadata_source_reference)
  metadata_source_reference_.Mutable(index)->assign(std::move(value));
}
inline void DerivedRecording::set_metadata_source_reference(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  metadata_source_reference_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mead101.mead.DerivedRecording.metadata_source_reference)
}
inline void DerivedRecording::set_metadata_source_reference(int index, const char* value, size_t size) {
  metadata_source_reference_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.DerivedRecording.metadata_source_reference)
}
inline std::string* DerivedRecording::_internal_add_metadata_source_reference() {
  return metadata_source_reference_.Add();
}
inline void DerivedRecording::add_metadata_source_reference(const std::string& value) {
  metadata_source_reference_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mead101.mead.DerivedRecording.metadata_source_reference)
}
inline void DerivedRecording::add_metadata_source_reference(std::string&& value) {
  metadata_source_reference_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:mead101.mead.DerivedRecording.metadata_source_reference)
}
inline void DerivedRecording::add_metadata_source_reference(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  metadata_source_reference_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mead101.mead.DerivedRecording.metadata_source_reference)
}
inline void DerivedRecording::add_metadata_source_reference(const char* value, size_t size) {
  metadata_source_reference_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mead101.mead.DerivedRecording.metadata_source_reference)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
DerivedRecording::metadata_source_reference() const {
  // @@protoc_insertion_point(field_list:mead101.mead.DerivedRecording.metadata_source_reference)
  return metadata_source_reference_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
DerivedRecording::mutable_metadata_source_reference() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.DerivedRecording.metadata_source_reference)
  return &metadata_source_reference_;
}

// optional .mead101.mead.RelatedResourceType related_resource_type = 3;
inline bool DerivedRecording::_internal_has_related_resource_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || related_resource_type_ != nullptr);
  return value;
}
inline bool DerivedRecording::has_related_resource_type() const {
  return _internal_has_related_resource_type();
}
inline void DerivedRecording::clear_related_resource_type() {
  if (related_resource_type_ != nullptr) related_resource_type_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::mead101::mead::RelatedResourceType& DerivedRecording::_internal_related_resource_type() const {
  const ::mead101::mead::RelatedResourceType* p = related_resource_type_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::RelatedResourceType*>(
      &::mead101::mead::_RelatedResourceType_default_instance_);
}
inline const ::mead101::mead::RelatedResourceType& DerivedRecording::related_resource_type() const {
  // @@protoc_insertion_point(field_get:mead101.mead.DerivedRecording.related_resource_type)
  return _internal_related_resource_type();
}
inline void DerivedRecording::unsafe_arena_set_allocated_related_resource_type(
    ::mead101::mead::RelatedResourceType* related_resource_type) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(related_resource_type_);
  }
  related_resource_type_ = related_resource_type;
  if (related_resource_type) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.DerivedRecording.related_resource_type)
}
inline ::mead101::mead::RelatedResourceType* DerivedRecording::release_related_resource_type() {
  _has_bits_[0] &= ~0x00000002u;
  ::mead101::mead::RelatedResourceType* temp = related_resource_type_;
  related_resource_type_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::RelatedResourceType* DerivedRecording::unsafe_arena_release_related_resource_type() {
  // @@protoc_insertion_point(field_release:mead101.mead.DerivedRecording.related_resource_type)
  _has_bits_[0] &= ~0x00000002u;
  ::mead101::mead::RelatedResourceType* temp = related_resource_type_;
  related_resource_type_ = nullptr;
  return temp;
}
inline ::mead101::mead::RelatedResourceType* DerivedRecording::_internal_mutable_related_resource_type() {
  _has_bits_[0] |= 0x00000002u;
  if (related_resource_type_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::RelatedResourceType>(GetArena());
    related_resource_type_ = p;
  }
  return related_resource_type_;
}
inline ::mead101::mead::RelatedResourceType* DerivedRecording::mutable_related_resource_type() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.DerivedRecording.related_resource_type)
  return _internal_mutable_related_resource_type();
}
inline void DerivedRecording::set_allocated_related_resource_type(::mead101::mead::RelatedResourceType* related_resource_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete related_resource_type_;
  }
  if (related_resource_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(related_resource_type);
    if (message_arena != submessage_arena) {
      related_resource_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, related_resource_type, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  related_resource_type_ = related_resource_type;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.DerivedRecording.related_resource_type)
}

// optional .mead101.mead.ResourceId resource_id = 4;
inline bool DerivedRecording::_internal_has_resource_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || resource_id_ != nullptr);
  return value;
}
inline bool DerivedRecording::has_resource_id() const {
  return _internal_has_resource_id();
}
inline void DerivedRecording::clear_resource_id() {
  if (resource_id_ != nullptr) resource_id_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::mead101::mead::ResourceId& DerivedRecording::_internal_resource_id() const {
  const ::mead101::mead::ResourceId* p = resource_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::ResourceId*>(
      &::mead101::mead::_ResourceId_default_instance_);
}
inline const ::mead101::mead::ResourceId& DerivedRecording::resource_id() const {
  // @@protoc_insertion_point(field_get:mead101.mead.DerivedRecording.resource_id)
  return _internal_resource_id();
}
inline void DerivedRecording::unsafe_arena_set_allocated_resource_id(
    ::mead101::mead::ResourceId* resource_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(resource_id_);
  }
  resource_id_ = resource_id;
  if (resource_id) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.DerivedRecording.resource_id)
}
inline ::mead101::mead::ResourceId* DerivedRecording::release_resource_id() {
  _has_bits_[0] &= ~0x00000004u;
  ::mead101::mead::ResourceId* temp = resource_id_;
  resource_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::ResourceId* DerivedRecording::unsafe_arena_release_resource_id() {
  // @@protoc_insertion_point(field_release:mead101.mead.DerivedRecording.resource_id)
  _has_bits_[0] &= ~0x00000004u;
  ::mead101::mead::ResourceId* temp = resource_id_;
  resource_id_ = nullptr;
  return temp;
}
inline ::mead101::mead::ResourceId* DerivedRecording::_internal_mutable_resource_id() {
  _has_bits_[0] |= 0x00000004u;
  if (resource_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::ResourceId>(GetArena());
    resource_id_ = p;
  }
  return resource_id_;
}
inline ::mead101::mead::ResourceId* DerivedRecording::mutable_resource_id() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.DerivedRecording.resource_id)
  return _internal_mutable_resource_id();
}
inline void DerivedRecording::set_allocated_resource_id(::mead101::mead::ResourceId* resource_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete resource_id_;
  }
  if (resource_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(resource_id);
    if (message_arena != submessage_arena) {
      resource_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resource_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  resource_id_ = resource_id;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.DerivedRecording.resource_id)
}

// repeated .mead101.mead.TitleWithPronunciation title = 5;
inline int DerivedRecording::_internal_title_size() const {
  return title_.size();
}
inline int DerivedRecording::title_size() const {
  return _internal_title_size();
}
inline void DerivedRecording::clear_title() {
  title_.Clear();
}
inline ::mead101::mead::TitleWithPronunciation* DerivedRecording::mutable_title(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.DerivedRecording.title)
  return title_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::TitleWithPronunciation >*
DerivedRecording::mutable_title() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.DerivedRecording.title)
  return &title_;
}
inline const ::mead101::mead::TitleWithPronunciation& DerivedRecording::_internal_title(int index) const {
  return title_.Get(index);
}
inline const ::mead101::mead::TitleWithPronunciation& DerivedRecording::title(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.DerivedRecording.title)
  return _internal_title(index);
}
inline ::mead101::mead::TitleWithPronunciation* DerivedRecording::_internal_add_title() {
  return title_.Add();
}
inline ::mead101::mead::TitleWithPronunciation* DerivedRecording::add_title() {
  // @@protoc_insertion_point(field_add:mead101.mead.DerivedRecording.title)
  return _internal_add_title();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::TitleWithPronunciation >&
DerivedRecording::title() const {
  // @@protoc_insertion_point(field_list:mead101.mead.DerivedRecording.title)
  return title_;
}

// -------------------------------------------------------------------

// DetailedHashSum

// optional .mead101.mead.HashSumAlgorithmType algorithm = 1;
inline bool DetailedHashSum::_internal_has_algorithm() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || algorithm_ != nullptr);
  return value;
}
inline bool DetailedHashSum::has_algorithm() const {
  return _internal_has_algorithm();
}
inline void DetailedHashSum::clear_algorithm() {
  if (algorithm_ != nullptr) algorithm_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::mead101::mead::HashSumAlgorithmType& DetailedHashSum::_internal_algorithm() const {
  const ::mead101::mead::HashSumAlgorithmType* p = algorithm_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::HashSumAlgorithmType*>(
      &::mead101::mead::_HashSumAlgorithmType_default_instance_);
}
inline const ::mead101::mead::HashSumAlgorithmType& DetailedHashSum::algorithm() const {
  // @@protoc_insertion_point(field_get:mead101.mead.DetailedHashSum.algorithm)
  return _internal_algorithm();
}
inline void DetailedHashSum::unsafe_arena_set_allocated_algorithm(
    ::mead101::mead::HashSumAlgorithmType* algorithm) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(algorithm_);
  }
  algorithm_ = algorithm;
  if (algorithm) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.DetailedHashSum.algorithm)
}
inline ::mead101::mead::HashSumAlgorithmType* DetailedHashSum::release_algorithm() {
  _has_bits_[0] &= ~0x00000008u;
  ::mead101::mead::HashSumAlgorithmType* temp = algorithm_;
  algorithm_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::HashSumAlgorithmType* DetailedHashSum::unsafe_arena_release_algorithm() {
  // @@protoc_insertion_point(field_release:mead101.mead.DetailedHashSum.algorithm)
  _has_bits_[0] &= ~0x00000008u;
  ::mead101::mead::HashSumAlgorithmType* temp = algorithm_;
  algorithm_ = nullptr;
  return temp;
}
inline ::mead101::mead::HashSumAlgorithmType* DetailedHashSum::_internal_mutable_algorithm() {
  _has_bits_[0] |= 0x00000008u;
  if (algorithm_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::HashSumAlgorithmType>(GetArena());
    algorithm_ = p;
  }
  return algorithm_;
}
inline ::mead101::mead::HashSumAlgorithmType* DetailedHashSum::mutable_algorithm() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.DetailedHashSum.algorithm)
  return _internal_mutable_algorithm();
}
inline void DetailedHashSum::set_allocated_algorithm(::mead101::mead::HashSumAlgorithmType* algorithm) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete algorithm_;
  }
  if (algorithm) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(algorithm);
    if (message_arena != submessage_arena) {
      algorithm = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, algorithm, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  algorithm_ = algorithm;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.DetailedHashSum.algorithm)
}

// optional .mead101.avs.BinaryDataType data_type = 2;
inline bool DetailedHashSum::_internal_has_data_type() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || data_type_ != nullptr);
  return value;
}
inline bool DetailedHashSum::has_data_type() const {
  return _internal_has_data_type();
}
inline const ::mead101::avs::BinaryDataType& DetailedHashSum::_internal_data_type() const {
  const ::mead101::avs::BinaryDataType* p = data_type_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::avs::BinaryDataType*>(
      &::mead101::avs::_BinaryDataType_default_instance_);
}
inline const ::mead101::avs::BinaryDataType& DetailedHashSum::data_type() const {
  // @@protoc_insertion_point(field_get:mead101.mead.DetailedHashSum.data_type)
  return _internal_data_type();
}
inline void DetailedHashSum::unsafe_arena_set_allocated_data_type(
    ::mead101::avs::BinaryDataType* data_type) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_type_);
  }
  data_type_ = data_type;
  if (data_type) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.DetailedHashSum.data_type)
}
inline ::mead101::avs::BinaryDataType* DetailedHashSum::release_data_type() {
  _has_bits_[0] &= ~0x00000010u;
  ::mead101::avs::BinaryDataType* temp = data_type_;
  data_type_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::avs::BinaryDataType* DetailedHashSum::unsafe_arena_release_data_type() {
  // @@protoc_insertion_point(field_release:mead101.mead.DetailedHashSum.data_type)
  _has_bits_[0] &= ~0x00000010u;
  ::mead101::avs::BinaryDataType* temp = data_type_;
  data_type_ = nullptr;
  return temp;
}
inline ::mead101::avs::BinaryDataType* DetailedHashSum::_internal_mutable_data_type() {
  _has_bits_[0] |= 0x00000010u;
  if (data_type_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::avs::BinaryDataType>(GetArena());
    data_type_ = p;
  }
  return data_type_;
}
inline ::mead101::avs::BinaryDataType* DetailedHashSum::mutable_data_type() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.DetailedHashSum.data_type)
  return _internal_mutable_data_type();
}
inline void DetailedHashSum::set_allocated_data_type(::mead101::avs::BinaryDataType* data_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_type_);
  }
  if (data_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_type)->GetArena();
    if (message_arena != submessage_arena) {
      data_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data_type, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  data_type_ = data_type;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.DetailedHashSum.data_type)
}

// optional string hash_sum_value = 3;
inline bool DetailedHashSum::_internal_has_hash_sum_value() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DetailedHashSum::has_hash_sum_value() const {
  return _internal_has_hash_sum_value();
}
inline void DetailedHashSum::clear_hash_sum_value() {
  hash_sum_value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DetailedHashSum::hash_sum_value() const {
  // @@protoc_insertion_point(field_get:mead101.mead.DetailedHashSum.hash_sum_value)
  return _internal_hash_sum_value();
}
inline void DetailedHashSum::set_hash_sum_value(const std::string& value) {
  _internal_set_hash_sum_value(value);
  // @@protoc_insertion_point(field_set:mead101.mead.DetailedHashSum.hash_sum_value)
}
inline std::string* DetailedHashSum::mutable_hash_sum_value() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.DetailedHashSum.hash_sum_value)
  return _internal_mutable_hash_sum_value();
}
inline const std::string& DetailedHashSum::_internal_hash_sum_value() const {
  return hash_sum_value_.Get();
}
inline void DetailedHashSum::_internal_set_hash_sum_value(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  hash_sum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DetailedHashSum::set_hash_sum_value(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  hash_sum_value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.DetailedHashSum.hash_sum_value)
}
inline void DetailedHashSum::set_hash_sum_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  hash_sum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.DetailedHashSum.hash_sum_value)
}
inline void DetailedHashSum::set_hash_sum_value(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  hash_sum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.DetailedHashSum.hash_sum_value)
}
inline std::string* DetailedHashSum::_internal_mutable_hash_sum_value() {
  _has_bits_[0] |= 0x00000001u;
  return hash_sum_value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DetailedHashSum::release_hash_sum_value() {
  // @@protoc_insertion_point(field_release:mead101.mead.DetailedHashSum.hash_sum_value)
  if (!_internal_has_hash_sum_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return hash_sum_value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DetailedHashSum::set_allocated_hash_sum_value(std::string* hash_sum_value) {
  if (hash_sum_value != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  hash_sum_value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hash_sum_value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.DetailedHashSum.hash_sum_value)
}

// optional string parameter = 4;
inline bool DetailedHashSum::_internal_has_parameter() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DetailedHashSum::has_parameter() const {
  return _internal_has_parameter();
}
inline void DetailedHashSum::clear_parameter() {
  parameter_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& DetailedHashSum::parameter() const {
  // @@protoc_insertion_point(field_get:mead101.mead.DetailedHashSum.parameter)
  return _internal_parameter();
}
inline void DetailedHashSum::set_parameter(const std::string& value) {
  _internal_set_parameter(value);
  // @@protoc_insertion_point(field_set:mead101.mead.DetailedHashSum.parameter)
}
inline std::string* DetailedHashSum::mutable_parameter() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.DetailedHashSum.parameter)
  return _internal_mutable_parameter();
}
inline const std::string& DetailedHashSum::_internal_parameter() const {
  return parameter_.Get();
}
inline void DetailedHashSum::_internal_set_parameter(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  parameter_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DetailedHashSum::set_parameter(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  parameter_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.DetailedHashSum.parameter)
}
inline void DetailedHashSum::set_parameter(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  parameter_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.DetailedHashSum.parameter)
}
inline void DetailedHashSum::set_parameter(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  parameter_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.DetailedHashSum.parameter)
}
inline std::string* DetailedHashSum::_internal_mutable_parameter() {
  _has_bits_[0] |= 0x00000002u;
  return parameter_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DetailedHashSum::release_parameter() {
  // @@protoc_insertion_point(field_release:mead101.mead.DetailedHashSum.parameter)
  if (!_internal_has_parameter()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return parameter_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DetailedHashSum::set_allocated_parameter(std::string* parameter) {
  if (parameter != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  parameter_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parameter,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.DetailedHashSum.parameter)
}

// optional string version = 5;
inline bool DetailedHashSum::_internal_has_version() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DetailedHashSum::has_version() const {
  return _internal_has_version();
}
inline void DetailedHashSum::clear_version() {
  version_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& DetailedHashSum::version() const {
  // @@protoc_insertion_point(field_get:mead101.mead.DetailedHashSum.version)
  return _internal_version();
}
inline void DetailedHashSum::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:mead101.mead.DetailedHashSum.version)
}
inline std::string* DetailedHashSum::mutable_version() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.DetailedHashSum.version)
  return _internal_mutable_version();
}
inline const std::string& DetailedHashSum::_internal_version() const {
  return version_.Get();
}
inline void DetailedHashSum::_internal_set_version(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DetailedHashSum::set_version(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  version_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.DetailedHashSum.version)
}
inline void DetailedHashSum::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.DetailedHashSum.version)
}
inline void DetailedHashSum::set_version(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.DetailedHashSum.version)
}
inline std::string* DetailedHashSum::_internal_mutable_version() {
  _has_bits_[0] |= 0x00000004u;
  return version_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DetailedHashSum::release_version() {
  // @@protoc_insertion_point(field_release:mead101.mead.DetailedHashSum.version)
  if (!_internal_has_version()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return version_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DetailedHashSum::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.DetailedHashSum.version)
}

// -------------------------------------------------------------------

// DetailedPartyId

// optional string cisac_society_id = 1;
inline bool DetailedPartyId::_internal_has_cisac_society_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DetailedPartyId::has_cisac_society_id() const {
  return _internal_has_cisac_society_id();
}
inline void DetailedPartyId::clear_cisac_society_id() {
  cisac_society_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DetailedPartyId::cisac_society_id() const {
  // @@protoc_insertion_point(field_get:mead101.mead.DetailedPartyId.cisac_society_id)
  return _internal_cisac_society_id();
}
inline void DetailedPartyId::set_cisac_society_id(const std::string& value) {
  _internal_set_cisac_society_id(value);
  // @@protoc_insertion_point(field_set:mead101.mead.DetailedPartyId.cisac_society_id)
}
inline std::string* DetailedPartyId::mutable_cisac_society_id() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.DetailedPartyId.cisac_society_id)
  return _internal_mutable_cisac_society_id();
}
inline const std::string& DetailedPartyId::_internal_cisac_society_id() const {
  return cisac_society_id_.Get();
}
inline void DetailedPartyId::_internal_set_cisac_society_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  cisac_society_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DetailedPartyId::set_cisac_society_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  cisac_society_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.DetailedPartyId.cisac_society_id)
}
inline void DetailedPartyId::set_cisac_society_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  cisac_society_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.DetailedPartyId.cisac_society_id)
}
inline void DetailedPartyId::set_cisac_society_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  cisac_society_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.DetailedPartyId.cisac_society_id)
}
inline std::string* DetailedPartyId::_internal_mutable_cisac_society_id() {
  _has_bits_[0] |= 0x00000001u;
  return cisac_society_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DetailedPartyId::release_cisac_society_id() {
  // @@protoc_insertion_point(field_release:mead101.mead.DetailedPartyId.cisac_society_id)
  if (!_internal_has_cisac_society_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return cisac_society_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DetailedPartyId::set_allocated_cisac_society_id(std::string* cisac_society_id) {
  if (cisac_society_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  cisac_society_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cisac_society_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.DetailedPartyId.cisac_society_id)
}

// optional string d_p_i_d = 2;
inline bool DetailedPartyId::_internal_has_d_p_i_d() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DetailedPartyId::has_d_p_i_d() const {
  return _internal_has_d_p_i_d();
}
inline void DetailedPartyId::clear_d_p_i_d() {
  d_p_i_d_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& DetailedPartyId::d_p_i_d() const {
  // @@protoc_insertion_point(field_get:mead101.mead.DetailedPartyId.d_p_i_d)
  return _internal_d_p_i_d();
}
inline void DetailedPartyId::set_d_p_i_d(const std::string& value) {
  _internal_set_d_p_i_d(value);
  // @@protoc_insertion_point(field_set:mead101.mead.DetailedPartyId.d_p_i_d)
}
inline std::string* DetailedPartyId::mutable_d_p_i_d() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.DetailedPartyId.d_p_i_d)
  return _internal_mutable_d_p_i_d();
}
inline const std::string& DetailedPartyId::_internal_d_p_i_d() const {
  return d_p_i_d_.Get();
}
inline void DetailedPartyId::_internal_set_d_p_i_d(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  d_p_i_d_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DetailedPartyId::set_d_p_i_d(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  d_p_i_d_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.DetailedPartyId.d_p_i_d)
}
inline void DetailedPartyId::set_d_p_i_d(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  d_p_i_d_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.DetailedPartyId.d_p_i_d)
}
inline void DetailedPartyId::set_d_p_i_d(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  d_p_i_d_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.DetailedPartyId.d_p_i_d)
}
inline std::string* DetailedPartyId::_internal_mutable_d_p_i_d() {
  _has_bits_[0] |= 0x00000002u;
  return d_p_i_d_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DetailedPartyId::release_d_p_i_d() {
  // @@protoc_insertion_point(field_release:mead101.mead.DetailedPartyId.d_p_i_d)
  if (!_internal_has_d_p_i_d()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return d_p_i_d_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DetailedPartyId::set_allocated_d_p_i_d(std::string* d_p_i_d) {
  if (d_p_i_d != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  d_p_i_d_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), d_p_i_d,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.DetailedPartyId.d_p_i_d)
}

// optional string i_p_n = 3;
inline bool DetailedPartyId::_internal_has_i_p_n() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DetailedPartyId::has_i_p_n() const {
  return _internal_has_i_p_n();
}
inline void DetailedPartyId::clear_i_p_n() {
  i_p_n_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& DetailedPartyId::i_p_n() const {
  // @@protoc_insertion_point(field_get:mead101.mead.DetailedPartyId.i_p_n)
  return _internal_i_p_n();
}
inline void DetailedPartyId::set_i_p_n(const std::string& value) {
  _internal_set_i_p_n(value);
  // @@protoc_insertion_point(field_set:mead101.mead.DetailedPartyId.i_p_n)
}
inline std::string* DetailedPartyId::mutable_i_p_n() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.DetailedPartyId.i_p_n)
  return _internal_mutable_i_p_n();
}
inline const std::string& DetailedPartyId::_internal_i_p_n() const {
  return i_p_n_.Get();
}
inline void DetailedPartyId::_internal_set_i_p_n(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  i_p_n_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DetailedPartyId::set_i_p_n(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  i_p_n_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.DetailedPartyId.i_p_n)
}
inline void DetailedPartyId::set_i_p_n(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  i_p_n_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.DetailedPartyId.i_p_n)
}
inline void DetailedPartyId::set_i_p_n(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  i_p_n_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.DetailedPartyId.i_p_n)
}
inline std::string* DetailedPartyId::_internal_mutable_i_p_n() {
  _has_bits_[0] |= 0x00000004u;
  return i_p_n_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DetailedPartyId::release_i_p_n() {
  // @@protoc_insertion_point(field_release:mead101.mead.DetailedPartyId.i_p_n)
  if (!_internal_has_i_p_n()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return i_p_n_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DetailedPartyId::set_allocated_i_p_n(std::string* i_p_n) {
  if (i_p_n != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  i_p_n_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), i_p_n,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.DetailedPartyId.i_p_n)
}

// optional string i_s_n_i = 4;
inline bool DetailedPartyId::_internal_has_i_s_n_i() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool DetailedPartyId::has_i_s_n_i() const {
  return _internal_has_i_s_n_i();
}
inline void DetailedPartyId::clear_i_s_n_i() {
  i_s_n_i_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& DetailedPartyId::i_s_n_i() const {
  // @@protoc_insertion_point(field_get:mead101.mead.DetailedPartyId.i_s_n_i)
  return _internal_i_s_n_i();
}
inline void DetailedPartyId::set_i_s_n_i(const std::string& value) {
  _internal_set_i_s_n_i(value);
  // @@protoc_insertion_point(field_set:mead101.mead.DetailedPartyId.i_s_n_i)
}
inline std::string* DetailedPartyId::mutable_i_s_n_i() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.DetailedPartyId.i_s_n_i)
  return _internal_mutable_i_s_n_i();
}
inline const std::string& DetailedPartyId::_internal_i_s_n_i() const {
  return i_s_n_i_.Get();
}
inline void DetailedPartyId::_internal_set_i_s_n_i(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  i_s_n_i_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DetailedPartyId::set_i_s_n_i(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  i_s_n_i_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.DetailedPartyId.i_s_n_i)
}
inline void DetailedPartyId::set_i_s_n_i(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  i_s_n_i_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.DetailedPartyId.i_s_n_i)
}
inline void DetailedPartyId::set_i_s_n_i(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  i_s_n_i_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.DetailedPartyId.i_s_n_i)
}
inline std::string* DetailedPartyId::_internal_mutable_i_s_n_i() {
  _has_bits_[0] |= 0x00000008u;
  return i_s_n_i_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DetailedPartyId::release_i_s_n_i() {
  // @@protoc_insertion_point(field_release:mead101.mead.DetailedPartyId.i_s_n_i)
  if (!_internal_has_i_s_n_i()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return i_s_n_i_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DetailedPartyId::set_allocated_i_s_n_i(std::string* i_s_n_i) {
  if (i_s_n_i != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  i_s_n_i_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), i_s_n_i,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.DetailedPartyId.i_s_n_i)
}

// optional string ipi_name_number = 5;
inline bool DetailedPartyId::_internal_has_ipi_name_number() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool DetailedPartyId::has_ipi_name_number() const {
  return _internal_has_ipi_name_number();
}
inline void DetailedPartyId::clear_ipi_name_number() {
  ipi_name_number_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& DetailedPartyId::ipi_name_number() const {
  // @@protoc_insertion_point(field_get:mead101.mead.DetailedPartyId.ipi_name_number)
  return _internal_ipi_name_number();
}
inline void DetailedPartyId::set_ipi_name_number(const std::string& value) {
  _internal_set_ipi_name_number(value);
  // @@protoc_insertion_point(field_set:mead101.mead.DetailedPartyId.ipi_name_number)
}
inline std::string* DetailedPartyId::mutable_ipi_name_number() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.DetailedPartyId.ipi_name_number)
  return _internal_mutable_ipi_name_number();
}
inline const std::string& DetailedPartyId::_internal_ipi_name_number() const {
  return ipi_name_number_.Get();
}
inline void DetailedPartyId::_internal_set_ipi_name_number(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  ipi_name_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DetailedPartyId::set_ipi_name_number(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  ipi_name_number_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.DetailedPartyId.ipi_name_number)
}
inline void DetailedPartyId::set_ipi_name_number(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  ipi_name_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.DetailedPartyId.ipi_name_number)
}
inline void DetailedPartyId::set_ipi_name_number(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  ipi_name_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.DetailedPartyId.ipi_name_number)
}
inline std::string* DetailedPartyId::_internal_mutable_ipi_name_number() {
  _has_bits_[0] |= 0x00000010u;
  return ipi_name_number_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DetailedPartyId::release_ipi_name_number() {
  // @@protoc_insertion_point(field_release:mead101.mead.DetailedPartyId.ipi_name_number)
  if (!_internal_has_ipi_name_number()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return ipi_name_number_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DetailedPartyId::set_allocated_ipi_name_number(std::string* ipi_name_number) {
  if (ipi_name_number != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  ipi_name_number_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ipi_name_number,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.DetailedPartyId.ipi_name_number)
}

// repeated .mead101.mead.ProprietaryId proprietary_id = 6;
inline int DetailedPartyId::_internal_proprietary_id_size() const {
  return proprietary_id_.size();
}
inline int DetailedPartyId::proprietary_id_size() const {
  return _internal_proprietary_id_size();
}
inline void DetailedPartyId::clear_proprietary_id() {
  proprietary_id_.Clear();
}
inline ::mead101::mead::ProprietaryId* DetailedPartyId::mutable_proprietary_id(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.DetailedPartyId.proprietary_id)
  return proprietary_id_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::ProprietaryId >*
DetailedPartyId::mutable_proprietary_id() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.DetailedPartyId.proprietary_id)
  return &proprietary_id_;
}
inline const ::mead101::mead::ProprietaryId& DetailedPartyId::_internal_proprietary_id(int index) const {
  return proprietary_id_.Get(index);
}
inline const ::mead101::mead::ProprietaryId& DetailedPartyId::proprietary_id(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.DetailedPartyId.proprietary_id)
  return _internal_proprietary_id(index);
}
inline ::mead101::mead::ProprietaryId* DetailedPartyId::_internal_add_proprietary_id() {
  return proprietary_id_.Add();
}
inline ::mead101::mead::ProprietaryId* DetailedPartyId::add_proprietary_id() {
  // @@protoc_insertion_point(field_add:mead101.mead.DetailedPartyId.proprietary_id)
  return _internal_add_proprietary_id();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::ProprietaryId >&
DetailedPartyId::proprietary_id() const {
  // @@protoc_insertion_point(field_list:mead101.mead.DetailedPartyId.proprietary_id)
  return proprietary_id_;
}

// -------------------------------------------------------------------

// DisplayArtist

// optional string d_p_i_d = 1;
inline bool DisplayArtist::_internal_has_d_p_i_d() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DisplayArtist::has_d_p_i_d() const {
  return _internal_has_d_p_i_d();
}
inline void DisplayArtist::clear_d_p_i_d() {
  d_p_i_d_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DisplayArtist::d_p_i_d() const {
  // @@protoc_insertion_point(field_get:mead101.mead.DisplayArtist.d_p_i_d)
  return _internal_d_p_i_d();
}
inline void DisplayArtist::set_d_p_i_d(const std::string& value) {
  _internal_set_d_p_i_d(value);
  // @@protoc_insertion_point(field_set:mead101.mead.DisplayArtist.d_p_i_d)
}
inline std::string* DisplayArtist::mutable_d_p_i_d() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.DisplayArtist.d_p_i_d)
  return _internal_mutable_d_p_i_d();
}
inline const std::string& DisplayArtist::_internal_d_p_i_d() const {
  return d_p_i_d_.Get();
}
inline void DisplayArtist::_internal_set_d_p_i_d(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  d_p_i_d_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DisplayArtist::set_d_p_i_d(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  d_p_i_d_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.DisplayArtist.d_p_i_d)
}
inline void DisplayArtist::set_d_p_i_d(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  d_p_i_d_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.DisplayArtist.d_p_i_d)
}
inline void DisplayArtist::set_d_p_i_d(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  d_p_i_d_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.DisplayArtist.d_p_i_d)
}
inline std::string* DisplayArtist::_internal_mutable_d_p_i_d() {
  _has_bits_[0] |= 0x00000001u;
  return d_p_i_d_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DisplayArtist::release_d_p_i_d() {
  // @@protoc_insertion_point(field_release:mead101.mead.DisplayArtist.d_p_i_d)
  if (!_internal_has_d_p_i_d()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return d_p_i_d_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DisplayArtist::set_allocated_d_p_i_d(std::string* d_p_i_d) {
  if (d_p_i_d != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  d_p_i_d_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), d_p_i_d,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.DisplayArtist.d_p_i_d)
}

// optional string display_artist_name = 2;
inline bool DisplayArtist::_internal_has_display_artist_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DisplayArtist::has_display_artist_name() const {
  return _internal_has_display_artist_name();
}
inline void DisplayArtist::clear_display_artist_name() {
  display_artist_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& DisplayArtist::display_artist_name() const {
  // @@protoc_insertion_point(field_get:mead101.mead.DisplayArtist.display_artist_name)
  return _internal_display_artist_name();
}
inline void DisplayArtist::set_display_artist_name(const std::string& value) {
  _internal_set_display_artist_name(value);
  // @@protoc_insertion_point(field_set:mead101.mead.DisplayArtist.display_artist_name)
}
inline std::string* DisplayArtist::mutable_display_artist_name() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.DisplayArtist.display_artist_name)
  return _internal_mutable_display_artist_name();
}
inline const std::string& DisplayArtist::_internal_display_artist_name() const {
  return display_artist_name_.Get();
}
inline void DisplayArtist::_internal_set_display_artist_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  display_artist_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DisplayArtist::set_display_artist_name(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  display_artist_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.DisplayArtist.display_artist_name)
}
inline void DisplayArtist::set_display_artist_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  display_artist_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.DisplayArtist.display_artist_name)
}
inline void DisplayArtist::set_display_artist_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  display_artist_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.DisplayArtist.display_artist_name)
}
inline std::string* DisplayArtist::_internal_mutable_display_artist_name() {
  _has_bits_[0] |= 0x00000002u;
  return display_artist_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DisplayArtist::release_display_artist_name() {
  // @@protoc_insertion_point(field_release:mead101.mead.DisplayArtist.display_artist_name)
  if (!_internal_has_display_artist_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return display_artist_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DisplayArtist::set_allocated_display_artist_name(std::string* display_artist_name) {
  if (display_artist_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  display_artist_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), display_artist_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.DisplayArtist.display_artist_name)
}

// optional string i_p_n = 3;
inline bool DisplayArtist::_internal_has_i_p_n() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DisplayArtist::has_i_p_n() const {
  return _internal_has_i_p_n();
}
inline void DisplayArtist::clear_i_p_n() {
  i_p_n_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& DisplayArtist::i_p_n() const {
  // @@protoc_insertion_point(field_get:mead101.mead.DisplayArtist.i_p_n)
  return _internal_i_p_n();
}
inline void DisplayArtist::set_i_p_n(const std::string& value) {
  _internal_set_i_p_n(value);
  // @@protoc_insertion_point(field_set:mead101.mead.DisplayArtist.i_p_n)
}
inline std::string* DisplayArtist::mutable_i_p_n() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.DisplayArtist.i_p_n)
  return _internal_mutable_i_p_n();
}
inline const std::string& DisplayArtist::_internal_i_p_n() const {
  return i_p_n_.Get();
}
inline void DisplayArtist::_internal_set_i_p_n(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  i_p_n_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DisplayArtist::set_i_p_n(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  i_p_n_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.DisplayArtist.i_p_n)
}
inline void DisplayArtist::set_i_p_n(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  i_p_n_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.DisplayArtist.i_p_n)
}
inline void DisplayArtist::set_i_p_n(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  i_p_n_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.DisplayArtist.i_p_n)
}
inline std::string* DisplayArtist::_internal_mutable_i_p_n() {
  _has_bits_[0] |= 0x00000004u;
  return i_p_n_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DisplayArtist::release_i_p_n() {
  // @@protoc_insertion_point(field_release:mead101.mead.DisplayArtist.i_p_n)
  if (!_internal_has_i_p_n()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return i_p_n_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DisplayArtist::set_allocated_i_p_n(std::string* i_p_n) {
  if (i_p_n != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  i_p_n_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), i_p_n,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.DisplayArtist.i_p_n)
}

// optional string i_s_n_i = 4;
inline bool DisplayArtist::_internal_has_i_s_n_i() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool DisplayArtist::has_i_s_n_i() const {
  return _internal_has_i_s_n_i();
}
inline void DisplayArtist::clear_i_s_n_i() {
  i_s_n_i_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& DisplayArtist::i_s_n_i() const {
  // @@protoc_insertion_point(field_get:mead101.mead.DisplayArtist.i_s_n_i)
  return _internal_i_s_n_i();
}
inline void DisplayArtist::set_i_s_n_i(const std::string& value) {
  _internal_set_i_s_n_i(value);
  // @@protoc_insertion_point(field_set:mead101.mead.DisplayArtist.i_s_n_i)
}
inline std::string* DisplayArtist::mutable_i_s_n_i() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.DisplayArtist.i_s_n_i)
  return _internal_mutable_i_s_n_i();
}
inline const std::string& DisplayArtist::_internal_i_s_n_i() const {
  return i_s_n_i_.Get();
}
inline void DisplayArtist::_internal_set_i_s_n_i(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  i_s_n_i_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DisplayArtist::set_i_s_n_i(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  i_s_n_i_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.DisplayArtist.i_s_n_i)
}
inline void DisplayArtist::set_i_s_n_i(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  i_s_n_i_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.DisplayArtist.i_s_n_i)
}
inline void DisplayArtist::set_i_s_n_i(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  i_s_n_i_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.DisplayArtist.i_s_n_i)
}
inline std::string* DisplayArtist::_internal_mutable_i_s_n_i() {
  _has_bits_[0] |= 0x00000008u;
  return i_s_n_i_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DisplayArtist::release_i_s_n_i() {
  // @@protoc_insertion_point(field_release:mead101.mead.DisplayArtist.i_s_n_i)
  if (!_internal_has_i_s_n_i()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return i_s_n_i_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DisplayArtist::set_allocated_i_s_n_i(std::string* i_s_n_i) {
  if (i_s_n_i != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  i_s_n_i_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), i_s_n_i,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.DisplayArtist.i_s_n_i)
}

// optional string ipi_name_number = 5;
inline bool DisplayArtist::_internal_has_ipi_name_number() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool DisplayArtist::has_ipi_name_number() const {
  return _internal_has_ipi_name_number();
}
inline void DisplayArtist::clear_ipi_name_number() {
  ipi_name_number_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& DisplayArtist::ipi_name_number() const {
  // @@protoc_insertion_point(field_get:mead101.mead.DisplayArtist.ipi_name_number)
  return _internal_ipi_name_number();
}
inline void DisplayArtist::set_ipi_name_number(const std::string& value) {
  _internal_set_ipi_name_number(value);
  // @@protoc_insertion_point(field_set:mead101.mead.DisplayArtist.ipi_name_number)
}
inline std::string* DisplayArtist::mutable_ipi_name_number() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.DisplayArtist.ipi_name_number)
  return _internal_mutable_ipi_name_number();
}
inline const std::string& DisplayArtist::_internal_ipi_name_number() const {
  return ipi_name_number_.Get();
}
inline void DisplayArtist::_internal_set_ipi_name_number(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  ipi_name_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DisplayArtist::set_ipi_name_number(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  ipi_name_number_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.DisplayArtist.ipi_name_number)
}
inline void DisplayArtist::set_ipi_name_number(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  ipi_name_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.DisplayArtist.ipi_name_number)
}
inline void DisplayArtist::set_ipi_name_number(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  ipi_name_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.DisplayArtist.ipi_name_number)
}
inline std::string* DisplayArtist::_internal_mutable_ipi_name_number() {
  _has_bits_[0] |= 0x00000010u;
  return ipi_name_number_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DisplayArtist::release_ipi_name_number() {
  // @@protoc_insertion_point(field_release:mead101.mead.DisplayArtist.ipi_name_number)
  if (!_internal_has_ipi_name_number()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return ipi_name_number_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DisplayArtist::set_allocated_ipi_name_number(std::string* ipi_name_number) {
  if (ipi_name_number != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  ipi_name_number_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ipi_name_number,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.DisplayArtist.ipi_name_number)
}

// repeated .mead101.mead.ProprietaryId proprietary_id = 6;
inline int DisplayArtist::_internal_proprietary_id_size() const {
  return proprietary_id_.size();
}
inline int DisplayArtist::proprietary_id_size() const {
  return _internal_proprietary_id_size();
}
inline void DisplayArtist::clear_proprietary_id() {
  proprietary_id_.Clear();
}
inline ::mead101::mead::ProprietaryId* DisplayArtist::mutable_proprietary_id(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.DisplayArtist.proprietary_id)
  return proprietary_id_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::ProprietaryId >*
DisplayArtist::mutable_proprietary_id() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.DisplayArtist.proprietary_id)
  return &proprietary_id_;
}
inline const ::mead101::mead::ProprietaryId& DisplayArtist::_internal_proprietary_id(int index) const {
  return proprietary_id_.Get(index);
}
inline const ::mead101::mead::ProprietaryId& DisplayArtist::proprietary_id(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.DisplayArtist.proprietary_id)
  return _internal_proprietary_id(index);
}
inline ::mead101::mead::ProprietaryId* DisplayArtist::_internal_add_proprietary_id() {
  return proprietary_id_.Add();
}
inline ::mead101::mead::ProprietaryId* DisplayArtist::add_proprietary_id() {
  // @@protoc_insertion_point(field_add:mead101.mead.DisplayArtist.proprietary_id)
  return _internal_add_proprietary_id();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::ProprietaryId >&
DisplayArtist::proprietary_id() const {
  // @@protoc_insertion_point(field_list:mead101.mead.DisplayArtist.proprietary_id)
  return proprietary_id_;
}

// -------------------------------------------------------------------

// DisplayArtistNameWithDefault

// optional .mead101.avs.CurrentTerritoryCode applicable_territory_code = 1;
inline bool DisplayArtistNameWithDefault::_internal_has_applicable_territory_code() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || applicable_territory_code_ != nullptr);
  return value;
}
inline bool DisplayArtistNameWithDefault::has_applicable_territory_code() const {
  return _internal_has_applicable_territory_code();
}
inline const ::mead101::avs::CurrentTerritoryCode& DisplayArtistNameWithDefault::_internal_applicable_territory_code() const {
  const ::mead101::avs::CurrentTerritoryCode* p = applicable_territory_code_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::avs::CurrentTerritoryCode*>(
      &::mead101::avs::_CurrentTerritoryCode_default_instance_);
}
inline const ::mead101::avs::CurrentTerritoryCode& DisplayArtistNameWithDefault::applicable_territory_code() const {
  // @@protoc_insertion_point(field_get:mead101.mead.DisplayArtistNameWithDefault.applicable_territory_code)
  return _internal_applicable_territory_code();
}
inline void DisplayArtistNameWithDefault::unsafe_arena_set_allocated_applicable_territory_code(
    ::mead101::avs::CurrentTerritoryCode* applicable_territory_code) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(applicable_territory_code_);
  }
  applicable_territory_code_ = applicable_territory_code;
  if (applicable_territory_code) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.DisplayArtistNameWithDefault.applicable_territory_code)
}
inline ::mead101::avs::CurrentTerritoryCode* DisplayArtistNameWithDefault::release_applicable_territory_code() {
  _has_bits_[0] &= ~0x00000004u;
  ::mead101::avs::CurrentTerritoryCode* temp = applicable_territory_code_;
  applicable_territory_code_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::avs::CurrentTerritoryCode* DisplayArtistNameWithDefault::unsafe_arena_release_applicable_territory_code() {
  // @@protoc_insertion_point(field_release:mead101.mead.DisplayArtistNameWithDefault.applicable_territory_code)
  _has_bits_[0] &= ~0x00000004u;
  ::mead101::avs::CurrentTerritoryCode* temp = applicable_territory_code_;
  applicable_territory_code_ = nullptr;
  return temp;
}
inline ::mead101::avs::CurrentTerritoryCode* DisplayArtistNameWithDefault::_internal_mutable_applicable_territory_code() {
  _has_bits_[0] |= 0x00000004u;
  if (applicable_territory_code_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::avs::CurrentTerritoryCode>(GetArena());
    applicable_territory_code_ = p;
  }
  return applicable_territory_code_;
}
inline ::mead101::avs::CurrentTerritoryCode* DisplayArtistNameWithDefault::mutable_applicable_territory_code() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.DisplayArtistNameWithDefault.applicable_territory_code)
  return _internal_mutable_applicable_territory_code();
}
inline void DisplayArtistNameWithDefault::set_allocated_applicable_territory_code(::mead101::avs::CurrentTerritoryCode* applicable_territory_code) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(applicable_territory_code_);
  }
  if (applicable_territory_code) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(applicable_territory_code)->GetArena();
    if (message_arena != submessage_arena) {
      applicable_territory_code = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, applicable_territory_code, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  applicable_territory_code_ = applicable_territory_code;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.DisplayArtistNameWithDefault.applicable_territory_code)
}

// optional bool is_default = 2;
inline bool DisplayArtistNameWithDefault::_internal_has_is_default() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool DisplayArtistNameWithDefault::has_is_default() const {
  return _internal_has_is_default();
}
inline void DisplayArtistNameWithDefault::clear_is_default() {
  is_default_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool DisplayArtistNameWithDefault::_internal_is_default() const {
  return is_default_;
}
inline bool DisplayArtistNameWithDefault::is_default() const {
  // @@protoc_insertion_point(field_get:mead101.mead.DisplayArtistNameWithDefault.is_default)
  return _internal_is_default();
}
inline void DisplayArtistNameWithDefault::_internal_set_is_default(bool value) {
  _has_bits_[0] |= 0x00000008u;
  is_default_ = value;
}
inline void DisplayArtistNameWithDefault::set_is_default(bool value) {
  _internal_set_is_default(value);
  // @@protoc_insertion_point(field_set:mead101.mead.DisplayArtistNameWithDefault.is_default)
}

// optional string language_and_script_code = 3;
inline bool DisplayArtistNameWithDefault::_internal_has_language_and_script_code() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DisplayArtistNameWithDefault::has_language_and_script_code() const {
  return _internal_has_language_and_script_code();
}
inline void DisplayArtistNameWithDefault::clear_language_and_script_code() {
  language_and_script_code_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DisplayArtistNameWithDefault::language_and_script_code() const {
  // @@protoc_insertion_point(field_get:mead101.mead.DisplayArtistNameWithDefault.language_and_script_code)
  return _internal_language_and_script_code();
}
inline void DisplayArtistNameWithDefault::set_language_and_script_code(const std::string& value) {
  _internal_set_language_and_script_code(value);
  // @@protoc_insertion_point(field_set:mead101.mead.DisplayArtistNameWithDefault.language_and_script_code)
}
inline std::string* DisplayArtistNameWithDefault::mutable_language_and_script_code() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.DisplayArtistNameWithDefault.language_and_script_code)
  return _internal_mutable_language_and_script_code();
}
inline const std::string& DisplayArtistNameWithDefault::_internal_language_and_script_code() const {
  return language_and_script_code_.Get();
}
inline void DisplayArtistNameWithDefault::_internal_set_language_and_script_code(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  language_and_script_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DisplayArtistNameWithDefault::set_language_and_script_code(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  language_and_script_code_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.DisplayArtistNameWithDefault.language_and_script_code)
}
inline void DisplayArtistNameWithDefault::set_language_and_script_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  language_and_script_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.DisplayArtistNameWithDefault.language_and_script_code)
}
inline void DisplayArtistNameWithDefault::set_language_and_script_code(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  language_and_script_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.DisplayArtistNameWithDefault.language_and_script_code)
}
inline std::string* DisplayArtistNameWithDefault::_internal_mutable_language_and_script_code() {
  _has_bits_[0] |= 0x00000001u;
  return language_and_script_code_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DisplayArtistNameWithDefault::release_language_and_script_code() {
  // @@protoc_insertion_point(field_release:mead101.mead.DisplayArtistNameWithDefault.language_and_script_code)
  if (!_internal_has_language_and_script_code()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return language_and_script_code_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DisplayArtistNameWithDefault::set_allocated_language_and_script_code(std::string* language_and_script_code) {
  if (language_and_script_code != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  language_and_script_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), language_and_script_code,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.DisplayArtistNameWithDefault.language_and_script_code)
}

// optional string ext_value = 4;
inline bool DisplayArtistNameWithDefault::_internal_has_ext_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DisplayArtistNameWithDefault::has_ext_value() const {
  return _internal_has_ext_value();
}
inline void DisplayArtistNameWithDefault::clear_ext_value() {
  ext_value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& DisplayArtistNameWithDefault::ext_value() const {
  // @@protoc_insertion_point(field_get:mead101.mead.DisplayArtistNameWithDefault.ext_value)
  return _internal_ext_value();
}
inline void DisplayArtistNameWithDefault::set_ext_value(const std::string& value) {
  _internal_set_ext_value(value);
  // @@protoc_insertion_point(field_set:mead101.mead.DisplayArtistNameWithDefault.ext_value)
}
inline std::string* DisplayArtistNameWithDefault::mutable_ext_value() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.DisplayArtistNameWithDefault.ext_value)
  return _internal_mutable_ext_value();
}
inline const std::string& DisplayArtistNameWithDefault::_internal_ext_value() const {
  return ext_value_.Get();
}
inline void DisplayArtistNameWithDefault::_internal_set_ext_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  ext_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DisplayArtistNameWithDefault::set_ext_value(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  ext_value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.DisplayArtistNameWithDefault.ext_value)
}
inline void DisplayArtistNameWithDefault::set_ext_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  ext_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.DisplayArtistNameWithDefault.ext_value)
}
inline void DisplayArtistNameWithDefault::set_ext_value(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  ext_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.DisplayArtistNameWithDefault.ext_value)
}
inline std::string* DisplayArtistNameWithDefault::_internal_mutable_ext_value() {
  _has_bits_[0] |= 0x00000002u;
  return ext_value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DisplayArtistNameWithDefault::release_ext_value() {
  // @@protoc_insertion_point(field_release:mead101.mead.DisplayArtistNameWithDefault.ext_value)
  if (!_internal_has_ext_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return ext_value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DisplayArtistNameWithDefault::set_allocated_ext_value(std::string* ext_value) {
  if (ext_value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  ext_value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ext_value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.DisplayArtistNameWithDefault.ext_value)
}

// -------------------------------------------------------------------

// DisplayArtistNameWithPronunciation

// optional .mead101.mead.DisplayArtistNameWithDefault name = 1;
inline bool DisplayArtistNameWithPronunciation::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || name_ != nullptr);
  return value;
}
inline bool DisplayArtistNameWithPronunciation::has_name() const {
  return _internal_has_name();
}
inline void DisplayArtistNameWithPronunciation::clear_name() {
  if (name_ != nullptr) name_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::mead101::mead::DisplayArtistNameWithDefault& DisplayArtistNameWithPronunciation::_internal_name() const {
  const ::mead101::mead::DisplayArtistNameWithDefault* p = name_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::DisplayArtistNameWithDefault*>(
      &::mead101::mead::_DisplayArtistNameWithDefault_default_instance_);
}
inline const ::mead101::mead::DisplayArtistNameWithDefault& DisplayArtistNameWithPronunciation::name() const {
  // @@protoc_insertion_point(field_get:mead101.mead.DisplayArtistNameWithPronunciation.name)
  return _internal_name();
}
inline void DisplayArtistNameWithPronunciation::unsafe_arena_set_allocated_name(
    ::mead101::mead::DisplayArtistNameWithDefault* name) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(name_);
  }
  name_ = name;
  if (name) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.DisplayArtistNameWithPronunciation.name)
}
inline ::mead101::mead::DisplayArtistNameWithDefault* DisplayArtistNameWithPronunciation::release_name() {
  _has_bits_[0] &= ~0x00000001u;
  ::mead101::mead::DisplayArtistNameWithDefault* temp = name_;
  name_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::DisplayArtistNameWithDefault* DisplayArtistNameWithPronunciation::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_release:mead101.mead.DisplayArtistNameWithPronunciation.name)
  _has_bits_[0] &= ~0x00000001u;
  ::mead101::mead::DisplayArtistNameWithDefault* temp = name_;
  name_ = nullptr;
  return temp;
}
inline ::mead101::mead::DisplayArtistNameWithDefault* DisplayArtistNameWithPronunciation::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  if (name_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::DisplayArtistNameWithDefault>(GetArena());
    name_ = p;
  }
  return name_;
}
inline ::mead101::mead::DisplayArtistNameWithDefault* DisplayArtistNameWithPronunciation::mutable_name() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.DisplayArtistNameWithPronunciation.name)
  return _internal_mutable_name();
}
inline void DisplayArtistNameWithPronunciation::set_allocated_name(::mead101::mead::DisplayArtistNameWithDefault* name) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete name_;
  }
  if (name) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(name);
    if (message_arena != submessage_arena) {
      name = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, name, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_ = name;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.DisplayArtistNameWithPronunciation.name)
}

// repeated .mead101.mead.Pronunciation pronunciation = 2;
inline int DisplayArtistNameWithPronunciation::_internal_pronunciation_size() const {
  return pronunciation_.size();
}
inline int DisplayArtistNameWithPronunciation::pronunciation_size() const {
  return _internal_pronunciation_size();
}
inline void DisplayArtistNameWithPronunciation::clear_pronunciation() {
  pronunciation_.Clear();
}
inline ::mead101::mead::Pronunciation* DisplayArtistNameWithPronunciation::mutable_pronunciation(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.DisplayArtistNameWithPronunciation.pronunciation)
  return pronunciation_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Pronunciation >*
DisplayArtistNameWithPronunciation::mutable_pronunciation() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.DisplayArtistNameWithPronunciation.pronunciation)
  return &pronunciation_;
}
inline const ::mead101::mead::Pronunciation& DisplayArtistNameWithPronunciation::_internal_pronunciation(int index) const {
  return pronunciation_.Get(index);
}
inline const ::mead101::mead::Pronunciation& DisplayArtistNameWithPronunciation::pronunciation(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.DisplayArtistNameWithPronunciation.pronunciation)
  return _internal_pronunciation(index);
}
inline ::mead101::mead::Pronunciation* DisplayArtistNameWithPronunciation::_internal_add_pronunciation() {
  return pronunciation_.Add();
}
inline ::mead101::mead::Pronunciation* DisplayArtistNameWithPronunciation::add_pronunciation() {
  // @@protoc_insertion_point(field_add:mead101.mead.DisplayArtistNameWithPronunciation.pronunciation)
  return _internal_add_pronunciation();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Pronunciation >&
DisplayArtistNameWithPronunciation::pronunciation() const {
  // @@protoc_insertion_point(field_list:mead101.mead.DisplayArtistNameWithPronunciation.pronunciation)
  return pronunciation_;
}

// -------------------------------------------------------------------

// DisplaySubTitle

// optional bool is_displayed_in_title = 1;
inline bool DisplaySubTitle::_internal_has_is_displayed_in_title() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool DisplaySubTitle::has_is_displayed_in_title() const {
  return _internal_has_is_displayed_in_title();
}
inline void DisplaySubTitle::clear_is_displayed_in_title() {
  is_displayed_in_title_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool DisplaySubTitle::_internal_is_displayed_in_title() const {
  return is_displayed_in_title_;
}
inline bool DisplaySubTitle::is_displayed_in_title() const {
  // @@protoc_insertion_point(field_get:mead101.mead.DisplaySubTitle.is_displayed_in_title)
  return _internal_is_displayed_in_title();
}
inline void DisplaySubTitle::_internal_set_is_displayed_in_title(bool value) {
  _has_bits_[0] |= 0x00000010u;
  is_displayed_in_title_ = value;
}
inline void DisplaySubTitle::set_is_displayed_in_title(bool value) {
  _internal_set_is_displayed_in_title(value);
  // @@protoc_insertion_point(field_set:mead101.mead.DisplaySubTitle.is_displayed_in_title)
}

// optional string namespace = 2;
inline bool DisplaySubTitle::_internal_has_namespace_() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DisplaySubTitle::has_namespace_() const {
  return _internal_has_namespace_();
}
inline void DisplaySubTitle::clear_namespace_() {
  namespace__.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DisplaySubTitle::namespace_() const {
  // @@protoc_insertion_point(field_get:mead101.mead.DisplaySubTitle.namespace)
  return _internal_namespace_();
}
inline void DisplaySubTitle::set_namespace_(const std::string& value) {
  _internal_set_namespace_(value);
  // @@protoc_insertion_point(field_set:mead101.mead.DisplaySubTitle.namespace)
}
inline std::string* DisplaySubTitle::mutable_namespace_() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.DisplaySubTitle.namespace)
  return _internal_mutable_namespace_();
}
inline const std::string& DisplaySubTitle::_internal_namespace_() const {
  return namespace__.Get();
}
inline void DisplaySubTitle::_internal_set_namespace_(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DisplaySubTitle::set_namespace_(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  namespace__.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.DisplaySubTitle.namespace)
}
inline void DisplaySubTitle::set_namespace_(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.DisplaySubTitle.namespace)
}
inline void DisplaySubTitle::set_namespace_(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.DisplaySubTitle.namespace)
}
inline std::string* DisplaySubTitle::_internal_mutable_namespace_() {
  _has_bits_[0] |= 0x00000001u;
  return namespace__.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DisplaySubTitle::release_namespace_() {
  // @@protoc_insertion_point(field_release:mead101.mead.DisplaySubTitle.namespace)
  if (!_internal_has_namespace_()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return namespace__.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DisplaySubTitle::set_allocated_namespace_(std::string* namespace_) {
  if (namespace_ != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  namespace__.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), namespace_,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.DisplaySubTitle.namespace)
}

// repeated .mead101.mead.Pronunciation pronunciation = 3;
inline int DisplaySubTitle::_internal_pronunciation_size() const {
  return pronunciation_.size();
}
inline int DisplaySubTitle::pronunciation_size() const {
  return _internal_pronunciation_size();
}
inline void DisplaySubTitle::clear_pronunciation() {
  pronunciation_.Clear();
}
inline ::mead101::mead::Pronunciation* DisplaySubTitle::mutable_pronunciation(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.DisplaySubTitle.pronunciation)
  return pronunciation_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Pronunciation >*
DisplaySubTitle::mutable_pronunciation() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.DisplaySubTitle.pronunciation)
  return &pronunciation_;
}
inline const ::mead101::mead::Pronunciation& DisplaySubTitle::_internal_pronunciation(int index) const {
  return pronunciation_.Get(index);
}
inline const ::mead101::mead::Pronunciation& DisplaySubTitle::pronunciation(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.DisplaySubTitle.pronunciation)
  return _internal_pronunciation(index);
}
inline ::mead101::mead::Pronunciation* DisplaySubTitle::_internal_add_pronunciation() {
  return pronunciation_.Add();
}
inline ::mead101::mead::Pronunciation* DisplaySubTitle::add_pronunciation() {
  // @@protoc_insertion_point(field_add:mead101.mead.DisplaySubTitle.pronunciation)
  return _internal_add_pronunciation();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Pronunciation >&
DisplaySubTitle::pronunciation() const {
  // @@protoc_insertion_point(field_list:mead101.mead.DisplaySubTitle.pronunciation)
  return pronunciation_;
}

// optional int32 sequence_number = 4;
inline bool DisplaySubTitle::_internal_has_sequence_number() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool DisplaySubTitle::has_sequence_number() const {
  return _internal_has_sequence_number();
}
inline void DisplaySubTitle::clear_sequence_number() {
  sequence_number_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DisplaySubTitle::_internal_sequence_number() const {
  return sequence_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DisplaySubTitle::sequence_number() const {
  // @@protoc_insertion_point(field_get:mead101.mead.DisplaySubTitle.sequence_number)
  return _internal_sequence_number();
}
inline void DisplaySubTitle::_internal_set_sequence_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  sequence_number_ = value;
}
inline void DisplaySubTitle::set_sequence_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sequence_number(value);
  // @@protoc_insertion_point(field_set:mead101.mead.DisplaySubTitle.sequence_number)
}

// optional string sub_title_type = 5;
inline bool DisplaySubTitle::_internal_has_sub_title_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DisplaySubTitle::has_sub_title_type() const {
  return _internal_has_sub_title_type();
}
inline void DisplaySubTitle::clear_sub_title_type() {
  sub_title_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& DisplaySubTitle::sub_title_type() const {
  // @@protoc_insertion_point(field_get:mead101.mead.DisplaySubTitle.sub_title_type)
  return _internal_sub_title_type();
}
inline void DisplaySubTitle::set_sub_title_type(const std::string& value) {
  _internal_set_sub_title_type(value);
  // @@protoc_insertion_point(field_set:mead101.mead.DisplaySubTitle.sub_title_type)
}
inline std::string* DisplaySubTitle::mutable_sub_title_type() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.DisplaySubTitle.sub_title_type)
  return _internal_mutable_sub_title_type();
}
inline const std::string& DisplaySubTitle::_internal_sub_title_type() const {
  return sub_title_type_.Get();
}
inline void DisplaySubTitle::_internal_set_sub_title_type(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  sub_title_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DisplaySubTitle::set_sub_title_type(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  sub_title_type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.DisplaySubTitle.sub_title_type)
}
inline void DisplaySubTitle::set_sub_title_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  sub_title_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.DisplaySubTitle.sub_title_type)
}
inline void DisplaySubTitle::set_sub_title_type(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  sub_title_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.DisplaySubTitle.sub_title_type)
}
inline std::string* DisplaySubTitle::_internal_mutable_sub_title_type() {
  _has_bits_[0] |= 0x00000002u;
  return sub_title_type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DisplaySubTitle::release_sub_title_type() {
  // @@protoc_insertion_point(field_release:mead101.mead.DisplaySubTitle.sub_title_type)
  if (!_internal_has_sub_title_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return sub_title_type_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DisplaySubTitle::set_allocated_sub_title_type(std::string* sub_title_type) {
  if (sub_title_type != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  sub_title_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sub_title_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.DisplaySubTitle.sub_title_type)
}

// optional string title = 6;
inline bool DisplaySubTitle::_internal_has_title() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DisplaySubTitle::has_title() const {
  return _internal_has_title();
}
inline void DisplaySubTitle::clear_title() {
  title_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& DisplaySubTitle::title() const {
  // @@protoc_insertion_point(field_get:mead101.mead.DisplaySubTitle.title)
  return _internal_title();
}
inline void DisplaySubTitle::set_title(const std::string& value) {
  _internal_set_title(value);
  // @@protoc_insertion_point(field_set:mead101.mead.DisplaySubTitle.title)
}
inline std::string* DisplaySubTitle::mutable_title() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.DisplaySubTitle.title)
  return _internal_mutable_title();
}
inline const std::string& DisplaySubTitle::_internal_title() const {
  return title_.Get();
}
inline void DisplaySubTitle::_internal_set_title(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DisplaySubTitle::set_title(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  title_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.DisplaySubTitle.title)
}
inline void DisplaySubTitle::set_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.DisplaySubTitle.title)
}
inline void DisplaySubTitle::set_title(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.DisplaySubTitle.title)
}
inline std::string* DisplaySubTitle::_internal_mutable_title() {
  _has_bits_[0] |= 0x00000004u;
  return title_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DisplaySubTitle::release_title() {
  // @@protoc_insertion_point(field_release:mead101.mead.DisplaySubTitle.title)
  if (!_internal_has_title()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return title_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DisplaySubTitle::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  title_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.DisplaySubTitle.title)
}

// optional string user_defined_value = 7;
inline bool DisplaySubTitle::_internal_has_user_defined_value() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool DisplaySubTitle::has_user_defined_value() const {
  return _internal_has_user_defined_value();
}
inline void DisplaySubTitle::clear_user_defined_value() {
  user_defined_value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& DisplaySubTitle::user_defined_value() const {
  // @@protoc_insertion_point(field_get:mead101.mead.DisplaySubTitle.user_defined_value)
  return _internal_user_defined_value();
}
inline void DisplaySubTitle::set_user_defined_value(const std::string& value) {
  _internal_set_user_defined_value(value);
  // @@protoc_insertion_point(field_set:mead101.mead.DisplaySubTitle.user_defined_value)
}
inline std::string* DisplaySubTitle::mutable_user_defined_value() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.DisplaySubTitle.user_defined_value)
  return _internal_mutable_user_defined_value();
}
inline const std::string& DisplaySubTitle::_internal_user_defined_value() const {
  return user_defined_value_.Get();
}
inline void DisplaySubTitle::_internal_set_user_defined_value(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DisplaySubTitle::set_user_defined_value(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  user_defined_value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.DisplaySubTitle.user_defined_value)
}
inline void DisplaySubTitle::set_user_defined_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.DisplaySubTitle.user_defined_value)
}
inline void DisplaySubTitle::set_user_defined_value(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.DisplaySubTitle.user_defined_value)
}
inline std::string* DisplaySubTitle::_internal_mutable_user_defined_value() {
  _has_bits_[0] |= 0x00000008u;
  return user_defined_value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DisplaySubTitle::release_user_defined_value() {
  // @@protoc_insertion_point(field_release:mead101.mead.DisplaySubTitle.user_defined_value)
  if (!_internal_has_user_defined_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return user_defined_value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DisplaySubTitle::set_allocated_user_defined_value(std::string* user_defined_value) {
  if (user_defined_value != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  user_defined_value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_defined_value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.DisplaySubTitle.user_defined_value)
}

// -------------------------------------------------------------------

// DisplayTitle

// optional .mead101.avs.CurrentTerritoryCode applicable_territory_code = 1;
inline bool DisplayTitle::_internal_has_applicable_territory_code() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || applicable_territory_code_ != nullptr);
  return value;
}
inline bool DisplayTitle::has_applicable_territory_code() const {
  return _internal_has_applicable_territory_code();
}
inline const ::mead101::avs::CurrentTerritoryCode& DisplayTitle::_internal_applicable_territory_code() const {
  const ::mead101::avs::CurrentTerritoryCode* p = applicable_territory_code_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::avs::CurrentTerritoryCode*>(
      &::mead101::avs::_CurrentTerritoryCode_default_instance_);
}
inline const ::mead101::avs::CurrentTerritoryCode& DisplayTitle::applicable_territory_code() const {
  // @@protoc_insertion_point(field_get:mead101.mead.DisplayTitle.applicable_territory_code)
  return _internal_applicable_territory_code();
}
inline void DisplayTitle::unsafe_arena_set_allocated_applicable_territory_code(
    ::mead101::avs::CurrentTerritoryCode* applicable_territory_code) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(applicable_territory_code_);
  }
  applicable_territory_code_ = applicable_territory_code;
  if (applicable_territory_code) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.DisplayTitle.applicable_territory_code)
}
inline ::mead101::avs::CurrentTerritoryCode* DisplayTitle::release_applicable_territory_code() {
  _has_bits_[0] &= ~0x00000002u;
  ::mead101::avs::CurrentTerritoryCode* temp = applicable_territory_code_;
  applicable_territory_code_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::avs::CurrentTerritoryCode* DisplayTitle::unsafe_arena_release_applicable_territory_code() {
  // @@protoc_insertion_point(field_release:mead101.mead.DisplayTitle.applicable_territory_code)
  _has_bits_[0] &= ~0x00000002u;
  ::mead101::avs::CurrentTerritoryCode* temp = applicable_territory_code_;
  applicable_territory_code_ = nullptr;
  return temp;
}
inline ::mead101::avs::CurrentTerritoryCode* DisplayTitle::_internal_mutable_applicable_territory_code() {
  _has_bits_[0] |= 0x00000002u;
  if (applicable_territory_code_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::avs::CurrentTerritoryCode>(GetArena());
    applicable_territory_code_ = p;
  }
  return applicable_territory_code_;
}
inline ::mead101::avs::CurrentTerritoryCode* DisplayTitle::mutable_applicable_territory_code() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.DisplayTitle.applicable_territory_code)
  return _internal_mutable_applicable_territory_code();
}
inline void DisplayTitle::set_allocated_applicable_territory_code(::mead101::avs::CurrentTerritoryCode* applicable_territory_code) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(applicable_territory_code_);
  }
  if (applicable_territory_code) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(applicable_territory_code)->GetArena();
    if (message_arena != submessage_arena) {
      applicable_territory_code = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, applicable_territory_code, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  applicable_territory_code_ = applicable_territory_code;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.DisplayTitle.applicable_territory_code)
}

// optional bool is_default = 2;
inline bool DisplayTitle::_internal_has_is_default() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool DisplayTitle::has_is_default() const {
  return _internal_has_is_default();
}
inline void DisplayTitle::clear_is_default() {
  is_default_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool DisplayTitle::_internal_is_default() const {
  return is_default_;
}
inline bool DisplayTitle::is_default() const {
  // @@protoc_insertion_point(field_get:mead101.mead.DisplayTitle.is_default)
  return _internal_is_default();
}
inline void DisplayTitle::_internal_set_is_default(bool value) {
  _has_bits_[0] |= 0x00000008u;
  is_default_ = value;
}
inline void DisplayTitle::set_is_default(bool value) {
  _internal_set_is_default(value);
  // @@protoc_insertion_point(field_set:mead101.mead.DisplayTitle.is_default)
}

// optional string language_and_script_code = 3;
inline bool DisplayTitle::_internal_has_language_and_script_code() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DisplayTitle::has_language_and_script_code() const {
  return _internal_has_language_and_script_code();
}
inline void DisplayTitle::clear_language_and_script_code() {
  language_and_script_code_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DisplayTitle::language_and_script_code() const {
  // @@protoc_insertion_point(field_get:mead101.mead.DisplayTitle.language_and_script_code)
  return _internal_language_and_script_code();
}
inline void DisplayTitle::set_language_and_script_code(const std::string& value) {
  _internal_set_language_and_script_code(value);
  // @@protoc_insertion_point(field_set:mead101.mead.DisplayTitle.language_and_script_code)
}
inline std::string* DisplayTitle::mutable_language_and_script_code() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.DisplayTitle.language_and_script_code)
  return _internal_mutable_language_and_script_code();
}
inline const std::string& DisplayTitle::_internal_language_and_script_code() const {
  return language_and_script_code_.Get();
}
inline void DisplayTitle::_internal_set_language_and_script_code(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  language_and_script_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DisplayTitle::set_language_and_script_code(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  language_and_script_code_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.DisplayTitle.language_and_script_code)
}
inline void DisplayTitle::set_language_and_script_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  language_and_script_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.DisplayTitle.language_and_script_code)
}
inline void DisplayTitle::set_language_and_script_code(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  language_and_script_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.DisplayTitle.language_and_script_code)
}
inline std::string* DisplayTitle::_internal_mutable_language_and_script_code() {
  _has_bits_[0] |= 0x00000001u;
  return language_and_script_code_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DisplayTitle::release_language_and_script_code() {
  // @@protoc_insertion_point(field_release:mead101.mead.DisplayTitle.language_and_script_code)
  if (!_internal_has_language_and_script_code()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return language_and_script_code_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DisplayTitle::set_allocated_language_and_script_code(std::string* language_and_script_code) {
  if (language_and_script_code != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  language_and_script_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), language_and_script_code,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.DisplayTitle.language_and_script_code)
}

// repeated .mead101.mead.DisplaySubTitle sub_title = 4;
inline int DisplayTitle::_internal_sub_title_size() const {
  return sub_title_.size();
}
inline int DisplayTitle::sub_title_size() const {
  return _internal_sub_title_size();
}
inline void DisplayTitle::clear_sub_title() {
  sub_title_.Clear();
}
inline ::mead101::mead::DisplaySubTitle* DisplayTitle::mutable_sub_title(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.DisplayTitle.sub_title)
  return sub_title_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::DisplaySubTitle >*
DisplayTitle::mutable_sub_title() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.DisplayTitle.sub_title)
  return &sub_title_;
}
inline const ::mead101::mead::DisplaySubTitle& DisplayTitle::_internal_sub_title(int index) const {
  return sub_title_.Get(index);
}
inline const ::mead101::mead::DisplaySubTitle& DisplayTitle::sub_title(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.DisplayTitle.sub_title)
  return _internal_sub_title(index);
}
inline ::mead101::mead::DisplaySubTitle* DisplayTitle::_internal_add_sub_title() {
  return sub_title_.Add();
}
inline ::mead101::mead::DisplaySubTitle* DisplayTitle::add_sub_title() {
  // @@protoc_insertion_point(field_add:mead101.mead.DisplayTitle.sub_title)
  return _internal_add_sub_title();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::DisplaySubTitle >&
DisplayTitle::sub_title() const {
  // @@protoc_insertion_point(field_list:mead101.mead.DisplayTitle.sub_title)
  return sub_title_;
}

// optional .mead101.mead.TitleTextWithPronunciation title_text = 5;
inline bool DisplayTitle::_internal_has_title_text() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || title_text_ != nullptr);
  return value;
}
inline bool DisplayTitle::has_title_text() const {
  return _internal_has_title_text();
}
inline void DisplayTitle::clear_title_text() {
  if (title_text_ != nullptr) title_text_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::mead101::mead::TitleTextWithPronunciation& DisplayTitle::_internal_title_text() const {
  const ::mead101::mead::TitleTextWithPronunciation* p = title_text_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::TitleTextWithPronunciation*>(
      &::mead101::mead::_TitleTextWithPronunciation_default_instance_);
}
inline const ::mead101::mead::TitleTextWithPronunciation& DisplayTitle::title_text() const {
  // @@protoc_insertion_point(field_get:mead101.mead.DisplayTitle.title_text)
  return _internal_title_text();
}
inline void DisplayTitle::unsafe_arena_set_allocated_title_text(
    ::mead101::mead::TitleTextWithPronunciation* title_text) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(title_text_);
  }
  title_text_ = title_text;
  if (title_text) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.DisplayTitle.title_text)
}
inline ::mead101::mead::TitleTextWithPronunciation* DisplayTitle::release_title_text() {
  _has_bits_[0] &= ~0x00000004u;
  ::mead101::mead::TitleTextWithPronunciation* temp = title_text_;
  title_text_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::TitleTextWithPronunciation* DisplayTitle::unsafe_arena_release_title_text() {
  // @@protoc_insertion_point(field_release:mead101.mead.DisplayTitle.title_text)
  _has_bits_[0] &= ~0x00000004u;
  ::mead101::mead::TitleTextWithPronunciation* temp = title_text_;
  title_text_ = nullptr;
  return temp;
}
inline ::mead101::mead::TitleTextWithPronunciation* DisplayTitle::_internal_mutable_title_text() {
  _has_bits_[0] |= 0x00000004u;
  if (title_text_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::TitleTextWithPronunciation>(GetArena());
    title_text_ = p;
  }
  return title_text_;
}
inline ::mead101::mead::TitleTextWithPronunciation* DisplayTitle::mutable_title_text() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.DisplayTitle.title_text)
  return _internal_mutable_title_text();
}
inline void DisplayTitle::set_allocated_title_text(::mead101::mead::TitleTextWithPronunciation* title_text) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete title_text_;
  }
  if (title_text) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(title_text);
    if (message_arena != submessage_arena) {
      title_text = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, title_text, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  title_text_ = title_text;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.DisplayTitle.title_text)
}

// -------------------------------------------------------------------

// Duration

// optional string namespace = 1;
inline bool Duration::_internal_has_namespace_() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Duration::has_namespace_() const {
  return _internal_has_namespace_();
}
inline void Duration::clear_namespace_() {
  namespace__.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Duration::namespace_() const {
  // @@protoc_insertion_point(field_get:mead101.mead.Duration.namespace)
  return _internal_namespace_();
}
inline void Duration::set_namespace_(const std::string& value) {
  _internal_set_namespace_(value);
  // @@protoc_insertion_point(field_set:mead101.mead.Duration.namespace)
}
inline std::string* Duration::mutable_namespace_() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Duration.namespace)
  return _internal_mutable_namespace_();
}
inline const std::string& Duration::_internal_namespace_() const {
  return namespace__.Get();
}
inline void Duration::_internal_set_namespace_(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Duration::set_namespace_(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  namespace__.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.Duration.namespace)
}
inline void Duration::set_namespace_(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.Duration.namespace)
}
inline void Duration::set_namespace_(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.Duration.namespace)
}
inline std::string* Duration::_internal_mutable_namespace_() {
  _has_bits_[0] |= 0x00000001u;
  return namespace__.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Duration::release_namespace_() {
  // @@protoc_insertion_point(field_release:mead101.mead.Duration.namespace)
  if (!_internal_has_namespace_()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return namespace__.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Duration::set_allocated_namespace_(std::string* namespace_) {
  if (namespace_ != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  namespace__.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), namespace_,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.Duration.namespace)
}

// optional .mead101.avs.UnitOfDuration unit_of_duration = 2;
inline bool Duration::_internal_has_unit_of_duration() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || unit_of_duration_ != nullptr);
  return value;
}
inline bool Duration::has_unit_of_duration() const {
  return _internal_has_unit_of_duration();
}
inline const ::mead101::avs::UnitOfDuration& Duration::_internal_unit_of_duration() const {
  const ::mead101::avs::UnitOfDuration* p = unit_of_duration_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::avs::UnitOfDuration*>(
      &::mead101::avs::_UnitOfDuration_default_instance_);
}
inline const ::mead101::avs::UnitOfDuration& Duration::unit_of_duration() const {
  // @@protoc_insertion_point(field_get:mead101.mead.Duration.unit_of_duration)
  return _internal_unit_of_duration();
}
inline void Duration::unsafe_arena_set_allocated_unit_of_duration(
    ::mead101::avs::UnitOfDuration* unit_of_duration) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(unit_of_duration_);
  }
  unit_of_duration_ = unit_of_duration;
  if (unit_of_duration) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.Duration.unit_of_duration)
}
inline ::mead101::avs::UnitOfDuration* Duration::release_unit_of_duration() {
  _has_bits_[0] &= ~0x00000008u;
  ::mead101::avs::UnitOfDuration* temp = unit_of_duration_;
  unit_of_duration_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::avs::UnitOfDuration* Duration::unsafe_arena_release_unit_of_duration() {
  // @@protoc_insertion_point(field_release:mead101.mead.Duration.unit_of_duration)
  _has_bits_[0] &= ~0x00000008u;
  ::mead101::avs::UnitOfDuration* temp = unit_of_duration_;
  unit_of_duration_ = nullptr;
  return temp;
}
inline ::mead101::avs::UnitOfDuration* Duration::_internal_mutable_unit_of_duration() {
  _has_bits_[0] |= 0x00000008u;
  if (unit_of_duration_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::avs::UnitOfDuration>(GetArena());
    unit_of_duration_ = p;
  }
  return unit_of_duration_;
}
inline ::mead101::avs::UnitOfDuration* Duration::mutable_unit_of_duration() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Duration.unit_of_duration)
  return _internal_mutable_unit_of_duration();
}
inline void Duration::set_allocated_unit_of_duration(::mead101::avs::UnitOfDuration* unit_of_duration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(unit_of_duration_);
  }
  if (unit_of_duration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(unit_of_duration)->GetArena();
    if (message_arena != submessage_arena) {
      unit_of_duration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, unit_of_duration, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  unit_of_duration_ = unit_of_duration;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.Duration.unit_of_duration)
}

// optional string user_defined_value = 3;
inline bool Duration::_internal_has_user_defined_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Duration::has_user_defined_value() const {
  return _internal_has_user_defined_value();
}
inline void Duration::clear_user_defined_value() {
  user_defined_value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Duration::user_defined_value() const {
  // @@protoc_insertion_point(field_get:mead101.mead.Duration.user_defined_value)
  return _internal_user_defined_value();
}
inline void Duration::set_user_defined_value(const std::string& value) {
  _internal_set_user_defined_value(value);
  // @@protoc_insertion_point(field_set:mead101.mead.Duration.user_defined_value)
}
inline std::string* Duration::mutable_user_defined_value() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Duration.user_defined_value)
  return _internal_mutable_user_defined_value();
}
inline const std::string& Duration::_internal_user_defined_value() const {
  return user_defined_value_.Get();
}
inline void Duration::_internal_set_user_defined_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Duration::set_user_defined_value(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  user_defined_value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.Duration.user_defined_value)
}
inline void Duration::set_user_defined_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.Duration.user_defined_value)
}
inline void Duration::set_user_defined_value(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.Duration.user_defined_value)
}
inline std::string* Duration::_internal_mutable_user_defined_value() {
  _has_bits_[0] |= 0x00000002u;
  return user_defined_value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Duration::release_user_defined_value() {
  // @@protoc_insertion_point(field_release:mead101.mead.Duration.user_defined_value)
  if (!_internal_has_user_defined_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return user_defined_value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Duration::set_allocated_user_defined_value(std::string* user_defined_value) {
  if (user_defined_value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  user_defined_value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_defined_value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.Duration.user_defined_value)
}

// optional string ext_value = 4;
inline bool Duration::_internal_has_ext_value() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Duration::has_ext_value() const {
  return _internal_has_ext_value();
}
inline void Duration::clear_ext_value() {
  ext_value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Duration::ext_value() const {
  // @@protoc_insertion_point(field_get:mead101.mead.Duration.ext_value)
  return _internal_ext_value();
}
inline void Duration::set_ext_value(const std::string& value) {
  _internal_set_ext_value(value);
  // @@protoc_insertion_point(field_set:mead101.mead.Duration.ext_value)
}
inline std::string* Duration::mutable_ext_value() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Duration.ext_value)
  return _internal_mutable_ext_value();
}
inline const std::string& Duration::_internal_ext_value() const {
  return ext_value_.Get();
}
inline void Duration::_internal_set_ext_value(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  ext_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Duration::set_ext_value(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  ext_value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.Duration.ext_value)
}
inline void Duration::set_ext_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  ext_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.Duration.ext_value)
}
inline void Duration::set_ext_value(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  ext_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.Duration.ext_value)
}
inline std::string* Duration::_internal_mutable_ext_value() {
  _has_bits_[0] |= 0x00000004u;
  return ext_value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Duration::release_ext_value() {
  // @@protoc_insertion_point(field_release:mead101.mead.Duration.ext_value)
  if (!_internal_has_ext_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return ext_value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Duration::set_allocated_ext_value(std::string* ext_value) {
  if (ext_value != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  ext_value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ext_value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.Duration.ext_value)
}

// -------------------------------------------------------------------

// Entry

// optional .mead101.mead.Party party = 1;
inline bool Entry::_internal_has_party() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || party_ != nullptr);
  return value;
}
inline bool Entry::has_party() const {
  return _internal_has_party();
}
inline void Entry::clear_party() {
  if (party_ != nullptr) party_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::mead101::mead::Party& Entry::_internal_party() const {
  const ::mead101::mead::Party* p = party_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::Party*>(
      &::mead101::mead::_Party_default_instance_);
}
inline const ::mead101::mead::Party& Entry::party() const {
  // @@protoc_insertion_point(field_get:mead101.mead.Entry.party)
  return _internal_party();
}
inline void Entry::unsafe_arena_set_allocated_party(
    ::mead101::mead::Party* party) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(party_);
  }
  party_ = party;
  if (party) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.Entry.party)
}
inline ::mead101::mead::Party* Entry::release_party() {
  _has_bits_[0] &= ~0x00000002u;
  ::mead101::mead::Party* temp = party_;
  party_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::Party* Entry::unsafe_arena_release_party() {
  // @@protoc_insertion_point(field_release:mead101.mead.Entry.party)
  _has_bits_[0] &= ~0x00000002u;
  ::mead101::mead::Party* temp = party_;
  party_ = nullptr;
  return temp;
}
inline ::mead101::mead::Party* Entry::_internal_mutable_party() {
  _has_bits_[0] |= 0x00000002u;
  if (party_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::Party>(GetArena());
    party_ = p;
  }
  return party_;
}
inline ::mead101::mead::Party* Entry::mutable_party() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Entry.party)
  return _internal_mutable_party();
}
inline void Entry::set_allocated_party(::mead101::mead::Party* party) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete party_;
  }
  if (party) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(party);
    if (message_arena != submessage_arena) {
      party = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, party, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  party_ = party;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.Entry.party)
}

// optional .mead101.mead.Release release = 2;
inline bool Entry::_internal_has_release() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || release_ != nullptr);
  return value;
}
inline bool Entry::has_release() const {
  return _internal_has_release();
}
inline void Entry::clear_release() {
  if (release_ != nullptr) release_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::mead101::mead::Release& Entry::_internal_release() const {
  const ::mead101::mead::Release* p = release_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::Release*>(
      &::mead101::mead::_Release_default_instance_);
}
inline const ::mead101::mead::Release& Entry::release() const {
  // @@protoc_insertion_point(field_get:mead101.mead.Entry.release)
  return _internal_release();
}
inline void Entry::unsafe_arena_set_allocated_release(
    ::mead101::mead::Release* release) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(release_);
  }
  release_ = release;
  if (release) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.Entry.release)
}
inline ::mead101::mead::Release* Entry::release_release() {
  _has_bits_[0] &= ~0x00000004u;
  ::mead101::mead::Release* temp = release_;
  release_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::Release* Entry::unsafe_arena_release_release() {
  // @@protoc_insertion_point(field_release:mead101.mead.Entry.release)
  _has_bits_[0] &= ~0x00000004u;
  ::mead101::mead::Release* temp = release_;
  release_ = nullptr;
  return temp;
}
inline ::mead101::mead::Release* Entry::_internal_mutable_release() {
  _has_bits_[0] |= 0x00000004u;
  if (release_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::Release>(GetArena());
    release_ = p;
  }
  return release_;
}
inline ::mead101::mead::Release* Entry::mutable_release() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Entry.release)
  return _internal_mutable_release();
}
inline void Entry::set_allocated_release(::mead101::mead::Release* release) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete release_;
  }
  if (release) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(release);
    if (message_arena != submessage_arena) {
      release = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, release, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  release_ = release;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.Entry.release)
}

// optional .mead101.mead.Resource resource = 3;
inline bool Entry::_internal_has_resource() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || resource_ != nullptr);
  return value;
}
inline bool Entry::has_resource() const {
  return _internal_has_resource();
}
inline void Entry::clear_resource() {
  if (resource_ != nullptr) resource_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::mead101::mead::Resource& Entry::_internal_resource() const {
  const ::mead101::mead::Resource* p = resource_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::Resource*>(
      &::mead101::mead::_Resource_default_instance_);
}
inline const ::mead101::mead::Resource& Entry::resource() const {
  // @@protoc_insertion_point(field_get:mead101.mead.Entry.resource)
  return _internal_resource();
}
inline void Entry::unsafe_arena_set_allocated_resource(
    ::mead101::mead::Resource* resource) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(resource_);
  }
  resource_ = resource;
  if (resource) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.Entry.resource)
}
inline ::mead101::mead::Resource* Entry::release_resource() {
  _has_bits_[0] &= ~0x00000008u;
  ::mead101::mead::Resource* temp = resource_;
  resource_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::Resource* Entry::unsafe_arena_release_resource() {
  // @@protoc_insertion_point(field_release:mead101.mead.Entry.resource)
  _has_bits_[0] &= ~0x00000008u;
  ::mead101::mead::Resource* temp = resource_;
  resource_ = nullptr;
  return temp;
}
inline ::mead101::mead::Resource* Entry::_internal_mutable_resource() {
  _has_bits_[0] |= 0x00000008u;
  if (resource_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::Resource>(GetArena());
    resource_ = p;
  }
  return resource_;
}
inline ::mead101::mead::Resource* Entry::mutable_resource() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Entry.resource)
  return _internal_mutable_resource();
}
inline void Entry::set_allocated_resource(::mead101::mead::Resource* resource) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete resource_;
  }
  if (resource) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(resource);
    if (message_arena != submessage_arena) {
      resource = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resource, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  resource_ = resource;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.Entry.resource)
}

// optional string subscription_id = 4;
inline bool Entry::_internal_has_subscription_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Entry::has_subscription_id() const {
  return _internal_has_subscription_id();
}
inline void Entry::clear_subscription_id() {
  subscription_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Entry::subscription_id() const {
  // @@protoc_insertion_point(field_get:mead101.mead.Entry.subscription_id)
  return _internal_subscription_id();
}
inline void Entry::set_subscription_id(const std::string& value) {
  _internal_set_subscription_id(value);
  // @@protoc_insertion_point(field_set:mead101.mead.Entry.subscription_id)
}
inline std::string* Entry::mutable_subscription_id() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Entry.subscription_id)
  return _internal_mutable_subscription_id();
}
inline const std::string& Entry::_internal_subscription_id() const {
  return subscription_id_.Get();
}
inline void Entry::_internal_set_subscription_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  subscription_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Entry::set_subscription_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  subscription_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.Entry.subscription_id)
}
inline void Entry::set_subscription_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  subscription_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.Entry.subscription_id)
}
inline void Entry::set_subscription_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  subscription_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.Entry.subscription_id)
}
inline std::string* Entry::_internal_mutable_subscription_id() {
  _has_bits_[0] |= 0x00000001u;
  return subscription_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Entry::release_subscription_id() {
  // @@protoc_insertion_point(field_release:mead101.mead.Entry.subscription_id)
  if (!_internal_has_subscription_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return subscription_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Entry::set_allocated_subscription_id(std::string* subscription_id) {
  if (subscription_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  subscription_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), subscription_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.Entry.subscription_id)
}

// optional .mead101.mead.Work work = 5;
inline bool Entry::_internal_has_work() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || work_ != nullptr);
  return value;
}
inline bool Entry::has_work() const {
  return _internal_has_work();
}
inline void Entry::clear_work() {
  if (work_ != nullptr) work_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::mead101::mead::Work& Entry::_internal_work() const {
  const ::mead101::mead::Work* p = work_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::Work*>(
      &::mead101::mead::_Work_default_instance_);
}
inline const ::mead101::mead::Work& Entry::work() const {
  // @@protoc_insertion_point(field_get:mead101.mead.Entry.work)
  return _internal_work();
}
inline void Entry::unsafe_arena_set_allocated_work(
    ::mead101::mead::Work* work) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(work_);
  }
  work_ = work;
  if (work) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.Entry.work)
}
inline ::mead101::mead::Work* Entry::release_work() {
  _has_bits_[0] &= ~0x00000010u;
  ::mead101::mead::Work* temp = work_;
  work_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::Work* Entry::unsafe_arena_release_work() {
  // @@protoc_insertion_point(field_release:mead101.mead.Entry.work)
  _has_bits_[0] &= ~0x00000010u;
  ::mead101::mead::Work* temp = work_;
  work_ = nullptr;
  return temp;
}
inline ::mead101::mead::Work* Entry::_internal_mutable_work() {
  _has_bits_[0] |= 0x00000010u;
  if (work_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::Work>(GetArena());
    work_ = p;
  }
  return work_;
}
inline ::mead101::mead::Work* Entry::mutable_work() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Entry.work)
  return _internal_mutable_work();
}
inline void Entry::set_allocated_work(::mead101::mead::Work* work) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete work_;
  }
  if (work) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(work);
    if (message_arena != submessage_arena) {
      work = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, work, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  work_ = work;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.Entry.work)
}

// repeated string any_attribute_value = 6;
inline int Entry::_internal_any_attribute_value_size() const {
  return any_attribute_value_.size();
}
inline int Entry::any_attribute_value_size() const {
  return _internal_any_attribute_value_size();
}
inline void Entry::clear_any_attribute_value() {
  any_attribute_value_.Clear();
}
inline std::string* Entry::add_any_attribute_value() {
  // @@protoc_insertion_point(field_add_mutable:mead101.mead.Entry.any_attribute_value)
  return _internal_add_any_attribute_value();
}
inline const std::string& Entry::_internal_any_attribute_value(int index) const {
  return any_attribute_value_.Get(index);
}
inline const std::string& Entry::any_attribute_value(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.Entry.any_attribute_value)
  return _internal_any_attribute_value(index);
}
inline std::string* Entry::mutable_any_attribute_value(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Entry.any_attribute_value)
  return any_attribute_value_.Mutable(index);
}
inline void Entry::set_any_attribute_value(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:mead101.mead.Entry.any_attribute_value)
  any_attribute_value_.Mutable(index)->assign(value);
}
inline void Entry::set_any_attribute_value(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:mead101.mead.Entry.any_attribute_value)
  any_attribute_value_.Mutable(index)->assign(std::move(value));
}
inline void Entry::set_any_attribute_value(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  any_attribute_value_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mead101.mead.Entry.any_attribute_value)
}
inline void Entry::set_any_attribute_value(int index, const char* value, size_t size) {
  any_attribute_value_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.Entry.any_attribute_value)
}
inline std::string* Entry::_internal_add_any_attribute_value() {
  return any_attribute_value_.Add();
}
inline void Entry::add_any_attribute_value(const std::string& value) {
  any_attribute_value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mead101.mead.Entry.any_attribute_value)
}
inline void Entry::add_any_attribute_value(std::string&& value) {
  any_attribute_value_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:mead101.mead.Entry.any_attribute_value)
}
inline void Entry::add_any_attribute_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  any_attribute_value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mead101.mead.Entry.any_attribute_value)
}
inline void Entry::add_any_attribute_value(const char* value, size_t size) {
  any_attribute_value_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mead101.mead.Entry.any_attribute_value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Entry::any_attribute_value() const {
  // @@protoc_insertion_point(field_list:mead101.mead.Entry.any_attribute_value)
  return any_attribute_value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Entry::mutable_any_attribute_value() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.Entry.any_attribute_value)
  return &any_attribute_value_;
}

// repeated .mead101.mead.Person author = 7;
inline int Entry::_internal_author_size() const {
  return author_.size();
}
inline int Entry::author_size() const {
  return _internal_author_size();
}
inline void Entry::clear_author() {
  author_.Clear();
}
inline ::mead101::mead::Person* Entry::mutable_author(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Entry.author)
  return author_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Person >*
Entry::mutable_author() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.Entry.author)
  return &author_;
}
inline const ::mead101::mead::Person& Entry::_internal_author(int index) const {
  return author_.Get(index);
}
inline const ::mead101::mead::Person& Entry::author(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.Entry.author)
  return _internal_author(index);
}
inline ::mead101::mead::Person* Entry::_internal_add_author() {
  return author_.Add();
}
inline ::mead101::mead::Person* Entry::add_author() {
  // @@protoc_insertion_point(field_add:mead101.mead.Entry.author)
  return _internal_add_author();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Person >&
Entry::author() const {
  // @@protoc_insertion_point(field_list:mead101.mead.Entry.author)
  return author_;
}

// repeated .mead101.mead.Category category = 8;
inline int Entry::_internal_category_size() const {
  return category_.size();
}
inline int Entry::category_size() const {
  return _internal_category_size();
}
inline void Entry::clear_category() {
  category_.Clear();
}
inline ::mead101::mead::Category* Entry::mutable_category(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Entry.category)
  return category_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Category >*
Entry::mutable_category() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.Entry.category)
  return &category_;
}
inline const ::mead101::mead::Category& Entry::_internal_category(int index) const {
  return category_.Get(index);
}
inline const ::mead101::mead::Category& Entry::category(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.Entry.category)
  return _internal_category(index);
}
inline ::mead101::mead::Category* Entry::_internal_add_category() {
  return category_.Add();
}
inline ::mead101::mead::Category* Entry::add_category() {
  // @@protoc_insertion_point(field_add:mead101.mead.Entry.category)
  return _internal_add_category();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Category >&
Entry::category() const {
  // @@protoc_insertion_point(field_list:mead101.mead.Entry.category)
  return category_;
}

// optional .mead101.mead.Content content = 9;
inline bool Entry::_internal_has_content() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || content_ != nullptr);
  return value;
}
inline bool Entry::has_content() const {
  return _internal_has_content();
}
inline void Entry::clear_content() {
  if (content_ != nullptr) content_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::mead101::mead::Content& Entry::_internal_content() const {
  const ::mead101::mead::Content* p = content_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::Content*>(
      &::mead101::mead::_Content_default_instance_);
}
inline const ::mead101::mead::Content& Entry::content() const {
  // @@protoc_insertion_point(field_get:mead101.mead.Entry.content)
  return _internal_content();
}
inline void Entry::unsafe_arena_set_allocated_content(
    ::mead101::mead::Content* content) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(content_);
  }
  content_ = content;
  if (content) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.Entry.content)
}
inline ::mead101::mead::Content* Entry::release_content() {
  _has_bits_[0] &= ~0x00000020u;
  ::mead101::mead::Content* temp = content_;
  content_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::Content* Entry::unsafe_arena_release_content() {
  // @@protoc_insertion_point(field_release:mead101.mead.Entry.content)
  _has_bits_[0] &= ~0x00000020u;
  ::mead101::mead::Content* temp = content_;
  content_ = nullptr;
  return temp;
}
inline ::mead101::mead::Content* Entry::_internal_mutable_content() {
  _has_bits_[0] |= 0x00000020u;
  if (content_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::Content>(GetArena());
    content_ = p;
  }
  return content_;
}
inline ::mead101::mead::Content* Entry::mutable_content() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Entry.content)
  return _internal_mutable_content();
}
inline void Entry::set_allocated_content(::mead101::mead::Content* content) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete content_;
  }
  if (content) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(content);
    if (message_arena != submessage_arena) {
      content = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, content, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  content_ = content;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.Entry.content)
}

// repeated .mead101.mead.Person contributor = 10;
inline int Entry::_internal_contributor_size() const {
  return contributor_.size();
}
inline int Entry::contributor_size() const {
  return _internal_contributor_size();
}
inline void Entry::clear_contributor() {
  contributor_.Clear();
}
inline ::mead101::mead::Person* Entry::mutable_contributor(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Entry.contributor)
  return contributor_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Person >*
Entry::mutable_contributor() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.Entry.contributor)
  return &contributor_;
}
inline const ::mead101::mead::Person& Entry::_internal_contributor(int index) const {
  return contributor_.Get(index);
}
inline const ::mead101::mead::Person& Entry::contributor(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.Entry.contributor)
  return _internal_contributor(index);
}
inline ::mead101::mead::Person* Entry::_internal_add_contributor() {
  return contributor_.Add();
}
inline ::mead101::mead::Person* Entry::add_contributor() {
  // @@protoc_insertion_point(field_add:mead101.mead.Entry.contributor)
  return _internal_add_contributor();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Person >&
Entry::contributor() const {
  // @@protoc_insertion_point(field_list:mead101.mead.Entry.contributor)
  return contributor_;
}

// optional .mead101.mead.Id id = 11;
inline bool Entry::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || id_ != nullptr);
  return value;
}
inline bool Entry::has_id() const {
  return _internal_has_id();
}
inline void Entry::clear_id() {
  if (id_ != nullptr) id_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::mead101::mead::Id& Entry::_internal_id() const {
  const ::mead101::mead::Id* p = id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::Id*>(
      &::mead101::mead::_Id_default_instance_);
}
inline const ::mead101::mead::Id& Entry::id() const {
  // @@protoc_insertion_point(field_get:mead101.mead.Entry.id)
  return _internal_id();
}
inline void Entry::unsafe_arena_set_allocated_id(
    ::mead101::mead::Id* id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  id_ = id;
  if (id) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.Entry.id)
}
inline ::mead101::mead::Id* Entry::release_id() {
  _has_bits_[0] &= ~0x00000040u;
  ::mead101::mead::Id* temp = id_;
  id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::Id* Entry::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_release:mead101.mead.Entry.id)
  _has_bits_[0] &= ~0x00000040u;
  ::mead101::mead::Id* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::mead101::mead::Id* Entry::_internal_mutable_id() {
  _has_bits_[0] |= 0x00000040u;
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::Id>(GetArena());
    id_ = p;
  }
  return id_;
}
inline ::mead101::mead::Id* Entry::mutable_id() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Entry.id)
  return _internal_mutable_id();
}
inline void Entry::set_allocated_id(::mead101::mead::Id* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete id_;
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(id);
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.Entry.id)
}

// repeated .mead101.mead.Link link = 12;
inline int Entry::_internal_link_size() const {
  return link_.size();
}
inline int Entry::link_size() const {
  return _internal_link_size();
}
inline void Entry::clear_link() {
  link_.Clear();
}
inline ::mead101::mead::Link* Entry::mutable_link(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Entry.link)
  return link_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Link >*
Entry::mutable_link() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.Entry.link)
  return &link_;
}
inline const ::mead101::mead::Link& Entry::_internal_link(int index) const {
  return link_.Get(index);
}
inline const ::mead101::mead::Link& Entry::link(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.Entry.link)
  return _internal_link(index);
}
inline ::mead101::mead::Link* Entry::_internal_add_link() {
  return link_.Add();
}
inline ::mead101::mead::Link* Entry::add_link() {
  // @@protoc_insertion_point(field_add:mead101.mead.Entry.link)
  return _internal_add_link();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Link >&
Entry::link() const {
  // @@protoc_insertion_point(field_list:mead101.mead.Entry.link)
  return link_;
}

// optional .mead101.mead.DateTime published = 13;
inline bool Entry::_internal_has_published() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || published_ != nullptr);
  return value;
}
inline bool Entry::has_published() const {
  return _internal_has_published();
}
inline void Entry::clear_published() {
  if (published_ != nullptr) published_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
inline const ::mead101::mead::DateTime& Entry::_internal_published() const {
  const ::mead101::mead::DateTime* p = published_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::DateTime*>(
      &::mead101::mead::_DateTime_default_instance_);
}
inline const ::mead101::mead::DateTime& Entry::published() const {
  // @@protoc_insertion_point(field_get:mead101.mead.Entry.published)
  return _internal_published();
}
inline void Entry::unsafe_arena_set_allocated_published(
    ::mead101::mead::DateTime* published) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(published_);
  }
  published_ = published;
  if (published) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.Entry.published)
}
inline ::mead101::mead::DateTime* Entry::release_published() {
  _has_bits_[0] &= ~0x00000080u;
  ::mead101::mead::DateTime* temp = published_;
  published_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::DateTime* Entry::unsafe_arena_release_published() {
  // @@protoc_insertion_point(field_release:mead101.mead.Entry.published)
  _has_bits_[0] &= ~0x00000080u;
  ::mead101::mead::DateTime* temp = published_;
  published_ = nullptr;
  return temp;
}
inline ::mead101::mead::DateTime* Entry::_internal_mutable_published() {
  _has_bits_[0] |= 0x00000080u;
  if (published_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::DateTime>(GetArena());
    published_ = p;
  }
  return published_;
}
inline ::mead101::mead::DateTime* Entry::mutable_published() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Entry.published)
  return _internal_mutable_published();
}
inline void Entry::set_allocated_published(::mead101::mead::DateTime* published) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete published_;
  }
  if (published) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(published);
    if (message_arena != submessage_arena) {
      published = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, published, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  published_ = published;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.Entry.published)
}

// optional .mead101.mead.Text rights = 14;
inline bool Entry::_internal_has_rights() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || rights_ != nullptr);
  return value;
}
inline bool Entry::has_rights() const {
  return _internal_has_rights();
}
inline void Entry::clear_rights() {
  if (rights_ != nullptr) rights_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
inline const ::mead101::mead::Text& Entry::_internal_rights() const {
  const ::mead101::mead::Text* p = rights_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::Text*>(
      &::mead101::mead::_Text_default_instance_);
}
inline const ::mead101::mead::Text& Entry::rights() const {
  // @@protoc_insertion_point(field_get:mead101.mead.Entry.rights)
  return _internal_rights();
}
inline void Entry::unsafe_arena_set_allocated_rights(
    ::mead101::mead::Text* rights) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rights_);
  }
  rights_ = rights;
  if (rights) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.Entry.rights)
}
inline ::mead101::mead::Text* Entry::release_rights() {
  _has_bits_[0] &= ~0x00000100u;
  ::mead101::mead::Text* temp = rights_;
  rights_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::Text* Entry::unsafe_arena_release_rights() {
  // @@protoc_insertion_point(field_release:mead101.mead.Entry.rights)
  _has_bits_[0] &= ~0x00000100u;
  ::mead101::mead::Text* temp = rights_;
  rights_ = nullptr;
  return temp;
}
inline ::mead101::mead::Text* Entry::_internal_mutable_rights() {
  _has_bits_[0] |= 0x00000100u;
  if (rights_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::Text>(GetArena());
    rights_ = p;
  }
  return rights_;
}
inline ::mead101::mead::Text* Entry::mutable_rights() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Entry.rights)
  return _internal_mutable_rights();
}
inline void Entry::set_allocated_rights(::mead101::mead::Text* rights) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete rights_;
  }
  if (rights) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(rights);
    if (message_arena != submessage_arena) {
      rights = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rights, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  rights_ = rights;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.Entry.rights)
}

// optional .mead101.mead.Source source = 15;
inline bool Entry::_internal_has_source() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || source_ != nullptr);
  return value;
}
inline bool Entry::has_source() const {
  return _internal_has_source();
}
inline void Entry::clear_source() {
  if (source_ != nullptr) source_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
inline const ::mead101::mead::Source& Entry::_internal_source() const {
  const ::mead101::mead::Source* p = source_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::Source*>(
      &::mead101::mead::_Source_default_instance_);
}
inline const ::mead101::mead::Source& Entry::source() const {
  // @@protoc_insertion_point(field_get:mead101.mead.Entry.source)
  return _internal_source();
}
inline void Entry::unsafe_arena_set_allocated_source(
    ::mead101::mead::Source* source) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(source_);
  }
  source_ = source;
  if (source) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.Entry.source)
}
inline ::mead101::mead::Source* Entry::release_source() {
  _has_bits_[0] &= ~0x00000200u;
  ::mead101::mead::Source* temp = source_;
  source_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::Source* Entry::unsafe_arena_release_source() {
  // @@protoc_insertion_point(field_release:mead101.mead.Entry.source)
  _has_bits_[0] &= ~0x00000200u;
  ::mead101::mead::Source* temp = source_;
  source_ = nullptr;
  return temp;
}
inline ::mead101::mead::Source* Entry::_internal_mutable_source() {
  _has_bits_[0] |= 0x00000200u;
  if (source_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::Source>(GetArena());
    source_ = p;
  }
  return source_;
}
inline ::mead101::mead::Source* Entry::mutable_source() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Entry.source)
  return _internal_mutable_source();
}
inline void Entry::set_allocated_source(::mead101::mead::Source* source) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete source_;
  }
  if (source) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(source);
    if (message_arena != submessage_arena) {
      source = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, source, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  source_ = source;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.Entry.source)
}

// optional .mead101.mead.Text summary = 16;
inline bool Entry::_internal_has_summary() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || summary_ != nullptr);
  return value;
}
inline bool Entry::has_summary() const {
  return _internal_has_summary();
}
inline void Entry::clear_summary() {
  if (summary_ != nullptr) summary_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
inline const ::mead101::mead::Text& Entry::_internal_summary() const {
  const ::mead101::mead::Text* p = summary_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::Text*>(
      &::mead101::mead::_Text_default_instance_);
}
inline const ::mead101::mead::Text& Entry::summary() const {
  // @@protoc_insertion_point(field_get:mead101.mead.Entry.summary)
  return _internal_summary();
}
inline void Entry::unsafe_arena_set_allocated_summary(
    ::mead101::mead::Text* summary) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(summary_);
  }
  summary_ = summary;
  if (summary) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.Entry.summary)
}
inline ::mead101::mead::Text* Entry::release_summary() {
  _has_bits_[0] &= ~0x00000400u;
  ::mead101::mead::Text* temp = summary_;
  summary_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::Text* Entry::unsafe_arena_release_summary() {
  // @@protoc_insertion_point(field_release:mead101.mead.Entry.summary)
  _has_bits_[0] &= ~0x00000400u;
  ::mead101::mead::Text* temp = summary_;
  summary_ = nullptr;
  return temp;
}
inline ::mead101::mead::Text* Entry::_internal_mutable_summary() {
  _has_bits_[0] |= 0x00000400u;
  if (summary_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::Text>(GetArena());
    summary_ = p;
  }
  return summary_;
}
inline ::mead101::mead::Text* Entry::mutable_summary() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Entry.summary)
  return _internal_mutable_summary();
}
inline void Entry::set_allocated_summary(::mead101::mead::Text* summary) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete summary_;
  }
  if (summary) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(summary);
    if (message_arena != submessage_arena) {
      summary = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, summary, submessage_arena);
    }
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  summary_ = summary;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.Entry.summary)
}

// optional .mead101.mead.Text title = 17;
inline bool Entry::_internal_has_title() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || title_ != nullptr);
  return value;
}
inline bool Entry::has_title() const {
  return _internal_has_title();
}
inline void Entry::clear_title() {
  if (title_ != nullptr) title_->Clear();
  _has_bits_[0] &= ~0x00000800u;
}
inline const ::mead101::mead::Text& Entry::_internal_title() const {
  const ::mead101::mead::Text* p = title_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::Text*>(
      &::mead101::mead::_Text_default_instance_);
}
inline const ::mead101::mead::Text& Entry::title() const {
  // @@protoc_insertion_point(field_get:mead101.mead.Entry.title)
  return _internal_title();
}
inline void Entry::unsafe_arena_set_allocated_title(
    ::mead101::mead::Text* title) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(title_);
  }
  title_ = title;
  if (title) {
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.Entry.title)
}
inline ::mead101::mead::Text* Entry::release_title() {
  _has_bits_[0] &= ~0x00000800u;
  ::mead101::mead::Text* temp = title_;
  title_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::Text* Entry::unsafe_arena_release_title() {
  // @@protoc_insertion_point(field_release:mead101.mead.Entry.title)
  _has_bits_[0] &= ~0x00000800u;
  ::mead101::mead::Text* temp = title_;
  title_ = nullptr;
  return temp;
}
inline ::mead101::mead::Text* Entry::_internal_mutable_title() {
  _has_bits_[0] |= 0x00000800u;
  if (title_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::Text>(GetArena());
    title_ = p;
  }
  return title_;
}
inline ::mead101::mead::Text* Entry::mutable_title() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Entry.title)
  return _internal_mutable_title();
}
inline void Entry::set_allocated_title(::mead101::mead::Text* title) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete title_;
  }
  if (title) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(title);
    if (message_arena != submessage_arena) {
      title = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, title, submessage_arena);
    }
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  title_ = title;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.Entry.title)
}

// optional .mead101.mead.DateTime updated = 18;
inline bool Entry::_internal_has_updated() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  PROTOBUF_ASSUME(!value || updated_ != nullptr);
  return value;
}
inline bool Entry::has_updated() const {
  return _internal_has_updated();
}
inline void Entry::clear_updated() {
  if (updated_ != nullptr) updated_->Clear();
  _has_bits_[0] &= ~0x00001000u;
}
inline const ::mead101::mead::DateTime& Entry::_internal_updated() const {
  const ::mead101::mead::DateTime* p = updated_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::DateTime*>(
      &::mead101::mead::_DateTime_default_instance_);
}
inline const ::mead101::mead::DateTime& Entry::updated() const {
  // @@protoc_insertion_point(field_get:mead101.mead.Entry.updated)
  return _internal_updated();
}
inline void Entry::unsafe_arena_set_allocated_updated(
    ::mead101::mead::DateTime* updated) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_);
  }
  updated_ = updated;
  if (updated) {
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.Entry.updated)
}
inline ::mead101::mead::DateTime* Entry::release_updated() {
  _has_bits_[0] &= ~0x00001000u;
  ::mead101::mead::DateTime* temp = updated_;
  updated_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::DateTime* Entry::unsafe_arena_release_updated() {
  // @@protoc_insertion_point(field_release:mead101.mead.Entry.updated)
  _has_bits_[0] &= ~0x00001000u;
  ::mead101::mead::DateTime* temp = updated_;
  updated_ = nullptr;
  return temp;
}
inline ::mead101::mead::DateTime* Entry::_internal_mutable_updated() {
  _has_bits_[0] |= 0x00001000u;
  if (updated_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::DateTime>(GetArena());
    updated_ = p;
  }
  return updated_;
}
inline ::mead101::mead::DateTime* Entry::mutable_updated() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Entry.updated)
  return _internal_mutable_updated();
}
inline void Entry::set_allocated_updated(::mead101::mead::DateTime* updated) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete updated_;
  }
  if (updated) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(updated);
    if (message_arena != submessage_arena) {
      updated = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, updated, submessage_arena);
    }
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  updated_ = updated;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.Entry.updated)
}

// -------------------------------------------------------------------

// Epoch

// optional .mead101.avs.CurrentTerritoryCode applicable_territory_code = 1;
inline bool Epoch::_internal_has_applicable_territory_code() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || applicable_territory_code_ != nullptr);
  return value;
}
inline bool Epoch::has_applicable_territory_code() const {
  return _internal_has_applicable_territory_code();
}
inline const ::mead101::avs::CurrentTerritoryCode& Epoch::_internal_applicable_territory_code() const {
  const ::mead101::avs::CurrentTerritoryCode* p = applicable_territory_code_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::avs::CurrentTerritoryCode*>(
      &::mead101::avs::_CurrentTerritoryCode_default_instance_);
}
inline const ::mead101::avs::CurrentTerritoryCode& Epoch::applicable_territory_code() const {
  // @@protoc_insertion_point(field_get:mead101.mead.Epoch.applicable_territory_code)
  return _internal_applicable_territory_code();
}
inline void Epoch::unsafe_arena_set_allocated_applicable_territory_code(
    ::mead101::avs::CurrentTerritoryCode* applicable_territory_code) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(applicable_territory_code_);
  }
  applicable_territory_code_ = applicable_territory_code;
  if (applicable_territory_code) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.Epoch.applicable_territory_code)
}
inline ::mead101::avs::CurrentTerritoryCode* Epoch::release_applicable_territory_code() {
  _has_bits_[0] &= ~0x00000001u;
  ::mead101::avs::CurrentTerritoryCode* temp = applicable_territory_code_;
  applicable_territory_code_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::avs::CurrentTerritoryCode* Epoch::unsafe_arena_release_applicable_territory_code() {
  // @@protoc_insertion_point(field_release:mead101.mead.Epoch.applicable_territory_code)
  _has_bits_[0] &= ~0x00000001u;
  ::mead101::avs::CurrentTerritoryCode* temp = applicable_territory_code_;
  applicable_territory_code_ = nullptr;
  return temp;
}
inline ::mead101::avs::CurrentTerritoryCode* Epoch::_internal_mutable_applicable_territory_code() {
  _has_bits_[0] |= 0x00000001u;
  if (applicable_territory_code_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::avs::CurrentTerritoryCode>(GetArena());
    applicable_territory_code_ = p;
  }
  return applicable_territory_code_;
}
inline ::mead101::avs::CurrentTerritoryCode* Epoch::mutable_applicable_territory_code() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Epoch.applicable_territory_code)
  return _internal_mutable_applicable_territory_code();
}
inline void Epoch::set_allocated_applicable_territory_code(::mead101::avs::CurrentTerritoryCode* applicable_territory_code) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(applicable_territory_code_);
  }
  if (applicable_territory_code) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(applicable_territory_code)->GetArena();
    if (message_arena != submessage_arena) {
      applicable_territory_code = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, applicable_territory_code, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  applicable_territory_code_ = applicable_territory_code;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.Epoch.applicable_territory_code)
}

// optional .mead101.mead.Date end_date = 2;
inline bool Epoch::_internal_has_end_date() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || end_date_ != nullptr);
  return value;
}
inline bool Epoch::has_end_date() const {
  return _internal_has_end_date();
}
inline void Epoch::clear_end_date() {
  if (end_date_ != nullptr) end_date_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::mead101::mead::Date& Epoch::_internal_end_date() const {
  const ::mead101::mead::Date* p = end_date_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::Date*>(
      &::mead101::mead::_Date_default_instance_);
}
inline const ::mead101::mead::Date& Epoch::end_date() const {
  // @@protoc_insertion_point(field_get:mead101.mead.Epoch.end_date)
  return _internal_end_date();
}
inline void Epoch::unsafe_arena_set_allocated_end_date(
    ::mead101::mead::Date* end_date) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_date_);
  }
  end_date_ = end_date;
  if (end_date) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.Epoch.end_date)
}
inline ::mead101::mead::Date* Epoch::release_end_date() {
  _has_bits_[0] &= ~0x00000002u;
  ::mead101::mead::Date* temp = end_date_;
  end_date_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::Date* Epoch::unsafe_arena_release_end_date() {
  // @@protoc_insertion_point(field_release:mead101.mead.Epoch.end_date)
  _has_bits_[0] &= ~0x00000002u;
  ::mead101::mead::Date* temp = end_date_;
  end_date_ = nullptr;
  return temp;
}
inline ::mead101::mead::Date* Epoch::_internal_mutable_end_date() {
  _has_bits_[0] |= 0x00000002u;
  if (end_date_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::Date>(GetArena());
    end_date_ = p;
  }
  return end_date_;
}
inline ::mead101::mead::Date* Epoch::mutable_end_date() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Epoch.end_date)
  return _internal_mutable_end_date();
}
inline void Epoch::set_allocated_end_date(::mead101::mead::Date* end_date) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete end_date_;
  }
  if (end_date) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(end_date);
    if (message_arena != submessage_arena) {
      end_date = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end_date, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  end_date_ = end_date;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.Epoch.end_date)
}

// repeated string metadata_source_reference = 3;
inline int Epoch::_internal_metadata_source_reference_size() const {
  return metadata_source_reference_.size();
}
inline int Epoch::metadata_source_reference_size() const {
  return _internal_metadata_source_reference_size();
}
inline void Epoch::clear_metadata_source_reference() {
  metadata_source_reference_.Clear();
}
inline std::string* Epoch::add_metadata_source_reference() {
  // @@protoc_insertion_point(field_add_mutable:mead101.mead.Epoch.metadata_source_reference)
  return _internal_add_metadata_source_reference();
}
inline const std::string& Epoch::_internal_metadata_source_reference(int index) const {
  return metadata_source_reference_.Get(index);
}
inline const std::string& Epoch::metadata_source_reference(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.Epoch.metadata_source_reference)
  return _internal_metadata_source_reference(index);
}
inline std::string* Epoch::mutable_metadata_source_reference(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Epoch.metadata_source_reference)
  return metadata_source_reference_.Mutable(index);
}
inline void Epoch::set_metadata_source_reference(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:mead101.mead.Epoch.metadata_source_reference)
  metadata_source_reference_.Mutable(index)->assign(value);
}
inline void Epoch::set_metadata_source_reference(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:mead101.mead.Epoch.metadata_source_reference)
  metadata_source_reference_.Mutable(index)->assign(std::move(value));
}
inline void Epoch::set_metadata_source_reference(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  metadata_source_reference_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mead101.mead.Epoch.metadata_source_reference)
}
inline void Epoch::set_metadata_source_reference(int index, const char* value, size_t size) {
  metadata_source_reference_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.Epoch.metadata_source_reference)
}
inline std::string* Epoch::_internal_add_metadata_source_reference() {
  return metadata_source_reference_.Add();
}
inline void Epoch::add_metadata_source_reference(const std::string& value) {
  metadata_source_reference_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mead101.mead.Epoch.metadata_source_reference)
}
inline void Epoch::add_metadata_source_reference(std::string&& value) {
  metadata_source_reference_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:mead101.mead.Epoch.metadata_source_reference)
}
inline void Epoch::add_metadata_source_reference(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  metadata_source_reference_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mead101.mead.Epoch.metadata_source_reference)
}
inline void Epoch::add_metadata_source_reference(const char* value, size_t size) {
  metadata_source_reference_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mead101.mead.Epoch.metadata_source_reference)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Epoch::metadata_source_reference() const {
  // @@protoc_insertion_point(field_list:mead101.mead.Epoch.metadata_source_reference)
  return metadata_source_reference_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Epoch::mutable_metadata_source_reference() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.Epoch.metadata_source_reference)
  return &metadata_source_reference_;
}

// repeated .mead101.mead.PartyWithNames related_artist = 4;
inline int Epoch::_internal_related_artist_size() const {
  return related_artist_.size();
}
inline int Epoch::related_artist_size() const {
  return _internal_related_artist_size();
}
inline void Epoch::clear_related_artist() {
  related_artist_.Clear();
}
inline ::mead101::mead::PartyWithNames* Epoch::mutable_related_artist(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Epoch.related_artist)
  return related_artist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::PartyWithNames >*
Epoch::mutable_related_artist() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.Epoch.related_artist)
  return &related_artist_;
}
inline const ::mead101::mead::PartyWithNames& Epoch::_internal_related_artist(int index) const {
  return related_artist_.Get(index);
}
inline const ::mead101::mead::PartyWithNames& Epoch::related_artist(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.Epoch.related_artist)
  return _internal_related_artist(index);
}
inline ::mead101::mead::PartyWithNames* Epoch::_internal_add_related_artist() {
  return related_artist_.Add();
}
inline ::mead101::mead::PartyWithNames* Epoch::add_related_artist() {
  // @@protoc_insertion_point(field_add:mead101.mead.Epoch.related_artist)
  return _internal_add_related_artist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::PartyWithNames >&
Epoch::related_artist() const {
  // @@protoc_insertion_point(field_list:mead101.mead.Epoch.related_artist)
  return related_artist_;
}

// repeated .mead101.mead.RelatedCreation related_creation = 5;
inline int Epoch::_internal_related_creation_size() const {
  return related_creation_.size();
}
inline int Epoch::related_creation_size() const {
  return _internal_related_creation_size();
}
inline void Epoch::clear_related_creation() {
  related_creation_.Clear();
}
inline ::mead101::mead::RelatedCreation* Epoch::mutable_related_creation(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Epoch.related_creation)
  return related_creation_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::RelatedCreation >*
Epoch::mutable_related_creation() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.Epoch.related_creation)
  return &related_creation_;
}
inline const ::mead101::mead::RelatedCreation& Epoch::_internal_related_creation(int index) const {
  return related_creation_.Get(index);
}
inline const ::mead101::mead::RelatedCreation& Epoch::related_creation(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.Epoch.related_creation)
  return _internal_related_creation(index);
}
inline ::mead101::mead::RelatedCreation* Epoch::_internal_add_related_creation() {
  return related_creation_.Add();
}
inline ::mead101::mead::RelatedCreation* Epoch::add_related_creation() {
  // @@protoc_insertion_point(field_add:mead101.mead.Epoch.related_creation)
  return _internal_add_related_creation();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::RelatedCreation >&
Epoch::related_creation() const {
  // @@protoc_insertion_point(field_list:mead101.mead.Epoch.related_creation)
  return related_creation_;
}

// optional .mead101.mead.Date start_date = 6;
inline bool Epoch::_internal_has_start_date() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || start_date_ != nullptr);
  return value;
}
inline bool Epoch::has_start_date() const {
  return _internal_has_start_date();
}
inline void Epoch::clear_start_date() {
  if (start_date_ != nullptr) start_date_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::mead101::mead::Date& Epoch::_internal_start_date() const {
  const ::mead101::mead::Date* p = start_date_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::Date*>(
      &::mead101::mead::_Date_default_instance_);
}
inline const ::mead101::mead::Date& Epoch::start_date() const {
  // @@protoc_insertion_point(field_get:mead101.mead.Epoch.start_date)
  return _internal_start_date();
}
inline void Epoch::unsafe_arena_set_allocated_start_date(
    ::mead101::mead::Date* start_date) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_date_);
  }
  start_date_ = start_date;
  if (start_date) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.Epoch.start_date)
}
inline ::mead101::mead::Date* Epoch::release_start_date() {
  _has_bits_[0] &= ~0x00000004u;
  ::mead101::mead::Date* temp = start_date_;
  start_date_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::Date* Epoch::unsafe_arena_release_start_date() {
  // @@protoc_insertion_point(field_release:mead101.mead.Epoch.start_date)
  _has_bits_[0] &= ~0x00000004u;
  ::mead101::mead::Date* temp = start_date_;
  start_date_ = nullptr;
  return temp;
}
inline ::mead101::mead::Date* Epoch::_internal_mutable_start_date() {
  _has_bits_[0] |= 0x00000004u;
  if (start_date_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::Date>(GetArena());
    start_date_ = p;
  }
  return start_date_;
}
inline ::mead101::mead::Date* Epoch::mutable_start_date() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Epoch.start_date)
  return _internal_mutable_start_date();
}
inline void Epoch::set_allocated_start_date(::mead101::mead::Date* start_date) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete start_date_;
  }
  if (start_date) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(start_date);
    if (message_arena != submessage_arena) {
      start_date = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start_date, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  start_date_ = start_date;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.Epoch.start_date)
}

// repeated .mead101.mead.Name value = 7;
inline int Epoch::_internal_value_size() const {
  return value_.size();
}
inline int Epoch::value_size() const {
  return _internal_value_size();
}
inline void Epoch::clear_value() {
  value_.Clear();
}
inline ::mead101::mead::Name* Epoch::mutable_value(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Epoch.value)
  return value_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Name >*
Epoch::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.Epoch.value)
  return &value_;
}
inline const ::mead101::mead::Name& Epoch::_internal_value(int index) const {
  return value_.Get(index);
}
inline const ::mead101::mead::Name& Epoch::value(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.Epoch.value)
  return _internal_value(index);
}
inline ::mead101::mead::Name* Epoch::_internal_add_value() {
  return value_.Add();
}
inline ::mead101::mead::Name* Epoch::add_value() {
  // @@protoc_insertion_point(field_add:mead101.mead.Epoch.value)
  return _internal_add_value();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Name >&
Epoch::value() const {
  // @@protoc_insertion_point(field_list:mead101.mead.Epoch.value)
  return value_;
}

// -------------------------------------------------------------------

// EventDate

// optional .mead101.avs.AllTerritoryCode applicable_territory_code = 1;
inline bool EventDate::_internal_has_applicable_territory_code() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || applicable_territory_code_ != nullptr);
  return value;
}
inline bool EventDate::has_applicable_territory_code() const {
  return _internal_has_applicable_territory_code();
}
inline const ::mead101::avs::AllTerritoryCode& EventDate::_internal_applicable_territory_code() const {
  const ::mead101::avs::AllTerritoryCode* p = applicable_territory_code_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::avs::AllTerritoryCode*>(
      &::mead101::avs::_AllTerritoryCode_default_instance_);
}
inline const ::mead101::avs::AllTerritoryCode& EventDate::applicable_territory_code() const {
  // @@protoc_insertion_point(field_get:mead101.mead.EventDate.applicable_territory_code)
  return _internal_applicable_territory_code();
}
inline void EventDate::unsafe_arena_set_allocated_applicable_territory_code(
    ::mead101::avs::AllTerritoryCode* applicable_territory_code) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(applicable_territory_code_);
  }
  applicable_territory_code_ = applicable_territory_code;
  if (applicable_territory_code) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.EventDate.applicable_territory_code)
}
inline ::mead101::avs::AllTerritoryCode* EventDate::release_applicable_territory_code() {
  _has_bits_[0] &= ~0x00000004u;
  ::mead101::avs::AllTerritoryCode* temp = applicable_territory_code_;
  applicable_territory_code_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::avs::AllTerritoryCode* EventDate::unsafe_arena_release_applicable_territory_code() {
  // @@protoc_insertion_point(field_release:mead101.mead.EventDate.applicable_territory_code)
  _has_bits_[0] &= ~0x00000004u;
  ::mead101::avs::AllTerritoryCode* temp = applicable_territory_code_;
  applicable_territory_code_ = nullptr;
  return temp;
}
inline ::mead101::avs::AllTerritoryCode* EventDate::_internal_mutable_applicable_territory_code() {
  _has_bits_[0] |= 0x00000004u;
  if (applicable_territory_code_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::avs::AllTerritoryCode>(GetArena());
    applicable_territory_code_ = p;
  }
  return applicable_territory_code_;
}
inline ::mead101::avs::AllTerritoryCode* EventDate::mutable_applicable_territory_code() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.EventDate.applicable_territory_code)
  return _internal_mutable_applicable_territory_code();
}
inline void EventDate::set_allocated_applicable_territory_code(::mead101::avs::AllTerritoryCode* applicable_territory_code) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(applicable_territory_code_);
  }
  if (applicable_territory_code) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(applicable_territory_code)->GetArena();
    if (message_arena != submessage_arena) {
      applicable_territory_code = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, applicable_territory_code, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  applicable_territory_code_ = applicable_territory_code;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.EventDate.applicable_territory_code)
}

// optional bool is_after = 2;
inline bool EventDate::_internal_has_is_after() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool EventDate::has_is_after() const {
  return _internal_has_is_after();
}
inline void EventDate::clear_is_after() {
  is_after_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool EventDate::_internal_is_after() const {
  return is_after_;
}
inline bool EventDate::is_after() const {
  // @@protoc_insertion_point(field_get:mead101.mead.EventDate.is_after)
  return _internal_is_after();
}
inline void EventDate::_internal_set_is_after(bool value) {
  _has_bits_[0] |= 0x00000010u;
  is_after_ = value;
}
inline void EventDate::set_is_after(bool value) {
  _internal_set_is_after(value);
  // @@protoc_insertion_point(field_set:mead101.mead.EventDate.is_after)
}

// optional bool is_approximate = 3;
inline bool EventDate::_internal_has_is_approximate() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool EventDate::has_is_approximate() const {
  return _internal_has_is_approximate();
}
inline void EventDate::clear_is_approximate() {
  is_approximate_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool EventDate::_internal_is_approximate() const {
  return is_approximate_;
}
inline bool EventDate::is_approximate() const {
  // @@protoc_insertion_point(field_get:mead101.mead.EventDate.is_approximate)
  return _internal_is_approximate();
}
inline void EventDate::_internal_set_is_approximate(bool value) {
  _has_bits_[0] |= 0x00000020u;
  is_approximate_ = value;
}
inline void EventDate::set_is_approximate(bool value) {
  _internal_set_is_approximate(value);
  // @@protoc_insertion_point(field_set:mead101.mead.EventDate.is_approximate)
}

// optional bool is_before = 4;
inline bool EventDate::_internal_has_is_before() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool EventDate::has_is_before() const {
  return _internal_has_is_before();
}
inline void EventDate::clear_is_before() {
  is_before_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool EventDate::_internal_is_before() const {
  return is_before_;
}
inline bool EventDate::is_before() const {
  // @@protoc_insertion_point(field_get:mead101.mead.EventDate.is_before)
  return _internal_is_before();
}
inline void EventDate::_internal_set_is_before(bool value) {
  _has_bits_[0] |= 0x00000040u;
  is_before_ = value;
}
inline void EventDate::set_is_before(bool value) {
  _internal_set_is_before(value);
  // @@protoc_insertion_point(field_set:mead101.mead.EventDate.is_before)
}

// optional string language_and_script_code = 5;
inline bool EventDate::_internal_has_language_and_script_code() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool EventDate::has_language_and_script_code() const {
  return _internal_has_language_and_script_code();
}
inline void EventDate::clear_language_and_script_code() {
  language_and_script_code_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& EventDate::language_and_script_code() const {
  // @@protoc_insertion_point(field_get:mead101.mead.EventDate.language_and_script_code)
  return _internal_language_and_script_code();
}
inline void EventDate::set_language_and_script_code(const std::string& value) {
  _internal_set_language_and_script_code(value);
  // @@protoc_insertion_point(field_set:mead101.mead.EventDate.language_and_script_code)
}
inline std::string* EventDate::mutable_language_and_script_code() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.EventDate.language_and_script_code)
  return _internal_mutable_language_and_script_code();
}
inline const std::string& EventDate::_internal_language_and_script_code() const {
  return language_and_script_code_.Get();
}
inline void EventDate::_internal_set_language_and_script_code(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  language_and_script_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void EventDate::set_language_and_script_code(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  language_and_script_code_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.EventDate.language_and_script_code)
}
inline void EventDate::set_language_and_script_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  language_and_script_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.EventDate.language_and_script_code)
}
inline void EventDate::set_language_and_script_code(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  language_and_script_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.EventDate.language_and_script_code)
}
inline std::string* EventDate::_internal_mutable_language_and_script_code() {
  _has_bits_[0] |= 0x00000001u;
  return language_and_script_code_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* EventDate::release_language_and_script_code() {
  // @@protoc_insertion_point(field_release:mead101.mead.EventDate.language_and_script_code)
  if (!_internal_has_language_and_script_code()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return language_and_script_code_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EventDate::set_allocated_language_and_script_code(std::string* language_and_script_code) {
  if (language_and_script_code != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  language_and_script_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), language_and_script_code,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.EventDate.language_and_script_code)
}

// optional string location_description = 6;
inline bool EventDate::_internal_has_location_description() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool EventDate::has_location_description() const {
  return _internal_has_location_description();
}
inline void EventDate::clear_location_description() {
  location_description_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& EventDate::location_description() const {
  // @@protoc_insertion_point(field_get:mead101.mead.EventDate.location_description)
  return _internal_location_description();
}
inline void EventDate::set_location_description(const std::string& value) {
  _internal_set_location_description(value);
  // @@protoc_insertion_point(field_set:mead101.mead.EventDate.location_description)
}
inline std::string* EventDate::mutable_location_description() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.EventDate.location_description)
  return _internal_mutable_location_description();
}
inline const std::string& EventDate::_internal_location_description() const {
  return location_description_.Get();
}
inline void EventDate::_internal_set_location_description(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  location_description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void EventDate::set_location_description(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  location_description_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.EventDate.location_description)
}
inline void EventDate::set_location_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  location_description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.EventDate.location_description)
}
inline void EventDate::set_location_description(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  location_description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.EventDate.location_description)
}
inline std::string* EventDate::_internal_mutable_location_description() {
  _has_bits_[0] |= 0x00000002u;
  return location_description_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* EventDate::release_location_description() {
  // @@protoc_insertion_point(field_release:mead101.mead.EventDate.location_description)
  if (!_internal_has_location_description()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return location_description_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EventDate::set_allocated_location_description(std::string* location_description) {
  if (location_description != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  location_description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), location_description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.EventDate.location_description)
}

// optional .mead101.mead.ddex_IsoDate ext_value = 7;
inline bool EventDate::_internal_has_ext_value() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || ext_value_ != nullptr);
  return value;
}
inline bool EventDate::has_ext_value() const {
  return _internal_has_ext_value();
}
inline void EventDate::clear_ext_value() {
  if (ext_value_ != nullptr) ext_value_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::mead101::mead::ddex_IsoDate& EventDate::_internal_ext_value() const {
  const ::mead101::mead::ddex_IsoDate* p = ext_value_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::ddex_IsoDate*>(
      &::mead101::mead::_ddex_IsoDate_default_instance_);
}
inline const ::mead101::mead::ddex_IsoDate& EventDate::ext_value() const {
  // @@protoc_insertion_point(field_get:mead101.mead.EventDate.ext_value)
  return _internal_ext_value();
}
inline void EventDate::unsafe_arena_set_allocated_ext_value(
    ::mead101::mead::ddex_IsoDate* ext_value) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext_value_);
  }
  ext_value_ = ext_value;
  if (ext_value) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.EventDate.ext_value)
}
inline ::mead101::mead::ddex_IsoDate* EventDate::release_ext_value() {
  _has_bits_[0] &= ~0x00000008u;
  ::mead101::mead::ddex_IsoDate* temp = ext_value_;
  ext_value_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::ddex_IsoDate* EventDate::unsafe_arena_release_ext_value() {
  // @@protoc_insertion_point(field_release:mead101.mead.EventDate.ext_value)
  _has_bits_[0] &= ~0x00000008u;
  ::mead101::mead::ddex_IsoDate* temp = ext_value_;
  ext_value_ = nullptr;
  return temp;
}
inline ::mead101::mead::ddex_IsoDate* EventDate::_internal_mutable_ext_value() {
  _has_bits_[0] |= 0x00000008u;
  if (ext_value_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::ddex_IsoDate>(GetArena());
    ext_value_ = p;
  }
  return ext_value_;
}
inline ::mead101::mead::ddex_IsoDate* EventDate::mutable_ext_value() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.EventDate.ext_value)
  return _internal_mutable_ext_value();
}
inline void EventDate::set_allocated_ext_value(::mead101::mead::ddex_IsoDate* ext_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete ext_value_;
  }
  if (ext_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ext_value);
    if (message_arena != submessage_arena) {
      ext_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext_value, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  ext_value_ = ext_value;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.EventDate.ext_value)
}

// -------------------------------------------------------------------

// EventDateTime

// optional bool is_after = 1;
inline bool EventDateTime::_internal_has_is_after() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool EventDateTime::has_is_after() const {
  return _internal_has_is_after();
}
inline void EventDateTime::clear_is_after() {
  is_after_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool EventDateTime::_internal_is_after() const {
  return is_after_;
}
inline bool EventDateTime::is_after() const {
  // @@protoc_insertion_point(field_get:mead101.mead.EventDateTime.is_after)
  return _internal_is_after();
}
inline void EventDateTime::_internal_set_is_after(bool value) {
  _has_bits_[0] |= 0x00000010u;
  is_after_ = value;
}
inline void EventDateTime::set_is_after(bool value) {
  _internal_set_is_after(value);
  // @@protoc_insertion_point(field_set:mead101.mead.EventDateTime.is_after)
}

// optional bool is_approximate = 2;
inline bool EventDateTime::_internal_has_is_approximate() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool EventDateTime::has_is_approximate() const {
  return _internal_has_is_approximate();
}
inline void EventDateTime::clear_is_approximate() {
  is_approximate_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool EventDateTime::_internal_is_approximate() const {
  return is_approximate_;
}
inline bool EventDateTime::is_approximate() const {
  // @@protoc_insertion_point(field_get:mead101.mead.EventDateTime.is_approximate)
  return _internal_is_approximate();
}
inline void EventDateTime::_internal_set_is_approximate(bool value) {
  _has_bits_[0] |= 0x00000020u;
  is_approximate_ = value;
}
inline void EventDateTime::set_is_approximate(bool value) {
  _internal_set_is_approximate(value);
  // @@protoc_insertion_point(field_set:mead101.mead.EventDateTime.is_approximate)
}

// optional bool is_before = 3;
inline bool EventDateTime::_internal_has_is_before() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool EventDateTime::has_is_before() const {
  return _internal_has_is_before();
}
inline void EventDateTime::clear_is_before() {
  is_before_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool EventDateTime::_internal_is_before() const {
  return is_before_;
}
inline bool EventDateTime::is_before() const {
  // @@protoc_insertion_point(field_get:mead101.mead.EventDateTime.is_before)
  return _internal_is_before();
}
inline void EventDateTime::_internal_set_is_before(bool value) {
  _has_bits_[0] |= 0x00000040u;
  is_before_ = value;
}
inline void EventDateTime::set_is_before(bool value) {
  _internal_set_is_before(value);
  // @@protoc_insertion_point(field_set:mead101.mead.EventDateTime.is_before)
}

// optional string language_and_script_code = 4;
inline bool EventDateTime::_internal_has_language_and_script_code() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool EventDateTime::has_language_and_script_code() const {
  return _internal_has_language_and_script_code();
}
inline void EventDateTime::clear_language_and_script_code() {
  language_and_script_code_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& EventDateTime::language_and_script_code() const {
  // @@protoc_insertion_point(field_get:mead101.mead.EventDateTime.language_and_script_code)
  return _internal_language_and_script_code();
}
inline void EventDateTime::set_language_and_script_code(const std::string& value) {
  _internal_set_language_and_script_code(value);
  // @@protoc_insertion_point(field_set:mead101.mead.EventDateTime.language_and_script_code)
}
inline std::string* EventDateTime::mutable_language_and_script_code() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.EventDateTime.language_and_script_code)
  return _internal_mutable_language_and_script_code();
}
inline const std::string& EventDateTime::_internal_language_and_script_code() const {
  return language_and_script_code_.Get();
}
inline void EventDateTime::_internal_set_language_and_script_code(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  language_and_script_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void EventDateTime::set_language_and_script_code(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  language_and_script_code_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.EventDateTime.language_and_script_code)
}
inline void EventDateTime::set_language_and_script_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  language_and_script_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.EventDateTime.language_and_script_code)
}
inline void EventDateTime::set_language_and_script_code(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  language_and_script_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.EventDateTime.language_and_script_code)
}
inline std::string* EventDateTime::_internal_mutable_language_and_script_code() {
  _has_bits_[0] |= 0x00000001u;
  return language_and_script_code_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* EventDateTime::release_language_and_script_code() {
  // @@protoc_insertion_point(field_release:mead101.mead.EventDateTime.language_and_script_code)
  if (!_internal_has_language_and_script_code()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return language_and_script_code_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EventDateTime::set_allocated_language_and_script_code(std::string* language_and_script_code) {
  if (language_and_script_code != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  language_and_script_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), language_and_script_code,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.EventDateTime.language_and_script_code)
}

// optional string location_description = 5;
inline bool EventDateTime::_internal_has_location_description() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool EventDateTime::has_location_description() const {
  return _internal_has_location_description();
}
inline void EventDateTime::clear_location_description() {
  location_description_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& EventDateTime::location_description() const {
  // @@protoc_insertion_point(field_get:mead101.mead.EventDateTime.location_description)
  return _internal_location_description();
}
inline void EventDateTime::set_location_description(const std::string& value) {
  _internal_set_location_description(value);
  // @@protoc_insertion_point(field_set:mead101.mead.EventDateTime.location_description)
}
inline std::string* EventDateTime::mutable_location_description() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.EventDateTime.location_description)
  return _internal_mutable_location_description();
}
inline const std::string& EventDateTime::_internal_location_description() const {
  return location_description_.Get();
}
inline void EventDateTime::_internal_set_location_description(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  location_description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void EventDateTime::set_location_description(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  location_description_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.EventDateTime.location_description)
}
inline void EventDateTime::set_location_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  location_description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.EventDateTime.location_description)
}
inline void EventDateTime::set_location_description(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  location_description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.EventDateTime.location_description)
}
inline std::string* EventDateTime::_internal_mutable_location_description() {
  _has_bits_[0] |= 0x00000002u;
  return location_description_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* EventDateTime::release_location_description() {
  // @@protoc_insertion_point(field_release:mead101.mead.EventDateTime.location_description)
  if (!_internal_has_location_description()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return location_description_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EventDateTime::set_allocated_location_description(std::string* location_description) {
  if (location_description != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  location_description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), location_description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.EventDateTime.location_description)
}

// optional .mead101.avs.AllTerritoryCode territory_code = 6;
inline bool EventDateTime::_internal_has_territory_code() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || territory_code_ != nullptr);
  return value;
}
inline bool EventDateTime::has_territory_code() const {
  return _internal_has_territory_code();
}
inline const ::mead101::avs::AllTerritoryCode& EventDateTime::_internal_territory_code() const {
  const ::mead101::avs::AllTerritoryCode* p = territory_code_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::avs::AllTerritoryCode*>(
      &::mead101::avs::_AllTerritoryCode_default_instance_);
}
inline const ::mead101::avs::AllTerritoryCode& EventDateTime::territory_code() const {
  // @@protoc_insertion_point(field_get:mead101.mead.EventDateTime.territory_code)
  return _internal_territory_code();
}
inline void EventDateTime::unsafe_arena_set_allocated_territory_code(
    ::mead101::avs::AllTerritoryCode* territory_code) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(territory_code_);
  }
  territory_code_ = territory_code;
  if (territory_code) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.EventDateTime.territory_code)
}
inline ::mead101::avs::AllTerritoryCode* EventDateTime::release_territory_code() {
  _has_bits_[0] &= ~0x00000008u;
  ::mead101::avs::AllTerritoryCode* temp = territory_code_;
  territory_code_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::avs::AllTerritoryCode* EventDateTime::unsafe_arena_release_territory_code() {
  // @@protoc_insertion_point(field_release:mead101.mead.EventDateTime.territory_code)
  _has_bits_[0] &= ~0x00000008u;
  ::mead101::avs::AllTerritoryCode* temp = territory_code_;
  territory_code_ = nullptr;
  return temp;
}
inline ::mead101::avs::AllTerritoryCode* EventDateTime::_internal_mutable_territory_code() {
  _has_bits_[0] |= 0x00000008u;
  if (territory_code_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::avs::AllTerritoryCode>(GetArena());
    territory_code_ = p;
  }
  return territory_code_;
}
inline ::mead101::avs::AllTerritoryCode* EventDateTime::mutable_territory_code() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.EventDateTime.territory_code)
  return _internal_mutable_territory_code();
}
inline void EventDateTime::set_allocated_territory_code(::mead101::avs::AllTerritoryCode* territory_code) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(territory_code_);
  }
  if (territory_code) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(territory_code)->GetArena();
    if (message_arena != submessage_arena) {
      territory_code = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, territory_code, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  territory_code_ = territory_code;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.EventDateTime.territory_code)
}

// optional string ext_value = 7;
inline bool EventDateTime::_internal_has_ext_value() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool EventDateTime::has_ext_value() const {
  return _internal_has_ext_value();
}
inline void EventDateTime::clear_ext_value() {
  ext_value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& EventDateTime::ext_value() const {
  // @@protoc_insertion_point(field_get:mead101.mead.EventDateTime.ext_value)
  return _internal_ext_value();
}
inline void EventDateTime::set_ext_value(const std::string& value) {
  _internal_set_ext_value(value);
  // @@protoc_insertion_point(field_set:mead101.mead.EventDateTime.ext_value)
}
inline std::string* EventDateTime::mutable_ext_value() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.EventDateTime.ext_value)
  return _internal_mutable_ext_value();
}
inline const std::string& EventDateTime::_internal_ext_value() const {
  return ext_value_.Get();
}
inline void EventDateTime::_internal_set_ext_value(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  ext_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void EventDateTime::set_ext_value(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  ext_value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.EventDateTime.ext_value)
}
inline void EventDateTime::set_ext_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  ext_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.EventDateTime.ext_value)
}
inline void EventDateTime::set_ext_value(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  ext_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.EventDateTime.ext_value)
}
inline std::string* EventDateTime::_internal_mutable_ext_value() {
  _has_bits_[0] |= 0x00000004u;
  return ext_value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* EventDateTime::release_ext_value() {
  // @@protoc_insertion_point(field_release:mead101.mead.EventDateTime.ext_value)
  if (!_internal_has_ext_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return ext_value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EventDateTime::set_allocated_ext_value(std::string* ext_value) {
  if (ext_value != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  ext_value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ext_value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.EventDateTime.ext_value)
}

// -------------------------------------------------------------------

// EventDateWithoutFlags

// optional .mead101.avs.AllTerritoryCode applicable_territory_code = 1;
inline bool EventDateWithoutFlags::_internal_has_applicable_territory_code() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || applicable_territory_code_ != nullptr);
  return value;
}
inline bool EventDateWithoutFlags::has_applicable_territory_code() const {
  return _internal_has_applicable_territory_code();
}
inline const ::mead101::avs::AllTerritoryCode& EventDateWithoutFlags::_internal_applicable_territory_code() const {
  const ::mead101::avs::AllTerritoryCode* p = applicable_territory_code_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::avs::AllTerritoryCode*>(
      &::mead101::avs::_AllTerritoryCode_default_instance_);
}
inline const ::mead101::avs::AllTerritoryCode& EventDateWithoutFlags::applicable_territory_code() const {
  // @@protoc_insertion_point(field_get:mead101.mead.EventDateWithoutFlags.applicable_territory_code)
  return _internal_applicable_territory_code();
}
inline void EventDateWithoutFlags::unsafe_arena_set_allocated_applicable_territory_code(
    ::mead101::avs::AllTerritoryCode* applicable_territory_code) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(applicable_territory_code_);
  }
  applicable_territory_code_ = applicable_territory_code;
  if (applicable_territory_code) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.EventDateWithoutFlags.applicable_territory_code)
}
inline ::mead101::avs::AllTerritoryCode* EventDateWithoutFlags::release_applicable_territory_code() {
  _has_bits_[0] &= ~0x00000004u;
  ::mead101::avs::AllTerritoryCode* temp = applicable_territory_code_;
  applicable_territory_code_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::avs::AllTerritoryCode* EventDateWithoutFlags::unsafe_arena_release_applicable_territory_code() {
  // @@protoc_insertion_point(field_release:mead101.mead.EventDateWithoutFlags.applicable_territory_code)
  _has_bits_[0] &= ~0x00000004u;
  ::mead101::avs::AllTerritoryCode* temp = applicable_territory_code_;
  applicable_territory_code_ = nullptr;
  return temp;
}
inline ::mead101::avs::AllTerritoryCode* EventDateWithoutFlags::_internal_mutable_applicable_territory_code() {
  _has_bits_[0] |= 0x00000004u;
  if (applicable_territory_code_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::avs::AllTerritoryCode>(GetArena());
    applicable_territory_code_ = p;
  }
  return applicable_territory_code_;
}
inline ::mead101::avs::AllTerritoryCode* EventDateWithoutFlags::mutable_applicable_territory_code() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.EventDateWithoutFlags.applicable_territory_code)
  return _internal_mutable_applicable_territory_code();
}
inline void EventDateWithoutFlags::set_allocated_applicable_territory_code(::mead101::avs::AllTerritoryCode* applicable_territory_code) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(applicable_territory_code_);
  }
  if (applicable_territory_code) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(applicable_territory_code)->GetArena();
    if (message_arena != submessage_arena) {
      applicable_territory_code = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, applicable_territory_code, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  applicable_territory_code_ = applicable_territory_code;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.EventDateWithoutFlags.applicable_territory_code)
}

// optional bool is_approximate = 2;
inline bool EventDateWithoutFlags::_internal_has_is_approximate() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool EventDateWithoutFlags::has_is_approximate() const {
  return _internal_has_is_approximate();
}
inline void EventDateWithoutFlags::clear_is_approximate() {
  is_approximate_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool EventDateWithoutFlags::_internal_is_approximate() const {
  return is_approximate_;
}
inline bool EventDateWithoutFlags::is_approximate() const {
  // @@protoc_insertion_point(field_get:mead101.mead.EventDateWithoutFlags.is_approximate)
  return _internal_is_approximate();
}
inline void EventDateWithoutFlags::_internal_set_is_approximate(bool value) {
  _has_bits_[0] |= 0x00000010u;
  is_approximate_ = value;
}
inline void EventDateWithoutFlags::set_is_approximate(bool value) {
  _internal_set_is_approximate(value);
  // @@protoc_insertion_point(field_set:mead101.mead.EventDateWithoutFlags.is_approximate)
}

// optional string language_and_script_code = 3;
inline bool EventDateWithoutFlags::_internal_has_language_and_script_code() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool EventDateWithoutFlags::has_language_and_script_code() const {
  return _internal_has_language_and_script_code();
}
inline void EventDateWithoutFlags::clear_language_and_script_code() {
  language_and_script_code_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& EventDateWithoutFlags::language_and_script_code() const {
  // @@protoc_insertion_point(field_get:mead101.mead.EventDateWithoutFlags.language_and_script_code)
  return _internal_language_and_script_code();
}
inline void EventDateWithoutFlags::set_language_and_script_code(const std::string& value) {
  _internal_set_language_and_script_code(value);
  // @@protoc_insertion_point(field_set:mead101.mead.EventDateWithoutFlags.language_and_script_code)
}
inline std::string* EventDateWithoutFlags::mutable_language_and_script_code() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.EventDateWithoutFlags.language_and_script_code)
  return _internal_mutable_language_and_script_code();
}
inline const std::string& EventDateWithoutFlags::_internal_language_and_script_code() const {
  return language_and_script_code_.Get();
}
inline void EventDateWithoutFlags::_internal_set_language_and_script_code(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  language_and_script_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void EventDateWithoutFlags::set_language_and_script_code(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  language_and_script_code_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.EventDateWithoutFlags.language_and_script_code)
}
inline void EventDateWithoutFlags::set_language_and_script_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  language_and_script_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.EventDateWithoutFlags.language_and_script_code)
}
inline void EventDateWithoutFlags::set_language_and_script_code(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  language_and_script_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.EventDateWithoutFlags.language_and_script_code)
}
inline std::string* EventDateWithoutFlags::_internal_mutable_language_and_script_code() {
  _has_bits_[0] |= 0x00000001u;
  return language_and_script_code_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* EventDateWithoutFlags::release_language_and_script_code() {
  // @@protoc_insertion_point(field_release:mead101.mead.EventDateWithoutFlags.language_and_script_code)
  if (!_internal_has_language_and_script_code()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return language_and_script_code_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EventDateWithoutFlags::set_allocated_language_and_script_code(std::string* language_and_script_code) {
  if (language_and_script_code != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  language_and_script_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), language_and_script_code,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.EventDateWithoutFlags.language_and_script_code)
}

// optional string location_description = 4;
inline bool EventDateWithoutFlags::_internal_has_location_description() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool EventDateWithoutFlags::has_location_description() const {
  return _internal_has_location_description();
}
inline void EventDateWithoutFlags::clear_location_description() {
  location_description_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& EventDateWithoutFlags::location_description() const {
  // @@protoc_insertion_point(field_get:mead101.mead.EventDateWithoutFlags.location_description)
  return _internal_location_description();
}
inline void EventDateWithoutFlags::set_location_description(const std::string& value) {
  _internal_set_location_description(value);
  // @@protoc_insertion_point(field_set:mead101.mead.EventDateWithoutFlags.location_description)
}
inline std::string* EventDateWithoutFlags::mutable_location_description() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.EventDateWithoutFlags.location_description)
  return _internal_mutable_location_description();
}
inline const std::string& EventDateWithoutFlags::_internal_location_description() const {
  return location_description_.Get();
}
inline void EventDateWithoutFlags::_internal_set_location_description(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  location_description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void EventDateWithoutFlags::set_location_description(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  location_description_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.EventDateWithoutFlags.location_description)
}
inline void EventDateWithoutFlags::set_location_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  location_description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.EventDateWithoutFlags.location_description)
}
inline void EventDateWithoutFlags::set_location_description(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  location_description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.EventDateWithoutFlags.location_description)
}
inline std::string* EventDateWithoutFlags::_internal_mutable_location_description() {
  _has_bits_[0] |= 0x00000002u;
  return location_description_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* EventDateWithoutFlags::release_location_description() {
  // @@protoc_insertion_point(field_release:mead101.mead.EventDateWithoutFlags.location_description)
  if (!_internal_has_location_description()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return location_description_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EventDateWithoutFlags::set_allocated_location_description(std::string* location_description) {
  if (location_description != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  location_description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), location_description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.EventDateWithoutFlags.location_description)
}

// optional .mead101.mead.ddex_IsoDate ext_value = 5;
inline bool EventDateWithoutFlags::_internal_has_ext_value() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || ext_value_ != nullptr);
  return value;
}
inline bool EventDateWithoutFlags::has_ext_value() const {
  return _internal_has_ext_value();
}
inline void EventDateWithoutFlags::clear_ext_value() {
  if (ext_value_ != nullptr) ext_value_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::mead101::mead::ddex_IsoDate& EventDateWithoutFlags::_internal_ext_value() const {
  const ::mead101::mead::ddex_IsoDate* p = ext_value_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::ddex_IsoDate*>(
      &::mead101::mead::_ddex_IsoDate_default_instance_);
}
inline const ::mead101::mead::ddex_IsoDate& EventDateWithoutFlags::ext_value() const {
  // @@protoc_insertion_point(field_get:mead101.mead.EventDateWithoutFlags.ext_value)
  return _internal_ext_value();
}
inline void EventDateWithoutFlags::unsafe_arena_set_allocated_ext_value(
    ::mead101::mead::ddex_IsoDate* ext_value) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext_value_);
  }
  ext_value_ = ext_value;
  if (ext_value) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.EventDateWithoutFlags.ext_value)
}
inline ::mead101::mead::ddex_IsoDate* EventDateWithoutFlags::release_ext_value() {
  _has_bits_[0] &= ~0x00000008u;
  ::mead101::mead::ddex_IsoDate* temp = ext_value_;
  ext_value_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::ddex_IsoDate* EventDateWithoutFlags::unsafe_arena_release_ext_value() {
  // @@protoc_insertion_point(field_release:mead101.mead.EventDateWithoutFlags.ext_value)
  _has_bits_[0] &= ~0x00000008u;
  ::mead101::mead::ddex_IsoDate* temp = ext_value_;
  ext_value_ = nullptr;
  return temp;
}
inline ::mead101::mead::ddex_IsoDate* EventDateWithoutFlags::_internal_mutable_ext_value() {
  _has_bits_[0] |= 0x00000008u;
  if (ext_value_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::ddex_IsoDate>(GetArena());
    ext_value_ = p;
  }
  return ext_value_;
}
inline ::mead101::mead::ddex_IsoDate* EventDateWithoutFlags::mutable_ext_value() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.EventDateWithoutFlags.ext_value)
  return _internal_mutable_ext_value();
}
inline void EventDateWithoutFlags::set_allocated_ext_value(::mead101::mead::ddex_IsoDate* ext_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete ext_value_;
  }
  if (ext_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ext_value);
    if (message_arena != submessage_arena) {
      ext_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext_value, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  ext_value_ = ext_value;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.EventDateWithoutFlags.ext_value)
}

// -------------------------------------------------------------------

// Feed

// repeated string any_attribute_value = 1;
inline int Feed::_internal_any_attribute_value_size() const {
  return any_attribute_value_.size();
}
inline int Feed::any_attribute_value_size() const {
  return _internal_any_attribute_value_size();
}
inline void Feed::clear_any_attribute_value() {
  any_attribute_value_.Clear();
}
inline std::string* Feed::add_any_attribute_value() {
  // @@protoc_insertion_point(field_add_mutable:mead101.mead.Feed.any_attribute_value)
  return _internal_add_any_attribute_value();
}
inline const std::string& Feed::_internal_any_attribute_value(int index) const {
  return any_attribute_value_.Get(index);
}
inline const std::string& Feed::any_attribute_value(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.Feed.any_attribute_value)
  return _internal_any_attribute_value(index);
}
inline std::string* Feed::mutable_any_attribute_value(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Feed.any_attribute_value)
  return any_attribute_value_.Mutable(index);
}
inline void Feed::set_any_attribute_value(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:mead101.mead.Feed.any_attribute_value)
  any_attribute_value_.Mutable(index)->assign(value);
}
inline void Feed::set_any_attribute_value(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:mead101.mead.Feed.any_attribute_value)
  any_attribute_value_.Mutable(index)->assign(std::move(value));
}
inline void Feed::set_any_attribute_value(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  any_attribute_value_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mead101.mead.Feed.any_attribute_value)
}
inline void Feed::set_any_attribute_value(int index, const char* value, size_t size) {
  any_attribute_value_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.Feed.any_attribute_value)
}
inline std::string* Feed::_internal_add_any_attribute_value() {
  return any_attribute_value_.Add();
}
inline void Feed::add_any_attribute_value(const std::string& value) {
  any_attribute_value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mead101.mead.Feed.any_attribute_value)
}
inline void Feed::add_any_attribute_value(std::string&& value) {
  any_attribute_value_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:mead101.mead.Feed.any_attribute_value)
}
inline void Feed::add_any_attribute_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  any_attribute_value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mead101.mead.Feed.any_attribute_value)
}
inline void Feed::add_any_attribute_value(const char* value, size_t size) {
  any_attribute_value_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mead101.mead.Feed.any_attribute_value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Feed::any_attribute_value() const {
  // @@protoc_insertion_point(field_list:mead101.mead.Feed.any_attribute_value)
  return any_attribute_value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Feed::mutable_any_attribute_value() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.Feed.any_attribute_value)
  return &any_attribute_value_;
}

// repeated string any_value = 2;
inline int Feed::_internal_any_value_size() const {
  return any_value_.size();
}
inline int Feed::any_value_size() const {
  return _internal_any_value_size();
}
inline void Feed::clear_any_value() {
  any_value_.Clear();
}
inline std::string* Feed::add_any_value() {
  // @@protoc_insertion_point(field_add_mutable:mead101.mead.Feed.any_value)
  return _internal_add_any_value();
}
inline const std::string& Feed::_internal_any_value(int index) const {
  return any_value_.Get(index);
}
inline const std::string& Feed::any_value(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.Feed.any_value)
  return _internal_any_value(index);
}
inline std::string* Feed::mutable_any_value(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Feed.any_value)
  return any_value_.Mutable(index);
}
inline void Feed::set_any_value(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:mead101.mead.Feed.any_value)
  any_value_.Mutable(index)->assign(value);
}
inline void Feed::set_any_value(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:mead101.mead.Feed.any_value)
  any_value_.Mutable(index)->assign(std::move(value));
}
inline void Feed::set_any_value(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  any_value_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mead101.mead.Feed.any_value)
}
inline void Feed::set_any_value(int index, const char* value, size_t size) {
  any_value_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.Feed.any_value)
}
inline std::string* Feed::_internal_add_any_value() {
  return any_value_.Add();
}
inline void Feed::add_any_value(const std::string& value) {
  any_value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mead101.mead.Feed.any_value)
}
inline void Feed::add_any_value(std::string&& value) {
  any_value_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:mead101.mead.Feed.any_value)
}
inline void Feed::add_any_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  any_value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mead101.mead.Feed.any_value)
}
inline void Feed::add_any_value(const char* value, size_t size) {
  any_value_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mead101.mead.Feed.any_value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Feed::any_value() const {
  // @@protoc_insertion_point(field_list:mead101.mead.Feed.any_value)
  return any_value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Feed::mutable_any_value() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.Feed.any_value)
  return &any_value_;
}

// repeated .mead101.mead.Person author = 3;
inline int Feed::_internal_author_size() const {
  return author_.size();
}
inline int Feed::author_size() const {
  return _internal_author_size();
}
inline void Feed::clear_author() {
  author_.Clear();
}
inline ::mead101::mead::Person* Feed::mutable_author(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Feed.author)
  return author_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Person >*
Feed::mutable_author() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.Feed.author)
  return &author_;
}
inline const ::mead101::mead::Person& Feed::_internal_author(int index) const {
  return author_.Get(index);
}
inline const ::mead101::mead::Person& Feed::author(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.Feed.author)
  return _internal_author(index);
}
inline ::mead101::mead::Person* Feed::_internal_add_author() {
  return author_.Add();
}
inline ::mead101::mead::Person* Feed::add_author() {
  // @@protoc_insertion_point(field_add:mead101.mead.Feed.author)
  return _internal_add_author();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Person >&
Feed::author() const {
  // @@protoc_insertion_point(field_list:mead101.mead.Feed.author)
  return author_;
}

// repeated .mead101.mead.Category category = 4;
inline int Feed::_internal_category_size() const {
  return category_.size();
}
inline int Feed::category_size() const {
  return _internal_category_size();
}
inline void Feed::clear_category() {
  category_.Clear();
}
inline ::mead101::mead::Category* Feed::mutable_category(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Feed.category)
  return category_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Category >*
Feed::mutable_category() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.Feed.category)
  return &category_;
}
inline const ::mead101::mead::Category& Feed::_internal_category(int index) const {
  return category_.Get(index);
}
inline const ::mead101::mead::Category& Feed::category(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.Feed.category)
  return _internal_category(index);
}
inline ::mead101::mead::Category* Feed::_internal_add_category() {
  return category_.Add();
}
inline ::mead101::mead::Category* Feed::add_category() {
  // @@protoc_insertion_point(field_add:mead101.mead.Feed.category)
  return _internal_add_category();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Category >&
Feed::category() const {
  // @@protoc_insertion_point(field_list:mead101.mead.Feed.category)
  return category_;
}

// repeated .mead101.mead.Person contributor = 5;
inline int Feed::_internal_contributor_size() const {
  return contributor_.size();
}
inline int Feed::contributor_size() const {
  return _internal_contributor_size();
}
inline void Feed::clear_contributor() {
  contributor_.Clear();
}
inline ::mead101::mead::Person* Feed::mutable_contributor(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Feed.contributor)
  return contributor_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Person >*
Feed::mutable_contributor() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.Feed.contributor)
  return &contributor_;
}
inline const ::mead101::mead::Person& Feed::_internal_contributor(int index) const {
  return contributor_.Get(index);
}
inline const ::mead101::mead::Person& Feed::contributor(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.Feed.contributor)
  return _internal_contributor(index);
}
inline ::mead101::mead::Person* Feed::_internal_add_contributor() {
  return contributor_.Add();
}
inline ::mead101::mead::Person* Feed::add_contributor() {
  // @@protoc_insertion_point(field_add:mead101.mead.Feed.contributor)
  return _internal_add_contributor();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Person >&
Feed::contributor() const {
  // @@protoc_insertion_point(field_list:mead101.mead.Feed.contributor)
  return contributor_;
}

// repeated .mead101.mead.Entry entry = 6;
inline int Feed::_internal_entry_size() const {
  return entry_.size();
}
inline int Feed::entry_size() const {
  return _internal_entry_size();
}
inline void Feed::clear_entry() {
  entry_.Clear();
}
inline ::mead101::mead::Entry* Feed::mutable_entry(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Feed.entry)
  return entry_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Entry >*
Feed::mutable_entry() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.Feed.entry)
  return &entry_;
}
inline const ::mead101::mead::Entry& Feed::_internal_entry(int index) const {
  return entry_.Get(index);
}
inline const ::mead101::mead::Entry& Feed::entry(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.Feed.entry)
  return _internal_entry(index);
}
inline ::mead101::mead::Entry* Feed::_internal_add_entry() {
  return entry_.Add();
}
inline ::mead101::mead::Entry* Feed::add_entry() {
  // @@protoc_insertion_point(field_add:mead101.mead.Feed.entry)
  return _internal_add_entry();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Entry >&
Feed::entry() const {
  // @@protoc_insertion_point(field_list:mead101.mead.Feed.entry)
  return entry_;
}

// optional .mead101.mead.Generator generator = 7;
inline bool Feed::_internal_has_generator() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || generator_ != nullptr);
  return value;
}
inline bool Feed::has_generator() const {
  return _internal_has_generator();
}
inline void Feed::clear_generator() {
  if (generator_ != nullptr) generator_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::mead101::mead::Generator& Feed::_internal_generator() const {
  const ::mead101::mead::Generator* p = generator_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::Generator*>(
      &::mead101::mead::_Generator_default_instance_);
}
inline const ::mead101::mead::Generator& Feed::generator() const {
  // @@protoc_insertion_point(field_get:mead101.mead.Feed.generator)
  return _internal_generator();
}
inline void Feed::unsafe_arena_set_allocated_generator(
    ::mead101::mead::Generator* generator) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(generator_);
  }
  generator_ = generator;
  if (generator) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.Feed.generator)
}
inline ::mead101::mead::Generator* Feed::release_generator() {
  _has_bits_[0] &= ~0x00000001u;
  ::mead101::mead::Generator* temp = generator_;
  generator_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::Generator* Feed::unsafe_arena_release_generator() {
  // @@protoc_insertion_point(field_release:mead101.mead.Feed.generator)
  _has_bits_[0] &= ~0x00000001u;
  ::mead101::mead::Generator* temp = generator_;
  generator_ = nullptr;
  return temp;
}
inline ::mead101::mead::Generator* Feed::_internal_mutable_generator() {
  _has_bits_[0] |= 0x00000001u;
  if (generator_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::Generator>(GetArena());
    generator_ = p;
  }
  return generator_;
}
inline ::mead101::mead::Generator* Feed::mutable_generator() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Feed.generator)
  return _internal_mutable_generator();
}
inline void Feed::set_allocated_generator(::mead101::mead::Generator* generator) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete generator_;
  }
  if (generator) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(generator);
    if (message_arena != submessage_arena) {
      generator = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, generator, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  generator_ = generator;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.Feed.generator)
}

// optional .mead101.mead.Icon icon = 8;
inline bool Feed::_internal_has_icon() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || icon_ != nullptr);
  return value;
}
inline bool Feed::has_icon() const {
  return _internal_has_icon();
}
inline void Feed::clear_icon() {
  if (icon_ != nullptr) icon_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::mead101::mead::Icon& Feed::_internal_icon() const {
  const ::mead101::mead::Icon* p = icon_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::Icon*>(
      &::mead101::mead::_Icon_default_instance_);
}
inline const ::mead101::mead::Icon& Feed::icon() const {
  // @@protoc_insertion_point(field_get:mead101.mead.Feed.icon)
  return _internal_icon();
}
inline void Feed::unsafe_arena_set_allocated_icon(
    ::mead101::mead::Icon* icon) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(icon_);
  }
  icon_ = icon;
  if (icon) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.Feed.icon)
}
inline ::mead101::mead::Icon* Feed::release_icon() {
  _has_bits_[0] &= ~0x00000002u;
  ::mead101::mead::Icon* temp = icon_;
  icon_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::Icon* Feed::unsafe_arena_release_icon() {
  // @@protoc_insertion_point(field_release:mead101.mead.Feed.icon)
  _has_bits_[0] &= ~0x00000002u;
  ::mead101::mead::Icon* temp = icon_;
  icon_ = nullptr;
  return temp;
}
inline ::mead101::mead::Icon* Feed::_internal_mutable_icon() {
  _has_bits_[0] |= 0x00000002u;
  if (icon_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::Icon>(GetArena());
    icon_ = p;
  }
  return icon_;
}
inline ::mead101::mead::Icon* Feed::mutable_icon() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Feed.icon)
  return _internal_mutable_icon();
}
inline void Feed::set_allocated_icon(::mead101::mead::Icon* icon) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete icon_;
  }
  if (icon) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(icon);
    if (message_arena != submessage_arena) {
      icon = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, icon, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  icon_ = icon;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.Feed.icon)
}

// optional .mead101.mead.Id id = 9;
inline bool Feed::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || id_ != nullptr);
  return value;
}
inline bool Feed::has_id() const {
  return _internal_has_id();
}
inline void Feed::clear_id() {
  if (id_ != nullptr) id_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::mead101::mead::Id& Feed::_internal_id() const {
  const ::mead101::mead::Id* p = id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::Id*>(
      &::mead101::mead::_Id_default_instance_);
}
inline const ::mead101::mead::Id& Feed::id() const {
  // @@protoc_insertion_point(field_get:mead101.mead.Feed.id)
  return _internal_id();
}
inline void Feed::unsafe_arena_set_allocated_id(
    ::mead101::mead::Id* id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  id_ = id;
  if (id) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.Feed.id)
}
inline ::mead101::mead::Id* Feed::release_id() {
  _has_bits_[0] &= ~0x00000004u;
  ::mead101::mead::Id* temp = id_;
  id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::Id* Feed::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_release:mead101.mead.Feed.id)
  _has_bits_[0] &= ~0x00000004u;
  ::mead101::mead::Id* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::mead101::mead::Id* Feed::_internal_mutable_id() {
  _has_bits_[0] |= 0x00000004u;
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::Id>(GetArena());
    id_ = p;
  }
  return id_;
}
inline ::mead101::mead::Id* Feed::mutable_id() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Feed.id)
  return _internal_mutable_id();
}
inline void Feed::set_allocated_id(::mead101::mead::Id* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete id_;
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(id);
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.Feed.id)
}

// repeated .mead101.mead.Link link = 10;
inline int Feed::_internal_link_size() const {
  return link_.size();
}
inline int Feed::link_size() const {
  return _internal_link_size();
}
inline void Feed::clear_link() {
  link_.Clear();
}
inline ::mead101::mead::Link* Feed::mutable_link(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Feed.link)
  return link_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Link >*
Feed::mutable_link() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.Feed.link)
  return &link_;
}
inline const ::mead101::mead::Link& Feed::_internal_link(int index) const {
  return link_.Get(index);
}
inline const ::mead101::mead::Link& Feed::link(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.Feed.link)
  return _internal_link(index);
}
inline ::mead101::mead::Link* Feed::_internal_add_link() {
  return link_.Add();
}
inline ::mead101::mead::Link* Feed::add_link() {
  // @@protoc_insertion_point(field_add:mead101.mead.Feed.link)
  return _internal_add_link();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Link >&
Feed::link() const {
  // @@protoc_insertion_point(field_list:mead101.mead.Feed.link)
  return link_;
}

// optional .mead101.mead.Logo logo = 11;
inline bool Feed::_internal_has_logo() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || logo_ != nullptr);
  return value;
}
inline bool Feed::has_logo() const {
  return _internal_has_logo();
}
inline void Feed::clear_logo() {
  if (logo_ != nullptr) logo_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::mead101::mead::Logo& Feed::_internal_logo() const {
  const ::mead101::mead::Logo* p = logo_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::Logo*>(
      &::mead101::mead::_Logo_default_instance_);
}
inline const ::mead101::mead::Logo& Feed::logo() const {
  // @@protoc_insertion_point(field_get:mead101.mead.Feed.logo)
  return _internal_logo();
}
inline void Feed::unsafe_arena_set_allocated_logo(
    ::mead101::mead::Logo* logo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(logo_);
  }
  logo_ = logo;
  if (logo) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.Feed.logo)
}
inline ::mead101::mead::Logo* Feed::release_logo() {
  _has_bits_[0] &= ~0x00000008u;
  ::mead101::mead::Logo* temp = logo_;
  logo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::Logo* Feed::unsafe_arena_release_logo() {
  // @@protoc_insertion_point(field_release:mead101.mead.Feed.logo)
  _has_bits_[0] &= ~0x00000008u;
  ::mead101::mead::Logo* temp = logo_;
  logo_ = nullptr;
  return temp;
}
inline ::mead101::mead::Logo* Feed::_internal_mutable_logo() {
  _has_bits_[0] |= 0x00000008u;
  if (logo_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::Logo>(GetArena());
    logo_ = p;
  }
  return logo_;
}
inline ::mead101::mead::Logo* Feed::mutable_logo() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Feed.logo)
  return _internal_mutable_logo();
}
inline void Feed::set_allocated_logo(::mead101::mead::Logo* logo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete logo_;
  }
  if (logo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(logo);
    if (message_arena != submessage_arena) {
      logo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, logo, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  logo_ = logo;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.Feed.logo)
}

// optional .mead101.mead.Text rights = 12;
inline bool Feed::_internal_has_rights() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || rights_ != nullptr);
  return value;
}
inline bool Feed::has_rights() const {
  return _internal_has_rights();
}
inline void Feed::clear_rights() {
  if (rights_ != nullptr) rights_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::mead101::mead::Text& Feed::_internal_rights() const {
  const ::mead101::mead::Text* p = rights_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::Text*>(
      &::mead101::mead::_Text_default_instance_);
}
inline const ::mead101::mead::Text& Feed::rights() const {
  // @@protoc_insertion_point(field_get:mead101.mead.Feed.rights)
  return _internal_rights();
}
inline void Feed::unsafe_arena_set_allocated_rights(
    ::mead101::mead::Text* rights) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rights_);
  }
  rights_ = rights;
  if (rights) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.Feed.rights)
}
inline ::mead101::mead::Text* Feed::release_rights() {
  _has_bits_[0] &= ~0x00000010u;
  ::mead101::mead::Text* temp = rights_;
  rights_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::Text* Feed::unsafe_arena_release_rights() {
  // @@protoc_insertion_point(field_release:mead101.mead.Feed.rights)
  _has_bits_[0] &= ~0x00000010u;
  ::mead101::mead::Text* temp = rights_;
  rights_ = nullptr;
  return temp;
}
inline ::mead101::mead::Text* Feed::_internal_mutable_rights() {
  _has_bits_[0] |= 0x00000010u;
  if (rights_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::Text>(GetArena());
    rights_ = p;
  }
  return rights_;
}
inline ::mead101::mead::Text* Feed::mutable_rights() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Feed.rights)
  return _internal_mutable_rights();
}
inline void Feed::set_allocated_rights(::mead101::mead::Text* rights) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete rights_;
  }
  if (rights) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(rights);
    if (message_arena != submessage_arena) {
      rights = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rights, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  rights_ = rights;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.Feed.rights)
}

// optional .mead101.mead.Text subtitle = 13;
inline bool Feed::_internal_has_subtitle() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || subtitle_ != nullptr);
  return value;
}
inline bool Feed::has_subtitle() const {
  return _internal_has_subtitle();
}
inline void Feed::clear_subtitle() {
  if (subtitle_ != nullptr) subtitle_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::mead101::mead::Text& Feed::_internal_subtitle() const {
  const ::mead101::mead::Text* p = subtitle_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::Text*>(
      &::mead101::mead::_Text_default_instance_);
}
inline const ::mead101::mead::Text& Feed::subtitle() const {
  // @@protoc_insertion_point(field_get:mead101.mead.Feed.subtitle)
  return _internal_subtitle();
}
inline void Feed::unsafe_arena_set_allocated_subtitle(
    ::mead101::mead::Text* subtitle) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(subtitle_);
  }
  subtitle_ = subtitle;
  if (subtitle) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.Feed.subtitle)
}
inline ::mead101::mead::Text* Feed::release_subtitle() {
  _has_bits_[0] &= ~0x00000020u;
  ::mead101::mead::Text* temp = subtitle_;
  subtitle_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::Text* Feed::unsafe_arena_release_subtitle() {
  // @@protoc_insertion_point(field_release:mead101.mead.Feed.subtitle)
  _has_bits_[0] &= ~0x00000020u;
  ::mead101::mead::Text* temp = subtitle_;
  subtitle_ = nullptr;
  return temp;
}
inline ::mead101::mead::Text* Feed::_internal_mutable_subtitle() {
  _has_bits_[0] |= 0x00000020u;
  if (subtitle_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::Text>(GetArena());
    subtitle_ = p;
  }
  return subtitle_;
}
inline ::mead101::mead::Text* Feed::mutable_subtitle() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Feed.subtitle)
  return _internal_mutable_subtitle();
}
inline void Feed::set_allocated_subtitle(::mead101::mead::Text* subtitle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete subtitle_;
  }
  if (subtitle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(subtitle);
    if (message_arena != submessage_arena) {
      subtitle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, subtitle, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  subtitle_ = subtitle;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.Feed.subtitle)
}

// optional .mead101.mead.Text title = 14;
inline bool Feed::_internal_has_title() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || title_ != nullptr);
  return value;
}
inline bool Feed::has_title() const {
  return _internal_has_title();
}
inline void Feed::clear_title() {
  if (title_ != nullptr) title_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::mead101::mead::Text& Feed::_internal_title() const {
  const ::mead101::mead::Text* p = title_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::Text*>(
      &::mead101::mead::_Text_default_instance_);
}
inline const ::mead101::mead::Text& Feed::title() const {
  // @@protoc_insertion_point(field_get:mead101.mead.Feed.title)
  return _internal_title();
}
inline void Feed::unsafe_arena_set_allocated_title(
    ::mead101::mead::Text* title) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(title_);
  }
  title_ = title;
  if (title) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.Feed.title)
}
inline ::mead101::mead::Text* Feed::release_title() {
  _has_bits_[0] &= ~0x00000040u;
  ::mead101::mead::Text* temp = title_;
  title_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::Text* Feed::unsafe_arena_release_title() {
  // @@protoc_insertion_point(field_release:mead101.mead.Feed.title)
  _has_bits_[0] &= ~0x00000040u;
  ::mead101::mead::Text* temp = title_;
  title_ = nullptr;
  return temp;
}
inline ::mead101::mead::Text* Feed::_internal_mutable_title() {
  _has_bits_[0] |= 0x00000040u;
  if (title_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::Text>(GetArena());
    title_ = p;
  }
  return title_;
}
inline ::mead101::mead::Text* Feed::mutable_title() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Feed.title)
  return _internal_mutable_title();
}
inline void Feed::set_allocated_title(::mead101::mead::Text* title) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete title_;
  }
  if (title) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(title);
    if (message_arena != submessage_arena) {
      title = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, title, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  title_ = title;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.Feed.title)
}

// optional .mead101.mead.DateTime updated = 15;
inline bool Feed::_internal_has_updated() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || updated_ != nullptr);
  return value;
}
inline bool Feed::has_updated() const {
  return _internal_has_updated();
}
inline void Feed::clear_updated() {
  if (updated_ != nullptr) updated_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
inline const ::mead101::mead::DateTime& Feed::_internal_updated() const {
  const ::mead101::mead::DateTime* p = updated_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::DateTime*>(
      &::mead101::mead::_DateTime_default_instance_);
}
inline const ::mead101::mead::DateTime& Feed::updated() const {
  // @@protoc_insertion_point(field_get:mead101.mead.Feed.updated)
  return _internal_updated();
}
inline void Feed::unsafe_arena_set_allocated_updated(
    ::mead101::mead::DateTime* updated) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_);
  }
  updated_ = updated;
  if (updated) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.Feed.updated)
}
inline ::mead101::mead::DateTime* Feed::release_updated() {
  _has_bits_[0] &= ~0x00000080u;
  ::mead101::mead::DateTime* temp = updated_;
  updated_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::DateTime* Feed::unsafe_arena_release_updated() {
  // @@protoc_insertion_point(field_release:mead101.mead.Feed.updated)
  _has_bits_[0] &= ~0x00000080u;
  ::mead101::mead::DateTime* temp = updated_;
  updated_ = nullptr;
  return temp;
}
inline ::mead101::mead::DateTime* Feed::_internal_mutable_updated() {
  _has_bits_[0] |= 0x00000080u;
  if (updated_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::DateTime>(GetArena());
    updated_ = p;
  }
  return updated_;
}
inline ::mead101::mead::DateTime* Feed::mutable_updated() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Feed.updated)
  return _internal_mutable_updated();
}
inline void Feed::set_allocated_updated(::mead101::mead::DateTime* updated) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete updated_;
  }
  if (updated) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(updated);
    if (message_arena != submessage_arena) {
      updated = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, updated, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  updated_ = updated;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.Feed.updated)
}

// -------------------------------------------------------------------

// File

// optional double file_size = 1;
inline bool File::_internal_has_file_size() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool File::has_file_size() const {
  return _internal_has_file_size();
}
inline void File::clear_file_size() {
  file_size_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double File::_internal_file_size() const {
  return file_size_;
}
inline double File::file_size() const {
  // @@protoc_insertion_point(field_get:mead101.mead.File.file_size)
  return _internal_file_size();
}
inline void File::_internal_set_file_size(double value) {
  _has_bits_[0] |= 0x00000004u;
  file_size_ = value;
}
inline void File::set_file_size(double value) {
  _internal_set_file_size(value);
  // @@protoc_insertion_point(field_set:mead101.mead.File.file_size)
}

// optional .mead101.mead.DetailedHashSum hash_sum = 2;
inline bool File::_internal_has_hash_sum() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || hash_sum_ != nullptr);
  return value;
}
inline bool File::has_hash_sum() const {
  return _internal_has_hash_sum();
}
inline void File::clear_hash_sum() {
  if (hash_sum_ != nullptr) hash_sum_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::mead101::mead::DetailedHashSum& File::_internal_hash_sum() const {
  const ::mead101::mead::DetailedHashSum* p = hash_sum_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::DetailedHashSum*>(
      &::mead101::mead::_DetailedHashSum_default_instance_);
}
inline const ::mead101::mead::DetailedHashSum& File::hash_sum() const {
  // @@protoc_insertion_point(field_get:mead101.mead.File.hash_sum)
  return _internal_hash_sum();
}
inline void File::unsafe_arena_set_allocated_hash_sum(
    ::mead101::mead::DetailedHashSum* hash_sum) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hash_sum_);
  }
  hash_sum_ = hash_sum;
  if (hash_sum) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.File.hash_sum)
}
inline ::mead101::mead::DetailedHashSum* File::release_hash_sum() {
  _has_bits_[0] &= ~0x00000002u;
  ::mead101::mead::DetailedHashSum* temp = hash_sum_;
  hash_sum_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::DetailedHashSum* File::unsafe_arena_release_hash_sum() {
  // @@protoc_insertion_point(field_release:mead101.mead.File.hash_sum)
  _has_bits_[0] &= ~0x00000002u;
  ::mead101::mead::DetailedHashSum* temp = hash_sum_;
  hash_sum_ = nullptr;
  return temp;
}
inline ::mead101::mead::DetailedHashSum* File::_internal_mutable_hash_sum() {
  _has_bits_[0] |= 0x00000002u;
  if (hash_sum_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::DetailedHashSum>(GetArena());
    hash_sum_ = p;
  }
  return hash_sum_;
}
inline ::mead101::mead::DetailedHashSum* File::mutable_hash_sum() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.File.hash_sum)
  return _internal_mutable_hash_sum();
}
inline void File::set_allocated_hash_sum(::mead101::mead::DetailedHashSum* hash_sum) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete hash_sum_;
  }
  if (hash_sum) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(hash_sum);
    if (message_arena != submessage_arena) {
      hash_sum = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hash_sum, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  hash_sum_ = hash_sum;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.File.hash_sum)
}

// optional string u_r_i = 3;
inline bool File::_internal_has_u_r_i() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool File::has_u_r_i() const {
  return _internal_has_u_r_i();
}
inline void File::clear_u_r_i() {
  u_r_i_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& File::u_r_i() const {
  // @@protoc_insertion_point(field_get:mead101.mead.File.u_r_i)
  return _internal_u_r_i();
}
inline void File::set_u_r_i(const std::string& value) {
  _internal_set_u_r_i(value);
  // @@protoc_insertion_point(field_set:mead101.mead.File.u_r_i)
}
inline std::string* File::mutable_u_r_i() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.File.u_r_i)
  return _internal_mutable_u_r_i();
}
inline const std::string& File::_internal_u_r_i() const {
  return u_r_i_.Get();
}
inline void File::_internal_set_u_r_i(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  u_r_i_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void File::set_u_r_i(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  u_r_i_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.File.u_r_i)
}
inline void File::set_u_r_i(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  u_r_i_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.File.u_r_i)
}
inline void File::set_u_r_i(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  u_r_i_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.File.u_r_i)
}
inline std::string* File::_internal_mutable_u_r_i() {
  _has_bits_[0] |= 0x00000001u;
  return u_r_i_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* File::release_u_r_i() {
  // @@protoc_insertion_point(field_release:mead101.mead.File.u_r_i)
  if (!_internal_has_u_r_i()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return u_r_i_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void File::set_allocated_u_r_i(std::string* u_r_i) {
  if (u_r_i != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  u_r_i_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), u_r_i,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.File.u_r_i)
}

// -------------------------------------------------------------------

// Flag

// repeated string metadata_source_reference = 1;
inline int Flag::_internal_metadata_source_reference_size() const {
  return metadata_source_reference_.size();
}
inline int Flag::metadata_source_reference_size() const {
  return _internal_metadata_source_reference_size();
}
inline void Flag::clear_metadata_source_reference() {
  metadata_source_reference_.Clear();
}
inline std::string* Flag::add_metadata_source_reference() {
  // @@protoc_insertion_point(field_add_mutable:mead101.mead.Flag.metadata_source_reference)
  return _internal_add_metadata_source_reference();
}
inline const std::string& Flag::_internal_metadata_source_reference(int index) const {
  return metadata_source_reference_.Get(index);
}
inline const std::string& Flag::metadata_source_reference(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.Flag.metadata_source_reference)
  return _internal_metadata_source_reference(index);
}
inline std::string* Flag::mutable_metadata_source_reference(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Flag.metadata_source_reference)
  return metadata_source_reference_.Mutable(index);
}
inline void Flag::set_metadata_source_reference(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:mead101.mead.Flag.metadata_source_reference)
  metadata_source_reference_.Mutable(index)->assign(value);
}
inline void Flag::set_metadata_source_reference(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:mead101.mead.Flag.metadata_source_reference)
  metadata_source_reference_.Mutable(index)->assign(std::move(value));
}
inline void Flag::set_metadata_source_reference(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  metadata_source_reference_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mead101.mead.Flag.metadata_source_reference)
}
inline void Flag::set_metadata_source_reference(int index, const char* value, size_t size) {
  metadata_source_reference_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.Flag.metadata_source_reference)
}
inline std::string* Flag::_internal_add_metadata_source_reference() {
  return metadata_source_reference_.Add();
}
inline void Flag::add_metadata_source_reference(const std::string& value) {
  metadata_source_reference_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mead101.mead.Flag.metadata_source_reference)
}
inline void Flag::add_metadata_source_reference(std::string&& value) {
  metadata_source_reference_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:mead101.mead.Flag.metadata_source_reference)
}
inline void Flag::add_metadata_source_reference(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  metadata_source_reference_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mead101.mead.Flag.metadata_source_reference)
}
inline void Flag::add_metadata_source_reference(const char* value, size_t size) {
  metadata_source_reference_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mead101.mead.Flag.metadata_source_reference)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Flag::metadata_source_reference() const {
  // @@protoc_insertion_point(field_list:mead101.mead.Flag.metadata_source_reference)
  return metadata_source_reference_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Flag::mutable_metadata_source_reference() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.Flag.metadata_source_reference)
  return &metadata_source_reference_;
}

// optional bool value = 2;
inline bool Flag::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Flag::has_value() const {
  return _internal_has_value();
}
inline void Flag::clear_value() {
  value_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool Flag::_internal_value() const {
  return value_;
}
inline bool Flag::value() const {
  // @@protoc_insertion_point(field_get:mead101.mead.Flag.value)
  return _internal_value();
}
inline void Flag::_internal_set_value(bool value) {
  _has_bits_[0] |= 0x00000001u;
  value_ = value;
}
inline void Flag::set_value(bool value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:mead101.mead.Flag.value)
}

// -------------------------------------------------------------------

// FocusTrack

// optional .mead101.avs.CurrentTerritoryCode applicable_territory_code = 1;
inline bool FocusTrack::_internal_has_applicable_territory_code() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || applicable_territory_code_ != nullptr);
  return value;
}
inline bool FocusTrack::has_applicable_territory_code() const {
  return _internal_has_applicable_territory_code();
}
inline const ::mead101::avs::CurrentTerritoryCode& FocusTrack::_internal_applicable_territory_code() const {
  const ::mead101::avs::CurrentTerritoryCode* p = applicable_territory_code_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::avs::CurrentTerritoryCode*>(
      &::mead101::avs::_CurrentTerritoryCode_default_instance_);
}
inline const ::mead101::avs::CurrentTerritoryCode& FocusTrack::applicable_territory_code() const {
  // @@protoc_insertion_point(field_get:mead101.mead.FocusTrack.applicable_territory_code)
  return _internal_applicable_territory_code();
}
inline void FocusTrack::unsafe_arena_set_allocated_applicable_territory_code(
    ::mead101::avs::CurrentTerritoryCode* applicable_territory_code) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(applicable_territory_code_);
  }
  applicable_territory_code_ = applicable_territory_code;
  if (applicable_territory_code) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.FocusTrack.applicable_territory_code)
}
inline ::mead101::avs::CurrentTerritoryCode* FocusTrack::release_applicable_territory_code() {
  _has_bits_[0] &= ~0x00000001u;
  ::mead101::avs::CurrentTerritoryCode* temp = applicable_territory_code_;
  applicable_territory_code_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::avs::CurrentTerritoryCode* FocusTrack::unsafe_arena_release_applicable_territory_code() {
  // @@protoc_insertion_point(field_release:mead101.mead.FocusTrack.applicable_territory_code)
  _has_bits_[0] &= ~0x00000001u;
  ::mead101::avs::CurrentTerritoryCode* temp = applicable_territory_code_;
  applicable_territory_code_ = nullptr;
  return temp;
}
inline ::mead101::avs::CurrentTerritoryCode* FocusTrack::_internal_mutable_applicable_territory_code() {
  _has_bits_[0] |= 0x00000001u;
  if (applicable_territory_code_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::avs::CurrentTerritoryCode>(GetArena());
    applicable_territory_code_ = p;
  }
  return applicable_territory_code_;
}
inline ::mead101::avs::CurrentTerritoryCode* FocusTrack::mutable_applicable_territory_code() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.FocusTrack.applicable_territory_code)
  return _internal_mutable_applicable_territory_code();
}
inline void FocusTrack::set_allocated_applicable_territory_code(::mead101::avs::CurrentTerritoryCode* applicable_territory_code) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(applicable_territory_code_);
  }
  if (applicable_territory_code) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(applicable_territory_code)->GetArena();
    if (message_arena != submessage_arena) {
      applicable_territory_code = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, applicable_territory_code, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  applicable_territory_code_ = applicable_territory_code;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.FocusTrack.applicable_territory_code)
}

// repeated .mead101.mead.TextWithoutTerritory comment = 2;
inline int FocusTrack::_internal_comment_size() const {
  return comment_.size();
}
inline int FocusTrack::comment_size() const {
  return _internal_comment_size();
}
inline void FocusTrack::clear_comment() {
  comment_.Clear();
}
inline ::mead101::mead::TextWithoutTerritory* FocusTrack::mutable_comment(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.FocusTrack.comment)
  return comment_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::TextWithoutTerritory >*
FocusTrack::mutable_comment() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.FocusTrack.comment)
  return &comment_;
}
inline const ::mead101::mead::TextWithoutTerritory& FocusTrack::_internal_comment(int index) const {
  return comment_.Get(index);
}
inline const ::mead101::mead::TextWithoutTerritory& FocusTrack::comment(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.FocusTrack.comment)
  return _internal_comment(index);
}
inline ::mead101::mead::TextWithoutTerritory* FocusTrack::_internal_add_comment() {
  return comment_.Add();
}
inline ::mead101::mead::TextWithoutTerritory* FocusTrack::add_comment() {
  // @@protoc_insertion_point(field_add:mead101.mead.FocusTrack.comment)
  return _internal_add_comment();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::TextWithoutTerritory >&
FocusTrack::comment() const {
  // @@protoc_insertion_point(field_list:mead101.mead.FocusTrack.comment)
  return comment_;
}

// repeated .mead101.mead.DisplayArtistNameWithPronunciation display_artist_name = 3;
inline int FocusTrack::_internal_display_artist_name_size() const {
  return display_artist_name_.size();
}
inline int FocusTrack::display_artist_name_size() const {
  return _internal_display_artist_name_size();
}
inline void FocusTrack::clear_display_artist_name() {
  display_artist_name_.Clear();
}
inline ::mead101::mead::DisplayArtistNameWithPronunciation* FocusTrack::mutable_display_artist_name(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.FocusTrack.display_artist_name)
  return display_artist_name_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::DisplayArtistNameWithPronunciation >*
FocusTrack::mutable_display_artist_name() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.FocusTrack.display_artist_name)
  return &display_artist_name_;
}
inline const ::mead101::mead::DisplayArtistNameWithPronunciation& FocusTrack::_internal_display_artist_name(int index) const {
  return display_artist_name_.Get(index);
}
inline const ::mead101::mead::DisplayArtistNameWithPronunciation& FocusTrack::display_artist_name(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.FocusTrack.display_artist_name)
  return _internal_display_artist_name(index);
}
inline ::mead101::mead::DisplayArtistNameWithPronunciation* FocusTrack::_internal_add_display_artist_name() {
  return display_artist_name_.Add();
}
inline ::mead101::mead::DisplayArtistNameWithPronunciation* FocusTrack::add_display_artist_name() {
  // @@protoc_insertion_point(field_add:mead101.mead.FocusTrack.display_artist_name)
  return _internal_add_display_artist_name();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::DisplayArtistNameWithPronunciation >&
FocusTrack::display_artist_name() const {
  // @@protoc_insertion_point(field_list:mead101.mead.FocusTrack.display_artist_name)
  return display_artist_name_;
}

// optional bool is_default = 4;
inline bool FocusTrack::_internal_has_is_default() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FocusTrack::has_is_default() const {
  return _internal_has_is_default();
}
inline void FocusTrack::clear_is_default() {
  is_default_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool FocusTrack::_internal_is_default() const {
  return is_default_;
}
inline bool FocusTrack::is_default() const {
  // @@protoc_insertion_point(field_get:mead101.mead.FocusTrack.is_default)
  return _internal_is_default();
}
inline void FocusTrack::_internal_set_is_default(bool value) {
  _has_bits_[0] |= 0x00000004u;
  is_default_ = value;
}
inline void FocusTrack::set_is_default(bool value) {
  _internal_set_is_default(value);
  // @@protoc_insertion_point(field_set:mead101.mead.FocusTrack.is_default)
}

// repeated string metadata_source_reference = 5;
inline int FocusTrack::_internal_metadata_source_reference_size() const {
  return metadata_source_reference_.size();
}
inline int FocusTrack::metadata_source_reference_size() const {
  return _internal_metadata_source_reference_size();
}
inline void FocusTrack::clear_metadata_source_reference() {
  metadata_source_reference_.Clear();
}
inline std::string* FocusTrack::add_metadata_source_reference() {
  // @@protoc_insertion_point(field_add_mutable:mead101.mead.FocusTrack.metadata_source_reference)
  return _internal_add_metadata_source_reference();
}
inline const std::string& FocusTrack::_internal_metadata_source_reference(int index) const {
  return metadata_source_reference_.Get(index);
}
inline const std::string& FocusTrack::metadata_source_reference(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.FocusTrack.metadata_source_reference)
  return _internal_metadata_source_reference(index);
}
inline std::string* FocusTrack::mutable_metadata_source_reference(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.FocusTrack.metadata_source_reference)
  return metadata_source_reference_.Mutable(index);
}
inline void FocusTrack::set_metadata_source_reference(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:mead101.mead.FocusTrack.metadata_source_reference)
  metadata_source_reference_.Mutable(index)->assign(value);
}
inline void FocusTrack::set_metadata_source_reference(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:mead101.mead.FocusTrack.metadata_source_reference)
  metadata_source_reference_.Mutable(index)->assign(std::move(value));
}
inline void FocusTrack::set_metadata_source_reference(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  metadata_source_reference_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mead101.mead.FocusTrack.metadata_source_reference)
}
inline void FocusTrack::set_metadata_source_reference(int index, const char* value, size_t size) {
  metadata_source_reference_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.FocusTrack.metadata_source_reference)
}
inline std::string* FocusTrack::_internal_add_metadata_source_reference() {
  return metadata_source_reference_.Add();
}
inline void FocusTrack::add_metadata_source_reference(const std::string& value) {
  metadata_source_reference_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mead101.mead.FocusTrack.metadata_source_reference)
}
inline void FocusTrack::add_metadata_source_reference(std::string&& value) {
  metadata_source_reference_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:mead101.mead.FocusTrack.metadata_source_reference)
}
inline void FocusTrack::add_metadata_source_reference(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  metadata_source_reference_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mead101.mead.FocusTrack.metadata_source_reference)
}
inline void FocusTrack::add_metadata_source_reference(const char* value, size_t size) {
  metadata_source_reference_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mead101.mead.FocusTrack.metadata_source_reference)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
FocusTrack::metadata_source_reference() const {
  // @@protoc_insertion_point(field_list:mead101.mead.FocusTrack.metadata_source_reference)
  return metadata_source_reference_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
FocusTrack::mutable_metadata_source_reference() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.FocusTrack.metadata_source_reference)
  return &metadata_source_reference_;
}

// repeated .mead101.mead.PeriodWithTime period_of_being_focus_track = 6;
inline int FocusTrack::_internal_period_of_being_focus_track_size() const {
  return period_of_being_focus_track_.size();
}
inline int FocusTrack::period_of_being_focus_track_size() const {
  return _internal_period_of_being_focus_track_size();
}
inline void FocusTrack::clear_period_of_being_focus_track() {
  period_of_being_focus_track_.Clear();
}
inline ::mead101::mead::PeriodWithTime* FocusTrack::mutable_period_of_being_focus_track(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.FocusTrack.period_of_being_focus_track)
  return period_of_being_focus_track_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::PeriodWithTime >*
FocusTrack::mutable_period_of_being_focus_track() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.FocusTrack.period_of_being_focus_track)
  return &period_of_being_focus_track_;
}
inline const ::mead101::mead::PeriodWithTime& FocusTrack::_internal_period_of_being_focus_track(int index) const {
  return period_of_being_focus_track_.Get(index);
}
inline const ::mead101::mead::PeriodWithTime& FocusTrack::period_of_being_focus_track(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.FocusTrack.period_of_being_focus_track)
  return _internal_period_of_being_focus_track(index);
}
inline ::mead101::mead::PeriodWithTime* FocusTrack::_internal_add_period_of_being_focus_track() {
  return period_of_being_focus_track_.Add();
}
inline ::mead101::mead::PeriodWithTime* FocusTrack::add_period_of_being_focus_track() {
  // @@protoc_insertion_point(field_add:mead101.mead.FocusTrack.period_of_being_focus_track)
  return _internal_add_period_of_being_focus_track();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::PeriodWithTime >&
FocusTrack::period_of_being_focus_track() const {
  // @@protoc_insertion_point(field_list:mead101.mead.FocusTrack.period_of_being_focus_track)
  return period_of_being_focus_track_;
}

// optional .mead101.mead.ResourceId resource_id = 7;
inline bool FocusTrack::_internal_has_resource_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || resource_id_ != nullptr);
  return value;
}
inline bool FocusTrack::has_resource_id() const {
  return _internal_has_resource_id();
}
inline void FocusTrack::clear_resource_id() {
  if (resource_id_ != nullptr) resource_id_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::mead101::mead::ResourceId& FocusTrack::_internal_resource_id() const {
  const ::mead101::mead::ResourceId* p = resource_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::ResourceId*>(
      &::mead101::mead::_ResourceId_default_instance_);
}
inline const ::mead101::mead::ResourceId& FocusTrack::resource_id() const {
  // @@protoc_insertion_point(field_get:mead101.mead.FocusTrack.resource_id)
  return _internal_resource_id();
}
inline void FocusTrack::unsafe_arena_set_allocated_resource_id(
    ::mead101::mead::ResourceId* resource_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(resource_id_);
  }
  resource_id_ = resource_id;
  if (resource_id) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.FocusTrack.resource_id)
}
inline ::mead101::mead::ResourceId* FocusTrack::release_resource_id() {
  _has_bits_[0] &= ~0x00000002u;
  ::mead101::mead::ResourceId* temp = resource_id_;
  resource_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::ResourceId* FocusTrack::unsafe_arena_release_resource_id() {
  // @@protoc_insertion_point(field_release:mead101.mead.FocusTrack.resource_id)
  _has_bits_[0] &= ~0x00000002u;
  ::mead101::mead::ResourceId* temp = resource_id_;
  resource_id_ = nullptr;
  return temp;
}
inline ::mead101::mead::ResourceId* FocusTrack::_internal_mutable_resource_id() {
  _has_bits_[0] |= 0x00000002u;
  if (resource_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::ResourceId>(GetArena());
    resource_id_ = p;
  }
  return resource_id_;
}
inline ::mead101::mead::ResourceId* FocusTrack::mutable_resource_id() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.FocusTrack.resource_id)
  return _internal_mutable_resource_id();
}
inline void FocusTrack::set_allocated_resource_id(::mead101::mead::ResourceId* resource_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete resource_id_;
  }
  if (resource_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(resource_id);
    if (message_arena != submessage_arena) {
      resource_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resource_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  resource_id_ = resource_id;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.FocusTrack.resource_id)
}

// optional int32 sequence_number = 8;
inline bool FocusTrack::_internal_has_sequence_number() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool FocusTrack::has_sequence_number() const {
  return _internal_has_sequence_number();
}
inline void FocusTrack::clear_sequence_number() {
  sequence_number_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FocusTrack::_internal_sequence_number() const {
  return sequence_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FocusTrack::sequence_number() const {
  // @@protoc_insertion_point(field_get:mead101.mead.FocusTrack.sequence_number)
  return _internal_sequence_number();
}
inline void FocusTrack::_internal_set_sequence_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  sequence_number_ = value;
}
inline void FocusTrack::set_sequence_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sequence_number(value);
  // @@protoc_insertion_point(field_set:mead101.mead.FocusTrack.sequence_number)
}

// repeated .mead101.mead.TitleWithPronunciation title = 9;
inline int FocusTrack::_internal_title_size() const {
  return title_.size();
}
inline int FocusTrack::title_size() const {
  return _internal_title_size();
}
inline void FocusTrack::clear_title() {
  title_.Clear();
}
inline ::mead101::mead::TitleWithPronunciation* FocusTrack::mutable_title(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.FocusTrack.title)
  return title_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::TitleWithPronunciation >*
FocusTrack::mutable_title() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.FocusTrack.title)
  return &title_;
}
inline const ::mead101::mead::TitleWithPronunciation& FocusTrack::_internal_title(int index) const {
  return title_.Get(index);
}
inline const ::mead101::mead::TitleWithPronunciation& FocusTrack::title(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.FocusTrack.title)
  return _internal_title(index);
}
inline ::mead101::mead::TitleWithPronunciation* FocusTrack::_internal_add_title() {
  return title_.Add();
}
inline ::mead101::mead::TitleWithPronunciation* FocusTrack::add_title() {
  // @@protoc_insertion_point(field_add:mead101.mead.FocusTrack.title)
  return _internal_add_title();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::TitleWithPronunciation >&
FocusTrack::title() const {
  // @@protoc_insertion_point(field_list:mead101.mead.FocusTrack.title)
  return title_;
}

// -------------------------------------------------------------------

// Form

// repeated string metadata_source_reference = 1;
inline int Form::_internal_metadata_source_reference_size() const {
  return metadata_source_reference_.size();
}
inline int Form::metadata_source_reference_size() const {
  return _internal_metadata_source_reference_size();
}
inline void Form::clear_metadata_source_reference() {
  metadata_source_reference_.Clear();
}
inline std::string* Form::add_metadata_source_reference() {
  // @@protoc_insertion_point(field_add_mutable:mead101.mead.Form.metadata_source_reference)
  return _internal_add_metadata_source_reference();
}
inline const std::string& Form::_internal_metadata_source_reference(int index) const {
  return metadata_source_reference_.Get(index);
}
inline const std::string& Form::metadata_source_reference(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.Form.metadata_source_reference)
  return _internal_metadata_source_reference(index);
}
inline std::string* Form::mutable_metadata_source_reference(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Form.metadata_source_reference)
  return metadata_source_reference_.Mutable(index);
}
inline void Form::set_metadata_source_reference(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:mead101.mead.Form.metadata_source_reference)
  metadata_source_reference_.Mutable(index)->assign(value);
}
inline void Form::set_metadata_source_reference(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:mead101.mead.Form.metadata_source_reference)
  metadata_source_reference_.Mutable(index)->assign(std::move(value));
}
inline void Form::set_metadata_source_reference(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  metadata_source_reference_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mead101.mead.Form.metadata_source_reference)
}
inline void Form::set_metadata_source_reference(int index, const char* value, size_t size) {
  metadata_source_reference_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.Form.metadata_source_reference)
}
inline std::string* Form::_internal_add_metadata_source_reference() {
  return metadata_source_reference_.Add();
}
inline void Form::add_metadata_source_reference(const std::string& value) {
  metadata_source_reference_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mead101.mead.Form.metadata_source_reference)
}
inline void Form::add_metadata_source_reference(std::string&& value) {
  metadata_source_reference_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:mead101.mead.Form.metadata_source_reference)
}
inline void Form::add_metadata_source_reference(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  metadata_source_reference_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mead101.mead.Form.metadata_source_reference)
}
inline void Form::add_metadata_source_reference(const char* value, size_t size) {
  metadata_source_reference_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mead101.mead.Form.metadata_source_reference)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Form::metadata_source_reference() const {
  // @@protoc_insertion_point(field_list:mead101.mead.Form.metadata_source_reference)
  return metadata_source_reference_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Form::mutable_metadata_source_reference() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.Form.metadata_source_reference)
  return &metadata_source_reference_;
}

// optional .mead101.mead.FormValue value = 2;
inline bool Form::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || value_ != nullptr);
  return value;
}
inline bool Form::has_value() const {
  return _internal_has_value();
}
inline void Form::clear_value() {
  if (value_ != nullptr) value_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::mead101::mead::FormValue& Form::_internal_value() const {
  const ::mead101::mead::FormValue* p = value_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::FormValue*>(
      &::mead101::mead::_FormValue_default_instance_);
}
inline const ::mead101::mead::FormValue& Form::value() const {
  // @@protoc_insertion_point(field_get:mead101.mead.Form.value)
  return _internal_value();
}
inline void Form::unsafe_arena_set_allocated_value(
    ::mead101::mead::FormValue* value) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(value_);
  }
  value_ = value;
  if (value) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.Form.value)
}
inline ::mead101::mead::FormValue* Form::release_value() {
  _has_bits_[0] &= ~0x00000001u;
  ::mead101::mead::FormValue* temp = value_;
  value_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::FormValue* Form::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_release:mead101.mead.Form.value)
  _has_bits_[0] &= ~0x00000001u;
  ::mead101::mead::FormValue* temp = value_;
  value_ = nullptr;
  return temp;
}
inline ::mead101::mead::FormValue* Form::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000001u;
  if (value_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::FormValue>(GetArena());
    value_ = p;
  }
  return value_;
}
inline ::mead101::mead::FormValue* Form::mutable_value() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Form.value)
  return _internal_mutable_value();
}
inline void Form::set_allocated_value(::mead101::mead::FormValue* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete value_;
  }
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(value);
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.Form.value)
}

// -------------------------------------------------------------------

// FormValue

// optional string namespace = 1;
inline bool FormValue::_internal_has_namespace_() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FormValue::has_namespace_() const {
  return _internal_has_namespace_();
}
inline void FormValue::clear_namespace_() {
  namespace__.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FormValue::namespace_() const {
  // @@protoc_insertion_point(field_get:mead101.mead.FormValue.namespace)
  return _internal_namespace_();
}
inline void FormValue::set_namespace_(const std::string& value) {
  _internal_set_namespace_(value);
  // @@protoc_insertion_point(field_set:mead101.mead.FormValue.namespace)
}
inline std::string* FormValue::mutable_namespace_() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.FormValue.namespace)
  return _internal_mutable_namespace_();
}
inline const std::string& FormValue::_internal_namespace_() const {
  return namespace__.Get();
}
inline void FormValue::_internal_set_namespace_(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FormValue::set_namespace_(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  namespace__.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.FormValue.namespace)
}
inline void FormValue::set_namespace_(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.FormValue.namespace)
}
inline void FormValue::set_namespace_(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.FormValue.namespace)
}
inline std::string* FormValue::_internal_mutable_namespace_() {
  _has_bits_[0] |= 0x00000001u;
  return namespace__.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FormValue::release_namespace_() {
  // @@protoc_insertion_point(field_release:mead101.mead.FormValue.namespace)
  if (!_internal_has_namespace_()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return namespace__.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FormValue::set_allocated_namespace_(std::string* namespace_) {
  if (namespace_ != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  namespace__.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), namespace_,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.FormValue.namespace)
}

// optional string user_defined_value = 2;
inline bool FormValue::_internal_has_user_defined_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FormValue::has_user_defined_value() const {
  return _internal_has_user_defined_value();
}
inline void FormValue::clear_user_defined_value() {
  user_defined_value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& FormValue::user_defined_value() const {
  // @@protoc_insertion_point(field_get:mead101.mead.FormValue.user_defined_value)
  return _internal_user_defined_value();
}
inline void FormValue::set_user_defined_value(const std::string& value) {
  _internal_set_user_defined_value(value);
  // @@protoc_insertion_point(field_set:mead101.mead.FormValue.user_defined_value)
}
inline std::string* FormValue::mutable_user_defined_value() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.FormValue.user_defined_value)
  return _internal_mutable_user_defined_value();
}
inline const std::string& FormValue::_internal_user_defined_value() const {
  return user_defined_value_.Get();
}
inline void FormValue::_internal_set_user_defined_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FormValue::set_user_defined_value(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  user_defined_value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.FormValue.user_defined_value)
}
inline void FormValue::set_user_defined_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.FormValue.user_defined_value)
}
inline void FormValue::set_user_defined_value(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.FormValue.user_defined_value)
}
inline std::string* FormValue::_internal_mutable_user_defined_value() {
  _has_bits_[0] |= 0x00000002u;
  return user_defined_value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FormValue::release_user_defined_value() {
  // @@protoc_insertion_point(field_release:mead101.mead.FormValue.user_defined_value)
  if (!_internal_has_user_defined_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return user_defined_value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FormValue::set_allocated_user_defined_value(std::string* user_defined_value) {
  if (user_defined_value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  user_defined_value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_defined_value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.FormValue.user_defined_value)
}

// optional .mead101.avs.Form ext_value = 3;
inline bool FormValue::_internal_has_ext_value() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || ext_value_ != nullptr);
  return value;
}
inline bool FormValue::has_ext_value() const {
  return _internal_has_ext_value();
}
inline const ::mead101::avs::Form& FormValue::_internal_ext_value() const {
  const ::mead101::avs::Form* p = ext_value_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::avs::Form*>(
      &::mead101::avs::_Form_default_instance_);
}
inline const ::mead101::avs::Form& FormValue::ext_value() const {
  // @@protoc_insertion_point(field_get:mead101.mead.FormValue.ext_value)
  return _internal_ext_value();
}
inline void FormValue::unsafe_arena_set_allocated_ext_value(
    ::mead101::avs::Form* ext_value) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext_value_);
  }
  ext_value_ = ext_value;
  if (ext_value) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.FormValue.ext_value)
}
inline ::mead101::avs::Form* FormValue::release_ext_value() {
  _has_bits_[0] &= ~0x00000004u;
  ::mead101::avs::Form* temp = ext_value_;
  ext_value_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::avs::Form* FormValue::unsafe_arena_release_ext_value() {
  // @@protoc_insertion_point(field_release:mead101.mead.FormValue.ext_value)
  _has_bits_[0] &= ~0x00000004u;
  ::mead101::avs::Form* temp = ext_value_;
  ext_value_ = nullptr;
  return temp;
}
inline ::mead101::avs::Form* FormValue::_internal_mutable_ext_value() {
  _has_bits_[0] |= 0x00000004u;
  if (ext_value_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::avs::Form>(GetArena());
    ext_value_ = p;
  }
  return ext_value_;
}
inline ::mead101::avs::Form* FormValue::mutable_ext_value() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.FormValue.ext_value)
  return _internal_mutable_ext_value();
}
inline void FormValue::set_allocated_ext_value(::mead101::avs::Form* ext_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext_value_);
  }
  if (ext_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext_value)->GetArena();
    if (message_arena != submessage_arena) {
      ext_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext_value, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  ext_value_ = ext_value;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.FormValue.ext_value)
}

// -------------------------------------------------------------------

// Generator

// repeated string any_attribute_value = 1;
inline int Generator::_internal_any_attribute_value_size() const {
  return any_attribute_value_.size();
}
inline int Generator::any_attribute_value_size() const {
  return _internal_any_attribute_value_size();
}
inline void Generator::clear_any_attribute_value() {
  any_attribute_value_.Clear();
}
inline std::string* Generator::add_any_attribute_value() {
  // @@protoc_insertion_point(field_add_mutable:mead101.mead.Generator.any_attribute_value)
  return _internal_add_any_attribute_value();
}
inline const std::string& Generator::_internal_any_attribute_value(int index) const {
  return any_attribute_value_.Get(index);
}
inline const std::string& Generator::any_attribute_value(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.Generator.any_attribute_value)
  return _internal_any_attribute_value(index);
}
inline std::string* Generator::mutable_any_attribute_value(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Generator.any_attribute_value)
  return any_attribute_value_.Mutable(index);
}
inline void Generator::set_any_attribute_value(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:mead101.mead.Generator.any_attribute_value)
  any_attribute_value_.Mutable(index)->assign(value);
}
inline void Generator::set_any_attribute_value(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:mead101.mead.Generator.any_attribute_value)
  any_attribute_value_.Mutable(index)->assign(std::move(value));
}
inline void Generator::set_any_attribute_value(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  any_attribute_value_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mead101.mead.Generator.any_attribute_value)
}
inline void Generator::set_any_attribute_value(int index, const char* value, size_t size) {
  any_attribute_value_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.Generator.any_attribute_value)
}
inline std::string* Generator::_internal_add_any_attribute_value() {
  return any_attribute_value_.Add();
}
inline void Generator::add_any_attribute_value(const std::string& value) {
  any_attribute_value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mead101.mead.Generator.any_attribute_value)
}
inline void Generator::add_any_attribute_value(std::string&& value) {
  any_attribute_value_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:mead101.mead.Generator.any_attribute_value)
}
inline void Generator::add_any_attribute_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  any_attribute_value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mead101.mead.Generator.any_attribute_value)
}
inline void Generator::add_any_attribute_value(const char* value, size_t size) {
  any_attribute_value_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mead101.mead.Generator.any_attribute_value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Generator::any_attribute_value() const {
  // @@protoc_insertion_point(field_list:mead101.mead.Generator.any_attribute_value)
  return any_attribute_value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Generator::mutable_any_attribute_value() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.Generator.any_attribute_value)
  return &any_attribute_value_;
}

// optional string ext_value = 2;
inline bool Generator::_internal_has_ext_value() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Generator::has_ext_value() const {
  return _internal_has_ext_value();
}
inline void Generator::clear_ext_value() {
  ext_value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Generator::ext_value() const {
  // @@protoc_insertion_point(field_get:mead101.mead.Generator.ext_value)
  return _internal_ext_value();
}
inline void Generator::set_ext_value(const std::string& value) {
  _internal_set_ext_value(value);
  // @@protoc_insertion_point(field_set:mead101.mead.Generator.ext_value)
}
inline std::string* Generator::mutable_ext_value() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Generator.ext_value)
  return _internal_mutable_ext_value();
}
inline const std::string& Generator::_internal_ext_value() const {
  return ext_value_.Get();
}
inline void Generator::_internal_set_ext_value(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  ext_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Generator::set_ext_value(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  ext_value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.Generator.ext_value)
}
inline void Generator::set_ext_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  ext_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.Generator.ext_value)
}
inline void Generator::set_ext_value(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  ext_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.Generator.ext_value)
}
inline std::string* Generator::_internal_mutable_ext_value() {
  _has_bits_[0] |= 0x00000001u;
  return ext_value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Generator::release_ext_value() {
  // @@protoc_insertion_point(field_release:mead101.mead.Generator.ext_value)
  if (!_internal_has_ext_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return ext_value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Generator::set_allocated_ext_value(std::string* ext_value) {
  if (ext_value != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  ext_value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ext_value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.Generator.ext_value)
}

// optional string uri = 3;
inline bool Generator::_internal_has_uri() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Generator::has_uri() const {
  return _internal_has_uri();
}
inline void Generator::clear_uri() {
  uri_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Generator::uri() const {
  // @@protoc_insertion_point(field_get:mead101.mead.Generator.uri)
  return _internal_uri();
}
inline void Generator::set_uri(const std::string& value) {
  _internal_set_uri(value);
  // @@protoc_insertion_point(field_set:mead101.mead.Generator.uri)
}
inline std::string* Generator::mutable_uri() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Generator.uri)
  return _internal_mutable_uri();
}
inline const std::string& Generator::_internal_uri() const {
  return uri_.Get();
}
inline void Generator::_internal_set_uri(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Generator::set_uri(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  uri_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.Generator.uri)
}
inline void Generator::set_uri(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.Generator.uri)
}
inline void Generator::set_uri(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.Generator.uri)
}
inline std::string* Generator::_internal_mutable_uri() {
  _has_bits_[0] |= 0x00000002u;
  return uri_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Generator::release_uri() {
  // @@protoc_insertion_point(field_release:mead101.mead.Generator.uri)
  if (!_internal_has_uri()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return uri_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Generator::set_allocated_uri(std::string* uri) {
  if (uri != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  uri_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uri,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.Generator.uri)
}

// optional string version = 4;
inline bool Generator::_internal_has_version() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Generator::has_version() const {
  return _internal_has_version();
}
inline void Generator::clear_version() {
  version_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Generator::version() const {
  // @@protoc_insertion_point(field_get:mead101.mead.Generator.version)
  return _internal_version();
}
inline void Generator::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:mead101.mead.Generator.version)
}
inline std::string* Generator::mutable_version() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Generator.version)
  return _internal_mutable_version();
}
inline const std::string& Generator::_internal_version() const {
  return version_.Get();
}
inline void Generator::_internal_set_version(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Generator::set_version(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  version_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.Generator.version)
}
inline void Generator::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.Generator.version)
}
inline void Generator::set_version(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.Generator.version)
}
inline std::string* Generator::_internal_mutable_version() {
  _has_bits_[0] |= 0x00000004u;
  return version_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Generator::release_version() {
  // @@protoc_insertion_point(field_release:mead101.mead.Generator.version)
  if (!_internal_has_version()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return version_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Generator::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.Generator.version)
}

// -------------------------------------------------------------------

// GenreCategory

// optional .mead101.avs.CurrentTerritoryCode applicable_territory_code = 1;
inline bool GenreCategory::_internal_has_applicable_territory_code() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || applicable_territory_code_ != nullptr);
  return value;
}
inline bool GenreCategory::has_applicable_territory_code() const {
  return _internal_has_applicable_territory_code();
}
inline const ::mead101::avs::CurrentTerritoryCode& GenreCategory::_internal_applicable_territory_code() const {
  const ::mead101::avs::CurrentTerritoryCode* p = applicable_territory_code_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::avs::CurrentTerritoryCode*>(
      &::mead101::avs::_CurrentTerritoryCode_default_instance_);
}
inline const ::mead101::avs::CurrentTerritoryCode& GenreCategory::applicable_territory_code() const {
  // @@protoc_insertion_point(field_get:mead101.mead.GenreCategory.applicable_territory_code)
  return _internal_applicable_territory_code();
}
inline void GenreCategory::unsafe_arena_set_allocated_applicable_territory_code(
    ::mead101::avs::CurrentTerritoryCode* applicable_territory_code) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(applicable_territory_code_);
  }
  applicable_territory_code_ = applicable_territory_code;
  if (applicable_territory_code) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.GenreCategory.applicable_territory_code)
}
inline ::mead101::avs::CurrentTerritoryCode* GenreCategory::release_applicable_territory_code() {
  _has_bits_[0] &= ~0x00000001u;
  ::mead101::avs::CurrentTerritoryCode* temp = applicable_territory_code_;
  applicable_territory_code_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::avs::CurrentTerritoryCode* GenreCategory::unsafe_arena_release_applicable_territory_code() {
  // @@protoc_insertion_point(field_release:mead101.mead.GenreCategory.applicable_territory_code)
  _has_bits_[0] &= ~0x00000001u;
  ::mead101::avs::CurrentTerritoryCode* temp = applicable_territory_code_;
  applicable_territory_code_ = nullptr;
  return temp;
}
inline ::mead101::avs::CurrentTerritoryCode* GenreCategory::_internal_mutable_applicable_territory_code() {
  _has_bits_[0] |= 0x00000001u;
  if (applicable_territory_code_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::avs::CurrentTerritoryCode>(GetArena());
    applicable_territory_code_ = p;
  }
  return applicable_territory_code_;
}
inline ::mead101::avs::CurrentTerritoryCode* GenreCategory::mutable_applicable_territory_code() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.GenreCategory.applicable_territory_code)
  return _internal_mutable_applicable_territory_code();
}
inline void GenreCategory::set_allocated_applicable_territory_code(::mead101::avs::CurrentTerritoryCode* applicable_territory_code) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(applicable_territory_code_);
  }
  if (applicable_territory_code) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(applicable_territory_code)->GetArena();
    if (message_arena != submessage_arena) {
      applicable_territory_code = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, applicable_territory_code, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  applicable_territory_code_ = applicable_territory_code;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.GenreCategory.applicable_territory_code)
}

// repeated .mead101.mead.TextWithoutTerritory description = 2;
inline int GenreCategory::_internal_description_size() const {
  return description_.size();
}
inline int GenreCategory::description_size() const {
  return _internal_description_size();
}
inline void GenreCategory::clear_description() {
  description_.Clear();
}
inline ::mead101::mead::TextWithoutTerritory* GenreCategory::mutable_description(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.GenreCategory.description)
  return description_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::TextWithoutTerritory >*
GenreCategory::mutable_description() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.GenreCategory.description)
  return &description_;
}
inline const ::mead101::mead::TextWithoutTerritory& GenreCategory::_internal_description(int index) const {
  return description_.Get(index);
}
inline const ::mead101::mead::TextWithoutTerritory& GenreCategory::description(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.GenreCategory.description)
  return _internal_description(index);
}
inline ::mead101::mead::TextWithoutTerritory* GenreCategory::_internal_add_description() {
  return description_.Add();
}
inline ::mead101::mead::TextWithoutTerritory* GenreCategory::add_description() {
  // @@protoc_insertion_point(field_add:mead101.mead.GenreCategory.description)
  return _internal_add_description();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::TextWithoutTerritory >&
GenreCategory::description() const {
  // @@protoc_insertion_point(field_list:mead101.mead.GenreCategory.description)
  return description_;
}

// repeated string metadata_source_reference = 3;
inline int GenreCategory::_internal_metadata_source_reference_size() const {
  return metadata_source_reference_.size();
}
inline int GenreCategory::metadata_source_reference_size() const {
  return _internal_metadata_source_reference_size();
}
inline void GenreCategory::clear_metadata_source_reference() {
  metadata_source_reference_.Clear();
}
inline std::string* GenreCategory::add_metadata_source_reference() {
  // @@protoc_insertion_point(field_add_mutable:mead101.mead.GenreCategory.metadata_source_reference)
  return _internal_add_metadata_source_reference();
}
inline const std::string& GenreCategory::_internal_metadata_source_reference(int index) const {
  return metadata_source_reference_.Get(index);
}
inline const std::string& GenreCategory::metadata_source_reference(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.GenreCategory.metadata_source_reference)
  return _internal_metadata_source_reference(index);
}
inline std::string* GenreCategory::mutable_metadata_source_reference(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.GenreCategory.metadata_source_reference)
  return metadata_source_reference_.Mutable(index);
}
inline void GenreCategory::set_metadata_source_reference(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:mead101.mead.GenreCategory.metadata_source_reference)
  metadata_source_reference_.Mutable(index)->assign(value);
}
inline void GenreCategory::set_metadata_source_reference(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:mead101.mead.GenreCategory.metadata_source_reference)
  metadata_source_reference_.Mutable(index)->assign(std::move(value));
}
inline void GenreCategory::set_metadata_source_reference(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  metadata_source_reference_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mead101.mead.GenreCategory.metadata_source_reference)
}
inline void GenreCategory::set_metadata_source_reference(int index, const char* value, size_t size) {
  metadata_source_reference_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.GenreCategory.metadata_source_reference)
}
inline std::string* GenreCategory::_internal_add_metadata_source_reference() {
  return metadata_source_reference_.Add();
}
inline void GenreCategory::add_metadata_source_reference(const std::string& value) {
  metadata_source_reference_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mead101.mead.GenreCategory.metadata_source_reference)
}
inline void GenreCategory::add_metadata_source_reference(std::string&& value) {
  metadata_source_reference_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:mead101.mead.GenreCategory.metadata_source_reference)
}
inline void GenreCategory::add_metadata_source_reference(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  metadata_source_reference_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mead101.mead.GenreCategory.metadata_source_reference)
}
inline void GenreCategory::add_metadata_source_reference(const char* value, size_t size) {
  metadata_source_reference_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mead101.mead.GenreCategory.metadata_source_reference)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GenreCategory::metadata_source_reference() const {
  // @@protoc_insertion_point(field_list:mead101.mead.GenreCategory.metadata_source_reference)
  return metadata_source_reference_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GenreCategory::mutable_metadata_source_reference() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.GenreCategory.metadata_source_reference)
  return &metadata_source_reference_;
}

// optional .mead101.mead.GenreCategoryValue value = 4;
inline bool GenreCategory::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || value_ != nullptr);
  return value;
}
inline bool GenreCategory::has_value() const {
  return _internal_has_value();
}
inline void GenreCategory::clear_value() {
  if (value_ != nullptr) value_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::mead101::mead::GenreCategoryValue& GenreCategory::_internal_value() const {
  const ::mead101::mead::GenreCategoryValue* p = value_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::GenreCategoryValue*>(
      &::mead101::mead::_GenreCategoryValue_default_instance_);
}
inline const ::mead101::mead::GenreCategoryValue& GenreCategory::value() const {
  // @@protoc_insertion_point(field_get:mead101.mead.GenreCategory.value)
  return _internal_value();
}
inline void GenreCategory::unsafe_arena_set_allocated_value(
    ::mead101::mead::GenreCategoryValue* value) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(value_);
  }
  value_ = value;
  if (value) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.GenreCategory.value)
}
inline ::mead101::mead::GenreCategoryValue* GenreCategory::release_value() {
  _has_bits_[0] &= ~0x00000002u;
  ::mead101::mead::GenreCategoryValue* temp = value_;
  value_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::GenreCategoryValue* GenreCategory::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_release:mead101.mead.GenreCategory.value)
  _has_bits_[0] &= ~0x00000002u;
  ::mead101::mead::GenreCategoryValue* temp = value_;
  value_ = nullptr;
  return temp;
}
inline ::mead101::mead::GenreCategoryValue* GenreCategory::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000002u;
  if (value_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::GenreCategoryValue>(GetArena());
    value_ = p;
  }
  return value_;
}
inline ::mead101::mead::GenreCategoryValue* GenreCategory::mutable_value() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.GenreCategory.value)
  return _internal_mutable_value();
}
inline void GenreCategory::set_allocated_value(::mead101::mead::GenreCategoryValue* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete value_;
  }
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(value);
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.GenreCategory.value)
}

// -------------------------------------------------------------------

// GenreCategoryValue

// optional string language_and_script_code = 1;
inline bool GenreCategoryValue::_internal_has_language_and_script_code() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GenreCategoryValue::has_language_and_script_code() const {
  return _internal_has_language_and_script_code();
}
inline void GenreCategoryValue::clear_language_and_script_code() {
  language_and_script_code_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GenreCategoryValue::language_and_script_code() const {
  // @@protoc_insertion_point(field_get:mead101.mead.GenreCategoryValue.language_and_script_code)
  return _internal_language_and_script_code();
}
inline void GenreCategoryValue::set_language_and_script_code(const std::string& value) {
  _internal_set_language_and_script_code(value);
  // @@protoc_insertion_point(field_set:mead101.mead.GenreCategoryValue.language_and_script_code)
}
inline std::string* GenreCategoryValue::mutable_language_and_script_code() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.GenreCategoryValue.language_and_script_code)
  return _internal_mutable_language_and_script_code();
}
inline const std::string& GenreCategoryValue::_internal_language_and_script_code() const {
  return language_and_script_code_.Get();
}
inline void GenreCategoryValue::_internal_set_language_and_script_code(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  language_and_script_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GenreCategoryValue::set_language_and_script_code(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  language_and_script_code_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.GenreCategoryValue.language_and_script_code)
}
inline void GenreCategoryValue::set_language_and_script_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  language_and_script_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.GenreCategoryValue.language_and_script_code)
}
inline void GenreCategoryValue::set_language_and_script_code(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  language_and_script_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.GenreCategoryValue.language_and_script_code)
}
inline std::string* GenreCategoryValue::_internal_mutable_language_and_script_code() {
  _has_bits_[0] |= 0x00000001u;
  return language_and_script_code_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GenreCategoryValue::release_language_and_script_code() {
  // @@protoc_insertion_point(field_release:mead101.mead.GenreCategoryValue.language_and_script_code)
  if (!_internal_has_language_and_script_code()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return language_and_script_code_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GenreCategoryValue::set_allocated_language_and_script_code(std::string* language_and_script_code) {
  if (language_and_script_code != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  language_and_script_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), language_and_script_code,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.GenreCategoryValue.language_and_script_code)
}

// optional string namespace = 2;
inline bool GenreCategoryValue::_internal_has_namespace_() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GenreCategoryValue::has_namespace_() const {
  return _internal_has_namespace_();
}
inline void GenreCategoryValue::clear_namespace_() {
  namespace__.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& GenreCategoryValue::namespace_() const {
  // @@protoc_insertion_point(field_get:mead101.mead.GenreCategoryValue.namespace)
  return _internal_namespace_();
}
inline void GenreCategoryValue::set_namespace_(const std::string& value) {
  _internal_set_namespace_(value);
  // @@protoc_insertion_point(field_set:mead101.mead.GenreCategoryValue.namespace)
}
inline std::string* GenreCategoryValue::mutable_namespace_() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.GenreCategoryValue.namespace)
  return _internal_mutable_namespace_();
}
inline const std::string& GenreCategoryValue::_internal_namespace_() const {
  return namespace__.Get();
}
inline void GenreCategoryValue::_internal_set_namespace_(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GenreCategoryValue::set_namespace_(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  namespace__.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.GenreCategoryValue.namespace)
}
inline void GenreCategoryValue::set_namespace_(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.GenreCategoryValue.namespace)
}
inline void GenreCategoryValue::set_namespace_(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.GenreCategoryValue.namespace)
}
inline std::string* GenreCategoryValue::_internal_mutable_namespace_() {
  _has_bits_[0] |= 0x00000002u;
  return namespace__.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GenreCategoryValue::release_namespace_() {
  // @@protoc_insertion_point(field_release:mead101.mead.GenreCategoryValue.namespace)
  if (!_internal_has_namespace_()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return namespace__.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GenreCategoryValue::set_allocated_namespace_(std::string* namespace_) {
  if (namespace_ != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  namespace__.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), namespace_,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.GenreCategoryValue.namespace)
}

// optional string user_defined_value = 3;
inline bool GenreCategoryValue::_internal_has_user_defined_value() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GenreCategoryValue::has_user_defined_value() const {
  return _internal_has_user_defined_value();
}
inline void GenreCategoryValue::clear_user_defined_value() {
  user_defined_value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& GenreCategoryValue::user_defined_value() const {
  // @@protoc_insertion_point(field_get:mead101.mead.GenreCategoryValue.user_defined_value)
  return _internal_user_defined_value();
}
inline void GenreCategoryValue::set_user_defined_value(const std::string& value) {
  _internal_set_user_defined_value(value);
  // @@protoc_insertion_point(field_set:mead101.mead.GenreCategoryValue.user_defined_value)
}
inline std::string* GenreCategoryValue::mutable_user_defined_value() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.GenreCategoryValue.user_defined_value)
  return _internal_mutable_user_defined_value();
}
inline const std::string& GenreCategoryValue::_internal_user_defined_value() const {
  return user_defined_value_.Get();
}
inline void GenreCategoryValue::_internal_set_user_defined_value(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GenreCategoryValue::set_user_defined_value(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  user_defined_value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.GenreCategoryValue.user_defined_value)
}
inline void GenreCategoryValue::set_user_defined_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.GenreCategoryValue.user_defined_value)
}
inline void GenreCategoryValue::set_user_defined_value(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.GenreCategoryValue.user_defined_value)
}
inline std::string* GenreCategoryValue::_internal_mutable_user_defined_value() {
  _has_bits_[0] |= 0x00000004u;
  return user_defined_value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GenreCategoryValue::release_user_defined_value() {
  // @@protoc_insertion_point(field_release:mead101.mead.GenreCategoryValue.user_defined_value)
  if (!_internal_has_user_defined_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return user_defined_value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GenreCategoryValue::set_allocated_user_defined_value(std::string* user_defined_value) {
  if (user_defined_value != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  user_defined_value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_defined_value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.GenreCategoryValue.user_defined_value)
}

// optional .mead101.avs.ClassifiedGenre ext_value = 4;
inline bool GenreCategoryValue::_internal_has_ext_value() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || ext_value_ != nullptr);
  return value;
}
inline bool GenreCategoryValue::has_ext_value() const {
  return _internal_has_ext_value();
}
inline const ::mead101::avs::ClassifiedGenre& GenreCategoryValue::_internal_ext_value() const {
  const ::mead101::avs::ClassifiedGenre* p = ext_value_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::avs::ClassifiedGenre*>(
      &::mead101::avs::_ClassifiedGenre_default_instance_);
}
inline const ::mead101::avs::ClassifiedGenre& GenreCategoryValue::ext_value() const {
  // @@protoc_insertion_point(field_get:mead101.mead.GenreCategoryValue.ext_value)
  return _internal_ext_value();
}
inline void GenreCategoryValue::unsafe_arena_set_allocated_ext_value(
    ::mead101::avs::ClassifiedGenre* ext_value) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext_value_);
  }
  ext_value_ = ext_value;
  if (ext_value) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.GenreCategoryValue.ext_value)
}
inline ::mead101::avs::ClassifiedGenre* GenreCategoryValue::release_ext_value() {
  _has_bits_[0] &= ~0x00000008u;
  ::mead101::avs::ClassifiedGenre* temp = ext_value_;
  ext_value_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::avs::ClassifiedGenre* GenreCategoryValue::unsafe_arena_release_ext_value() {
  // @@protoc_insertion_point(field_release:mead101.mead.GenreCategoryValue.ext_value)
  _has_bits_[0] &= ~0x00000008u;
  ::mead101::avs::ClassifiedGenre* temp = ext_value_;
  ext_value_ = nullptr;
  return temp;
}
inline ::mead101::avs::ClassifiedGenre* GenreCategoryValue::_internal_mutable_ext_value() {
  _has_bits_[0] |= 0x00000008u;
  if (ext_value_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::avs::ClassifiedGenre>(GetArena());
    ext_value_ = p;
  }
  return ext_value_;
}
inline ::mead101::avs::ClassifiedGenre* GenreCategoryValue::mutable_ext_value() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.GenreCategoryValue.ext_value)
  return _internal_mutable_ext_value();
}
inline void GenreCategoryValue::set_allocated_ext_value(::mead101::avs::ClassifiedGenre* ext_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext_value_);
  }
  if (ext_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext_value)->GetArena();
    if (message_arena != submessage_arena) {
      ext_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext_value, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  ext_value_ = ext_value;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.GenreCategoryValue.ext_value)
}

// -------------------------------------------------------------------

// Harmony

// repeated string metadata_source_reference = 1;
inline int Harmony::_internal_metadata_source_reference_size() const {
  return metadata_source_reference_.size();
}
inline int Harmony::metadata_source_reference_size() const {
  return _internal_metadata_source_reference_size();
}
inline void Harmony::clear_metadata_source_reference() {
  metadata_source_reference_.Clear();
}
inline std::string* Harmony::add_metadata_source_reference() {
  // @@protoc_insertion_point(field_add_mutable:mead101.mead.Harmony.metadata_source_reference)
  return _internal_add_metadata_source_reference();
}
inline const std::string& Harmony::_internal_metadata_source_reference(int index) const {
  return metadata_source_reference_.Get(index);
}
inline const std::string& Harmony::metadata_source_reference(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.Harmony.metadata_source_reference)
  return _internal_metadata_source_reference(index);
}
inline std::string* Harmony::mutable_metadata_source_reference(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Harmony.metadata_source_reference)
  return metadata_source_reference_.Mutable(index);
}
inline void Harmony::set_metadata_source_reference(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:mead101.mead.Harmony.metadata_source_reference)
  metadata_source_reference_.Mutable(index)->assign(value);
}
inline void Harmony::set_metadata_source_reference(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:mead101.mead.Harmony.metadata_source_reference)
  metadata_source_reference_.Mutable(index)->assign(std::move(value));
}
inline void Harmony::set_metadata_source_reference(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  metadata_source_reference_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mead101.mead.Harmony.metadata_source_reference)
}
inline void Harmony::set_metadata_source_reference(int index, const char* value, size_t size) {
  metadata_source_reference_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.Harmony.metadata_source_reference)
}
inline std::string* Harmony::_internal_add_metadata_source_reference() {
  return metadata_source_reference_.Add();
}
inline void Harmony::add_metadata_source_reference(const std::string& value) {
  metadata_source_reference_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mead101.mead.Harmony.metadata_source_reference)
}
inline void Harmony::add_metadata_source_reference(std::string&& value) {
  metadata_source_reference_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:mead101.mead.Harmony.metadata_source_reference)
}
inline void Harmony::add_metadata_source_reference(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  metadata_source_reference_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mead101.mead.Harmony.metadata_source_reference)
}
inline void Harmony::add_metadata_source_reference(const char* value, size_t size) {
  metadata_source_reference_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mead101.mead.Harmony.metadata_source_reference)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Harmony::metadata_source_reference() const {
  // @@protoc_insertion_point(field_list:mead101.mead.Harmony.metadata_source_reference)
  return metadata_source_reference_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Harmony::mutable_metadata_source_reference() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.Harmony.metadata_source_reference)
  return &metadata_source_reference_;
}

// optional .mead101.mead.Mode mode = 2;
inline bool Harmony::_internal_has_mode() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || mode_ != nullptr);
  return value;
}
inline bool Harmony::has_mode() const {
  return _internal_has_mode();
}
inline void Harmony::clear_mode() {
  if (mode_ != nullptr) mode_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::mead101::mead::Mode& Harmony::_internal_mode() const {
  const ::mead101::mead::Mode* p = mode_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::Mode*>(
      &::mead101::mead::_Mode_default_instance_);
}
inline const ::mead101::mead::Mode& Harmony::mode() const {
  // @@protoc_insertion_point(field_get:mead101.mead.Harmony.mode)
  return _internal_mode();
}
inline void Harmony::unsafe_arena_set_allocated_mode(
    ::mead101::mead::Mode* mode) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mode_);
  }
  mode_ = mode;
  if (mode) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.Harmony.mode)
}
inline ::mead101::mead::Mode* Harmony::release_mode() {
  _has_bits_[0] &= ~0x00000001u;
  ::mead101::mead::Mode* temp = mode_;
  mode_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::Mode* Harmony::unsafe_arena_release_mode() {
  // @@protoc_insertion_point(field_release:mead101.mead.Harmony.mode)
  _has_bits_[0] &= ~0x00000001u;
  ::mead101::mead::Mode* temp = mode_;
  mode_ = nullptr;
  return temp;
}
inline ::mead101::mead::Mode* Harmony::_internal_mutable_mode() {
  _has_bits_[0] |= 0x00000001u;
  if (mode_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::Mode>(GetArena());
    mode_ = p;
  }
  return mode_;
}
inline ::mead101::mead::Mode* Harmony::mutable_mode() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Harmony.mode)
  return _internal_mutable_mode();
}
inline void Harmony::set_allocated_mode(::mead101::mead::Mode* mode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete mode_;
  }
  if (mode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(mode);
    if (message_arena != submessage_arena) {
      mode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mode, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  mode_ = mode;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.Harmony.mode)
}

// repeated .mead101.mead.HarmonyModulation modulation = 3;
inline int Harmony::_internal_modulation_size() const {
  return modulation_.size();
}
inline int Harmony::modulation_size() const {
  return _internal_modulation_size();
}
inline void Harmony::clear_modulation() {
  modulation_.Clear();
}
inline ::mead101::mead::HarmonyModulation* Harmony::mutable_modulation(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Harmony.modulation)
  return modulation_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::HarmonyModulation >*
Harmony::mutable_modulation() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.Harmony.modulation)
  return &modulation_;
}
inline const ::mead101::mead::HarmonyModulation& Harmony::_internal_modulation(int index) const {
  return modulation_.Get(index);
}
inline const ::mead101::mead::HarmonyModulation& Harmony::modulation(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.Harmony.modulation)
  return _internal_modulation(index);
}
inline ::mead101::mead::HarmonyModulation* Harmony::_internal_add_modulation() {
  return modulation_.Add();
}
inline ::mead101::mead::HarmonyModulation* Harmony::add_modulation() {
  // @@protoc_insertion_point(field_add:mead101.mead.Harmony.modulation)
  return _internal_add_modulation();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::HarmonyModulation >&
Harmony::modulation() const {
  // @@protoc_insertion_point(field_list:mead101.mead.Harmony.modulation)
  return modulation_;
}

// optional .mead101.mead.RootChordNote root_chord_note = 4;
inline bool Harmony::_internal_has_root_chord_note() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || root_chord_note_ != nullptr);
  return value;
}
inline bool Harmony::has_root_chord_note() const {
  return _internal_has_root_chord_note();
}
inline void Harmony::clear_root_chord_note() {
  if (root_chord_note_ != nullptr) root_chord_note_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::mead101::mead::RootChordNote& Harmony::_internal_root_chord_note() const {
  const ::mead101::mead::RootChordNote* p = root_chord_note_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::RootChordNote*>(
      &::mead101::mead::_RootChordNote_default_instance_);
}
inline const ::mead101::mead::RootChordNote& Harmony::root_chord_note() const {
  // @@protoc_insertion_point(field_get:mead101.mead.Harmony.root_chord_note)
  return _internal_root_chord_note();
}
inline void Harmony::unsafe_arena_set_allocated_root_chord_note(
    ::mead101::mead::RootChordNote* root_chord_note) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(root_chord_note_);
  }
  root_chord_note_ = root_chord_note;
  if (root_chord_note) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.Harmony.root_chord_note)
}
inline ::mead101::mead::RootChordNote* Harmony::release_root_chord_note() {
  _has_bits_[0] &= ~0x00000002u;
  ::mead101::mead::RootChordNote* temp = root_chord_note_;
  root_chord_note_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::RootChordNote* Harmony::unsafe_arena_release_root_chord_note() {
  // @@protoc_insertion_point(field_release:mead101.mead.Harmony.root_chord_note)
  _has_bits_[0] &= ~0x00000002u;
  ::mead101::mead::RootChordNote* temp = root_chord_note_;
  root_chord_note_ = nullptr;
  return temp;
}
inline ::mead101::mead::RootChordNote* Harmony::_internal_mutable_root_chord_note() {
  _has_bits_[0] |= 0x00000002u;
  if (root_chord_note_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::RootChordNote>(GetArena());
    root_chord_note_ = p;
  }
  return root_chord_note_;
}
inline ::mead101::mead::RootChordNote* Harmony::mutable_root_chord_note() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Harmony.root_chord_note)
  return _internal_mutable_root_chord_note();
}
inline void Harmony::set_allocated_root_chord_note(::mead101::mead::RootChordNote* root_chord_note) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete root_chord_note_;
  }
  if (root_chord_note) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(root_chord_note);
    if (message_arena != submessage_arena) {
      root_chord_note = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, root_chord_note, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  root_chord_note_ = root_chord_note;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.Harmony.root_chord_note)
}

// optional .mead101.mead.RootChordQuality root_chord_quality = 5;
inline bool Harmony::_internal_has_root_chord_quality() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || root_chord_quality_ != nullptr);
  return value;
}
inline bool Harmony::has_root_chord_quality() const {
  return _internal_has_root_chord_quality();
}
inline void Harmony::clear_root_chord_quality() {
  if (root_chord_quality_ != nullptr) root_chord_quality_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::mead101::mead::RootChordQuality& Harmony::_internal_root_chord_quality() const {
  const ::mead101::mead::RootChordQuality* p = root_chord_quality_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::RootChordQuality*>(
      &::mead101::mead::_RootChordQuality_default_instance_);
}
inline const ::mead101::mead::RootChordQuality& Harmony::root_chord_quality() const {
  // @@protoc_insertion_point(field_get:mead101.mead.Harmony.root_chord_quality)
  return _internal_root_chord_quality();
}
inline void Harmony::unsafe_arena_set_allocated_root_chord_quality(
    ::mead101::mead::RootChordQuality* root_chord_quality) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(root_chord_quality_);
  }
  root_chord_quality_ = root_chord_quality;
  if (root_chord_quality) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.Harmony.root_chord_quality)
}
inline ::mead101::mead::RootChordQuality* Harmony::release_root_chord_quality() {
  _has_bits_[0] &= ~0x00000004u;
  ::mead101::mead::RootChordQuality* temp = root_chord_quality_;
  root_chord_quality_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::RootChordQuality* Harmony::unsafe_arena_release_root_chord_quality() {
  // @@protoc_insertion_point(field_release:mead101.mead.Harmony.root_chord_quality)
  _has_bits_[0] &= ~0x00000004u;
  ::mead101::mead::RootChordQuality* temp = root_chord_quality_;
  root_chord_quality_ = nullptr;
  return temp;
}
inline ::mead101::mead::RootChordQuality* Harmony::_internal_mutable_root_chord_quality() {
  _has_bits_[0] |= 0x00000004u;
  if (root_chord_quality_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::RootChordQuality>(GetArena());
    root_chord_quality_ = p;
  }
  return root_chord_quality_;
}
inline ::mead101::mead::RootChordQuality* Harmony::mutable_root_chord_quality() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Harmony.root_chord_quality)
  return _internal_mutable_root_chord_quality();
}
inline void Harmony::set_allocated_root_chord_quality(::mead101::mead::RootChordQuality* root_chord_quality) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete root_chord_quality_;
  }
  if (root_chord_quality) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(root_chord_quality);
    if (message_arena != submessage_arena) {
      root_chord_quality = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, root_chord_quality, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  root_chord_quality_ = root_chord_quality;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.Harmony.root_chord_quality)
}

// -------------------------------------------------------------------

// HarmonyModulation

// optional int32 end_bar = 1;
inline bool HarmonyModulation::_internal_has_end_bar() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool HarmonyModulation::has_end_bar() const {
  return _internal_has_end_bar();
}
inline void HarmonyModulation::clear_end_bar() {
  end_bar_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HarmonyModulation::_internal_end_bar() const {
  return end_bar_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HarmonyModulation::end_bar() const {
  // @@protoc_insertion_point(field_get:mead101.mead.HarmonyModulation.end_bar)
  return _internal_end_bar();
}
inline void HarmonyModulation::_internal_set_end_bar(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  end_bar_ = value;
}
inline void HarmonyModulation::set_end_bar(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_end_bar(value);
  // @@protoc_insertion_point(field_set:mead101.mead.HarmonyModulation.end_bar)
}

// optional double end_point = 2;
inline bool HarmonyModulation::_internal_has_end_point() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool HarmonyModulation::has_end_point() const {
  return _internal_has_end_point();
}
inline void HarmonyModulation::clear_end_point() {
  end_point_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double HarmonyModulation::_internal_end_point() const {
  return end_point_;
}
inline double HarmonyModulation::end_point() const {
  // @@protoc_insertion_point(field_get:mead101.mead.HarmonyModulation.end_point)
  return _internal_end_point();
}
inline void HarmonyModulation::_internal_set_end_point(double value) {
  _has_bits_[0] |= 0x00000008u;
  end_point_ = value;
}
inline void HarmonyModulation::set_end_point(double value) {
  _internal_set_end_point(value);
  // @@protoc_insertion_point(field_set:mead101.mead.HarmonyModulation.end_point)
}

// optional .mead101.mead.Mode mode = 3;
inline bool HarmonyModulation::_internal_has_mode() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || mode_ != nullptr);
  return value;
}
inline bool HarmonyModulation::has_mode() const {
  return _internal_has_mode();
}
inline void HarmonyModulation::clear_mode() {
  if (mode_ != nullptr) mode_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::mead101::mead::Mode& HarmonyModulation::_internal_mode() const {
  const ::mead101::mead::Mode* p = mode_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::Mode*>(
      &::mead101::mead::_Mode_default_instance_);
}
inline const ::mead101::mead::Mode& HarmonyModulation::mode() const {
  // @@protoc_insertion_point(field_get:mead101.mead.HarmonyModulation.mode)
  return _internal_mode();
}
inline void HarmonyModulation::unsafe_arena_set_allocated_mode(
    ::mead101::mead::Mode* mode) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mode_);
  }
  mode_ = mode;
  if (mode) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.HarmonyModulation.mode)
}
inline ::mead101::mead::Mode* HarmonyModulation::release_mode() {
  _has_bits_[0] &= ~0x00000001u;
  ::mead101::mead::Mode* temp = mode_;
  mode_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::Mode* HarmonyModulation::unsafe_arena_release_mode() {
  // @@protoc_insertion_point(field_release:mead101.mead.HarmonyModulation.mode)
  _has_bits_[0] &= ~0x00000001u;
  ::mead101::mead::Mode* temp = mode_;
  mode_ = nullptr;
  return temp;
}
inline ::mead101::mead::Mode* HarmonyModulation::_internal_mutable_mode() {
  _has_bits_[0] |= 0x00000001u;
  if (mode_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::Mode>(GetArena());
    mode_ = p;
  }
  return mode_;
}
inline ::mead101::mead::Mode* HarmonyModulation::mutable_mode() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.HarmonyModulation.mode)
  return _internal_mutable_mode();
}
inline void HarmonyModulation::set_allocated_mode(::mead101::mead::Mode* mode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete mode_;
  }
  if (mode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(mode);
    if (message_arena != submessage_arena) {
      mode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mode, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  mode_ = mode;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.HarmonyModulation.mode)
}

// optional .mead101.mead.RootChordNote root_chord_note = 4;
inline bool HarmonyModulation::_internal_has_root_chord_note() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || root_chord_note_ != nullptr);
  return value;
}
inline bool HarmonyModulation::has_root_chord_note() const {
  return _internal_has_root_chord_note();
}
inline void HarmonyModulation::clear_root_chord_note() {
  if (root_chord_note_ != nullptr) root_chord_note_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::mead101::mead::RootChordNote& HarmonyModulation::_internal_root_chord_note() const {
  const ::mead101::mead::RootChordNote* p = root_chord_note_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::RootChordNote*>(
      &::mead101::mead::_RootChordNote_default_instance_);
}
inline const ::mead101::mead::RootChordNote& HarmonyModulation::root_chord_note() const {
  // @@protoc_insertion_point(field_get:mead101.mead.HarmonyModulation.root_chord_note)
  return _internal_root_chord_note();
}
inline void HarmonyModulation::unsafe_arena_set_allocated_root_chord_note(
    ::mead101::mead::RootChordNote* root_chord_note) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(root_chord_note_);
  }
  root_chord_note_ = root_chord_note;
  if (root_chord_note) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.HarmonyModulation.root_chord_note)
}
inline ::mead101::mead::RootChordNote* HarmonyModulation::release_root_chord_note() {
  _has_bits_[0] &= ~0x00000002u;
  ::mead101::mead::RootChordNote* temp = root_chord_note_;
  root_chord_note_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::RootChordNote* HarmonyModulation::unsafe_arena_release_root_chord_note() {
  // @@protoc_insertion_point(field_release:mead101.mead.HarmonyModulation.root_chord_note)
  _has_bits_[0] &= ~0x00000002u;
  ::mead101::mead::RootChordNote* temp = root_chord_note_;
  root_chord_note_ = nullptr;
  return temp;
}
inline ::mead101::mead::RootChordNote* HarmonyModulation::_internal_mutable_root_chord_note() {
  _has_bits_[0] |= 0x00000002u;
  if (root_chord_note_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::RootChordNote>(GetArena());
    root_chord_note_ = p;
  }
  return root_chord_note_;
}
inline ::mead101::mead::RootChordNote* HarmonyModulation::mutable_root_chord_note() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.HarmonyModulation.root_chord_note)
  return _internal_mutable_root_chord_note();
}
inline void HarmonyModulation::set_allocated_root_chord_note(::mead101::mead::RootChordNote* root_chord_note) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete root_chord_note_;
  }
  if (root_chord_note) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(root_chord_note);
    if (message_arena != submessage_arena) {
      root_chord_note = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, root_chord_note, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  root_chord_note_ = root_chord_note;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.HarmonyModulation.root_chord_note)
}

// optional .mead101.mead.RootChordQuality root_chord_quality = 5;
inline bool HarmonyModulation::_internal_has_root_chord_quality() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || root_chord_quality_ != nullptr);
  return value;
}
inline bool HarmonyModulation::has_root_chord_quality() const {
  return _internal_has_root_chord_quality();
}
inline void HarmonyModulation::clear_root_chord_quality() {
  if (root_chord_quality_ != nullptr) root_chord_quality_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::mead101::mead::RootChordQuality& HarmonyModulation::_internal_root_chord_quality() const {
  const ::mead101::mead::RootChordQuality* p = root_chord_quality_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::RootChordQuality*>(
      &::mead101::mead::_RootChordQuality_default_instance_);
}
inline const ::mead101::mead::RootChordQuality& HarmonyModulation::root_chord_quality() const {
  // @@protoc_insertion_point(field_get:mead101.mead.HarmonyModulation.root_chord_quality)
  return _internal_root_chord_quality();
}
inline void HarmonyModulation::unsafe_arena_set_allocated_root_chord_quality(
    ::mead101::mead::RootChordQuality* root_chord_quality) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(root_chord_quality_);
  }
  root_chord_quality_ = root_chord_quality;
  if (root_chord_quality) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.HarmonyModulation.root_chord_quality)
}
inline ::mead101::mead::RootChordQuality* HarmonyModulation::release_root_chord_quality() {
  _has_bits_[0] &= ~0x00000004u;
  ::mead101::mead::RootChordQuality* temp = root_chord_quality_;
  root_chord_quality_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::RootChordQuality* HarmonyModulation::unsafe_arena_release_root_chord_quality() {
  // @@protoc_insertion_point(field_release:mead101.mead.HarmonyModulation.root_chord_quality)
  _has_bits_[0] &= ~0x00000004u;
  ::mead101::mead::RootChordQuality* temp = root_chord_quality_;
  root_chord_quality_ = nullptr;
  return temp;
}
inline ::mead101::mead::RootChordQuality* HarmonyModulation::_internal_mutable_root_chord_quality() {
  _has_bits_[0] |= 0x00000004u;
  if (root_chord_quality_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::RootChordQuality>(GetArena());
    root_chord_quality_ = p;
  }
  return root_chord_quality_;
}
inline ::mead101::mead::RootChordQuality* HarmonyModulation::mutable_root_chord_quality() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.HarmonyModulation.root_chord_quality)
  return _internal_mutable_root_chord_quality();
}
inline void HarmonyModulation::set_allocated_root_chord_quality(::mead101::mead::RootChordQuality* root_chord_quality) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete root_chord_quality_;
  }
  if (root_chord_quality) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(root_chord_quality);
    if (message_arena != submessage_arena) {
      root_chord_quality = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, root_chord_quality, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  root_chord_quality_ = root_chord_quality;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.HarmonyModulation.root_chord_quality)
}

// optional int32 start_bar = 6;
inline bool HarmonyModulation::_internal_has_start_bar() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool HarmonyModulation::has_start_bar() const {
  return _internal_has_start_bar();
}
inline void HarmonyModulation::clear_start_bar() {
  start_bar_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HarmonyModulation::_internal_start_bar() const {
  return start_bar_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HarmonyModulation::start_bar() const {
  // @@protoc_insertion_point(field_get:mead101.mead.HarmonyModulation.start_bar)
  return _internal_start_bar();
}
inline void HarmonyModulation::_internal_set_start_bar(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  start_bar_ = value;
}
inline void HarmonyModulation::set_start_bar(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_start_bar(value);
  // @@protoc_insertion_point(field_set:mead101.mead.HarmonyModulation.start_bar)
}

// optional double start_point = 7;
inline bool HarmonyModulation::_internal_has_start_point() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool HarmonyModulation::has_start_point() const {
  return _internal_has_start_point();
}
inline void HarmonyModulation::clear_start_point() {
  start_point_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline double HarmonyModulation::_internal_start_point() const {
  return start_point_;
}
inline double HarmonyModulation::start_point() const {
  // @@protoc_insertion_point(field_get:mead101.mead.HarmonyModulation.start_point)
  return _internal_start_point();
}
inline void HarmonyModulation::_internal_set_start_point(double value) {
  _has_bits_[0] |= 0x00000040u;
  start_point_ = value;
}
inline void HarmonyModulation::set_start_point(double value) {
  _internal_set_start_point(value);
  // @@protoc_insertion_point(field_set:mead101.mead.HarmonyModulation.start_point)
}

// -------------------------------------------------------------------

// HashSumAlgorithmType

// optional string namespace = 1;
inline bool HashSumAlgorithmType::_internal_has_namespace_() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool HashSumAlgorithmType::has_namespace_() const {
  return _internal_has_namespace_();
}
inline void HashSumAlgorithmType::clear_namespace_() {
  namespace__.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& HashSumAlgorithmType::namespace_() const {
  // @@protoc_insertion_point(field_get:mead101.mead.HashSumAlgorithmType.namespace)
  return _internal_namespace_();
}
inline void HashSumAlgorithmType::set_namespace_(const std::string& value) {
  _internal_set_namespace_(value);
  // @@protoc_insertion_point(field_set:mead101.mead.HashSumAlgorithmType.namespace)
}
inline std::string* HashSumAlgorithmType::mutable_namespace_() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.HashSumAlgorithmType.namespace)
  return _internal_mutable_namespace_();
}
inline const std::string& HashSumAlgorithmType::_internal_namespace_() const {
  return namespace__.Get();
}
inline void HashSumAlgorithmType::_internal_set_namespace_(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void HashSumAlgorithmType::set_namespace_(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  namespace__.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.HashSumAlgorithmType.namespace)
}
inline void HashSumAlgorithmType::set_namespace_(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.HashSumAlgorithmType.namespace)
}
inline void HashSumAlgorithmType::set_namespace_(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.HashSumAlgorithmType.namespace)
}
inline std::string* HashSumAlgorithmType::_internal_mutable_namespace_() {
  _has_bits_[0] |= 0x00000001u;
  return namespace__.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* HashSumAlgorithmType::release_namespace_() {
  // @@protoc_insertion_point(field_release:mead101.mead.HashSumAlgorithmType.namespace)
  if (!_internal_has_namespace_()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return namespace__.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HashSumAlgorithmType::set_allocated_namespace_(std::string* namespace_) {
  if (namespace_ != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  namespace__.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), namespace_,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.HashSumAlgorithmType.namespace)
}

// optional string user_defined_value = 2;
inline bool HashSumAlgorithmType::_internal_has_user_defined_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool HashSumAlgorithmType::has_user_defined_value() const {
  return _internal_has_user_defined_value();
}
inline void HashSumAlgorithmType::clear_user_defined_value() {
  user_defined_value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& HashSumAlgorithmType::user_defined_value() const {
  // @@protoc_insertion_point(field_get:mead101.mead.HashSumAlgorithmType.user_defined_value)
  return _internal_user_defined_value();
}
inline void HashSumAlgorithmType::set_user_defined_value(const std::string& value) {
  _internal_set_user_defined_value(value);
  // @@protoc_insertion_point(field_set:mead101.mead.HashSumAlgorithmType.user_defined_value)
}
inline std::string* HashSumAlgorithmType::mutable_user_defined_value() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.HashSumAlgorithmType.user_defined_value)
  return _internal_mutable_user_defined_value();
}
inline const std::string& HashSumAlgorithmType::_internal_user_defined_value() const {
  return user_defined_value_.Get();
}
inline void HashSumAlgorithmType::_internal_set_user_defined_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void HashSumAlgorithmType::set_user_defined_value(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  user_defined_value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.HashSumAlgorithmType.user_defined_value)
}
inline void HashSumAlgorithmType::set_user_defined_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.HashSumAlgorithmType.user_defined_value)
}
inline void HashSumAlgorithmType::set_user_defined_value(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.HashSumAlgorithmType.user_defined_value)
}
inline std::string* HashSumAlgorithmType::_internal_mutable_user_defined_value() {
  _has_bits_[0] |= 0x00000002u;
  return user_defined_value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* HashSumAlgorithmType::release_user_defined_value() {
  // @@protoc_insertion_point(field_release:mead101.mead.HashSumAlgorithmType.user_defined_value)
  if (!_internal_has_user_defined_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return user_defined_value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HashSumAlgorithmType::set_allocated_user_defined_value(std::string* user_defined_value) {
  if (user_defined_value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  user_defined_value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_defined_value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.HashSumAlgorithmType.user_defined_value)
}

// optional .mead101.avs.HashSumAlgorithmType ext_value = 3;
inline bool HashSumAlgorithmType::_internal_has_ext_value() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || ext_value_ != nullptr);
  return value;
}
inline bool HashSumAlgorithmType::has_ext_value() const {
  return _internal_has_ext_value();
}
inline const ::mead101::avs::HashSumAlgorithmType& HashSumAlgorithmType::_internal_ext_value() const {
  const ::mead101::avs::HashSumAlgorithmType* p = ext_value_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::avs::HashSumAlgorithmType*>(
      &::mead101::avs::_HashSumAlgorithmType_default_instance_);
}
inline const ::mead101::avs::HashSumAlgorithmType& HashSumAlgorithmType::ext_value() const {
  // @@protoc_insertion_point(field_get:mead101.mead.HashSumAlgorithmType.ext_value)
  return _internal_ext_value();
}
inline void HashSumAlgorithmType::unsafe_arena_set_allocated_ext_value(
    ::mead101::avs::HashSumAlgorithmType* ext_value) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext_value_);
  }
  ext_value_ = ext_value;
  if (ext_value) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.HashSumAlgorithmType.ext_value)
}
inline ::mead101::avs::HashSumAlgorithmType* HashSumAlgorithmType::release_ext_value() {
  _has_bits_[0] &= ~0x00000004u;
  ::mead101::avs::HashSumAlgorithmType* temp = ext_value_;
  ext_value_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::avs::HashSumAlgorithmType* HashSumAlgorithmType::unsafe_arena_release_ext_value() {
  // @@protoc_insertion_point(field_release:mead101.mead.HashSumAlgorithmType.ext_value)
  _has_bits_[0] &= ~0x00000004u;
  ::mead101::avs::HashSumAlgorithmType* temp = ext_value_;
  ext_value_ = nullptr;
  return temp;
}
inline ::mead101::avs::HashSumAlgorithmType* HashSumAlgorithmType::_internal_mutable_ext_value() {
  _has_bits_[0] |= 0x00000004u;
  if (ext_value_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::avs::HashSumAlgorithmType>(GetArena());
    ext_value_ = p;
  }
  return ext_value_;
}
inline ::mead101::avs::HashSumAlgorithmType* HashSumAlgorithmType::mutable_ext_value() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.HashSumAlgorithmType.ext_value)
  return _internal_mutable_ext_value();
}
inline void HashSumAlgorithmType::set_allocated_ext_value(::mead101::avs::HashSumAlgorithmType* ext_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext_value_);
  }
  if (ext_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext_value)->GetArena();
    if (message_arena != submessage_arena) {
      ext_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext_value, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  ext_value_ = ext_value;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.HashSumAlgorithmType.ext_value)
}

// -------------------------------------------------------------------

// HistoricChartingInformation

// repeated .mead101.mead.ChartEntry chart_entry = 1;
inline int HistoricChartingInformation::_internal_chart_entry_size() const {
  return chart_entry_.size();
}
inline int HistoricChartingInformation::chart_entry_size() const {
  return _internal_chart_entry_size();
}
inline void HistoricChartingInformation::clear_chart_entry() {
  chart_entry_.Clear();
}
inline ::mead101::mead::ChartEntry* HistoricChartingInformation::mutable_chart_entry(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.HistoricChartingInformation.chart_entry)
  return chart_entry_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::ChartEntry >*
HistoricChartingInformation::mutable_chart_entry() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.HistoricChartingInformation.chart_entry)
  return &chart_entry_;
}
inline const ::mead101::mead::ChartEntry& HistoricChartingInformation::_internal_chart_entry(int index) const {
  return chart_entry_.Get(index);
}
inline const ::mead101::mead::ChartEntry& HistoricChartingInformation::chart_entry(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.HistoricChartingInformation.chart_entry)
  return _internal_chart_entry(index);
}
inline ::mead101::mead::ChartEntry* HistoricChartingInformation::_internal_add_chart_entry() {
  return chart_entry_.Add();
}
inline ::mead101::mead::ChartEntry* HistoricChartingInformation::add_chart_entry() {
  // @@protoc_insertion_point(field_add:mead101.mead.HistoricChartingInformation.chart_entry)
  return _internal_add_chart_entry();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::ChartEntry >&
HistoricChartingInformation::chart_entry() const {
  // @@protoc_insertion_point(field_list:mead101.mead.HistoricChartingInformation.chart_entry)
  return chart_entry_;
}

// repeated .mead101.mead.ChartName chart_name = 2;
inline int HistoricChartingInformation::_internal_chart_name_size() const {
  return chart_name_.size();
}
inline int HistoricChartingInformation::chart_name_size() const {
  return _internal_chart_name_size();
}
inline void HistoricChartingInformation::clear_chart_name() {
  chart_name_.Clear();
}
inline ::mead101::mead::ChartName* HistoricChartingInformation::mutable_chart_name(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.HistoricChartingInformation.chart_name)
  return chart_name_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::ChartName >*
HistoricChartingInformation::mutable_chart_name() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.HistoricChartingInformation.chart_name)
  return &chart_name_;
}
inline const ::mead101::mead::ChartName& HistoricChartingInformation::_internal_chart_name(int index) const {
  return chart_name_.Get(index);
}
inline const ::mead101::mead::ChartName& HistoricChartingInformation::chart_name(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.HistoricChartingInformation.chart_name)
  return _internal_chart_name(index);
}
inline ::mead101::mead::ChartName* HistoricChartingInformation::_internal_add_chart_name() {
  return chart_name_.Add();
}
inline ::mead101::mead::ChartName* HistoricChartingInformation::add_chart_name() {
  // @@protoc_insertion_point(field_add:mead101.mead.HistoricChartingInformation.chart_name)
  return _internal_add_chart_name();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::ChartName >&
HistoricChartingInformation::chart_name() const {
  // @@protoc_insertion_point(field_list:mead101.mead.HistoricChartingInformation.chart_name)
  return chart_name_;
}

// repeated .mead101.mead.TextWithFormat comment = 3;
inline int HistoricChartingInformation::_internal_comment_size() const {
  return comment_.size();
}
inline int HistoricChartingInformation::comment_size() const {
  return _internal_comment_size();
}
inline void HistoricChartingInformation::clear_comment() {
  comment_.Clear();
}
inline ::mead101::mead::TextWithFormat* HistoricChartingInformation::mutable_comment(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.HistoricChartingInformation.comment)
  return comment_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::TextWithFormat >*
HistoricChartingInformation::mutable_comment() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.HistoricChartingInformation.comment)
  return &comment_;
}
inline const ::mead101::mead::TextWithFormat& HistoricChartingInformation::_internal_comment(int index) const {
  return comment_.Get(index);
}
inline const ::mead101::mead::TextWithFormat& HistoricChartingInformation::comment(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.HistoricChartingInformation.comment)
  return _internal_comment(index);
}
inline ::mead101::mead::TextWithFormat* HistoricChartingInformation::_internal_add_comment() {
  return comment_.Add();
}
inline ::mead101::mead::TextWithFormat* HistoricChartingInformation::add_comment() {
  // @@protoc_insertion_point(field_add:mead101.mead.HistoricChartingInformation.comment)
  return _internal_add_comment();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::TextWithFormat >&
HistoricChartingInformation::comment() const {
  // @@protoc_insertion_point(field_list:mead101.mead.HistoricChartingInformation.comment)
  return comment_;
}

// optional .mead101.mead.Duration duration_in_charts = 4;
inline bool HistoricChartingInformation::_internal_has_duration_in_charts() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || duration_in_charts_ != nullptr);
  return value;
}
inline bool HistoricChartingInformation::has_duration_in_charts() const {
  return _internal_has_duration_in_charts();
}
inline void HistoricChartingInformation::clear_duration_in_charts() {
  if (duration_in_charts_ != nullptr) duration_in_charts_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::mead101::mead::Duration& HistoricChartingInformation::_internal_duration_in_charts() const {
  const ::mead101::mead::Duration* p = duration_in_charts_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::Duration*>(
      &::mead101::mead::_Duration_default_instance_);
}
inline const ::mead101::mead::Duration& HistoricChartingInformation::duration_in_charts() const {
  // @@protoc_insertion_point(field_get:mead101.mead.HistoricChartingInformation.duration_in_charts)
  return _internal_duration_in_charts();
}
inline void HistoricChartingInformation::unsafe_arena_set_allocated_duration_in_charts(
    ::mead101::mead::Duration* duration_in_charts) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(duration_in_charts_);
  }
  duration_in_charts_ = duration_in_charts;
  if (duration_in_charts) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.HistoricChartingInformation.duration_in_charts)
}
inline ::mead101::mead::Duration* HistoricChartingInformation::release_duration_in_charts() {
  _has_bits_[0] &= ~0x00000001u;
  ::mead101::mead::Duration* temp = duration_in_charts_;
  duration_in_charts_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::Duration* HistoricChartingInformation::unsafe_arena_release_duration_in_charts() {
  // @@protoc_insertion_point(field_release:mead101.mead.HistoricChartingInformation.duration_in_charts)
  _has_bits_[0] &= ~0x00000001u;
  ::mead101::mead::Duration* temp = duration_in_charts_;
  duration_in_charts_ = nullptr;
  return temp;
}
inline ::mead101::mead::Duration* HistoricChartingInformation::_internal_mutable_duration_in_charts() {
  _has_bits_[0] |= 0x00000001u;
  if (duration_in_charts_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::Duration>(GetArena());
    duration_in_charts_ = p;
  }
  return duration_in_charts_;
}
inline ::mead101::mead::Duration* HistoricChartingInformation::mutable_duration_in_charts() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.HistoricChartingInformation.duration_in_charts)
  return _internal_mutable_duration_in_charts();
}
inline void HistoricChartingInformation::set_allocated_duration_in_charts(::mead101::mead::Duration* duration_in_charts) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete duration_in_charts_;
  }
  if (duration_in_charts) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(duration_in_charts);
    if (message_arena != submessage_arena) {
      duration_in_charts = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, duration_in_charts, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  duration_in_charts_ = duration_in_charts;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.HistoricChartingInformation.duration_in_charts)
}

// repeated string metadata_source_reference = 5;
inline int HistoricChartingInformation::_internal_metadata_source_reference_size() const {
  return metadata_source_reference_.size();
}
inline int HistoricChartingInformation::metadata_source_reference_size() const {
  return _internal_metadata_source_reference_size();
}
inline void HistoricChartingInformation::clear_metadata_source_reference() {
  metadata_source_reference_.Clear();
}
inline std::string* HistoricChartingInformation::add_metadata_source_reference() {
  // @@protoc_insertion_point(field_add_mutable:mead101.mead.HistoricChartingInformation.metadata_source_reference)
  return _internal_add_metadata_source_reference();
}
inline const std::string& HistoricChartingInformation::_internal_metadata_source_reference(int index) const {
  return metadata_source_reference_.Get(index);
}
inline const std::string& HistoricChartingInformation::metadata_source_reference(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.HistoricChartingInformation.metadata_source_reference)
  return _internal_metadata_source_reference(index);
}
inline std::string* HistoricChartingInformation::mutable_metadata_source_reference(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.HistoricChartingInformation.metadata_source_reference)
  return metadata_source_reference_.Mutable(index);
}
inline void HistoricChartingInformation::set_metadata_source_reference(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:mead101.mead.HistoricChartingInformation.metadata_source_reference)
  metadata_source_reference_.Mutable(index)->assign(value);
}
inline void HistoricChartingInformation::set_metadata_source_reference(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:mead101.mead.HistoricChartingInformation.metadata_source_reference)
  metadata_source_reference_.Mutable(index)->assign(std::move(value));
}
inline void HistoricChartingInformation::set_metadata_source_reference(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  metadata_source_reference_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mead101.mead.HistoricChartingInformation.metadata_source_reference)
}
inline void HistoricChartingInformation::set_metadata_source_reference(int index, const char* value, size_t size) {
  metadata_source_reference_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.HistoricChartingInformation.metadata_source_reference)
}
inline std::string* HistoricChartingInformation::_internal_add_metadata_source_reference() {
  return metadata_source_reference_.Add();
}
inline void HistoricChartingInformation::add_metadata_source_reference(const std::string& value) {
  metadata_source_reference_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mead101.mead.HistoricChartingInformation.metadata_source_reference)
}
inline void HistoricChartingInformation::add_metadata_source_reference(std::string&& value) {
  metadata_source_reference_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:mead101.mead.HistoricChartingInformation.metadata_source_reference)
}
inline void HistoricChartingInformation::add_metadata_source_reference(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  metadata_source_reference_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mead101.mead.HistoricChartingInformation.metadata_source_reference)
}
inline void HistoricChartingInformation::add_metadata_source_reference(const char* value, size_t size) {
  metadata_source_reference_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mead101.mead.HistoricChartingInformation.metadata_source_reference)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
HistoricChartingInformation::metadata_source_reference() const {
  // @@protoc_insertion_point(field_list:mead101.mead.HistoricChartingInformation.metadata_source_reference)
  return metadata_source_reference_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
HistoricChartingInformation::mutable_metadata_source_reference() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.HistoricChartingInformation.metadata_source_reference)
  return &metadata_source_reference_;
}

// optional .mead101.mead.CurrentTerritoryCode territory_code = 6;
inline bool HistoricChartingInformation::_internal_has_territory_code() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || territory_code_ != nullptr);
  return value;
}
inline bool HistoricChartingInformation::has_territory_code() const {
  return _internal_has_territory_code();
}
inline void HistoricChartingInformation::clear_territory_code() {
  if (territory_code_ != nullptr) territory_code_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::mead101::mead::CurrentTerritoryCode& HistoricChartingInformation::_internal_territory_code() const {
  const ::mead101::mead::CurrentTerritoryCode* p = territory_code_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::CurrentTerritoryCode*>(
      &::mead101::mead::_CurrentTerritoryCode_default_instance_);
}
inline const ::mead101::mead::CurrentTerritoryCode& HistoricChartingInformation::territory_code() const {
  // @@protoc_insertion_point(field_get:mead101.mead.HistoricChartingInformation.territory_code)
  return _internal_territory_code();
}
inline void HistoricChartingInformation::unsafe_arena_set_allocated_territory_code(
    ::mead101::mead::CurrentTerritoryCode* territory_code) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(territory_code_);
  }
  territory_code_ = territory_code;
  if (territory_code) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.HistoricChartingInformation.territory_code)
}
inline ::mead101::mead::CurrentTerritoryCode* HistoricChartingInformation::release_territory_code() {
  _has_bits_[0] &= ~0x00000002u;
  ::mead101::mead::CurrentTerritoryCode* temp = territory_code_;
  territory_code_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::CurrentTerritoryCode* HistoricChartingInformation::unsafe_arena_release_territory_code() {
  // @@protoc_insertion_point(field_release:mead101.mead.HistoricChartingInformation.territory_code)
  _has_bits_[0] &= ~0x00000002u;
  ::mead101::mead::CurrentTerritoryCode* temp = territory_code_;
  territory_code_ = nullptr;
  return temp;
}
inline ::mead101::mead::CurrentTerritoryCode* HistoricChartingInformation::_internal_mutable_territory_code() {
  _has_bits_[0] |= 0x00000002u;
  if (territory_code_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::CurrentTerritoryCode>(GetArena());
    territory_code_ = p;
  }
  return territory_code_;
}
inline ::mead101::mead::CurrentTerritoryCode* HistoricChartingInformation::mutable_territory_code() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.HistoricChartingInformation.territory_code)
  return _internal_mutable_territory_code();
}
inline void HistoricChartingInformation::set_allocated_territory_code(::mead101::mead::CurrentTerritoryCode* territory_code) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete territory_code_;
  }
  if (territory_code) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(territory_code);
    if (message_arena != submessage_arena) {
      territory_code = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, territory_code, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  territory_code_ = territory_code;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.HistoricChartingInformation.territory_code)
}

// optional int32 top_position = 7;
inline bool HistoricChartingInformation::_internal_has_top_position() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool HistoricChartingInformation::has_top_position() const {
  return _internal_has_top_position();
}
inline void HistoricChartingInformation::clear_top_position() {
  top_position_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HistoricChartingInformation::_internal_top_position() const {
  return top_position_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HistoricChartingInformation::top_position() const {
  // @@protoc_insertion_point(field_get:mead101.mead.HistoricChartingInformation.top_position)
  return _internal_top_position();
}
inline void HistoricChartingInformation::_internal_set_top_position(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  top_position_ = value;
}
inline void HistoricChartingInformation::set_top_position(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_top_position(value);
  // @@protoc_insertion_point(field_set:mead101.mead.HistoricChartingInformation.top_position)
}

// -------------------------------------------------------------------

// HistoricChartingInformationForParty

// repeated .mead101.mead.ChartEntry chart_entry = 1;
inline int HistoricChartingInformationForParty::_internal_chart_entry_size() const {
  return chart_entry_.size();
}
inline int HistoricChartingInformationForParty::chart_entry_size() const {
  return _internal_chart_entry_size();
}
inline void HistoricChartingInformationForParty::clear_chart_entry() {
  chart_entry_.Clear();
}
inline ::mead101::mead::ChartEntry* HistoricChartingInformationForParty::mutable_chart_entry(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.HistoricChartingInformationForParty.chart_entry)
  return chart_entry_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::ChartEntry >*
HistoricChartingInformationForParty::mutable_chart_entry() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.HistoricChartingInformationForParty.chart_entry)
  return &chart_entry_;
}
inline const ::mead101::mead::ChartEntry& HistoricChartingInformationForParty::_internal_chart_entry(int index) const {
  return chart_entry_.Get(index);
}
inline const ::mead101::mead::ChartEntry& HistoricChartingInformationForParty::chart_entry(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.HistoricChartingInformationForParty.chart_entry)
  return _internal_chart_entry(index);
}
inline ::mead101::mead::ChartEntry* HistoricChartingInformationForParty::_internal_add_chart_entry() {
  return chart_entry_.Add();
}
inline ::mead101::mead::ChartEntry* HistoricChartingInformationForParty::add_chart_entry() {
  // @@protoc_insertion_point(field_add:mead101.mead.HistoricChartingInformationForParty.chart_entry)
  return _internal_add_chart_entry();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::ChartEntry >&
HistoricChartingInformationForParty::chart_entry() const {
  // @@protoc_insertion_point(field_list:mead101.mead.HistoricChartingInformationForParty.chart_entry)
  return chart_entry_;
}

// repeated .mead101.mead.ChartName chart_name = 2;
inline int HistoricChartingInformationForParty::_internal_chart_name_size() const {
  return chart_name_.size();
}
inline int HistoricChartingInformationForParty::chart_name_size() const {
  return _internal_chart_name_size();
}
inline void HistoricChartingInformationForParty::clear_chart_name() {
  chart_name_.Clear();
}
inline ::mead101::mead::ChartName* HistoricChartingInformationForParty::mutable_chart_name(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.HistoricChartingInformationForParty.chart_name)
  return chart_name_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::ChartName >*
HistoricChartingInformationForParty::mutable_chart_name() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.HistoricChartingInformationForParty.chart_name)
  return &chart_name_;
}
inline const ::mead101::mead::ChartName& HistoricChartingInformationForParty::_internal_chart_name(int index) const {
  return chart_name_.Get(index);
}
inline const ::mead101::mead::ChartName& HistoricChartingInformationForParty::chart_name(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.HistoricChartingInformationForParty.chart_name)
  return _internal_chart_name(index);
}
inline ::mead101::mead::ChartName* HistoricChartingInformationForParty::_internal_add_chart_name() {
  return chart_name_.Add();
}
inline ::mead101::mead::ChartName* HistoricChartingInformationForParty::add_chart_name() {
  // @@protoc_insertion_point(field_add:mead101.mead.HistoricChartingInformationForParty.chart_name)
  return _internal_add_chart_name();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::ChartName >&
HistoricChartingInformationForParty::chart_name() const {
  // @@protoc_insertion_point(field_list:mead101.mead.HistoricChartingInformationForParty.chart_name)
  return chart_name_;
}

// optional .mead101.mead.Release charted_release = 3;
inline bool HistoricChartingInformationForParty::_internal_has_charted_release() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || charted_release_ != nullptr);
  return value;
}
inline bool HistoricChartingInformationForParty::has_charted_release() const {
  return _internal_has_charted_release();
}
inline void HistoricChartingInformationForParty::clear_charted_release() {
  if (charted_release_ != nullptr) charted_release_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::mead101::mead::Release& HistoricChartingInformationForParty::_internal_charted_release() const {
  const ::mead101::mead::Release* p = charted_release_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::Release*>(
      &::mead101::mead::_Release_default_instance_);
}
inline const ::mead101::mead::Release& HistoricChartingInformationForParty::charted_release() const {
  // @@protoc_insertion_point(field_get:mead101.mead.HistoricChartingInformationForParty.charted_release)
  return _internal_charted_release();
}
inline void HistoricChartingInformationForParty::unsafe_arena_set_allocated_charted_release(
    ::mead101::mead::Release* charted_release) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(charted_release_);
  }
  charted_release_ = charted_release;
  if (charted_release) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.HistoricChartingInformationForParty.charted_release)
}
inline ::mead101::mead::Release* HistoricChartingInformationForParty::release_charted_release() {
  _has_bits_[0] &= ~0x00000001u;
  ::mead101::mead::Release* temp = charted_release_;
  charted_release_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::Release* HistoricChartingInformationForParty::unsafe_arena_release_charted_release() {
  // @@protoc_insertion_point(field_release:mead101.mead.HistoricChartingInformationForParty.charted_release)
  _has_bits_[0] &= ~0x00000001u;
  ::mead101::mead::Release* temp = charted_release_;
  charted_release_ = nullptr;
  return temp;
}
inline ::mead101::mead::Release* HistoricChartingInformationForParty::_internal_mutable_charted_release() {
  _has_bits_[0] |= 0x00000001u;
  if (charted_release_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::Release>(GetArena());
    charted_release_ = p;
  }
  return charted_release_;
}
inline ::mead101::mead::Release* HistoricChartingInformationForParty::mutable_charted_release() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.HistoricChartingInformationForParty.charted_release)
  return _internal_mutable_charted_release();
}
inline void HistoricChartingInformationForParty::set_allocated_charted_release(::mead101::mead::Release* charted_release) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete charted_release_;
  }
  if (charted_release) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(charted_release);
    if (message_arena != submessage_arena) {
      charted_release = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, charted_release, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  charted_release_ = charted_release;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.HistoricChartingInformationForParty.charted_release)
}

// optional .mead101.mead.Resource charted_resource = 4;
inline bool HistoricChartingInformationForParty::_internal_has_charted_resource() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || charted_resource_ != nullptr);
  return value;
}
inline bool HistoricChartingInformationForParty::has_charted_resource() const {
  return _internal_has_charted_resource();
}
inline void HistoricChartingInformationForParty::clear_charted_resource() {
  if (charted_resource_ != nullptr) charted_resource_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::mead101::mead::Resource& HistoricChartingInformationForParty::_internal_charted_resource() const {
  const ::mead101::mead::Resource* p = charted_resource_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::Resource*>(
      &::mead101::mead::_Resource_default_instance_);
}
inline const ::mead101::mead::Resource& HistoricChartingInformationForParty::charted_resource() const {
  // @@protoc_insertion_point(field_get:mead101.mead.HistoricChartingInformationForParty.charted_resource)
  return _internal_charted_resource();
}
inline void HistoricChartingInformationForParty::unsafe_arena_set_allocated_charted_resource(
    ::mead101::mead::Resource* charted_resource) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(charted_resource_);
  }
  charted_resource_ = charted_resource;
  if (charted_resource) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.HistoricChartingInformationForParty.charted_resource)
}
inline ::mead101::mead::Resource* HistoricChartingInformationForParty::release_charted_resource() {
  _has_bits_[0] &= ~0x00000002u;
  ::mead101::mead::Resource* temp = charted_resource_;
  charted_resource_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::Resource* HistoricChartingInformationForParty::unsafe_arena_release_charted_resource() {
  // @@protoc_insertion_point(field_release:mead101.mead.HistoricChartingInformationForParty.charted_resource)
  _has_bits_[0] &= ~0x00000002u;
  ::mead101::mead::Resource* temp = charted_resource_;
  charted_resource_ = nullptr;
  return temp;
}
inline ::mead101::mead::Resource* HistoricChartingInformationForParty::_internal_mutable_charted_resource() {
  _has_bits_[0] |= 0x00000002u;
  if (charted_resource_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::Resource>(GetArena());
    charted_resource_ = p;
  }
  return charted_resource_;
}
inline ::mead101::mead::Resource* HistoricChartingInformationForParty::mutable_charted_resource() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.HistoricChartingInformationForParty.charted_resource)
  return _internal_mutable_charted_resource();
}
inline void HistoricChartingInformationForParty::set_allocated_charted_resource(::mead101::mead::Resource* charted_resource) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete charted_resource_;
  }
  if (charted_resource) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(charted_resource);
    if (message_arena != submessage_arena) {
      charted_resource = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, charted_resource, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  charted_resource_ = charted_resource;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.HistoricChartingInformationForParty.charted_resource)
}

// optional .mead101.mead.Work charted_work = 5;
inline bool HistoricChartingInformationForParty::_internal_has_charted_work() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || charted_work_ != nullptr);
  return value;
}
inline bool HistoricChartingInformationForParty::has_charted_work() const {
  return _internal_has_charted_work();
}
inline void HistoricChartingInformationForParty::clear_charted_work() {
  if (charted_work_ != nullptr) charted_work_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::mead101::mead::Work& HistoricChartingInformationForParty::_internal_charted_work() const {
  const ::mead101::mead::Work* p = charted_work_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::Work*>(
      &::mead101::mead::_Work_default_instance_);
}
inline const ::mead101::mead::Work& HistoricChartingInformationForParty::charted_work() const {
  // @@protoc_insertion_point(field_get:mead101.mead.HistoricChartingInformationForParty.charted_work)
  return _internal_charted_work();
}
inline void HistoricChartingInformationForParty::unsafe_arena_set_allocated_charted_work(
    ::mead101::mead::Work* charted_work) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(charted_work_);
  }
  charted_work_ = charted_work;
  if (charted_work) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.HistoricChartingInformationForParty.charted_work)
}
inline ::mead101::mead::Work* HistoricChartingInformationForParty::release_charted_work() {
  _has_bits_[0] &= ~0x00000004u;
  ::mead101::mead::Work* temp = charted_work_;
  charted_work_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::Work* HistoricChartingInformationForParty::unsafe_arena_release_charted_work() {
  // @@protoc_insertion_point(field_release:mead101.mead.HistoricChartingInformationForParty.charted_work)
  _has_bits_[0] &= ~0x00000004u;
  ::mead101::mead::Work* temp = charted_work_;
  charted_work_ = nullptr;
  return temp;
}
inline ::mead101::mead::Work* HistoricChartingInformationForParty::_internal_mutable_charted_work() {
  _has_bits_[0] |= 0x00000004u;
  if (charted_work_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::Work>(GetArena());
    charted_work_ = p;
  }
  return charted_work_;
}
inline ::mead101::mead::Work* HistoricChartingInformationForParty::mutable_charted_work() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.HistoricChartingInformationForParty.charted_work)
  return _internal_mutable_charted_work();
}
inline void HistoricChartingInformationForParty::set_allocated_charted_work(::mead101::mead::Work* charted_work) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete charted_work_;
  }
  if (charted_work) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(charted_work);
    if (message_arena != submessage_arena) {
      charted_work = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, charted_work, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  charted_work_ = charted_work;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.HistoricChartingInformationForParty.charted_work)
}

// repeated .mead101.mead.TextWithFormat comment = 6;
inline int HistoricChartingInformationForParty::_internal_comment_size() const {
  return comment_.size();
}
inline int HistoricChartingInformationForParty::comment_size() const {
  return _internal_comment_size();
}
inline void HistoricChartingInformationForParty::clear_comment() {
  comment_.Clear();
}
inline ::mead101::mead::TextWithFormat* HistoricChartingInformationForParty::mutable_comment(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.HistoricChartingInformationForParty.comment)
  return comment_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::TextWithFormat >*
HistoricChartingInformationForParty::mutable_comment() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.HistoricChartingInformationForParty.comment)
  return &comment_;
}
inline const ::mead101::mead::TextWithFormat& HistoricChartingInformationForParty::_internal_comment(int index) const {
  return comment_.Get(index);
}
inline const ::mead101::mead::TextWithFormat& HistoricChartingInformationForParty::comment(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.HistoricChartingInformationForParty.comment)
  return _internal_comment(index);
}
inline ::mead101::mead::TextWithFormat* HistoricChartingInformationForParty::_internal_add_comment() {
  return comment_.Add();
}
inline ::mead101::mead::TextWithFormat* HistoricChartingInformationForParty::add_comment() {
  // @@protoc_insertion_point(field_add:mead101.mead.HistoricChartingInformationForParty.comment)
  return _internal_add_comment();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::TextWithFormat >&
HistoricChartingInformationForParty::comment() const {
  // @@protoc_insertion_point(field_list:mead101.mead.HistoricChartingInformationForParty.comment)
  return comment_;
}

// optional .mead101.mead.Duration duration_in_charts = 7;
inline bool HistoricChartingInformationForParty::_internal_has_duration_in_charts() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || duration_in_charts_ != nullptr);
  return value;
}
inline bool HistoricChartingInformationForParty::has_duration_in_charts() const {
  return _internal_has_duration_in_charts();
}
inline void HistoricChartingInformationForParty::clear_duration_in_charts() {
  if (duration_in_charts_ != nullptr) duration_in_charts_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::mead101::mead::Duration& HistoricChartingInformationForParty::_internal_duration_in_charts() const {
  const ::mead101::mead::Duration* p = duration_in_charts_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::Duration*>(
      &::mead101::mead::_Duration_default_instance_);
}
inline const ::mead101::mead::Duration& HistoricChartingInformationForParty::duration_in_charts() const {
  // @@protoc_insertion_point(field_get:mead101.mead.HistoricChartingInformationForParty.duration_in_charts)
  return _internal_duration_in_charts();
}
inline void HistoricChartingInformationForParty::unsafe_arena_set_allocated_duration_in_charts(
    ::mead101::mead::Duration* duration_in_charts) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(duration_in_charts_);
  }
  duration_in_charts_ = duration_in_charts;
  if (duration_in_charts) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.HistoricChartingInformationForParty.duration_in_charts)
}
inline ::mead101::mead::Duration* HistoricChartingInformationForParty::release_duration_in_charts() {
  _has_bits_[0] &= ~0x00000008u;
  ::mead101::mead::Duration* temp = duration_in_charts_;
  duration_in_charts_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::Duration* HistoricChartingInformationForParty::unsafe_arena_release_duration_in_charts() {
  // @@protoc_insertion_point(field_release:mead101.mead.HistoricChartingInformationForParty.duration_in_charts)
  _has_bits_[0] &= ~0x00000008u;
  ::mead101::mead::Duration* temp = duration_in_charts_;
  duration_in_charts_ = nullptr;
  return temp;
}
inline ::mead101::mead::Duration* HistoricChartingInformationForParty::_internal_mutable_duration_in_charts() {
  _has_bits_[0] |= 0x00000008u;
  if (duration_in_charts_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::Duration>(GetArena());
    duration_in_charts_ = p;
  }
  return duration_in_charts_;
}
inline ::mead101::mead::Duration* HistoricChartingInformationForParty::mutable_duration_in_charts() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.HistoricChartingInformationForParty.duration_in_charts)
  return _internal_mutable_duration_in_charts();
}
inline void HistoricChartingInformationForParty::set_allocated_duration_in_charts(::mead101::mead::Duration* duration_in_charts) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete duration_in_charts_;
  }
  if (duration_in_charts) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(duration_in_charts);
    if (message_arena != submessage_arena) {
      duration_in_charts = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, duration_in_charts, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  duration_in_charts_ = duration_in_charts;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.HistoricChartingInformationForParty.duration_in_charts)
}

// repeated string metadata_source_reference = 8;
inline int HistoricChartingInformationForParty::_internal_metadata_source_reference_size() const {
  return metadata_source_reference_.size();
}
inline int HistoricChartingInformationForParty::metadata_source_reference_size() const {
  return _internal_metadata_source_reference_size();
}
inline void HistoricChartingInformationForParty::clear_metadata_source_reference() {
  metadata_source_reference_.Clear();
}
inline std::string* HistoricChartingInformationForParty::add_metadata_source_reference() {
  // @@protoc_insertion_point(field_add_mutable:mead101.mead.HistoricChartingInformationForParty.metadata_source_reference)
  return _internal_add_metadata_source_reference();
}
inline const std::string& HistoricChartingInformationForParty::_internal_metadata_source_reference(int index) const {
  return metadata_source_reference_.Get(index);
}
inline const std::string& HistoricChartingInformationForParty::metadata_source_reference(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.HistoricChartingInformationForParty.metadata_source_reference)
  return _internal_metadata_source_reference(index);
}
inline std::string* HistoricChartingInformationForParty::mutable_metadata_source_reference(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.HistoricChartingInformationForParty.metadata_source_reference)
  return metadata_source_reference_.Mutable(index);
}
inline void HistoricChartingInformationForParty::set_metadata_source_reference(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:mead101.mead.HistoricChartingInformationForParty.metadata_source_reference)
  metadata_source_reference_.Mutable(index)->assign(value);
}
inline void HistoricChartingInformationForParty::set_metadata_source_reference(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:mead101.mead.HistoricChartingInformationForParty.metadata_source_reference)
  metadata_source_reference_.Mutable(index)->assign(std::move(value));
}
inline void HistoricChartingInformationForParty::set_metadata_source_reference(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  metadata_source_reference_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mead101.mead.HistoricChartingInformationForParty.metadata_source_reference)
}
inline void HistoricChartingInformationForParty::set_metadata_source_reference(int index, const char* value, size_t size) {
  metadata_source_reference_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.HistoricChartingInformationForParty.metadata_source_reference)
}
inline std::string* HistoricChartingInformationForParty::_internal_add_metadata_source_reference() {
  return metadata_source_reference_.Add();
}
inline void HistoricChartingInformationForParty::add_metadata_source_reference(const std::string& value) {
  metadata_source_reference_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mead101.mead.HistoricChartingInformationForParty.metadata_source_reference)
}
inline void HistoricChartingInformationForParty::add_metadata_source_reference(std::string&& value) {
  metadata_source_reference_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:mead101.mead.HistoricChartingInformationForParty.metadata_source_reference)
}
inline void HistoricChartingInformationForParty::add_metadata_source_reference(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  metadata_source_reference_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mead101.mead.HistoricChartingInformationForParty.metadata_source_reference)
}
inline void HistoricChartingInformationForParty::add_metadata_source_reference(const char* value, size_t size) {
  metadata_source_reference_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mead101.mead.HistoricChartingInformationForParty.metadata_source_reference)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
HistoricChartingInformationForParty::metadata_source_reference() const {
  // @@protoc_insertion_point(field_list:mead101.mead.HistoricChartingInformationForParty.metadata_source_reference)
  return metadata_source_reference_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
HistoricChartingInformationForParty::mutable_metadata_source_reference() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.HistoricChartingInformationForParty.metadata_source_reference)
  return &metadata_source_reference_;
}

// optional .mead101.mead.CurrentTerritoryCode territory_code = 9;
inline bool HistoricChartingInformationForParty::_internal_has_territory_code() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || territory_code_ != nullptr);
  return value;
}
inline bool HistoricChartingInformationForParty::has_territory_code() const {
  return _internal_has_territory_code();
}
inline void HistoricChartingInformationForParty::clear_territory_code() {
  if (territory_code_ != nullptr) territory_code_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::mead101::mead::CurrentTerritoryCode& HistoricChartingInformationForParty::_internal_territory_code() const {
  const ::mead101::mead::CurrentTerritoryCode* p = territory_code_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::CurrentTerritoryCode*>(
      &::mead101::mead::_CurrentTerritoryCode_default_instance_);
}
inline const ::mead101::mead::CurrentTerritoryCode& HistoricChartingInformationForParty::territory_code() const {
  // @@protoc_insertion_point(field_get:mead101.mead.HistoricChartingInformationForParty.territory_code)
  return _internal_territory_code();
}
inline void HistoricChartingInformationForParty::unsafe_arena_set_allocated_territory_code(
    ::mead101::mead::CurrentTerritoryCode* territory_code) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(territory_code_);
  }
  territory_code_ = territory_code;
  if (territory_code) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.HistoricChartingInformationForParty.territory_code)
}
inline ::mead101::mead::CurrentTerritoryCode* HistoricChartingInformationForParty::release_territory_code() {
  _has_bits_[0] &= ~0x00000010u;
  ::mead101::mead::CurrentTerritoryCode* temp = territory_code_;
  territory_code_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::CurrentTerritoryCode* HistoricChartingInformationForParty::unsafe_arena_release_territory_code() {
  // @@protoc_insertion_point(field_release:mead101.mead.HistoricChartingInformationForParty.territory_code)
  _has_bits_[0] &= ~0x00000010u;
  ::mead101::mead::CurrentTerritoryCode* temp = territory_code_;
  territory_code_ = nullptr;
  return temp;
}
inline ::mead101::mead::CurrentTerritoryCode* HistoricChartingInformationForParty::_internal_mutable_territory_code() {
  _has_bits_[0] |= 0x00000010u;
  if (territory_code_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::CurrentTerritoryCode>(GetArena());
    territory_code_ = p;
  }
  return territory_code_;
}
inline ::mead101::mead::CurrentTerritoryCode* HistoricChartingInformationForParty::mutable_territory_code() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.HistoricChartingInformationForParty.territory_code)
  return _internal_mutable_territory_code();
}
inline void HistoricChartingInformationForParty::set_allocated_territory_code(::mead101::mead::CurrentTerritoryCode* territory_code) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete territory_code_;
  }
  if (territory_code) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(territory_code);
    if (message_arena != submessage_arena) {
      territory_code = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, territory_code, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  territory_code_ = territory_code;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.HistoricChartingInformationForParty.territory_code)
}

// optional int32 top_position = 10;
inline bool HistoricChartingInformationForParty::_internal_has_top_position() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool HistoricChartingInformationForParty::has_top_position() const {
  return _internal_has_top_position();
}
inline void HistoricChartingInformationForParty::clear_top_position() {
  top_position_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HistoricChartingInformationForParty::_internal_top_position() const {
  return top_position_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HistoricChartingInformationForParty::top_position() const {
  // @@protoc_insertion_point(field_get:mead101.mead.HistoricChartingInformationForParty.top_position)
  return _internal_top_position();
}
inline void HistoricChartingInformationForParty::_internal_set_top_position(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  top_position_ = value;
}
inline void HistoricChartingInformationForParty::set_top_position(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_top_position(value);
  // @@protoc_insertion_point(field_set:mead101.mead.HistoricChartingInformationForParty.top_position)
}

// -------------------------------------------------------------------

// Icon

// repeated string any_attribute_value = 1;
inline int Icon::_internal_any_attribute_value_size() const {
  return any_attribute_value_.size();
}
inline int Icon::any_attribute_value_size() const {
  return _internal_any_attribute_value_size();
}
inline void Icon::clear_any_attribute_value() {
  any_attribute_value_.Clear();
}
inline std::string* Icon::add_any_attribute_value() {
  // @@protoc_insertion_point(field_add_mutable:mead101.mead.Icon.any_attribute_value)
  return _internal_add_any_attribute_value();
}
inline const std::string& Icon::_internal_any_attribute_value(int index) const {
  return any_attribute_value_.Get(index);
}
inline const std::string& Icon::any_attribute_value(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.Icon.any_attribute_value)
  return _internal_any_attribute_value(index);
}
inline std::string* Icon::mutable_any_attribute_value(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Icon.any_attribute_value)
  return any_attribute_value_.Mutable(index);
}
inline void Icon::set_any_attribute_value(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:mead101.mead.Icon.any_attribute_value)
  any_attribute_value_.Mutable(index)->assign(value);
}
inline void Icon::set_any_attribute_value(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:mead101.mead.Icon.any_attribute_value)
  any_attribute_value_.Mutable(index)->assign(std::move(value));
}
inline void Icon::set_any_attribute_value(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  any_attribute_value_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mead101.mead.Icon.any_attribute_value)
}
inline void Icon::set_any_attribute_value(int index, const char* value, size_t size) {
  any_attribute_value_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.Icon.any_attribute_value)
}
inline std::string* Icon::_internal_add_any_attribute_value() {
  return any_attribute_value_.Add();
}
inline void Icon::add_any_attribute_value(const std::string& value) {
  any_attribute_value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mead101.mead.Icon.any_attribute_value)
}
inline void Icon::add_any_attribute_value(std::string&& value) {
  any_attribute_value_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:mead101.mead.Icon.any_attribute_value)
}
inline void Icon::add_any_attribute_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  any_attribute_value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mead101.mead.Icon.any_attribute_value)
}
inline void Icon::add_any_attribute_value(const char* value, size_t size) {
  any_attribute_value_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mead101.mead.Icon.any_attribute_value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Icon::any_attribute_value() const {
  // @@protoc_insertion_point(field_list:mead101.mead.Icon.any_attribute_value)
  return any_attribute_value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Icon::mutable_any_attribute_value() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.Icon.any_attribute_value)
  return &any_attribute_value_;
}

// optional string ext_value = 2;
inline bool Icon::_internal_has_ext_value() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Icon::has_ext_value() const {
  return _internal_has_ext_value();
}
inline void Icon::clear_ext_value() {
  ext_value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Icon::ext_value() const {
  // @@protoc_insertion_point(field_get:mead101.mead.Icon.ext_value)
  return _internal_ext_value();
}
inline void Icon::set_ext_value(const std::string& value) {
  _internal_set_ext_value(value);
  // @@protoc_insertion_point(field_set:mead101.mead.Icon.ext_value)
}
inline std::string* Icon::mutable_ext_value() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Icon.ext_value)
  return _internal_mutable_ext_value();
}
inline const std::string& Icon::_internal_ext_value() const {
  return ext_value_.Get();
}
inline void Icon::_internal_set_ext_value(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  ext_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Icon::set_ext_value(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  ext_value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.Icon.ext_value)
}
inline void Icon::set_ext_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  ext_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.Icon.ext_value)
}
inline void Icon::set_ext_value(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  ext_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.Icon.ext_value)
}
inline std::string* Icon::_internal_mutable_ext_value() {
  _has_bits_[0] |= 0x00000001u;
  return ext_value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Icon::release_ext_value() {
  // @@protoc_insertion_point(field_release:mead101.mead.Icon.ext_value)
  if (!_internal_has_ext_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return ext_value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Icon::set_allocated_ext_value(std::string* ext_value) {
  if (ext_value != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  ext_value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ext_value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.Icon.ext_value)
}

// -------------------------------------------------------------------

// Id

// repeated string any_attribute_value = 1;
inline int Id::_internal_any_attribute_value_size() const {
  return any_attribute_value_.size();
}
inline int Id::any_attribute_value_size() const {
  return _internal_any_attribute_value_size();
}
inline void Id::clear_any_attribute_value() {
  any_attribute_value_.Clear();
}
inline std::string* Id::add_any_attribute_value() {
  // @@protoc_insertion_point(field_add_mutable:mead101.mead.Id.any_attribute_value)
  return _internal_add_any_attribute_value();
}
inline const std::string& Id::_internal_any_attribute_value(int index) const {
  return any_attribute_value_.Get(index);
}
inline const std::string& Id::any_attribute_value(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.Id.any_attribute_value)
  return _internal_any_attribute_value(index);
}
inline std::string* Id::mutable_any_attribute_value(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Id.any_attribute_value)
  return any_attribute_value_.Mutable(index);
}
inline void Id::set_any_attribute_value(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:mead101.mead.Id.any_attribute_value)
  any_attribute_value_.Mutable(index)->assign(value);
}
inline void Id::set_any_attribute_value(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:mead101.mead.Id.any_attribute_value)
  any_attribute_value_.Mutable(index)->assign(std::move(value));
}
inline void Id::set_any_attribute_value(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  any_attribute_value_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mead101.mead.Id.any_attribute_value)
}
inline void Id::set_any_attribute_value(int index, const char* value, size_t size) {
  any_attribute_value_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.Id.any_attribute_value)
}
inline std::string* Id::_internal_add_any_attribute_value() {
  return any_attribute_value_.Add();
}
inline void Id::add_any_attribute_value(const std::string& value) {
  any_attribute_value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mead101.mead.Id.any_attribute_value)
}
inline void Id::add_any_attribute_value(std::string&& value) {
  any_attribute_value_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:mead101.mead.Id.any_attribute_value)
}
inline void Id::add_any_attribute_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  any_attribute_value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mead101.mead.Id.any_attribute_value)
}
inline void Id::add_any_attribute_value(const char* value, size_t size) {
  any_attribute_value_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mead101.mead.Id.any_attribute_value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Id::any_attribute_value() const {
  // @@protoc_insertion_point(field_list:mead101.mead.Id.any_attribute_value)
  return any_attribute_value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Id::mutable_any_attribute_value() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.Id.any_attribute_value)
  return &any_attribute_value_;
}

// optional string ext_value = 2;
inline bool Id::_internal_has_ext_value() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Id::has_ext_value() const {
  return _internal_has_ext_value();
}
inline void Id::clear_ext_value() {
  ext_value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Id::ext_value() const {
  // @@protoc_insertion_point(field_get:mead101.mead.Id.ext_value)
  return _internal_ext_value();
}
inline void Id::set_ext_value(const std::string& value) {
  _internal_set_ext_value(value);
  // @@protoc_insertion_point(field_set:mead101.mead.Id.ext_value)
}
inline std::string* Id::mutable_ext_value() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Id.ext_value)
  return _internal_mutable_ext_value();
}
inline const std::string& Id::_internal_ext_value() const {
  return ext_value_.Get();
}
inline void Id::_internal_set_ext_value(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  ext_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Id::set_ext_value(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  ext_value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.Id.ext_value)
}
inline void Id::set_ext_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  ext_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.Id.ext_value)
}
inline void Id::set_ext_value(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  ext_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.Id.ext_value)
}
inline std::string* Id::_internal_mutable_ext_value() {
  _has_bits_[0] |= 0x00000001u;
  return ext_value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Id::release_ext_value() {
  // @@protoc_insertion_point(field_release:mead101.mead.Id.ext_value)
  if (!_internal_has_ext_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return ext_value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Id::set_allocated_ext_value(std::string* ext_value) {
  if (ext_value != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  ext_value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ext_value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.Id.ext_value)
}

// -------------------------------------------------------------------

// Image

// optional .mead101.mead.File file = 1;
inline bool Image::_internal_has_file() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || file_ != nullptr);
  return value;
}
inline bool Image::has_file() const {
  return _internal_has_file();
}
inline void Image::clear_file() {
  if (file_ != nullptr) file_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::mead101::mead::File& Image::_internal_file() const {
  const ::mead101::mead::File* p = file_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::File*>(
      &::mead101::mead::_File_default_instance_);
}
inline const ::mead101::mead::File& Image::file() const {
  // @@protoc_insertion_point(field_get:mead101.mead.Image.file)
  return _internal_file();
}
inline void Image::unsafe_arena_set_allocated_file(
    ::mead101::mead::File* file) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(file_);
  }
  file_ = file;
  if (file) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.Image.file)
}
inline ::mead101::mead::File* Image::release_file() {
  _has_bits_[0] &= ~0x00000001u;
  ::mead101::mead::File* temp = file_;
  file_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::File* Image::unsafe_arena_release_file() {
  // @@protoc_insertion_point(field_release:mead101.mead.Image.file)
  _has_bits_[0] &= ~0x00000001u;
  ::mead101::mead::File* temp = file_;
  file_ = nullptr;
  return temp;
}
inline ::mead101::mead::File* Image::_internal_mutable_file() {
  _has_bits_[0] |= 0x00000001u;
  if (file_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::File>(GetArena());
    file_ = p;
  }
  return file_;
}
inline ::mead101::mead::File* Image::mutable_file() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Image.file)
  return _internal_mutable_file();
}
inline void Image::set_allocated_file(::mead101::mead::File* file) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete file_;
  }
  if (file) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(file);
    if (message_arena != submessage_arena) {
      file = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, file, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  file_ = file;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.Image.file)
}

// repeated .mead101.mead.ImageType image_type = 2;
inline int Image::_internal_image_type_size() const {
  return image_type_.size();
}
inline int Image::image_type_size() const {
  return _internal_image_type_size();
}
inline void Image::clear_image_type() {
  image_type_.Clear();
}
inline ::mead101::mead::ImageType* Image::mutable_image_type(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Image.image_type)
  return image_type_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::ImageType >*
Image::mutable_image_type() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.Image.image_type)
  return &image_type_;
}
inline const ::mead101::mead::ImageType& Image::_internal_image_type(int index) const {
  return image_type_.Get(index);
}
inline const ::mead101::mead::ImageType& Image::image_type(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.Image.image_type)
  return _internal_image_type(index);
}
inline ::mead101::mead::ImageType* Image::_internal_add_image_type() {
  return image_type_.Add();
}
inline ::mead101::mead::ImageType* Image::add_image_type() {
  // @@protoc_insertion_point(field_add:mead101.mead.Image.image_type)
  return _internal_add_image_type();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::ImageType >&
Image::image_type() const {
  // @@protoc_insertion_point(field_list:mead101.mead.Image.image_type)
  return image_type_;
}

// repeated string metadata_source_reference = 3;
inline int Image::_internal_metadata_source_reference_size() const {
  return metadata_source_reference_.size();
}
inline int Image::metadata_source_reference_size() const {
  return _internal_metadata_source_reference_size();
}
inline void Image::clear_metadata_source_reference() {
  metadata_source_reference_.Clear();
}
inline std::string* Image::add_metadata_source_reference() {
  // @@protoc_insertion_point(field_add_mutable:mead101.mead.Image.metadata_source_reference)
  return _internal_add_metadata_source_reference();
}
inline const std::string& Image::_internal_metadata_source_reference(int index) const {
  return metadata_source_reference_.Get(index);
}
inline const std::string& Image::metadata_source_reference(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.Image.metadata_source_reference)
  return _internal_metadata_source_reference(index);
}
inline std::string* Image::mutable_metadata_source_reference(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Image.metadata_source_reference)
  return metadata_source_reference_.Mutable(index);
}
inline void Image::set_metadata_source_reference(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:mead101.mead.Image.metadata_source_reference)
  metadata_source_reference_.Mutable(index)->assign(value);
}
inline void Image::set_metadata_source_reference(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:mead101.mead.Image.metadata_source_reference)
  metadata_source_reference_.Mutable(index)->assign(std::move(value));
}
inline void Image::set_metadata_source_reference(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  metadata_source_reference_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mead101.mead.Image.metadata_source_reference)
}
inline void Image::set_metadata_source_reference(int index, const char* value, size_t size) {
  metadata_source_reference_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.Image.metadata_source_reference)
}
inline std::string* Image::_internal_add_metadata_source_reference() {
  return metadata_source_reference_.Add();
}
inline void Image::add_metadata_source_reference(const std::string& value) {
  metadata_source_reference_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mead101.mead.Image.metadata_source_reference)
}
inline void Image::add_metadata_source_reference(std::string&& value) {
  metadata_source_reference_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:mead101.mead.Image.metadata_source_reference)
}
inline void Image::add_metadata_source_reference(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  metadata_source_reference_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mead101.mead.Image.metadata_source_reference)
}
inline void Image::add_metadata_source_reference(const char* value, size_t size) {
  metadata_source_reference_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mead101.mead.Image.metadata_source_reference)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Image::metadata_source_reference() const {
  // @@protoc_insertion_point(field_list:mead101.mead.Image.metadata_source_reference)
  return metadata_source_reference_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Image::mutable_metadata_source_reference() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.Image.metadata_source_reference)
  return &metadata_source_reference_;
}

// -------------------------------------------------------------------

// ImageType

// optional string namespace = 1;
inline bool ImageType::_internal_has_namespace_() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ImageType::has_namespace_() const {
  return _internal_has_namespace_();
}
inline void ImageType::clear_namespace_() {
  namespace__.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ImageType::namespace_() const {
  // @@protoc_insertion_point(field_get:mead101.mead.ImageType.namespace)
  return _internal_namespace_();
}
inline void ImageType::set_namespace_(const std::string& value) {
  _internal_set_namespace_(value);
  // @@protoc_insertion_point(field_set:mead101.mead.ImageType.namespace)
}
inline std::string* ImageType::mutable_namespace_() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.ImageType.namespace)
  return _internal_mutable_namespace_();
}
inline const std::string& ImageType::_internal_namespace_() const {
  return namespace__.Get();
}
inline void ImageType::_internal_set_namespace_(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ImageType::set_namespace_(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  namespace__.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.ImageType.namespace)
}
inline void ImageType::set_namespace_(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.ImageType.namespace)
}
inline void ImageType::set_namespace_(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.ImageType.namespace)
}
inline std::string* ImageType::_internal_mutable_namespace_() {
  _has_bits_[0] |= 0x00000001u;
  return namespace__.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ImageType::release_namespace_() {
  // @@protoc_insertion_point(field_release:mead101.mead.ImageType.namespace)
  if (!_internal_has_namespace_()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return namespace__.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ImageType::set_allocated_namespace_(std::string* namespace_) {
  if (namespace_ != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  namespace__.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), namespace_,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.ImageType.namespace)
}

// optional string user_defined_value = 2;
inline bool ImageType::_internal_has_user_defined_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ImageType::has_user_defined_value() const {
  return _internal_has_user_defined_value();
}
inline void ImageType::clear_user_defined_value() {
  user_defined_value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ImageType::user_defined_value() const {
  // @@protoc_insertion_point(field_get:mead101.mead.ImageType.user_defined_value)
  return _internal_user_defined_value();
}
inline void ImageType::set_user_defined_value(const std::string& value) {
  _internal_set_user_defined_value(value);
  // @@protoc_insertion_point(field_set:mead101.mead.ImageType.user_defined_value)
}
inline std::string* ImageType::mutable_user_defined_value() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.ImageType.user_defined_value)
  return _internal_mutable_user_defined_value();
}
inline const std::string& ImageType::_internal_user_defined_value() const {
  return user_defined_value_.Get();
}
inline void ImageType::_internal_set_user_defined_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ImageType::set_user_defined_value(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  user_defined_value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.ImageType.user_defined_value)
}
inline void ImageType::set_user_defined_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.ImageType.user_defined_value)
}
inline void ImageType::set_user_defined_value(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.ImageType.user_defined_value)
}
inline std::string* ImageType::_internal_mutable_user_defined_value() {
  _has_bits_[0] |= 0x00000002u;
  return user_defined_value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ImageType::release_user_defined_value() {
  // @@protoc_insertion_point(field_release:mead101.mead.ImageType.user_defined_value)
  if (!_internal_has_user_defined_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return user_defined_value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ImageType::set_allocated_user_defined_value(std::string* user_defined_value) {
  if (user_defined_value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  user_defined_value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_defined_value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.ImageType.user_defined_value)
}

// optional .mead101.avs.ImageType ext_value = 3;
inline bool ImageType::_internal_has_ext_value() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || ext_value_ != nullptr);
  return value;
}
inline bool ImageType::has_ext_value() const {
  return _internal_has_ext_value();
}
inline const ::mead101::avs::ImageType& ImageType::_internal_ext_value() const {
  const ::mead101::avs::ImageType* p = ext_value_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::avs::ImageType*>(
      &::mead101::avs::_ImageType_default_instance_);
}
inline const ::mead101::avs::ImageType& ImageType::ext_value() const {
  // @@protoc_insertion_point(field_get:mead101.mead.ImageType.ext_value)
  return _internal_ext_value();
}
inline void ImageType::unsafe_arena_set_allocated_ext_value(
    ::mead101::avs::ImageType* ext_value) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext_value_);
  }
  ext_value_ = ext_value;
  if (ext_value) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.ImageType.ext_value)
}
inline ::mead101::avs::ImageType* ImageType::release_ext_value() {
  _has_bits_[0] &= ~0x00000004u;
  ::mead101::avs::ImageType* temp = ext_value_;
  ext_value_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::avs::ImageType* ImageType::unsafe_arena_release_ext_value() {
  // @@protoc_insertion_point(field_release:mead101.mead.ImageType.ext_value)
  _has_bits_[0] &= ~0x00000004u;
  ::mead101::avs::ImageType* temp = ext_value_;
  ext_value_ = nullptr;
  return temp;
}
inline ::mead101::avs::ImageType* ImageType::_internal_mutable_ext_value() {
  _has_bits_[0] |= 0x00000004u;
  if (ext_value_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::avs::ImageType>(GetArena());
    ext_value_ = p;
  }
  return ext_value_;
}
inline ::mead101::avs::ImageType* ImageType::mutable_ext_value() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.ImageType.ext_value)
  return _internal_mutable_ext_value();
}
inline void ImageType::set_allocated_ext_value(::mead101::avs::ImageType* ext_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext_value_);
  }
  if (ext_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext_value)->GetArena();
    if (message_arena != submessage_arena) {
      ext_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext_value, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  ext_value_ = ext_value;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.ImageType.ext_value)
}

// -------------------------------------------------------------------

// Instrument

// repeated string metadata_source_reference = 1;
inline int Instrument::_internal_metadata_source_reference_size() const {
  return metadata_source_reference_.size();
}
inline int Instrument::metadata_source_reference_size() const {
  return _internal_metadata_source_reference_size();
}
inline void Instrument::clear_metadata_source_reference() {
  metadata_source_reference_.Clear();
}
inline std::string* Instrument::add_metadata_source_reference() {
  // @@protoc_insertion_point(field_add_mutable:mead101.mead.Instrument.metadata_source_reference)
  return _internal_add_metadata_source_reference();
}
inline const std::string& Instrument::_internal_metadata_source_reference(int index) const {
  return metadata_source_reference_.Get(index);
}
inline const std::string& Instrument::metadata_source_reference(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.Instrument.metadata_source_reference)
  return _internal_metadata_source_reference(index);
}
inline std::string* Instrument::mutable_metadata_source_reference(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Instrument.metadata_source_reference)
  return metadata_source_reference_.Mutable(index);
}
inline void Instrument::set_metadata_source_reference(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:mead101.mead.Instrument.metadata_source_reference)
  metadata_source_reference_.Mutable(index)->assign(value);
}
inline void Instrument::set_metadata_source_reference(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:mead101.mead.Instrument.metadata_source_reference)
  metadata_source_reference_.Mutable(index)->assign(std::move(value));
}
inline void Instrument::set_metadata_source_reference(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  metadata_source_reference_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mead101.mead.Instrument.metadata_source_reference)
}
inline void Instrument::set_metadata_source_reference(int index, const char* value, size_t size) {
  metadata_source_reference_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.Instrument.metadata_source_reference)
}
inline std::string* Instrument::_internal_add_metadata_source_reference() {
  return metadata_source_reference_.Add();
}
inline void Instrument::add_metadata_source_reference(const std::string& value) {
  metadata_source_reference_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mead101.mead.Instrument.metadata_source_reference)
}
inline void Instrument::add_metadata_source_reference(std::string&& value) {
  metadata_source_reference_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:mead101.mead.Instrument.metadata_source_reference)
}
inline void Instrument::add_metadata_source_reference(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  metadata_source_reference_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mead101.mead.Instrument.metadata_source_reference)
}
inline void Instrument::add_metadata_source_reference(const char* value, size_t size) {
  metadata_source_reference_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mead101.mead.Instrument.metadata_source_reference)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Instrument::metadata_source_reference() const {
  // @@protoc_insertion_point(field_list:mead101.mead.Instrument.metadata_source_reference)
  return metadata_source_reference_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Instrument::mutable_metadata_source_reference() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.Instrument.metadata_source_reference)
  return &metadata_source_reference_;
}

// optional .mead101.mead.InstrumentValue value = 2;
inline bool Instrument::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || value_ != nullptr);
  return value;
}
inline bool Instrument::has_value() const {
  return _internal_has_value();
}
inline void Instrument::clear_value() {
  if (value_ != nullptr) value_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::mead101::mead::InstrumentValue& Instrument::_internal_value() const {
  const ::mead101::mead::InstrumentValue* p = value_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::InstrumentValue*>(
      &::mead101::mead::_InstrumentValue_default_instance_);
}
inline const ::mead101::mead::InstrumentValue& Instrument::value() const {
  // @@protoc_insertion_point(field_get:mead101.mead.Instrument.value)
  return _internal_value();
}
inline void Instrument::unsafe_arena_set_allocated_value(
    ::mead101::mead::InstrumentValue* value) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(value_);
  }
  value_ = value;
  if (value) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.Instrument.value)
}
inline ::mead101::mead::InstrumentValue* Instrument::release_value() {
  _has_bits_[0] &= ~0x00000001u;
  ::mead101::mead::InstrumentValue* temp = value_;
  value_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::InstrumentValue* Instrument::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_release:mead101.mead.Instrument.value)
  _has_bits_[0] &= ~0x00000001u;
  ::mead101::mead::InstrumentValue* temp = value_;
  value_ = nullptr;
  return temp;
}
inline ::mead101::mead::InstrumentValue* Instrument::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000001u;
  if (value_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::InstrumentValue>(GetArena());
    value_ = p;
  }
  return value_;
}
inline ::mead101::mead::InstrumentValue* Instrument::mutable_value() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Instrument.value)
  return _internal_mutable_value();
}
inline void Instrument::set_allocated_value(::mead101::mead::InstrumentValue* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete value_;
  }
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(value);
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.Instrument.value)
}

// -------------------------------------------------------------------

// InstrumentUsed

// optional bool is_featured = 1;
inline bool InstrumentUsed::_internal_has_is_featured() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool InstrumentUsed::has_is_featured() const {
  return _internal_has_is_featured();
}
inline void InstrumentUsed::clear_is_featured() {
  is_featured_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool InstrumentUsed::_internal_is_featured() const {
  return is_featured_;
}
inline bool InstrumentUsed::is_featured() const {
  // @@protoc_insertion_point(field_get:mead101.mead.InstrumentUsed.is_featured)
  return _internal_is_featured();
}
inline void InstrumentUsed::_internal_set_is_featured(bool value) {
  _has_bits_[0] |= 0x00000002u;
  is_featured_ = value;
}
inline void InstrumentUsed::set_is_featured(bool value) {
  _internal_set_is_featured(value);
  // @@protoc_insertion_point(field_set:mead101.mead.InstrumentUsed.is_featured)
}

// repeated string metadata_source_reference = 2;
inline int InstrumentUsed::_internal_metadata_source_reference_size() const {
  return metadata_source_reference_.size();
}
inline int InstrumentUsed::metadata_source_reference_size() const {
  return _internal_metadata_source_reference_size();
}
inline void InstrumentUsed::clear_metadata_source_reference() {
  metadata_source_reference_.Clear();
}
inline std::string* InstrumentUsed::add_metadata_source_reference() {
  // @@protoc_insertion_point(field_add_mutable:mead101.mead.InstrumentUsed.metadata_source_reference)
  return _internal_add_metadata_source_reference();
}
inline const std::string& InstrumentUsed::_internal_metadata_source_reference(int index) const {
  return metadata_source_reference_.Get(index);
}
inline const std::string& InstrumentUsed::metadata_source_reference(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.InstrumentUsed.metadata_source_reference)
  return _internal_metadata_source_reference(index);
}
inline std::string* InstrumentUsed::mutable_metadata_source_reference(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.InstrumentUsed.metadata_source_reference)
  return metadata_source_reference_.Mutable(index);
}
inline void InstrumentUsed::set_metadata_source_reference(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:mead101.mead.InstrumentUsed.metadata_source_reference)
  metadata_source_reference_.Mutable(index)->assign(value);
}
inline void InstrumentUsed::set_metadata_source_reference(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:mead101.mead.InstrumentUsed.metadata_source_reference)
  metadata_source_reference_.Mutable(index)->assign(std::move(value));
}
inline void InstrumentUsed::set_metadata_source_reference(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  metadata_source_reference_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mead101.mead.InstrumentUsed.metadata_source_reference)
}
inline void InstrumentUsed::set_metadata_source_reference(int index, const char* value, size_t size) {
  metadata_source_reference_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.InstrumentUsed.metadata_source_reference)
}
inline std::string* InstrumentUsed::_internal_add_metadata_source_reference() {
  return metadata_source_reference_.Add();
}
inline void InstrumentUsed::add_metadata_source_reference(const std::string& value) {
  metadata_source_reference_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mead101.mead.InstrumentUsed.metadata_source_reference)
}
inline void InstrumentUsed::add_metadata_source_reference(std::string&& value) {
  metadata_source_reference_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:mead101.mead.InstrumentUsed.metadata_source_reference)
}
inline void InstrumentUsed::add_metadata_source_reference(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  metadata_source_reference_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mead101.mead.InstrumentUsed.metadata_source_reference)
}
inline void InstrumentUsed::add_metadata_source_reference(const char* value, size_t size) {
  metadata_source_reference_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mead101.mead.InstrumentUsed.metadata_source_reference)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
InstrumentUsed::metadata_source_reference() const {
  // @@protoc_insertion_point(field_list:mead101.mead.InstrumentUsed.metadata_source_reference)
  return metadata_source_reference_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
InstrumentUsed::mutable_metadata_source_reference() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.InstrumentUsed.metadata_source_reference)
  return &metadata_source_reference_;
}

// optional .mead101.mead.InstrumentValue value = 3;
inline bool InstrumentUsed::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || value_ != nullptr);
  return value;
}
inline bool InstrumentUsed::has_value() const {
  return _internal_has_value();
}
inline void InstrumentUsed::clear_value() {
  if (value_ != nullptr) value_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::mead101::mead::InstrumentValue& InstrumentUsed::_internal_value() const {
  const ::mead101::mead::InstrumentValue* p = value_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::InstrumentValue*>(
      &::mead101::mead::_InstrumentValue_default_instance_);
}
inline const ::mead101::mead::InstrumentValue& InstrumentUsed::value() const {
  // @@protoc_insertion_point(field_get:mead101.mead.InstrumentUsed.value)
  return _internal_value();
}
inline void InstrumentUsed::unsafe_arena_set_allocated_value(
    ::mead101::mead::InstrumentValue* value) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(value_);
  }
  value_ = value;
  if (value) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.InstrumentUsed.value)
}
inline ::mead101::mead::InstrumentValue* InstrumentUsed::release_value() {
  _has_bits_[0] &= ~0x00000001u;
  ::mead101::mead::InstrumentValue* temp = value_;
  value_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::InstrumentValue* InstrumentUsed::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_release:mead101.mead.InstrumentUsed.value)
  _has_bits_[0] &= ~0x00000001u;
  ::mead101::mead::InstrumentValue* temp = value_;
  value_ = nullptr;
  return temp;
}
inline ::mead101::mead::InstrumentValue* InstrumentUsed::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000001u;
  if (value_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::InstrumentValue>(GetArena());
    value_ = p;
  }
  return value_;
}
inline ::mead101::mead::InstrumentValue* InstrumentUsed::mutable_value() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.InstrumentUsed.value)
  return _internal_mutable_value();
}
inline void InstrumentUsed::set_allocated_value(::mead101::mead::InstrumentValue* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete value_;
  }
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(value);
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.InstrumentUsed.value)
}

// -------------------------------------------------------------------

// InstrumentValue

// optional string namespace = 1;
inline bool InstrumentValue::_internal_has_namespace_() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool InstrumentValue::has_namespace_() const {
  return _internal_has_namespace_();
}
inline void InstrumentValue::clear_namespace_() {
  namespace__.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& InstrumentValue::namespace_() const {
  // @@protoc_insertion_point(field_get:mead101.mead.InstrumentValue.namespace)
  return _internal_namespace_();
}
inline void InstrumentValue::set_namespace_(const std::string& value) {
  _internal_set_namespace_(value);
  // @@protoc_insertion_point(field_set:mead101.mead.InstrumentValue.namespace)
}
inline std::string* InstrumentValue::mutable_namespace_() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.InstrumentValue.namespace)
  return _internal_mutable_namespace_();
}
inline const std::string& InstrumentValue::_internal_namespace_() const {
  return namespace__.Get();
}
inline void InstrumentValue::_internal_set_namespace_(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InstrumentValue::set_namespace_(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  namespace__.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.InstrumentValue.namespace)
}
inline void InstrumentValue::set_namespace_(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.InstrumentValue.namespace)
}
inline void InstrumentValue::set_namespace_(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.InstrumentValue.namespace)
}
inline std::string* InstrumentValue::_internal_mutable_namespace_() {
  _has_bits_[0] |= 0x00000001u;
  return namespace__.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InstrumentValue::release_namespace_() {
  // @@protoc_insertion_point(field_release:mead101.mead.InstrumentValue.namespace)
  if (!_internal_has_namespace_()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return namespace__.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InstrumentValue::set_allocated_namespace_(std::string* namespace_) {
  if (namespace_ != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  namespace__.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), namespace_,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.InstrumentValue.namespace)
}

// optional string user_defined_value = 2;
inline bool InstrumentValue::_internal_has_user_defined_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool InstrumentValue::has_user_defined_value() const {
  return _internal_has_user_defined_value();
}
inline void InstrumentValue::clear_user_defined_value() {
  user_defined_value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& InstrumentValue::user_defined_value() const {
  // @@protoc_insertion_point(field_get:mead101.mead.InstrumentValue.user_defined_value)
  return _internal_user_defined_value();
}
inline void InstrumentValue::set_user_defined_value(const std::string& value) {
  _internal_set_user_defined_value(value);
  // @@protoc_insertion_point(field_set:mead101.mead.InstrumentValue.user_defined_value)
}
inline std::string* InstrumentValue::mutable_user_defined_value() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.InstrumentValue.user_defined_value)
  return _internal_mutable_user_defined_value();
}
inline const std::string& InstrumentValue::_internal_user_defined_value() const {
  return user_defined_value_.Get();
}
inline void InstrumentValue::_internal_set_user_defined_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InstrumentValue::set_user_defined_value(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  user_defined_value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.InstrumentValue.user_defined_value)
}
inline void InstrumentValue::set_user_defined_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.InstrumentValue.user_defined_value)
}
inline void InstrumentValue::set_user_defined_value(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.InstrumentValue.user_defined_value)
}
inline std::string* InstrumentValue::_internal_mutable_user_defined_value() {
  _has_bits_[0] |= 0x00000002u;
  return user_defined_value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InstrumentValue::release_user_defined_value() {
  // @@protoc_insertion_point(field_release:mead101.mead.InstrumentValue.user_defined_value)
  if (!_internal_has_user_defined_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return user_defined_value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InstrumentValue::set_allocated_user_defined_value(std::string* user_defined_value) {
  if (user_defined_value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  user_defined_value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_defined_value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.InstrumentValue.user_defined_value)
}

// optional .mead101.avs.InstrumentType ext_value = 3;
inline bool InstrumentValue::_internal_has_ext_value() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || ext_value_ != nullptr);
  return value;
}
inline bool InstrumentValue::has_ext_value() const {
  return _internal_has_ext_value();
}
inline const ::mead101::avs::InstrumentType& InstrumentValue::_internal_ext_value() const {
  const ::mead101::avs::InstrumentType* p = ext_value_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::avs::InstrumentType*>(
      &::mead101::avs::_InstrumentType_default_instance_);
}
inline const ::mead101::avs::InstrumentType& InstrumentValue::ext_value() const {
  // @@protoc_insertion_point(field_get:mead101.mead.InstrumentValue.ext_value)
  return _internal_ext_value();
}
inline void InstrumentValue::unsafe_arena_set_allocated_ext_value(
    ::mead101::avs::InstrumentType* ext_value) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext_value_);
  }
  ext_value_ = ext_value;
  if (ext_value) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.InstrumentValue.ext_value)
}
inline ::mead101::avs::InstrumentType* InstrumentValue::release_ext_value() {
  _has_bits_[0] &= ~0x00000004u;
  ::mead101::avs::InstrumentType* temp = ext_value_;
  ext_value_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::avs::InstrumentType* InstrumentValue::unsafe_arena_release_ext_value() {
  // @@protoc_insertion_point(field_release:mead101.mead.InstrumentValue.ext_value)
  _has_bits_[0] &= ~0x00000004u;
  ::mead101::avs::InstrumentType* temp = ext_value_;
  ext_value_ = nullptr;
  return temp;
}
inline ::mead101::avs::InstrumentType* InstrumentValue::_internal_mutable_ext_value() {
  _has_bits_[0] |= 0x00000004u;
  if (ext_value_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::avs::InstrumentType>(GetArena());
    ext_value_ = p;
  }
  return ext_value_;
}
inline ::mead101::avs::InstrumentType* InstrumentValue::mutable_ext_value() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.InstrumentValue.ext_value)
  return _internal_mutable_ext_value();
}
inline void InstrumentValue::set_allocated_ext_value(::mead101::avs::InstrumentType* ext_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext_value_);
  }
  if (ext_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext_value)->GetArena();
    if (message_arena != submessage_arena) {
      ext_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext_value, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  ext_value_ = ext_value;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.InstrumentValue.ext_value)
}

// -------------------------------------------------------------------

// Link

// repeated string any_attribute_value = 1;
inline int Link::_internal_any_attribute_value_size() const {
  return any_attribute_value_.size();
}
inline int Link::any_attribute_value_size() const {
  return _internal_any_attribute_value_size();
}
inline void Link::clear_any_attribute_value() {
  any_attribute_value_.Clear();
}
inline std::string* Link::add_any_attribute_value() {
  // @@protoc_insertion_point(field_add_mutable:mead101.mead.Link.any_attribute_value)
  return _internal_add_any_attribute_value();
}
inline const std::string& Link::_internal_any_attribute_value(int index) const {
  return any_attribute_value_.Get(index);
}
inline const std::string& Link::any_attribute_value(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.Link.any_attribute_value)
  return _internal_any_attribute_value(index);
}
inline std::string* Link::mutable_any_attribute_value(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Link.any_attribute_value)
  return any_attribute_value_.Mutable(index);
}
inline void Link::set_any_attribute_value(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:mead101.mead.Link.any_attribute_value)
  any_attribute_value_.Mutable(index)->assign(value);
}
inline void Link::set_any_attribute_value(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:mead101.mead.Link.any_attribute_value)
  any_attribute_value_.Mutable(index)->assign(std::move(value));
}
inline void Link::set_any_attribute_value(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  any_attribute_value_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mead101.mead.Link.any_attribute_value)
}
inline void Link::set_any_attribute_value(int index, const char* value, size_t size) {
  any_attribute_value_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.Link.any_attribute_value)
}
inline std::string* Link::_internal_add_any_attribute_value() {
  return any_attribute_value_.Add();
}
inline void Link::add_any_attribute_value(const std::string& value) {
  any_attribute_value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mead101.mead.Link.any_attribute_value)
}
inline void Link::add_any_attribute_value(std::string&& value) {
  any_attribute_value_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:mead101.mead.Link.any_attribute_value)
}
inline void Link::add_any_attribute_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  any_attribute_value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mead101.mead.Link.any_attribute_value)
}
inline void Link::add_any_attribute_value(const char* value, size_t size) {
  any_attribute_value_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mead101.mead.Link.any_attribute_value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Link::any_attribute_value() const {
  // @@protoc_insertion_point(field_list:mead101.mead.Link.any_attribute_value)
  return any_attribute_value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Link::mutable_any_attribute_value() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.Link.any_attribute_value)
  return &any_attribute_value_;
}

// optional string href = 2;
inline bool Link::_internal_has_href() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Link::has_href() const {
  return _internal_has_href();
}
inline void Link::clear_href() {
  href_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Link::href() const {
  // @@protoc_insertion_point(field_get:mead101.mead.Link.href)
  return _internal_href();
}
inline void Link::set_href(const std::string& value) {
  _internal_set_href(value);
  // @@protoc_insertion_point(field_set:mead101.mead.Link.href)
}
inline std::string* Link::mutable_href() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Link.href)
  return _internal_mutable_href();
}
inline const std::string& Link::_internal_href() const {
  return href_.Get();
}
inline void Link::_internal_set_href(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  href_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Link::set_href(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  href_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.Link.href)
}
inline void Link::set_href(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  href_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.Link.href)
}
inline void Link::set_href(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  href_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.Link.href)
}
inline std::string* Link::_internal_mutable_href() {
  _has_bits_[0] |= 0x00000001u;
  return href_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Link::release_href() {
  // @@protoc_insertion_point(field_release:mead101.mead.Link.href)
  if (!_internal_has_href()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return href_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Link::set_allocated_href(std::string* href) {
  if (href != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  href_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), href,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.Link.href)
}

// optional string hreflang = 3;
inline bool Link::_internal_has_hreflang() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Link::has_hreflang() const {
  return _internal_has_hreflang();
}
inline void Link::clear_hreflang() {
  hreflang_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Link::hreflang() const {
  // @@protoc_insertion_point(field_get:mead101.mead.Link.hreflang)
  return _internal_hreflang();
}
inline void Link::set_hreflang(const std::string& value) {
  _internal_set_hreflang(value);
  // @@protoc_insertion_point(field_set:mead101.mead.Link.hreflang)
}
inline std::string* Link::mutable_hreflang() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Link.hreflang)
  return _internal_mutable_hreflang();
}
inline const std::string& Link::_internal_hreflang() const {
  return hreflang_.Get();
}
inline void Link::_internal_set_hreflang(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  hreflang_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Link::set_hreflang(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  hreflang_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.Link.hreflang)
}
inline void Link::set_hreflang(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  hreflang_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.Link.hreflang)
}
inline void Link::set_hreflang(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  hreflang_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.Link.hreflang)
}
inline std::string* Link::_internal_mutable_hreflang() {
  _has_bits_[0] |= 0x00000002u;
  return hreflang_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Link::release_hreflang() {
  // @@protoc_insertion_point(field_release:mead101.mead.Link.hreflang)
  if (!_internal_has_hreflang()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return hreflang_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Link::set_allocated_hreflang(std::string* hreflang) {
  if (hreflang != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  hreflang_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hreflang,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.Link.hreflang)
}

// optional uint32 length = 4;
inline bool Link::_internal_has_length() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Link::has_length() const {
  return _internal_has_length();
}
inline void Link::clear_length() {
  length_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Link::_internal_length() const {
  return length_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Link::length() const {
  // @@protoc_insertion_point(field_get:mead101.mead.Link.length)
  return _internal_length();
}
inline void Link::_internal_set_length(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  length_ = value;
}
inline void Link::set_length(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:mead101.mead.Link.length)
}

// optional string rel = 5;
inline bool Link::_internal_has_rel() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Link::has_rel() const {
  return _internal_has_rel();
}
inline void Link::clear_rel() {
  rel_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Link::rel() const {
  // @@protoc_insertion_point(field_get:mead101.mead.Link.rel)
  return _internal_rel();
}
inline void Link::set_rel(const std::string& value) {
  _internal_set_rel(value);
  // @@protoc_insertion_point(field_set:mead101.mead.Link.rel)
}
inline std::string* Link::mutable_rel() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Link.rel)
  return _internal_mutable_rel();
}
inline const std::string& Link::_internal_rel() const {
  return rel_.Get();
}
inline void Link::_internal_set_rel(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  rel_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Link::set_rel(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  rel_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.Link.rel)
}
inline void Link::set_rel(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  rel_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.Link.rel)
}
inline void Link::set_rel(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  rel_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.Link.rel)
}
inline std::string* Link::_internal_mutable_rel() {
  _has_bits_[0] |= 0x00000004u;
  return rel_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Link::release_rel() {
  // @@protoc_insertion_point(field_release:mead101.mead.Link.rel)
  if (!_internal_has_rel()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return rel_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Link::set_allocated_rel(std::string* rel) {
  if (rel != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  rel_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rel,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.Link.rel)
}

// optional string title = 6;
inline bool Link::_internal_has_title() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Link::has_title() const {
  return _internal_has_title();
}
inline void Link::clear_title() {
  title_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& Link::title() const {
  // @@protoc_insertion_point(field_get:mead101.mead.Link.title)
  return _internal_title();
}
inline void Link::set_title(const std::string& value) {
  _internal_set_title(value);
  // @@protoc_insertion_point(field_set:mead101.mead.Link.title)
}
inline std::string* Link::mutable_title() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Link.title)
  return _internal_mutable_title();
}
inline const std::string& Link::_internal_title() const {
  return title_.Get();
}
inline void Link::_internal_set_title(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Link::set_title(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  title_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.Link.title)
}
inline void Link::set_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.Link.title)
}
inline void Link::set_title(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.Link.title)
}
inline std::string* Link::_internal_mutable_title() {
  _has_bits_[0] |= 0x00000008u;
  return title_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Link::release_title() {
  // @@protoc_insertion_point(field_release:mead101.mead.Link.title)
  if (!_internal_has_title()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return title_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Link::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  title_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.Link.title)
}

// optional string type = 7;
inline bool Link::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Link::has_type() const {
  return _internal_has_type();
}
inline void Link::clear_type() {
  type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& Link::type() const {
  // @@protoc_insertion_point(field_get:mead101.mead.Link.type)
  return _internal_type();
}
inline void Link::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:mead101.mead.Link.type)
}
inline std::string* Link::mutable_type() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Link.type)
  return _internal_mutable_type();
}
inline const std::string& Link::_internal_type() const {
  return type_.Get();
}
inline void Link::_internal_set_type(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Link::set_type(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.Link.type)
}
inline void Link::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.Link.type)
}
inline void Link::set_type(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.Link.type)
}
inline std::string* Link::_internal_mutable_type() {
  _has_bits_[0] |= 0x00000010u;
  return type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Link::release_type() {
  // @@protoc_insertion_point(field_release:mead101.mead.Link.type)
  if (!_internal_has_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return type_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Link::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.Link.type)
}

// -------------------------------------------------------------------

// LocationAndDateOfSession

// optional .mead101.mead.TextWithFormat comment = 1;
inline bool LocationAndDateOfSession::_internal_has_comment() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || comment_ != nullptr);
  return value;
}
inline bool LocationAndDateOfSession::has_comment() const {
  return _internal_has_comment();
}
inline void LocationAndDateOfSession::clear_comment() {
  if (comment_ != nullptr) comment_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::mead101::mead::TextWithFormat& LocationAndDateOfSession::_internal_comment() const {
  const ::mead101::mead::TextWithFormat* p = comment_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::TextWithFormat*>(
      &::mead101::mead::_TextWithFormat_default_instance_);
}
inline const ::mead101::mead::TextWithFormat& LocationAndDateOfSession::comment() const {
  // @@protoc_insertion_point(field_get:mead101.mead.LocationAndDateOfSession.comment)
  return _internal_comment();
}
inline void LocationAndDateOfSession::unsafe_arena_set_allocated_comment(
    ::mead101::mead::TextWithFormat* comment) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(comment_);
  }
  comment_ = comment;
  if (comment) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.LocationAndDateOfSession.comment)
}
inline ::mead101::mead::TextWithFormat* LocationAndDateOfSession::release_comment() {
  _has_bits_[0] &= ~0x00000001u;
  ::mead101::mead::TextWithFormat* temp = comment_;
  comment_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::TextWithFormat* LocationAndDateOfSession::unsafe_arena_release_comment() {
  // @@protoc_insertion_point(field_release:mead101.mead.LocationAndDateOfSession.comment)
  _has_bits_[0] &= ~0x00000001u;
  ::mead101::mead::TextWithFormat* temp = comment_;
  comment_ = nullptr;
  return temp;
}
inline ::mead101::mead::TextWithFormat* LocationAndDateOfSession::_internal_mutable_comment() {
  _has_bits_[0] |= 0x00000001u;
  if (comment_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::TextWithFormat>(GetArena());
    comment_ = p;
  }
  return comment_;
}
inline ::mead101::mead::TextWithFormat* LocationAndDateOfSession::mutable_comment() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.LocationAndDateOfSession.comment)
  return _internal_mutable_comment();
}
inline void LocationAndDateOfSession::set_allocated_comment(::mead101::mead::TextWithFormat* comment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete comment_;
  }
  if (comment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(comment);
    if (message_arena != submessage_arena) {
      comment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, comment, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  comment_ = comment;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.LocationAndDateOfSession.comment)
}

// repeated .mead101.mead.PartyWithRole contributor = 2;
inline int LocationAndDateOfSession::_internal_contributor_size() const {
  return contributor_.size();
}
inline int LocationAndDateOfSession::contributor_size() const {
  return _internal_contributor_size();
}
inline void LocationAndDateOfSession::clear_contributor() {
  contributor_.Clear();
}
inline ::mead101::mead::PartyWithRole* LocationAndDateOfSession::mutable_contributor(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.LocationAndDateOfSession.contributor)
  return contributor_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::PartyWithRole >*
LocationAndDateOfSession::mutable_contributor() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.LocationAndDateOfSession.contributor)
  return &contributor_;
}
inline const ::mead101::mead::PartyWithRole& LocationAndDateOfSession::_internal_contributor(int index) const {
  return contributor_.Get(index);
}
inline const ::mead101::mead::PartyWithRole& LocationAndDateOfSession::contributor(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.LocationAndDateOfSession.contributor)
  return _internal_contributor(index);
}
inline ::mead101::mead::PartyWithRole* LocationAndDateOfSession::_internal_add_contributor() {
  return contributor_.Add();
}
inline ::mead101::mead::PartyWithRole* LocationAndDateOfSession::add_contributor() {
  // @@protoc_insertion_point(field_add:mead101.mead.LocationAndDateOfSession.contributor)
  return _internal_add_contributor();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::PartyWithRole >&
LocationAndDateOfSession::contributor() const {
  // @@protoc_insertion_point(field_list:mead101.mead.LocationAndDateOfSession.contributor)
  return contributor_;
}

// repeated string metadata_source_reference = 3;
inline int LocationAndDateOfSession::_internal_metadata_source_reference_size() const {
  return metadata_source_reference_.size();
}
inline int LocationAndDateOfSession::metadata_source_reference_size() const {
  return _internal_metadata_source_reference_size();
}
inline void LocationAndDateOfSession::clear_metadata_source_reference() {
  metadata_source_reference_.Clear();
}
inline std::string* LocationAndDateOfSession::add_metadata_source_reference() {
  // @@protoc_insertion_point(field_add_mutable:mead101.mead.LocationAndDateOfSession.metadata_source_reference)
  return _internal_add_metadata_source_reference();
}
inline const std::string& LocationAndDateOfSession::_internal_metadata_source_reference(int index) const {
  return metadata_source_reference_.Get(index);
}
inline const std::string& LocationAndDateOfSession::metadata_source_reference(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.LocationAndDateOfSession.metadata_source_reference)
  return _internal_metadata_source_reference(index);
}
inline std::string* LocationAndDateOfSession::mutable_metadata_source_reference(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.LocationAndDateOfSession.metadata_source_reference)
  return metadata_source_reference_.Mutable(index);
}
inline void LocationAndDateOfSession::set_metadata_source_reference(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:mead101.mead.LocationAndDateOfSession.metadata_source_reference)
  metadata_source_reference_.Mutable(index)->assign(value);
}
inline void LocationAndDateOfSession::set_metadata_source_reference(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:mead101.mead.LocationAndDateOfSession.metadata_source_reference)
  metadata_source_reference_.Mutable(index)->assign(std::move(value));
}
inline void LocationAndDateOfSession::set_metadata_source_reference(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  metadata_source_reference_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mead101.mead.LocationAndDateOfSession.metadata_source_reference)
}
inline void LocationAndDateOfSession::set_metadata_source_reference(int index, const char* value, size_t size) {
  metadata_source_reference_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.LocationAndDateOfSession.metadata_source_reference)
}
inline std::string* LocationAndDateOfSession::_internal_add_metadata_source_reference() {
  return metadata_source_reference_.Add();
}
inline void LocationAndDateOfSession::add_metadata_source_reference(const std::string& value) {
  metadata_source_reference_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mead101.mead.LocationAndDateOfSession.metadata_source_reference)
}
inline void LocationAndDateOfSession::add_metadata_source_reference(std::string&& value) {
  metadata_source_reference_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:mead101.mead.LocationAndDateOfSession.metadata_source_reference)
}
inline void LocationAndDateOfSession::add_metadata_source_reference(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  metadata_source_reference_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mead101.mead.LocationAndDateOfSession.metadata_source_reference)
}
inline void LocationAndDateOfSession::add_metadata_source_reference(const char* value, size_t size) {
  metadata_source_reference_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mead101.mead.LocationAndDateOfSession.metadata_source_reference)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
LocationAndDateOfSession::metadata_source_reference() const {
  // @@protoc_insertion_point(field_list:mead101.mead.LocationAndDateOfSession.metadata_source_reference)
  return metadata_source_reference_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
LocationAndDateOfSession::mutable_metadata_source_reference() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.LocationAndDateOfSession.metadata_source_reference)
  return &metadata_source_reference_;
}

// optional .mead101.mead.Period period = 4;
inline bool LocationAndDateOfSession::_internal_has_period() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || period_ != nullptr);
  return value;
}
inline bool LocationAndDateOfSession::has_period() const {
  return _internal_has_period();
}
inline void LocationAndDateOfSession::clear_period() {
  if (period_ != nullptr) period_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::mead101::mead::Period& LocationAndDateOfSession::_internal_period() const {
  const ::mead101::mead::Period* p = period_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::Period*>(
      &::mead101::mead::_Period_default_instance_);
}
inline const ::mead101::mead::Period& LocationAndDateOfSession::period() const {
  // @@protoc_insertion_point(field_get:mead101.mead.LocationAndDateOfSession.period)
  return _internal_period();
}
inline void LocationAndDateOfSession::unsafe_arena_set_allocated_period(
    ::mead101::mead::Period* period) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(period_);
  }
  period_ = period;
  if (period) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.LocationAndDateOfSession.period)
}
inline ::mead101::mead::Period* LocationAndDateOfSession::release_period() {
  _has_bits_[0] &= ~0x00000002u;
  ::mead101::mead::Period* temp = period_;
  period_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::Period* LocationAndDateOfSession::unsafe_arena_release_period() {
  // @@protoc_insertion_point(field_release:mead101.mead.LocationAndDateOfSession.period)
  _has_bits_[0] &= ~0x00000002u;
  ::mead101::mead::Period* temp = period_;
  period_ = nullptr;
  return temp;
}
inline ::mead101::mead::Period* LocationAndDateOfSession::_internal_mutable_period() {
  _has_bits_[0] |= 0x00000002u;
  if (period_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::Period>(GetArena());
    period_ = p;
  }
  return period_;
}
inline ::mead101::mead::Period* LocationAndDateOfSession::mutable_period() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.LocationAndDateOfSession.period)
  return _internal_mutable_period();
}
inline void LocationAndDateOfSession::set_allocated_period(::mead101::mead::Period* period) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete period_;
  }
  if (period) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(period);
    if (message_arena != submessage_arena) {
      period = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, period, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  period_ = period;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.LocationAndDateOfSession.period)
}

// repeated .mead101.mead.SessionType session_type = 5;
inline int LocationAndDateOfSession::_internal_session_type_size() const {
  return session_type_.size();
}
inline int LocationAndDateOfSession::session_type_size() const {
  return _internal_session_type_size();
}
inline void LocationAndDateOfSession::clear_session_type() {
  session_type_.Clear();
}
inline ::mead101::mead::SessionType* LocationAndDateOfSession::mutable_session_type(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.LocationAndDateOfSession.session_type)
  return session_type_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::SessionType >*
LocationAndDateOfSession::mutable_session_type() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.LocationAndDateOfSession.session_type)
  return &session_type_;
}
inline const ::mead101::mead::SessionType& LocationAndDateOfSession::_internal_session_type(int index) const {
  return session_type_.Get(index);
}
inline const ::mead101::mead::SessionType& LocationAndDateOfSession::session_type(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.LocationAndDateOfSession.session_type)
  return _internal_session_type(index);
}
inline ::mead101::mead::SessionType* LocationAndDateOfSession::_internal_add_session_type() {
  return session_type_.Add();
}
inline ::mead101::mead::SessionType* LocationAndDateOfSession::add_session_type() {
  // @@protoc_insertion_point(field_add:mead101.mead.LocationAndDateOfSession.session_type)
  return _internal_add_session_type();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::SessionType >&
LocationAndDateOfSession::session_type() const {
  // @@protoc_insertion_point(field_list:mead101.mead.LocationAndDateOfSession.session_type)
  return session_type_;
}

// repeated .mead101.mead.Venue venue = 6;
inline int LocationAndDateOfSession::_internal_venue_size() const {
  return venue_.size();
}
inline int LocationAndDateOfSession::venue_size() const {
  return _internal_venue_size();
}
inline void LocationAndDateOfSession::clear_venue() {
  venue_.Clear();
}
inline ::mead101::mead::Venue* LocationAndDateOfSession::mutable_venue(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.LocationAndDateOfSession.venue)
  return venue_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Venue >*
LocationAndDateOfSession::mutable_venue() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.LocationAndDateOfSession.venue)
  return &venue_;
}
inline const ::mead101::mead::Venue& LocationAndDateOfSession::_internal_venue(int index) const {
  return venue_.Get(index);
}
inline const ::mead101::mead::Venue& LocationAndDateOfSession::venue(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.LocationAndDateOfSession.venue)
  return _internal_venue(index);
}
inline ::mead101::mead::Venue* LocationAndDateOfSession::_internal_add_venue() {
  return venue_.Add();
}
inline ::mead101::mead::Venue* LocationAndDateOfSession::add_venue() {
  // @@protoc_insertion_point(field_add:mead101.mead.LocationAndDateOfSession.venue)
  return _internal_add_venue();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Venue >&
LocationAndDateOfSession::venue() const {
  // @@protoc_insertion_point(field_list:mead101.mead.LocationAndDateOfSession.venue)
  return venue_;
}

// -------------------------------------------------------------------

// Logo

// repeated string any_attribute_value = 1;
inline int Logo::_internal_any_attribute_value_size() const {
  return any_attribute_value_.size();
}
inline int Logo::any_attribute_value_size() const {
  return _internal_any_attribute_value_size();
}
inline void Logo::clear_any_attribute_value() {
  any_attribute_value_.Clear();
}
inline std::string* Logo::add_any_attribute_value() {
  // @@protoc_insertion_point(field_add_mutable:mead101.mead.Logo.any_attribute_value)
  return _internal_add_any_attribute_value();
}
inline const std::string& Logo::_internal_any_attribute_value(int index) const {
  return any_attribute_value_.Get(index);
}
inline const std::string& Logo::any_attribute_value(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.Logo.any_attribute_value)
  return _internal_any_attribute_value(index);
}
inline std::string* Logo::mutable_any_attribute_value(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Logo.any_attribute_value)
  return any_attribute_value_.Mutable(index);
}
inline void Logo::set_any_attribute_value(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:mead101.mead.Logo.any_attribute_value)
  any_attribute_value_.Mutable(index)->assign(value);
}
inline void Logo::set_any_attribute_value(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:mead101.mead.Logo.any_attribute_value)
  any_attribute_value_.Mutable(index)->assign(std::move(value));
}
inline void Logo::set_any_attribute_value(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  any_attribute_value_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mead101.mead.Logo.any_attribute_value)
}
inline void Logo::set_any_attribute_value(int index, const char* value, size_t size) {
  any_attribute_value_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.Logo.any_attribute_value)
}
inline std::string* Logo::_internal_add_any_attribute_value() {
  return any_attribute_value_.Add();
}
inline void Logo::add_any_attribute_value(const std::string& value) {
  any_attribute_value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mead101.mead.Logo.any_attribute_value)
}
inline void Logo::add_any_attribute_value(std::string&& value) {
  any_attribute_value_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:mead101.mead.Logo.any_attribute_value)
}
inline void Logo::add_any_attribute_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  any_attribute_value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mead101.mead.Logo.any_attribute_value)
}
inline void Logo::add_any_attribute_value(const char* value, size_t size) {
  any_attribute_value_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mead101.mead.Logo.any_attribute_value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Logo::any_attribute_value() const {
  // @@protoc_insertion_point(field_list:mead101.mead.Logo.any_attribute_value)
  return any_attribute_value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Logo::mutable_any_attribute_value() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.Logo.any_attribute_value)
  return &any_attribute_value_;
}

// optional string ext_value = 2;
inline bool Logo::_internal_has_ext_value() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Logo::has_ext_value() const {
  return _internal_has_ext_value();
}
inline void Logo::clear_ext_value() {
  ext_value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Logo::ext_value() const {
  // @@protoc_insertion_point(field_get:mead101.mead.Logo.ext_value)
  return _internal_ext_value();
}
inline void Logo::set_ext_value(const std::string& value) {
  _internal_set_ext_value(value);
  // @@protoc_insertion_point(field_set:mead101.mead.Logo.ext_value)
}
inline std::string* Logo::mutable_ext_value() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Logo.ext_value)
  return _internal_mutable_ext_value();
}
inline const std::string& Logo::_internal_ext_value() const {
  return ext_value_.Get();
}
inline void Logo::_internal_set_ext_value(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  ext_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Logo::set_ext_value(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  ext_value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.Logo.ext_value)
}
inline void Logo::set_ext_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  ext_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.Logo.ext_value)
}
inline void Logo::set_ext_value(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  ext_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.Logo.ext_value)
}
inline std::string* Logo::_internal_mutable_ext_value() {
  _has_bits_[0] |= 0x00000001u;
  return ext_value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Logo::release_ext_value() {
  // @@protoc_insertion_point(field_release:mead101.mead.Logo.ext_value)
  if (!_internal_has_ext_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return ext_value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Logo::set_allocated_ext_value(std::string* ext_value) {
  if (ext_value != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  ext_value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ext_value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.Logo.ext_value)
}

// -------------------------------------------------------------------

// Lyrics

// optional bool is_misquoted = 1;
inline bool Lyrics::_internal_has_is_misquoted() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Lyrics::has_is_misquoted() const {
  return _internal_has_is_misquoted();
}
inline void Lyrics::clear_is_misquoted() {
  is_misquoted_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool Lyrics::_internal_is_misquoted() const {
  return is_misquoted_;
}
inline bool Lyrics::is_misquoted() const {
  // @@protoc_insertion_point(field_get:mead101.mead.Lyrics.is_misquoted)
  return _internal_is_misquoted();
}
inline void Lyrics::_internal_set_is_misquoted(bool value) {
  _has_bits_[0] |= 0x00000010u;
  is_misquoted_ = value;
}
inline void Lyrics::set_is_misquoted(bool value) {
  _internal_set_is_misquoted(value);
  // @@protoc_insertion_point(field_set:mead101.mead.Lyrics.is_misquoted)
}

// optional .mead101.avs.LyricsType lyrics_type = 2;
inline bool Lyrics::_internal_has_lyrics_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || lyrics_type_ != nullptr);
  return value;
}
inline bool Lyrics::has_lyrics_type() const {
  return _internal_has_lyrics_type();
}
inline const ::mead101::avs::LyricsType& Lyrics::_internal_lyrics_type() const {
  const ::mead101::avs::LyricsType* p = lyrics_type_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::avs::LyricsType*>(
      &::mead101::avs::_LyricsType_default_instance_);
}
inline const ::mead101::avs::LyricsType& Lyrics::lyrics_type() const {
  // @@protoc_insertion_point(field_get:mead101.mead.Lyrics.lyrics_type)
  return _internal_lyrics_type();
}
inline void Lyrics::unsafe_arena_set_allocated_lyrics_type(
    ::mead101::avs::LyricsType* lyrics_type) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lyrics_type_);
  }
  lyrics_type_ = lyrics_type;
  if (lyrics_type) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.Lyrics.lyrics_type)
}
inline ::mead101::avs::LyricsType* Lyrics::release_lyrics_type() {
  _has_bits_[0] &= ~0x00000004u;
  ::mead101::avs::LyricsType* temp = lyrics_type_;
  lyrics_type_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::avs::LyricsType* Lyrics::unsafe_arena_release_lyrics_type() {
  // @@protoc_insertion_point(field_release:mead101.mead.Lyrics.lyrics_type)
  _has_bits_[0] &= ~0x00000004u;
  ::mead101::avs::LyricsType* temp = lyrics_type_;
  lyrics_type_ = nullptr;
  return temp;
}
inline ::mead101::avs::LyricsType* Lyrics::_internal_mutable_lyrics_type() {
  _has_bits_[0] |= 0x00000004u;
  if (lyrics_type_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::avs::LyricsType>(GetArena());
    lyrics_type_ = p;
  }
  return lyrics_type_;
}
inline ::mead101::avs::LyricsType* Lyrics::mutable_lyrics_type() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Lyrics.lyrics_type)
  return _internal_mutable_lyrics_type();
}
inline void Lyrics::set_allocated_lyrics_type(::mead101::avs::LyricsType* lyrics_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(lyrics_type_);
  }
  if (lyrics_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lyrics_type)->GetArena();
    if (message_arena != submessage_arena) {
      lyrics_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lyrics_type, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  lyrics_type_ = lyrics_type;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.Lyrics.lyrics_type)
}

// optional string lyrics_type_namespace = 3;
inline bool Lyrics::_internal_has_lyrics_type_namespace() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Lyrics::has_lyrics_type_namespace() const {
  return _internal_has_lyrics_type_namespace();
}
inline void Lyrics::clear_lyrics_type_namespace() {
  lyrics_type_namespace_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Lyrics::lyrics_type_namespace() const {
  // @@protoc_insertion_point(field_get:mead101.mead.Lyrics.lyrics_type_namespace)
  return _internal_lyrics_type_namespace();
}
inline void Lyrics::set_lyrics_type_namespace(const std::string& value) {
  _internal_set_lyrics_type_namespace(value);
  // @@protoc_insertion_point(field_set:mead101.mead.Lyrics.lyrics_type_namespace)
}
inline std::string* Lyrics::mutable_lyrics_type_namespace() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Lyrics.lyrics_type_namespace)
  return _internal_mutable_lyrics_type_namespace();
}
inline const std::string& Lyrics::_internal_lyrics_type_namespace() const {
  return lyrics_type_namespace_.Get();
}
inline void Lyrics::_internal_set_lyrics_type_namespace(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  lyrics_type_namespace_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Lyrics::set_lyrics_type_namespace(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  lyrics_type_namespace_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.Lyrics.lyrics_type_namespace)
}
inline void Lyrics::set_lyrics_type_namespace(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  lyrics_type_namespace_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.Lyrics.lyrics_type_namespace)
}
inline void Lyrics::set_lyrics_type_namespace(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  lyrics_type_namespace_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.Lyrics.lyrics_type_namespace)
}
inline std::string* Lyrics::_internal_mutable_lyrics_type_namespace() {
  _has_bits_[0] |= 0x00000001u;
  return lyrics_type_namespace_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Lyrics::release_lyrics_type_namespace() {
  // @@protoc_insertion_point(field_release:mead101.mead.Lyrics.lyrics_type_namespace)
  if (!_internal_has_lyrics_type_namespace()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return lyrics_type_namespace_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Lyrics::set_allocated_lyrics_type_namespace(std::string* lyrics_type_namespace) {
  if (lyrics_type_namespace != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  lyrics_type_namespace_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lyrics_type_namespace,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.Lyrics.lyrics_type_namespace)
}

// optional string lyrics_type_user_defined_value = 4;
inline bool Lyrics::_internal_has_lyrics_type_user_defined_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Lyrics::has_lyrics_type_user_defined_value() const {
  return _internal_has_lyrics_type_user_defined_value();
}
inline void Lyrics::clear_lyrics_type_user_defined_value() {
  lyrics_type_user_defined_value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Lyrics::lyrics_type_user_defined_value() const {
  // @@protoc_insertion_point(field_get:mead101.mead.Lyrics.lyrics_type_user_defined_value)
  return _internal_lyrics_type_user_defined_value();
}
inline void Lyrics::set_lyrics_type_user_defined_value(const std::string& value) {
  _internal_set_lyrics_type_user_defined_value(value);
  // @@protoc_insertion_point(field_set:mead101.mead.Lyrics.lyrics_type_user_defined_value)
}
inline std::string* Lyrics::mutable_lyrics_type_user_defined_value() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Lyrics.lyrics_type_user_defined_value)
  return _internal_mutable_lyrics_type_user_defined_value();
}
inline const std::string& Lyrics::_internal_lyrics_type_user_defined_value() const {
  return lyrics_type_user_defined_value_.Get();
}
inline void Lyrics::_internal_set_lyrics_type_user_defined_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  lyrics_type_user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Lyrics::set_lyrics_type_user_defined_value(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  lyrics_type_user_defined_value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.Lyrics.lyrics_type_user_defined_value)
}
inline void Lyrics::set_lyrics_type_user_defined_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  lyrics_type_user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.Lyrics.lyrics_type_user_defined_value)
}
inline void Lyrics::set_lyrics_type_user_defined_value(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  lyrics_type_user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.Lyrics.lyrics_type_user_defined_value)
}
inline std::string* Lyrics::_internal_mutable_lyrics_type_user_defined_value() {
  _has_bits_[0] |= 0x00000002u;
  return lyrics_type_user_defined_value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Lyrics::release_lyrics_type_user_defined_value() {
  // @@protoc_insertion_point(field_release:mead101.mead.Lyrics.lyrics_type_user_defined_value)
  if (!_internal_has_lyrics_type_user_defined_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return lyrics_type_user_defined_value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Lyrics::set_allocated_lyrics_type_user_defined_value(std::string* lyrics_type_user_defined_value) {
  if (lyrics_type_user_defined_value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  lyrics_type_user_defined_value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lyrics_type_user_defined_value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.Lyrics.lyrics_type_user_defined_value)
}

// repeated string metadata_source_reference = 5;
inline int Lyrics::_internal_metadata_source_reference_size() const {
  return metadata_source_reference_.size();
}
inline int Lyrics::metadata_source_reference_size() const {
  return _internal_metadata_source_reference_size();
}
inline void Lyrics::clear_metadata_source_reference() {
  metadata_source_reference_.Clear();
}
inline std::string* Lyrics::add_metadata_source_reference() {
  // @@protoc_insertion_point(field_add_mutable:mead101.mead.Lyrics.metadata_source_reference)
  return _internal_add_metadata_source_reference();
}
inline const std::string& Lyrics::_internal_metadata_source_reference(int index) const {
  return metadata_source_reference_.Get(index);
}
inline const std::string& Lyrics::metadata_source_reference(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.Lyrics.metadata_source_reference)
  return _internal_metadata_source_reference(index);
}
inline std::string* Lyrics::mutable_metadata_source_reference(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Lyrics.metadata_source_reference)
  return metadata_source_reference_.Mutable(index);
}
inline void Lyrics::set_metadata_source_reference(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:mead101.mead.Lyrics.metadata_source_reference)
  metadata_source_reference_.Mutable(index)->assign(value);
}
inline void Lyrics::set_metadata_source_reference(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:mead101.mead.Lyrics.metadata_source_reference)
  metadata_source_reference_.Mutable(index)->assign(std::move(value));
}
inline void Lyrics::set_metadata_source_reference(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  metadata_source_reference_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mead101.mead.Lyrics.metadata_source_reference)
}
inline void Lyrics::set_metadata_source_reference(int index, const char* value, size_t size) {
  metadata_source_reference_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.Lyrics.metadata_source_reference)
}
inline std::string* Lyrics::_internal_add_metadata_source_reference() {
  return metadata_source_reference_.Add();
}
inline void Lyrics::add_metadata_source_reference(const std::string& value) {
  metadata_source_reference_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mead101.mead.Lyrics.metadata_source_reference)
}
inline void Lyrics::add_metadata_source_reference(std::string&& value) {
  metadata_source_reference_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:mead101.mead.Lyrics.metadata_source_reference)
}
inline void Lyrics::add_metadata_source_reference(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  metadata_source_reference_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mead101.mead.Lyrics.metadata_source_reference)
}
inline void Lyrics::add_metadata_source_reference(const char* value, size_t size) {
  metadata_source_reference_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mead101.mead.Lyrics.metadata_source_reference)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Lyrics::metadata_source_reference() const {
  // @@protoc_insertion_point(field_list:mead101.mead.Lyrics.metadata_source_reference)
  return metadata_source_reference_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Lyrics::mutable_metadata_source_reference() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.Lyrics.metadata_source_reference)
  return &metadata_source_reference_;
}

// repeated .mead101.mead.Pronunciation pronunciation = 6;
inline int Lyrics::_internal_pronunciation_size() const {
  return pronunciation_.size();
}
inline int Lyrics::pronunciation_size() const {
  return _internal_pronunciation_size();
}
inline void Lyrics::clear_pronunciation() {
  pronunciation_.Clear();
}
inline ::mead101::mead::Pronunciation* Lyrics::mutable_pronunciation(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Lyrics.pronunciation)
  return pronunciation_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Pronunciation >*
Lyrics::mutable_pronunciation() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.Lyrics.pronunciation)
  return &pronunciation_;
}
inline const ::mead101::mead::Pronunciation& Lyrics::_internal_pronunciation(int index) const {
  return pronunciation_.Get(index);
}
inline const ::mead101::mead::Pronunciation& Lyrics::pronunciation(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.Lyrics.pronunciation)
  return _internal_pronunciation(index);
}
inline ::mead101::mead::Pronunciation* Lyrics::_internal_add_pronunciation() {
  return pronunciation_.Add();
}
inline ::mead101::mead::Pronunciation* Lyrics::add_pronunciation() {
  // @@protoc_insertion_point(field_add:mead101.mead.Lyrics.pronunciation)
  return _internal_add_pronunciation();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Pronunciation >&
Lyrics::pronunciation() const {
  // @@protoc_insertion_point(field_list:mead101.mead.Lyrics.pronunciation)
  return pronunciation_;
}

// optional int32 sequence_number = 7;
inline bool Lyrics::_internal_has_sequence_number() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Lyrics::has_sequence_number() const {
  return _internal_has_sequence_number();
}
inline void Lyrics::clear_sequence_number() {
  sequence_number_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Lyrics::_internal_sequence_number() const {
  return sequence_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Lyrics::sequence_number() const {
  // @@protoc_insertion_point(field_get:mead101.mead.Lyrics.sequence_number)
  return _internal_sequence_number();
}
inline void Lyrics::_internal_set_sequence_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  sequence_number_ = value;
}
inline void Lyrics::set_sequence_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sequence_number(value);
  // @@protoc_insertion_point(field_set:mead101.mead.Lyrics.sequence_number)
}

// optional .mead101.mead.LyricsText text = 8;
inline bool Lyrics::_internal_has_text() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || text_ != nullptr);
  return value;
}
inline bool Lyrics::has_text() const {
  return _internal_has_text();
}
inline void Lyrics::clear_text() {
  if (text_ != nullptr) text_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::mead101::mead::LyricsText& Lyrics::_internal_text() const {
  const ::mead101::mead::LyricsText* p = text_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::LyricsText*>(
      &::mead101::mead::_LyricsText_default_instance_);
}
inline const ::mead101::mead::LyricsText& Lyrics::text() const {
  // @@protoc_insertion_point(field_get:mead101.mead.Lyrics.text)
  return _internal_text();
}
inline void Lyrics::unsafe_arena_set_allocated_text(
    ::mead101::mead::LyricsText* text) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(text_);
  }
  text_ = text;
  if (text) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.Lyrics.text)
}
inline ::mead101::mead::LyricsText* Lyrics::release_text() {
  _has_bits_[0] &= ~0x00000008u;
  ::mead101::mead::LyricsText* temp = text_;
  text_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::LyricsText* Lyrics::unsafe_arena_release_text() {
  // @@protoc_insertion_point(field_release:mead101.mead.Lyrics.text)
  _has_bits_[0] &= ~0x00000008u;
  ::mead101::mead::LyricsText* temp = text_;
  text_ = nullptr;
  return temp;
}
inline ::mead101::mead::LyricsText* Lyrics::_internal_mutable_text() {
  _has_bits_[0] |= 0x00000008u;
  if (text_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::LyricsText>(GetArena());
    text_ = p;
  }
  return text_;
}
inline ::mead101::mead::LyricsText* Lyrics::mutable_text() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Lyrics.text)
  return _internal_mutable_text();
}
inline void Lyrics::set_allocated_text(::mead101::mead::LyricsText* text) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete text_;
  }
  if (text) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(text);
    if (message_arena != submessage_arena) {
      text = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, text, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  text_ = text;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.Lyrics.text)
}

// -------------------------------------------------------------------

// LyricsText

// optional .mead101.avs.CurrentTerritoryCode applicable_territory_code = 1;
inline bool LyricsText::_internal_has_applicable_territory_code() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || applicable_territory_code_ != nullptr);
  return value;
}
inline bool LyricsText::has_applicable_territory_code() const {
  return _internal_has_applicable_territory_code();
}
inline const ::mead101::avs::CurrentTerritoryCode& LyricsText::_internal_applicable_territory_code() const {
  const ::mead101::avs::CurrentTerritoryCode* p = applicable_territory_code_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::avs::CurrentTerritoryCode*>(
      &::mead101::avs::_CurrentTerritoryCode_default_instance_);
}
inline const ::mead101::avs::CurrentTerritoryCode& LyricsText::applicable_territory_code() const {
  // @@protoc_insertion_point(field_get:mead101.mead.LyricsText.applicable_territory_code)
  return _internal_applicable_territory_code();
}
inline void LyricsText::unsafe_arena_set_allocated_applicable_territory_code(
    ::mead101::avs::CurrentTerritoryCode* applicable_territory_code) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(applicable_territory_code_);
  }
  applicable_territory_code_ = applicable_territory_code;
  if (applicable_territory_code) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.LyricsText.applicable_territory_code)
}
inline ::mead101::avs::CurrentTerritoryCode* LyricsText::release_applicable_territory_code() {
  _has_bits_[0] &= ~0x00000010u;
  ::mead101::avs::CurrentTerritoryCode* temp = applicable_territory_code_;
  applicable_territory_code_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::avs::CurrentTerritoryCode* LyricsText::unsafe_arena_release_applicable_territory_code() {
  // @@protoc_insertion_point(field_release:mead101.mead.LyricsText.applicable_territory_code)
  _has_bits_[0] &= ~0x00000010u;
  ::mead101::avs::CurrentTerritoryCode* temp = applicable_territory_code_;
  applicable_territory_code_ = nullptr;
  return temp;
}
inline ::mead101::avs::CurrentTerritoryCode* LyricsText::_internal_mutable_applicable_territory_code() {
  _has_bits_[0] |= 0x00000010u;
  if (applicable_territory_code_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::avs::CurrentTerritoryCode>(GetArena());
    applicable_territory_code_ = p;
  }
  return applicable_territory_code_;
}
inline ::mead101::avs::CurrentTerritoryCode* LyricsText::mutable_applicable_territory_code() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.LyricsText.applicable_territory_code)
  return _internal_mutable_applicable_territory_code();
}
inline void LyricsText::set_allocated_applicable_territory_code(::mead101::avs::CurrentTerritoryCode* applicable_territory_code) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(applicable_territory_code_);
  }
  if (applicable_territory_code) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(applicable_territory_code)->GetArena();
    if (message_arena != submessage_arena) {
      applicable_territory_code = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, applicable_territory_code, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  applicable_territory_code_ = applicable_territory_code;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.LyricsText.applicable_territory_code)
}

// optional .mead101.avs.TextCodecType format = 2;
inline bool LyricsText::_internal_has_format() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || format_ != nullptr);
  return value;
}
inline bool LyricsText::has_format() const {
  return _internal_has_format();
}
inline const ::mead101::avs::TextCodecType& LyricsText::_internal_format() const {
  const ::mead101::avs::TextCodecType* p = format_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::avs::TextCodecType*>(
      &::mead101::avs::_TextCodecType_default_instance_);
}
inline const ::mead101::avs::TextCodecType& LyricsText::format() const {
  // @@protoc_insertion_point(field_get:mead101.mead.LyricsText.format)
  return _internal_format();
}
inline void LyricsText::unsafe_arena_set_allocated_format(
    ::mead101::avs::TextCodecType* format) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(format_);
  }
  format_ = format;
  if (format) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.LyricsText.format)
}
inline ::mead101::avs::TextCodecType* LyricsText::release_format() {
  _has_bits_[0] &= ~0x00000020u;
  ::mead101::avs::TextCodecType* temp = format_;
  format_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::avs::TextCodecType* LyricsText::unsafe_arena_release_format() {
  // @@protoc_insertion_point(field_release:mead101.mead.LyricsText.format)
  _has_bits_[0] &= ~0x00000020u;
  ::mead101::avs::TextCodecType* temp = format_;
  format_ = nullptr;
  return temp;
}
inline ::mead101::avs::TextCodecType* LyricsText::_internal_mutable_format() {
  _has_bits_[0] |= 0x00000020u;
  if (format_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::avs::TextCodecType>(GetArena());
    format_ = p;
  }
  return format_;
}
inline ::mead101::avs::TextCodecType* LyricsText::mutable_format() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.LyricsText.format)
  return _internal_mutable_format();
}
inline void LyricsText::set_allocated_format(::mead101::avs::TextCodecType* format) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(format_);
  }
  if (format) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(format)->GetArena();
    if (message_arena != submessage_arena) {
      format = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, format, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  format_ = format;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.LyricsText.format)
}

// optional string format_namespace = 3;
inline bool LyricsText::_internal_has_format_namespace() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LyricsText::has_format_namespace() const {
  return _internal_has_format_namespace();
}
inline void LyricsText::clear_format_namespace() {
  format_namespace_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LyricsText::format_namespace() const {
  // @@protoc_insertion_point(field_get:mead101.mead.LyricsText.format_namespace)
  return _internal_format_namespace();
}
inline void LyricsText::set_format_namespace(const std::string& value) {
  _internal_set_format_namespace(value);
  // @@protoc_insertion_point(field_set:mead101.mead.LyricsText.format_namespace)
}
inline std::string* LyricsText::mutable_format_namespace() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.LyricsText.format_namespace)
  return _internal_mutable_format_namespace();
}
inline const std::string& LyricsText::_internal_format_namespace() const {
  return format_namespace_.Get();
}
inline void LyricsText::_internal_set_format_namespace(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  format_namespace_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LyricsText::set_format_namespace(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  format_namespace_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.LyricsText.format_namespace)
}
inline void LyricsText::set_format_namespace(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  format_namespace_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.LyricsText.format_namespace)
}
inline void LyricsText::set_format_namespace(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  format_namespace_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.LyricsText.format_namespace)
}
inline std::string* LyricsText::_internal_mutable_format_namespace() {
  _has_bits_[0] |= 0x00000001u;
  return format_namespace_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LyricsText::release_format_namespace() {
  // @@protoc_insertion_point(field_release:mead101.mead.LyricsText.format_namespace)
  if (!_internal_has_format_namespace()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return format_namespace_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LyricsText::set_allocated_format_namespace(std::string* format_namespace) {
  if (format_namespace != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  format_namespace_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), format_namespace,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.LyricsText.format_namespace)
}

// optional string format_user_defined_value = 4;
inline bool LyricsText::_internal_has_format_user_defined_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LyricsText::has_format_user_defined_value() const {
  return _internal_has_format_user_defined_value();
}
inline void LyricsText::clear_format_user_defined_value() {
  format_user_defined_value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& LyricsText::format_user_defined_value() const {
  // @@protoc_insertion_point(field_get:mead101.mead.LyricsText.format_user_defined_value)
  return _internal_format_user_defined_value();
}
inline void LyricsText::set_format_user_defined_value(const std::string& value) {
  _internal_set_format_user_defined_value(value);
  // @@protoc_insertion_point(field_set:mead101.mead.LyricsText.format_user_defined_value)
}
inline std::string* LyricsText::mutable_format_user_defined_value() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.LyricsText.format_user_defined_value)
  return _internal_mutable_format_user_defined_value();
}
inline const std::string& LyricsText::_internal_format_user_defined_value() const {
  return format_user_defined_value_.Get();
}
inline void LyricsText::_internal_set_format_user_defined_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  format_user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LyricsText::set_format_user_defined_value(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  format_user_defined_value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.LyricsText.format_user_defined_value)
}
inline void LyricsText::set_format_user_defined_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  format_user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.LyricsText.format_user_defined_value)
}
inline void LyricsText::set_format_user_defined_value(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  format_user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.LyricsText.format_user_defined_value)
}
inline std::string* LyricsText::_internal_mutable_format_user_defined_value() {
  _has_bits_[0] |= 0x00000002u;
  return format_user_defined_value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LyricsText::release_format_user_defined_value() {
  // @@protoc_insertion_point(field_release:mead101.mead.LyricsText.format_user_defined_value)
  if (!_internal_has_format_user_defined_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return format_user_defined_value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LyricsText::set_allocated_format_user_defined_value(std::string* format_user_defined_value) {
  if (format_user_defined_value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  format_user_defined_value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), format_user_defined_value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.LyricsText.format_user_defined_value)
}

// optional bool is_complete = 5;
inline bool LyricsText::_internal_has_is_complete() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool LyricsText::has_is_complete() const {
  return _internal_has_is_complete();
}
inline void LyricsText::clear_is_complete() {
  is_complete_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool LyricsText::_internal_is_complete() const {
  return is_complete_;
}
inline bool LyricsText::is_complete() const {
  // @@protoc_insertion_point(field_get:mead101.mead.LyricsText.is_complete)
  return _internal_is_complete();
}
inline void LyricsText::_internal_set_is_complete(bool value) {
  _has_bits_[0] |= 0x00000040u;
  is_complete_ = value;
}
inline void LyricsText::set_is_complete(bool value) {
  _internal_set_is_complete(value);
  // @@protoc_insertion_point(field_set:mead101.mead.LyricsText.is_complete)
}

// optional string language_and_script_code = 6;
inline bool LyricsText::_internal_has_language_and_script_code() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LyricsText::has_language_and_script_code() const {
  return _internal_has_language_and_script_code();
}
inline void LyricsText::clear_language_and_script_code() {
  language_and_script_code_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& LyricsText::language_and_script_code() const {
  // @@protoc_insertion_point(field_get:mead101.mead.LyricsText.language_and_script_code)
  return _internal_language_and_script_code();
}
inline void LyricsText::set_language_and_script_code(const std::string& value) {
  _internal_set_language_and_script_code(value);
  // @@protoc_insertion_point(field_set:mead101.mead.LyricsText.language_and_script_code)
}
inline std::string* LyricsText::mutable_language_and_script_code() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.LyricsText.language_and_script_code)
  return _internal_mutable_language_and_script_code();
}
inline const std::string& LyricsText::_internal_language_and_script_code() const {
  return language_and_script_code_.Get();
}
inline void LyricsText::_internal_set_language_and_script_code(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  language_and_script_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LyricsText::set_language_and_script_code(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  language_and_script_code_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.LyricsText.language_and_script_code)
}
inline void LyricsText::set_language_and_script_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  language_and_script_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.LyricsText.language_and_script_code)
}
inline void LyricsText::set_language_and_script_code(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  language_and_script_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.LyricsText.language_and_script_code)
}
inline std::string* LyricsText::_internal_mutable_language_and_script_code() {
  _has_bits_[0] |= 0x00000004u;
  return language_and_script_code_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LyricsText::release_language_and_script_code() {
  // @@protoc_insertion_point(field_release:mead101.mead.LyricsText.language_and_script_code)
  if (!_internal_has_language_and_script_code()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return language_and_script_code_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LyricsText::set_allocated_language_and_script_code(std::string* language_and_script_code) {
  if (language_and_script_code != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  language_and_script_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), language_and_script_code,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.LyricsText.language_and_script_code)
}

// optional string ext_value = 7;
inline bool LyricsText::_internal_has_ext_value() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool LyricsText::has_ext_value() const {
  return _internal_has_ext_value();
}
inline void LyricsText::clear_ext_value() {
  ext_value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& LyricsText::ext_value() const {
  // @@protoc_insertion_point(field_get:mead101.mead.LyricsText.ext_value)
  return _internal_ext_value();
}
inline void LyricsText::set_ext_value(const std::string& value) {
  _internal_set_ext_value(value);
  // @@protoc_insertion_point(field_set:mead101.mead.LyricsText.ext_value)
}
inline std::string* LyricsText::mutable_ext_value() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.LyricsText.ext_value)
  return _internal_mutable_ext_value();
}
inline const std::string& LyricsText::_internal_ext_value() const {
  return ext_value_.Get();
}
inline void LyricsText::_internal_set_ext_value(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  ext_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LyricsText::set_ext_value(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  ext_value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.LyricsText.ext_value)
}
inline void LyricsText::set_ext_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  ext_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.LyricsText.ext_value)
}
inline void LyricsText::set_ext_value(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  ext_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.LyricsText.ext_value)
}
inline std::string* LyricsText::_internal_mutable_ext_value() {
  _has_bits_[0] |= 0x00000008u;
  return ext_value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LyricsText::release_ext_value() {
  // @@protoc_insertion_point(field_release:mead101.mead.LyricsText.ext_value)
  if (!_internal_has_ext_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return ext_value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LyricsText::set_allocated_ext_value(std::string* ext_value) {
  if (ext_value != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  ext_value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ext_value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.LyricsText.ext_value)
}

// -------------------------------------------------------------------

// MeadMessage

// optional string language_and_script_code = 1;
inline bool MeadMessage::_internal_has_language_and_script_code() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MeadMessage::has_language_and_script_code() const {
  return _internal_has_language_and_script_code();
}
inline void MeadMessage::clear_language_and_script_code() {
  language_and_script_code_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MeadMessage::language_and_script_code() const {
  // @@protoc_insertion_point(field_get:mead101.mead.MeadMessage.language_and_script_code)
  return _internal_language_and_script_code();
}
inline void MeadMessage::set_language_and_script_code(const std::string& value) {
  _internal_set_language_and_script_code(value);
  // @@protoc_insertion_point(field_set:mead101.mead.MeadMessage.language_and_script_code)
}
inline std::string* MeadMessage::mutable_language_and_script_code() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.MeadMessage.language_and_script_code)
  return _internal_mutable_language_and_script_code();
}
inline const std::string& MeadMessage::_internal_language_and_script_code() const {
  return language_and_script_code_.Get();
}
inline void MeadMessage::_internal_set_language_and_script_code(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  language_and_script_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MeadMessage::set_language_and_script_code(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  language_and_script_code_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.MeadMessage.language_and_script_code)
}
inline void MeadMessage::set_language_and_script_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  language_and_script_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.MeadMessage.language_and_script_code)
}
inline void MeadMessage::set_language_and_script_code(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  language_and_script_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.MeadMessage.language_and_script_code)
}
inline std::string* MeadMessage::_internal_mutable_language_and_script_code() {
  _has_bits_[0] |= 0x00000001u;
  return language_and_script_code_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MeadMessage::release_language_and_script_code() {
  // @@protoc_insertion_point(field_release:mead101.mead.MeadMessage.language_and_script_code)
  if (!_internal_has_language_and_script_code()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return language_and_script_code_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MeadMessage::set_allocated_language_and_script_code(std::string* language_and_script_code) {
  if (language_and_script_code != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  language_and_script_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), language_and_script_code,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.MeadMessage.language_and_script_code)
}

// optional .mead101.mead.MessageHeader message_header = 2;
inline bool MeadMessage::_internal_has_message_header() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || message_header_ != nullptr);
  return value;
}
inline bool MeadMessage::has_message_header() const {
  return _internal_has_message_header();
}
inline void MeadMessage::clear_message_header() {
  if (message_header_ != nullptr) message_header_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::mead101::mead::MessageHeader& MeadMessage::_internal_message_header() const {
  const ::mead101::mead::MessageHeader* p = message_header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::MessageHeader*>(
      &::mead101::mead::_MessageHeader_default_instance_);
}
inline const ::mead101::mead::MessageHeader& MeadMessage::message_header() const {
  // @@protoc_insertion_point(field_get:mead101.mead.MeadMessage.message_header)
  return _internal_message_header();
}
inline void MeadMessage::unsafe_arena_set_allocated_message_header(
    ::mead101::mead::MessageHeader* message_header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(message_header_);
  }
  message_header_ = message_header;
  if (message_header) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.MeadMessage.message_header)
}
inline ::mead101::mead::MessageHeader* MeadMessage::release_message_header() {
  _has_bits_[0] &= ~0x00000004u;
  ::mead101::mead::MessageHeader* temp = message_header_;
  message_header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::MessageHeader* MeadMessage::unsafe_arena_release_message_header() {
  // @@protoc_insertion_point(field_release:mead101.mead.MeadMessage.message_header)
  _has_bits_[0] &= ~0x00000004u;
  ::mead101::mead::MessageHeader* temp = message_header_;
  message_header_ = nullptr;
  return temp;
}
inline ::mead101::mead::MessageHeader* MeadMessage::_internal_mutable_message_header() {
  _has_bits_[0] |= 0x00000004u;
  if (message_header_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::MessageHeader>(GetArena());
    message_header_ = p;
  }
  return message_header_;
}
inline ::mead101::mead::MessageHeader* MeadMessage::mutable_message_header() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.MeadMessage.message_header)
  return _internal_mutable_message_header();
}
inline void MeadMessage::set_allocated_message_header(::mead101::mead::MessageHeader* message_header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete message_header_;
  }
  if (message_header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(message_header);
    if (message_arena != submessage_arena) {
      message_header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, message_header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  message_header_ = message_header;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.MeadMessage.message_header)
}

// optional .mead101.mead.MetadataSourceList metadata_source_list = 3;
inline bool MeadMessage::_internal_has_metadata_source_list() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || metadata_source_list_ != nullptr);
  return value;
}
inline bool MeadMessage::has_metadata_source_list() const {
  return _internal_has_metadata_source_list();
}
inline void MeadMessage::clear_metadata_source_list() {
  if (metadata_source_list_ != nullptr) metadata_source_list_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::mead101::mead::MetadataSourceList& MeadMessage::_internal_metadata_source_list() const {
  const ::mead101::mead::MetadataSourceList* p = metadata_source_list_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::MetadataSourceList*>(
      &::mead101::mead::_MetadataSourceList_default_instance_);
}
inline const ::mead101::mead::MetadataSourceList& MeadMessage::metadata_source_list() const {
  // @@protoc_insertion_point(field_get:mead101.mead.MeadMessage.metadata_source_list)
  return _internal_metadata_source_list();
}
inline void MeadMessage::unsafe_arena_set_allocated_metadata_source_list(
    ::mead101::mead::MetadataSourceList* metadata_source_list) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_source_list_);
  }
  metadata_source_list_ = metadata_source_list;
  if (metadata_source_list) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.MeadMessage.metadata_source_list)
}
inline ::mead101::mead::MetadataSourceList* MeadMessage::release_metadata_source_list() {
  _has_bits_[0] &= ~0x00000008u;
  ::mead101::mead::MetadataSourceList* temp = metadata_source_list_;
  metadata_source_list_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::MetadataSourceList* MeadMessage::unsafe_arena_release_metadata_source_list() {
  // @@protoc_insertion_point(field_release:mead101.mead.MeadMessage.metadata_source_list)
  _has_bits_[0] &= ~0x00000008u;
  ::mead101::mead::MetadataSourceList* temp = metadata_source_list_;
  metadata_source_list_ = nullptr;
  return temp;
}
inline ::mead101::mead::MetadataSourceList* MeadMessage::_internal_mutable_metadata_source_list() {
  _has_bits_[0] |= 0x00000008u;
  if (metadata_source_list_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::MetadataSourceList>(GetArena());
    metadata_source_list_ = p;
  }
  return metadata_source_list_;
}
inline ::mead101::mead::MetadataSourceList* MeadMessage::mutable_metadata_source_list() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.MeadMessage.metadata_source_list)
  return _internal_mutable_metadata_source_list();
}
inline void MeadMessage::set_allocated_metadata_source_list(::mead101::mead::MetadataSourceList* metadata_source_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete metadata_source_list_;
  }
  if (metadata_source_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(metadata_source_list);
    if (message_arena != submessage_arena) {
      metadata_source_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata_source_list, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  metadata_source_list_ = metadata_source_list;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.MeadMessage.metadata_source_list)
}

// optional .mead101.mead.PartyInformationList party_information_list = 4;
inline bool MeadMessage::_internal_has_party_information_list() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || party_information_list_ != nullptr);
  return value;
}
inline bool MeadMessage::has_party_information_list() const {
  return _internal_has_party_information_list();
}
inline void MeadMessage::clear_party_information_list() {
  if (party_information_list_ != nullptr) party_information_list_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::mead101::mead::PartyInformationList& MeadMessage::_internal_party_information_list() const {
  const ::mead101::mead::PartyInformationList* p = party_information_list_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::PartyInformationList*>(
      &::mead101::mead::_PartyInformationList_default_instance_);
}
inline const ::mead101::mead::PartyInformationList& MeadMessage::party_information_list() const {
  // @@protoc_insertion_point(field_get:mead101.mead.MeadMessage.party_information_list)
  return _internal_party_information_list();
}
inline void MeadMessage::unsafe_arena_set_allocated_party_information_list(
    ::mead101::mead::PartyInformationList* party_information_list) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(party_information_list_);
  }
  party_information_list_ = party_information_list;
  if (party_information_list) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.MeadMessage.party_information_list)
}
inline ::mead101::mead::PartyInformationList* MeadMessage::release_party_information_list() {
  _has_bits_[0] &= ~0x00000010u;
  ::mead101::mead::PartyInformationList* temp = party_information_list_;
  party_information_list_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::PartyInformationList* MeadMessage::unsafe_arena_release_party_information_list() {
  // @@protoc_insertion_point(field_release:mead101.mead.MeadMessage.party_information_list)
  _has_bits_[0] &= ~0x00000010u;
  ::mead101::mead::PartyInformationList* temp = party_information_list_;
  party_information_list_ = nullptr;
  return temp;
}
inline ::mead101::mead::PartyInformationList* MeadMessage::_internal_mutable_party_information_list() {
  _has_bits_[0] |= 0x00000010u;
  if (party_information_list_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::PartyInformationList>(GetArena());
    party_information_list_ = p;
  }
  return party_information_list_;
}
inline ::mead101::mead::PartyInformationList* MeadMessage::mutable_party_information_list() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.MeadMessage.party_information_list)
  return _internal_mutable_party_information_list();
}
inline void MeadMessage::set_allocated_party_information_list(::mead101::mead::PartyInformationList* party_information_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete party_information_list_;
  }
  if (party_information_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(party_information_list);
    if (message_arena != submessage_arena) {
      party_information_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, party_information_list, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  party_information_list_ = party_information_list;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.MeadMessage.party_information_list)
}

// optional .mead101.mead.ReleaseInformationList release_information_list = 5;
inline bool MeadMessage::_internal_has_release_information_list() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || release_information_list_ != nullptr);
  return value;
}
inline bool MeadMessage::has_release_information_list() const {
  return _internal_has_release_information_list();
}
inline void MeadMessage::clear_release_information_list() {
  if (release_information_list_ != nullptr) release_information_list_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::mead101::mead::ReleaseInformationList& MeadMessage::_internal_release_information_list() const {
  const ::mead101::mead::ReleaseInformationList* p = release_information_list_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::ReleaseInformationList*>(
      &::mead101::mead::_ReleaseInformationList_default_instance_);
}
inline const ::mead101::mead::ReleaseInformationList& MeadMessage::release_information_list() const {
  // @@protoc_insertion_point(field_get:mead101.mead.MeadMessage.release_information_list)
  return _internal_release_information_list();
}
inline void MeadMessage::unsafe_arena_set_allocated_release_information_list(
    ::mead101::mead::ReleaseInformationList* release_information_list) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(release_information_list_);
  }
  release_information_list_ = release_information_list;
  if (release_information_list) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.MeadMessage.release_information_list)
}
inline ::mead101::mead::ReleaseInformationList* MeadMessage::release_release_information_list() {
  _has_bits_[0] &= ~0x00000020u;
  ::mead101::mead::ReleaseInformationList* temp = release_information_list_;
  release_information_list_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::ReleaseInformationList* MeadMessage::unsafe_arena_release_release_information_list() {
  // @@protoc_insertion_point(field_release:mead101.mead.MeadMessage.release_information_list)
  _has_bits_[0] &= ~0x00000020u;
  ::mead101::mead::ReleaseInformationList* temp = release_information_list_;
  release_information_list_ = nullptr;
  return temp;
}
inline ::mead101::mead::ReleaseInformationList* MeadMessage::_internal_mutable_release_information_list() {
  _has_bits_[0] |= 0x00000020u;
  if (release_information_list_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::ReleaseInformationList>(GetArena());
    release_information_list_ = p;
  }
  return release_information_list_;
}
inline ::mead101::mead::ReleaseInformationList* MeadMessage::mutable_release_information_list() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.MeadMessage.release_information_list)
  return _internal_mutable_release_information_list();
}
inline void MeadMessage::set_allocated_release_information_list(::mead101::mead::ReleaseInformationList* release_information_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete release_information_list_;
  }
  if (release_information_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(release_information_list);
    if (message_arena != submessage_arena) {
      release_information_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, release_information_list, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  release_information_list_ = release_information_list;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.MeadMessage.release_information_list)
}

// optional .mead101.mead.ResourceInformationList resource_information_list = 6;
inline bool MeadMessage::_internal_has_resource_information_list() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || resource_information_list_ != nullptr);
  return value;
}
inline bool MeadMessage::has_resource_information_list() const {
  return _internal_has_resource_information_list();
}
inline void MeadMessage::clear_resource_information_list() {
  if (resource_information_list_ != nullptr) resource_information_list_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::mead101::mead::ResourceInformationList& MeadMessage::_internal_resource_information_list() const {
  const ::mead101::mead::ResourceInformationList* p = resource_information_list_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::ResourceInformationList*>(
      &::mead101::mead::_ResourceInformationList_default_instance_);
}
inline const ::mead101::mead::ResourceInformationList& MeadMessage::resource_information_list() const {
  // @@protoc_insertion_point(field_get:mead101.mead.MeadMessage.resource_information_list)
  return _internal_resource_information_list();
}
inline void MeadMessage::unsafe_arena_set_allocated_resource_information_list(
    ::mead101::mead::ResourceInformationList* resource_information_list) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(resource_information_list_);
  }
  resource_information_list_ = resource_information_list;
  if (resource_information_list) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.MeadMessage.resource_information_list)
}
inline ::mead101::mead::ResourceInformationList* MeadMessage::release_resource_information_list() {
  _has_bits_[0] &= ~0x00000040u;
  ::mead101::mead::ResourceInformationList* temp = resource_information_list_;
  resource_information_list_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::ResourceInformationList* MeadMessage::unsafe_arena_release_resource_information_list() {
  // @@protoc_insertion_point(field_release:mead101.mead.MeadMessage.resource_information_list)
  _has_bits_[0] &= ~0x00000040u;
  ::mead101::mead::ResourceInformationList* temp = resource_information_list_;
  resource_information_list_ = nullptr;
  return temp;
}
inline ::mead101::mead::ResourceInformationList* MeadMessage::_internal_mutable_resource_information_list() {
  _has_bits_[0] |= 0x00000040u;
  if (resource_information_list_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::ResourceInformationList>(GetArena());
    resource_information_list_ = p;
  }
  return resource_information_list_;
}
inline ::mead101::mead::ResourceInformationList* MeadMessage::mutable_resource_information_list() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.MeadMessage.resource_information_list)
  return _internal_mutable_resource_information_list();
}
inline void MeadMessage::set_allocated_resource_information_list(::mead101::mead::ResourceInformationList* resource_information_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete resource_information_list_;
  }
  if (resource_information_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(resource_information_list);
    if (message_arena != submessage_arena) {
      resource_information_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resource_information_list, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  resource_information_list_ = resource_information_list;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.MeadMessage.resource_information_list)
}

// optional string subscription_id = 7;
inline bool MeadMessage::_internal_has_subscription_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MeadMessage::has_subscription_id() const {
  return _internal_has_subscription_id();
}
inline void MeadMessage::clear_subscription_id() {
  subscription_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& MeadMessage::subscription_id() const {
  // @@protoc_insertion_point(field_get:mead101.mead.MeadMessage.subscription_id)
  return _internal_subscription_id();
}
inline void MeadMessage::set_subscription_id(const std::string& value) {
  _internal_set_subscription_id(value);
  // @@protoc_insertion_point(field_set:mead101.mead.MeadMessage.subscription_id)
}
inline std::string* MeadMessage::mutable_subscription_id() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.MeadMessage.subscription_id)
  return _internal_mutable_subscription_id();
}
inline const std::string& MeadMessage::_internal_subscription_id() const {
  return subscription_id_.Get();
}
inline void MeadMessage::_internal_set_subscription_id(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  subscription_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MeadMessage::set_subscription_id(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  subscription_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.MeadMessage.subscription_id)
}
inline void MeadMessage::set_subscription_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  subscription_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.MeadMessage.subscription_id)
}
inline void MeadMessage::set_subscription_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  subscription_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.MeadMessage.subscription_id)
}
inline std::string* MeadMessage::_internal_mutable_subscription_id() {
  _has_bits_[0] |= 0x00000002u;
  return subscription_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MeadMessage::release_subscription_id() {
  // @@protoc_insertion_point(field_release:mead101.mead.MeadMessage.subscription_id)
  if (!_internal_has_subscription_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return subscription_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MeadMessage::set_allocated_subscription_id(std::string* subscription_id) {
  if (subscription_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  subscription_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), subscription_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.MeadMessage.subscription_id)
}

// optional .mead101.mead.WorkInformationList work_information_list = 8;
inline bool MeadMessage::_internal_has_work_information_list() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || work_information_list_ != nullptr);
  return value;
}
inline bool MeadMessage::has_work_information_list() const {
  return _internal_has_work_information_list();
}
inline void MeadMessage::clear_work_information_list() {
  if (work_information_list_ != nullptr) work_information_list_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
inline const ::mead101::mead::WorkInformationList& MeadMessage::_internal_work_information_list() const {
  const ::mead101::mead::WorkInformationList* p = work_information_list_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::WorkInformationList*>(
      &::mead101::mead::_WorkInformationList_default_instance_);
}
inline const ::mead101::mead::WorkInformationList& MeadMessage::work_information_list() const {
  // @@protoc_insertion_point(field_get:mead101.mead.MeadMessage.work_information_list)
  return _internal_work_information_list();
}
inline void MeadMessage::unsafe_arena_set_allocated_work_information_list(
    ::mead101::mead::WorkInformationList* work_information_list) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(work_information_list_);
  }
  work_information_list_ = work_information_list;
  if (work_information_list) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.MeadMessage.work_information_list)
}
inline ::mead101::mead::WorkInformationList* MeadMessage::release_work_information_list() {
  _has_bits_[0] &= ~0x00000080u;
  ::mead101::mead::WorkInformationList* temp = work_information_list_;
  work_information_list_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::WorkInformationList* MeadMessage::unsafe_arena_release_work_information_list() {
  // @@protoc_insertion_point(field_release:mead101.mead.MeadMessage.work_information_list)
  _has_bits_[0] &= ~0x00000080u;
  ::mead101::mead::WorkInformationList* temp = work_information_list_;
  work_information_list_ = nullptr;
  return temp;
}
inline ::mead101::mead::WorkInformationList* MeadMessage::_internal_mutable_work_information_list() {
  _has_bits_[0] |= 0x00000080u;
  if (work_information_list_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::WorkInformationList>(GetArena());
    work_information_list_ = p;
  }
  return work_information_list_;
}
inline ::mead101::mead::WorkInformationList* MeadMessage::mutable_work_information_list() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.MeadMessage.work_information_list)
  return _internal_mutable_work_information_list();
}
inline void MeadMessage::set_allocated_work_information_list(::mead101::mead::WorkInformationList* work_information_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete work_information_list_;
  }
  if (work_information_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(work_information_list);
    if (message_arena != submessage_arena) {
      work_information_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, work_information_list, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  work_information_list_ = work_information_list;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.MeadMessage.work_information_list)
}

// repeated string any_value = 9;
inline int MeadMessage::_internal_any_value_size() const {
  return any_value_.size();
}
inline int MeadMessage::any_value_size() const {
  return _internal_any_value_size();
}
inline void MeadMessage::clear_any_value() {
  any_value_.Clear();
}
inline std::string* MeadMessage::add_any_value() {
  // @@protoc_insertion_point(field_add_mutable:mead101.mead.MeadMessage.any_value)
  return _internal_add_any_value();
}
inline const std::string& MeadMessage::_internal_any_value(int index) const {
  return any_value_.Get(index);
}
inline const std::string& MeadMessage::any_value(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.MeadMessage.any_value)
  return _internal_any_value(index);
}
inline std::string* MeadMessage::mutable_any_value(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.MeadMessage.any_value)
  return any_value_.Mutable(index);
}
inline void MeadMessage::set_any_value(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:mead101.mead.MeadMessage.any_value)
  any_value_.Mutable(index)->assign(value);
}
inline void MeadMessage::set_any_value(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:mead101.mead.MeadMessage.any_value)
  any_value_.Mutable(index)->assign(std::move(value));
}
inline void MeadMessage::set_any_value(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  any_value_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mead101.mead.MeadMessage.any_value)
}
inline void MeadMessage::set_any_value(int index, const char* value, size_t size) {
  any_value_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.MeadMessage.any_value)
}
inline std::string* MeadMessage::_internal_add_any_value() {
  return any_value_.Add();
}
inline void MeadMessage::add_any_value(const std::string& value) {
  any_value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mead101.mead.MeadMessage.any_value)
}
inline void MeadMessage::add_any_value(std::string&& value) {
  any_value_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:mead101.mead.MeadMessage.any_value)
}
inline void MeadMessage::add_any_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  any_value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mead101.mead.MeadMessage.any_value)
}
inline void MeadMessage::add_any_value(const char* value, size_t size) {
  any_value_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mead101.mead.MeadMessage.any_value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
MeadMessage::any_value() const {
  // @@protoc_insertion_point(field_list:mead101.mead.MeadMessage.any_value)
  return any_value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
MeadMessage::mutable_any_value() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.MeadMessage.any_value)
  return &any_value_;
}

// -------------------------------------------------------------------

// MessageAuditTrail

// repeated .mead101.mead.MessageAuditTrailEvent message_audit_trail_event = 1;
inline int MessageAuditTrail::_internal_message_audit_trail_event_size() const {
  return message_audit_trail_event_.size();
}
inline int MessageAuditTrail::message_audit_trail_event_size() const {
  return _internal_message_audit_trail_event_size();
}
inline void MessageAuditTrail::clear_message_audit_trail_event() {
  message_audit_trail_event_.Clear();
}
inline ::mead101::mead::MessageAuditTrailEvent* MessageAuditTrail::mutable_message_audit_trail_event(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.MessageAuditTrail.message_audit_trail_event)
  return message_audit_trail_event_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::MessageAuditTrailEvent >*
MessageAuditTrail::mutable_message_audit_trail_event() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.MessageAuditTrail.message_audit_trail_event)
  return &message_audit_trail_event_;
}
inline const ::mead101::mead::MessageAuditTrailEvent& MessageAuditTrail::_internal_message_audit_trail_event(int index) const {
  return message_audit_trail_event_.Get(index);
}
inline const ::mead101::mead::MessageAuditTrailEvent& MessageAuditTrail::message_audit_trail_event(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.MessageAuditTrail.message_audit_trail_event)
  return _internal_message_audit_trail_event(index);
}
inline ::mead101::mead::MessageAuditTrailEvent* MessageAuditTrail::_internal_add_message_audit_trail_event() {
  return message_audit_trail_event_.Add();
}
inline ::mead101::mead::MessageAuditTrailEvent* MessageAuditTrail::add_message_audit_trail_event() {
  // @@protoc_insertion_point(field_add:mead101.mead.MessageAuditTrail.message_audit_trail_event)
  return _internal_add_message_audit_trail_event();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::MessageAuditTrailEvent >&
MessageAuditTrail::message_audit_trail_event() const {
  // @@protoc_insertion_point(field_list:mead101.mead.MessageAuditTrail.message_audit_trail_event)
  return message_audit_trail_event_;
}

// -------------------------------------------------------------------

// MessageAuditTrailEvent

// optional string date_time = 1;
inline bool MessageAuditTrailEvent::_internal_has_date_time() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MessageAuditTrailEvent::has_date_time() const {
  return _internal_has_date_time();
}
inline void MessageAuditTrailEvent::clear_date_time() {
  date_time_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MessageAuditTrailEvent::date_time() const {
  // @@protoc_insertion_point(field_get:mead101.mead.MessageAuditTrailEvent.date_time)
  return _internal_date_time();
}
inline void MessageAuditTrailEvent::set_date_time(const std::string& value) {
  _internal_set_date_time(value);
  // @@protoc_insertion_point(field_set:mead101.mead.MessageAuditTrailEvent.date_time)
}
inline std::string* MessageAuditTrailEvent::mutable_date_time() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.MessageAuditTrailEvent.date_time)
  return _internal_mutable_date_time();
}
inline const std::string& MessageAuditTrailEvent::_internal_date_time() const {
  return date_time_.Get();
}
inline void MessageAuditTrailEvent::_internal_set_date_time(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  date_time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MessageAuditTrailEvent::set_date_time(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  date_time_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.MessageAuditTrailEvent.date_time)
}
inline void MessageAuditTrailEvent::set_date_time(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  date_time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.MessageAuditTrailEvent.date_time)
}
inline void MessageAuditTrailEvent::set_date_time(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  date_time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.MessageAuditTrailEvent.date_time)
}
inline std::string* MessageAuditTrailEvent::_internal_mutable_date_time() {
  _has_bits_[0] |= 0x00000001u;
  return date_time_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MessageAuditTrailEvent::release_date_time() {
  // @@protoc_insertion_point(field_release:mead101.mead.MessageAuditTrailEvent.date_time)
  if (!_internal_has_date_time()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return date_time_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MessageAuditTrailEvent::set_allocated_date_time(std::string* date_time) {
  if (date_time != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  date_time_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), date_time,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.MessageAuditTrailEvent.date_time)
}

// optional .mead101.mead.MessagingPartyWithoutCode messaging_party_descriptor = 2;
inline bool MessageAuditTrailEvent::_internal_has_messaging_party_descriptor() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || messaging_party_descriptor_ != nullptr);
  return value;
}
inline bool MessageAuditTrailEvent::has_messaging_party_descriptor() const {
  return _internal_has_messaging_party_descriptor();
}
inline void MessageAuditTrailEvent::clear_messaging_party_descriptor() {
  if (messaging_party_descriptor_ != nullptr) messaging_party_descriptor_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::mead101::mead::MessagingPartyWithoutCode& MessageAuditTrailEvent::_internal_messaging_party_descriptor() const {
  const ::mead101::mead::MessagingPartyWithoutCode* p = messaging_party_descriptor_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::MessagingPartyWithoutCode*>(
      &::mead101::mead::_MessagingPartyWithoutCode_default_instance_);
}
inline const ::mead101::mead::MessagingPartyWithoutCode& MessageAuditTrailEvent::messaging_party_descriptor() const {
  // @@protoc_insertion_point(field_get:mead101.mead.MessageAuditTrailEvent.messaging_party_descriptor)
  return _internal_messaging_party_descriptor();
}
inline void MessageAuditTrailEvent::unsafe_arena_set_allocated_messaging_party_descriptor(
    ::mead101::mead::MessagingPartyWithoutCode* messaging_party_descriptor) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(messaging_party_descriptor_);
  }
  messaging_party_descriptor_ = messaging_party_descriptor;
  if (messaging_party_descriptor) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.MessageAuditTrailEvent.messaging_party_descriptor)
}
inline ::mead101::mead::MessagingPartyWithoutCode* MessageAuditTrailEvent::release_messaging_party_descriptor() {
  _has_bits_[0] &= ~0x00000002u;
  ::mead101::mead::MessagingPartyWithoutCode* temp = messaging_party_descriptor_;
  messaging_party_descriptor_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::MessagingPartyWithoutCode* MessageAuditTrailEvent::unsafe_arena_release_messaging_party_descriptor() {
  // @@protoc_insertion_point(field_release:mead101.mead.MessageAuditTrailEvent.messaging_party_descriptor)
  _has_bits_[0] &= ~0x00000002u;
  ::mead101::mead::MessagingPartyWithoutCode* temp = messaging_party_descriptor_;
  messaging_party_descriptor_ = nullptr;
  return temp;
}
inline ::mead101::mead::MessagingPartyWithoutCode* MessageAuditTrailEvent::_internal_mutable_messaging_party_descriptor() {
  _has_bits_[0] |= 0x00000002u;
  if (messaging_party_descriptor_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::MessagingPartyWithoutCode>(GetArena());
    messaging_party_descriptor_ = p;
  }
  return messaging_party_descriptor_;
}
inline ::mead101::mead::MessagingPartyWithoutCode* MessageAuditTrailEvent::mutable_messaging_party_descriptor() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.MessageAuditTrailEvent.messaging_party_descriptor)
  return _internal_mutable_messaging_party_descriptor();
}
inline void MessageAuditTrailEvent::set_allocated_messaging_party_descriptor(::mead101::mead::MessagingPartyWithoutCode* messaging_party_descriptor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete messaging_party_descriptor_;
  }
  if (messaging_party_descriptor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(messaging_party_descriptor);
    if (message_arena != submessage_arena) {
      messaging_party_descriptor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, messaging_party_descriptor, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  messaging_party_descriptor_ = messaging_party_descriptor;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.MessageAuditTrailEvent.messaging_party_descriptor)
}

// -------------------------------------------------------------------

// MessageHeader

// optional .mead101.mead.MessageAuditTrail message_audit_trail = 1;
inline bool MessageHeader::_internal_has_message_audit_trail() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || message_audit_trail_ != nullptr);
  return value;
}
inline bool MessageHeader::has_message_audit_trail() const {
  return _internal_has_message_audit_trail();
}
inline void MessageHeader::clear_message_audit_trail() {
  if (message_audit_trail_ != nullptr) message_audit_trail_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::mead101::mead::MessageAuditTrail& MessageHeader::_internal_message_audit_trail() const {
  const ::mead101::mead::MessageAuditTrail* p = message_audit_trail_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::MessageAuditTrail*>(
      &::mead101::mead::_MessageAuditTrail_default_instance_);
}
inline const ::mead101::mead::MessageAuditTrail& MessageHeader::message_audit_trail() const {
  // @@protoc_insertion_point(field_get:mead101.mead.MessageHeader.message_audit_trail)
  return _internal_message_audit_trail();
}
inline void MessageHeader::unsafe_arena_set_allocated_message_audit_trail(
    ::mead101::mead::MessageAuditTrail* message_audit_trail) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(message_audit_trail_);
  }
  message_audit_trail_ = message_audit_trail;
  if (message_audit_trail) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.MessageHeader.message_audit_trail)
}
inline ::mead101::mead::MessageAuditTrail* MessageHeader::release_message_audit_trail() {
  _has_bits_[0] &= ~0x00000010u;
  ::mead101::mead::MessageAuditTrail* temp = message_audit_trail_;
  message_audit_trail_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::MessageAuditTrail* MessageHeader::unsafe_arena_release_message_audit_trail() {
  // @@protoc_insertion_point(field_release:mead101.mead.MessageHeader.message_audit_trail)
  _has_bits_[0] &= ~0x00000010u;
  ::mead101::mead::MessageAuditTrail* temp = message_audit_trail_;
  message_audit_trail_ = nullptr;
  return temp;
}
inline ::mead101::mead::MessageAuditTrail* MessageHeader::_internal_mutable_message_audit_trail() {
  _has_bits_[0] |= 0x00000010u;
  if (message_audit_trail_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::MessageAuditTrail>(GetArena());
    message_audit_trail_ = p;
  }
  return message_audit_trail_;
}
inline ::mead101::mead::MessageAuditTrail* MessageHeader::mutable_message_audit_trail() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.MessageHeader.message_audit_trail)
  return _internal_mutable_message_audit_trail();
}
inline void MessageHeader::set_allocated_message_audit_trail(::mead101::mead::MessageAuditTrail* message_audit_trail) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete message_audit_trail_;
  }
  if (message_audit_trail) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(message_audit_trail);
    if (message_arena != submessage_arena) {
      message_audit_trail = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, message_audit_trail, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  message_audit_trail_ = message_audit_trail;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.MessageHeader.message_audit_trail)
}

// optional .mead101.avs.MessageControlType message_control_type = 2;
inline bool MessageHeader::_internal_has_message_control_type() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || message_control_type_ != nullptr);
  return value;
}
inline bool MessageHeader::has_message_control_type() const {
  return _internal_has_message_control_type();
}
inline const ::mead101::avs::MessageControlType& MessageHeader::_internal_message_control_type() const {
  const ::mead101::avs::MessageControlType* p = message_control_type_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::avs::MessageControlType*>(
      &::mead101::avs::_MessageControlType_default_instance_);
}
inline const ::mead101::avs::MessageControlType& MessageHeader::message_control_type() const {
  // @@protoc_insertion_point(field_get:mead101.mead.MessageHeader.message_control_type)
  return _internal_message_control_type();
}
inline void MessageHeader::unsafe_arena_set_allocated_message_control_type(
    ::mead101::avs::MessageControlType* message_control_type) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(message_control_type_);
  }
  message_control_type_ = message_control_type;
  if (message_control_type) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.MessageHeader.message_control_type)
}
inline ::mead101::avs::MessageControlType* MessageHeader::release_message_control_type() {
  _has_bits_[0] &= ~0x00000020u;
  ::mead101::avs::MessageControlType* temp = message_control_type_;
  message_control_type_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::avs::MessageControlType* MessageHeader::unsafe_arena_release_message_control_type() {
  // @@protoc_insertion_point(field_release:mead101.mead.MessageHeader.message_control_type)
  _has_bits_[0] &= ~0x00000020u;
  ::mead101::avs::MessageControlType* temp = message_control_type_;
  message_control_type_ = nullptr;
  return temp;
}
inline ::mead101::avs::MessageControlType* MessageHeader::_internal_mutable_message_control_type() {
  _has_bits_[0] |= 0x00000020u;
  if (message_control_type_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::avs::MessageControlType>(GetArena());
    message_control_type_ = p;
  }
  return message_control_type_;
}
inline ::mead101::avs::MessageControlType* MessageHeader::mutable_message_control_type() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.MessageHeader.message_control_type)
  return _internal_mutable_message_control_type();
}
inline void MessageHeader::set_allocated_message_control_type(::mead101::avs::MessageControlType* message_control_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(message_control_type_);
  }
  if (message_control_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(message_control_type)->GetArena();
    if (message_arena != submessage_arena) {
      message_control_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, message_control_type, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  message_control_type_ = message_control_type;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.MessageHeader.message_control_type)
}

// optional string message_created_date_time = 3;
inline bool MessageHeader::_internal_has_message_created_date_time() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MessageHeader::has_message_created_date_time() const {
  return _internal_has_message_created_date_time();
}
inline void MessageHeader::clear_message_created_date_time() {
  message_created_date_time_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MessageHeader::message_created_date_time() const {
  // @@protoc_insertion_point(field_get:mead101.mead.MessageHeader.message_created_date_time)
  return _internal_message_created_date_time();
}
inline void MessageHeader::set_message_created_date_time(const std::string& value) {
  _internal_set_message_created_date_time(value);
  // @@protoc_insertion_point(field_set:mead101.mead.MessageHeader.message_created_date_time)
}
inline std::string* MessageHeader::mutable_message_created_date_time() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.MessageHeader.message_created_date_time)
  return _internal_mutable_message_created_date_time();
}
inline const std::string& MessageHeader::_internal_message_created_date_time() const {
  return message_created_date_time_.Get();
}
inline void MessageHeader::_internal_set_message_created_date_time(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  message_created_date_time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MessageHeader::set_message_created_date_time(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  message_created_date_time_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.MessageHeader.message_created_date_time)
}
inline void MessageHeader::set_message_created_date_time(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  message_created_date_time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.MessageHeader.message_created_date_time)
}
inline void MessageHeader::set_message_created_date_time(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  message_created_date_time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.MessageHeader.message_created_date_time)
}
inline std::string* MessageHeader::_internal_mutable_message_created_date_time() {
  _has_bits_[0] |= 0x00000001u;
  return message_created_date_time_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MessageHeader::release_message_created_date_time() {
  // @@protoc_insertion_point(field_release:mead101.mead.MessageHeader.message_created_date_time)
  if (!_internal_has_message_created_date_time()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return message_created_date_time_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MessageHeader::set_allocated_message_created_date_time(std::string* message_created_date_time) {
  if (message_created_date_time != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  message_created_date_time_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message_created_date_time,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.MessageHeader.message_created_date_time)
}

// optional string message_file_name = 4;
inline bool MessageHeader::_internal_has_message_file_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MessageHeader::has_message_file_name() const {
  return _internal_has_message_file_name();
}
inline void MessageHeader::clear_message_file_name() {
  message_file_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& MessageHeader::message_file_name() const {
  // @@protoc_insertion_point(field_get:mead101.mead.MessageHeader.message_file_name)
  return _internal_message_file_name();
}
inline void MessageHeader::set_message_file_name(const std::string& value) {
  _internal_set_message_file_name(value);
  // @@protoc_insertion_point(field_set:mead101.mead.MessageHeader.message_file_name)
}
inline std::string* MessageHeader::mutable_message_file_name() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.MessageHeader.message_file_name)
  return _internal_mutable_message_file_name();
}
inline const std::string& MessageHeader::_internal_message_file_name() const {
  return message_file_name_.Get();
}
inline void MessageHeader::_internal_set_message_file_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  message_file_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MessageHeader::set_message_file_name(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  message_file_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.MessageHeader.message_file_name)
}
inline void MessageHeader::set_message_file_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  message_file_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.MessageHeader.message_file_name)
}
inline void MessageHeader::set_message_file_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  message_file_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.MessageHeader.message_file_name)
}
inline std::string* MessageHeader::_internal_mutable_message_file_name() {
  _has_bits_[0] |= 0x00000002u;
  return message_file_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MessageHeader::release_message_file_name() {
  // @@protoc_insertion_point(field_release:mead101.mead.MessageHeader.message_file_name)
  if (!_internal_has_message_file_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return message_file_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MessageHeader::set_allocated_message_file_name(std::string* message_file_name) {
  if (message_file_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  message_file_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message_file_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.MessageHeader.message_file_name)
}

// optional string message_id = 5;
inline bool MessageHeader::_internal_has_message_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool MessageHeader::has_message_id() const {
  return _internal_has_message_id();
}
inline void MessageHeader::clear_message_id() {
  message_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& MessageHeader::message_id() const {
  // @@protoc_insertion_point(field_get:mead101.mead.MessageHeader.message_id)
  return _internal_message_id();
}
inline void MessageHeader::set_message_id(const std::string& value) {
  _internal_set_message_id(value);
  // @@protoc_insertion_point(field_set:mead101.mead.MessageHeader.message_id)
}
inline std::string* MessageHeader::mutable_message_id() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.MessageHeader.message_id)
  return _internal_mutable_message_id();
}
inline const std::string& MessageHeader::_internal_message_id() const {
  return message_id_.Get();
}
inline void MessageHeader::_internal_set_message_id(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  message_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MessageHeader::set_message_id(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  message_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.MessageHeader.message_id)
}
inline void MessageHeader::set_message_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  message_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.MessageHeader.message_id)
}
inline void MessageHeader::set_message_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  message_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.MessageHeader.message_id)
}
inline std::string* MessageHeader::_internal_mutable_message_id() {
  _has_bits_[0] |= 0x00000004u;
  return message_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MessageHeader::release_message_id() {
  // @@protoc_insertion_point(field_release:mead101.mead.MessageHeader.message_id)
  if (!_internal_has_message_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return message_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MessageHeader::set_allocated_message_id(std::string* message_id) {
  if (message_id != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  message_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.MessageHeader.message_id)
}

// repeated .mead101.mead.MessagingPartyWithoutCode message_recipient = 6;
inline int MessageHeader::_internal_message_recipient_size() const {
  return message_recipient_.size();
}
inline int MessageHeader::message_recipient_size() const {
  return _internal_message_recipient_size();
}
inline void MessageHeader::clear_message_recipient() {
  message_recipient_.Clear();
}
inline ::mead101::mead::MessagingPartyWithoutCode* MessageHeader::mutable_message_recipient(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.MessageHeader.message_recipient)
  return message_recipient_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::MessagingPartyWithoutCode >*
MessageHeader::mutable_message_recipient() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.MessageHeader.message_recipient)
  return &message_recipient_;
}
inline const ::mead101::mead::MessagingPartyWithoutCode& MessageHeader::_internal_message_recipient(int index) const {
  return message_recipient_.Get(index);
}
inline const ::mead101::mead::MessagingPartyWithoutCode& MessageHeader::message_recipient(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.MessageHeader.message_recipient)
  return _internal_message_recipient(index);
}
inline ::mead101::mead::MessagingPartyWithoutCode* MessageHeader::_internal_add_message_recipient() {
  return message_recipient_.Add();
}
inline ::mead101::mead::MessagingPartyWithoutCode* MessageHeader::add_message_recipient() {
  // @@protoc_insertion_point(field_add:mead101.mead.MessageHeader.message_recipient)
  return _internal_add_message_recipient();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::MessagingPartyWithoutCode >&
MessageHeader::message_recipient() const {
  // @@protoc_insertion_point(field_list:mead101.mead.MessageHeader.message_recipient)
  return message_recipient_;
}

// optional .mead101.mead.MessagingPartyWithoutCode message_sender = 7;
inline bool MessageHeader::_internal_has_message_sender() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || message_sender_ != nullptr);
  return value;
}
inline bool MessageHeader::has_message_sender() const {
  return _internal_has_message_sender();
}
inline void MessageHeader::clear_message_sender() {
  if (message_sender_ != nullptr) message_sender_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::mead101::mead::MessagingPartyWithoutCode& MessageHeader::_internal_message_sender() const {
  const ::mead101::mead::MessagingPartyWithoutCode* p = message_sender_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::MessagingPartyWithoutCode*>(
      &::mead101::mead::_MessagingPartyWithoutCode_default_instance_);
}
inline const ::mead101::mead::MessagingPartyWithoutCode& MessageHeader::message_sender() const {
  // @@protoc_insertion_point(field_get:mead101.mead.MessageHeader.message_sender)
  return _internal_message_sender();
}
inline void MessageHeader::unsafe_arena_set_allocated_message_sender(
    ::mead101::mead::MessagingPartyWithoutCode* message_sender) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(message_sender_);
  }
  message_sender_ = message_sender;
  if (message_sender) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.MessageHeader.message_sender)
}
inline ::mead101::mead::MessagingPartyWithoutCode* MessageHeader::release_message_sender() {
  _has_bits_[0] &= ~0x00000040u;
  ::mead101::mead::MessagingPartyWithoutCode* temp = message_sender_;
  message_sender_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::MessagingPartyWithoutCode* MessageHeader::unsafe_arena_release_message_sender() {
  // @@protoc_insertion_point(field_release:mead101.mead.MessageHeader.message_sender)
  _has_bits_[0] &= ~0x00000040u;
  ::mead101::mead::MessagingPartyWithoutCode* temp = message_sender_;
  message_sender_ = nullptr;
  return temp;
}
inline ::mead101::mead::MessagingPartyWithoutCode* MessageHeader::_internal_mutable_message_sender() {
  _has_bits_[0] |= 0x00000040u;
  if (message_sender_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::MessagingPartyWithoutCode>(GetArena());
    message_sender_ = p;
  }
  return message_sender_;
}
inline ::mead101::mead::MessagingPartyWithoutCode* MessageHeader::mutable_message_sender() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.MessageHeader.message_sender)
  return _internal_mutable_message_sender();
}
inline void MessageHeader::set_allocated_message_sender(::mead101::mead::MessagingPartyWithoutCode* message_sender) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete message_sender_;
  }
  if (message_sender) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(message_sender);
    if (message_arena != submessage_arena) {
      message_sender = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, message_sender, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  message_sender_ = message_sender;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.MessageHeader.message_sender)
}

// optional string message_thread_id = 8;
inline bool MessageHeader::_internal_has_message_thread_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool MessageHeader::has_message_thread_id() const {
  return _internal_has_message_thread_id();
}
inline void MessageHeader::clear_message_thread_id() {
  message_thread_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& MessageHeader::message_thread_id() const {
  // @@protoc_insertion_point(field_get:mead101.mead.MessageHeader.message_thread_id)
  return _internal_message_thread_id();
}
inline void MessageHeader::set_message_thread_id(const std::string& value) {
  _internal_set_message_thread_id(value);
  // @@protoc_insertion_point(field_set:mead101.mead.MessageHeader.message_thread_id)
}
inline std::string* MessageHeader::mutable_message_thread_id() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.MessageHeader.message_thread_id)
  return _internal_mutable_message_thread_id();
}
inline const std::string& MessageHeader::_internal_message_thread_id() const {
  return message_thread_id_.Get();
}
inline void MessageHeader::_internal_set_message_thread_id(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  message_thread_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MessageHeader::set_message_thread_id(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  message_thread_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.MessageHeader.message_thread_id)
}
inline void MessageHeader::set_message_thread_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  message_thread_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.MessageHeader.message_thread_id)
}
inline void MessageHeader::set_message_thread_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  message_thread_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.MessageHeader.message_thread_id)
}
inline std::string* MessageHeader::_internal_mutable_message_thread_id() {
  _has_bits_[0] |= 0x00000008u;
  return message_thread_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MessageHeader::release_message_thread_id() {
  // @@protoc_insertion_point(field_release:mead101.mead.MessageHeader.message_thread_id)
  if (!_internal_has_message_thread_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return message_thread_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MessageHeader::set_allocated_message_thread_id(std::string* message_thread_id) {
  if (message_thread_id != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  message_thread_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message_thread_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.MessageHeader.message_thread_id)
}

// optional .mead101.mead.MessagingPartyWithoutCode sent_on_behalf_of = 9;
inline bool MessageHeader::_internal_has_sent_on_behalf_of() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || sent_on_behalf_of_ != nullptr);
  return value;
}
inline bool MessageHeader::has_sent_on_behalf_of() const {
  return _internal_has_sent_on_behalf_of();
}
inline void MessageHeader::clear_sent_on_behalf_of() {
  if (sent_on_behalf_of_ != nullptr) sent_on_behalf_of_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
inline const ::mead101::mead::MessagingPartyWithoutCode& MessageHeader::_internal_sent_on_behalf_of() const {
  const ::mead101::mead::MessagingPartyWithoutCode* p = sent_on_behalf_of_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::MessagingPartyWithoutCode*>(
      &::mead101::mead::_MessagingPartyWithoutCode_default_instance_);
}
inline const ::mead101::mead::MessagingPartyWithoutCode& MessageHeader::sent_on_behalf_of() const {
  // @@protoc_insertion_point(field_get:mead101.mead.MessageHeader.sent_on_behalf_of)
  return _internal_sent_on_behalf_of();
}
inline void MessageHeader::unsafe_arena_set_allocated_sent_on_behalf_of(
    ::mead101::mead::MessagingPartyWithoutCode* sent_on_behalf_of) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sent_on_behalf_of_);
  }
  sent_on_behalf_of_ = sent_on_behalf_of;
  if (sent_on_behalf_of) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.MessageHeader.sent_on_behalf_of)
}
inline ::mead101::mead::MessagingPartyWithoutCode* MessageHeader::release_sent_on_behalf_of() {
  _has_bits_[0] &= ~0x00000080u;
  ::mead101::mead::MessagingPartyWithoutCode* temp = sent_on_behalf_of_;
  sent_on_behalf_of_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::MessagingPartyWithoutCode* MessageHeader::unsafe_arena_release_sent_on_behalf_of() {
  // @@protoc_insertion_point(field_release:mead101.mead.MessageHeader.sent_on_behalf_of)
  _has_bits_[0] &= ~0x00000080u;
  ::mead101::mead::MessagingPartyWithoutCode* temp = sent_on_behalf_of_;
  sent_on_behalf_of_ = nullptr;
  return temp;
}
inline ::mead101::mead::MessagingPartyWithoutCode* MessageHeader::_internal_mutable_sent_on_behalf_of() {
  _has_bits_[0] |= 0x00000080u;
  if (sent_on_behalf_of_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::MessagingPartyWithoutCode>(GetArena());
    sent_on_behalf_of_ = p;
  }
  return sent_on_behalf_of_;
}
inline ::mead101::mead::MessagingPartyWithoutCode* MessageHeader::mutable_sent_on_behalf_of() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.MessageHeader.sent_on_behalf_of)
  return _internal_mutable_sent_on_behalf_of();
}
inline void MessageHeader::set_allocated_sent_on_behalf_of(::mead101::mead::MessagingPartyWithoutCode* sent_on_behalf_of) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete sent_on_behalf_of_;
  }
  if (sent_on_behalf_of) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(sent_on_behalf_of);
    if (message_arena != submessage_arena) {
      sent_on_behalf_of = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sent_on_behalf_of, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  sent_on_behalf_of_ = sent_on_behalf_of;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.MessageHeader.sent_on_behalf_of)
}

// -------------------------------------------------------------------

// MessagingPartyWithoutCode

// optional string party_id = 1;
inline bool MessagingPartyWithoutCode::_internal_has_party_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MessagingPartyWithoutCode::has_party_id() const {
  return _internal_has_party_id();
}
inline void MessagingPartyWithoutCode::clear_party_id() {
  party_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MessagingPartyWithoutCode::party_id() const {
  // @@protoc_insertion_point(field_get:mead101.mead.MessagingPartyWithoutCode.party_id)
  return _internal_party_id();
}
inline void MessagingPartyWithoutCode::set_party_id(const std::string& value) {
  _internal_set_party_id(value);
  // @@protoc_insertion_point(field_set:mead101.mead.MessagingPartyWithoutCode.party_id)
}
inline std::string* MessagingPartyWithoutCode::mutable_party_id() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.MessagingPartyWithoutCode.party_id)
  return _internal_mutable_party_id();
}
inline const std::string& MessagingPartyWithoutCode::_internal_party_id() const {
  return party_id_.Get();
}
inline void MessagingPartyWithoutCode::_internal_set_party_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  party_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MessagingPartyWithoutCode::set_party_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  party_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.MessagingPartyWithoutCode.party_id)
}
inline void MessagingPartyWithoutCode::set_party_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  party_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.MessagingPartyWithoutCode.party_id)
}
inline void MessagingPartyWithoutCode::set_party_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  party_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.MessagingPartyWithoutCode.party_id)
}
inline std::string* MessagingPartyWithoutCode::_internal_mutable_party_id() {
  _has_bits_[0] |= 0x00000001u;
  return party_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MessagingPartyWithoutCode::release_party_id() {
  // @@protoc_insertion_point(field_release:mead101.mead.MessagingPartyWithoutCode.party_id)
  if (!_internal_has_party_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return party_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MessagingPartyWithoutCode::set_allocated_party_id(std::string* party_id) {
  if (party_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  party_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), party_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.MessagingPartyWithoutCode.party_id)
}

// optional .mead101.mead.PartyNameWithoutCode party_name = 2;
inline bool MessagingPartyWithoutCode::_internal_has_party_name() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || party_name_ != nullptr);
  return value;
}
inline bool MessagingPartyWithoutCode::has_party_name() const {
  return _internal_has_party_name();
}
inline void MessagingPartyWithoutCode::clear_party_name() {
  if (party_name_ != nullptr) party_name_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::mead101::mead::PartyNameWithoutCode& MessagingPartyWithoutCode::_internal_party_name() const {
  const ::mead101::mead::PartyNameWithoutCode* p = party_name_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::PartyNameWithoutCode*>(
      &::mead101::mead::_PartyNameWithoutCode_default_instance_);
}
inline const ::mead101::mead::PartyNameWithoutCode& MessagingPartyWithoutCode::party_name() const {
  // @@protoc_insertion_point(field_get:mead101.mead.MessagingPartyWithoutCode.party_name)
  return _internal_party_name();
}
inline void MessagingPartyWithoutCode::unsafe_arena_set_allocated_party_name(
    ::mead101::mead::PartyNameWithoutCode* party_name) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(party_name_);
  }
  party_name_ = party_name;
  if (party_name) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.MessagingPartyWithoutCode.party_name)
}
inline ::mead101::mead::PartyNameWithoutCode* MessagingPartyWithoutCode::release_party_name() {
  _has_bits_[0] &= ~0x00000004u;
  ::mead101::mead::PartyNameWithoutCode* temp = party_name_;
  party_name_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::PartyNameWithoutCode* MessagingPartyWithoutCode::unsafe_arena_release_party_name() {
  // @@protoc_insertion_point(field_release:mead101.mead.MessagingPartyWithoutCode.party_name)
  _has_bits_[0] &= ~0x00000004u;
  ::mead101::mead::PartyNameWithoutCode* temp = party_name_;
  party_name_ = nullptr;
  return temp;
}
inline ::mead101::mead::PartyNameWithoutCode* MessagingPartyWithoutCode::_internal_mutable_party_name() {
  _has_bits_[0] |= 0x00000004u;
  if (party_name_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::PartyNameWithoutCode>(GetArena());
    party_name_ = p;
  }
  return party_name_;
}
inline ::mead101::mead::PartyNameWithoutCode* MessagingPartyWithoutCode::mutable_party_name() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.MessagingPartyWithoutCode.party_name)
  return _internal_mutable_party_name();
}
inline void MessagingPartyWithoutCode::set_allocated_party_name(::mead101::mead::PartyNameWithoutCode* party_name) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete party_name_;
  }
  if (party_name) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(party_name);
    if (message_arena != submessage_arena) {
      party_name = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, party_name, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  party_name_ = party_name;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.MessagingPartyWithoutCode.party_name)
}

// optional string trading_name = 3;
inline bool MessagingPartyWithoutCode::_internal_has_trading_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MessagingPartyWithoutCode::has_trading_name() const {
  return _internal_has_trading_name();
}
inline void MessagingPartyWithoutCode::clear_trading_name() {
  trading_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& MessagingPartyWithoutCode::trading_name() const {
  // @@protoc_insertion_point(field_get:mead101.mead.MessagingPartyWithoutCode.trading_name)
  return _internal_trading_name();
}
inline void MessagingPartyWithoutCode::set_trading_name(const std::string& value) {
  _internal_set_trading_name(value);
  // @@protoc_insertion_point(field_set:mead101.mead.MessagingPartyWithoutCode.trading_name)
}
inline std::string* MessagingPartyWithoutCode::mutable_trading_name() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.MessagingPartyWithoutCode.trading_name)
  return _internal_mutable_trading_name();
}
inline const std::string& MessagingPartyWithoutCode::_internal_trading_name() const {
  return trading_name_.Get();
}
inline void MessagingPartyWithoutCode::_internal_set_trading_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  trading_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MessagingPartyWithoutCode::set_trading_name(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  trading_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.MessagingPartyWithoutCode.trading_name)
}
inline void MessagingPartyWithoutCode::set_trading_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  trading_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.MessagingPartyWithoutCode.trading_name)
}
inline void MessagingPartyWithoutCode::set_trading_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  trading_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.MessagingPartyWithoutCode.trading_name)
}
inline std::string* MessagingPartyWithoutCode::_internal_mutable_trading_name() {
  _has_bits_[0] |= 0x00000002u;
  return trading_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MessagingPartyWithoutCode::release_trading_name() {
  // @@protoc_insertion_point(field_release:mead101.mead.MessagingPartyWithoutCode.trading_name)
  if (!_internal_has_trading_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return trading_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MessagingPartyWithoutCode::set_allocated_trading_name(std::string* trading_name) {
  if (trading_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  trading_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), trading_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.MessagingPartyWithoutCode.trading_name)
}

// -------------------------------------------------------------------

// MetadataSource

// optional .mead101.mead.MetadataSourceType metadata_source_type = 1;
inline bool MetadataSource::_internal_has_metadata_source_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || metadata_source_type_ != nullptr);
  return value;
}
inline bool MetadataSource::has_metadata_source_type() const {
  return _internal_has_metadata_source_type();
}
inline void MetadataSource::clear_metadata_source_type() {
  if (metadata_source_type_ != nullptr) metadata_source_type_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::mead101::mead::MetadataSourceType& MetadataSource::_internal_metadata_source_type() const {
  const ::mead101::mead::MetadataSourceType* p = metadata_source_type_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::MetadataSourceType*>(
      &::mead101::mead::_MetadataSourceType_default_instance_);
}
inline const ::mead101::mead::MetadataSourceType& MetadataSource::metadata_source_type() const {
  // @@protoc_insertion_point(field_get:mead101.mead.MetadataSource.metadata_source_type)
  return _internal_metadata_source_type();
}
inline void MetadataSource::unsafe_arena_set_allocated_metadata_source_type(
    ::mead101::mead::MetadataSourceType* metadata_source_type) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_source_type_);
  }
  metadata_source_type_ = metadata_source_type;
  if (metadata_source_type) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.MetadataSource.metadata_source_type)
}
inline ::mead101::mead::MetadataSourceType* MetadataSource::release_metadata_source_type() {
  _has_bits_[0] &= ~0x00000002u;
  ::mead101::mead::MetadataSourceType* temp = metadata_source_type_;
  metadata_source_type_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::MetadataSourceType* MetadataSource::unsafe_arena_release_metadata_source_type() {
  // @@protoc_insertion_point(field_release:mead101.mead.MetadataSource.metadata_source_type)
  _has_bits_[0] &= ~0x00000002u;
  ::mead101::mead::MetadataSourceType* temp = metadata_source_type_;
  metadata_source_type_ = nullptr;
  return temp;
}
inline ::mead101::mead::MetadataSourceType* MetadataSource::_internal_mutable_metadata_source_type() {
  _has_bits_[0] |= 0x00000002u;
  if (metadata_source_type_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::MetadataSourceType>(GetArena());
    metadata_source_type_ = p;
  }
  return metadata_source_type_;
}
inline ::mead101::mead::MetadataSourceType* MetadataSource::mutable_metadata_source_type() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.MetadataSource.metadata_source_type)
  return _internal_mutable_metadata_source_type();
}
inline void MetadataSource::set_allocated_metadata_source_type(::mead101::mead::MetadataSourceType* metadata_source_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete metadata_source_type_;
  }
  if (metadata_source_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(metadata_source_type);
    if (message_arena != submessage_arena) {
      metadata_source_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata_source_type, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  metadata_source_type_ = metadata_source_type;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.MetadataSource.metadata_source_type)
}

// repeated .mead101.mead.DetailedPartyId party_id = 2;
inline int MetadataSource::_internal_party_id_size() const {
  return party_id_.size();
}
inline int MetadataSource::party_id_size() const {
  return _internal_party_id_size();
}
inline void MetadataSource::clear_party_id() {
  party_id_.Clear();
}
inline ::mead101::mead::DetailedPartyId* MetadataSource::mutable_party_id(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.MetadataSource.party_id)
  return party_id_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::DetailedPartyId >*
MetadataSource::mutable_party_id() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.MetadataSource.party_id)
  return &party_id_;
}
inline const ::mead101::mead::DetailedPartyId& MetadataSource::_internal_party_id(int index) const {
  return party_id_.Get(index);
}
inline const ::mead101::mead::DetailedPartyId& MetadataSource::party_id(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.MetadataSource.party_id)
  return _internal_party_id(index);
}
inline ::mead101::mead::DetailedPartyId* MetadataSource::_internal_add_party_id() {
  return party_id_.Add();
}
inline ::mead101::mead::DetailedPartyId* MetadataSource::add_party_id() {
  // @@protoc_insertion_point(field_add:mead101.mead.MetadataSource.party_id)
  return _internal_add_party_id();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::DetailedPartyId >&
MetadataSource::party_id() const {
  // @@protoc_insertion_point(field_list:mead101.mead.MetadataSource.party_id)
  return party_id_;
}

// repeated .mead101.mead.PartyNameWithTerritory party_name = 3;
inline int MetadataSource::_internal_party_name_size() const {
  return party_name_.size();
}
inline int MetadataSource::party_name_size() const {
  return _internal_party_name_size();
}
inline void MetadataSource::clear_party_name() {
  party_name_.Clear();
}
inline ::mead101::mead::PartyNameWithTerritory* MetadataSource::mutable_party_name(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.MetadataSource.party_name)
  return party_name_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::PartyNameWithTerritory >*
MetadataSource::mutable_party_name() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.MetadataSource.party_name)
  return &party_name_;
}
inline const ::mead101::mead::PartyNameWithTerritory& MetadataSource::_internal_party_name(int index) const {
  return party_name_.Get(index);
}
inline const ::mead101::mead::PartyNameWithTerritory& MetadataSource::party_name(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.MetadataSource.party_name)
  return _internal_party_name(index);
}
inline ::mead101::mead::PartyNameWithTerritory* MetadataSource::_internal_add_party_name() {
  return party_name_.Add();
}
inline ::mead101::mead::PartyNameWithTerritory* MetadataSource::add_party_name() {
  // @@protoc_insertion_point(field_add:mead101.mead.MetadataSource.party_name)
  return _internal_add_party_name();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::PartyNameWithTerritory >&
MetadataSource::party_name() const {
  // @@protoc_insertion_point(field_list:mead101.mead.MetadataSource.party_name)
  return party_name_;
}

// optional string source_reference = 4;
inline bool MetadataSource::_internal_has_source_reference() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MetadataSource::has_source_reference() const {
  return _internal_has_source_reference();
}
inline void MetadataSource::clear_source_reference() {
  source_reference_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MetadataSource::source_reference() const {
  // @@protoc_insertion_point(field_get:mead101.mead.MetadataSource.source_reference)
  return _internal_source_reference();
}
inline void MetadataSource::set_source_reference(const std::string& value) {
  _internal_set_source_reference(value);
  // @@protoc_insertion_point(field_set:mead101.mead.MetadataSource.source_reference)
}
inline std::string* MetadataSource::mutable_source_reference() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.MetadataSource.source_reference)
  return _internal_mutable_source_reference();
}
inline const std::string& MetadataSource::_internal_source_reference() const {
  return source_reference_.Get();
}
inline void MetadataSource::_internal_set_source_reference(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  source_reference_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MetadataSource::set_source_reference(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  source_reference_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.MetadataSource.source_reference)
}
inline void MetadataSource::set_source_reference(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  source_reference_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.MetadataSource.source_reference)
}
inline void MetadataSource::set_source_reference(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  source_reference_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.MetadataSource.source_reference)
}
inline std::string* MetadataSource::_internal_mutable_source_reference() {
  _has_bits_[0] |= 0x00000001u;
  return source_reference_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MetadataSource::release_source_reference() {
  // @@protoc_insertion_point(field_release:mead101.mead.MetadataSource.source_reference)
  if (!_internal_has_source_reference()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return source_reference_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MetadataSource::set_allocated_source_reference(std::string* source_reference) {
  if (source_reference != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  source_reference_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), source_reference,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.MetadataSource.source_reference)
}

// -------------------------------------------------------------------

// MetadataSourceList

// repeated .mead101.mead.MetadataSource metadata_source = 1;
inline int MetadataSourceList::_internal_metadata_source_size() const {
  return metadata_source_.size();
}
inline int MetadataSourceList::metadata_source_size() const {
  return _internal_metadata_source_size();
}
inline void MetadataSourceList::clear_metadata_source() {
  metadata_source_.Clear();
}
inline ::mead101::mead::MetadataSource* MetadataSourceList::mutable_metadata_source(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.MetadataSourceList.metadata_source)
  return metadata_source_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::MetadataSource >*
MetadataSourceList::mutable_metadata_source() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.MetadataSourceList.metadata_source)
  return &metadata_source_;
}
inline const ::mead101::mead::MetadataSource& MetadataSourceList::_internal_metadata_source(int index) const {
  return metadata_source_.Get(index);
}
inline const ::mead101::mead::MetadataSource& MetadataSourceList::metadata_source(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.MetadataSourceList.metadata_source)
  return _internal_metadata_source(index);
}
inline ::mead101::mead::MetadataSource* MetadataSourceList::_internal_add_metadata_source() {
  return metadata_source_.Add();
}
inline ::mead101::mead::MetadataSource* MetadataSourceList::add_metadata_source() {
  // @@protoc_insertion_point(field_add:mead101.mead.MetadataSourceList.metadata_source)
  return _internal_add_metadata_source();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::MetadataSource >&
MetadataSourceList::metadata_source() const {
  // @@protoc_insertion_point(field_list:mead101.mead.MetadataSourceList.metadata_source)
  return metadata_source_;
}

// -------------------------------------------------------------------

// MetadataSourceType

// optional string namespace = 1;
inline bool MetadataSourceType::_internal_has_namespace_() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MetadataSourceType::has_namespace_() const {
  return _internal_has_namespace_();
}
inline void MetadataSourceType::clear_namespace_() {
  namespace__.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MetadataSourceType::namespace_() const {
  // @@protoc_insertion_point(field_get:mead101.mead.MetadataSourceType.namespace)
  return _internal_namespace_();
}
inline void MetadataSourceType::set_namespace_(const std::string& value) {
  _internal_set_namespace_(value);
  // @@protoc_insertion_point(field_set:mead101.mead.MetadataSourceType.namespace)
}
inline std::string* MetadataSourceType::mutable_namespace_() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.MetadataSourceType.namespace)
  return _internal_mutable_namespace_();
}
inline const std::string& MetadataSourceType::_internal_namespace_() const {
  return namespace__.Get();
}
inline void MetadataSourceType::_internal_set_namespace_(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MetadataSourceType::set_namespace_(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  namespace__.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.MetadataSourceType.namespace)
}
inline void MetadataSourceType::set_namespace_(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.MetadataSourceType.namespace)
}
inline void MetadataSourceType::set_namespace_(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.MetadataSourceType.namespace)
}
inline std::string* MetadataSourceType::_internal_mutable_namespace_() {
  _has_bits_[0] |= 0x00000001u;
  return namespace__.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MetadataSourceType::release_namespace_() {
  // @@protoc_insertion_point(field_release:mead101.mead.MetadataSourceType.namespace)
  if (!_internal_has_namespace_()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return namespace__.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MetadataSourceType::set_allocated_namespace_(std::string* namespace_) {
  if (namespace_ != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  namespace__.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), namespace_,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.MetadataSourceType.namespace)
}

// optional string user_defined_value = 2;
inline bool MetadataSourceType::_internal_has_user_defined_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MetadataSourceType::has_user_defined_value() const {
  return _internal_has_user_defined_value();
}
inline void MetadataSourceType::clear_user_defined_value() {
  user_defined_value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& MetadataSourceType::user_defined_value() const {
  // @@protoc_insertion_point(field_get:mead101.mead.MetadataSourceType.user_defined_value)
  return _internal_user_defined_value();
}
inline void MetadataSourceType::set_user_defined_value(const std::string& value) {
  _internal_set_user_defined_value(value);
  // @@protoc_insertion_point(field_set:mead101.mead.MetadataSourceType.user_defined_value)
}
inline std::string* MetadataSourceType::mutable_user_defined_value() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.MetadataSourceType.user_defined_value)
  return _internal_mutable_user_defined_value();
}
inline const std::string& MetadataSourceType::_internal_user_defined_value() const {
  return user_defined_value_.Get();
}
inline void MetadataSourceType::_internal_set_user_defined_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MetadataSourceType::set_user_defined_value(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  user_defined_value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.MetadataSourceType.user_defined_value)
}
inline void MetadataSourceType::set_user_defined_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.MetadataSourceType.user_defined_value)
}
inline void MetadataSourceType::set_user_defined_value(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.MetadataSourceType.user_defined_value)
}
inline std::string* MetadataSourceType::_internal_mutable_user_defined_value() {
  _has_bits_[0] |= 0x00000002u;
  return user_defined_value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MetadataSourceType::release_user_defined_value() {
  // @@protoc_insertion_point(field_release:mead101.mead.MetadataSourceType.user_defined_value)
  if (!_internal_has_user_defined_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return user_defined_value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MetadataSourceType::set_allocated_user_defined_value(std::string* user_defined_value) {
  if (user_defined_value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  user_defined_value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_defined_value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.MetadataSourceType.user_defined_value)
}

// optional .mead101.avs.MetadataSourceType ext_value = 3;
inline bool MetadataSourceType::_internal_has_ext_value() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || ext_value_ != nullptr);
  return value;
}
inline bool MetadataSourceType::has_ext_value() const {
  return _internal_has_ext_value();
}
inline const ::mead101::avs::MetadataSourceType& MetadataSourceType::_internal_ext_value() const {
  const ::mead101::avs::MetadataSourceType* p = ext_value_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::avs::MetadataSourceType*>(
      &::mead101::avs::_MetadataSourceType_default_instance_);
}
inline const ::mead101::avs::MetadataSourceType& MetadataSourceType::ext_value() const {
  // @@protoc_insertion_point(field_get:mead101.mead.MetadataSourceType.ext_value)
  return _internal_ext_value();
}
inline void MetadataSourceType::unsafe_arena_set_allocated_ext_value(
    ::mead101::avs::MetadataSourceType* ext_value) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext_value_);
  }
  ext_value_ = ext_value;
  if (ext_value) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.MetadataSourceType.ext_value)
}
inline ::mead101::avs::MetadataSourceType* MetadataSourceType::release_ext_value() {
  _has_bits_[0] &= ~0x00000004u;
  ::mead101::avs::MetadataSourceType* temp = ext_value_;
  ext_value_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::avs::MetadataSourceType* MetadataSourceType::unsafe_arena_release_ext_value() {
  // @@protoc_insertion_point(field_release:mead101.mead.MetadataSourceType.ext_value)
  _has_bits_[0] &= ~0x00000004u;
  ::mead101::avs::MetadataSourceType* temp = ext_value_;
  ext_value_ = nullptr;
  return temp;
}
inline ::mead101::avs::MetadataSourceType* MetadataSourceType::_internal_mutable_ext_value() {
  _has_bits_[0] |= 0x00000004u;
  if (ext_value_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::avs::MetadataSourceType>(GetArena());
    ext_value_ = p;
  }
  return ext_value_;
}
inline ::mead101::avs::MetadataSourceType* MetadataSourceType::mutable_ext_value() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.MetadataSourceType.ext_value)
  return _internal_mutable_ext_value();
}
inline void MetadataSourceType::set_allocated_ext_value(::mead101::avs::MetadataSourceType* ext_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext_value_);
  }
  if (ext_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext_value)->GetArena();
    if (message_arena != submessage_arena) {
      ext_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext_value, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  ext_value_ = ext_value;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.MetadataSourceType.ext_value)
}

// -------------------------------------------------------------------

// Meter

// optional int32 note_equivalent_to_beat = 1;
inline bool Meter::_internal_has_note_equivalent_to_beat() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Meter::has_note_equivalent_to_beat() const {
  return _internal_has_note_equivalent_to_beat();
}
inline void Meter::clear_note_equivalent_to_beat() {
  note_equivalent_to_beat_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Meter::_internal_note_equivalent_to_beat() const {
  return note_equivalent_to_beat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Meter::note_equivalent_to_beat() const {
  // @@protoc_insertion_point(field_get:mead101.mead.Meter.note_equivalent_to_beat)
  return _internal_note_equivalent_to_beat();
}
inline void Meter::_internal_set_note_equivalent_to_beat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  note_equivalent_to_beat_ = value;
}
inline void Meter::set_note_equivalent_to_beat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_note_equivalent_to_beat(value);
  // @@protoc_insertion_point(field_set:mead101.mead.Meter.note_equivalent_to_beat)
}

// optional int32 number_of_beats_in_bar = 2;
inline bool Meter::_internal_has_number_of_beats_in_bar() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Meter::has_number_of_beats_in_bar() const {
  return _internal_has_number_of_beats_in_bar();
}
inline void Meter::clear_number_of_beats_in_bar() {
  number_of_beats_in_bar_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Meter::_internal_number_of_beats_in_bar() const {
  return number_of_beats_in_bar_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Meter::number_of_beats_in_bar() const {
  // @@protoc_insertion_point(field_get:mead101.mead.Meter.number_of_beats_in_bar)
  return _internal_number_of_beats_in_bar();
}
inline void Meter::_internal_set_number_of_beats_in_bar(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  number_of_beats_in_bar_ = value;
}
inline void Meter::set_number_of_beats_in_bar(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_number_of_beats_in_bar(value);
  // @@protoc_insertion_point(field_set:mead101.mead.Meter.number_of_beats_in_bar)
}

// -------------------------------------------------------------------

// Mode

// optional string namespace = 1;
inline bool Mode::_internal_has_namespace_() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Mode::has_namespace_() const {
  return _internal_has_namespace_();
}
inline void Mode::clear_namespace_() {
  namespace__.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Mode::namespace_() const {
  // @@protoc_insertion_point(field_get:mead101.mead.Mode.namespace)
  return _internal_namespace_();
}
inline void Mode::set_namespace_(const std::string& value) {
  _internal_set_namespace_(value);
  // @@protoc_insertion_point(field_set:mead101.mead.Mode.namespace)
}
inline std::string* Mode::mutable_namespace_() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Mode.namespace)
  return _internal_mutable_namespace_();
}
inline const std::string& Mode::_internal_namespace_() const {
  return namespace__.Get();
}
inline void Mode::_internal_set_namespace_(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Mode::set_namespace_(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  namespace__.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.Mode.namespace)
}
inline void Mode::set_namespace_(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.Mode.namespace)
}
inline void Mode::set_namespace_(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.Mode.namespace)
}
inline std::string* Mode::_internal_mutable_namespace_() {
  _has_bits_[0] |= 0x00000001u;
  return namespace__.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Mode::release_namespace_() {
  // @@protoc_insertion_point(field_release:mead101.mead.Mode.namespace)
  if (!_internal_has_namespace_()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return namespace__.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Mode::set_allocated_namespace_(std::string* namespace_) {
  if (namespace_ != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  namespace__.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), namespace_,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.Mode.namespace)
}

// optional string user_defined_value = 2;
inline bool Mode::_internal_has_user_defined_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Mode::has_user_defined_value() const {
  return _internal_has_user_defined_value();
}
inline void Mode::clear_user_defined_value() {
  user_defined_value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Mode::user_defined_value() const {
  // @@protoc_insertion_point(field_get:mead101.mead.Mode.user_defined_value)
  return _internal_user_defined_value();
}
inline void Mode::set_user_defined_value(const std::string& value) {
  _internal_set_user_defined_value(value);
  // @@protoc_insertion_point(field_set:mead101.mead.Mode.user_defined_value)
}
inline std::string* Mode::mutable_user_defined_value() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Mode.user_defined_value)
  return _internal_mutable_user_defined_value();
}
inline const std::string& Mode::_internal_user_defined_value() const {
  return user_defined_value_.Get();
}
inline void Mode::_internal_set_user_defined_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Mode::set_user_defined_value(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  user_defined_value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.Mode.user_defined_value)
}
inline void Mode::set_user_defined_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.Mode.user_defined_value)
}
inline void Mode::set_user_defined_value(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.Mode.user_defined_value)
}
inline std::string* Mode::_internal_mutable_user_defined_value() {
  _has_bits_[0] |= 0x00000002u;
  return user_defined_value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Mode::release_user_defined_value() {
  // @@protoc_insertion_point(field_release:mead101.mead.Mode.user_defined_value)
  if (!_internal_has_user_defined_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return user_defined_value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Mode::set_allocated_user_defined_value(std::string* user_defined_value) {
  if (user_defined_value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  user_defined_value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_defined_value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.Mode.user_defined_value)
}

// optional .mead101.avs.Mode ext_value = 3;
inline bool Mode::_internal_has_ext_value() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || ext_value_ != nullptr);
  return value;
}
inline bool Mode::has_ext_value() const {
  return _internal_has_ext_value();
}
inline const ::mead101::avs::Mode& Mode::_internal_ext_value() const {
  const ::mead101::avs::Mode* p = ext_value_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::avs::Mode*>(
      &::mead101::avs::_Mode_default_instance_);
}
inline const ::mead101::avs::Mode& Mode::ext_value() const {
  // @@protoc_insertion_point(field_get:mead101.mead.Mode.ext_value)
  return _internal_ext_value();
}
inline void Mode::unsafe_arena_set_allocated_ext_value(
    ::mead101::avs::Mode* ext_value) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext_value_);
  }
  ext_value_ = ext_value;
  if (ext_value) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.Mode.ext_value)
}
inline ::mead101::avs::Mode* Mode::release_ext_value() {
  _has_bits_[0] &= ~0x00000004u;
  ::mead101::avs::Mode* temp = ext_value_;
  ext_value_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::avs::Mode* Mode::unsafe_arena_release_ext_value() {
  // @@protoc_insertion_point(field_release:mead101.mead.Mode.ext_value)
  _has_bits_[0] &= ~0x00000004u;
  ::mead101::avs::Mode* temp = ext_value_;
  ext_value_ = nullptr;
  return temp;
}
inline ::mead101::avs::Mode* Mode::_internal_mutable_ext_value() {
  _has_bits_[0] |= 0x00000004u;
  if (ext_value_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::avs::Mode>(GetArena());
    ext_value_ = p;
  }
  return ext_value_;
}
inline ::mead101::avs::Mode* Mode::mutable_ext_value() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Mode.ext_value)
  return _internal_mutable_ext_value();
}
inline void Mode::set_allocated_ext_value(::mead101::avs::Mode* ext_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext_value_);
  }
  if (ext_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext_value)->GetArena();
    if (message_arena != submessage_arena) {
      ext_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext_value, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  ext_value_ = ext_value;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.Mode.ext_value)
}

// -------------------------------------------------------------------

// Modulation

// optional int32 end_bar = 1;
inline bool Modulation::_internal_has_end_bar() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Modulation::has_end_bar() const {
  return _internal_has_end_bar();
}
inline void Modulation::clear_end_bar() {
  end_bar_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Modulation::_internal_end_bar() const {
  return end_bar_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Modulation::end_bar() const {
  // @@protoc_insertion_point(field_get:mead101.mead.Modulation.end_bar)
  return _internal_end_bar();
}
inline void Modulation::_internal_set_end_bar(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  end_bar_ = value;
}
inline void Modulation::set_end_bar(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_end_bar(value);
  // @@protoc_insertion_point(field_set:mead101.mead.Modulation.end_bar)
}

// optional double end_point = 2;
inline bool Modulation::_internal_has_end_point() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Modulation::has_end_point() const {
  return _internal_has_end_point();
}
inline void Modulation::clear_end_point() {
  end_point_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double Modulation::_internal_end_point() const {
  return end_point_;
}
inline double Modulation::end_point() const {
  // @@protoc_insertion_point(field_get:mead101.mead.Modulation.end_point)
  return _internal_end_point();
}
inline void Modulation::_internal_set_end_point(double value) {
  _has_bits_[0] |= 0x00000001u;
  end_point_ = value;
}
inline void Modulation::set_end_point(double value) {
  _internal_set_end_point(value);
  // @@protoc_insertion_point(field_set:mead101.mead.Modulation.end_point)
}

// optional int32 start_bar = 3;
inline bool Modulation::_internal_has_start_bar() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Modulation::has_start_bar() const {
  return _internal_has_start_bar();
}
inline void Modulation::clear_start_bar() {
  start_bar_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Modulation::_internal_start_bar() const {
  return start_bar_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Modulation::start_bar() const {
  // @@protoc_insertion_point(field_get:mead101.mead.Modulation.start_bar)
  return _internal_start_bar();
}
inline void Modulation::_internal_set_start_bar(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  start_bar_ = value;
}
inline void Modulation::set_start_bar(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_start_bar(value);
  // @@protoc_insertion_point(field_set:mead101.mead.Modulation.start_bar)
}

// optional double start_point = 4;
inline bool Modulation::_internal_has_start_point() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Modulation::has_start_point() const {
  return _internal_has_start_point();
}
inline void Modulation::clear_start_point() {
  start_point_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double Modulation::_internal_start_point() const {
  return start_point_;
}
inline double Modulation::start_point() const {
  // @@protoc_insertion_point(field_get:mead101.mead.Modulation.start_point)
  return _internal_start_point();
}
inline void Modulation::_internal_set_start_point(double value) {
  _has_bits_[0] |= 0x00000008u;
  start_point_ = value;
}
inline void Modulation::set_start_point(double value) {
  _internal_set_start_point(value);
  // @@protoc_insertion_point(field_set:mead101.mead.Modulation.start_point)
}

// optional double value = 5;
inline bool Modulation::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Modulation::has_value() const {
  return _internal_has_value();
}
inline void Modulation::clear_value() {
  value_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double Modulation::_internal_value() const {
  return value_;
}
inline double Modulation::value() const {
  // @@protoc_insertion_point(field_get:mead101.mead.Modulation.value)
  return _internal_value();
}
inline void Modulation::_internal_set_value(double value) {
  _has_bits_[0] |= 0x00000010u;
  value_ = value;
}
inline void Modulation::set_value(double value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:mead101.mead.Modulation.value)
}

// -------------------------------------------------------------------

// Mood

// optional .mead101.avs.CurrentTerritoryCode applicable_territory_code = 1;
inline bool Mood::_internal_has_applicable_territory_code() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || applicable_territory_code_ != nullptr);
  return value;
}
inline bool Mood::has_applicable_territory_code() const {
  return _internal_has_applicable_territory_code();
}
inline const ::mead101::avs::CurrentTerritoryCode& Mood::_internal_applicable_territory_code() const {
  const ::mead101::avs::CurrentTerritoryCode* p = applicable_territory_code_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::avs::CurrentTerritoryCode*>(
      &::mead101::avs::_CurrentTerritoryCode_default_instance_);
}
inline const ::mead101::avs::CurrentTerritoryCode& Mood::applicable_territory_code() const {
  // @@protoc_insertion_point(field_get:mead101.mead.Mood.applicable_territory_code)
  return _internal_applicable_territory_code();
}
inline void Mood::unsafe_arena_set_allocated_applicable_territory_code(
    ::mead101::avs::CurrentTerritoryCode* applicable_territory_code) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(applicable_territory_code_);
  }
  applicable_territory_code_ = applicable_territory_code;
  if (applicable_territory_code) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.Mood.applicable_territory_code)
}
inline ::mead101::avs::CurrentTerritoryCode* Mood::release_applicable_territory_code() {
  _has_bits_[0] &= ~0x00000001u;
  ::mead101::avs::CurrentTerritoryCode* temp = applicable_territory_code_;
  applicable_territory_code_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::avs::CurrentTerritoryCode* Mood::unsafe_arena_release_applicable_territory_code() {
  // @@protoc_insertion_point(field_release:mead101.mead.Mood.applicable_territory_code)
  _has_bits_[0] &= ~0x00000001u;
  ::mead101::avs::CurrentTerritoryCode* temp = applicable_territory_code_;
  applicable_territory_code_ = nullptr;
  return temp;
}
inline ::mead101::avs::CurrentTerritoryCode* Mood::_internal_mutable_applicable_territory_code() {
  _has_bits_[0] |= 0x00000001u;
  if (applicable_territory_code_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::avs::CurrentTerritoryCode>(GetArena());
    applicable_territory_code_ = p;
  }
  return applicable_territory_code_;
}
inline ::mead101::avs::CurrentTerritoryCode* Mood::mutable_applicable_territory_code() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Mood.applicable_territory_code)
  return _internal_mutable_applicable_territory_code();
}
inline void Mood::set_allocated_applicable_territory_code(::mead101::avs::CurrentTerritoryCode* applicable_territory_code) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(applicable_territory_code_);
  }
  if (applicable_territory_code) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(applicable_territory_code)->GetArena();
    if (message_arena != submessage_arena) {
      applicable_territory_code = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, applicable_territory_code, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  applicable_territory_code_ = applicable_territory_code;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.Mood.applicable_territory_code)
}

// repeated .mead101.mead.TextWithoutTerritory description = 2;
inline int Mood::_internal_description_size() const {
  return description_.size();
}
inline int Mood::description_size() const {
  return _internal_description_size();
}
inline void Mood::clear_description() {
  description_.Clear();
}
inline ::mead101::mead::TextWithoutTerritory* Mood::mutable_description(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Mood.description)
  return description_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::TextWithoutTerritory >*
Mood::mutable_description() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.Mood.description)
  return &description_;
}
inline const ::mead101::mead::TextWithoutTerritory& Mood::_internal_description(int index) const {
  return description_.Get(index);
}
inline const ::mead101::mead::TextWithoutTerritory& Mood::description(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.Mood.description)
  return _internal_description(index);
}
inline ::mead101::mead::TextWithoutTerritory* Mood::_internal_add_description() {
  return description_.Add();
}
inline ::mead101::mead::TextWithoutTerritory* Mood::add_description() {
  // @@protoc_insertion_point(field_add:mead101.mead.Mood.description)
  return _internal_add_description();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::TextWithoutTerritory >&
Mood::description() const {
  // @@protoc_insertion_point(field_list:mead101.mead.Mood.description)
  return description_;
}

// repeated string metadata_source_reference = 3;
inline int Mood::_internal_metadata_source_reference_size() const {
  return metadata_source_reference_.size();
}
inline int Mood::metadata_source_reference_size() const {
  return _internal_metadata_source_reference_size();
}
inline void Mood::clear_metadata_source_reference() {
  metadata_source_reference_.Clear();
}
inline std::string* Mood::add_metadata_source_reference() {
  // @@protoc_insertion_point(field_add_mutable:mead101.mead.Mood.metadata_source_reference)
  return _internal_add_metadata_source_reference();
}
inline const std::string& Mood::_internal_metadata_source_reference(int index) const {
  return metadata_source_reference_.Get(index);
}
inline const std::string& Mood::metadata_source_reference(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.Mood.metadata_source_reference)
  return _internal_metadata_source_reference(index);
}
inline std::string* Mood::mutable_metadata_source_reference(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Mood.metadata_source_reference)
  return metadata_source_reference_.Mutable(index);
}
inline void Mood::set_metadata_source_reference(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:mead101.mead.Mood.metadata_source_reference)
  metadata_source_reference_.Mutable(index)->assign(value);
}
inline void Mood::set_metadata_source_reference(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:mead101.mead.Mood.metadata_source_reference)
  metadata_source_reference_.Mutable(index)->assign(std::move(value));
}
inline void Mood::set_metadata_source_reference(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  metadata_source_reference_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mead101.mead.Mood.metadata_source_reference)
}
inline void Mood::set_metadata_source_reference(int index, const char* value, size_t size) {
  metadata_source_reference_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.Mood.metadata_source_reference)
}
inline std::string* Mood::_internal_add_metadata_source_reference() {
  return metadata_source_reference_.Add();
}
inline void Mood::add_metadata_source_reference(const std::string& value) {
  metadata_source_reference_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mead101.mead.Mood.metadata_source_reference)
}
inline void Mood::add_metadata_source_reference(std::string&& value) {
  metadata_source_reference_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:mead101.mead.Mood.metadata_source_reference)
}
inline void Mood::add_metadata_source_reference(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  metadata_source_reference_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mead101.mead.Mood.metadata_source_reference)
}
inline void Mood::add_metadata_source_reference(const char* value, size_t size) {
  metadata_source_reference_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mead101.mead.Mood.metadata_source_reference)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Mood::metadata_source_reference() const {
  // @@protoc_insertion_point(field_list:mead101.mead.Mood.metadata_source_reference)
  return metadata_source_reference_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Mood::mutable_metadata_source_reference() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.Mood.metadata_source_reference)
  return &metadata_source_reference_;
}

// optional .mead101.mead.MoodValue value = 4;
inline bool Mood::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || value_ != nullptr);
  return value;
}
inline bool Mood::has_value() const {
  return _internal_has_value();
}
inline void Mood::clear_value() {
  if (value_ != nullptr) value_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::mead101::mead::MoodValue& Mood::_internal_value() const {
  const ::mead101::mead::MoodValue* p = value_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::MoodValue*>(
      &::mead101::mead::_MoodValue_default_instance_);
}
inline const ::mead101::mead::MoodValue& Mood::value() const {
  // @@protoc_insertion_point(field_get:mead101.mead.Mood.value)
  return _internal_value();
}
inline void Mood::unsafe_arena_set_allocated_value(
    ::mead101::mead::MoodValue* value) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(value_);
  }
  value_ = value;
  if (value) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.Mood.value)
}
inline ::mead101::mead::MoodValue* Mood::release_value() {
  _has_bits_[0] &= ~0x00000002u;
  ::mead101::mead::MoodValue* temp = value_;
  value_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::MoodValue* Mood::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_release:mead101.mead.Mood.value)
  _has_bits_[0] &= ~0x00000002u;
  ::mead101::mead::MoodValue* temp = value_;
  value_ = nullptr;
  return temp;
}
inline ::mead101::mead::MoodValue* Mood::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000002u;
  if (value_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::MoodValue>(GetArena());
    value_ = p;
  }
  return value_;
}
inline ::mead101::mead::MoodValue* Mood::mutable_value() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Mood.value)
  return _internal_mutable_value();
}
inline void Mood::set_allocated_value(::mead101::mead::MoodValue* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete value_;
  }
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(value);
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.Mood.value)
}

// -------------------------------------------------------------------

// MoodValue

// optional bool applies_to_composition = 1;
inline bool MoodValue::_internal_has_applies_to_composition() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool MoodValue::has_applies_to_composition() const {
  return _internal_has_applies_to_composition();
}
inline void MoodValue::clear_applies_to_composition() {
  applies_to_composition_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool MoodValue::_internal_applies_to_composition() const {
  return applies_to_composition_;
}
inline bool MoodValue::applies_to_composition() const {
  // @@protoc_insertion_point(field_get:mead101.mead.MoodValue.applies_to_composition)
  return _internal_applies_to_composition();
}
inline void MoodValue::_internal_set_applies_to_composition(bool value) {
  _has_bits_[0] |= 0x00000008u;
  applies_to_composition_ = value;
}
inline void MoodValue::set_applies_to_composition(bool value) {
  _internal_set_applies_to_composition(value);
  // @@protoc_insertion_point(field_set:mead101.mead.MoodValue.applies_to_composition)
}

// optional bool applies_to_lyrics = 2;
inline bool MoodValue::_internal_has_applies_to_lyrics() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool MoodValue::has_applies_to_lyrics() const {
  return _internal_has_applies_to_lyrics();
}
inline void MoodValue::clear_applies_to_lyrics() {
  applies_to_lyrics_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool MoodValue::_internal_applies_to_lyrics() const {
  return applies_to_lyrics_;
}
inline bool MoodValue::applies_to_lyrics() const {
  // @@protoc_insertion_point(field_get:mead101.mead.MoodValue.applies_to_lyrics)
  return _internal_applies_to_lyrics();
}
inline void MoodValue::_internal_set_applies_to_lyrics(bool value) {
  _has_bits_[0] |= 0x00000010u;
  applies_to_lyrics_ = value;
}
inline void MoodValue::set_applies_to_lyrics(bool value) {
  _internal_set_applies_to_lyrics(value);
  // @@protoc_insertion_point(field_set:mead101.mead.MoodValue.applies_to_lyrics)
}

// optional string namespace = 3;
inline bool MoodValue::_internal_has_namespace_() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MoodValue::has_namespace_() const {
  return _internal_has_namespace_();
}
inline void MoodValue::clear_namespace_() {
  namespace__.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MoodValue::namespace_() const {
  // @@protoc_insertion_point(field_get:mead101.mead.MoodValue.namespace)
  return _internal_namespace_();
}
inline void MoodValue::set_namespace_(const std::string& value) {
  _internal_set_namespace_(value);
  // @@protoc_insertion_point(field_set:mead101.mead.MoodValue.namespace)
}
inline std::string* MoodValue::mutable_namespace_() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.MoodValue.namespace)
  return _internal_mutable_namespace_();
}
inline const std::string& MoodValue::_internal_namespace_() const {
  return namespace__.Get();
}
inline void MoodValue::_internal_set_namespace_(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MoodValue::set_namespace_(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  namespace__.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.MoodValue.namespace)
}
inline void MoodValue::set_namespace_(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.MoodValue.namespace)
}
inline void MoodValue::set_namespace_(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.MoodValue.namespace)
}
inline std::string* MoodValue::_internal_mutable_namespace_() {
  _has_bits_[0] |= 0x00000001u;
  return namespace__.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MoodValue::release_namespace_() {
  // @@protoc_insertion_point(field_release:mead101.mead.MoodValue.namespace)
  if (!_internal_has_namespace_()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return namespace__.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MoodValue::set_allocated_namespace_(std::string* namespace_) {
  if (namespace_ != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  namespace__.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), namespace_,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.MoodValue.namespace)
}

// optional string user_defined_value = 4;
inline bool MoodValue::_internal_has_user_defined_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MoodValue::has_user_defined_value() const {
  return _internal_has_user_defined_value();
}
inline void MoodValue::clear_user_defined_value() {
  user_defined_value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& MoodValue::user_defined_value() const {
  // @@protoc_insertion_point(field_get:mead101.mead.MoodValue.user_defined_value)
  return _internal_user_defined_value();
}
inline void MoodValue::set_user_defined_value(const std::string& value) {
  _internal_set_user_defined_value(value);
  // @@protoc_insertion_point(field_set:mead101.mead.MoodValue.user_defined_value)
}
inline std::string* MoodValue::mutable_user_defined_value() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.MoodValue.user_defined_value)
  return _internal_mutable_user_defined_value();
}
inline const std::string& MoodValue::_internal_user_defined_value() const {
  return user_defined_value_.Get();
}
inline void MoodValue::_internal_set_user_defined_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MoodValue::set_user_defined_value(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  user_defined_value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.MoodValue.user_defined_value)
}
inline void MoodValue::set_user_defined_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.MoodValue.user_defined_value)
}
inline void MoodValue::set_user_defined_value(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.MoodValue.user_defined_value)
}
inline std::string* MoodValue::_internal_mutable_user_defined_value() {
  _has_bits_[0] |= 0x00000002u;
  return user_defined_value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MoodValue::release_user_defined_value() {
  // @@protoc_insertion_point(field_release:mead101.mead.MoodValue.user_defined_value)
  if (!_internal_has_user_defined_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return user_defined_value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MoodValue::set_allocated_user_defined_value(std::string* user_defined_value) {
  if (user_defined_value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  user_defined_value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_defined_value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.MoodValue.user_defined_value)
}

// optional .mead101.avs.MoodType ext_value = 5;
inline bool MoodValue::_internal_has_ext_value() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || ext_value_ != nullptr);
  return value;
}
inline bool MoodValue::has_ext_value() const {
  return _internal_has_ext_value();
}
inline const ::mead101::avs::MoodType& MoodValue::_internal_ext_value() const {
  const ::mead101::avs::MoodType* p = ext_value_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::avs::MoodType*>(
      &::mead101::avs::_MoodType_default_instance_);
}
inline const ::mead101::avs::MoodType& MoodValue::ext_value() const {
  // @@protoc_insertion_point(field_get:mead101.mead.MoodValue.ext_value)
  return _internal_ext_value();
}
inline void MoodValue::unsafe_arena_set_allocated_ext_value(
    ::mead101::avs::MoodType* ext_value) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext_value_);
  }
  ext_value_ = ext_value;
  if (ext_value) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.MoodValue.ext_value)
}
inline ::mead101::avs::MoodType* MoodValue::release_ext_value() {
  _has_bits_[0] &= ~0x00000004u;
  ::mead101::avs::MoodType* temp = ext_value_;
  ext_value_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::avs::MoodType* MoodValue::unsafe_arena_release_ext_value() {
  // @@protoc_insertion_point(field_release:mead101.mead.MoodValue.ext_value)
  _has_bits_[0] &= ~0x00000004u;
  ::mead101::avs::MoodType* temp = ext_value_;
  ext_value_ = nullptr;
  return temp;
}
inline ::mead101::avs::MoodType* MoodValue::_internal_mutable_ext_value() {
  _has_bits_[0] |= 0x00000004u;
  if (ext_value_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::avs::MoodType>(GetArena());
    ext_value_ = p;
  }
  return ext_value_;
}
inline ::mead101::avs::MoodType* MoodValue::mutable_ext_value() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.MoodValue.ext_value)
  return _internal_mutable_ext_value();
}
inline void MoodValue::set_allocated_ext_value(::mead101::avs::MoodType* ext_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext_value_);
  }
  if (ext_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext_value)->GetArena();
    if (message_arena != submessage_arena) {
      ext_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext_value, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  ext_value_ = ext_value;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.MoodValue.ext_value)
}

// -------------------------------------------------------------------

// MusicalWorkId

// repeated string composer_catalog_number = 1;
inline int MusicalWorkId::_internal_composer_catalog_number_size() const {
  return composer_catalog_number_.size();
}
inline int MusicalWorkId::composer_catalog_number_size() const {
  return _internal_composer_catalog_number_size();
}
inline void MusicalWorkId::clear_composer_catalog_number() {
  composer_catalog_number_.Clear();
}
inline std::string* MusicalWorkId::add_composer_catalog_number() {
  // @@protoc_insertion_point(field_add_mutable:mead101.mead.MusicalWorkId.composer_catalog_number)
  return _internal_add_composer_catalog_number();
}
inline const std::string& MusicalWorkId::_internal_composer_catalog_number(int index) const {
  return composer_catalog_number_.Get(index);
}
inline const std::string& MusicalWorkId::composer_catalog_number(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.MusicalWorkId.composer_catalog_number)
  return _internal_composer_catalog_number(index);
}
inline std::string* MusicalWorkId::mutable_composer_catalog_number(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.MusicalWorkId.composer_catalog_number)
  return composer_catalog_number_.Mutable(index);
}
inline void MusicalWorkId::set_composer_catalog_number(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:mead101.mead.MusicalWorkId.composer_catalog_number)
  composer_catalog_number_.Mutable(index)->assign(value);
}
inline void MusicalWorkId::set_composer_catalog_number(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:mead101.mead.MusicalWorkId.composer_catalog_number)
  composer_catalog_number_.Mutable(index)->assign(std::move(value));
}
inline void MusicalWorkId::set_composer_catalog_number(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  composer_catalog_number_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mead101.mead.MusicalWorkId.composer_catalog_number)
}
inline void MusicalWorkId::set_composer_catalog_number(int index, const char* value, size_t size) {
  composer_catalog_number_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.MusicalWorkId.composer_catalog_number)
}
inline std::string* MusicalWorkId::_internal_add_composer_catalog_number() {
  return composer_catalog_number_.Add();
}
inline void MusicalWorkId::add_composer_catalog_number(const std::string& value) {
  composer_catalog_number_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mead101.mead.MusicalWorkId.composer_catalog_number)
}
inline void MusicalWorkId::add_composer_catalog_number(std::string&& value) {
  composer_catalog_number_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:mead101.mead.MusicalWorkId.composer_catalog_number)
}
inline void MusicalWorkId::add_composer_catalog_number(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  composer_catalog_number_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mead101.mead.MusicalWorkId.composer_catalog_number)
}
inline void MusicalWorkId::add_composer_catalog_number(const char* value, size_t size) {
  composer_catalog_number_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mead101.mead.MusicalWorkId.composer_catalog_number)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
MusicalWorkId::composer_catalog_number() const {
  // @@protoc_insertion_point(field_list:mead101.mead.MusicalWorkId.composer_catalog_number)
  return composer_catalog_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
MusicalWorkId::mutable_composer_catalog_number() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.MusicalWorkId.composer_catalog_number)
  return &composer_catalog_number_;
}

// optional string i_s_w_c = 2;
inline bool MusicalWorkId::_internal_has_i_s_w_c() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MusicalWorkId::has_i_s_w_c() const {
  return _internal_has_i_s_w_c();
}
inline void MusicalWorkId::clear_i_s_w_c() {
  i_s_w_c_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MusicalWorkId::i_s_w_c() const {
  // @@protoc_insertion_point(field_get:mead101.mead.MusicalWorkId.i_s_w_c)
  return _internal_i_s_w_c();
}
inline void MusicalWorkId::set_i_s_w_c(const std::string& value) {
  _internal_set_i_s_w_c(value);
  // @@protoc_insertion_point(field_set:mead101.mead.MusicalWorkId.i_s_w_c)
}
inline std::string* MusicalWorkId::mutable_i_s_w_c() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.MusicalWorkId.i_s_w_c)
  return _internal_mutable_i_s_w_c();
}
inline const std::string& MusicalWorkId::_internal_i_s_w_c() const {
  return i_s_w_c_.Get();
}
inline void MusicalWorkId::_internal_set_i_s_w_c(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  i_s_w_c_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MusicalWorkId::set_i_s_w_c(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  i_s_w_c_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.MusicalWorkId.i_s_w_c)
}
inline void MusicalWorkId::set_i_s_w_c(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  i_s_w_c_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.MusicalWorkId.i_s_w_c)
}
inline void MusicalWorkId::set_i_s_w_c(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  i_s_w_c_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.MusicalWorkId.i_s_w_c)
}
inline std::string* MusicalWorkId::_internal_mutable_i_s_w_c() {
  _has_bits_[0] |= 0x00000001u;
  return i_s_w_c_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MusicalWorkId::release_i_s_w_c() {
  // @@protoc_insertion_point(field_release:mead101.mead.MusicalWorkId.i_s_w_c)
  if (!_internal_has_i_s_w_c()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return i_s_w_c_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MusicalWorkId::set_allocated_i_s_w_c(std::string* i_s_w_c) {
  if (i_s_w_c != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  i_s_w_c_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), i_s_w_c,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.MusicalWorkId.i_s_w_c)
}

// optional string opus_number = 3;
inline bool MusicalWorkId::_internal_has_opus_number() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MusicalWorkId::has_opus_number() const {
  return _internal_has_opus_number();
}
inline void MusicalWorkId::clear_opus_number() {
  opus_number_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& MusicalWorkId::opus_number() const {
  // @@protoc_insertion_point(field_get:mead101.mead.MusicalWorkId.opus_number)
  return _internal_opus_number();
}
inline void MusicalWorkId::set_opus_number(const std::string& value) {
  _internal_set_opus_number(value);
  // @@protoc_insertion_point(field_set:mead101.mead.MusicalWorkId.opus_number)
}
inline std::string* MusicalWorkId::mutable_opus_number() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.MusicalWorkId.opus_number)
  return _internal_mutable_opus_number();
}
inline const std::string& MusicalWorkId::_internal_opus_number() const {
  return opus_number_.Get();
}
inline void MusicalWorkId::_internal_set_opus_number(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  opus_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MusicalWorkId::set_opus_number(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  opus_number_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.MusicalWorkId.opus_number)
}
inline void MusicalWorkId::set_opus_number(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  opus_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.MusicalWorkId.opus_number)
}
inline void MusicalWorkId::set_opus_number(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  opus_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.MusicalWorkId.opus_number)
}
inline std::string* MusicalWorkId::_internal_mutable_opus_number() {
  _has_bits_[0] |= 0x00000002u;
  return opus_number_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MusicalWorkId::release_opus_number() {
  // @@protoc_insertion_point(field_release:mead101.mead.MusicalWorkId.opus_number)
  if (!_internal_has_opus_number()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return opus_number_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MusicalWorkId::set_allocated_opus_number(std::string* opus_number) {
  if (opus_number != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  opus_number_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), opus_number,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.MusicalWorkId.opus_number)
}

// repeated .mead101.mead.ProprietaryId proprietary_id = 4;
inline int MusicalWorkId::_internal_proprietary_id_size() const {
  return proprietary_id_.size();
}
inline int MusicalWorkId::proprietary_id_size() const {
  return _internal_proprietary_id_size();
}
inline void MusicalWorkId::clear_proprietary_id() {
  proprietary_id_.Clear();
}
inline ::mead101::mead::ProprietaryId* MusicalWorkId::mutable_proprietary_id(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.MusicalWorkId.proprietary_id)
  return proprietary_id_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::ProprietaryId >*
MusicalWorkId::mutable_proprietary_id() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.MusicalWorkId.proprietary_id)
  return &proprietary_id_;
}
inline const ::mead101::mead::ProprietaryId& MusicalWorkId::_internal_proprietary_id(int index) const {
  return proprietary_id_.Get(index);
}
inline const ::mead101::mead::ProprietaryId& MusicalWorkId::proprietary_id(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.MusicalWorkId.proprietary_id)
  return _internal_proprietary_id(index);
}
inline ::mead101::mead::ProprietaryId* MusicalWorkId::_internal_add_proprietary_id() {
  return proprietary_id_.Add();
}
inline ::mead101::mead::ProprietaryId* MusicalWorkId::add_proprietary_id() {
  // @@protoc_insertion_point(field_add:mead101.mead.MusicalWorkId.proprietary_id)
  return _internal_add_proprietary_id();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::ProprietaryId >&
MusicalWorkId::proprietary_id() const {
  // @@protoc_insertion_point(field_list:mead101.mead.MusicalWorkId.proprietary_id)
  return proprietary_id_;
}

// -------------------------------------------------------------------

// Name

// optional string language_and_script_code = 1;
inline bool Name::_internal_has_language_and_script_code() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Name::has_language_and_script_code() const {
  return _internal_has_language_and_script_code();
}
inline void Name::clear_language_and_script_code() {
  language_and_script_code_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Name::language_and_script_code() const {
  // @@protoc_insertion_point(field_get:mead101.mead.Name.language_and_script_code)
  return _internal_language_and_script_code();
}
inline void Name::set_language_and_script_code(const std::string& value) {
  _internal_set_language_and_script_code(value);
  // @@protoc_insertion_point(field_set:mead101.mead.Name.language_and_script_code)
}
inline std::string* Name::mutable_language_and_script_code() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Name.language_and_script_code)
  return _internal_mutable_language_and_script_code();
}
inline const std::string& Name::_internal_language_and_script_code() const {
  return language_and_script_code_.Get();
}
inline void Name::_internal_set_language_and_script_code(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  language_and_script_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Name::set_language_and_script_code(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  language_and_script_code_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.Name.language_and_script_code)
}
inline void Name::set_language_and_script_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  language_and_script_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.Name.language_and_script_code)
}
inline void Name::set_language_and_script_code(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  language_and_script_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.Name.language_and_script_code)
}
inline std::string* Name::_internal_mutable_language_and_script_code() {
  _has_bits_[0] |= 0x00000001u;
  return language_and_script_code_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Name::release_language_and_script_code() {
  // @@protoc_insertion_point(field_release:mead101.mead.Name.language_and_script_code)
  if (!_internal_has_language_and_script_code()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return language_and_script_code_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Name::set_allocated_language_and_script_code(std::string* language_and_script_code) {
  if (language_and_script_code != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  language_and_script_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), language_and_script_code,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.Name.language_and_script_code)
}

// optional string ext_value = 2;
inline bool Name::_internal_has_ext_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Name::has_ext_value() const {
  return _internal_has_ext_value();
}
inline void Name::clear_ext_value() {
  ext_value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Name::ext_value() const {
  // @@protoc_insertion_point(field_get:mead101.mead.Name.ext_value)
  return _internal_ext_value();
}
inline void Name::set_ext_value(const std::string& value) {
  _internal_set_ext_value(value);
  // @@protoc_insertion_point(field_set:mead101.mead.Name.ext_value)
}
inline std::string* Name::mutable_ext_value() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Name.ext_value)
  return _internal_mutable_ext_value();
}
inline const std::string& Name::_internal_ext_value() const {
  return ext_value_.Get();
}
inline void Name::_internal_set_ext_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  ext_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Name::set_ext_value(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  ext_value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.Name.ext_value)
}
inline void Name::set_ext_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  ext_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.Name.ext_value)
}
inline void Name::set_ext_value(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  ext_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.Name.ext_value)
}
inline std::string* Name::_internal_mutable_ext_value() {
  _has_bits_[0] |= 0x00000002u;
  return ext_value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Name::release_ext_value() {
  // @@protoc_insertion_point(field_release:mead101.mead.Name.ext_value)
  if (!_internal_has_ext_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return ext_value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Name::set_allocated_ext_value(std::string* ext_value) {
  if (ext_value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  ext_value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ext_value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.Name.ext_value)
}

// -------------------------------------------------------------------

// NameWithPronunciation

// optional string name = 1;
inline bool NameWithPronunciation::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool NameWithPronunciation::has_name() const {
  return _internal_has_name();
}
inline void NameWithPronunciation::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& NameWithPronunciation::name() const {
  // @@protoc_insertion_point(field_get:mead101.mead.NameWithPronunciation.name)
  return _internal_name();
}
inline void NameWithPronunciation::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:mead101.mead.NameWithPronunciation.name)
}
inline std::string* NameWithPronunciation::mutable_name() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.NameWithPronunciation.name)
  return _internal_mutable_name();
}
inline const std::string& NameWithPronunciation::_internal_name() const {
  return name_.Get();
}
inline void NameWithPronunciation::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void NameWithPronunciation::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.NameWithPronunciation.name)
}
inline void NameWithPronunciation::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.NameWithPronunciation.name)
}
inline void NameWithPronunciation::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.NameWithPronunciation.name)
}
inline std::string* NameWithPronunciation::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* NameWithPronunciation::release_name() {
  // @@protoc_insertion_point(field_release:mead101.mead.NameWithPronunciation.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NameWithPronunciation::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.NameWithPronunciation.name)
}

// repeated .mead101.mead.Pronunciation pronunciation = 2;
inline int NameWithPronunciation::_internal_pronunciation_size() const {
  return pronunciation_.size();
}
inline int NameWithPronunciation::pronunciation_size() const {
  return _internal_pronunciation_size();
}
inline void NameWithPronunciation::clear_pronunciation() {
  pronunciation_.Clear();
}
inline ::mead101::mead::Pronunciation* NameWithPronunciation::mutable_pronunciation(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.NameWithPronunciation.pronunciation)
  return pronunciation_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Pronunciation >*
NameWithPronunciation::mutable_pronunciation() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.NameWithPronunciation.pronunciation)
  return &pronunciation_;
}
inline const ::mead101::mead::Pronunciation& NameWithPronunciation::_internal_pronunciation(int index) const {
  return pronunciation_.Get(index);
}
inline const ::mead101::mead::Pronunciation& NameWithPronunciation::pronunciation(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.NameWithPronunciation.pronunciation)
  return _internal_pronunciation(index);
}
inline ::mead101::mead::Pronunciation* NameWithPronunciation::_internal_add_pronunciation() {
  return pronunciation_.Add();
}
inline ::mead101::mead::Pronunciation* NameWithPronunciation::add_pronunciation() {
  // @@protoc_insertion_point(field_add:mead101.mead.NameWithPronunciation.pronunciation)
  return _internal_add_pronunciation();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Pronunciation >&
NameWithPronunciation::pronunciation() const {
  // @@protoc_insertion_point(field_list:mead101.mead.NameWithPronunciation.pronunciation)
  return pronunciation_;
}

// -------------------------------------------------------------------

// NameWithPronunciationAndScriptCode

// optional .mead101.mead.Name name = 1;
inline bool NameWithPronunciationAndScriptCode::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || name_ != nullptr);
  return value;
}
inline bool NameWithPronunciationAndScriptCode::has_name() const {
  return _internal_has_name();
}
inline void NameWithPronunciationAndScriptCode::clear_name() {
  if (name_ != nullptr) name_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::mead101::mead::Name& NameWithPronunciationAndScriptCode::_internal_name() const {
  const ::mead101::mead::Name* p = name_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::Name*>(
      &::mead101::mead::_Name_default_instance_);
}
inline const ::mead101::mead::Name& NameWithPronunciationAndScriptCode::name() const {
  // @@protoc_insertion_point(field_get:mead101.mead.NameWithPronunciationAndScriptCode.name)
  return _internal_name();
}
inline void NameWithPronunciationAndScriptCode::unsafe_arena_set_allocated_name(
    ::mead101::mead::Name* name) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(name_);
  }
  name_ = name;
  if (name) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.NameWithPronunciationAndScriptCode.name)
}
inline ::mead101::mead::Name* NameWithPronunciationAndScriptCode::release_name() {
  _has_bits_[0] &= ~0x00000001u;
  ::mead101::mead::Name* temp = name_;
  name_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::Name* NameWithPronunciationAndScriptCode::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_release:mead101.mead.NameWithPronunciationAndScriptCode.name)
  _has_bits_[0] &= ~0x00000001u;
  ::mead101::mead::Name* temp = name_;
  name_ = nullptr;
  return temp;
}
inline ::mead101::mead::Name* NameWithPronunciationAndScriptCode::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  if (name_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::Name>(GetArena());
    name_ = p;
  }
  return name_;
}
inline ::mead101::mead::Name* NameWithPronunciationAndScriptCode::mutable_name() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.NameWithPronunciationAndScriptCode.name)
  return _internal_mutable_name();
}
inline void NameWithPronunciationAndScriptCode::set_allocated_name(::mead101::mead::Name* name) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete name_;
  }
  if (name) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(name);
    if (message_arena != submessage_arena) {
      name = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, name, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_ = name;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.NameWithPronunciationAndScriptCode.name)
}

// repeated .mead101.mead.Pronunciation pronunciation = 2;
inline int NameWithPronunciationAndScriptCode::_internal_pronunciation_size() const {
  return pronunciation_.size();
}
inline int NameWithPronunciationAndScriptCode::pronunciation_size() const {
  return _internal_pronunciation_size();
}
inline void NameWithPronunciationAndScriptCode::clear_pronunciation() {
  pronunciation_.Clear();
}
inline ::mead101::mead::Pronunciation* NameWithPronunciationAndScriptCode::mutable_pronunciation(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.NameWithPronunciationAndScriptCode.pronunciation)
  return pronunciation_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Pronunciation >*
NameWithPronunciationAndScriptCode::mutable_pronunciation() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.NameWithPronunciationAndScriptCode.pronunciation)
  return &pronunciation_;
}
inline const ::mead101::mead::Pronunciation& NameWithPronunciationAndScriptCode::_internal_pronunciation(int index) const {
  return pronunciation_.Get(index);
}
inline const ::mead101::mead::Pronunciation& NameWithPronunciationAndScriptCode::pronunciation(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.NameWithPronunciationAndScriptCode.pronunciation)
  return _internal_pronunciation(index);
}
inline ::mead101::mead::Pronunciation* NameWithPronunciationAndScriptCode::_internal_add_pronunciation() {
  return pronunciation_.Add();
}
inline ::mead101::mead::Pronunciation* NameWithPronunciationAndScriptCode::add_pronunciation() {
  // @@protoc_insertion_point(field_add:mead101.mead.NameWithPronunciationAndScriptCode.pronunciation)
  return _internal_add_pronunciation();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Pronunciation >&
NameWithPronunciationAndScriptCode::pronunciation() const {
  // @@protoc_insertion_point(field_list:mead101.mead.NameWithPronunciationAndScriptCode.pronunciation)
  return pronunciation_;
}

// -------------------------------------------------------------------

// Party

// optional string d_p_i_d = 1;
inline bool Party::_internal_has_d_p_i_d() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Party::has_d_p_i_d() const {
  return _internal_has_d_p_i_d();
}
inline void Party::clear_d_p_i_d() {
  d_p_i_d_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Party::d_p_i_d() const {
  // @@protoc_insertion_point(field_get:mead101.mead.Party.d_p_i_d)
  return _internal_d_p_i_d();
}
inline void Party::set_d_p_i_d(const std::string& value) {
  _internal_set_d_p_i_d(value);
  // @@protoc_insertion_point(field_set:mead101.mead.Party.d_p_i_d)
}
inline std::string* Party::mutable_d_p_i_d() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Party.d_p_i_d)
  return _internal_mutable_d_p_i_d();
}
inline const std::string& Party::_internal_d_p_i_d() const {
  return d_p_i_d_.Get();
}
inline void Party::_internal_set_d_p_i_d(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  d_p_i_d_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Party::set_d_p_i_d(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  d_p_i_d_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.Party.d_p_i_d)
}
inline void Party::set_d_p_i_d(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  d_p_i_d_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.Party.d_p_i_d)
}
inline void Party::set_d_p_i_d(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  d_p_i_d_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.Party.d_p_i_d)
}
inline std::string* Party::_internal_mutable_d_p_i_d() {
  _has_bits_[0] |= 0x00000001u;
  return d_p_i_d_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Party::release_d_p_i_d() {
  // @@protoc_insertion_point(field_release:mead101.mead.Party.d_p_i_d)
  if (!_internal_has_d_p_i_d()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return d_p_i_d_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Party::set_allocated_d_p_i_d(std::string* d_p_i_d) {
  if (d_p_i_d != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  d_p_i_d_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), d_p_i_d,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.Party.d_p_i_d)
}

// optional string i_p_n = 2;
inline bool Party::_internal_has_i_p_n() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Party::has_i_p_n() const {
  return _internal_has_i_p_n();
}
inline void Party::clear_i_p_n() {
  i_p_n_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Party::i_p_n() const {
  // @@protoc_insertion_point(field_get:mead101.mead.Party.i_p_n)
  return _internal_i_p_n();
}
inline void Party::set_i_p_n(const std::string& value) {
  _internal_set_i_p_n(value);
  // @@protoc_insertion_point(field_set:mead101.mead.Party.i_p_n)
}
inline std::string* Party::mutable_i_p_n() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Party.i_p_n)
  return _internal_mutable_i_p_n();
}
inline const std::string& Party::_internal_i_p_n() const {
  return i_p_n_.Get();
}
inline void Party::_internal_set_i_p_n(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  i_p_n_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Party::set_i_p_n(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  i_p_n_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.Party.i_p_n)
}
inline void Party::set_i_p_n(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  i_p_n_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.Party.i_p_n)
}
inline void Party::set_i_p_n(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  i_p_n_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.Party.i_p_n)
}
inline std::string* Party::_internal_mutable_i_p_n() {
  _has_bits_[0] |= 0x00000002u;
  return i_p_n_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Party::release_i_p_n() {
  // @@protoc_insertion_point(field_release:mead101.mead.Party.i_p_n)
  if (!_internal_has_i_p_n()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return i_p_n_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Party::set_allocated_i_p_n(std::string* i_p_n) {
  if (i_p_n != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  i_p_n_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), i_p_n,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.Party.i_p_n)
}

// optional string i_s_n_i = 3;
inline bool Party::_internal_has_i_s_n_i() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Party::has_i_s_n_i() const {
  return _internal_has_i_s_n_i();
}
inline void Party::clear_i_s_n_i() {
  i_s_n_i_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Party::i_s_n_i() const {
  // @@protoc_insertion_point(field_get:mead101.mead.Party.i_s_n_i)
  return _internal_i_s_n_i();
}
inline void Party::set_i_s_n_i(const std::string& value) {
  _internal_set_i_s_n_i(value);
  // @@protoc_insertion_point(field_set:mead101.mead.Party.i_s_n_i)
}
inline std::string* Party::mutable_i_s_n_i() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Party.i_s_n_i)
  return _internal_mutable_i_s_n_i();
}
inline const std::string& Party::_internal_i_s_n_i() const {
  return i_s_n_i_.Get();
}
inline void Party::_internal_set_i_s_n_i(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  i_s_n_i_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Party::set_i_s_n_i(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  i_s_n_i_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.Party.i_s_n_i)
}
inline void Party::set_i_s_n_i(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  i_s_n_i_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.Party.i_s_n_i)
}
inline void Party::set_i_s_n_i(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  i_s_n_i_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.Party.i_s_n_i)
}
inline std::string* Party::_internal_mutable_i_s_n_i() {
  _has_bits_[0] |= 0x00000004u;
  return i_s_n_i_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Party::release_i_s_n_i() {
  // @@protoc_insertion_point(field_release:mead101.mead.Party.i_s_n_i)
  if (!_internal_has_i_s_n_i()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return i_s_n_i_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Party::set_allocated_i_s_n_i(std::string* i_s_n_i) {
  if (i_s_n_i != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  i_s_n_i_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), i_s_n_i,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.Party.i_s_n_i)
}

// optional string ipi_name_number = 4;
inline bool Party::_internal_has_ipi_name_number() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Party::has_ipi_name_number() const {
  return _internal_has_ipi_name_number();
}
inline void Party::clear_ipi_name_number() {
  ipi_name_number_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& Party::ipi_name_number() const {
  // @@protoc_insertion_point(field_get:mead101.mead.Party.ipi_name_number)
  return _internal_ipi_name_number();
}
inline void Party::set_ipi_name_number(const std::string& value) {
  _internal_set_ipi_name_number(value);
  // @@protoc_insertion_point(field_set:mead101.mead.Party.ipi_name_number)
}
inline std::string* Party::mutable_ipi_name_number() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Party.ipi_name_number)
  return _internal_mutable_ipi_name_number();
}
inline const std::string& Party::_internal_ipi_name_number() const {
  return ipi_name_number_.Get();
}
inline void Party::_internal_set_ipi_name_number(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  ipi_name_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Party::set_ipi_name_number(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  ipi_name_number_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.Party.ipi_name_number)
}
inline void Party::set_ipi_name_number(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  ipi_name_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.Party.ipi_name_number)
}
inline void Party::set_ipi_name_number(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  ipi_name_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.Party.ipi_name_number)
}
inline std::string* Party::_internal_mutable_ipi_name_number() {
  _has_bits_[0] |= 0x00000008u;
  return ipi_name_number_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Party::release_ipi_name_number() {
  // @@protoc_insertion_point(field_release:mead101.mead.Party.ipi_name_number)
  if (!_internal_has_ipi_name_number()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return ipi_name_number_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Party::set_allocated_ipi_name_number(std::string* ipi_name_number) {
  if (ipi_name_number != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  ipi_name_number_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ipi_name_number,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.Party.ipi_name_number)
}

// optional string party_name = 5;
inline bool Party::_internal_has_party_name() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Party::has_party_name() const {
  return _internal_has_party_name();
}
inline void Party::clear_party_name() {
  party_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& Party::party_name() const {
  // @@protoc_insertion_point(field_get:mead101.mead.Party.party_name)
  return _internal_party_name();
}
inline void Party::set_party_name(const std::string& value) {
  _internal_set_party_name(value);
  // @@protoc_insertion_point(field_set:mead101.mead.Party.party_name)
}
inline std::string* Party::mutable_party_name() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Party.party_name)
  return _internal_mutable_party_name();
}
inline const std::string& Party::_internal_party_name() const {
  return party_name_.Get();
}
inline void Party::_internal_set_party_name(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  party_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Party::set_party_name(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  party_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.Party.party_name)
}
inline void Party::set_party_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  party_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.Party.party_name)
}
inline void Party::set_party_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  party_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.Party.party_name)
}
inline std::string* Party::_internal_mutable_party_name() {
  _has_bits_[0] |= 0x00000010u;
  return party_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Party::release_party_name() {
  // @@protoc_insertion_point(field_release:mead101.mead.Party.party_name)
  if (!_internal_has_party_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return party_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Party::set_allocated_party_name(std::string* party_name) {
  if (party_name != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  party_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), party_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.Party.party_name)
}

// repeated .mead101.mead.ProprietaryId proprietary_id = 6;
inline int Party::_internal_proprietary_id_size() const {
  return proprietary_id_.size();
}
inline int Party::proprietary_id_size() const {
  return _internal_proprietary_id_size();
}
inline void Party::clear_proprietary_id() {
  proprietary_id_.Clear();
}
inline ::mead101::mead::ProprietaryId* Party::mutable_proprietary_id(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Party.proprietary_id)
  return proprietary_id_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::ProprietaryId >*
Party::mutable_proprietary_id() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.Party.proprietary_id)
  return &proprietary_id_;
}
inline const ::mead101::mead::ProprietaryId& Party::_internal_proprietary_id(int index) const {
  return proprietary_id_.Get(index);
}
inline const ::mead101::mead::ProprietaryId& Party::proprietary_id(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.Party.proprietary_id)
  return _internal_proprietary_id(index);
}
inline ::mead101::mead::ProprietaryId* Party::_internal_add_proprietary_id() {
  return proprietary_id_.Add();
}
inline ::mead101::mead::ProprietaryId* Party::add_proprietary_id() {
  // @@protoc_insertion_point(field_add:mead101.mead.Party.proprietary_id)
  return _internal_add_proprietary_id();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::ProprietaryId >&
Party::proprietary_id() const {
  // @@protoc_insertion_point(field_list:mead101.mead.Party.proprietary_id)
  return proprietary_id_;
}

// -------------------------------------------------------------------

// PartyDescriptor

// repeated .mead101.mead.DetailedPartyId party_id = 1;
inline int PartyDescriptor::_internal_party_id_size() const {
  return party_id_.size();
}
inline int PartyDescriptor::party_id_size() const {
  return _internal_party_id_size();
}
inline void PartyDescriptor::clear_party_id() {
  party_id_.Clear();
}
inline ::mead101::mead::DetailedPartyId* PartyDescriptor::mutable_party_id(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.PartyDescriptor.party_id)
  return party_id_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::DetailedPartyId >*
PartyDescriptor::mutable_party_id() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.PartyDescriptor.party_id)
  return &party_id_;
}
inline const ::mead101::mead::DetailedPartyId& PartyDescriptor::_internal_party_id(int index) const {
  return party_id_.Get(index);
}
inline const ::mead101::mead::DetailedPartyId& PartyDescriptor::party_id(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.PartyDescriptor.party_id)
  return _internal_party_id(index);
}
inline ::mead101::mead::DetailedPartyId* PartyDescriptor::_internal_add_party_id() {
  return party_id_.Add();
}
inline ::mead101::mead::DetailedPartyId* PartyDescriptor::add_party_id() {
  // @@protoc_insertion_point(field_add:mead101.mead.PartyDescriptor.party_id)
  return _internal_add_party_id();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::DetailedPartyId >&
PartyDescriptor::party_id() const {
  // @@protoc_insertion_point(field_list:mead101.mead.PartyDescriptor.party_id)
  return party_id_;
}

// repeated .mead101.mead.PartyName party_name = 2;
inline int PartyDescriptor::_internal_party_name_size() const {
  return party_name_.size();
}
inline int PartyDescriptor::party_name_size() const {
  return _internal_party_name_size();
}
inline void PartyDescriptor::clear_party_name() {
  party_name_.Clear();
}
inline ::mead101::mead::PartyName* PartyDescriptor::mutable_party_name(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.PartyDescriptor.party_name)
  return party_name_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::PartyName >*
PartyDescriptor::mutable_party_name() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.PartyDescriptor.party_name)
  return &party_name_;
}
inline const ::mead101::mead::PartyName& PartyDescriptor::_internal_party_name(int index) const {
  return party_name_.Get(index);
}
inline const ::mead101::mead::PartyName& PartyDescriptor::party_name(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.PartyDescriptor.party_name)
  return _internal_party_name(index);
}
inline ::mead101::mead::PartyName* PartyDescriptor::_internal_add_party_name() {
  return party_name_.Add();
}
inline ::mead101::mead::PartyName* PartyDescriptor::add_party_name() {
  // @@protoc_insertion_point(field_add:mead101.mead.PartyDescriptor.party_name)
  return _internal_add_party_name();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::PartyName >&
PartyDescriptor::party_name() const {
  // @@protoc_insertion_point(field_list:mead101.mead.PartyDescriptor.party_name)
  return party_name_;
}

// -------------------------------------------------------------------

// PartyInformation

// repeated .mead101.mead.ArtistType artist_type = 1;
inline int PartyInformation::_internal_artist_type_size() const {
  return artist_type_.size();
}
inline int PartyInformation::artist_type_size() const {
  return _internal_artist_type_size();
}
inline void PartyInformation::clear_artist_type() {
  artist_type_.Clear();
}
inline ::mead101::mead::ArtistType* PartyInformation::mutable_artist_type(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.PartyInformation.artist_type)
  return artist_type_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::ArtistType >*
PartyInformation::mutable_artist_type() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.PartyInformation.artist_type)
  return &artist_type_;
}
inline const ::mead101::mead::ArtistType& PartyInformation::_internal_artist_type(int index) const {
  return artist_type_.Get(index);
}
inline const ::mead101::mead::ArtistType& PartyInformation::artist_type(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.PartyInformation.artist_type)
  return _internal_artist_type(index);
}
inline ::mead101::mead::ArtistType* PartyInformation::_internal_add_artist_type() {
  return artist_type_.Add();
}
inline ::mead101::mead::ArtistType* PartyInformation::add_artist_type() {
  // @@protoc_insertion_point(field_add:mead101.mead.PartyInformation.artist_type)
  return _internal_add_artist_type();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::ArtistType >&
PartyInformation::artist_type() const {
  // @@protoc_insertion_point(field_list:mead101.mead.PartyInformation.artist_type)
  return artist_type_;
}

// repeated .mead101.mead.ArtisticInfluence artistic_influence = 2;
inline int PartyInformation::_internal_artistic_influence_size() const {
  return artistic_influence_.size();
}
inline int PartyInformation::artistic_influence_size() const {
  return _internal_artistic_influence_size();
}
inline void PartyInformation::clear_artistic_influence() {
  artistic_influence_.Clear();
}
inline ::mead101::mead::ArtisticInfluence* PartyInformation::mutable_artistic_influence(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.PartyInformation.artistic_influence)
  return artistic_influence_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::ArtisticInfluence >*
PartyInformation::mutable_artistic_influence() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.PartyInformation.artistic_influence)
  return &artistic_influence_;
}
inline const ::mead101::mead::ArtisticInfluence& PartyInformation::_internal_artistic_influence(int index) const {
  return artistic_influence_.Get(index);
}
inline const ::mead101::mead::ArtisticInfluence& PartyInformation::artistic_influence(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.PartyInformation.artistic_influence)
  return _internal_artistic_influence(index);
}
inline ::mead101::mead::ArtisticInfluence* PartyInformation::_internal_add_artistic_influence() {
  return artistic_influence_.Add();
}
inline ::mead101::mead::ArtisticInfluence* PartyInformation::add_artistic_influence() {
  // @@protoc_insertion_point(field_add:mead101.mead.PartyInformation.artistic_influence)
  return _internal_add_artistic_influence();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::ArtisticInfluence >&
PartyInformation::artistic_influence() const {
  // @@protoc_insertion_point(field_list:mead101.mead.PartyInformation.artistic_influence)
  return artistic_influence_;
}

// repeated .mead101.mead.AwardForParty award = 3;
inline int PartyInformation::_internal_award_size() const {
  return award_.size();
}
inline int PartyInformation::award_size() const {
  return _internal_award_size();
}
inline void PartyInformation::clear_award() {
  award_.Clear();
}
inline ::mead101::mead::AwardForParty* PartyInformation::mutable_award(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.PartyInformation.award)
  return award_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::AwardForParty >*
PartyInformation::mutable_award() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.PartyInformation.award)
  return &award_;
}
inline const ::mead101::mead::AwardForParty& PartyInformation::_internal_award(int index) const {
  return award_.Get(index);
}
inline const ::mead101::mead::AwardForParty& PartyInformation::award(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.PartyInformation.award)
  return _internal_award(index);
}
inline ::mead101::mead::AwardForParty* PartyInformation::_internal_add_award() {
  return award_.Add();
}
inline ::mead101::mead::AwardForParty* PartyInformation::add_award() {
  // @@protoc_insertion_point(field_add:mead101.mead.PartyInformation.award)
  return _internal_add_award();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::AwardForParty >&
PartyInformation::award() const {
  // @@protoc_insertion_point(field_list:mead101.mead.PartyInformation.award)
  return award_;
}

// repeated .mead101.mead.Biography biography = 4;
inline int PartyInformation::_internal_biography_size() const {
  return biography_.size();
}
inline int PartyInformation::biography_size() const {
  return _internal_biography_size();
}
inline void PartyInformation::clear_biography() {
  biography_.Clear();
}
inline ::mead101::mead::Biography* PartyInformation::mutable_biography(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.PartyInformation.biography)
  return biography_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Biography >*
PartyInformation::mutable_biography() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.PartyInformation.biography)
  return &biography_;
}
inline const ::mead101::mead::Biography& PartyInformation::_internal_biography(int index) const {
  return biography_.Get(index);
}
inline const ::mead101::mead::Biography& PartyInformation::biography(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.PartyInformation.biography)
  return _internal_biography(index);
}
inline ::mead101::mead::Biography* PartyInformation::_internal_add_biography() {
  return biography_.Add();
}
inline ::mead101::mead::Biography* PartyInformation::add_biography() {
  // @@protoc_insertion_point(field_add:mead101.mead.PartyInformation.biography)
  return _internal_add_biography();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Biography >&
PartyInformation::biography() const {
  // @@protoc_insertion_point(field_list:mead101.mead.PartyInformation.biography)
  return biography_;
}

// optional .mead101.mead.ClassicalPeriod classical_period = 5;
inline bool PartyInformation::_internal_has_classical_period() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || classical_period_ != nullptr);
  return value;
}
inline bool PartyInformation::has_classical_period() const {
  return _internal_has_classical_period();
}
inline void PartyInformation::clear_classical_period() {
  if (classical_period_ != nullptr) classical_period_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::mead101::mead::ClassicalPeriod& PartyInformation::_internal_classical_period() const {
  const ::mead101::mead::ClassicalPeriod* p = classical_period_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::ClassicalPeriod*>(
      &::mead101::mead::_ClassicalPeriod_default_instance_);
}
inline const ::mead101::mead::ClassicalPeriod& PartyInformation::classical_period() const {
  // @@protoc_insertion_point(field_get:mead101.mead.PartyInformation.classical_period)
  return _internal_classical_period();
}
inline void PartyInformation::unsafe_arena_set_allocated_classical_period(
    ::mead101::mead::ClassicalPeriod* classical_period) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(classical_period_);
  }
  classical_period_ = classical_period;
  if (classical_period) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.PartyInformation.classical_period)
}
inline ::mead101::mead::ClassicalPeriod* PartyInformation::release_classical_period() {
  _has_bits_[0] &= ~0x00000001u;
  ::mead101::mead::ClassicalPeriod* temp = classical_period_;
  classical_period_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::ClassicalPeriod* PartyInformation::unsafe_arena_release_classical_period() {
  // @@protoc_insertion_point(field_release:mead101.mead.PartyInformation.classical_period)
  _has_bits_[0] &= ~0x00000001u;
  ::mead101::mead::ClassicalPeriod* temp = classical_period_;
  classical_period_ = nullptr;
  return temp;
}
inline ::mead101::mead::ClassicalPeriod* PartyInformation::_internal_mutable_classical_period() {
  _has_bits_[0] |= 0x00000001u;
  if (classical_period_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::ClassicalPeriod>(GetArena());
    classical_period_ = p;
  }
  return classical_period_;
}
inline ::mead101::mead::ClassicalPeriod* PartyInformation::mutable_classical_period() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.PartyInformation.classical_period)
  return _internal_mutable_classical_period();
}
inline void PartyInformation::set_allocated_classical_period(::mead101::mead::ClassicalPeriod* classical_period) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete classical_period_;
  }
  if (classical_period) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(classical_period);
    if (message_arena != submessage_arena) {
      classical_period = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, classical_period, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  classical_period_ = classical_period;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.PartyInformation.classical_period)
}

// repeated .mead101.mead.CommentaryNote commentary_note = 6;
inline int PartyInformation::_internal_commentary_note_size() const {
  return commentary_note_.size();
}
inline int PartyInformation::commentary_note_size() const {
  return _internal_commentary_note_size();
}
inline void PartyInformation::clear_commentary_note() {
  commentary_note_.Clear();
}
inline ::mead101::mead::CommentaryNote* PartyInformation::mutable_commentary_note(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.PartyInformation.commentary_note)
  return commentary_note_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::CommentaryNote >*
PartyInformation::mutable_commentary_note() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.PartyInformation.commentary_note)
  return &commentary_note_;
}
inline const ::mead101::mead::CommentaryNote& PartyInformation::_internal_commentary_note(int index) const {
  return commentary_note_.Get(index);
}
inline const ::mead101::mead::CommentaryNote& PartyInformation::commentary_note(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.PartyInformation.commentary_note)
  return _internal_commentary_note(index);
}
inline ::mead101::mead::CommentaryNote* PartyInformation::_internal_add_commentary_note() {
  return commentary_note_.Add();
}
inline ::mead101::mead::CommentaryNote* PartyInformation::add_commentary_note() {
  // @@protoc_insertion_point(field_add:mead101.mead.PartyInformation.commentary_note)
  return _internal_add_commentary_note();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::CommentaryNote >&
PartyInformation::commentary_note() const {
  // @@protoc_insertion_point(field_list:mead101.mead.PartyInformation.commentary_note)
  return commentary_note_;
}

// repeated .mead101.mead.Epoch epoch = 7;
inline int PartyInformation::_internal_epoch_size() const {
  return epoch_.size();
}
inline int PartyInformation::epoch_size() const {
  return _internal_epoch_size();
}
inline void PartyInformation::clear_epoch() {
  epoch_.Clear();
}
inline ::mead101::mead::Epoch* PartyInformation::mutable_epoch(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.PartyInformation.epoch)
  return epoch_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Epoch >*
PartyInformation::mutable_epoch() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.PartyInformation.epoch)
  return &epoch_;
}
inline const ::mead101::mead::Epoch& PartyInformation::_internal_epoch(int index) const {
  return epoch_.Get(index);
}
inline const ::mead101::mead::Epoch& PartyInformation::epoch(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.PartyInformation.epoch)
  return _internal_epoch(index);
}
inline ::mead101::mead::Epoch* PartyInformation::_internal_add_epoch() {
  return epoch_.Add();
}
inline ::mead101::mead::Epoch* PartyInformation::add_epoch() {
  // @@protoc_insertion_point(field_add:mead101.mead.PartyInformation.epoch)
  return _internal_add_epoch();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Epoch >&
PartyInformation::epoch() const {
  // @@protoc_insertion_point(field_list:mead101.mead.PartyInformation.epoch)
  return epoch_;
}

// repeated .mead101.mead.FocusTrack focus_track = 8;
inline int PartyInformation::_internal_focus_track_size() const {
  return focus_track_.size();
}
inline int PartyInformation::focus_track_size() const {
  return _internal_focus_track_size();
}
inline void PartyInformation::clear_focus_track() {
  focus_track_.Clear();
}
inline ::mead101::mead::FocusTrack* PartyInformation::mutable_focus_track(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.PartyInformation.focus_track)
  return focus_track_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::FocusTrack >*
PartyInformation::mutable_focus_track() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.PartyInformation.focus_track)
  return &focus_track_;
}
inline const ::mead101::mead::FocusTrack& PartyInformation::_internal_focus_track(int index) const {
  return focus_track_.Get(index);
}
inline const ::mead101::mead::FocusTrack& PartyInformation::focus_track(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.PartyInformation.focus_track)
  return _internal_focus_track(index);
}
inline ::mead101::mead::FocusTrack* PartyInformation::_internal_add_focus_track() {
  return focus_track_.Add();
}
inline ::mead101::mead::FocusTrack* PartyInformation::add_focus_track() {
  // @@protoc_insertion_point(field_add:mead101.mead.PartyInformation.focus_track)
  return _internal_add_focus_track();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::FocusTrack >&
PartyInformation::focus_track() const {
  // @@protoc_insertion_point(field_list:mead101.mead.PartyInformation.focus_track)
  return focus_track_;
}

// repeated .mead101.mead.HistoricChartingInformationForParty historic_charting_information = 9;
inline int PartyInformation::_internal_historic_charting_information_size() const {
  return historic_charting_information_.size();
}
inline int PartyInformation::historic_charting_information_size() const {
  return _internal_historic_charting_information_size();
}
inline void PartyInformation::clear_historic_charting_information() {
  historic_charting_information_.Clear();
}
inline ::mead101::mead::HistoricChartingInformationForParty* PartyInformation::mutable_historic_charting_information(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.PartyInformation.historic_charting_information)
  return historic_charting_information_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::HistoricChartingInformationForParty >*
PartyInformation::mutable_historic_charting_information() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.PartyInformation.historic_charting_information)
  return &historic_charting_information_;
}
inline const ::mead101::mead::HistoricChartingInformationForParty& PartyInformation::_internal_historic_charting_information(int index) const {
  return historic_charting_information_.Get(index);
}
inline const ::mead101::mead::HistoricChartingInformationForParty& PartyInformation::historic_charting_information(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.PartyInformation.historic_charting_information)
  return _internal_historic_charting_information(index);
}
inline ::mead101::mead::HistoricChartingInformationForParty* PartyInformation::_internal_add_historic_charting_information() {
  return historic_charting_information_.Add();
}
inline ::mead101::mead::HistoricChartingInformationForParty* PartyInformation::add_historic_charting_information() {
  // @@protoc_insertion_point(field_add:mead101.mead.PartyInformation.historic_charting_information)
  return _internal_add_historic_charting_information();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::HistoricChartingInformationForParty >&
PartyInformation::historic_charting_information() const {
  // @@protoc_insertion_point(field_list:mead101.mead.PartyInformation.historic_charting_information)
  return historic_charting_information_;
}

// repeated .mead101.mead.Image image = 10;
inline int PartyInformation::_internal_image_size() const {
  return image_.size();
}
inline int PartyInformation::image_size() const {
  return _internal_image_size();
}
inline void PartyInformation::clear_image() {
  image_.Clear();
}
inline ::mead101::mead::Image* PartyInformation::mutable_image(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.PartyInformation.image)
  return image_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Image >*
PartyInformation::mutable_image() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.PartyInformation.image)
  return &image_;
}
inline const ::mead101::mead::Image& PartyInformation::_internal_image(int index) const {
  return image_.Get(index);
}
inline const ::mead101::mead::Image& PartyInformation::image(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.PartyInformation.image)
  return _internal_image(index);
}
inline ::mead101::mead::Image* PartyInformation::_internal_add_image() {
  return image_.Add();
}
inline ::mead101::mead::Image* PartyInformation::add_image() {
  // @@protoc_insertion_point(field_add:mead101.mead.PartyInformation.image)
  return _internal_add_image();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Image >&
PartyInformation::image() const {
  // @@protoc_insertion_point(field_list:mead101.mead.PartyInformation.image)
  return image_;
}

// repeated .mead101.mead.SimilarParty is_similar = 11;
inline int PartyInformation::_internal_is_similar_size() const {
  return is_similar_.size();
}
inline int PartyInformation::is_similar_size() const {
  return _internal_is_similar_size();
}
inline void PartyInformation::clear_is_similar() {
  is_similar_.Clear();
}
inline ::mead101::mead::SimilarParty* PartyInformation::mutable_is_similar(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.PartyInformation.is_similar)
  return is_similar_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::SimilarParty >*
PartyInformation::mutable_is_similar() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.PartyInformation.is_similar)
  return &is_similar_;
}
inline const ::mead101::mead::SimilarParty& PartyInformation::_internal_is_similar(int index) const {
  return is_similar_.Get(index);
}
inline const ::mead101::mead::SimilarParty& PartyInformation::is_similar(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.PartyInformation.is_similar)
  return _internal_is_similar(index);
}
inline ::mead101::mead::SimilarParty* PartyInformation::_internal_add_is_similar() {
  return is_similar_.Add();
}
inline ::mead101::mead::SimilarParty* PartyInformation::add_is_similar() {
  // @@protoc_insertion_point(field_add:mead101.mead.PartyInformation.is_similar)
  return _internal_add_is_similar();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::SimilarParty >&
PartyInformation::is_similar() const {
  // @@protoc_insertion_point(field_list:mead101.mead.PartyInformation.is_similar)
  return is_similar_;
}

// optional .mead101.mead.PartyWithNames party = 12;
inline bool PartyInformation::_internal_has_party() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || party_ != nullptr);
  return value;
}
inline bool PartyInformation::has_party() const {
  return _internal_has_party();
}
inline void PartyInformation::clear_party() {
  if (party_ != nullptr) party_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::mead101::mead::PartyWithNames& PartyInformation::_internal_party() const {
  const ::mead101::mead::PartyWithNames* p = party_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::PartyWithNames*>(
      &::mead101::mead::_PartyWithNames_default_instance_);
}
inline const ::mead101::mead::PartyWithNames& PartyInformation::party() const {
  // @@protoc_insertion_point(field_get:mead101.mead.PartyInformation.party)
  return _internal_party();
}
inline void PartyInformation::unsafe_arena_set_allocated_party(
    ::mead101::mead::PartyWithNames* party) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(party_);
  }
  party_ = party;
  if (party) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.PartyInformation.party)
}
inline ::mead101::mead::PartyWithNames* PartyInformation::release_party() {
  _has_bits_[0] &= ~0x00000002u;
  ::mead101::mead::PartyWithNames* temp = party_;
  party_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::PartyWithNames* PartyInformation::unsafe_arena_release_party() {
  // @@protoc_insertion_point(field_release:mead101.mead.PartyInformation.party)
  _has_bits_[0] &= ~0x00000002u;
  ::mead101::mead::PartyWithNames* temp = party_;
  party_ = nullptr;
  return temp;
}
inline ::mead101::mead::PartyWithNames* PartyInformation::_internal_mutable_party() {
  _has_bits_[0] |= 0x00000002u;
  if (party_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::PartyWithNames>(GetArena());
    party_ = p;
  }
  return party_;
}
inline ::mead101::mead::PartyWithNames* PartyInformation::mutable_party() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.PartyInformation.party)
  return _internal_mutable_party();
}
inline void PartyInformation::set_allocated_party(::mead101::mead::PartyWithNames* party) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete party_;
  }
  if (party) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(party);
    if (message_arena != submessage_arena) {
      party = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, party, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  party_ = party;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.PartyInformation.party)
}

// repeated .mead101.mead.Pseudonym pseudonym = 13;
inline int PartyInformation::_internal_pseudonym_size() const {
  return pseudonym_.size();
}
inline int PartyInformation::pseudonym_size() const {
  return _internal_pseudonym_size();
}
inline void PartyInformation::clear_pseudonym() {
  pseudonym_.Clear();
}
inline ::mead101::mead::Pseudonym* PartyInformation::mutable_pseudonym(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.PartyInformation.pseudonym)
  return pseudonym_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Pseudonym >*
PartyInformation::mutable_pseudonym() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.PartyInformation.pseudonym)
  return &pseudonym_;
}
inline const ::mead101::mead::Pseudonym& PartyInformation::_internal_pseudonym(int index) const {
  return pseudonym_.Get(index);
}
inline const ::mead101::mead::Pseudonym& PartyInformation::pseudonym(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.PartyInformation.pseudonym)
  return _internal_pseudonym(index);
}
inline ::mead101::mead::Pseudonym* PartyInformation::_internal_add_pseudonym() {
  return pseudonym_.Add();
}
inline ::mead101::mead::Pseudonym* PartyInformation::add_pseudonym() {
  // @@protoc_insertion_point(field_add:mead101.mead.PartyInformation.pseudonym)
  return _internal_add_pseudonym();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Pseudonym >&
PartyInformation::pseudonym() const {
  // @@protoc_insertion_point(field_list:mead101.mead.PartyInformation.pseudonym)
  return pseudonym_;
}

// repeated .mead101.mead.RelatedCreation related_creation = 14;
inline int PartyInformation::_internal_related_creation_size() const {
  return related_creation_.size();
}
inline int PartyInformation::related_creation_size() const {
  return _internal_related_creation_size();
}
inline void PartyInformation::clear_related_creation() {
  related_creation_.Clear();
}
inline ::mead101::mead::RelatedCreation* PartyInformation::mutable_related_creation(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.PartyInformation.related_creation)
  return related_creation_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::RelatedCreation >*
PartyInformation::mutable_related_creation() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.PartyInformation.related_creation)
  return &related_creation_;
}
inline const ::mead101::mead::RelatedCreation& PartyInformation::_internal_related_creation(int index) const {
  return related_creation_.Get(index);
}
inline const ::mead101::mead::RelatedCreation& PartyInformation::related_creation(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.PartyInformation.related_creation)
  return _internal_related_creation(index);
}
inline ::mead101::mead::RelatedCreation* PartyInformation::_internal_add_related_creation() {
  return related_creation_.Add();
}
inline ::mead101::mead::RelatedCreation* PartyInformation::add_related_creation() {
  // @@protoc_insertion_point(field_add:mead101.mead.PartyInformation.related_creation)
  return _internal_add_related_creation();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::RelatedCreation >&
PartyInformation::related_creation() const {
  // @@protoc_insertion_point(field_list:mead101.mead.PartyInformation.related_creation)
  return related_creation_;
}

// optional .mead101.mead.VocalRegister vocal_register = 15;
inline bool PartyInformation::_internal_has_vocal_register() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || vocal_register_ != nullptr);
  return value;
}
inline bool PartyInformation::has_vocal_register() const {
  return _internal_has_vocal_register();
}
inline void PartyInformation::clear_vocal_register() {
  if (vocal_register_ != nullptr) vocal_register_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::mead101::mead::VocalRegister& PartyInformation::_internal_vocal_register() const {
  const ::mead101::mead::VocalRegister* p = vocal_register_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::VocalRegister*>(
      &::mead101::mead::_VocalRegister_default_instance_);
}
inline const ::mead101::mead::VocalRegister& PartyInformation::vocal_register() const {
  // @@protoc_insertion_point(field_get:mead101.mead.PartyInformation.vocal_register)
  return _internal_vocal_register();
}
inline void PartyInformation::unsafe_arena_set_allocated_vocal_register(
    ::mead101::mead::VocalRegister* vocal_register) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vocal_register_);
  }
  vocal_register_ = vocal_register;
  if (vocal_register) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.PartyInformation.vocal_register)
}
inline ::mead101::mead::VocalRegister* PartyInformation::release_vocal_register() {
  _has_bits_[0] &= ~0x00000004u;
  ::mead101::mead::VocalRegister* temp = vocal_register_;
  vocal_register_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::VocalRegister* PartyInformation::unsafe_arena_release_vocal_register() {
  // @@protoc_insertion_point(field_release:mead101.mead.PartyInformation.vocal_register)
  _has_bits_[0] &= ~0x00000004u;
  ::mead101::mead::VocalRegister* temp = vocal_register_;
  vocal_register_ = nullptr;
  return temp;
}
inline ::mead101::mead::VocalRegister* PartyInformation::_internal_mutable_vocal_register() {
  _has_bits_[0] |= 0x00000004u;
  if (vocal_register_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::VocalRegister>(GetArena());
    vocal_register_ = p;
  }
  return vocal_register_;
}
inline ::mead101::mead::VocalRegister* PartyInformation::mutable_vocal_register() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.PartyInformation.vocal_register)
  return _internal_mutable_vocal_register();
}
inline void PartyInformation::set_allocated_vocal_register(::mead101::mead::VocalRegister* vocal_register) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete vocal_register_;
  }
  if (vocal_register) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(vocal_register);
    if (message_arena != submessage_arena) {
      vocal_register = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vocal_register, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  vocal_register_ = vocal_register;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.PartyInformation.vocal_register)
}

// -------------------------------------------------------------------

// PartyInformationList

// repeated .mead101.mead.PartyInformation party_information = 1;
inline int PartyInformationList::_internal_party_information_size() const {
  return party_information_.size();
}
inline int PartyInformationList::party_information_size() const {
  return _internal_party_information_size();
}
inline void PartyInformationList::clear_party_information() {
  party_information_.Clear();
}
inline ::mead101::mead::PartyInformation* PartyInformationList::mutable_party_information(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.PartyInformationList.party_information)
  return party_information_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::PartyInformation >*
PartyInformationList::mutable_party_information() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.PartyInformationList.party_information)
  return &party_information_;
}
inline const ::mead101::mead::PartyInformation& PartyInformationList::_internal_party_information(int index) const {
  return party_information_.Get(index);
}
inline const ::mead101::mead::PartyInformation& PartyInformationList::party_information(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.PartyInformationList.party_information)
  return _internal_party_information(index);
}
inline ::mead101::mead::PartyInformation* PartyInformationList::_internal_add_party_information() {
  return party_information_.Add();
}
inline ::mead101::mead::PartyInformation* PartyInformationList::add_party_information() {
  // @@protoc_insertion_point(field_add:mead101.mead.PartyInformationList.party_information)
  return _internal_add_party_information();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::PartyInformation >&
PartyInformationList::party_information() const {
  // @@protoc_insertion_point(field_list:mead101.mead.PartyInformationList.party_information)
  return party_information_;
}

// -------------------------------------------------------------------

// PartyName

// optional .mead101.mead.Name abbreviated_name = 1;
inline bool PartyName::_internal_has_abbreviated_name() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || abbreviated_name_ != nullptr);
  return value;
}
inline bool PartyName::has_abbreviated_name() const {
  return _internal_has_abbreviated_name();
}
inline void PartyName::clear_abbreviated_name() {
  if (abbreviated_name_ != nullptr) abbreviated_name_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::mead101::mead::Name& PartyName::_internal_abbreviated_name() const {
  const ::mead101::mead::Name* p = abbreviated_name_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::Name*>(
      &::mead101::mead::_Name_default_instance_);
}
inline const ::mead101::mead::Name& PartyName::abbreviated_name() const {
  // @@protoc_insertion_point(field_get:mead101.mead.PartyName.abbreviated_name)
  return _internal_abbreviated_name();
}
inline void PartyName::unsafe_arena_set_allocated_abbreviated_name(
    ::mead101::mead::Name* abbreviated_name) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(abbreviated_name_);
  }
  abbreviated_name_ = abbreviated_name;
  if (abbreviated_name) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.PartyName.abbreviated_name)
}
inline ::mead101::mead::Name* PartyName::release_abbreviated_name() {
  _has_bits_[0] &= ~0x00000004u;
  ::mead101::mead::Name* temp = abbreviated_name_;
  abbreviated_name_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::Name* PartyName::unsafe_arena_release_abbreviated_name() {
  // @@protoc_insertion_point(field_release:mead101.mead.PartyName.abbreviated_name)
  _has_bits_[0] &= ~0x00000004u;
  ::mead101::mead::Name* temp = abbreviated_name_;
  abbreviated_name_ = nullptr;
  return temp;
}
inline ::mead101::mead::Name* PartyName::_internal_mutable_abbreviated_name() {
  _has_bits_[0] |= 0x00000004u;
  if (abbreviated_name_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::Name>(GetArena());
    abbreviated_name_ = p;
  }
  return abbreviated_name_;
}
inline ::mead101::mead::Name* PartyName::mutable_abbreviated_name() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.PartyName.abbreviated_name)
  return _internal_mutable_abbreviated_name();
}
inline void PartyName::set_allocated_abbreviated_name(::mead101::mead::Name* abbreviated_name) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete abbreviated_name_;
  }
  if (abbreviated_name) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(abbreviated_name);
    if (message_arena != submessage_arena) {
      abbreviated_name = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, abbreviated_name, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  abbreviated_name_ = abbreviated_name;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.PartyName.abbreviated_name)
}

// optional .mead101.mead.Name full_name = 2;
inline bool PartyName::_internal_has_full_name() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || full_name_ != nullptr);
  return value;
}
inline bool PartyName::has_full_name() const {
  return _internal_has_full_name();
}
inline void PartyName::clear_full_name() {
  if (full_name_ != nullptr) full_name_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::mead101::mead::Name& PartyName::_internal_full_name() const {
  const ::mead101::mead::Name* p = full_name_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::Name*>(
      &::mead101::mead::_Name_default_instance_);
}
inline const ::mead101::mead::Name& PartyName::full_name() const {
  // @@protoc_insertion_point(field_get:mead101.mead.PartyName.full_name)
  return _internal_full_name();
}
inline void PartyName::unsafe_arena_set_allocated_full_name(
    ::mead101::mead::Name* full_name) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(full_name_);
  }
  full_name_ = full_name;
  if (full_name) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.PartyName.full_name)
}
inline ::mead101::mead::Name* PartyName::release_full_name() {
  _has_bits_[0] &= ~0x00000008u;
  ::mead101::mead::Name* temp = full_name_;
  full_name_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::Name* PartyName::unsafe_arena_release_full_name() {
  // @@protoc_insertion_point(field_release:mead101.mead.PartyName.full_name)
  _has_bits_[0] &= ~0x00000008u;
  ::mead101::mead::Name* temp = full_name_;
  full_name_ = nullptr;
  return temp;
}
inline ::mead101::mead::Name* PartyName::_internal_mutable_full_name() {
  _has_bits_[0] |= 0x00000008u;
  if (full_name_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::Name>(GetArena());
    full_name_ = p;
  }
  return full_name_;
}
inline ::mead101::mead::Name* PartyName::mutable_full_name() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.PartyName.full_name)
  return _internal_mutable_full_name();
}
inline void PartyName::set_allocated_full_name(::mead101::mead::Name* full_name) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete full_name_;
  }
  if (full_name) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(full_name);
    if (message_arena != submessage_arena) {
      full_name = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, full_name, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  full_name_ = full_name;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.PartyName.full_name)
}

// optional string full_name_ascii_transcribed = 3;
inline bool PartyName::_internal_has_full_name_ascii_transcribed() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PartyName::has_full_name_ascii_transcribed() const {
  return _internal_has_full_name_ascii_transcribed();
}
inline void PartyName::clear_full_name_ascii_transcribed() {
  full_name_ascii_transcribed_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PartyName::full_name_ascii_transcribed() const {
  // @@protoc_insertion_point(field_get:mead101.mead.PartyName.full_name_ascii_transcribed)
  return _internal_full_name_ascii_transcribed();
}
inline void PartyName::set_full_name_ascii_transcribed(const std::string& value) {
  _internal_set_full_name_ascii_transcribed(value);
  // @@protoc_insertion_point(field_set:mead101.mead.PartyName.full_name_ascii_transcribed)
}
inline std::string* PartyName::mutable_full_name_ascii_transcribed() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.PartyName.full_name_ascii_transcribed)
  return _internal_mutable_full_name_ascii_transcribed();
}
inline const std::string& PartyName::_internal_full_name_ascii_transcribed() const {
  return full_name_ascii_transcribed_.Get();
}
inline void PartyName::_internal_set_full_name_ascii_transcribed(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  full_name_ascii_transcribed_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PartyName::set_full_name_ascii_transcribed(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  full_name_ascii_transcribed_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.PartyName.full_name_ascii_transcribed)
}
inline void PartyName::set_full_name_ascii_transcribed(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  full_name_ascii_transcribed_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.PartyName.full_name_ascii_transcribed)
}
inline void PartyName::set_full_name_ascii_transcribed(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  full_name_ascii_transcribed_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.PartyName.full_name_ascii_transcribed)
}
inline std::string* PartyName::_internal_mutable_full_name_ascii_transcribed() {
  _has_bits_[0] |= 0x00000001u;
  return full_name_ascii_transcribed_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PartyName::release_full_name_ascii_transcribed() {
  // @@protoc_insertion_point(field_release:mead101.mead.PartyName.full_name_ascii_transcribed)
  if (!_internal_has_full_name_ascii_transcribed()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return full_name_ascii_transcribed_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PartyName::set_allocated_full_name_ascii_transcribed(std::string* full_name_ascii_transcribed) {
  if (full_name_ascii_transcribed != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  full_name_ascii_transcribed_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), full_name_ascii_transcribed,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.PartyName.full_name_ascii_transcribed)
}

// optional .mead101.mead.Name full_name_indexed = 4;
inline bool PartyName::_internal_has_full_name_indexed() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || full_name_indexed_ != nullptr);
  return value;
}
inline bool PartyName::has_full_name_indexed() const {
  return _internal_has_full_name_indexed();
}
inline void PartyName::clear_full_name_indexed() {
  if (full_name_indexed_ != nullptr) full_name_indexed_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::mead101::mead::Name& PartyName::_internal_full_name_indexed() const {
  const ::mead101::mead::Name* p = full_name_indexed_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::Name*>(
      &::mead101::mead::_Name_default_instance_);
}
inline const ::mead101::mead::Name& PartyName::full_name_indexed() const {
  // @@protoc_insertion_point(field_get:mead101.mead.PartyName.full_name_indexed)
  return _internal_full_name_indexed();
}
inline void PartyName::unsafe_arena_set_allocated_full_name_indexed(
    ::mead101::mead::Name* full_name_indexed) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(full_name_indexed_);
  }
  full_name_indexed_ = full_name_indexed;
  if (full_name_indexed) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.PartyName.full_name_indexed)
}
inline ::mead101::mead::Name* PartyName::release_full_name_indexed() {
  _has_bits_[0] &= ~0x00000010u;
  ::mead101::mead::Name* temp = full_name_indexed_;
  full_name_indexed_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::Name* PartyName::unsafe_arena_release_full_name_indexed() {
  // @@protoc_insertion_point(field_release:mead101.mead.PartyName.full_name_indexed)
  _has_bits_[0] &= ~0x00000010u;
  ::mead101::mead::Name* temp = full_name_indexed_;
  full_name_indexed_ = nullptr;
  return temp;
}
inline ::mead101::mead::Name* PartyName::_internal_mutable_full_name_indexed() {
  _has_bits_[0] |= 0x00000010u;
  if (full_name_indexed_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::Name>(GetArena());
    full_name_indexed_ = p;
  }
  return full_name_indexed_;
}
inline ::mead101::mead::Name* PartyName::mutable_full_name_indexed() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.PartyName.full_name_indexed)
  return _internal_mutable_full_name_indexed();
}
inline void PartyName::set_allocated_full_name_indexed(::mead101::mead::Name* full_name_indexed) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete full_name_indexed_;
  }
  if (full_name_indexed) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(full_name_indexed);
    if (message_arena != submessage_arena) {
      full_name_indexed = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, full_name_indexed, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  full_name_indexed_ = full_name_indexed;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.PartyName.full_name_indexed)
}

// optional .mead101.mead.Name key_name = 5;
inline bool PartyName::_internal_has_key_name() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || key_name_ != nullptr);
  return value;
}
inline bool PartyName::has_key_name() const {
  return _internal_has_key_name();
}
inline void PartyName::clear_key_name() {
  if (key_name_ != nullptr) key_name_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::mead101::mead::Name& PartyName::_internal_key_name() const {
  const ::mead101::mead::Name* p = key_name_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::Name*>(
      &::mead101::mead::_Name_default_instance_);
}
inline const ::mead101::mead::Name& PartyName::key_name() const {
  // @@protoc_insertion_point(field_get:mead101.mead.PartyName.key_name)
  return _internal_key_name();
}
inline void PartyName::unsafe_arena_set_allocated_key_name(
    ::mead101::mead::Name* key_name) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(key_name_);
  }
  key_name_ = key_name;
  if (key_name) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.PartyName.key_name)
}
inline ::mead101::mead::Name* PartyName::release_key_name() {
  _has_bits_[0] &= ~0x00000020u;
  ::mead101::mead::Name* temp = key_name_;
  key_name_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::Name* PartyName::unsafe_arena_release_key_name() {
  // @@protoc_insertion_point(field_release:mead101.mead.PartyName.key_name)
  _has_bits_[0] &= ~0x00000020u;
  ::mead101::mead::Name* temp = key_name_;
  key_name_ = nullptr;
  return temp;
}
inline ::mead101::mead::Name* PartyName::_internal_mutable_key_name() {
  _has_bits_[0] |= 0x00000020u;
  if (key_name_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::Name>(GetArena());
    key_name_ = p;
  }
  return key_name_;
}
inline ::mead101::mead::Name* PartyName::mutable_key_name() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.PartyName.key_name)
  return _internal_mutable_key_name();
}
inline void PartyName::set_allocated_key_name(::mead101::mead::Name* key_name) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete key_name_;
  }
  if (key_name) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(key_name);
    if (message_arena != submessage_arena) {
      key_name = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, key_name, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  key_name_ = key_name;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.PartyName.key_name)
}

// optional string language_and_script_code = 6;
inline bool PartyName::_internal_has_language_and_script_code() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PartyName::has_language_and_script_code() const {
  return _internal_has_language_and_script_code();
}
inline void PartyName::clear_language_and_script_code() {
  language_and_script_code_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& PartyName::language_and_script_code() const {
  // @@protoc_insertion_point(field_get:mead101.mead.PartyName.language_and_script_code)
  return _internal_language_and_script_code();
}
inline void PartyName::set_language_and_script_code(const std::string& value) {
  _internal_set_language_and_script_code(value);
  // @@protoc_insertion_point(field_set:mead101.mead.PartyName.language_and_script_code)
}
inline std::string* PartyName::mutable_language_and_script_code() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.PartyName.language_and_script_code)
  return _internal_mutable_language_and_script_code();
}
inline const std::string& PartyName::_internal_language_and_script_code() const {
  return language_and_script_code_.Get();
}
inline void PartyName::_internal_set_language_and_script_code(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  language_and_script_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PartyName::set_language_and_script_code(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  language_and_script_code_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.PartyName.language_and_script_code)
}
inline void PartyName::set_language_and_script_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  language_and_script_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.PartyName.language_and_script_code)
}
inline void PartyName::set_language_and_script_code(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  language_and_script_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.PartyName.language_and_script_code)
}
inline std::string* PartyName::_internal_mutable_language_and_script_code() {
  _has_bits_[0] |= 0x00000002u;
  return language_and_script_code_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PartyName::release_language_and_script_code() {
  // @@protoc_insertion_point(field_release:mead101.mead.PartyName.language_and_script_code)
  if (!_internal_has_language_and_script_code()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return language_and_script_code_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PartyName::set_allocated_language_and_script_code(std::string* language_and_script_code) {
  if (language_and_script_code != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  language_and_script_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), language_and_script_code,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.PartyName.language_and_script_code)
}

// optional .mead101.mead.Name names_after_key_name = 7;
inline bool PartyName::_internal_has_names_after_key_name() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || names_after_key_name_ != nullptr);
  return value;
}
inline bool PartyName::has_names_after_key_name() const {
  return _internal_has_names_after_key_name();
}
inline void PartyName::clear_names_after_key_name() {
  if (names_after_key_name_ != nullptr) names_after_key_name_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::mead101::mead::Name& PartyName::_internal_names_after_key_name() const {
  const ::mead101::mead::Name* p = names_after_key_name_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::Name*>(
      &::mead101::mead::_Name_default_instance_);
}
inline const ::mead101::mead::Name& PartyName::names_after_key_name() const {
  // @@protoc_insertion_point(field_get:mead101.mead.PartyName.names_after_key_name)
  return _internal_names_after_key_name();
}
inline void PartyName::unsafe_arena_set_allocated_names_after_key_name(
    ::mead101::mead::Name* names_after_key_name) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(names_after_key_name_);
  }
  names_after_key_name_ = names_after_key_name;
  if (names_after_key_name) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.PartyName.names_after_key_name)
}
inline ::mead101::mead::Name* PartyName::release_names_after_key_name() {
  _has_bits_[0] &= ~0x00000040u;
  ::mead101::mead::Name* temp = names_after_key_name_;
  names_after_key_name_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::Name* PartyName::unsafe_arena_release_names_after_key_name() {
  // @@protoc_insertion_point(field_release:mead101.mead.PartyName.names_after_key_name)
  _has_bits_[0] &= ~0x00000040u;
  ::mead101::mead::Name* temp = names_after_key_name_;
  names_after_key_name_ = nullptr;
  return temp;
}
inline ::mead101::mead::Name* PartyName::_internal_mutable_names_after_key_name() {
  _has_bits_[0] |= 0x00000040u;
  if (names_after_key_name_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::Name>(GetArena());
    names_after_key_name_ = p;
  }
  return names_after_key_name_;
}
inline ::mead101::mead::Name* PartyName::mutable_names_after_key_name() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.PartyName.names_after_key_name)
  return _internal_mutable_names_after_key_name();
}
inline void PartyName::set_allocated_names_after_key_name(::mead101::mead::Name* names_after_key_name) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete names_after_key_name_;
  }
  if (names_after_key_name) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(names_after_key_name);
    if (message_arena != submessage_arena) {
      names_after_key_name = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, names_after_key_name, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  names_after_key_name_ = names_after_key_name;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.PartyName.names_after_key_name)
}

// optional .mead101.mead.Name names_before_key_name = 8;
inline bool PartyName::_internal_has_names_before_key_name() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || names_before_key_name_ != nullptr);
  return value;
}
inline bool PartyName::has_names_before_key_name() const {
  return _internal_has_names_before_key_name();
}
inline void PartyName::clear_names_before_key_name() {
  if (names_before_key_name_ != nullptr) names_before_key_name_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
inline const ::mead101::mead::Name& PartyName::_internal_names_before_key_name() const {
  const ::mead101::mead::Name* p = names_before_key_name_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::Name*>(
      &::mead101::mead::_Name_default_instance_);
}
inline const ::mead101::mead::Name& PartyName::names_before_key_name() const {
  // @@protoc_insertion_point(field_get:mead101.mead.PartyName.names_before_key_name)
  return _internal_names_before_key_name();
}
inline void PartyName::unsafe_arena_set_allocated_names_before_key_name(
    ::mead101::mead::Name* names_before_key_name) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(names_before_key_name_);
  }
  names_before_key_name_ = names_before_key_name;
  if (names_before_key_name) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.PartyName.names_before_key_name)
}
inline ::mead101::mead::Name* PartyName::release_names_before_key_name() {
  _has_bits_[0] &= ~0x00000080u;
  ::mead101::mead::Name* temp = names_before_key_name_;
  names_before_key_name_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::Name* PartyName::unsafe_arena_release_names_before_key_name() {
  // @@protoc_insertion_point(field_release:mead101.mead.PartyName.names_before_key_name)
  _has_bits_[0] &= ~0x00000080u;
  ::mead101::mead::Name* temp = names_before_key_name_;
  names_before_key_name_ = nullptr;
  return temp;
}
inline ::mead101::mead::Name* PartyName::_internal_mutable_names_before_key_name() {
  _has_bits_[0] |= 0x00000080u;
  if (names_before_key_name_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::Name>(GetArena());
    names_before_key_name_ = p;
  }
  return names_before_key_name_;
}
inline ::mead101::mead::Name* PartyName::mutable_names_before_key_name() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.PartyName.names_before_key_name)
  return _internal_mutable_names_before_key_name();
}
inline void PartyName::set_allocated_names_before_key_name(::mead101::mead::Name* names_before_key_name) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete names_before_key_name_;
  }
  if (names_before_key_name) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(names_before_key_name);
    if (message_arena != submessage_arena) {
      names_before_key_name = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, names_before_key_name, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  names_before_key_name_ = names_before_key_name;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.PartyName.names_before_key_name)
}

// -------------------------------------------------------------------

// PartyNameWithPronunciation

// optional .mead101.mead.NameWithPronunciationAndScriptCode abbreviated_name = 1;
inline bool PartyNameWithPronunciation::_internal_has_abbreviated_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || abbreviated_name_ != nullptr);
  return value;
}
inline bool PartyNameWithPronunciation::has_abbreviated_name() const {
  return _internal_has_abbreviated_name();
}
inline void PartyNameWithPronunciation::clear_abbreviated_name() {
  if (abbreviated_name_ != nullptr) abbreviated_name_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::mead101::mead::NameWithPronunciationAndScriptCode& PartyNameWithPronunciation::_internal_abbreviated_name() const {
  const ::mead101::mead::NameWithPronunciationAndScriptCode* p = abbreviated_name_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::NameWithPronunciationAndScriptCode*>(
      &::mead101::mead::_NameWithPronunciationAndScriptCode_default_instance_);
}
inline const ::mead101::mead::NameWithPronunciationAndScriptCode& PartyNameWithPronunciation::abbreviated_name() const {
  // @@protoc_insertion_point(field_get:mead101.mead.PartyNameWithPronunciation.abbreviated_name)
  return _internal_abbreviated_name();
}
inline void PartyNameWithPronunciation::unsafe_arena_set_allocated_abbreviated_name(
    ::mead101::mead::NameWithPronunciationAndScriptCode* abbreviated_name) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(abbreviated_name_);
  }
  abbreviated_name_ = abbreviated_name;
  if (abbreviated_name) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.PartyNameWithPronunciation.abbreviated_name)
}
inline ::mead101::mead::NameWithPronunciationAndScriptCode* PartyNameWithPronunciation::release_abbreviated_name() {
  _has_bits_[0] &= ~0x00000002u;
  ::mead101::mead::NameWithPronunciationAndScriptCode* temp = abbreviated_name_;
  abbreviated_name_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::NameWithPronunciationAndScriptCode* PartyNameWithPronunciation::unsafe_arena_release_abbreviated_name() {
  // @@protoc_insertion_point(field_release:mead101.mead.PartyNameWithPronunciation.abbreviated_name)
  _has_bits_[0] &= ~0x00000002u;
  ::mead101::mead::NameWithPronunciationAndScriptCode* temp = abbreviated_name_;
  abbreviated_name_ = nullptr;
  return temp;
}
inline ::mead101::mead::NameWithPronunciationAndScriptCode* PartyNameWithPronunciation::_internal_mutable_abbreviated_name() {
  _has_bits_[0] |= 0x00000002u;
  if (abbreviated_name_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::NameWithPronunciationAndScriptCode>(GetArena());
    abbreviated_name_ = p;
  }
  return abbreviated_name_;
}
inline ::mead101::mead::NameWithPronunciationAndScriptCode* PartyNameWithPronunciation::mutable_abbreviated_name() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.PartyNameWithPronunciation.abbreviated_name)
  return _internal_mutable_abbreviated_name();
}
inline void PartyNameWithPronunciation::set_allocated_abbreviated_name(::mead101::mead::NameWithPronunciationAndScriptCode* abbreviated_name) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete abbreviated_name_;
  }
  if (abbreviated_name) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(abbreviated_name);
    if (message_arena != submessage_arena) {
      abbreviated_name = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, abbreviated_name, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  abbreviated_name_ = abbreviated_name;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.PartyNameWithPronunciation.abbreviated_name)
}

// optional .mead101.mead.NameWithPronunciationAndScriptCode full_name = 2;
inline bool PartyNameWithPronunciation::_internal_has_full_name() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || full_name_ != nullptr);
  return value;
}
inline bool PartyNameWithPronunciation::has_full_name() const {
  return _internal_has_full_name();
}
inline void PartyNameWithPronunciation::clear_full_name() {
  if (full_name_ != nullptr) full_name_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::mead101::mead::NameWithPronunciationAndScriptCode& PartyNameWithPronunciation::_internal_full_name() const {
  const ::mead101::mead::NameWithPronunciationAndScriptCode* p = full_name_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::NameWithPronunciationAndScriptCode*>(
      &::mead101::mead::_NameWithPronunciationAndScriptCode_default_instance_);
}
inline const ::mead101::mead::NameWithPronunciationAndScriptCode& PartyNameWithPronunciation::full_name() const {
  // @@protoc_insertion_point(field_get:mead101.mead.PartyNameWithPronunciation.full_name)
  return _internal_full_name();
}
inline void PartyNameWithPronunciation::unsafe_arena_set_allocated_full_name(
    ::mead101::mead::NameWithPronunciationAndScriptCode* full_name) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(full_name_);
  }
  full_name_ = full_name;
  if (full_name) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.PartyNameWithPronunciation.full_name)
}
inline ::mead101::mead::NameWithPronunciationAndScriptCode* PartyNameWithPronunciation::release_full_name() {
  _has_bits_[0] &= ~0x00000004u;
  ::mead101::mead::NameWithPronunciationAndScriptCode* temp = full_name_;
  full_name_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::NameWithPronunciationAndScriptCode* PartyNameWithPronunciation::unsafe_arena_release_full_name() {
  // @@protoc_insertion_point(field_release:mead101.mead.PartyNameWithPronunciation.full_name)
  _has_bits_[0] &= ~0x00000004u;
  ::mead101::mead::NameWithPronunciationAndScriptCode* temp = full_name_;
  full_name_ = nullptr;
  return temp;
}
inline ::mead101::mead::NameWithPronunciationAndScriptCode* PartyNameWithPronunciation::_internal_mutable_full_name() {
  _has_bits_[0] |= 0x00000004u;
  if (full_name_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::NameWithPronunciationAndScriptCode>(GetArena());
    full_name_ = p;
  }
  return full_name_;
}
inline ::mead101::mead::NameWithPronunciationAndScriptCode* PartyNameWithPronunciation::mutable_full_name() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.PartyNameWithPronunciation.full_name)
  return _internal_mutable_full_name();
}
inline void PartyNameWithPronunciation::set_allocated_full_name(::mead101::mead::NameWithPronunciationAndScriptCode* full_name) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete full_name_;
  }
  if (full_name) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(full_name);
    if (message_arena != submessage_arena) {
      full_name = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, full_name, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  full_name_ = full_name;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.PartyNameWithPronunciation.full_name)
}

// optional .mead101.mead.NameWithPronunciation full_name_ascii_transcribed = 3;
inline bool PartyNameWithPronunciation::_internal_has_full_name_ascii_transcribed() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || full_name_ascii_transcribed_ != nullptr);
  return value;
}
inline bool PartyNameWithPronunciation::has_full_name_ascii_transcribed() const {
  return _internal_has_full_name_ascii_transcribed();
}
inline void PartyNameWithPronunciation::clear_full_name_ascii_transcribed() {
  if (full_name_ascii_transcribed_ != nullptr) full_name_ascii_transcribed_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::mead101::mead::NameWithPronunciation& PartyNameWithPronunciation::_internal_full_name_ascii_transcribed() const {
  const ::mead101::mead::NameWithPronunciation* p = full_name_ascii_transcribed_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::NameWithPronunciation*>(
      &::mead101::mead::_NameWithPronunciation_default_instance_);
}
inline const ::mead101::mead::NameWithPronunciation& PartyNameWithPronunciation::full_name_ascii_transcribed() const {
  // @@protoc_insertion_point(field_get:mead101.mead.PartyNameWithPronunciation.full_name_ascii_transcribed)
  return _internal_full_name_ascii_transcribed();
}
inline void PartyNameWithPronunciation::unsafe_arena_set_allocated_full_name_ascii_transcribed(
    ::mead101::mead::NameWithPronunciation* full_name_ascii_transcribed) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(full_name_ascii_transcribed_);
  }
  full_name_ascii_transcribed_ = full_name_ascii_transcribed;
  if (full_name_ascii_transcribed) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.PartyNameWithPronunciation.full_name_ascii_transcribed)
}
inline ::mead101::mead::NameWithPronunciation* PartyNameWithPronunciation::release_full_name_ascii_transcribed() {
  _has_bits_[0] &= ~0x00000008u;
  ::mead101::mead::NameWithPronunciation* temp = full_name_ascii_transcribed_;
  full_name_ascii_transcribed_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::NameWithPronunciation* PartyNameWithPronunciation::unsafe_arena_release_full_name_ascii_transcribed() {
  // @@protoc_insertion_point(field_release:mead101.mead.PartyNameWithPronunciation.full_name_ascii_transcribed)
  _has_bits_[0] &= ~0x00000008u;
  ::mead101::mead::NameWithPronunciation* temp = full_name_ascii_transcribed_;
  full_name_ascii_transcribed_ = nullptr;
  return temp;
}
inline ::mead101::mead::NameWithPronunciation* PartyNameWithPronunciation::_internal_mutable_full_name_ascii_transcribed() {
  _has_bits_[0] |= 0x00000008u;
  if (full_name_ascii_transcribed_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::NameWithPronunciation>(GetArena());
    full_name_ascii_transcribed_ = p;
  }
  return full_name_ascii_transcribed_;
}
inline ::mead101::mead::NameWithPronunciation* PartyNameWithPronunciation::mutable_full_name_ascii_transcribed() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.PartyNameWithPronunciation.full_name_ascii_transcribed)
  return _internal_mutable_full_name_ascii_transcribed();
}
inline void PartyNameWithPronunciation::set_allocated_full_name_ascii_transcribed(::mead101::mead::NameWithPronunciation* full_name_ascii_transcribed) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete full_name_ascii_transcribed_;
  }
  if (full_name_ascii_transcribed) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(full_name_ascii_transcribed);
    if (message_arena != submessage_arena) {
      full_name_ascii_transcribed = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, full_name_ascii_transcribed, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  full_name_ascii_transcribed_ = full_name_ascii_transcribed;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.PartyNameWithPronunciation.full_name_ascii_transcribed)
}

// optional .mead101.mead.NameWithPronunciationAndScriptCode full_name_indexed = 4;
inline bool PartyNameWithPronunciation::_internal_has_full_name_indexed() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || full_name_indexed_ != nullptr);
  return value;
}
inline bool PartyNameWithPronunciation::has_full_name_indexed() const {
  return _internal_has_full_name_indexed();
}
inline void PartyNameWithPronunciation::clear_full_name_indexed() {
  if (full_name_indexed_ != nullptr) full_name_indexed_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::mead101::mead::NameWithPronunciationAndScriptCode& PartyNameWithPronunciation::_internal_full_name_indexed() const {
  const ::mead101::mead::NameWithPronunciationAndScriptCode* p = full_name_indexed_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::NameWithPronunciationAndScriptCode*>(
      &::mead101::mead::_NameWithPronunciationAndScriptCode_default_instance_);
}
inline const ::mead101::mead::NameWithPronunciationAndScriptCode& PartyNameWithPronunciation::full_name_indexed() const {
  // @@protoc_insertion_point(field_get:mead101.mead.PartyNameWithPronunciation.full_name_indexed)
  return _internal_full_name_indexed();
}
inline void PartyNameWithPronunciation::unsafe_arena_set_allocated_full_name_indexed(
    ::mead101::mead::NameWithPronunciationAndScriptCode* full_name_indexed) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(full_name_indexed_);
  }
  full_name_indexed_ = full_name_indexed;
  if (full_name_indexed) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.PartyNameWithPronunciation.full_name_indexed)
}
inline ::mead101::mead::NameWithPronunciationAndScriptCode* PartyNameWithPronunciation::release_full_name_indexed() {
  _has_bits_[0] &= ~0x00000010u;
  ::mead101::mead::NameWithPronunciationAndScriptCode* temp = full_name_indexed_;
  full_name_indexed_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::NameWithPronunciationAndScriptCode* PartyNameWithPronunciation::unsafe_arena_release_full_name_indexed() {
  // @@protoc_insertion_point(field_release:mead101.mead.PartyNameWithPronunciation.full_name_indexed)
  _has_bits_[0] &= ~0x00000010u;
  ::mead101::mead::NameWithPronunciationAndScriptCode* temp = full_name_indexed_;
  full_name_indexed_ = nullptr;
  return temp;
}
inline ::mead101::mead::NameWithPronunciationAndScriptCode* PartyNameWithPronunciation::_internal_mutable_full_name_indexed() {
  _has_bits_[0] |= 0x00000010u;
  if (full_name_indexed_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::NameWithPronunciationAndScriptCode>(GetArena());
    full_name_indexed_ = p;
  }
  return full_name_indexed_;
}
inline ::mead101::mead::NameWithPronunciationAndScriptCode* PartyNameWithPronunciation::mutable_full_name_indexed() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.PartyNameWithPronunciation.full_name_indexed)
  return _internal_mutable_full_name_indexed();
}
inline void PartyNameWithPronunciation::set_allocated_full_name_indexed(::mead101::mead::NameWithPronunciationAndScriptCode* full_name_indexed) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete full_name_indexed_;
  }
  if (full_name_indexed) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(full_name_indexed);
    if (message_arena != submessage_arena) {
      full_name_indexed = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, full_name_indexed, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  full_name_indexed_ = full_name_indexed;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.PartyNameWithPronunciation.full_name_indexed)
}

// optional .mead101.mead.NameWithPronunciationAndScriptCode key_name = 5;
inline bool PartyNameWithPronunciation::_internal_has_key_name() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || key_name_ != nullptr);
  return value;
}
inline bool PartyNameWithPronunciation::has_key_name() const {
  return _internal_has_key_name();
}
inline void PartyNameWithPronunciation::clear_key_name() {
  if (key_name_ != nullptr) key_name_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::mead101::mead::NameWithPronunciationAndScriptCode& PartyNameWithPronunciation::_internal_key_name() const {
  const ::mead101::mead::NameWithPronunciationAndScriptCode* p = key_name_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::NameWithPronunciationAndScriptCode*>(
      &::mead101::mead::_NameWithPronunciationAndScriptCode_default_instance_);
}
inline const ::mead101::mead::NameWithPronunciationAndScriptCode& PartyNameWithPronunciation::key_name() const {
  // @@protoc_insertion_point(field_get:mead101.mead.PartyNameWithPronunciation.key_name)
  return _internal_key_name();
}
inline void PartyNameWithPronunciation::unsafe_arena_set_allocated_key_name(
    ::mead101::mead::NameWithPronunciationAndScriptCode* key_name) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(key_name_);
  }
  key_name_ = key_name;
  if (key_name) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.PartyNameWithPronunciation.key_name)
}
inline ::mead101::mead::NameWithPronunciationAndScriptCode* PartyNameWithPronunciation::release_key_name() {
  _has_bits_[0] &= ~0x00000020u;
  ::mead101::mead::NameWithPronunciationAndScriptCode* temp = key_name_;
  key_name_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::NameWithPronunciationAndScriptCode* PartyNameWithPronunciation::unsafe_arena_release_key_name() {
  // @@protoc_insertion_point(field_release:mead101.mead.PartyNameWithPronunciation.key_name)
  _has_bits_[0] &= ~0x00000020u;
  ::mead101::mead::NameWithPronunciationAndScriptCode* temp = key_name_;
  key_name_ = nullptr;
  return temp;
}
inline ::mead101::mead::NameWithPronunciationAndScriptCode* PartyNameWithPronunciation::_internal_mutable_key_name() {
  _has_bits_[0] |= 0x00000020u;
  if (key_name_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::NameWithPronunciationAndScriptCode>(GetArena());
    key_name_ = p;
  }
  return key_name_;
}
inline ::mead101::mead::NameWithPronunciationAndScriptCode* PartyNameWithPronunciation::mutable_key_name() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.PartyNameWithPronunciation.key_name)
  return _internal_mutable_key_name();
}
inline void PartyNameWithPronunciation::set_allocated_key_name(::mead101::mead::NameWithPronunciationAndScriptCode* key_name) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete key_name_;
  }
  if (key_name) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(key_name);
    if (message_arena != submessage_arena) {
      key_name = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, key_name, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  key_name_ = key_name;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.PartyNameWithPronunciation.key_name)
}

// optional string language_and_script_code = 6;
inline bool PartyNameWithPronunciation::_internal_has_language_and_script_code() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PartyNameWithPronunciation::has_language_and_script_code() const {
  return _internal_has_language_and_script_code();
}
inline void PartyNameWithPronunciation::clear_language_and_script_code() {
  language_and_script_code_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PartyNameWithPronunciation::language_and_script_code() const {
  // @@protoc_insertion_point(field_get:mead101.mead.PartyNameWithPronunciation.language_and_script_code)
  return _internal_language_and_script_code();
}
inline void PartyNameWithPronunciation::set_language_and_script_code(const std::string& value) {
  _internal_set_language_and_script_code(value);
  // @@protoc_insertion_point(field_set:mead101.mead.PartyNameWithPronunciation.language_and_script_code)
}
inline std::string* PartyNameWithPronunciation::mutable_language_and_script_code() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.PartyNameWithPronunciation.language_and_script_code)
  return _internal_mutable_language_and_script_code();
}
inline const std::string& PartyNameWithPronunciation::_internal_language_and_script_code() const {
  return language_and_script_code_.Get();
}
inline void PartyNameWithPronunciation::_internal_set_language_and_script_code(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  language_and_script_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PartyNameWithPronunciation::set_language_and_script_code(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  language_and_script_code_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.PartyNameWithPronunciation.language_and_script_code)
}
inline void PartyNameWithPronunciation::set_language_and_script_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  language_and_script_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.PartyNameWithPronunciation.language_and_script_code)
}
inline void PartyNameWithPronunciation::set_language_and_script_code(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  language_and_script_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.PartyNameWithPronunciation.language_and_script_code)
}
inline std::string* PartyNameWithPronunciation::_internal_mutable_language_and_script_code() {
  _has_bits_[0] |= 0x00000001u;
  return language_and_script_code_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PartyNameWithPronunciation::release_language_and_script_code() {
  // @@protoc_insertion_point(field_release:mead101.mead.PartyNameWithPronunciation.language_and_script_code)
  if (!_internal_has_language_and_script_code()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return language_and_script_code_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PartyNameWithPronunciation::set_allocated_language_and_script_code(std::string* language_and_script_code) {
  if (language_and_script_code != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  language_and_script_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), language_and_script_code,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.PartyNameWithPronunciation.language_and_script_code)
}

// optional .mead101.mead.NameWithPronunciationAndScriptCode names_after_key_name = 7;
inline bool PartyNameWithPronunciation::_internal_has_names_after_key_name() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || names_after_key_name_ != nullptr);
  return value;
}
inline bool PartyNameWithPronunciation::has_names_after_key_name() const {
  return _internal_has_names_after_key_name();
}
inline void PartyNameWithPronunciation::clear_names_after_key_name() {
  if (names_after_key_name_ != nullptr) names_after_key_name_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::mead101::mead::NameWithPronunciationAndScriptCode& PartyNameWithPronunciation::_internal_names_after_key_name() const {
  const ::mead101::mead::NameWithPronunciationAndScriptCode* p = names_after_key_name_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::NameWithPronunciationAndScriptCode*>(
      &::mead101::mead::_NameWithPronunciationAndScriptCode_default_instance_);
}
inline const ::mead101::mead::NameWithPronunciationAndScriptCode& PartyNameWithPronunciation::names_after_key_name() const {
  // @@protoc_insertion_point(field_get:mead101.mead.PartyNameWithPronunciation.names_after_key_name)
  return _internal_names_after_key_name();
}
inline void PartyNameWithPronunciation::unsafe_arena_set_allocated_names_after_key_name(
    ::mead101::mead::NameWithPronunciationAndScriptCode* names_after_key_name) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(names_after_key_name_);
  }
  names_after_key_name_ = names_after_key_name;
  if (names_after_key_name) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.PartyNameWithPronunciation.names_after_key_name)
}
inline ::mead101::mead::NameWithPronunciationAndScriptCode* PartyNameWithPronunciation::release_names_after_key_name() {
  _has_bits_[0] &= ~0x00000040u;
  ::mead101::mead::NameWithPronunciationAndScriptCode* temp = names_after_key_name_;
  names_after_key_name_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::NameWithPronunciationAndScriptCode* PartyNameWithPronunciation::unsafe_arena_release_names_after_key_name() {
  // @@protoc_insertion_point(field_release:mead101.mead.PartyNameWithPronunciation.names_after_key_name)
  _has_bits_[0] &= ~0x00000040u;
  ::mead101::mead::NameWithPronunciationAndScriptCode* temp = names_after_key_name_;
  names_after_key_name_ = nullptr;
  return temp;
}
inline ::mead101::mead::NameWithPronunciationAndScriptCode* PartyNameWithPronunciation::_internal_mutable_names_after_key_name() {
  _has_bits_[0] |= 0x00000040u;
  if (names_after_key_name_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::NameWithPronunciationAndScriptCode>(GetArena());
    names_after_key_name_ = p;
  }
  return names_after_key_name_;
}
inline ::mead101::mead::NameWithPronunciationAndScriptCode* PartyNameWithPronunciation::mutable_names_after_key_name() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.PartyNameWithPronunciation.names_after_key_name)
  return _internal_mutable_names_after_key_name();
}
inline void PartyNameWithPronunciation::set_allocated_names_after_key_name(::mead101::mead::NameWithPronunciationAndScriptCode* names_after_key_name) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete names_after_key_name_;
  }
  if (names_after_key_name) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(names_after_key_name);
    if (message_arena != submessage_arena) {
      names_after_key_name = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, names_after_key_name, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  names_after_key_name_ = names_after_key_name;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.PartyNameWithPronunciation.names_after_key_name)
}

// optional .mead101.mead.NameWithPronunciationAndScriptCode names_before_key_name = 8;
inline bool PartyNameWithPronunciation::_internal_has_names_before_key_name() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || names_before_key_name_ != nullptr);
  return value;
}
inline bool PartyNameWithPronunciation::has_names_before_key_name() const {
  return _internal_has_names_before_key_name();
}
inline void PartyNameWithPronunciation::clear_names_before_key_name() {
  if (names_before_key_name_ != nullptr) names_before_key_name_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
inline const ::mead101::mead::NameWithPronunciationAndScriptCode& PartyNameWithPronunciation::_internal_names_before_key_name() const {
  const ::mead101::mead::NameWithPronunciationAndScriptCode* p = names_before_key_name_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::NameWithPronunciationAndScriptCode*>(
      &::mead101::mead::_NameWithPronunciationAndScriptCode_default_instance_);
}
inline const ::mead101::mead::NameWithPronunciationAndScriptCode& PartyNameWithPronunciation::names_before_key_name() const {
  // @@protoc_insertion_point(field_get:mead101.mead.PartyNameWithPronunciation.names_before_key_name)
  return _internal_names_before_key_name();
}
inline void PartyNameWithPronunciation::unsafe_arena_set_allocated_names_before_key_name(
    ::mead101::mead::NameWithPronunciationAndScriptCode* names_before_key_name) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(names_before_key_name_);
  }
  names_before_key_name_ = names_before_key_name;
  if (names_before_key_name) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.PartyNameWithPronunciation.names_before_key_name)
}
inline ::mead101::mead::NameWithPronunciationAndScriptCode* PartyNameWithPronunciation::release_names_before_key_name() {
  _has_bits_[0] &= ~0x00000080u;
  ::mead101::mead::NameWithPronunciationAndScriptCode* temp = names_before_key_name_;
  names_before_key_name_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::NameWithPronunciationAndScriptCode* PartyNameWithPronunciation::unsafe_arena_release_names_before_key_name() {
  // @@protoc_insertion_point(field_release:mead101.mead.PartyNameWithPronunciation.names_before_key_name)
  _has_bits_[0] &= ~0x00000080u;
  ::mead101::mead::NameWithPronunciationAndScriptCode* temp = names_before_key_name_;
  names_before_key_name_ = nullptr;
  return temp;
}
inline ::mead101::mead::NameWithPronunciationAndScriptCode* PartyNameWithPronunciation::_internal_mutable_names_before_key_name() {
  _has_bits_[0] |= 0x00000080u;
  if (names_before_key_name_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::NameWithPronunciationAndScriptCode>(GetArena());
    names_before_key_name_ = p;
  }
  return names_before_key_name_;
}
inline ::mead101::mead::NameWithPronunciationAndScriptCode* PartyNameWithPronunciation::mutable_names_before_key_name() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.PartyNameWithPronunciation.names_before_key_name)
  return _internal_mutable_names_before_key_name();
}
inline void PartyNameWithPronunciation::set_allocated_names_before_key_name(::mead101::mead::NameWithPronunciationAndScriptCode* names_before_key_name) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete names_before_key_name_;
  }
  if (names_before_key_name) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(names_before_key_name);
    if (message_arena != submessage_arena) {
      names_before_key_name = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, names_before_key_name, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  names_before_key_name_ = names_before_key_name;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.PartyNameWithPronunciation.names_before_key_name)
}

// -------------------------------------------------------------------

// PartyNameWithTerritory

// optional .mead101.mead.NameWithPronunciationAndScriptCode abbreviated_name = 1;
inline bool PartyNameWithTerritory::_internal_has_abbreviated_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || abbreviated_name_ != nullptr);
  return value;
}
inline bool PartyNameWithTerritory::has_abbreviated_name() const {
  return _internal_has_abbreviated_name();
}
inline void PartyNameWithTerritory::clear_abbreviated_name() {
  if (abbreviated_name_ != nullptr) abbreviated_name_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::mead101::mead::NameWithPronunciationAndScriptCode& PartyNameWithTerritory::_internal_abbreviated_name() const {
  const ::mead101::mead::NameWithPronunciationAndScriptCode* p = abbreviated_name_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::NameWithPronunciationAndScriptCode*>(
      &::mead101::mead::_NameWithPronunciationAndScriptCode_default_instance_);
}
inline const ::mead101::mead::NameWithPronunciationAndScriptCode& PartyNameWithTerritory::abbreviated_name() const {
  // @@protoc_insertion_point(field_get:mead101.mead.PartyNameWithTerritory.abbreviated_name)
  return _internal_abbreviated_name();
}
inline void PartyNameWithTerritory::unsafe_arena_set_allocated_abbreviated_name(
    ::mead101::mead::NameWithPronunciationAndScriptCode* abbreviated_name) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(abbreviated_name_);
  }
  abbreviated_name_ = abbreviated_name;
  if (abbreviated_name) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.PartyNameWithTerritory.abbreviated_name)
}
inline ::mead101::mead::NameWithPronunciationAndScriptCode* PartyNameWithTerritory::release_abbreviated_name() {
  _has_bits_[0] &= ~0x00000002u;
  ::mead101::mead::NameWithPronunciationAndScriptCode* temp = abbreviated_name_;
  abbreviated_name_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::NameWithPronunciationAndScriptCode* PartyNameWithTerritory::unsafe_arena_release_abbreviated_name() {
  // @@protoc_insertion_point(field_release:mead101.mead.PartyNameWithTerritory.abbreviated_name)
  _has_bits_[0] &= ~0x00000002u;
  ::mead101::mead::NameWithPronunciationAndScriptCode* temp = abbreviated_name_;
  abbreviated_name_ = nullptr;
  return temp;
}
inline ::mead101::mead::NameWithPronunciationAndScriptCode* PartyNameWithTerritory::_internal_mutable_abbreviated_name() {
  _has_bits_[0] |= 0x00000002u;
  if (abbreviated_name_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::NameWithPronunciationAndScriptCode>(GetArena());
    abbreviated_name_ = p;
  }
  return abbreviated_name_;
}
inline ::mead101::mead::NameWithPronunciationAndScriptCode* PartyNameWithTerritory::mutable_abbreviated_name() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.PartyNameWithTerritory.abbreviated_name)
  return _internal_mutable_abbreviated_name();
}
inline void PartyNameWithTerritory::set_allocated_abbreviated_name(::mead101::mead::NameWithPronunciationAndScriptCode* abbreviated_name) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete abbreviated_name_;
  }
  if (abbreviated_name) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(abbreviated_name);
    if (message_arena != submessage_arena) {
      abbreviated_name = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, abbreviated_name, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  abbreviated_name_ = abbreviated_name;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.PartyNameWithTerritory.abbreviated_name)
}

// optional .mead101.avs.CurrentTerritoryCode applicable_territory_code = 2;
inline bool PartyNameWithTerritory::_internal_has_applicable_territory_code() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || applicable_territory_code_ != nullptr);
  return value;
}
inline bool PartyNameWithTerritory::has_applicable_territory_code() const {
  return _internal_has_applicable_territory_code();
}
inline const ::mead101::avs::CurrentTerritoryCode& PartyNameWithTerritory::_internal_applicable_territory_code() const {
  const ::mead101::avs::CurrentTerritoryCode* p = applicable_territory_code_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::avs::CurrentTerritoryCode*>(
      &::mead101::avs::_CurrentTerritoryCode_default_instance_);
}
inline const ::mead101::avs::CurrentTerritoryCode& PartyNameWithTerritory::applicable_territory_code() const {
  // @@protoc_insertion_point(field_get:mead101.mead.PartyNameWithTerritory.applicable_territory_code)
  return _internal_applicable_territory_code();
}
inline void PartyNameWithTerritory::unsafe_arena_set_allocated_applicable_territory_code(
    ::mead101::avs::CurrentTerritoryCode* applicable_territory_code) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(applicable_territory_code_);
  }
  applicable_territory_code_ = applicable_territory_code;
  if (applicable_territory_code) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.PartyNameWithTerritory.applicable_territory_code)
}
inline ::mead101::avs::CurrentTerritoryCode* PartyNameWithTerritory::release_applicable_territory_code() {
  _has_bits_[0] &= ~0x00000004u;
  ::mead101::avs::CurrentTerritoryCode* temp = applicable_territory_code_;
  applicable_territory_code_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::avs::CurrentTerritoryCode* PartyNameWithTerritory::unsafe_arena_release_applicable_territory_code() {
  // @@protoc_insertion_point(field_release:mead101.mead.PartyNameWithTerritory.applicable_territory_code)
  _has_bits_[0] &= ~0x00000004u;
  ::mead101::avs::CurrentTerritoryCode* temp = applicable_territory_code_;
  applicable_territory_code_ = nullptr;
  return temp;
}
inline ::mead101::avs::CurrentTerritoryCode* PartyNameWithTerritory::_internal_mutable_applicable_territory_code() {
  _has_bits_[0] |= 0x00000004u;
  if (applicable_territory_code_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::avs::CurrentTerritoryCode>(GetArena());
    applicable_territory_code_ = p;
  }
  return applicable_territory_code_;
}
inline ::mead101::avs::CurrentTerritoryCode* PartyNameWithTerritory::mutable_applicable_territory_code() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.PartyNameWithTerritory.applicable_territory_code)
  return _internal_mutable_applicable_territory_code();
}
inline void PartyNameWithTerritory::set_allocated_applicable_territory_code(::mead101::avs::CurrentTerritoryCode* applicable_territory_code) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(applicable_territory_code_);
  }
  if (applicable_territory_code) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(applicable_territory_code)->GetArena();
    if (message_arena != submessage_arena) {
      applicable_territory_code = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, applicable_territory_code, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  applicable_territory_code_ = applicable_territory_code;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.PartyNameWithTerritory.applicable_territory_code)
}

// optional .mead101.mead.NameWithPronunciationAndScriptCode full_name = 3;
inline bool PartyNameWithTerritory::_internal_has_full_name() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || full_name_ != nullptr);
  return value;
}
inline bool PartyNameWithTerritory::has_full_name() const {
  return _internal_has_full_name();
}
inline void PartyNameWithTerritory::clear_full_name() {
  if (full_name_ != nullptr) full_name_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::mead101::mead::NameWithPronunciationAndScriptCode& PartyNameWithTerritory::_internal_full_name() const {
  const ::mead101::mead::NameWithPronunciationAndScriptCode* p = full_name_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::NameWithPronunciationAndScriptCode*>(
      &::mead101::mead::_NameWithPronunciationAndScriptCode_default_instance_);
}
inline const ::mead101::mead::NameWithPronunciationAndScriptCode& PartyNameWithTerritory::full_name() const {
  // @@protoc_insertion_point(field_get:mead101.mead.PartyNameWithTerritory.full_name)
  return _internal_full_name();
}
inline void PartyNameWithTerritory::unsafe_arena_set_allocated_full_name(
    ::mead101::mead::NameWithPronunciationAndScriptCode* full_name) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(full_name_);
  }
  full_name_ = full_name;
  if (full_name) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.PartyNameWithTerritory.full_name)
}
inline ::mead101::mead::NameWithPronunciationAndScriptCode* PartyNameWithTerritory::release_full_name() {
  _has_bits_[0] &= ~0x00000008u;
  ::mead101::mead::NameWithPronunciationAndScriptCode* temp = full_name_;
  full_name_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::NameWithPronunciationAndScriptCode* PartyNameWithTerritory::unsafe_arena_release_full_name() {
  // @@protoc_insertion_point(field_release:mead101.mead.PartyNameWithTerritory.full_name)
  _has_bits_[0] &= ~0x00000008u;
  ::mead101::mead::NameWithPronunciationAndScriptCode* temp = full_name_;
  full_name_ = nullptr;
  return temp;
}
inline ::mead101::mead::NameWithPronunciationAndScriptCode* PartyNameWithTerritory::_internal_mutable_full_name() {
  _has_bits_[0] |= 0x00000008u;
  if (full_name_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::NameWithPronunciationAndScriptCode>(GetArena());
    full_name_ = p;
  }
  return full_name_;
}
inline ::mead101::mead::NameWithPronunciationAndScriptCode* PartyNameWithTerritory::mutable_full_name() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.PartyNameWithTerritory.full_name)
  return _internal_mutable_full_name();
}
inline void PartyNameWithTerritory::set_allocated_full_name(::mead101::mead::NameWithPronunciationAndScriptCode* full_name) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete full_name_;
  }
  if (full_name) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(full_name);
    if (message_arena != submessage_arena) {
      full_name = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, full_name, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  full_name_ = full_name;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.PartyNameWithTerritory.full_name)
}

// optional .mead101.mead.NameWithPronunciation full_name_ascii_transcribed = 4;
inline bool PartyNameWithTerritory::_internal_has_full_name_ascii_transcribed() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || full_name_ascii_transcribed_ != nullptr);
  return value;
}
inline bool PartyNameWithTerritory::has_full_name_ascii_transcribed() const {
  return _internal_has_full_name_ascii_transcribed();
}
inline void PartyNameWithTerritory::clear_full_name_ascii_transcribed() {
  if (full_name_ascii_transcribed_ != nullptr) full_name_ascii_transcribed_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::mead101::mead::NameWithPronunciation& PartyNameWithTerritory::_internal_full_name_ascii_transcribed() const {
  const ::mead101::mead::NameWithPronunciation* p = full_name_ascii_transcribed_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::NameWithPronunciation*>(
      &::mead101::mead::_NameWithPronunciation_default_instance_);
}
inline const ::mead101::mead::NameWithPronunciation& PartyNameWithTerritory::full_name_ascii_transcribed() const {
  // @@protoc_insertion_point(field_get:mead101.mead.PartyNameWithTerritory.full_name_ascii_transcribed)
  return _internal_full_name_ascii_transcribed();
}
inline void PartyNameWithTerritory::unsafe_arena_set_allocated_full_name_ascii_transcribed(
    ::mead101::mead::NameWithPronunciation* full_name_ascii_transcribed) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(full_name_ascii_transcribed_);
  }
  full_name_ascii_transcribed_ = full_name_ascii_transcribed;
  if (full_name_ascii_transcribed) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.PartyNameWithTerritory.full_name_ascii_transcribed)
}
inline ::mead101::mead::NameWithPronunciation* PartyNameWithTerritory::release_full_name_ascii_transcribed() {
  _has_bits_[0] &= ~0x00000010u;
  ::mead101::mead::NameWithPronunciation* temp = full_name_ascii_transcribed_;
  full_name_ascii_transcribed_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::NameWithPronunciation* PartyNameWithTerritory::unsafe_arena_release_full_name_ascii_transcribed() {
  // @@protoc_insertion_point(field_release:mead101.mead.PartyNameWithTerritory.full_name_ascii_transcribed)
  _has_bits_[0] &= ~0x00000010u;
  ::mead101::mead::NameWithPronunciation* temp = full_name_ascii_transcribed_;
  full_name_ascii_transcribed_ = nullptr;
  return temp;
}
inline ::mead101::mead::NameWithPronunciation* PartyNameWithTerritory::_internal_mutable_full_name_ascii_transcribed() {
  _has_bits_[0] |= 0x00000010u;
  if (full_name_ascii_transcribed_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::NameWithPronunciation>(GetArena());
    full_name_ascii_transcribed_ = p;
  }
  return full_name_ascii_transcribed_;
}
inline ::mead101::mead::NameWithPronunciation* PartyNameWithTerritory::mutable_full_name_ascii_transcribed() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.PartyNameWithTerritory.full_name_ascii_transcribed)
  return _internal_mutable_full_name_ascii_transcribed();
}
inline void PartyNameWithTerritory::set_allocated_full_name_ascii_transcribed(::mead101::mead::NameWithPronunciation* full_name_ascii_transcribed) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete full_name_ascii_transcribed_;
  }
  if (full_name_ascii_transcribed) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(full_name_ascii_transcribed);
    if (message_arena != submessage_arena) {
      full_name_ascii_transcribed = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, full_name_ascii_transcribed, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  full_name_ascii_transcribed_ = full_name_ascii_transcribed;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.PartyNameWithTerritory.full_name_ascii_transcribed)
}

// optional .mead101.mead.NameWithPronunciationAndScriptCode full_name_indexed = 5;
inline bool PartyNameWithTerritory::_internal_has_full_name_indexed() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || full_name_indexed_ != nullptr);
  return value;
}
inline bool PartyNameWithTerritory::has_full_name_indexed() const {
  return _internal_has_full_name_indexed();
}
inline void PartyNameWithTerritory::clear_full_name_indexed() {
  if (full_name_indexed_ != nullptr) full_name_indexed_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::mead101::mead::NameWithPronunciationAndScriptCode& PartyNameWithTerritory::_internal_full_name_indexed() const {
  const ::mead101::mead::NameWithPronunciationAndScriptCode* p = full_name_indexed_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::NameWithPronunciationAndScriptCode*>(
      &::mead101::mead::_NameWithPronunciationAndScriptCode_default_instance_);
}
inline const ::mead101::mead::NameWithPronunciationAndScriptCode& PartyNameWithTerritory::full_name_indexed() const {
  // @@protoc_insertion_point(field_get:mead101.mead.PartyNameWithTerritory.full_name_indexed)
  return _internal_full_name_indexed();
}
inline void PartyNameWithTerritory::unsafe_arena_set_allocated_full_name_indexed(
    ::mead101::mead::NameWithPronunciationAndScriptCode* full_name_indexed) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(full_name_indexed_);
  }
  full_name_indexed_ = full_name_indexed;
  if (full_name_indexed) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.PartyNameWithTerritory.full_name_indexed)
}
inline ::mead101::mead::NameWithPronunciationAndScriptCode* PartyNameWithTerritory::release_full_name_indexed() {
  _has_bits_[0] &= ~0x00000020u;
  ::mead101::mead::NameWithPronunciationAndScriptCode* temp = full_name_indexed_;
  full_name_indexed_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::NameWithPronunciationAndScriptCode* PartyNameWithTerritory::unsafe_arena_release_full_name_indexed() {
  // @@protoc_insertion_point(field_release:mead101.mead.PartyNameWithTerritory.full_name_indexed)
  _has_bits_[0] &= ~0x00000020u;
  ::mead101::mead::NameWithPronunciationAndScriptCode* temp = full_name_indexed_;
  full_name_indexed_ = nullptr;
  return temp;
}
inline ::mead101::mead::NameWithPronunciationAndScriptCode* PartyNameWithTerritory::_internal_mutable_full_name_indexed() {
  _has_bits_[0] |= 0x00000020u;
  if (full_name_indexed_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::NameWithPronunciationAndScriptCode>(GetArena());
    full_name_indexed_ = p;
  }
  return full_name_indexed_;
}
inline ::mead101::mead::NameWithPronunciationAndScriptCode* PartyNameWithTerritory::mutable_full_name_indexed() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.PartyNameWithTerritory.full_name_indexed)
  return _internal_mutable_full_name_indexed();
}
inline void PartyNameWithTerritory::set_allocated_full_name_indexed(::mead101::mead::NameWithPronunciationAndScriptCode* full_name_indexed) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete full_name_indexed_;
  }
  if (full_name_indexed) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(full_name_indexed);
    if (message_arena != submessage_arena) {
      full_name_indexed = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, full_name_indexed, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  full_name_indexed_ = full_name_indexed;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.PartyNameWithTerritory.full_name_indexed)
}

// optional .mead101.mead.NameWithPronunciationAndScriptCode key_name = 6;
inline bool PartyNameWithTerritory::_internal_has_key_name() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || key_name_ != nullptr);
  return value;
}
inline bool PartyNameWithTerritory::has_key_name() const {
  return _internal_has_key_name();
}
inline void PartyNameWithTerritory::clear_key_name() {
  if (key_name_ != nullptr) key_name_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::mead101::mead::NameWithPronunciationAndScriptCode& PartyNameWithTerritory::_internal_key_name() const {
  const ::mead101::mead::NameWithPronunciationAndScriptCode* p = key_name_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::NameWithPronunciationAndScriptCode*>(
      &::mead101::mead::_NameWithPronunciationAndScriptCode_default_instance_);
}
inline const ::mead101::mead::NameWithPronunciationAndScriptCode& PartyNameWithTerritory::key_name() const {
  // @@protoc_insertion_point(field_get:mead101.mead.PartyNameWithTerritory.key_name)
  return _internal_key_name();
}
inline void PartyNameWithTerritory::unsafe_arena_set_allocated_key_name(
    ::mead101::mead::NameWithPronunciationAndScriptCode* key_name) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(key_name_);
  }
  key_name_ = key_name;
  if (key_name) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.PartyNameWithTerritory.key_name)
}
inline ::mead101::mead::NameWithPronunciationAndScriptCode* PartyNameWithTerritory::release_key_name() {
  _has_bits_[0] &= ~0x00000040u;
  ::mead101::mead::NameWithPronunciationAndScriptCode* temp = key_name_;
  key_name_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::NameWithPronunciationAndScriptCode* PartyNameWithTerritory::unsafe_arena_release_key_name() {
  // @@protoc_insertion_point(field_release:mead101.mead.PartyNameWithTerritory.key_name)
  _has_bits_[0] &= ~0x00000040u;
  ::mead101::mead::NameWithPronunciationAndScriptCode* temp = key_name_;
  key_name_ = nullptr;
  return temp;
}
inline ::mead101::mead::NameWithPronunciationAndScriptCode* PartyNameWithTerritory::_internal_mutable_key_name() {
  _has_bits_[0] |= 0x00000040u;
  if (key_name_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::NameWithPronunciationAndScriptCode>(GetArena());
    key_name_ = p;
  }
  return key_name_;
}
inline ::mead101::mead::NameWithPronunciationAndScriptCode* PartyNameWithTerritory::mutable_key_name() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.PartyNameWithTerritory.key_name)
  return _internal_mutable_key_name();
}
inline void PartyNameWithTerritory::set_allocated_key_name(::mead101::mead::NameWithPronunciationAndScriptCode* key_name) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete key_name_;
  }
  if (key_name) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(key_name);
    if (message_arena != submessage_arena) {
      key_name = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, key_name, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  key_name_ = key_name;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.PartyNameWithTerritory.key_name)
}

// optional string language_and_script_code = 7;
inline bool PartyNameWithTerritory::_internal_has_language_and_script_code() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PartyNameWithTerritory::has_language_and_script_code() const {
  return _internal_has_language_and_script_code();
}
inline void PartyNameWithTerritory::clear_language_and_script_code() {
  language_and_script_code_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PartyNameWithTerritory::language_and_script_code() const {
  // @@protoc_insertion_point(field_get:mead101.mead.PartyNameWithTerritory.language_and_script_code)
  return _internal_language_and_script_code();
}
inline void PartyNameWithTerritory::set_language_and_script_code(const std::string& value) {
  _internal_set_language_and_script_code(value);
  // @@protoc_insertion_point(field_set:mead101.mead.PartyNameWithTerritory.language_and_script_code)
}
inline std::string* PartyNameWithTerritory::mutable_language_and_script_code() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.PartyNameWithTerritory.language_and_script_code)
  return _internal_mutable_language_and_script_code();
}
inline const std::string& PartyNameWithTerritory::_internal_language_and_script_code() const {
  return language_and_script_code_.Get();
}
inline void PartyNameWithTerritory::_internal_set_language_and_script_code(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  language_and_script_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PartyNameWithTerritory::set_language_and_script_code(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  language_and_script_code_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.PartyNameWithTerritory.language_and_script_code)
}
inline void PartyNameWithTerritory::set_language_and_script_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  language_and_script_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.PartyNameWithTerritory.language_and_script_code)
}
inline void PartyNameWithTerritory::set_language_and_script_code(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  language_and_script_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.PartyNameWithTerritory.language_and_script_code)
}
inline std::string* PartyNameWithTerritory::_internal_mutable_language_and_script_code() {
  _has_bits_[0] |= 0x00000001u;
  return language_and_script_code_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PartyNameWithTerritory::release_language_and_script_code() {
  // @@protoc_insertion_point(field_release:mead101.mead.PartyNameWithTerritory.language_and_script_code)
  if (!_internal_has_language_and_script_code()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return language_and_script_code_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PartyNameWithTerritory::set_allocated_language_and_script_code(std::string* language_and_script_code) {
  if (language_and_script_code != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  language_and_script_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), language_and_script_code,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.PartyNameWithTerritory.language_and_script_code)
}

// optional .mead101.mead.NameWithPronunciationAndScriptCode names_after_key_name = 8;
inline bool PartyNameWithTerritory::_internal_has_names_after_key_name() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || names_after_key_name_ != nullptr);
  return value;
}
inline bool PartyNameWithTerritory::has_names_after_key_name() const {
  return _internal_has_names_after_key_name();
}
inline void PartyNameWithTerritory::clear_names_after_key_name() {
  if (names_after_key_name_ != nullptr) names_after_key_name_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
inline const ::mead101::mead::NameWithPronunciationAndScriptCode& PartyNameWithTerritory::_internal_names_after_key_name() const {
  const ::mead101::mead::NameWithPronunciationAndScriptCode* p = names_after_key_name_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::NameWithPronunciationAndScriptCode*>(
      &::mead101::mead::_NameWithPronunciationAndScriptCode_default_instance_);
}
inline const ::mead101::mead::NameWithPronunciationAndScriptCode& PartyNameWithTerritory::names_after_key_name() const {
  // @@protoc_insertion_point(field_get:mead101.mead.PartyNameWithTerritory.names_after_key_name)
  return _internal_names_after_key_name();
}
inline void PartyNameWithTerritory::unsafe_arena_set_allocated_names_after_key_name(
    ::mead101::mead::NameWithPronunciationAndScriptCode* names_after_key_name) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(names_after_key_name_);
  }
  names_after_key_name_ = names_after_key_name;
  if (names_after_key_name) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.PartyNameWithTerritory.names_after_key_name)
}
inline ::mead101::mead::NameWithPronunciationAndScriptCode* PartyNameWithTerritory::release_names_after_key_name() {
  _has_bits_[0] &= ~0x00000080u;
  ::mead101::mead::NameWithPronunciationAndScriptCode* temp = names_after_key_name_;
  names_after_key_name_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::NameWithPronunciationAndScriptCode* PartyNameWithTerritory::unsafe_arena_release_names_after_key_name() {
  // @@protoc_insertion_point(field_release:mead101.mead.PartyNameWithTerritory.names_after_key_name)
  _has_bits_[0] &= ~0x00000080u;
  ::mead101::mead::NameWithPronunciationAndScriptCode* temp = names_after_key_name_;
  names_after_key_name_ = nullptr;
  return temp;
}
inline ::mead101::mead::NameWithPronunciationAndScriptCode* PartyNameWithTerritory::_internal_mutable_names_after_key_name() {
  _has_bits_[0] |= 0x00000080u;
  if (names_after_key_name_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::NameWithPronunciationAndScriptCode>(GetArena());
    names_after_key_name_ = p;
  }
  return names_after_key_name_;
}
inline ::mead101::mead::NameWithPronunciationAndScriptCode* PartyNameWithTerritory::mutable_names_after_key_name() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.PartyNameWithTerritory.names_after_key_name)
  return _internal_mutable_names_after_key_name();
}
inline void PartyNameWithTerritory::set_allocated_names_after_key_name(::mead101::mead::NameWithPronunciationAndScriptCode* names_after_key_name) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete names_after_key_name_;
  }
  if (names_after_key_name) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(names_after_key_name);
    if (message_arena != submessage_arena) {
      names_after_key_name = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, names_after_key_name, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  names_after_key_name_ = names_after_key_name;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.PartyNameWithTerritory.names_after_key_name)
}

// optional .mead101.mead.NameWithPronunciationAndScriptCode names_before_key_name = 9;
inline bool PartyNameWithTerritory::_internal_has_names_before_key_name() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || names_before_key_name_ != nullptr);
  return value;
}
inline bool PartyNameWithTerritory::has_names_before_key_name() const {
  return _internal_has_names_before_key_name();
}
inline void PartyNameWithTerritory::clear_names_before_key_name() {
  if (names_before_key_name_ != nullptr) names_before_key_name_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
inline const ::mead101::mead::NameWithPronunciationAndScriptCode& PartyNameWithTerritory::_internal_names_before_key_name() const {
  const ::mead101::mead::NameWithPronunciationAndScriptCode* p = names_before_key_name_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::NameWithPronunciationAndScriptCode*>(
      &::mead101::mead::_NameWithPronunciationAndScriptCode_default_instance_);
}
inline const ::mead101::mead::NameWithPronunciationAndScriptCode& PartyNameWithTerritory::names_before_key_name() const {
  // @@protoc_insertion_point(field_get:mead101.mead.PartyNameWithTerritory.names_before_key_name)
  return _internal_names_before_key_name();
}
inline void PartyNameWithTerritory::unsafe_arena_set_allocated_names_before_key_name(
    ::mead101::mead::NameWithPronunciationAndScriptCode* names_before_key_name) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(names_before_key_name_);
  }
  names_before_key_name_ = names_before_key_name;
  if (names_before_key_name) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.PartyNameWithTerritory.names_before_key_name)
}
inline ::mead101::mead::NameWithPronunciationAndScriptCode* PartyNameWithTerritory::release_names_before_key_name() {
  _has_bits_[0] &= ~0x00000100u;
  ::mead101::mead::NameWithPronunciationAndScriptCode* temp = names_before_key_name_;
  names_before_key_name_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::NameWithPronunciationAndScriptCode* PartyNameWithTerritory::unsafe_arena_release_names_before_key_name() {
  // @@protoc_insertion_point(field_release:mead101.mead.PartyNameWithTerritory.names_before_key_name)
  _has_bits_[0] &= ~0x00000100u;
  ::mead101::mead::NameWithPronunciationAndScriptCode* temp = names_before_key_name_;
  names_before_key_name_ = nullptr;
  return temp;
}
inline ::mead101::mead::NameWithPronunciationAndScriptCode* PartyNameWithTerritory::_internal_mutable_names_before_key_name() {
  _has_bits_[0] |= 0x00000100u;
  if (names_before_key_name_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::NameWithPronunciationAndScriptCode>(GetArena());
    names_before_key_name_ = p;
  }
  return names_before_key_name_;
}
inline ::mead101::mead::NameWithPronunciationAndScriptCode* PartyNameWithTerritory::mutable_names_before_key_name() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.PartyNameWithTerritory.names_before_key_name)
  return _internal_mutable_names_before_key_name();
}
inline void PartyNameWithTerritory::set_allocated_names_before_key_name(::mead101::mead::NameWithPronunciationAndScriptCode* names_before_key_name) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete names_before_key_name_;
  }
  if (names_before_key_name) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(names_before_key_name);
    if (message_arena != submessage_arena) {
      names_before_key_name = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, names_before_key_name, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  names_before_key_name_ = names_before_key_name;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.PartyNameWithTerritory.names_before_key_name)
}

// -------------------------------------------------------------------

// PartyNameWithoutCode

// optional string abbreviated_name = 1;
inline bool PartyNameWithoutCode::_internal_has_abbreviated_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PartyNameWithoutCode::has_abbreviated_name() const {
  return _internal_has_abbreviated_name();
}
inline void PartyNameWithoutCode::clear_abbreviated_name() {
  abbreviated_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PartyNameWithoutCode::abbreviated_name() const {
  // @@protoc_insertion_point(field_get:mead101.mead.PartyNameWithoutCode.abbreviated_name)
  return _internal_abbreviated_name();
}
inline void PartyNameWithoutCode::set_abbreviated_name(const std::string& value) {
  _internal_set_abbreviated_name(value);
  // @@protoc_insertion_point(field_set:mead101.mead.PartyNameWithoutCode.abbreviated_name)
}
inline std::string* PartyNameWithoutCode::mutable_abbreviated_name() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.PartyNameWithoutCode.abbreviated_name)
  return _internal_mutable_abbreviated_name();
}
inline const std::string& PartyNameWithoutCode::_internal_abbreviated_name() const {
  return abbreviated_name_.Get();
}
inline void PartyNameWithoutCode::_internal_set_abbreviated_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  abbreviated_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PartyNameWithoutCode::set_abbreviated_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  abbreviated_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.PartyNameWithoutCode.abbreviated_name)
}
inline void PartyNameWithoutCode::set_abbreviated_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  abbreviated_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.PartyNameWithoutCode.abbreviated_name)
}
inline void PartyNameWithoutCode::set_abbreviated_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  abbreviated_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.PartyNameWithoutCode.abbreviated_name)
}
inline std::string* PartyNameWithoutCode::_internal_mutable_abbreviated_name() {
  _has_bits_[0] |= 0x00000001u;
  return abbreviated_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PartyNameWithoutCode::release_abbreviated_name() {
  // @@protoc_insertion_point(field_release:mead101.mead.PartyNameWithoutCode.abbreviated_name)
  if (!_internal_has_abbreviated_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return abbreviated_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PartyNameWithoutCode::set_allocated_abbreviated_name(std::string* abbreviated_name) {
  if (abbreviated_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  abbreviated_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), abbreviated_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.PartyNameWithoutCode.abbreviated_name)
}

// optional string full_name = 2;
inline bool PartyNameWithoutCode::_internal_has_full_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PartyNameWithoutCode::has_full_name() const {
  return _internal_has_full_name();
}
inline void PartyNameWithoutCode::clear_full_name() {
  full_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& PartyNameWithoutCode::full_name() const {
  // @@protoc_insertion_point(field_get:mead101.mead.PartyNameWithoutCode.full_name)
  return _internal_full_name();
}
inline void PartyNameWithoutCode::set_full_name(const std::string& value) {
  _internal_set_full_name(value);
  // @@protoc_insertion_point(field_set:mead101.mead.PartyNameWithoutCode.full_name)
}
inline std::string* PartyNameWithoutCode::mutable_full_name() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.PartyNameWithoutCode.full_name)
  return _internal_mutable_full_name();
}
inline const std::string& PartyNameWithoutCode::_internal_full_name() const {
  return full_name_.Get();
}
inline void PartyNameWithoutCode::_internal_set_full_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  full_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PartyNameWithoutCode::set_full_name(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  full_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.PartyNameWithoutCode.full_name)
}
inline void PartyNameWithoutCode::set_full_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  full_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.PartyNameWithoutCode.full_name)
}
inline void PartyNameWithoutCode::set_full_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  full_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.PartyNameWithoutCode.full_name)
}
inline std::string* PartyNameWithoutCode::_internal_mutable_full_name() {
  _has_bits_[0] |= 0x00000002u;
  return full_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PartyNameWithoutCode::release_full_name() {
  // @@protoc_insertion_point(field_release:mead101.mead.PartyNameWithoutCode.full_name)
  if (!_internal_has_full_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return full_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PartyNameWithoutCode::set_allocated_full_name(std::string* full_name) {
  if (full_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  full_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), full_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.PartyNameWithoutCode.full_name)
}

// optional string full_name_ascii_transcribed = 3;
inline bool PartyNameWithoutCode::_internal_has_full_name_ascii_transcribed() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PartyNameWithoutCode::has_full_name_ascii_transcribed() const {
  return _internal_has_full_name_ascii_transcribed();
}
inline void PartyNameWithoutCode::clear_full_name_ascii_transcribed() {
  full_name_ascii_transcribed_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& PartyNameWithoutCode::full_name_ascii_transcribed() const {
  // @@protoc_insertion_point(field_get:mead101.mead.PartyNameWithoutCode.full_name_ascii_transcribed)
  return _internal_full_name_ascii_transcribed();
}
inline void PartyNameWithoutCode::set_full_name_ascii_transcribed(const std::string& value) {
  _internal_set_full_name_ascii_transcribed(value);
  // @@protoc_insertion_point(field_set:mead101.mead.PartyNameWithoutCode.full_name_ascii_transcribed)
}
inline std::string* PartyNameWithoutCode::mutable_full_name_ascii_transcribed() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.PartyNameWithoutCode.full_name_ascii_transcribed)
  return _internal_mutable_full_name_ascii_transcribed();
}
inline const std::string& PartyNameWithoutCode::_internal_full_name_ascii_transcribed() const {
  return full_name_ascii_transcribed_.Get();
}
inline void PartyNameWithoutCode::_internal_set_full_name_ascii_transcribed(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  full_name_ascii_transcribed_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PartyNameWithoutCode::set_full_name_ascii_transcribed(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  full_name_ascii_transcribed_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.PartyNameWithoutCode.full_name_ascii_transcribed)
}
inline void PartyNameWithoutCode::set_full_name_ascii_transcribed(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  full_name_ascii_transcribed_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.PartyNameWithoutCode.full_name_ascii_transcribed)
}
inline void PartyNameWithoutCode::set_full_name_ascii_transcribed(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  full_name_ascii_transcribed_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.PartyNameWithoutCode.full_name_ascii_transcribed)
}
inline std::string* PartyNameWithoutCode::_internal_mutable_full_name_ascii_transcribed() {
  _has_bits_[0] |= 0x00000004u;
  return full_name_ascii_transcribed_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PartyNameWithoutCode::release_full_name_ascii_transcribed() {
  // @@protoc_insertion_point(field_release:mead101.mead.PartyNameWithoutCode.full_name_ascii_transcribed)
  if (!_internal_has_full_name_ascii_transcribed()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return full_name_ascii_transcribed_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PartyNameWithoutCode::set_allocated_full_name_ascii_transcribed(std::string* full_name_ascii_transcribed) {
  if (full_name_ascii_transcribed != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  full_name_ascii_transcribed_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), full_name_ascii_transcribed,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.PartyNameWithoutCode.full_name_ascii_transcribed)
}

// optional string full_name_indexed = 4;
inline bool PartyNameWithoutCode::_internal_has_full_name_indexed() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PartyNameWithoutCode::has_full_name_indexed() const {
  return _internal_has_full_name_indexed();
}
inline void PartyNameWithoutCode::clear_full_name_indexed() {
  full_name_indexed_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& PartyNameWithoutCode::full_name_indexed() const {
  // @@protoc_insertion_point(field_get:mead101.mead.PartyNameWithoutCode.full_name_indexed)
  return _internal_full_name_indexed();
}
inline void PartyNameWithoutCode::set_full_name_indexed(const std::string& value) {
  _internal_set_full_name_indexed(value);
  // @@protoc_insertion_point(field_set:mead101.mead.PartyNameWithoutCode.full_name_indexed)
}
inline std::string* PartyNameWithoutCode::mutable_full_name_indexed() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.PartyNameWithoutCode.full_name_indexed)
  return _internal_mutable_full_name_indexed();
}
inline const std::string& PartyNameWithoutCode::_internal_full_name_indexed() const {
  return full_name_indexed_.Get();
}
inline void PartyNameWithoutCode::_internal_set_full_name_indexed(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  full_name_indexed_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PartyNameWithoutCode::set_full_name_indexed(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  full_name_indexed_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.PartyNameWithoutCode.full_name_indexed)
}
inline void PartyNameWithoutCode::set_full_name_indexed(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  full_name_indexed_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.PartyNameWithoutCode.full_name_indexed)
}
inline void PartyNameWithoutCode::set_full_name_indexed(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  full_name_indexed_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.PartyNameWithoutCode.full_name_indexed)
}
inline std::string* PartyNameWithoutCode::_internal_mutable_full_name_indexed() {
  _has_bits_[0] |= 0x00000008u;
  return full_name_indexed_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PartyNameWithoutCode::release_full_name_indexed() {
  // @@protoc_insertion_point(field_release:mead101.mead.PartyNameWithoutCode.full_name_indexed)
  if (!_internal_has_full_name_indexed()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return full_name_indexed_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PartyNameWithoutCode::set_allocated_full_name_indexed(std::string* full_name_indexed) {
  if (full_name_indexed != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  full_name_indexed_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), full_name_indexed,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.PartyNameWithoutCode.full_name_indexed)
}

// optional string key_name = 5;
inline bool PartyNameWithoutCode::_internal_has_key_name() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool PartyNameWithoutCode::has_key_name() const {
  return _internal_has_key_name();
}
inline void PartyNameWithoutCode::clear_key_name() {
  key_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& PartyNameWithoutCode::key_name() const {
  // @@protoc_insertion_point(field_get:mead101.mead.PartyNameWithoutCode.key_name)
  return _internal_key_name();
}
inline void PartyNameWithoutCode::set_key_name(const std::string& value) {
  _internal_set_key_name(value);
  // @@protoc_insertion_point(field_set:mead101.mead.PartyNameWithoutCode.key_name)
}
inline std::string* PartyNameWithoutCode::mutable_key_name() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.PartyNameWithoutCode.key_name)
  return _internal_mutable_key_name();
}
inline const std::string& PartyNameWithoutCode::_internal_key_name() const {
  return key_name_.Get();
}
inline void PartyNameWithoutCode::_internal_set_key_name(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  key_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PartyNameWithoutCode::set_key_name(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  key_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.PartyNameWithoutCode.key_name)
}
inline void PartyNameWithoutCode::set_key_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  key_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.PartyNameWithoutCode.key_name)
}
inline void PartyNameWithoutCode::set_key_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  key_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.PartyNameWithoutCode.key_name)
}
inline std::string* PartyNameWithoutCode::_internal_mutable_key_name() {
  _has_bits_[0] |= 0x00000010u;
  return key_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PartyNameWithoutCode::release_key_name() {
  // @@protoc_insertion_point(field_release:mead101.mead.PartyNameWithoutCode.key_name)
  if (!_internal_has_key_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return key_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PartyNameWithoutCode::set_allocated_key_name(std::string* key_name) {
  if (key_name != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  key_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.PartyNameWithoutCode.key_name)
}

// optional string names_after_key_name = 6;
inline bool PartyNameWithoutCode::_internal_has_names_after_key_name() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool PartyNameWithoutCode::has_names_after_key_name() const {
  return _internal_has_names_after_key_name();
}
inline void PartyNameWithoutCode::clear_names_after_key_name() {
  names_after_key_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& PartyNameWithoutCode::names_after_key_name() const {
  // @@protoc_insertion_point(field_get:mead101.mead.PartyNameWithoutCode.names_after_key_name)
  return _internal_names_after_key_name();
}
inline void PartyNameWithoutCode::set_names_after_key_name(const std::string& value) {
  _internal_set_names_after_key_name(value);
  // @@protoc_insertion_point(field_set:mead101.mead.PartyNameWithoutCode.names_after_key_name)
}
inline std::string* PartyNameWithoutCode::mutable_names_after_key_name() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.PartyNameWithoutCode.names_after_key_name)
  return _internal_mutable_names_after_key_name();
}
inline const std::string& PartyNameWithoutCode::_internal_names_after_key_name() const {
  return names_after_key_name_.Get();
}
inline void PartyNameWithoutCode::_internal_set_names_after_key_name(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  names_after_key_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PartyNameWithoutCode::set_names_after_key_name(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  names_after_key_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.PartyNameWithoutCode.names_after_key_name)
}
inline void PartyNameWithoutCode::set_names_after_key_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  names_after_key_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.PartyNameWithoutCode.names_after_key_name)
}
inline void PartyNameWithoutCode::set_names_after_key_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000020u;
  names_after_key_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.PartyNameWithoutCode.names_after_key_name)
}
inline std::string* PartyNameWithoutCode::_internal_mutable_names_after_key_name() {
  _has_bits_[0] |= 0x00000020u;
  return names_after_key_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PartyNameWithoutCode::release_names_after_key_name() {
  // @@protoc_insertion_point(field_release:mead101.mead.PartyNameWithoutCode.names_after_key_name)
  if (!_internal_has_names_after_key_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return names_after_key_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PartyNameWithoutCode::set_allocated_names_after_key_name(std::string* names_after_key_name) {
  if (names_after_key_name != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  names_after_key_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), names_after_key_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.PartyNameWithoutCode.names_after_key_name)
}

// optional string names_before_key_name = 7;
inline bool PartyNameWithoutCode::_internal_has_names_before_key_name() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool PartyNameWithoutCode::has_names_before_key_name() const {
  return _internal_has_names_before_key_name();
}
inline void PartyNameWithoutCode::clear_names_before_key_name() {
  names_before_key_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& PartyNameWithoutCode::names_before_key_name() const {
  // @@protoc_insertion_point(field_get:mead101.mead.PartyNameWithoutCode.names_before_key_name)
  return _internal_names_before_key_name();
}
inline void PartyNameWithoutCode::set_names_before_key_name(const std::string& value) {
  _internal_set_names_before_key_name(value);
  // @@protoc_insertion_point(field_set:mead101.mead.PartyNameWithoutCode.names_before_key_name)
}
inline std::string* PartyNameWithoutCode::mutable_names_before_key_name() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.PartyNameWithoutCode.names_before_key_name)
  return _internal_mutable_names_before_key_name();
}
inline const std::string& PartyNameWithoutCode::_internal_names_before_key_name() const {
  return names_before_key_name_.Get();
}
inline void PartyNameWithoutCode::_internal_set_names_before_key_name(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  names_before_key_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PartyNameWithoutCode::set_names_before_key_name(std::string&& value) {
  _has_bits_[0] |= 0x00000040u;
  names_before_key_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.PartyNameWithoutCode.names_before_key_name)
}
inline void PartyNameWithoutCode::set_names_before_key_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000040u;
  names_before_key_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.PartyNameWithoutCode.names_before_key_name)
}
inline void PartyNameWithoutCode::set_names_before_key_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000040u;
  names_before_key_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.PartyNameWithoutCode.names_before_key_name)
}
inline std::string* PartyNameWithoutCode::_internal_mutable_names_before_key_name() {
  _has_bits_[0] |= 0x00000040u;
  return names_before_key_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PartyNameWithoutCode::release_names_before_key_name() {
  // @@protoc_insertion_point(field_release:mead101.mead.PartyNameWithoutCode.names_before_key_name)
  if (!_internal_has_names_before_key_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  return names_before_key_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PartyNameWithoutCode::set_allocated_names_before_key_name(std::string* names_before_key_name) {
  if (names_before_key_name != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  names_before_key_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), names_before_key_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.PartyNameWithoutCode.names_before_key_name)
}

// -------------------------------------------------------------------

// PartyWithNames

// optional string d_p_i_d = 1;
inline bool PartyWithNames::_internal_has_d_p_i_d() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PartyWithNames::has_d_p_i_d() const {
  return _internal_has_d_p_i_d();
}
inline void PartyWithNames::clear_d_p_i_d() {
  d_p_i_d_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PartyWithNames::d_p_i_d() const {
  // @@protoc_insertion_point(field_get:mead101.mead.PartyWithNames.d_p_i_d)
  return _internal_d_p_i_d();
}
inline void PartyWithNames::set_d_p_i_d(const std::string& value) {
  _internal_set_d_p_i_d(value);
  // @@protoc_insertion_point(field_set:mead101.mead.PartyWithNames.d_p_i_d)
}
inline std::string* PartyWithNames::mutable_d_p_i_d() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.PartyWithNames.d_p_i_d)
  return _internal_mutable_d_p_i_d();
}
inline const std::string& PartyWithNames::_internal_d_p_i_d() const {
  return d_p_i_d_.Get();
}
inline void PartyWithNames::_internal_set_d_p_i_d(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  d_p_i_d_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PartyWithNames::set_d_p_i_d(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  d_p_i_d_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.PartyWithNames.d_p_i_d)
}
inline void PartyWithNames::set_d_p_i_d(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  d_p_i_d_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.PartyWithNames.d_p_i_d)
}
inline void PartyWithNames::set_d_p_i_d(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  d_p_i_d_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.PartyWithNames.d_p_i_d)
}
inline std::string* PartyWithNames::_internal_mutable_d_p_i_d() {
  _has_bits_[0] |= 0x00000001u;
  return d_p_i_d_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PartyWithNames::release_d_p_i_d() {
  // @@protoc_insertion_point(field_release:mead101.mead.PartyWithNames.d_p_i_d)
  if (!_internal_has_d_p_i_d()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return d_p_i_d_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PartyWithNames::set_allocated_d_p_i_d(std::string* d_p_i_d) {
  if (d_p_i_d != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  d_p_i_d_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), d_p_i_d,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.PartyWithNames.d_p_i_d)
}

// optional string i_p_n = 2;
inline bool PartyWithNames::_internal_has_i_p_n() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PartyWithNames::has_i_p_n() const {
  return _internal_has_i_p_n();
}
inline void PartyWithNames::clear_i_p_n() {
  i_p_n_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& PartyWithNames::i_p_n() const {
  // @@protoc_insertion_point(field_get:mead101.mead.PartyWithNames.i_p_n)
  return _internal_i_p_n();
}
inline void PartyWithNames::set_i_p_n(const std::string& value) {
  _internal_set_i_p_n(value);
  // @@protoc_insertion_point(field_set:mead101.mead.PartyWithNames.i_p_n)
}
inline std::string* PartyWithNames::mutable_i_p_n() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.PartyWithNames.i_p_n)
  return _internal_mutable_i_p_n();
}
inline const std::string& PartyWithNames::_internal_i_p_n() const {
  return i_p_n_.Get();
}
inline void PartyWithNames::_internal_set_i_p_n(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  i_p_n_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PartyWithNames::set_i_p_n(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  i_p_n_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.PartyWithNames.i_p_n)
}
inline void PartyWithNames::set_i_p_n(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  i_p_n_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.PartyWithNames.i_p_n)
}
inline void PartyWithNames::set_i_p_n(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  i_p_n_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.PartyWithNames.i_p_n)
}
inline std::string* PartyWithNames::_internal_mutable_i_p_n() {
  _has_bits_[0] |= 0x00000002u;
  return i_p_n_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PartyWithNames::release_i_p_n() {
  // @@protoc_insertion_point(field_release:mead101.mead.PartyWithNames.i_p_n)
  if (!_internal_has_i_p_n()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return i_p_n_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PartyWithNames::set_allocated_i_p_n(std::string* i_p_n) {
  if (i_p_n != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  i_p_n_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), i_p_n,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.PartyWithNames.i_p_n)
}

// optional string i_s_n_i = 3;
inline bool PartyWithNames::_internal_has_i_s_n_i() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PartyWithNames::has_i_s_n_i() const {
  return _internal_has_i_s_n_i();
}
inline void PartyWithNames::clear_i_s_n_i() {
  i_s_n_i_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& PartyWithNames::i_s_n_i() const {
  // @@protoc_insertion_point(field_get:mead101.mead.PartyWithNames.i_s_n_i)
  return _internal_i_s_n_i();
}
inline void PartyWithNames::set_i_s_n_i(const std::string& value) {
  _internal_set_i_s_n_i(value);
  // @@protoc_insertion_point(field_set:mead101.mead.PartyWithNames.i_s_n_i)
}
inline std::string* PartyWithNames::mutable_i_s_n_i() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.PartyWithNames.i_s_n_i)
  return _internal_mutable_i_s_n_i();
}
inline const std::string& PartyWithNames::_internal_i_s_n_i() const {
  return i_s_n_i_.Get();
}
inline void PartyWithNames::_internal_set_i_s_n_i(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  i_s_n_i_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PartyWithNames::set_i_s_n_i(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  i_s_n_i_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.PartyWithNames.i_s_n_i)
}
inline void PartyWithNames::set_i_s_n_i(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  i_s_n_i_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.PartyWithNames.i_s_n_i)
}
inline void PartyWithNames::set_i_s_n_i(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  i_s_n_i_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.PartyWithNames.i_s_n_i)
}
inline std::string* PartyWithNames::_internal_mutable_i_s_n_i() {
  _has_bits_[0] |= 0x00000004u;
  return i_s_n_i_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PartyWithNames::release_i_s_n_i() {
  // @@protoc_insertion_point(field_release:mead101.mead.PartyWithNames.i_s_n_i)
  if (!_internal_has_i_s_n_i()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return i_s_n_i_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PartyWithNames::set_allocated_i_s_n_i(std::string* i_s_n_i) {
  if (i_s_n_i != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  i_s_n_i_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), i_s_n_i,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.PartyWithNames.i_s_n_i)
}

// optional string ipi_name_number = 4;
inline bool PartyWithNames::_internal_has_ipi_name_number() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PartyWithNames::has_ipi_name_number() const {
  return _internal_has_ipi_name_number();
}
inline void PartyWithNames::clear_ipi_name_number() {
  ipi_name_number_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& PartyWithNames::ipi_name_number() const {
  // @@protoc_insertion_point(field_get:mead101.mead.PartyWithNames.ipi_name_number)
  return _internal_ipi_name_number();
}
inline void PartyWithNames::set_ipi_name_number(const std::string& value) {
  _internal_set_ipi_name_number(value);
  // @@protoc_insertion_point(field_set:mead101.mead.PartyWithNames.ipi_name_number)
}
inline std::string* PartyWithNames::mutable_ipi_name_number() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.PartyWithNames.ipi_name_number)
  return _internal_mutable_ipi_name_number();
}
inline const std::string& PartyWithNames::_internal_ipi_name_number() const {
  return ipi_name_number_.Get();
}
inline void PartyWithNames::_internal_set_ipi_name_number(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  ipi_name_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PartyWithNames::set_ipi_name_number(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  ipi_name_number_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.PartyWithNames.ipi_name_number)
}
inline void PartyWithNames::set_ipi_name_number(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  ipi_name_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.PartyWithNames.ipi_name_number)
}
inline void PartyWithNames::set_ipi_name_number(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  ipi_name_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.PartyWithNames.ipi_name_number)
}
inline std::string* PartyWithNames::_internal_mutable_ipi_name_number() {
  _has_bits_[0] |= 0x00000008u;
  return ipi_name_number_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PartyWithNames::release_ipi_name_number() {
  // @@protoc_insertion_point(field_release:mead101.mead.PartyWithNames.ipi_name_number)
  if (!_internal_has_ipi_name_number()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return ipi_name_number_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PartyWithNames::set_allocated_ipi_name_number(std::string* ipi_name_number) {
  if (ipi_name_number != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  ipi_name_number_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ipi_name_number,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.PartyWithNames.ipi_name_number)
}

// repeated .mead101.mead.PartyNameWithTerritory name = 5;
inline int PartyWithNames::_internal_name_size() const {
  return name_.size();
}
inline int PartyWithNames::name_size() const {
  return _internal_name_size();
}
inline void PartyWithNames::clear_name() {
  name_.Clear();
}
inline ::mead101::mead::PartyNameWithTerritory* PartyWithNames::mutable_name(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.PartyWithNames.name)
  return name_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::PartyNameWithTerritory >*
PartyWithNames::mutable_name() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.PartyWithNames.name)
  return &name_;
}
inline const ::mead101::mead::PartyNameWithTerritory& PartyWithNames::_internal_name(int index) const {
  return name_.Get(index);
}
inline const ::mead101::mead::PartyNameWithTerritory& PartyWithNames::name(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.PartyWithNames.name)
  return _internal_name(index);
}
inline ::mead101::mead::PartyNameWithTerritory* PartyWithNames::_internal_add_name() {
  return name_.Add();
}
inline ::mead101::mead::PartyNameWithTerritory* PartyWithNames::add_name() {
  // @@protoc_insertion_point(field_add:mead101.mead.PartyWithNames.name)
  return _internal_add_name();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::PartyNameWithTerritory >&
PartyWithNames::name() const {
  // @@protoc_insertion_point(field_list:mead101.mead.PartyWithNames.name)
  return name_;
}

// repeated .mead101.mead.ProprietaryId proprietary_id = 6;
inline int PartyWithNames::_internal_proprietary_id_size() const {
  return proprietary_id_.size();
}
inline int PartyWithNames::proprietary_id_size() const {
  return _internal_proprietary_id_size();
}
inline void PartyWithNames::clear_proprietary_id() {
  proprietary_id_.Clear();
}
inline ::mead101::mead::ProprietaryId* PartyWithNames::mutable_proprietary_id(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.PartyWithNames.proprietary_id)
  return proprietary_id_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::ProprietaryId >*
PartyWithNames::mutable_proprietary_id() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.PartyWithNames.proprietary_id)
  return &proprietary_id_;
}
inline const ::mead101::mead::ProprietaryId& PartyWithNames::_internal_proprietary_id(int index) const {
  return proprietary_id_.Get(index);
}
inline const ::mead101::mead::ProprietaryId& PartyWithNames::proprietary_id(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.PartyWithNames.proprietary_id)
  return _internal_proprietary_id(index);
}
inline ::mead101::mead::ProprietaryId* PartyWithNames::_internal_add_proprietary_id() {
  return proprietary_id_.Add();
}
inline ::mead101::mead::ProprietaryId* PartyWithNames::add_proprietary_id() {
  // @@protoc_insertion_point(field_add:mead101.mead.PartyWithNames.proprietary_id)
  return _internal_add_proprietary_id();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::ProprietaryId >&
PartyWithNames::proprietary_id() const {
  // @@protoc_insertion_point(field_list:mead101.mead.PartyWithNames.proprietary_id)
  return proprietary_id_;
}

// -------------------------------------------------------------------

// PartyWithRole

// optional string d_p_i_d = 1;
inline bool PartyWithRole::_internal_has_d_p_i_d() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PartyWithRole::has_d_p_i_d() const {
  return _internal_has_d_p_i_d();
}
inline void PartyWithRole::clear_d_p_i_d() {
  d_p_i_d_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PartyWithRole::d_p_i_d() const {
  // @@protoc_insertion_point(field_get:mead101.mead.PartyWithRole.d_p_i_d)
  return _internal_d_p_i_d();
}
inline void PartyWithRole::set_d_p_i_d(const std::string& value) {
  _internal_set_d_p_i_d(value);
  // @@protoc_insertion_point(field_set:mead101.mead.PartyWithRole.d_p_i_d)
}
inline std::string* PartyWithRole::mutable_d_p_i_d() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.PartyWithRole.d_p_i_d)
  return _internal_mutable_d_p_i_d();
}
inline const std::string& PartyWithRole::_internal_d_p_i_d() const {
  return d_p_i_d_.Get();
}
inline void PartyWithRole::_internal_set_d_p_i_d(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  d_p_i_d_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PartyWithRole::set_d_p_i_d(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  d_p_i_d_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.PartyWithRole.d_p_i_d)
}
inline void PartyWithRole::set_d_p_i_d(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  d_p_i_d_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.PartyWithRole.d_p_i_d)
}
inline void PartyWithRole::set_d_p_i_d(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  d_p_i_d_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.PartyWithRole.d_p_i_d)
}
inline std::string* PartyWithRole::_internal_mutable_d_p_i_d() {
  _has_bits_[0] |= 0x00000001u;
  return d_p_i_d_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PartyWithRole::release_d_p_i_d() {
  // @@protoc_insertion_point(field_release:mead101.mead.PartyWithRole.d_p_i_d)
  if (!_internal_has_d_p_i_d()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return d_p_i_d_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PartyWithRole::set_allocated_d_p_i_d(std::string* d_p_i_d) {
  if (d_p_i_d != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  d_p_i_d_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), d_p_i_d,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.PartyWithRole.d_p_i_d)
}

// optional string i_p_n = 2;
inline bool PartyWithRole::_internal_has_i_p_n() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PartyWithRole::has_i_p_n() const {
  return _internal_has_i_p_n();
}
inline void PartyWithRole::clear_i_p_n() {
  i_p_n_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& PartyWithRole::i_p_n() const {
  // @@protoc_insertion_point(field_get:mead101.mead.PartyWithRole.i_p_n)
  return _internal_i_p_n();
}
inline void PartyWithRole::set_i_p_n(const std::string& value) {
  _internal_set_i_p_n(value);
  // @@protoc_insertion_point(field_set:mead101.mead.PartyWithRole.i_p_n)
}
inline std::string* PartyWithRole::mutable_i_p_n() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.PartyWithRole.i_p_n)
  return _internal_mutable_i_p_n();
}
inline const std::string& PartyWithRole::_internal_i_p_n() const {
  return i_p_n_.Get();
}
inline void PartyWithRole::_internal_set_i_p_n(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  i_p_n_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PartyWithRole::set_i_p_n(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  i_p_n_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.PartyWithRole.i_p_n)
}
inline void PartyWithRole::set_i_p_n(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  i_p_n_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.PartyWithRole.i_p_n)
}
inline void PartyWithRole::set_i_p_n(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  i_p_n_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.PartyWithRole.i_p_n)
}
inline std::string* PartyWithRole::_internal_mutable_i_p_n() {
  _has_bits_[0] |= 0x00000002u;
  return i_p_n_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PartyWithRole::release_i_p_n() {
  // @@protoc_insertion_point(field_release:mead101.mead.PartyWithRole.i_p_n)
  if (!_internal_has_i_p_n()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return i_p_n_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PartyWithRole::set_allocated_i_p_n(std::string* i_p_n) {
  if (i_p_n != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  i_p_n_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), i_p_n,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.PartyWithRole.i_p_n)
}

// optional string i_s_n_i = 3;
inline bool PartyWithRole::_internal_has_i_s_n_i() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PartyWithRole::has_i_s_n_i() const {
  return _internal_has_i_s_n_i();
}
inline void PartyWithRole::clear_i_s_n_i() {
  i_s_n_i_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& PartyWithRole::i_s_n_i() const {
  // @@protoc_insertion_point(field_get:mead101.mead.PartyWithRole.i_s_n_i)
  return _internal_i_s_n_i();
}
inline void PartyWithRole::set_i_s_n_i(const std::string& value) {
  _internal_set_i_s_n_i(value);
  // @@protoc_insertion_point(field_set:mead101.mead.PartyWithRole.i_s_n_i)
}
inline std::string* PartyWithRole::mutable_i_s_n_i() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.PartyWithRole.i_s_n_i)
  return _internal_mutable_i_s_n_i();
}
inline const std::string& PartyWithRole::_internal_i_s_n_i() const {
  return i_s_n_i_.Get();
}
inline void PartyWithRole::_internal_set_i_s_n_i(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  i_s_n_i_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PartyWithRole::set_i_s_n_i(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  i_s_n_i_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.PartyWithRole.i_s_n_i)
}
inline void PartyWithRole::set_i_s_n_i(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  i_s_n_i_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.PartyWithRole.i_s_n_i)
}
inline void PartyWithRole::set_i_s_n_i(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  i_s_n_i_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.PartyWithRole.i_s_n_i)
}
inline std::string* PartyWithRole::_internal_mutable_i_s_n_i() {
  _has_bits_[0] |= 0x00000004u;
  return i_s_n_i_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PartyWithRole::release_i_s_n_i() {
  // @@protoc_insertion_point(field_release:mead101.mead.PartyWithRole.i_s_n_i)
  if (!_internal_has_i_s_n_i()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return i_s_n_i_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PartyWithRole::set_allocated_i_s_n_i(std::string* i_s_n_i) {
  if (i_s_n_i != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  i_s_n_i_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), i_s_n_i,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.PartyWithRole.i_s_n_i)
}

// optional string ipi_name_number = 4;
inline bool PartyWithRole::_internal_has_ipi_name_number() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PartyWithRole::has_ipi_name_number() const {
  return _internal_has_ipi_name_number();
}
inline void PartyWithRole::clear_ipi_name_number() {
  ipi_name_number_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& PartyWithRole::ipi_name_number() const {
  // @@protoc_insertion_point(field_get:mead101.mead.PartyWithRole.ipi_name_number)
  return _internal_ipi_name_number();
}
inline void PartyWithRole::set_ipi_name_number(const std::string& value) {
  _internal_set_ipi_name_number(value);
  // @@protoc_insertion_point(field_set:mead101.mead.PartyWithRole.ipi_name_number)
}
inline std::string* PartyWithRole::mutable_ipi_name_number() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.PartyWithRole.ipi_name_number)
  return _internal_mutable_ipi_name_number();
}
inline const std::string& PartyWithRole::_internal_ipi_name_number() const {
  return ipi_name_number_.Get();
}
inline void PartyWithRole::_internal_set_ipi_name_number(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  ipi_name_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PartyWithRole::set_ipi_name_number(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  ipi_name_number_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.PartyWithRole.ipi_name_number)
}
inline void PartyWithRole::set_ipi_name_number(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  ipi_name_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.PartyWithRole.ipi_name_number)
}
inline void PartyWithRole::set_ipi_name_number(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  ipi_name_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.PartyWithRole.ipi_name_number)
}
inline std::string* PartyWithRole::_internal_mutable_ipi_name_number() {
  _has_bits_[0] |= 0x00000008u;
  return ipi_name_number_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PartyWithRole::release_ipi_name_number() {
  // @@protoc_insertion_point(field_release:mead101.mead.PartyWithRole.ipi_name_number)
  if (!_internal_has_ipi_name_number()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return ipi_name_number_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PartyWithRole::set_allocated_ipi_name_number(std::string* ipi_name_number) {
  if (ipi_name_number != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  ipi_name_number_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ipi_name_number,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.PartyWithRole.ipi_name_number)
}

// optional .mead101.mead.PartyNameWithPronunciation party_name = 5;
inline bool PartyWithRole::_internal_has_party_name() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || party_name_ != nullptr);
  return value;
}
inline bool PartyWithRole::has_party_name() const {
  return _internal_has_party_name();
}
inline void PartyWithRole::clear_party_name() {
  if (party_name_ != nullptr) party_name_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::mead101::mead::PartyNameWithPronunciation& PartyWithRole::_internal_party_name() const {
  const ::mead101::mead::PartyNameWithPronunciation* p = party_name_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::PartyNameWithPronunciation*>(
      &::mead101::mead::_PartyNameWithPronunciation_default_instance_);
}
inline const ::mead101::mead::PartyNameWithPronunciation& PartyWithRole::party_name() const {
  // @@protoc_insertion_point(field_get:mead101.mead.PartyWithRole.party_name)
  return _internal_party_name();
}
inline void PartyWithRole::unsafe_arena_set_allocated_party_name(
    ::mead101::mead::PartyNameWithPronunciation* party_name) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(party_name_);
  }
  party_name_ = party_name;
  if (party_name) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.PartyWithRole.party_name)
}
inline ::mead101::mead::PartyNameWithPronunciation* PartyWithRole::release_party_name() {
  _has_bits_[0] &= ~0x00000010u;
  ::mead101::mead::PartyNameWithPronunciation* temp = party_name_;
  party_name_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::PartyNameWithPronunciation* PartyWithRole::unsafe_arena_release_party_name() {
  // @@protoc_insertion_point(field_release:mead101.mead.PartyWithRole.party_name)
  _has_bits_[0] &= ~0x00000010u;
  ::mead101::mead::PartyNameWithPronunciation* temp = party_name_;
  party_name_ = nullptr;
  return temp;
}
inline ::mead101::mead::PartyNameWithPronunciation* PartyWithRole::_internal_mutable_party_name() {
  _has_bits_[0] |= 0x00000010u;
  if (party_name_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::PartyNameWithPronunciation>(GetArena());
    party_name_ = p;
  }
  return party_name_;
}
inline ::mead101::mead::PartyNameWithPronunciation* PartyWithRole::mutable_party_name() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.PartyWithRole.party_name)
  return _internal_mutable_party_name();
}
inline void PartyWithRole::set_allocated_party_name(::mead101::mead::PartyNameWithPronunciation* party_name) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete party_name_;
  }
  if (party_name) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(party_name);
    if (message_arena != submessage_arena) {
      party_name = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, party_name, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  party_name_ = party_name;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.PartyWithRole.party_name)
}

// repeated .mead101.mead.ProprietaryId proprietary_id = 6;
inline int PartyWithRole::_internal_proprietary_id_size() const {
  return proprietary_id_.size();
}
inline int PartyWithRole::proprietary_id_size() const {
  return _internal_proprietary_id_size();
}
inline void PartyWithRole::clear_proprietary_id() {
  proprietary_id_.Clear();
}
inline ::mead101::mead::ProprietaryId* PartyWithRole::mutable_proprietary_id(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.PartyWithRole.proprietary_id)
  return proprietary_id_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::ProprietaryId >*
PartyWithRole::mutable_proprietary_id() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.PartyWithRole.proprietary_id)
  return &proprietary_id_;
}
inline const ::mead101::mead::ProprietaryId& PartyWithRole::_internal_proprietary_id(int index) const {
  return proprietary_id_.Get(index);
}
inline const ::mead101::mead::ProprietaryId& PartyWithRole::proprietary_id(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.PartyWithRole.proprietary_id)
  return _internal_proprietary_id(index);
}
inline ::mead101::mead::ProprietaryId* PartyWithRole::_internal_add_proprietary_id() {
  return proprietary_id_.Add();
}
inline ::mead101::mead::ProprietaryId* PartyWithRole::add_proprietary_id() {
  // @@protoc_insertion_point(field_add:mead101.mead.PartyWithRole.proprietary_id)
  return _internal_add_proprietary_id();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::ProprietaryId >&
PartyWithRole::proprietary_id() const {
  // @@protoc_insertion_point(field_list:mead101.mead.PartyWithRole.proprietary_id)
  return proprietary_id_;
}

// optional .mead101.mead.ResourceContributorRole role = 7;
inline bool PartyWithRole::_internal_has_role() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || role_ != nullptr);
  return value;
}
inline bool PartyWithRole::has_role() const {
  return _internal_has_role();
}
inline void PartyWithRole::clear_role() {
  if (role_ != nullptr) role_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::mead101::mead::ResourceContributorRole& PartyWithRole::_internal_role() const {
  const ::mead101::mead::ResourceContributorRole* p = role_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::ResourceContributorRole*>(
      &::mead101::mead::_ResourceContributorRole_default_instance_);
}
inline const ::mead101::mead::ResourceContributorRole& PartyWithRole::role() const {
  // @@protoc_insertion_point(field_get:mead101.mead.PartyWithRole.role)
  return _internal_role();
}
inline void PartyWithRole::unsafe_arena_set_allocated_role(
    ::mead101::mead::ResourceContributorRole* role) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(role_);
  }
  role_ = role;
  if (role) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.PartyWithRole.role)
}
inline ::mead101::mead::ResourceContributorRole* PartyWithRole::release_role() {
  _has_bits_[0] &= ~0x00000020u;
  ::mead101::mead::ResourceContributorRole* temp = role_;
  role_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::ResourceContributorRole* PartyWithRole::unsafe_arena_release_role() {
  // @@protoc_insertion_point(field_release:mead101.mead.PartyWithRole.role)
  _has_bits_[0] &= ~0x00000020u;
  ::mead101::mead::ResourceContributorRole* temp = role_;
  role_ = nullptr;
  return temp;
}
inline ::mead101::mead::ResourceContributorRole* PartyWithRole::_internal_mutable_role() {
  _has_bits_[0] |= 0x00000020u;
  if (role_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::ResourceContributorRole>(GetArena());
    role_ = p;
  }
  return role_;
}
inline ::mead101::mead::ResourceContributorRole* PartyWithRole::mutable_role() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.PartyWithRole.role)
  return _internal_mutable_role();
}
inline void PartyWithRole::set_allocated_role(::mead101::mead::ResourceContributorRole* role) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete role_;
  }
  if (role) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(role);
    if (message_arena != submessage_arena) {
      role = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, role, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  role_ = role;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.PartyWithRole.role)
}

// -------------------------------------------------------------------

// Period

// optional .mead101.mead.EventDate end_date = 1;
inline bool Period::_internal_has_end_date() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || end_date_ != nullptr);
  return value;
}
inline bool Period::has_end_date() const {
  return _internal_has_end_date();
}
inline void Period::clear_end_date() {
  if (end_date_ != nullptr) end_date_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::mead101::mead::EventDate& Period::_internal_end_date() const {
  const ::mead101::mead::EventDate* p = end_date_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::EventDate*>(
      &::mead101::mead::_EventDate_default_instance_);
}
inline const ::mead101::mead::EventDate& Period::end_date() const {
  // @@protoc_insertion_point(field_get:mead101.mead.Period.end_date)
  return _internal_end_date();
}
inline void Period::unsafe_arena_set_allocated_end_date(
    ::mead101::mead::EventDate* end_date) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_date_);
  }
  end_date_ = end_date;
  if (end_date) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.Period.end_date)
}
inline ::mead101::mead::EventDate* Period::release_end_date() {
  _has_bits_[0] &= ~0x00000001u;
  ::mead101::mead::EventDate* temp = end_date_;
  end_date_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::EventDate* Period::unsafe_arena_release_end_date() {
  // @@protoc_insertion_point(field_release:mead101.mead.Period.end_date)
  _has_bits_[0] &= ~0x00000001u;
  ::mead101::mead::EventDate* temp = end_date_;
  end_date_ = nullptr;
  return temp;
}
inline ::mead101::mead::EventDate* Period::_internal_mutable_end_date() {
  _has_bits_[0] |= 0x00000001u;
  if (end_date_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::EventDate>(GetArena());
    end_date_ = p;
  }
  return end_date_;
}
inline ::mead101::mead::EventDate* Period::mutable_end_date() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Period.end_date)
  return _internal_mutable_end_date();
}
inline void Period::set_allocated_end_date(::mead101::mead::EventDate* end_date) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete end_date_;
  }
  if (end_date) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(end_date);
    if (message_arena != submessage_arena) {
      end_date = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end_date, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  end_date_ = end_date;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.Period.end_date)
}

// optional .mead101.mead.EventDateTime end_date_time = 2;
inline bool Period::_internal_has_end_date_time() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || end_date_time_ != nullptr);
  return value;
}
inline bool Period::has_end_date_time() const {
  return _internal_has_end_date_time();
}
inline void Period::clear_end_date_time() {
  if (end_date_time_ != nullptr) end_date_time_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::mead101::mead::EventDateTime& Period::_internal_end_date_time() const {
  const ::mead101::mead::EventDateTime* p = end_date_time_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::EventDateTime*>(
      &::mead101::mead::_EventDateTime_default_instance_);
}
inline const ::mead101::mead::EventDateTime& Period::end_date_time() const {
  // @@protoc_insertion_point(field_get:mead101.mead.Period.end_date_time)
  return _internal_end_date_time();
}
inline void Period::unsafe_arena_set_allocated_end_date_time(
    ::mead101::mead::EventDateTime* end_date_time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_date_time_);
  }
  end_date_time_ = end_date_time;
  if (end_date_time) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.Period.end_date_time)
}
inline ::mead101::mead::EventDateTime* Period::release_end_date_time() {
  _has_bits_[0] &= ~0x00000002u;
  ::mead101::mead::EventDateTime* temp = end_date_time_;
  end_date_time_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::EventDateTime* Period::unsafe_arena_release_end_date_time() {
  // @@protoc_insertion_point(field_release:mead101.mead.Period.end_date_time)
  _has_bits_[0] &= ~0x00000002u;
  ::mead101::mead::EventDateTime* temp = end_date_time_;
  end_date_time_ = nullptr;
  return temp;
}
inline ::mead101::mead::EventDateTime* Period::_internal_mutable_end_date_time() {
  _has_bits_[0] |= 0x00000002u;
  if (end_date_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::EventDateTime>(GetArena());
    end_date_time_ = p;
  }
  return end_date_time_;
}
inline ::mead101::mead::EventDateTime* Period::mutable_end_date_time() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Period.end_date_time)
  return _internal_mutable_end_date_time();
}
inline void Period::set_allocated_end_date_time(::mead101::mead::EventDateTime* end_date_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete end_date_time_;
  }
  if (end_date_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(end_date_time);
    if (message_arena != submessage_arena) {
      end_date_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end_date_time, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  end_date_time_ = end_date_time;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.Period.end_date_time)
}

// optional .mead101.mead.EventDate start_date = 3;
inline bool Period::_internal_has_start_date() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || start_date_ != nullptr);
  return value;
}
inline bool Period::has_start_date() const {
  return _internal_has_start_date();
}
inline void Period::clear_start_date() {
  if (start_date_ != nullptr) start_date_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::mead101::mead::EventDate& Period::_internal_start_date() const {
  const ::mead101::mead::EventDate* p = start_date_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::EventDate*>(
      &::mead101::mead::_EventDate_default_instance_);
}
inline const ::mead101::mead::EventDate& Period::start_date() const {
  // @@protoc_insertion_point(field_get:mead101.mead.Period.start_date)
  return _internal_start_date();
}
inline void Period::unsafe_arena_set_allocated_start_date(
    ::mead101::mead::EventDate* start_date) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_date_);
  }
  start_date_ = start_date;
  if (start_date) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.Period.start_date)
}
inline ::mead101::mead::EventDate* Period::release_start_date() {
  _has_bits_[0] &= ~0x00000004u;
  ::mead101::mead::EventDate* temp = start_date_;
  start_date_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::EventDate* Period::unsafe_arena_release_start_date() {
  // @@protoc_insertion_point(field_release:mead101.mead.Period.start_date)
  _has_bits_[0] &= ~0x00000004u;
  ::mead101::mead::EventDate* temp = start_date_;
  start_date_ = nullptr;
  return temp;
}
inline ::mead101::mead::EventDate* Period::_internal_mutable_start_date() {
  _has_bits_[0] |= 0x00000004u;
  if (start_date_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::EventDate>(GetArena());
    start_date_ = p;
  }
  return start_date_;
}
inline ::mead101::mead::EventDate* Period::mutable_start_date() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Period.start_date)
  return _internal_mutable_start_date();
}
inline void Period::set_allocated_start_date(::mead101::mead::EventDate* start_date) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete start_date_;
  }
  if (start_date) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(start_date);
    if (message_arena != submessage_arena) {
      start_date = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start_date, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  start_date_ = start_date;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.Period.start_date)
}

// optional .mead101.mead.EventDateTime start_date_time = 4;
inline bool Period::_internal_has_start_date_time() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || start_date_time_ != nullptr);
  return value;
}
inline bool Period::has_start_date_time() const {
  return _internal_has_start_date_time();
}
inline void Period::clear_start_date_time() {
  if (start_date_time_ != nullptr) start_date_time_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::mead101::mead::EventDateTime& Period::_internal_start_date_time() const {
  const ::mead101::mead::EventDateTime* p = start_date_time_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::EventDateTime*>(
      &::mead101::mead::_EventDateTime_default_instance_);
}
inline const ::mead101::mead::EventDateTime& Period::start_date_time() const {
  // @@protoc_insertion_point(field_get:mead101.mead.Period.start_date_time)
  return _internal_start_date_time();
}
inline void Period::unsafe_arena_set_allocated_start_date_time(
    ::mead101::mead::EventDateTime* start_date_time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_date_time_);
  }
  start_date_time_ = start_date_time;
  if (start_date_time) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.Period.start_date_time)
}
inline ::mead101::mead::EventDateTime* Period::release_start_date_time() {
  _has_bits_[0] &= ~0x00000008u;
  ::mead101::mead::EventDateTime* temp = start_date_time_;
  start_date_time_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::EventDateTime* Period::unsafe_arena_release_start_date_time() {
  // @@protoc_insertion_point(field_release:mead101.mead.Period.start_date_time)
  _has_bits_[0] &= ~0x00000008u;
  ::mead101::mead::EventDateTime* temp = start_date_time_;
  start_date_time_ = nullptr;
  return temp;
}
inline ::mead101::mead::EventDateTime* Period::_internal_mutable_start_date_time() {
  _has_bits_[0] |= 0x00000008u;
  if (start_date_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::EventDateTime>(GetArena());
    start_date_time_ = p;
  }
  return start_date_time_;
}
inline ::mead101::mead::EventDateTime* Period::mutable_start_date_time() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Period.start_date_time)
  return _internal_mutable_start_date_time();
}
inline void Period::set_allocated_start_date_time(::mead101::mead::EventDateTime* start_date_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete start_date_time_;
  }
  if (start_date_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(start_date_time);
    if (message_arena != submessage_arena) {
      start_date_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start_date_time, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  start_date_time_ = start_date_time;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.Period.start_date_time)
}

// -------------------------------------------------------------------

// PeriodValue

// optional string namespace = 1;
inline bool PeriodValue::_internal_has_namespace_() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PeriodValue::has_namespace_() const {
  return _internal_has_namespace_();
}
inline void PeriodValue::clear_namespace_() {
  namespace__.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PeriodValue::namespace_() const {
  // @@protoc_insertion_point(field_get:mead101.mead.PeriodValue.namespace)
  return _internal_namespace_();
}
inline void PeriodValue::set_namespace_(const std::string& value) {
  _internal_set_namespace_(value);
  // @@protoc_insertion_point(field_set:mead101.mead.PeriodValue.namespace)
}
inline std::string* PeriodValue::mutable_namespace_() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.PeriodValue.namespace)
  return _internal_mutable_namespace_();
}
inline const std::string& PeriodValue::_internal_namespace_() const {
  return namespace__.Get();
}
inline void PeriodValue::_internal_set_namespace_(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PeriodValue::set_namespace_(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  namespace__.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.PeriodValue.namespace)
}
inline void PeriodValue::set_namespace_(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.PeriodValue.namespace)
}
inline void PeriodValue::set_namespace_(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.PeriodValue.namespace)
}
inline std::string* PeriodValue::_internal_mutable_namespace_() {
  _has_bits_[0] |= 0x00000001u;
  return namespace__.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PeriodValue::release_namespace_() {
  // @@protoc_insertion_point(field_release:mead101.mead.PeriodValue.namespace)
  if (!_internal_has_namespace_()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return namespace__.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PeriodValue::set_allocated_namespace_(std::string* namespace_) {
  if (namespace_ != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  namespace__.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), namespace_,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.PeriodValue.namespace)
}

// optional string user_defined_value = 2;
inline bool PeriodValue::_internal_has_user_defined_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PeriodValue::has_user_defined_value() const {
  return _internal_has_user_defined_value();
}
inline void PeriodValue::clear_user_defined_value() {
  user_defined_value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& PeriodValue::user_defined_value() const {
  // @@protoc_insertion_point(field_get:mead101.mead.PeriodValue.user_defined_value)
  return _internal_user_defined_value();
}
inline void PeriodValue::set_user_defined_value(const std::string& value) {
  _internal_set_user_defined_value(value);
  // @@protoc_insertion_point(field_set:mead101.mead.PeriodValue.user_defined_value)
}
inline std::string* PeriodValue::mutable_user_defined_value() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.PeriodValue.user_defined_value)
  return _internal_mutable_user_defined_value();
}
inline const std::string& PeriodValue::_internal_user_defined_value() const {
  return user_defined_value_.Get();
}
inline void PeriodValue::_internal_set_user_defined_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PeriodValue::set_user_defined_value(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  user_defined_value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.PeriodValue.user_defined_value)
}
inline void PeriodValue::set_user_defined_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.PeriodValue.user_defined_value)
}
inline void PeriodValue::set_user_defined_value(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.PeriodValue.user_defined_value)
}
inline std::string* PeriodValue::_internal_mutable_user_defined_value() {
  _has_bits_[0] |= 0x00000002u;
  return user_defined_value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PeriodValue::release_user_defined_value() {
  // @@protoc_insertion_point(field_release:mead101.mead.PeriodValue.user_defined_value)
  if (!_internal_has_user_defined_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return user_defined_value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PeriodValue::set_allocated_user_defined_value(std::string* user_defined_value) {
  if (user_defined_value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  user_defined_value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_defined_value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.PeriodValue.user_defined_value)
}

// optional .mead101.avs.Period ext_value = 3;
inline bool PeriodValue::_internal_has_ext_value() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || ext_value_ != nullptr);
  return value;
}
inline bool PeriodValue::has_ext_value() const {
  return _internal_has_ext_value();
}
inline const ::mead101::avs::Period& PeriodValue::_internal_ext_value() const {
  const ::mead101::avs::Period* p = ext_value_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::avs::Period*>(
      &::mead101::avs::_Period_default_instance_);
}
inline const ::mead101::avs::Period& PeriodValue::ext_value() const {
  // @@protoc_insertion_point(field_get:mead101.mead.PeriodValue.ext_value)
  return _internal_ext_value();
}
inline void PeriodValue::unsafe_arena_set_allocated_ext_value(
    ::mead101::avs::Period* ext_value) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext_value_);
  }
  ext_value_ = ext_value;
  if (ext_value) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.PeriodValue.ext_value)
}
inline ::mead101::avs::Period* PeriodValue::release_ext_value() {
  _has_bits_[0] &= ~0x00000004u;
  ::mead101::avs::Period* temp = ext_value_;
  ext_value_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::avs::Period* PeriodValue::unsafe_arena_release_ext_value() {
  // @@protoc_insertion_point(field_release:mead101.mead.PeriodValue.ext_value)
  _has_bits_[0] &= ~0x00000004u;
  ::mead101::avs::Period* temp = ext_value_;
  ext_value_ = nullptr;
  return temp;
}
inline ::mead101::avs::Period* PeriodValue::_internal_mutable_ext_value() {
  _has_bits_[0] |= 0x00000004u;
  if (ext_value_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::avs::Period>(GetArena());
    ext_value_ = p;
  }
  return ext_value_;
}
inline ::mead101::avs::Period* PeriodValue::mutable_ext_value() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.PeriodValue.ext_value)
  return _internal_mutable_ext_value();
}
inline void PeriodValue::set_allocated_ext_value(::mead101::avs::Period* ext_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext_value_);
  }
  if (ext_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext_value)->GetArena();
    if (message_arena != submessage_arena) {
      ext_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext_value, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  ext_value_ = ext_value;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.PeriodValue.ext_value)
}

// -------------------------------------------------------------------

// PeriodWithTime

// optional string end_date_time = 1;
inline bool PeriodWithTime::_internal_has_end_date_time() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PeriodWithTime::has_end_date_time() const {
  return _internal_has_end_date_time();
}
inline void PeriodWithTime::clear_end_date_time() {
  end_date_time_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PeriodWithTime::end_date_time() const {
  // @@protoc_insertion_point(field_get:mead101.mead.PeriodWithTime.end_date_time)
  return _internal_end_date_time();
}
inline void PeriodWithTime::set_end_date_time(const std::string& value) {
  _internal_set_end_date_time(value);
  // @@protoc_insertion_point(field_set:mead101.mead.PeriodWithTime.end_date_time)
}
inline std::string* PeriodWithTime::mutable_end_date_time() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.PeriodWithTime.end_date_time)
  return _internal_mutable_end_date_time();
}
inline const std::string& PeriodWithTime::_internal_end_date_time() const {
  return end_date_time_.Get();
}
inline void PeriodWithTime::_internal_set_end_date_time(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  end_date_time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PeriodWithTime::set_end_date_time(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  end_date_time_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.PeriodWithTime.end_date_time)
}
inline void PeriodWithTime::set_end_date_time(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  end_date_time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.PeriodWithTime.end_date_time)
}
inline void PeriodWithTime::set_end_date_time(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  end_date_time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.PeriodWithTime.end_date_time)
}
inline std::string* PeriodWithTime::_internal_mutable_end_date_time() {
  _has_bits_[0] |= 0x00000001u;
  return end_date_time_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PeriodWithTime::release_end_date_time() {
  // @@protoc_insertion_point(field_release:mead101.mead.PeriodWithTime.end_date_time)
  if (!_internal_has_end_date_time()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return end_date_time_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PeriodWithTime::set_allocated_end_date_time(std::string* end_date_time) {
  if (end_date_time != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  end_date_time_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), end_date_time,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.PeriodWithTime.end_date_time)
}

// optional string start_date_time = 2;
inline bool PeriodWithTime::_internal_has_start_date_time() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PeriodWithTime::has_start_date_time() const {
  return _internal_has_start_date_time();
}
inline void PeriodWithTime::clear_start_date_time() {
  start_date_time_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& PeriodWithTime::start_date_time() const {
  // @@protoc_insertion_point(field_get:mead101.mead.PeriodWithTime.start_date_time)
  return _internal_start_date_time();
}
inline void PeriodWithTime::set_start_date_time(const std::string& value) {
  _internal_set_start_date_time(value);
  // @@protoc_insertion_point(field_set:mead101.mead.PeriodWithTime.start_date_time)
}
inline std::string* PeriodWithTime::mutable_start_date_time() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.PeriodWithTime.start_date_time)
  return _internal_mutable_start_date_time();
}
inline const std::string& PeriodWithTime::_internal_start_date_time() const {
  return start_date_time_.Get();
}
inline void PeriodWithTime::_internal_set_start_date_time(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  start_date_time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PeriodWithTime::set_start_date_time(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  start_date_time_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.PeriodWithTime.start_date_time)
}
inline void PeriodWithTime::set_start_date_time(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  start_date_time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.PeriodWithTime.start_date_time)
}
inline void PeriodWithTime::set_start_date_time(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  start_date_time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.PeriodWithTime.start_date_time)
}
inline std::string* PeriodWithTime::_internal_mutable_start_date_time() {
  _has_bits_[0] |= 0x00000002u;
  return start_date_time_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PeriodWithTime::release_start_date_time() {
  // @@protoc_insertion_point(field_release:mead101.mead.PeriodWithTime.start_date_time)
  if (!_internal_has_start_date_time()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return start_date_time_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PeriodWithTime::set_allocated_start_date_time(std::string* start_date_time) {
  if (start_date_time != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  start_date_time_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), start_date_time,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.PeriodWithTime.start_date_time)
}

// -------------------------------------------------------------------

// Person

// repeated string any_attribute_value = 1;
inline int Person::_internal_any_attribute_value_size() const {
  return any_attribute_value_.size();
}
inline int Person::any_attribute_value_size() const {
  return _internal_any_attribute_value_size();
}
inline void Person::clear_any_attribute_value() {
  any_attribute_value_.Clear();
}
inline std::string* Person::add_any_attribute_value() {
  // @@protoc_insertion_point(field_add_mutable:mead101.mead.Person.any_attribute_value)
  return _internal_add_any_attribute_value();
}
inline const std::string& Person::_internal_any_attribute_value(int index) const {
  return any_attribute_value_.Get(index);
}
inline const std::string& Person::any_attribute_value(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.Person.any_attribute_value)
  return _internal_any_attribute_value(index);
}
inline std::string* Person::mutable_any_attribute_value(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Person.any_attribute_value)
  return any_attribute_value_.Mutable(index);
}
inline void Person::set_any_attribute_value(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:mead101.mead.Person.any_attribute_value)
  any_attribute_value_.Mutable(index)->assign(value);
}
inline void Person::set_any_attribute_value(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:mead101.mead.Person.any_attribute_value)
  any_attribute_value_.Mutable(index)->assign(std::move(value));
}
inline void Person::set_any_attribute_value(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  any_attribute_value_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mead101.mead.Person.any_attribute_value)
}
inline void Person::set_any_attribute_value(int index, const char* value, size_t size) {
  any_attribute_value_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.Person.any_attribute_value)
}
inline std::string* Person::_internal_add_any_attribute_value() {
  return any_attribute_value_.Add();
}
inline void Person::add_any_attribute_value(const std::string& value) {
  any_attribute_value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mead101.mead.Person.any_attribute_value)
}
inline void Person::add_any_attribute_value(std::string&& value) {
  any_attribute_value_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:mead101.mead.Person.any_attribute_value)
}
inline void Person::add_any_attribute_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  any_attribute_value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mead101.mead.Person.any_attribute_value)
}
inline void Person::add_any_attribute_value(const char* value, size_t size) {
  any_attribute_value_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mead101.mead.Person.any_attribute_value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Person::any_attribute_value() const {
  // @@protoc_insertion_point(field_list:mead101.mead.Person.any_attribute_value)
  return any_attribute_value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Person::mutable_any_attribute_value() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.Person.any_attribute_value)
  return &any_attribute_value_;
}

// optional string any_value = 2;
inline bool Person::_internal_has_any_value() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Person::has_any_value() const {
  return _internal_has_any_value();
}
inline void Person::clear_any_value() {
  any_value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Person::any_value() const {
  // @@protoc_insertion_point(field_get:mead101.mead.Person.any_value)
  return _internal_any_value();
}
inline void Person::set_any_value(const std::string& value) {
  _internal_set_any_value(value);
  // @@protoc_insertion_point(field_set:mead101.mead.Person.any_value)
}
inline std::string* Person::mutable_any_value() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Person.any_value)
  return _internal_mutable_any_value();
}
inline const std::string& Person::_internal_any_value() const {
  return any_value_.Get();
}
inline void Person::_internal_set_any_value(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  any_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Person::set_any_value(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  any_value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.Person.any_value)
}
inline void Person::set_any_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  any_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.Person.any_value)
}
inline void Person::set_any_value(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  any_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.Person.any_value)
}
inline std::string* Person::_internal_mutable_any_value() {
  _has_bits_[0] |= 0x00000001u;
  return any_value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Person::release_any_value() {
  // @@protoc_insertion_point(field_release:mead101.mead.Person.any_value)
  if (!_internal_has_any_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return any_value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Person::set_allocated_any_value(std::string* any_value) {
  if (any_value != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  any_value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), any_value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.Person.any_value)
}

// optional string email = 3;
inline bool Person::_internal_has_email() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Person::has_email() const {
  return _internal_has_email();
}
inline void Person::clear_email() {
  email_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Person::email() const {
  // @@protoc_insertion_point(field_get:mead101.mead.Person.email)
  return _internal_email();
}
inline void Person::set_email(const std::string& value) {
  _internal_set_email(value);
  // @@protoc_insertion_point(field_set:mead101.mead.Person.email)
}
inline std::string* Person::mutable_email() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Person.email)
  return _internal_mutable_email();
}
inline const std::string& Person::_internal_email() const {
  return email_.Get();
}
inline void Person::_internal_set_email(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Person::set_email(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  email_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.Person.email)
}
inline void Person::set_email(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.Person.email)
}
inline void Person::set_email(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.Person.email)
}
inline std::string* Person::_internal_mutable_email() {
  _has_bits_[0] |= 0x00000002u;
  return email_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Person::release_email() {
  // @@protoc_insertion_point(field_release:mead101.mead.Person.email)
  if (!_internal_has_email()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return email_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Person::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  email_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.Person.email)
}

// optional string name = 4;
inline bool Person::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Person::has_name() const {
  return _internal_has_name();
}
inline void Person::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Person::name() const {
  // @@protoc_insertion_point(field_get:mead101.mead.Person.name)
  return _internal_name();
}
inline void Person::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:mead101.mead.Person.name)
}
inline std::string* Person::mutable_name() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Person.name)
  return _internal_mutable_name();
}
inline const std::string& Person::_internal_name() const {
  return name_.Get();
}
inline void Person::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Person::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.Person.name)
}
inline void Person::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.Person.name)
}
inline void Person::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.Person.name)
}
inline std::string* Person::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000004u;
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Person::release_name() {
  // @@protoc_insertion_point(field_release:mead101.mead.Person.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Person::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.Person.name)
}

// optional .mead101.mead.URI uri = 5;
inline bool Person::_internal_has_uri() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || uri_ != nullptr);
  return value;
}
inline bool Person::has_uri() const {
  return _internal_has_uri();
}
inline void Person::clear_uri() {
  if (uri_ != nullptr) uri_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::mead101::mead::URI& Person::_internal_uri() const {
  const ::mead101::mead::URI* p = uri_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::URI*>(
      &::mead101::mead::_URI_default_instance_);
}
inline const ::mead101::mead::URI& Person::uri() const {
  // @@protoc_insertion_point(field_get:mead101.mead.Person.uri)
  return _internal_uri();
}
inline void Person::unsafe_arena_set_allocated_uri(
    ::mead101::mead::URI* uri) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(uri_);
  }
  uri_ = uri;
  if (uri) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.Person.uri)
}
inline ::mead101::mead::URI* Person::release_uri() {
  _has_bits_[0] &= ~0x00000008u;
  ::mead101::mead::URI* temp = uri_;
  uri_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::URI* Person::unsafe_arena_release_uri() {
  // @@protoc_insertion_point(field_release:mead101.mead.Person.uri)
  _has_bits_[0] &= ~0x00000008u;
  ::mead101::mead::URI* temp = uri_;
  uri_ = nullptr;
  return temp;
}
inline ::mead101::mead::URI* Person::_internal_mutable_uri() {
  _has_bits_[0] |= 0x00000008u;
  if (uri_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::URI>(GetArena());
    uri_ = p;
  }
  return uri_;
}
inline ::mead101::mead::URI* Person::mutable_uri() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Person.uri)
  return _internal_mutable_uri();
}
inline void Person::set_allocated_uri(::mead101::mead::URI* uri) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete uri_;
  }
  if (uri) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(uri);
    if (message_arena != submessage_arena) {
      uri = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uri, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  uri_ = uri;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.Person.uri)
}

// -------------------------------------------------------------------

// Pronunciation

// optional string encoding_namespace = 1;
inline bool Pronunciation::_internal_has_encoding_namespace() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Pronunciation::has_encoding_namespace() const {
  return _internal_has_encoding_namespace();
}
inline void Pronunciation::clear_encoding_namespace() {
  encoding_namespace_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Pronunciation::encoding_namespace() const {
  // @@protoc_insertion_point(field_get:mead101.mead.Pronunciation.encoding_namespace)
  return _internal_encoding_namespace();
}
inline void Pronunciation::set_encoding_namespace(const std::string& value) {
  _internal_set_encoding_namespace(value);
  // @@protoc_insertion_point(field_set:mead101.mead.Pronunciation.encoding_namespace)
}
inline std::string* Pronunciation::mutable_encoding_namespace() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Pronunciation.encoding_namespace)
  return _internal_mutable_encoding_namespace();
}
inline const std::string& Pronunciation::_internal_encoding_namespace() const {
  return encoding_namespace_.Get();
}
inline void Pronunciation::_internal_set_encoding_namespace(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  encoding_namespace_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Pronunciation::set_encoding_namespace(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  encoding_namespace_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.Pronunciation.encoding_namespace)
}
inline void Pronunciation::set_encoding_namespace(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  encoding_namespace_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.Pronunciation.encoding_namespace)
}
inline void Pronunciation::set_encoding_namespace(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  encoding_namespace_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.Pronunciation.encoding_namespace)
}
inline std::string* Pronunciation::_internal_mutable_encoding_namespace() {
  _has_bits_[0] |= 0x00000001u;
  return encoding_namespace_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Pronunciation::release_encoding_namespace() {
  // @@protoc_insertion_point(field_release:mead101.mead.Pronunciation.encoding_namespace)
  if (!_internal_has_encoding_namespace()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return encoding_namespace_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Pronunciation::set_allocated_encoding_namespace(std::string* encoding_namespace) {
  if (encoding_namespace != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  encoding_namespace_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), encoding_namespace,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.Pronunciation.encoding_namespace)
}

// optional .mead101.avs.EncodingType encoding_type = 2;
inline bool Pronunciation::_internal_has_encoding_type() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || encoding_type_ != nullptr);
  return value;
}
inline bool Pronunciation::has_encoding_type() const {
  return _internal_has_encoding_type();
}
inline const ::mead101::avs::EncodingType& Pronunciation::_internal_encoding_type() const {
  const ::mead101::avs::EncodingType* p = encoding_type_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::avs::EncodingType*>(
      &::mead101::avs::_EncodingType_default_instance_);
}
inline const ::mead101::avs::EncodingType& Pronunciation::encoding_type() const {
  // @@protoc_insertion_point(field_get:mead101.mead.Pronunciation.encoding_type)
  return _internal_encoding_type();
}
inline void Pronunciation::unsafe_arena_set_allocated_encoding_type(
    ::mead101::avs::EncodingType* encoding_type) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(encoding_type_);
  }
  encoding_type_ = encoding_type;
  if (encoding_type) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.Pronunciation.encoding_type)
}
inline ::mead101::avs::EncodingType* Pronunciation::release_encoding_type() {
  _has_bits_[0] &= ~0x00000010u;
  ::mead101::avs::EncodingType* temp = encoding_type_;
  encoding_type_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::avs::EncodingType* Pronunciation::unsafe_arena_release_encoding_type() {
  // @@protoc_insertion_point(field_release:mead101.mead.Pronunciation.encoding_type)
  _has_bits_[0] &= ~0x00000010u;
  ::mead101::avs::EncodingType* temp = encoding_type_;
  encoding_type_ = nullptr;
  return temp;
}
inline ::mead101::avs::EncodingType* Pronunciation::_internal_mutable_encoding_type() {
  _has_bits_[0] |= 0x00000010u;
  if (encoding_type_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::avs::EncodingType>(GetArena());
    encoding_type_ = p;
  }
  return encoding_type_;
}
inline ::mead101::avs::EncodingType* Pronunciation::mutable_encoding_type() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Pronunciation.encoding_type)
  return _internal_mutable_encoding_type();
}
inline void Pronunciation::set_allocated_encoding_type(::mead101::avs::EncodingType* encoding_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(encoding_type_);
  }
  if (encoding_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(encoding_type)->GetArena();
    if (message_arena != submessage_arena) {
      encoding_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, encoding_type, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  encoding_type_ = encoding_type;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.Pronunciation.encoding_type)
}

// optional string encoding_user_defined_value = 3;
inline bool Pronunciation::_internal_has_encoding_user_defined_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Pronunciation::has_encoding_user_defined_value() const {
  return _internal_has_encoding_user_defined_value();
}
inline void Pronunciation::clear_encoding_user_defined_value() {
  encoding_user_defined_value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Pronunciation::encoding_user_defined_value() const {
  // @@protoc_insertion_point(field_get:mead101.mead.Pronunciation.encoding_user_defined_value)
  return _internal_encoding_user_defined_value();
}
inline void Pronunciation::set_encoding_user_defined_value(const std::string& value) {
  _internal_set_encoding_user_defined_value(value);
  // @@protoc_insertion_point(field_set:mead101.mead.Pronunciation.encoding_user_defined_value)
}
inline std::string* Pronunciation::mutable_encoding_user_defined_value() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Pronunciation.encoding_user_defined_value)
  return _internal_mutable_encoding_user_defined_value();
}
inline const std::string& Pronunciation::_internal_encoding_user_defined_value() const {
  return encoding_user_defined_value_.Get();
}
inline void Pronunciation::_internal_set_encoding_user_defined_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  encoding_user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Pronunciation::set_encoding_user_defined_value(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  encoding_user_defined_value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.Pronunciation.encoding_user_defined_value)
}
inline void Pronunciation::set_encoding_user_defined_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  encoding_user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.Pronunciation.encoding_user_defined_value)
}
inline void Pronunciation::set_encoding_user_defined_value(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  encoding_user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.Pronunciation.encoding_user_defined_value)
}
inline std::string* Pronunciation::_internal_mutable_encoding_user_defined_value() {
  _has_bits_[0] |= 0x00000002u;
  return encoding_user_defined_value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Pronunciation::release_encoding_user_defined_value() {
  // @@protoc_insertion_point(field_release:mead101.mead.Pronunciation.encoding_user_defined_value)
  if (!_internal_has_encoding_user_defined_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return encoding_user_defined_value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Pronunciation::set_allocated_encoding_user_defined_value(std::string* encoding_user_defined_value) {
  if (encoding_user_defined_value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  encoding_user_defined_value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), encoding_user_defined_value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.Pronunciation.encoding_user_defined_value)
}

// optional bool is_canonical = 4;
inline bool Pronunciation::_internal_has_is_canonical() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Pronunciation::has_is_canonical() const {
  return _internal_has_is_canonical();
}
inline void Pronunciation::clear_is_canonical() {
  is_canonical_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool Pronunciation::_internal_is_canonical() const {
  return is_canonical_;
}
inline bool Pronunciation::is_canonical() const {
  // @@protoc_insertion_point(field_get:mead101.mead.Pronunciation.is_canonical)
  return _internal_is_canonical();
}
inline void Pronunciation::_internal_set_is_canonical(bool value) {
  _has_bits_[0] |= 0x00000020u;
  is_canonical_ = value;
}
inline void Pronunciation::set_is_canonical(bool value) {
  _internal_set_is_canonical(value);
  // @@protoc_insertion_point(field_set:mead101.mead.Pronunciation.is_canonical)
}

// optional string language_code = 5;
inline bool Pronunciation::_internal_has_language_code() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Pronunciation::has_language_code() const {
  return _internal_has_language_code();
}
inline void Pronunciation::clear_language_code() {
  language_code_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Pronunciation::language_code() const {
  // @@protoc_insertion_point(field_get:mead101.mead.Pronunciation.language_code)
  return _internal_language_code();
}
inline void Pronunciation::set_language_code(const std::string& value) {
  _internal_set_language_code(value);
  // @@protoc_insertion_point(field_set:mead101.mead.Pronunciation.language_code)
}
inline std::string* Pronunciation::mutable_language_code() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Pronunciation.language_code)
  return _internal_mutable_language_code();
}
inline const std::string& Pronunciation::_internal_language_code() const {
  return language_code_.Get();
}
inline void Pronunciation::_internal_set_language_code(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  language_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Pronunciation::set_language_code(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  language_code_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.Pronunciation.language_code)
}
inline void Pronunciation::set_language_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  language_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.Pronunciation.language_code)
}
inline void Pronunciation::set_language_code(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  language_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.Pronunciation.language_code)
}
inline std::string* Pronunciation::_internal_mutable_language_code() {
  _has_bits_[0] |= 0x00000004u;
  return language_code_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Pronunciation::release_language_code() {
  // @@protoc_insertion_point(field_release:mead101.mead.Pronunciation.language_code)
  if (!_internal_has_language_code()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return language_code_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Pronunciation::set_allocated_language_code(std::string* language_code) {
  if (language_code != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  language_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), language_code,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.Pronunciation.language_code)
}

// optional string ext_value = 6;
inline bool Pronunciation::_internal_has_ext_value() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Pronunciation::has_ext_value() const {
  return _internal_has_ext_value();
}
inline void Pronunciation::clear_ext_value() {
  ext_value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& Pronunciation::ext_value() const {
  // @@protoc_insertion_point(field_get:mead101.mead.Pronunciation.ext_value)
  return _internal_ext_value();
}
inline void Pronunciation::set_ext_value(const std::string& value) {
  _internal_set_ext_value(value);
  // @@protoc_insertion_point(field_set:mead101.mead.Pronunciation.ext_value)
}
inline std::string* Pronunciation::mutable_ext_value() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Pronunciation.ext_value)
  return _internal_mutable_ext_value();
}
inline const std::string& Pronunciation::_internal_ext_value() const {
  return ext_value_.Get();
}
inline void Pronunciation::_internal_set_ext_value(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  ext_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Pronunciation::set_ext_value(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  ext_value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.Pronunciation.ext_value)
}
inline void Pronunciation::set_ext_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  ext_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.Pronunciation.ext_value)
}
inline void Pronunciation::set_ext_value(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  ext_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.Pronunciation.ext_value)
}
inline std::string* Pronunciation::_internal_mutable_ext_value() {
  _has_bits_[0] |= 0x00000008u;
  return ext_value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Pronunciation::release_ext_value() {
  // @@protoc_insertion_point(field_release:mead101.mead.Pronunciation.ext_value)
  if (!_internal_has_ext_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return ext_value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Pronunciation::set_allocated_ext_value(std::string* ext_value) {
  if (ext_value != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  ext_value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ext_value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.Pronunciation.ext_value)
}

// -------------------------------------------------------------------

// ProprietaryId

// optional string namespace = 1;
inline bool ProprietaryId::_internal_has_namespace_() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ProprietaryId::has_namespace_() const {
  return _internal_has_namespace_();
}
inline void ProprietaryId::clear_namespace_() {
  namespace__.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ProprietaryId::namespace_() const {
  // @@protoc_insertion_point(field_get:mead101.mead.ProprietaryId.namespace)
  return _internal_namespace_();
}
inline void ProprietaryId::set_namespace_(const std::string& value) {
  _internal_set_namespace_(value);
  // @@protoc_insertion_point(field_set:mead101.mead.ProprietaryId.namespace)
}
inline std::string* ProprietaryId::mutable_namespace_() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.ProprietaryId.namespace)
  return _internal_mutable_namespace_();
}
inline const std::string& ProprietaryId::_internal_namespace_() const {
  return namespace__.Get();
}
inline void ProprietaryId::_internal_set_namespace_(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ProprietaryId::set_namespace_(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  namespace__.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.ProprietaryId.namespace)
}
inline void ProprietaryId::set_namespace_(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.ProprietaryId.namespace)
}
inline void ProprietaryId::set_namespace_(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.ProprietaryId.namespace)
}
inline std::string* ProprietaryId::_internal_mutable_namespace_() {
  _has_bits_[0] |= 0x00000001u;
  return namespace__.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ProprietaryId::release_namespace_() {
  // @@protoc_insertion_point(field_release:mead101.mead.ProprietaryId.namespace)
  if (!_internal_has_namespace_()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return namespace__.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProprietaryId::set_allocated_namespace_(std::string* namespace_) {
  if (namespace_ != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  namespace__.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), namespace_,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.ProprietaryId.namespace)
}

// optional string ext_value = 2;
inline bool ProprietaryId::_internal_has_ext_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ProprietaryId::has_ext_value() const {
  return _internal_has_ext_value();
}
inline void ProprietaryId::clear_ext_value() {
  ext_value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ProprietaryId::ext_value() const {
  // @@protoc_insertion_point(field_get:mead101.mead.ProprietaryId.ext_value)
  return _internal_ext_value();
}
inline void ProprietaryId::set_ext_value(const std::string& value) {
  _internal_set_ext_value(value);
  // @@protoc_insertion_point(field_set:mead101.mead.ProprietaryId.ext_value)
}
inline std::string* ProprietaryId::mutable_ext_value() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.ProprietaryId.ext_value)
  return _internal_mutable_ext_value();
}
inline const std::string& ProprietaryId::_internal_ext_value() const {
  return ext_value_.Get();
}
inline void ProprietaryId::_internal_set_ext_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  ext_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ProprietaryId::set_ext_value(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  ext_value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.ProprietaryId.ext_value)
}
inline void ProprietaryId::set_ext_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  ext_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.ProprietaryId.ext_value)
}
inline void ProprietaryId::set_ext_value(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  ext_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.ProprietaryId.ext_value)
}
inline std::string* ProprietaryId::_internal_mutable_ext_value() {
  _has_bits_[0] |= 0x00000002u;
  return ext_value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ProprietaryId::release_ext_value() {
  // @@protoc_insertion_point(field_release:mead101.mead.ProprietaryId.ext_value)
  if (!_internal_has_ext_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return ext_value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProprietaryId::set_allocated_ext_value(std::string* ext_value) {
  if (ext_value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  ext_value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ext_value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.ProprietaryId.ext_value)
}

// -------------------------------------------------------------------

// Pseudonym

// optional .mead101.avs.CurrentTerritoryCode applicable_territory_code = 1;
inline bool Pseudonym::_internal_has_applicable_territory_code() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || applicable_territory_code_ != nullptr);
  return value;
}
inline bool Pseudonym::has_applicable_territory_code() const {
  return _internal_has_applicable_territory_code();
}
inline const ::mead101::avs::CurrentTerritoryCode& Pseudonym::_internal_applicable_territory_code() const {
  const ::mead101::avs::CurrentTerritoryCode* p = applicable_territory_code_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::avs::CurrentTerritoryCode*>(
      &::mead101::avs::_CurrentTerritoryCode_default_instance_);
}
inline const ::mead101::avs::CurrentTerritoryCode& Pseudonym::applicable_territory_code() const {
  // @@protoc_insertion_point(field_get:mead101.mead.Pseudonym.applicable_territory_code)
  return _internal_applicable_territory_code();
}
inline void Pseudonym::unsafe_arena_set_allocated_applicable_territory_code(
    ::mead101::avs::CurrentTerritoryCode* applicable_territory_code) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(applicable_territory_code_);
  }
  applicable_territory_code_ = applicable_territory_code;
  if (applicable_territory_code) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.Pseudonym.applicable_territory_code)
}
inline ::mead101::avs::CurrentTerritoryCode* Pseudonym::release_applicable_territory_code() {
  _has_bits_[0] &= ~0x00000001u;
  ::mead101::avs::CurrentTerritoryCode* temp = applicable_territory_code_;
  applicable_territory_code_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::avs::CurrentTerritoryCode* Pseudonym::unsafe_arena_release_applicable_territory_code() {
  // @@protoc_insertion_point(field_release:mead101.mead.Pseudonym.applicable_territory_code)
  _has_bits_[0] &= ~0x00000001u;
  ::mead101::avs::CurrentTerritoryCode* temp = applicable_territory_code_;
  applicable_territory_code_ = nullptr;
  return temp;
}
inline ::mead101::avs::CurrentTerritoryCode* Pseudonym::_internal_mutable_applicable_territory_code() {
  _has_bits_[0] |= 0x00000001u;
  if (applicable_territory_code_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::avs::CurrentTerritoryCode>(GetArena());
    applicable_territory_code_ = p;
  }
  return applicable_territory_code_;
}
inline ::mead101::avs::CurrentTerritoryCode* Pseudonym::mutable_applicable_territory_code() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Pseudonym.applicable_territory_code)
  return _internal_mutable_applicable_territory_code();
}
inline void Pseudonym::set_allocated_applicable_territory_code(::mead101::avs::CurrentTerritoryCode* applicable_territory_code) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(applicable_territory_code_);
  }
  if (applicable_territory_code) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(applicable_territory_code)->GetArena();
    if (message_arena != submessage_arena) {
      applicable_territory_code = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, applicable_territory_code, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  applicable_territory_code_ = applicable_territory_code;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.Pseudonym.applicable_territory_code)
}

// optional bool is_default = 2;
inline bool Pseudonym::_internal_has_is_default() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Pseudonym::has_is_default() const {
  return _internal_has_is_default();
}
inline void Pseudonym::clear_is_default() {
  is_default_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool Pseudonym::_internal_is_default() const {
  return is_default_;
}
inline bool Pseudonym::is_default() const {
  // @@protoc_insertion_point(field_get:mead101.mead.Pseudonym.is_default)
  return _internal_is_default();
}
inline void Pseudonym::_internal_set_is_default(bool value) {
  _has_bits_[0] |= 0x00000004u;
  is_default_ = value;
}
inline void Pseudonym::set_is_default(bool value) {
  _internal_set_is_default(value);
  // @@protoc_insertion_point(field_set:mead101.mead.Pseudonym.is_default)
}

// optional bool is_official = 3;
inline bool Pseudonym::_internal_has_is_official() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Pseudonym::has_is_official() const {
  return _internal_has_is_official();
}
inline void Pseudonym::clear_is_official() {
  is_official_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool Pseudonym::_internal_is_official() const {
  return is_official_;
}
inline bool Pseudonym::is_official() const {
  // @@protoc_insertion_point(field_get:mead101.mead.Pseudonym.is_official)
  return _internal_is_official();
}
inline void Pseudonym::_internal_set_is_official(bool value) {
  _has_bits_[0] |= 0x00000008u;
  is_official_ = value;
}
inline void Pseudonym::set_is_official(bool value) {
  _internal_set_is_official(value);
  // @@protoc_insertion_point(field_set:mead101.mead.Pseudonym.is_official)
}

// repeated string metadata_source_reference = 4;
inline int Pseudonym::_internal_metadata_source_reference_size() const {
  return metadata_source_reference_.size();
}
inline int Pseudonym::metadata_source_reference_size() const {
  return _internal_metadata_source_reference_size();
}
inline void Pseudonym::clear_metadata_source_reference() {
  metadata_source_reference_.Clear();
}
inline std::string* Pseudonym::add_metadata_source_reference() {
  // @@protoc_insertion_point(field_add_mutable:mead101.mead.Pseudonym.metadata_source_reference)
  return _internal_add_metadata_source_reference();
}
inline const std::string& Pseudonym::_internal_metadata_source_reference(int index) const {
  return metadata_source_reference_.Get(index);
}
inline const std::string& Pseudonym::metadata_source_reference(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.Pseudonym.metadata_source_reference)
  return _internal_metadata_source_reference(index);
}
inline std::string* Pseudonym::mutable_metadata_source_reference(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Pseudonym.metadata_source_reference)
  return metadata_source_reference_.Mutable(index);
}
inline void Pseudonym::set_metadata_source_reference(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:mead101.mead.Pseudonym.metadata_source_reference)
  metadata_source_reference_.Mutable(index)->assign(value);
}
inline void Pseudonym::set_metadata_source_reference(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:mead101.mead.Pseudonym.metadata_source_reference)
  metadata_source_reference_.Mutable(index)->assign(std::move(value));
}
inline void Pseudonym::set_metadata_source_reference(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  metadata_source_reference_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mead101.mead.Pseudonym.metadata_source_reference)
}
inline void Pseudonym::set_metadata_source_reference(int index, const char* value, size_t size) {
  metadata_source_reference_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.Pseudonym.metadata_source_reference)
}
inline std::string* Pseudonym::_internal_add_metadata_source_reference() {
  return metadata_source_reference_.Add();
}
inline void Pseudonym::add_metadata_source_reference(const std::string& value) {
  metadata_source_reference_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mead101.mead.Pseudonym.metadata_source_reference)
}
inline void Pseudonym::add_metadata_source_reference(std::string&& value) {
  metadata_source_reference_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:mead101.mead.Pseudonym.metadata_source_reference)
}
inline void Pseudonym::add_metadata_source_reference(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  metadata_source_reference_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mead101.mead.Pseudonym.metadata_source_reference)
}
inline void Pseudonym::add_metadata_source_reference(const char* value, size_t size) {
  metadata_source_reference_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mead101.mead.Pseudonym.metadata_source_reference)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Pseudonym::metadata_source_reference() const {
  // @@protoc_insertion_point(field_list:mead101.mead.Pseudonym.metadata_source_reference)
  return metadata_source_reference_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Pseudonym::mutable_metadata_source_reference() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.Pseudonym.metadata_source_reference)
  return &metadata_source_reference_;
}

// optional .mead101.mead.PartyNameWithPronunciation name = 5;
inline bool Pseudonym::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || name_ != nullptr);
  return value;
}
inline bool Pseudonym::has_name() const {
  return _internal_has_name();
}
inline void Pseudonym::clear_name() {
  if (name_ != nullptr) name_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::mead101::mead::PartyNameWithPronunciation& Pseudonym::_internal_name() const {
  const ::mead101::mead::PartyNameWithPronunciation* p = name_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::PartyNameWithPronunciation*>(
      &::mead101::mead::_PartyNameWithPronunciation_default_instance_);
}
inline const ::mead101::mead::PartyNameWithPronunciation& Pseudonym::name() const {
  // @@protoc_insertion_point(field_get:mead101.mead.Pseudonym.name)
  return _internal_name();
}
inline void Pseudonym::unsafe_arena_set_allocated_name(
    ::mead101::mead::PartyNameWithPronunciation* name) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(name_);
  }
  name_ = name;
  if (name) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.Pseudonym.name)
}
inline ::mead101::mead::PartyNameWithPronunciation* Pseudonym::release_name() {
  _has_bits_[0] &= ~0x00000002u;
  ::mead101::mead::PartyNameWithPronunciation* temp = name_;
  name_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::PartyNameWithPronunciation* Pseudonym::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_release:mead101.mead.Pseudonym.name)
  _has_bits_[0] &= ~0x00000002u;
  ::mead101::mead::PartyNameWithPronunciation* temp = name_;
  name_ = nullptr;
  return temp;
}
inline ::mead101::mead::PartyNameWithPronunciation* Pseudonym::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000002u;
  if (name_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::PartyNameWithPronunciation>(GetArena());
    name_ = p;
  }
  return name_;
}
inline ::mead101::mead::PartyNameWithPronunciation* Pseudonym::mutable_name() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Pseudonym.name)
  return _internal_mutable_name();
}
inline void Pseudonym::set_allocated_name(::mead101::mead::PartyNameWithPronunciation* name) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete name_;
  }
  if (name) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(name);
    if (message_arena != submessage_arena) {
      name = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, name, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  name_ = name;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.Pseudonym.name)
}

// -------------------------------------------------------------------

// RecordingPart

// repeated .mead101.mead.Annotation comment = 1;
inline int RecordingPart::_internal_comment_size() const {
  return comment_.size();
}
inline int RecordingPart::comment_size() const {
  return _internal_comment_size();
}
inline void RecordingPart::clear_comment() {
  comment_.Clear();
}
inline ::mead101::mead::Annotation* RecordingPart::mutable_comment(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.RecordingPart.comment)
  return comment_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Annotation >*
RecordingPart::mutable_comment() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.RecordingPart.comment)
  return &comment_;
}
inline const ::mead101::mead::Annotation& RecordingPart::_internal_comment(int index) const {
  return comment_.Get(index);
}
inline const ::mead101::mead::Annotation& RecordingPart::comment(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.RecordingPart.comment)
  return _internal_comment(index);
}
inline ::mead101::mead::Annotation* RecordingPart::_internal_add_comment() {
  return comment_.Add();
}
inline ::mead101::mead::Annotation* RecordingPart::add_comment() {
  // @@protoc_insertion_point(field_add:mead101.mead.RecordingPart.comment)
  return _internal_add_comment();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Annotation >&
RecordingPart::comment() const {
  // @@protoc_insertion_point(field_list:mead101.mead.RecordingPart.comment)
  return comment_;
}

// optional double end_point = 2;
inline bool RecordingPart::_internal_has_end_point() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RecordingPart::has_end_point() const {
  return _internal_has_end_point();
}
inline void RecordingPart::clear_end_point() {
  end_point_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double RecordingPart::_internal_end_point() const {
  return end_point_;
}
inline double RecordingPart::end_point() const {
  // @@protoc_insertion_point(field_get:mead101.mead.RecordingPart.end_point)
  return _internal_end_point();
}
inline void RecordingPart::_internal_set_end_point(double value) {
  _has_bits_[0] |= 0x00000004u;
  end_point_ = value;
}
inline void RecordingPart::set_end_point(double value) {
  _internal_set_end_point(value);
  // @@protoc_insertion_point(field_set:mead101.mead.RecordingPart.end_point)
}

// repeated string metadata_source_reference = 3;
inline int RecordingPart::_internal_metadata_source_reference_size() const {
  return metadata_source_reference_.size();
}
inline int RecordingPart::metadata_source_reference_size() const {
  return _internal_metadata_source_reference_size();
}
inline void RecordingPart::clear_metadata_source_reference() {
  metadata_source_reference_.Clear();
}
inline std::string* RecordingPart::add_metadata_source_reference() {
  // @@protoc_insertion_point(field_add_mutable:mead101.mead.RecordingPart.metadata_source_reference)
  return _internal_add_metadata_source_reference();
}
inline const std::string& RecordingPart::_internal_metadata_source_reference(int index) const {
  return metadata_source_reference_.Get(index);
}
inline const std::string& RecordingPart::metadata_source_reference(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.RecordingPart.metadata_source_reference)
  return _internal_metadata_source_reference(index);
}
inline std::string* RecordingPart::mutable_metadata_source_reference(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.RecordingPart.metadata_source_reference)
  return metadata_source_reference_.Mutable(index);
}
inline void RecordingPart::set_metadata_source_reference(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:mead101.mead.RecordingPart.metadata_source_reference)
  metadata_source_reference_.Mutable(index)->assign(value);
}
inline void RecordingPart::set_metadata_source_reference(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:mead101.mead.RecordingPart.metadata_source_reference)
  metadata_source_reference_.Mutable(index)->assign(std::move(value));
}
inline void RecordingPart::set_metadata_source_reference(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  metadata_source_reference_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mead101.mead.RecordingPart.metadata_source_reference)
}
inline void RecordingPart::set_metadata_source_reference(int index, const char* value, size_t size) {
  metadata_source_reference_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.RecordingPart.metadata_source_reference)
}
inline std::string* RecordingPart::_internal_add_metadata_source_reference() {
  return metadata_source_reference_.Add();
}
inline void RecordingPart::add_metadata_source_reference(const std::string& value) {
  metadata_source_reference_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mead101.mead.RecordingPart.metadata_source_reference)
}
inline void RecordingPart::add_metadata_source_reference(std::string&& value) {
  metadata_source_reference_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:mead101.mead.RecordingPart.metadata_source_reference)
}
inline void RecordingPart::add_metadata_source_reference(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  metadata_source_reference_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mead101.mead.RecordingPart.metadata_source_reference)
}
inline void RecordingPart::add_metadata_source_reference(const char* value, size_t size) {
  metadata_source_reference_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mead101.mead.RecordingPart.metadata_source_reference)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
RecordingPart::metadata_source_reference() const {
  // @@protoc_insertion_point(field_list:mead101.mead.RecordingPart.metadata_source_reference)
  return metadata_source_reference_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
RecordingPart::mutable_metadata_source_reference() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.RecordingPart.metadata_source_reference)
  return &metadata_source_reference_;
}

// optional .mead101.mead.RecordingPartType recording_part_type = 4;
inline bool RecordingPart::_internal_has_recording_part_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || recording_part_type_ != nullptr);
  return value;
}
inline bool RecordingPart::has_recording_part_type() const {
  return _internal_has_recording_part_type();
}
inline void RecordingPart::clear_recording_part_type() {
  if (recording_part_type_ != nullptr) recording_part_type_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::mead101::mead::RecordingPartType& RecordingPart::_internal_recording_part_type() const {
  const ::mead101::mead::RecordingPartType* p = recording_part_type_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::RecordingPartType*>(
      &::mead101::mead::_RecordingPartType_default_instance_);
}
inline const ::mead101::mead::RecordingPartType& RecordingPart::recording_part_type() const {
  // @@protoc_insertion_point(field_get:mead101.mead.RecordingPart.recording_part_type)
  return _internal_recording_part_type();
}
inline void RecordingPart::unsafe_arena_set_allocated_recording_part_type(
    ::mead101::mead::RecordingPartType* recording_part_type) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(recording_part_type_);
  }
  recording_part_type_ = recording_part_type;
  if (recording_part_type) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.RecordingPart.recording_part_type)
}
inline ::mead101::mead::RecordingPartType* RecordingPart::release_recording_part_type() {
  _has_bits_[0] &= ~0x00000001u;
  ::mead101::mead::RecordingPartType* temp = recording_part_type_;
  recording_part_type_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::RecordingPartType* RecordingPart::unsafe_arena_release_recording_part_type() {
  // @@protoc_insertion_point(field_release:mead101.mead.RecordingPart.recording_part_type)
  _has_bits_[0] &= ~0x00000001u;
  ::mead101::mead::RecordingPartType* temp = recording_part_type_;
  recording_part_type_ = nullptr;
  return temp;
}
inline ::mead101::mead::RecordingPartType* RecordingPart::_internal_mutable_recording_part_type() {
  _has_bits_[0] |= 0x00000001u;
  if (recording_part_type_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::RecordingPartType>(GetArena());
    recording_part_type_ = p;
  }
  return recording_part_type_;
}
inline ::mead101::mead::RecordingPartType* RecordingPart::mutable_recording_part_type() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.RecordingPart.recording_part_type)
  return _internal_mutable_recording_part_type();
}
inline void RecordingPart::set_allocated_recording_part_type(::mead101::mead::RecordingPartType* recording_part_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete recording_part_type_;
  }
  if (recording_part_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(recording_part_type);
    if (message_arena != submessage_arena) {
      recording_part_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, recording_part_type, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  recording_part_type_ = recording_part_type;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.RecordingPart.recording_part_type)
}

// optional int32 sequence_number = 5;
inline bool RecordingPart::_internal_has_sequence_number() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool RecordingPart::has_sequence_number() const {
  return _internal_has_sequence_number();
}
inline void RecordingPart::clear_sequence_number() {
  sequence_number_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RecordingPart::_internal_sequence_number() const {
  return sequence_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RecordingPart::sequence_number() const {
  // @@protoc_insertion_point(field_get:mead101.mead.RecordingPart.sequence_number)
  return _internal_sequence_number();
}
inline void RecordingPart::_internal_set_sequence_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  sequence_number_ = value;
}
inline void RecordingPart::set_sequence_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sequence_number(value);
  // @@protoc_insertion_point(field_set:mead101.mead.RecordingPart.sequence_number)
}

// optional double start_point = 6;
inline bool RecordingPart::_internal_has_start_point() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool RecordingPart::has_start_point() const {
  return _internal_has_start_point();
}
inline void RecordingPart::clear_start_point() {
  start_point_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double RecordingPart::_internal_start_point() const {
  return start_point_;
}
inline double RecordingPart::start_point() const {
  // @@protoc_insertion_point(field_get:mead101.mead.RecordingPart.start_point)
  return _internal_start_point();
}
inline void RecordingPart::_internal_set_start_point(double value) {
  _has_bits_[0] |= 0x00000008u;
  start_point_ = value;
}
inline void RecordingPart::set_start_point(double value) {
  _internal_set_start_point(value);
  // @@protoc_insertion_point(field_set:mead101.mead.RecordingPart.start_point)
}

// optional .mead101.avs.UnitOfCuePoints unit = 7;
inline bool RecordingPart::_internal_has_unit() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || unit_ != nullptr);
  return value;
}
inline bool RecordingPart::has_unit() const {
  return _internal_has_unit();
}
inline const ::mead101::avs::UnitOfCuePoints& RecordingPart::_internal_unit() const {
  const ::mead101::avs::UnitOfCuePoints* p = unit_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::avs::UnitOfCuePoints*>(
      &::mead101::avs::_UnitOfCuePoints_default_instance_);
}
inline const ::mead101::avs::UnitOfCuePoints& RecordingPart::unit() const {
  // @@protoc_insertion_point(field_get:mead101.mead.RecordingPart.unit)
  return _internal_unit();
}
inline void RecordingPart::unsafe_arena_set_allocated_unit(
    ::mead101::avs::UnitOfCuePoints* unit) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(unit_);
  }
  unit_ = unit;
  if (unit) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.RecordingPart.unit)
}
inline ::mead101::avs::UnitOfCuePoints* RecordingPart::release_unit() {
  _has_bits_[0] &= ~0x00000002u;
  ::mead101::avs::UnitOfCuePoints* temp = unit_;
  unit_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::avs::UnitOfCuePoints* RecordingPart::unsafe_arena_release_unit() {
  // @@protoc_insertion_point(field_release:mead101.mead.RecordingPart.unit)
  _has_bits_[0] &= ~0x00000002u;
  ::mead101::avs::UnitOfCuePoints* temp = unit_;
  unit_ = nullptr;
  return temp;
}
inline ::mead101::avs::UnitOfCuePoints* RecordingPart::_internal_mutable_unit() {
  _has_bits_[0] |= 0x00000002u;
  if (unit_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::avs::UnitOfCuePoints>(GetArena());
    unit_ = p;
  }
  return unit_;
}
inline ::mead101::avs::UnitOfCuePoints* RecordingPart::mutable_unit() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.RecordingPart.unit)
  return _internal_mutable_unit();
}
inline void RecordingPart::set_allocated_unit(::mead101::avs::UnitOfCuePoints* unit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(unit_);
  }
  if (unit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(unit)->GetArena();
    if (message_arena != submessage_arena) {
      unit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, unit, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  unit_ = unit;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.RecordingPart.unit)
}

// repeated .mead101.mead.TextWithFormat usage_information = 8;
inline int RecordingPart::_internal_usage_information_size() const {
  return usage_information_.size();
}
inline int RecordingPart::usage_information_size() const {
  return _internal_usage_information_size();
}
inline void RecordingPart::clear_usage_information() {
  usage_information_.Clear();
}
inline ::mead101::mead::TextWithFormat* RecordingPart::mutable_usage_information(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.RecordingPart.usage_information)
  return usage_information_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::TextWithFormat >*
RecordingPart::mutable_usage_information() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.RecordingPart.usage_information)
  return &usage_information_;
}
inline const ::mead101::mead::TextWithFormat& RecordingPart::_internal_usage_information(int index) const {
  return usage_information_.Get(index);
}
inline const ::mead101::mead::TextWithFormat& RecordingPart::usage_information(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.RecordingPart.usage_information)
  return _internal_usage_information(index);
}
inline ::mead101::mead::TextWithFormat* RecordingPart::_internal_add_usage_information() {
  return usage_information_.Add();
}
inline ::mead101::mead::TextWithFormat* RecordingPart::add_usage_information() {
  // @@protoc_insertion_point(field_add:mead101.mead.RecordingPart.usage_information)
  return _internal_add_usage_information();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::TextWithFormat >&
RecordingPart::usage_information() const {
  // @@protoc_insertion_point(field_list:mead101.mead.RecordingPart.usage_information)
  return usage_information_;
}

// -------------------------------------------------------------------

// RecordingPartType

// optional string namespace = 1;
inline bool RecordingPartType::_internal_has_namespace_() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RecordingPartType::has_namespace_() const {
  return _internal_has_namespace_();
}
inline void RecordingPartType::clear_namespace_() {
  namespace__.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RecordingPartType::namespace_() const {
  // @@protoc_insertion_point(field_get:mead101.mead.RecordingPartType.namespace)
  return _internal_namespace_();
}
inline void RecordingPartType::set_namespace_(const std::string& value) {
  _internal_set_namespace_(value);
  // @@protoc_insertion_point(field_set:mead101.mead.RecordingPartType.namespace)
}
inline std::string* RecordingPartType::mutable_namespace_() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.RecordingPartType.namespace)
  return _internal_mutable_namespace_();
}
inline const std::string& RecordingPartType::_internal_namespace_() const {
  return namespace__.Get();
}
inline void RecordingPartType::_internal_set_namespace_(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RecordingPartType::set_namespace_(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  namespace__.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.RecordingPartType.namespace)
}
inline void RecordingPartType::set_namespace_(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.RecordingPartType.namespace)
}
inline void RecordingPartType::set_namespace_(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.RecordingPartType.namespace)
}
inline std::string* RecordingPartType::_internal_mutable_namespace_() {
  _has_bits_[0] |= 0x00000001u;
  return namespace__.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RecordingPartType::release_namespace_() {
  // @@protoc_insertion_point(field_release:mead101.mead.RecordingPartType.namespace)
  if (!_internal_has_namespace_()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return namespace__.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RecordingPartType::set_allocated_namespace_(std::string* namespace_) {
  if (namespace_ != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  namespace__.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), namespace_,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.RecordingPartType.namespace)
}

// optional string user_defined_value = 2;
inline bool RecordingPartType::_internal_has_user_defined_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RecordingPartType::has_user_defined_value() const {
  return _internal_has_user_defined_value();
}
inline void RecordingPartType::clear_user_defined_value() {
  user_defined_value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& RecordingPartType::user_defined_value() const {
  // @@protoc_insertion_point(field_get:mead101.mead.RecordingPartType.user_defined_value)
  return _internal_user_defined_value();
}
inline void RecordingPartType::set_user_defined_value(const std::string& value) {
  _internal_set_user_defined_value(value);
  // @@protoc_insertion_point(field_set:mead101.mead.RecordingPartType.user_defined_value)
}
inline std::string* RecordingPartType::mutable_user_defined_value() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.RecordingPartType.user_defined_value)
  return _internal_mutable_user_defined_value();
}
inline const std::string& RecordingPartType::_internal_user_defined_value() const {
  return user_defined_value_.Get();
}
inline void RecordingPartType::_internal_set_user_defined_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RecordingPartType::set_user_defined_value(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  user_defined_value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.RecordingPartType.user_defined_value)
}
inline void RecordingPartType::set_user_defined_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.RecordingPartType.user_defined_value)
}
inline void RecordingPartType::set_user_defined_value(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.RecordingPartType.user_defined_value)
}
inline std::string* RecordingPartType::_internal_mutable_user_defined_value() {
  _has_bits_[0] |= 0x00000002u;
  return user_defined_value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RecordingPartType::release_user_defined_value() {
  // @@protoc_insertion_point(field_release:mead101.mead.RecordingPartType.user_defined_value)
  if (!_internal_has_user_defined_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return user_defined_value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RecordingPartType::set_allocated_user_defined_value(std::string* user_defined_value) {
  if (user_defined_value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  user_defined_value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_defined_value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.RecordingPartType.user_defined_value)
}

// optional .mead101.avs.RecordingPartType ext_value = 3;
inline bool RecordingPartType::_internal_has_ext_value() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || ext_value_ != nullptr);
  return value;
}
inline bool RecordingPartType::has_ext_value() const {
  return _internal_has_ext_value();
}
inline const ::mead101::avs::RecordingPartType& RecordingPartType::_internal_ext_value() const {
  const ::mead101::avs::RecordingPartType* p = ext_value_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::avs::RecordingPartType*>(
      &::mead101::avs::_RecordingPartType_default_instance_);
}
inline const ::mead101::avs::RecordingPartType& RecordingPartType::ext_value() const {
  // @@protoc_insertion_point(field_get:mead101.mead.RecordingPartType.ext_value)
  return _internal_ext_value();
}
inline void RecordingPartType::unsafe_arena_set_allocated_ext_value(
    ::mead101::avs::RecordingPartType* ext_value) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext_value_);
  }
  ext_value_ = ext_value;
  if (ext_value) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.RecordingPartType.ext_value)
}
inline ::mead101::avs::RecordingPartType* RecordingPartType::release_ext_value() {
  _has_bits_[0] &= ~0x00000004u;
  ::mead101::avs::RecordingPartType* temp = ext_value_;
  ext_value_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::avs::RecordingPartType* RecordingPartType::unsafe_arena_release_ext_value() {
  // @@protoc_insertion_point(field_release:mead101.mead.RecordingPartType.ext_value)
  _has_bits_[0] &= ~0x00000004u;
  ::mead101::avs::RecordingPartType* temp = ext_value_;
  ext_value_ = nullptr;
  return temp;
}
inline ::mead101::avs::RecordingPartType* RecordingPartType::_internal_mutable_ext_value() {
  _has_bits_[0] |= 0x00000004u;
  if (ext_value_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::avs::RecordingPartType>(GetArena());
    ext_value_ = p;
  }
  return ext_value_;
}
inline ::mead101::avs::RecordingPartType* RecordingPartType::mutable_ext_value() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.RecordingPartType.ext_value)
  return _internal_mutable_ext_value();
}
inline void RecordingPartType::set_allocated_ext_value(::mead101::avs::RecordingPartType* ext_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext_value_);
  }
  if (ext_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext_value)->GetArena();
    if (message_arena != submessage_arena) {
      ext_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext_value, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  ext_value_ = ext_value;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.RecordingPartType.ext_value)
}

// -------------------------------------------------------------------

// RelatedCreation

// optional .mead101.mead.MusicalWorkId musical_work_id = 1;
inline bool RelatedCreation::_internal_has_musical_work_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || musical_work_id_ != nullptr);
  return value;
}
inline bool RelatedCreation::has_musical_work_id() const {
  return _internal_has_musical_work_id();
}
inline void RelatedCreation::clear_musical_work_id() {
  if (musical_work_id_ != nullptr) musical_work_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::mead101::mead::MusicalWorkId& RelatedCreation::_internal_musical_work_id() const {
  const ::mead101::mead::MusicalWorkId* p = musical_work_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::MusicalWorkId*>(
      &::mead101::mead::_MusicalWorkId_default_instance_);
}
inline const ::mead101::mead::MusicalWorkId& RelatedCreation::musical_work_id() const {
  // @@protoc_insertion_point(field_get:mead101.mead.RelatedCreation.musical_work_id)
  return _internal_musical_work_id();
}
inline void RelatedCreation::unsafe_arena_set_allocated_musical_work_id(
    ::mead101::mead::MusicalWorkId* musical_work_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(musical_work_id_);
  }
  musical_work_id_ = musical_work_id;
  if (musical_work_id) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.RelatedCreation.musical_work_id)
}
inline ::mead101::mead::MusicalWorkId* RelatedCreation::release_musical_work_id() {
  _has_bits_[0] &= ~0x00000001u;
  ::mead101::mead::MusicalWorkId* temp = musical_work_id_;
  musical_work_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::MusicalWorkId* RelatedCreation::unsafe_arena_release_musical_work_id() {
  // @@protoc_insertion_point(field_release:mead101.mead.RelatedCreation.musical_work_id)
  _has_bits_[0] &= ~0x00000001u;
  ::mead101::mead::MusicalWorkId* temp = musical_work_id_;
  musical_work_id_ = nullptr;
  return temp;
}
inline ::mead101::mead::MusicalWorkId* RelatedCreation::_internal_mutable_musical_work_id() {
  _has_bits_[0] |= 0x00000001u;
  if (musical_work_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::MusicalWorkId>(GetArena());
    musical_work_id_ = p;
  }
  return musical_work_id_;
}
inline ::mead101::mead::MusicalWorkId* RelatedCreation::mutable_musical_work_id() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.RelatedCreation.musical_work_id)
  return _internal_mutable_musical_work_id();
}
inline void RelatedCreation::set_allocated_musical_work_id(::mead101::mead::MusicalWorkId* musical_work_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete musical_work_id_;
  }
  if (musical_work_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(musical_work_id);
    if (message_arena != submessage_arena) {
      musical_work_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, musical_work_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  musical_work_id_ = musical_work_id;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.RelatedCreation.musical_work_id)
}

// optional .mead101.mead.ReleaseId release_id = 2;
inline bool RelatedCreation::_internal_has_release_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || release_id_ != nullptr);
  return value;
}
inline bool RelatedCreation::has_release_id() const {
  return _internal_has_release_id();
}
inline void RelatedCreation::clear_release_id() {
  if (release_id_ != nullptr) release_id_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::mead101::mead::ReleaseId& RelatedCreation::_internal_release_id() const {
  const ::mead101::mead::ReleaseId* p = release_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::ReleaseId*>(
      &::mead101::mead::_ReleaseId_default_instance_);
}
inline const ::mead101::mead::ReleaseId& RelatedCreation::release_id() const {
  // @@protoc_insertion_point(field_get:mead101.mead.RelatedCreation.release_id)
  return _internal_release_id();
}
inline void RelatedCreation::unsafe_arena_set_allocated_release_id(
    ::mead101::mead::ReleaseId* release_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(release_id_);
  }
  release_id_ = release_id;
  if (release_id) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.RelatedCreation.release_id)
}
inline ::mead101::mead::ReleaseId* RelatedCreation::release_release_id() {
  _has_bits_[0] &= ~0x00000002u;
  ::mead101::mead::ReleaseId* temp = release_id_;
  release_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::ReleaseId* RelatedCreation::unsafe_arena_release_release_id() {
  // @@protoc_insertion_point(field_release:mead101.mead.RelatedCreation.release_id)
  _has_bits_[0] &= ~0x00000002u;
  ::mead101::mead::ReleaseId* temp = release_id_;
  release_id_ = nullptr;
  return temp;
}
inline ::mead101::mead::ReleaseId* RelatedCreation::_internal_mutable_release_id() {
  _has_bits_[0] |= 0x00000002u;
  if (release_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::ReleaseId>(GetArena());
    release_id_ = p;
  }
  return release_id_;
}
inline ::mead101::mead::ReleaseId* RelatedCreation::mutable_release_id() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.RelatedCreation.release_id)
  return _internal_mutable_release_id();
}
inline void RelatedCreation::set_allocated_release_id(::mead101::mead::ReleaseId* release_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete release_id_;
  }
  if (release_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(release_id);
    if (message_arena != submessage_arena) {
      release_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, release_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  release_id_ = release_id;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.RelatedCreation.release_id)
}

// optional .mead101.mead.ResourceId resource_id = 3;
inline bool RelatedCreation::_internal_has_resource_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || resource_id_ != nullptr);
  return value;
}
inline bool RelatedCreation::has_resource_id() const {
  return _internal_has_resource_id();
}
inline void RelatedCreation::clear_resource_id() {
  if (resource_id_ != nullptr) resource_id_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::mead101::mead::ResourceId& RelatedCreation::_internal_resource_id() const {
  const ::mead101::mead::ResourceId* p = resource_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::ResourceId*>(
      &::mead101::mead::_ResourceId_default_instance_);
}
inline const ::mead101::mead::ResourceId& RelatedCreation::resource_id() const {
  // @@protoc_insertion_point(field_get:mead101.mead.RelatedCreation.resource_id)
  return _internal_resource_id();
}
inline void RelatedCreation::unsafe_arena_set_allocated_resource_id(
    ::mead101::mead::ResourceId* resource_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(resource_id_);
  }
  resource_id_ = resource_id;
  if (resource_id) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.RelatedCreation.resource_id)
}
inline ::mead101::mead::ResourceId* RelatedCreation::release_resource_id() {
  _has_bits_[0] &= ~0x00000004u;
  ::mead101::mead::ResourceId* temp = resource_id_;
  resource_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::ResourceId* RelatedCreation::unsafe_arena_release_resource_id() {
  // @@protoc_insertion_point(field_release:mead101.mead.RelatedCreation.resource_id)
  _has_bits_[0] &= ~0x00000004u;
  ::mead101::mead::ResourceId* temp = resource_id_;
  resource_id_ = nullptr;
  return temp;
}
inline ::mead101::mead::ResourceId* RelatedCreation::_internal_mutable_resource_id() {
  _has_bits_[0] |= 0x00000004u;
  if (resource_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::ResourceId>(GetArena());
    resource_id_ = p;
  }
  return resource_id_;
}
inline ::mead101::mead::ResourceId* RelatedCreation::mutable_resource_id() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.RelatedCreation.resource_id)
  return _internal_mutable_resource_id();
}
inline void RelatedCreation::set_allocated_resource_id(::mead101::mead::ResourceId* resource_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete resource_id_;
  }
  if (resource_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(resource_id);
    if (message_arena != submessage_arena) {
      resource_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resource_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  resource_id_ = resource_id;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.RelatedCreation.resource_id)
}

// optional .mead101.mead.TitleWithPronunciation title = 4;
inline bool RelatedCreation::_internal_has_title() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || title_ != nullptr);
  return value;
}
inline bool RelatedCreation::has_title() const {
  return _internal_has_title();
}
inline void RelatedCreation::clear_title() {
  if (title_ != nullptr) title_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::mead101::mead::TitleWithPronunciation& RelatedCreation::_internal_title() const {
  const ::mead101::mead::TitleWithPronunciation* p = title_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::TitleWithPronunciation*>(
      &::mead101::mead::_TitleWithPronunciation_default_instance_);
}
inline const ::mead101::mead::TitleWithPronunciation& RelatedCreation::title() const {
  // @@protoc_insertion_point(field_get:mead101.mead.RelatedCreation.title)
  return _internal_title();
}
inline void RelatedCreation::unsafe_arena_set_allocated_title(
    ::mead101::mead::TitleWithPronunciation* title) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(title_);
  }
  title_ = title;
  if (title) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.RelatedCreation.title)
}
inline ::mead101::mead::TitleWithPronunciation* RelatedCreation::release_title() {
  _has_bits_[0] &= ~0x00000008u;
  ::mead101::mead::TitleWithPronunciation* temp = title_;
  title_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::TitleWithPronunciation* RelatedCreation::unsafe_arena_release_title() {
  // @@protoc_insertion_point(field_release:mead101.mead.RelatedCreation.title)
  _has_bits_[0] &= ~0x00000008u;
  ::mead101::mead::TitleWithPronunciation* temp = title_;
  title_ = nullptr;
  return temp;
}
inline ::mead101::mead::TitleWithPronunciation* RelatedCreation::_internal_mutable_title() {
  _has_bits_[0] |= 0x00000008u;
  if (title_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::TitleWithPronunciation>(GetArena());
    title_ = p;
  }
  return title_;
}
inline ::mead101::mead::TitleWithPronunciation* RelatedCreation::mutable_title() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.RelatedCreation.title)
  return _internal_mutable_title();
}
inline void RelatedCreation::set_allocated_title(::mead101::mead::TitleWithPronunciation* title) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete title_;
  }
  if (title) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(title);
    if (message_arena != submessage_arena) {
      title = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, title, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  title_ = title;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.RelatedCreation.title)
}

// -------------------------------------------------------------------

// RelatedResource

// optional .mead101.mead.ResourceId resource_id = 1;
inline bool RelatedResource::_internal_has_resource_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || resource_id_ != nullptr);
  return value;
}
inline bool RelatedResource::has_resource_id() const {
  return _internal_has_resource_id();
}
inline void RelatedResource::clear_resource_id() {
  if (resource_id_ != nullptr) resource_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::mead101::mead::ResourceId& RelatedResource::_internal_resource_id() const {
  const ::mead101::mead::ResourceId* p = resource_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::ResourceId*>(
      &::mead101::mead::_ResourceId_default_instance_);
}
inline const ::mead101::mead::ResourceId& RelatedResource::resource_id() const {
  // @@protoc_insertion_point(field_get:mead101.mead.RelatedResource.resource_id)
  return _internal_resource_id();
}
inline void RelatedResource::unsafe_arena_set_allocated_resource_id(
    ::mead101::mead::ResourceId* resource_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(resource_id_);
  }
  resource_id_ = resource_id;
  if (resource_id) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.RelatedResource.resource_id)
}
inline ::mead101::mead::ResourceId* RelatedResource::release_resource_id() {
  _has_bits_[0] &= ~0x00000001u;
  ::mead101::mead::ResourceId* temp = resource_id_;
  resource_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::ResourceId* RelatedResource::unsafe_arena_release_resource_id() {
  // @@protoc_insertion_point(field_release:mead101.mead.RelatedResource.resource_id)
  _has_bits_[0] &= ~0x00000001u;
  ::mead101::mead::ResourceId* temp = resource_id_;
  resource_id_ = nullptr;
  return temp;
}
inline ::mead101::mead::ResourceId* RelatedResource::_internal_mutable_resource_id() {
  _has_bits_[0] |= 0x00000001u;
  if (resource_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::ResourceId>(GetArena());
    resource_id_ = p;
  }
  return resource_id_;
}
inline ::mead101::mead::ResourceId* RelatedResource::mutable_resource_id() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.RelatedResource.resource_id)
  return _internal_mutable_resource_id();
}
inline void RelatedResource::set_allocated_resource_id(::mead101::mead::ResourceId* resource_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete resource_id_;
  }
  if (resource_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(resource_id);
    if (message_arena != submessage_arena) {
      resource_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resource_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  resource_id_ = resource_id;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.RelatedResource.resource_id)
}

// optional .mead101.mead.ResourceRelationshipType resource_relationship_type = 2;
inline bool RelatedResource::_internal_has_resource_relationship_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || resource_relationship_type_ != nullptr);
  return value;
}
inline bool RelatedResource::has_resource_relationship_type() const {
  return _internal_has_resource_relationship_type();
}
inline void RelatedResource::clear_resource_relationship_type() {
  if (resource_relationship_type_ != nullptr) resource_relationship_type_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::mead101::mead::ResourceRelationshipType& RelatedResource::_internal_resource_relationship_type() const {
  const ::mead101::mead::ResourceRelationshipType* p = resource_relationship_type_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::ResourceRelationshipType*>(
      &::mead101::mead::_ResourceRelationshipType_default_instance_);
}
inline const ::mead101::mead::ResourceRelationshipType& RelatedResource::resource_relationship_type() const {
  // @@protoc_insertion_point(field_get:mead101.mead.RelatedResource.resource_relationship_type)
  return _internal_resource_relationship_type();
}
inline void RelatedResource::unsafe_arena_set_allocated_resource_relationship_type(
    ::mead101::mead::ResourceRelationshipType* resource_relationship_type) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(resource_relationship_type_);
  }
  resource_relationship_type_ = resource_relationship_type;
  if (resource_relationship_type) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.RelatedResource.resource_relationship_type)
}
inline ::mead101::mead::ResourceRelationshipType* RelatedResource::release_resource_relationship_type() {
  _has_bits_[0] &= ~0x00000002u;
  ::mead101::mead::ResourceRelationshipType* temp = resource_relationship_type_;
  resource_relationship_type_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::ResourceRelationshipType* RelatedResource::unsafe_arena_release_resource_relationship_type() {
  // @@protoc_insertion_point(field_release:mead101.mead.RelatedResource.resource_relationship_type)
  _has_bits_[0] &= ~0x00000002u;
  ::mead101::mead::ResourceRelationshipType* temp = resource_relationship_type_;
  resource_relationship_type_ = nullptr;
  return temp;
}
inline ::mead101::mead::ResourceRelationshipType* RelatedResource::_internal_mutable_resource_relationship_type() {
  _has_bits_[0] |= 0x00000002u;
  if (resource_relationship_type_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::ResourceRelationshipType>(GetArena());
    resource_relationship_type_ = p;
  }
  return resource_relationship_type_;
}
inline ::mead101::mead::ResourceRelationshipType* RelatedResource::mutable_resource_relationship_type() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.RelatedResource.resource_relationship_type)
  return _internal_mutable_resource_relationship_type();
}
inline void RelatedResource::set_allocated_resource_relationship_type(::mead101::mead::ResourceRelationshipType* resource_relationship_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete resource_relationship_type_;
  }
  if (resource_relationship_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(resource_relationship_type);
    if (message_arena != submessage_arena) {
      resource_relationship_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resource_relationship_type, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  resource_relationship_type_ = resource_relationship_type;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.RelatedResource.resource_relationship_type)
}

// -------------------------------------------------------------------

// RelatedResourceType

// optional string namespace = 1;
inline bool RelatedResourceType::_internal_has_namespace_() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RelatedResourceType::has_namespace_() const {
  return _internal_has_namespace_();
}
inline void RelatedResourceType::clear_namespace_() {
  namespace__.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RelatedResourceType::namespace_() const {
  // @@protoc_insertion_point(field_get:mead101.mead.RelatedResourceType.namespace)
  return _internal_namespace_();
}
inline void RelatedResourceType::set_namespace_(const std::string& value) {
  _internal_set_namespace_(value);
  // @@protoc_insertion_point(field_set:mead101.mead.RelatedResourceType.namespace)
}
inline std::string* RelatedResourceType::mutable_namespace_() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.RelatedResourceType.namespace)
  return _internal_mutable_namespace_();
}
inline const std::string& RelatedResourceType::_internal_namespace_() const {
  return namespace__.Get();
}
inline void RelatedResourceType::_internal_set_namespace_(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RelatedResourceType::set_namespace_(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  namespace__.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.RelatedResourceType.namespace)
}
inline void RelatedResourceType::set_namespace_(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.RelatedResourceType.namespace)
}
inline void RelatedResourceType::set_namespace_(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.RelatedResourceType.namespace)
}
inline std::string* RelatedResourceType::_internal_mutable_namespace_() {
  _has_bits_[0] |= 0x00000001u;
  return namespace__.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RelatedResourceType::release_namespace_() {
  // @@protoc_insertion_point(field_release:mead101.mead.RelatedResourceType.namespace)
  if (!_internal_has_namespace_()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return namespace__.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RelatedResourceType::set_allocated_namespace_(std::string* namespace_) {
  if (namespace_ != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  namespace__.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), namespace_,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.RelatedResourceType.namespace)
}

// optional string user_defined_value = 2;
inline bool RelatedResourceType::_internal_has_user_defined_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RelatedResourceType::has_user_defined_value() const {
  return _internal_has_user_defined_value();
}
inline void RelatedResourceType::clear_user_defined_value() {
  user_defined_value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& RelatedResourceType::user_defined_value() const {
  // @@protoc_insertion_point(field_get:mead101.mead.RelatedResourceType.user_defined_value)
  return _internal_user_defined_value();
}
inline void RelatedResourceType::set_user_defined_value(const std::string& value) {
  _internal_set_user_defined_value(value);
  // @@protoc_insertion_point(field_set:mead101.mead.RelatedResourceType.user_defined_value)
}
inline std::string* RelatedResourceType::mutable_user_defined_value() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.RelatedResourceType.user_defined_value)
  return _internal_mutable_user_defined_value();
}
inline const std::string& RelatedResourceType::_internal_user_defined_value() const {
  return user_defined_value_.Get();
}
inline void RelatedResourceType::_internal_set_user_defined_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RelatedResourceType::set_user_defined_value(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  user_defined_value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.RelatedResourceType.user_defined_value)
}
inline void RelatedResourceType::set_user_defined_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.RelatedResourceType.user_defined_value)
}
inline void RelatedResourceType::set_user_defined_value(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.RelatedResourceType.user_defined_value)
}
inline std::string* RelatedResourceType::_internal_mutable_user_defined_value() {
  _has_bits_[0] |= 0x00000002u;
  return user_defined_value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RelatedResourceType::release_user_defined_value() {
  // @@protoc_insertion_point(field_release:mead101.mead.RelatedResourceType.user_defined_value)
  if (!_internal_has_user_defined_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return user_defined_value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RelatedResourceType::set_allocated_user_defined_value(std::string* user_defined_value) {
  if (user_defined_value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  user_defined_value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_defined_value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.RelatedResourceType.user_defined_value)
}

// optional .mead101.avs.RelatedResourceType ext_value = 3;
inline bool RelatedResourceType::_internal_has_ext_value() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || ext_value_ != nullptr);
  return value;
}
inline bool RelatedResourceType::has_ext_value() const {
  return _internal_has_ext_value();
}
inline const ::mead101::avs::RelatedResourceType& RelatedResourceType::_internal_ext_value() const {
  const ::mead101::avs::RelatedResourceType* p = ext_value_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::avs::RelatedResourceType*>(
      &::mead101::avs::_RelatedResourceType_default_instance_);
}
inline const ::mead101::avs::RelatedResourceType& RelatedResourceType::ext_value() const {
  // @@protoc_insertion_point(field_get:mead101.mead.RelatedResourceType.ext_value)
  return _internal_ext_value();
}
inline void RelatedResourceType::unsafe_arena_set_allocated_ext_value(
    ::mead101::avs::RelatedResourceType* ext_value) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext_value_);
  }
  ext_value_ = ext_value;
  if (ext_value) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.RelatedResourceType.ext_value)
}
inline ::mead101::avs::RelatedResourceType* RelatedResourceType::release_ext_value() {
  _has_bits_[0] &= ~0x00000004u;
  ::mead101::avs::RelatedResourceType* temp = ext_value_;
  ext_value_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::avs::RelatedResourceType* RelatedResourceType::unsafe_arena_release_ext_value() {
  // @@protoc_insertion_point(field_release:mead101.mead.RelatedResourceType.ext_value)
  _has_bits_[0] &= ~0x00000004u;
  ::mead101::avs::RelatedResourceType* temp = ext_value_;
  ext_value_ = nullptr;
  return temp;
}
inline ::mead101::avs::RelatedResourceType* RelatedResourceType::_internal_mutable_ext_value() {
  _has_bits_[0] |= 0x00000004u;
  if (ext_value_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::avs::RelatedResourceType>(GetArena());
    ext_value_ = p;
  }
  return ext_value_;
}
inline ::mead101::avs::RelatedResourceType* RelatedResourceType::mutable_ext_value() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.RelatedResourceType.ext_value)
  return _internal_mutable_ext_value();
}
inline void RelatedResourceType::set_allocated_ext_value(::mead101::avs::RelatedResourceType* ext_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext_value_);
  }
  if (ext_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext_value)->GetArena();
    if (message_arena != submessage_arena) {
      ext_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext_value, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  ext_value_ = ext_value;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.RelatedResourceType.ext_value)
}

// -------------------------------------------------------------------

// RelatedWork

// repeated string metadata_source_reference = 1;
inline int RelatedWork::_internal_metadata_source_reference_size() const {
  return metadata_source_reference_.size();
}
inline int RelatedWork::metadata_source_reference_size() const {
  return _internal_metadata_source_reference_size();
}
inline void RelatedWork::clear_metadata_source_reference() {
  metadata_source_reference_.Clear();
}
inline std::string* RelatedWork::add_metadata_source_reference() {
  // @@protoc_insertion_point(field_add_mutable:mead101.mead.RelatedWork.metadata_source_reference)
  return _internal_add_metadata_source_reference();
}
inline const std::string& RelatedWork::_internal_metadata_source_reference(int index) const {
  return metadata_source_reference_.Get(index);
}
inline const std::string& RelatedWork::metadata_source_reference(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.RelatedWork.metadata_source_reference)
  return _internal_metadata_source_reference(index);
}
inline std::string* RelatedWork::mutable_metadata_source_reference(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.RelatedWork.metadata_source_reference)
  return metadata_source_reference_.Mutable(index);
}
inline void RelatedWork::set_metadata_source_reference(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:mead101.mead.RelatedWork.metadata_source_reference)
  metadata_source_reference_.Mutable(index)->assign(value);
}
inline void RelatedWork::set_metadata_source_reference(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:mead101.mead.RelatedWork.metadata_source_reference)
  metadata_source_reference_.Mutable(index)->assign(std::move(value));
}
inline void RelatedWork::set_metadata_source_reference(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  metadata_source_reference_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mead101.mead.RelatedWork.metadata_source_reference)
}
inline void RelatedWork::set_metadata_source_reference(int index, const char* value, size_t size) {
  metadata_source_reference_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.RelatedWork.metadata_source_reference)
}
inline std::string* RelatedWork::_internal_add_metadata_source_reference() {
  return metadata_source_reference_.Add();
}
inline void RelatedWork::add_metadata_source_reference(const std::string& value) {
  metadata_source_reference_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mead101.mead.RelatedWork.metadata_source_reference)
}
inline void RelatedWork::add_metadata_source_reference(std::string&& value) {
  metadata_source_reference_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:mead101.mead.RelatedWork.metadata_source_reference)
}
inline void RelatedWork::add_metadata_source_reference(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  metadata_source_reference_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mead101.mead.RelatedWork.metadata_source_reference)
}
inline void RelatedWork::add_metadata_source_reference(const char* value, size_t size) {
  metadata_source_reference_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mead101.mead.RelatedWork.metadata_source_reference)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
RelatedWork::metadata_source_reference() const {
  // @@protoc_insertion_point(field_list:mead101.mead.RelatedWork.metadata_source_reference)
  return metadata_source_reference_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
RelatedWork::mutable_metadata_source_reference() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.RelatedWork.metadata_source_reference)
  return &metadata_source_reference_;
}

// optional .mead101.mead.MusicalWorkId work_id = 2;
inline bool RelatedWork::_internal_has_work_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || work_id_ != nullptr);
  return value;
}
inline bool RelatedWork::has_work_id() const {
  return _internal_has_work_id();
}
inline void RelatedWork::clear_work_id() {
  if (work_id_ != nullptr) work_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::mead101::mead::MusicalWorkId& RelatedWork::_internal_work_id() const {
  const ::mead101::mead::MusicalWorkId* p = work_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::MusicalWorkId*>(
      &::mead101::mead::_MusicalWorkId_default_instance_);
}
inline const ::mead101::mead::MusicalWorkId& RelatedWork::work_id() const {
  // @@protoc_insertion_point(field_get:mead101.mead.RelatedWork.work_id)
  return _internal_work_id();
}
inline void RelatedWork::unsafe_arena_set_allocated_work_id(
    ::mead101::mead::MusicalWorkId* work_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(work_id_);
  }
  work_id_ = work_id;
  if (work_id) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.RelatedWork.work_id)
}
inline ::mead101::mead::MusicalWorkId* RelatedWork::release_work_id() {
  _has_bits_[0] &= ~0x00000001u;
  ::mead101::mead::MusicalWorkId* temp = work_id_;
  work_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::MusicalWorkId* RelatedWork::unsafe_arena_release_work_id() {
  // @@protoc_insertion_point(field_release:mead101.mead.RelatedWork.work_id)
  _has_bits_[0] &= ~0x00000001u;
  ::mead101::mead::MusicalWorkId* temp = work_id_;
  work_id_ = nullptr;
  return temp;
}
inline ::mead101::mead::MusicalWorkId* RelatedWork::_internal_mutable_work_id() {
  _has_bits_[0] |= 0x00000001u;
  if (work_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::MusicalWorkId>(GetArena());
    work_id_ = p;
  }
  return work_id_;
}
inline ::mead101::mead::MusicalWorkId* RelatedWork::mutable_work_id() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.RelatedWork.work_id)
  return _internal_mutable_work_id();
}
inline void RelatedWork::set_allocated_work_id(::mead101::mead::MusicalWorkId* work_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete work_id_;
  }
  if (work_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(work_id);
    if (message_arena != submessage_arena) {
      work_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, work_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  work_id_ = work_id;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.RelatedWork.work_id)
}

// optional .mead101.mead.WorkRelationshipType work_relationship_type = 3;
inline bool RelatedWork::_internal_has_work_relationship_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || work_relationship_type_ != nullptr);
  return value;
}
inline bool RelatedWork::has_work_relationship_type() const {
  return _internal_has_work_relationship_type();
}
inline void RelatedWork::clear_work_relationship_type() {
  if (work_relationship_type_ != nullptr) work_relationship_type_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::mead101::mead::WorkRelationshipType& RelatedWork::_internal_work_relationship_type() const {
  const ::mead101::mead::WorkRelationshipType* p = work_relationship_type_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::WorkRelationshipType*>(
      &::mead101::mead::_WorkRelationshipType_default_instance_);
}
inline const ::mead101::mead::WorkRelationshipType& RelatedWork::work_relationship_type() const {
  // @@protoc_insertion_point(field_get:mead101.mead.RelatedWork.work_relationship_type)
  return _internal_work_relationship_type();
}
inline void RelatedWork::unsafe_arena_set_allocated_work_relationship_type(
    ::mead101::mead::WorkRelationshipType* work_relationship_type) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(work_relationship_type_);
  }
  work_relationship_type_ = work_relationship_type;
  if (work_relationship_type) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.RelatedWork.work_relationship_type)
}
inline ::mead101::mead::WorkRelationshipType* RelatedWork::release_work_relationship_type() {
  _has_bits_[0] &= ~0x00000002u;
  ::mead101::mead::WorkRelationshipType* temp = work_relationship_type_;
  work_relationship_type_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::WorkRelationshipType* RelatedWork::unsafe_arena_release_work_relationship_type() {
  // @@protoc_insertion_point(field_release:mead101.mead.RelatedWork.work_relationship_type)
  _has_bits_[0] &= ~0x00000002u;
  ::mead101::mead::WorkRelationshipType* temp = work_relationship_type_;
  work_relationship_type_ = nullptr;
  return temp;
}
inline ::mead101::mead::WorkRelationshipType* RelatedWork::_internal_mutable_work_relationship_type() {
  _has_bits_[0] |= 0x00000002u;
  if (work_relationship_type_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::WorkRelationshipType>(GetArena());
    work_relationship_type_ = p;
  }
  return work_relationship_type_;
}
inline ::mead101::mead::WorkRelationshipType* RelatedWork::mutable_work_relationship_type() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.RelatedWork.work_relationship_type)
  return _internal_mutable_work_relationship_type();
}
inline void RelatedWork::set_allocated_work_relationship_type(::mead101::mead::WorkRelationshipType* work_relationship_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete work_relationship_type_;
  }
  if (work_relationship_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(work_relationship_type);
    if (message_arena != submessage_arena) {
      work_relationship_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, work_relationship_type, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  work_relationship_type_ = work_relationship_type;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.RelatedWork.work_relationship_type)
}

// repeated .mead101.mead.WorkTitle work_title = 4;
inline int RelatedWork::_internal_work_title_size() const {
  return work_title_.size();
}
inline int RelatedWork::work_title_size() const {
  return _internal_work_title_size();
}
inline void RelatedWork::clear_work_title() {
  work_title_.Clear();
}
inline ::mead101::mead::WorkTitle* RelatedWork::mutable_work_title(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.RelatedWork.work_title)
  return work_title_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::WorkTitle >*
RelatedWork::mutable_work_title() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.RelatedWork.work_title)
  return &work_title_;
}
inline const ::mead101::mead::WorkTitle& RelatedWork::_internal_work_title(int index) const {
  return work_title_.Get(index);
}
inline const ::mead101::mead::WorkTitle& RelatedWork::work_title(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.RelatedWork.work_title)
  return _internal_work_title(index);
}
inline ::mead101::mead::WorkTitle* RelatedWork::_internal_add_work_title() {
  return work_title_.Add();
}
inline ::mead101::mead::WorkTitle* RelatedWork::add_work_title() {
  // @@protoc_insertion_point(field_add:mead101.mead.RelatedWork.work_title)
  return _internal_add_work_title();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::WorkTitle >&
RelatedWork::work_title() const {
  // @@protoc_insertion_point(field_list:mead101.mead.RelatedWork.work_title)
  return work_title_;
}

// repeated .mead101.mead.PartyWithNames writer = 5;
inline int RelatedWork::_internal_writer_size() const {
  return writer_.size();
}
inline int RelatedWork::writer_size() const {
  return _internal_writer_size();
}
inline void RelatedWork::clear_writer() {
  writer_.Clear();
}
inline ::mead101::mead::PartyWithNames* RelatedWork::mutable_writer(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.RelatedWork.writer)
  return writer_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::PartyWithNames >*
RelatedWork::mutable_writer() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.RelatedWork.writer)
  return &writer_;
}
inline const ::mead101::mead::PartyWithNames& RelatedWork::_internal_writer(int index) const {
  return writer_.Get(index);
}
inline const ::mead101::mead::PartyWithNames& RelatedWork::writer(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.RelatedWork.writer)
  return _internal_writer(index);
}
inline ::mead101::mead::PartyWithNames* RelatedWork::_internal_add_writer() {
  return writer_.Add();
}
inline ::mead101::mead::PartyWithNames* RelatedWork::add_writer() {
  // @@protoc_insertion_point(field_add:mead101.mead.RelatedWork.writer)
  return _internal_add_writer();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::PartyWithNames >&
RelatedWork::writer() const {
  // @@protoc_insertion_point(field_list:mead101.mead.RelatedWork.writer)
  return writer_;
}

// -------------------------------------------------------------------

// Release

// repeated .mead101.mead.DisplayArtist display_artist = 1;
inline int Release::_internal_display_artist_size() const {
  return display_artist_.size();
}
inline int Release::display_artist_size() const {
  return _internal_display_artist_size();
}
inline void Release::clear_display_artist() {
  display_artist_.Clear();
}
inline ::mead101::mead::DisplayArtist* Release::mutable_display_artist(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Release.display_artist)
  return display_artist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::DisplayArtist >*
Release::mutable_display_artist() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.Release.display_artist)
  return &display_artist_;
}
inline const ::mead101::mead::DisplayArtist& Release::_internal_display_artist(int index) const {
  return display_artist_.Get(index);
}
inline const ::mead101::mead::DisplayArtist& Release::display_artist(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.Release.display_artist)
  return _internal_display_artist(index);
}
inline ::mead101::mead::DisplayArtist* Release::_internal_add_display_artist() {
  return display_artist_.Add();
}
inline ::mead101::mead::DisplayArtist* Release::add_display_artist() {
  // @@protoc_insertion_point(field_add:mead101.mead.Release.display_artist)
  return _internal_add_display_artist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::DisplayArtist >&
Release::display_artist() const {
  // @@protoc_insertion_point(field_list:mead101.mead.Release.display_artist)
  return display_artist_;
}

// optional string g_rid = 2;
inline bool Release::_internal_has_g_rid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Release::has_g_rid() const {
  return _internal_has_g_rid();
}
inline void Release::clear_g_rid() {
  g_rid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Release::g_rid() const {
  // @@protoc_insertion_point(field_get:mead101.mead.Release.g_rid)
  return _internal_g_rid();
}
inline void Release::set_g_rid(const std::string& value) {
  _internal_set_g_rid(value);
  // @@protoc_insertion_point(field_set:mead101.mead.Release.g_rid)
}
inline std::string* Release::mutable_g_rid() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Release.g_rid)
  return _internal_mutable_g_rid();
}
inline const std::string& Release::_internal_g_rid() const {
  return g_rid_.Get();
}
inline void Release::_internal_set_g_rid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  g_rid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Release::set_g_rid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  g_rid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.Release.g_rid)
}
inline void Release::set_g_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  g_rid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.Release.g_rid)
}
inline void Release::set_g_rid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  g_rid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.Release.g_rid)
}
inline std::string* Release::_internal_mutable_g_rid() {
  _has_bits_[0] |= 0x00000001u;
  return g_rid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Release::release_g_rid() {
  // @@protoc_insertion_point(field_release:mead101.mead.Release.g_rid)
  if (!_internal_has_g_rid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return g_rid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Release::set_allocated_g_rid(std::string* g_rid) {
  if (g_rid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  g_rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), g_rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.Release.g_rid)
}

// optional string i_c_p_n = 3;
inline bool Release::_internal_has_i_c_p_n() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Release::has_i_c_p_n() const {
  return _internal_has_i_c_p_n();
}
inline void Release::clear_i_c_p_n() {
  i_c_p_n_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Release::i_c_p_n() const {
  // @@protoc_insertion_point(field_get:mead101.mead.Release.i_c_p_n)
  return _internal_i_c_p_n();
}
inline void Release::set_i_c_p_n(const std::string& value) {
  _internal_set_i_c_p_n(value);
  // @@protoc_insertion_point(field_set:mead101.mead.Release.i_c_p_n)
}
inline std::string* Release::mutable_i_c_p_n() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Release.i_c_p_n)
  return _internal_mutable_i_c_p_n();
}
inline const std::string& Release::_internal_i_c_p_n() const {
  return i_c_p_n_.Get();
}
inline void Release::_internal_set_i_c_p_n(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  i_c_p_n_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Release::set_i_c_p_n(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  i_c_p_n_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.Release.i_c_p_n)
}
inline void Release::set_i_c_p_n(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  i_c_p_n_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.Release.i_c_p_n)
}
inline void Release::set_i_c_p_n(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  i_c_p_n_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.Release.i_c_p_n)
}
inline std::string* Release::_internal_mutable_i_c_p_n() {
  _has_bits_[0] |= 0x00000002u;
  return i_c_p_n_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Release::release_i_c_p_n() {
  // @@protoc_insertion_point(field_release:mead101.mead.Release.i_c_p_n)
  if (!_internal_has_i_c_p_n()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return i_c_p_n_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Release::set_allocated_i_c_p_n(std::string* i_c_p_n) {
  if (i_c_p_n != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  i_c_p_n_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), i_c_p_n,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.Release.i_c_p_n)
}

// optional string proprietary_release_id = 4;
inline bool Release::_internal_has_proprietary_release_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Release::has_proprietary_release_id() const {
  return _internal_has_proprietary_release_id();
}
inline void Release::clear_proprietary_release_id() {
  proprietary_release_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Release::proprietary_release_id() const {
  // @@protoc_insertion_point(field_get:mead101.mead.Release.proprietary_release_id)
  return _internal_proprietary_release_id();
}
inline void Release::set_proprietary_release_id(const std::string& value) {
  _internal_set_proprietary_release_id(value);
  // @@protoc_insertion_point(field_set:mead101.mead.Release.proprietary_release_id)
}
inline std::string* Release::mutable_proprietary_release_id() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Release.proprietary_release_id)
  return _internal_mutable_proprietary_release_id();
}
inline const std::string& Release::_internal_proprietary_release_id() const {
  return proprietary_release_id_.Get();
}
inline void Release::_internal_set_proprietary_release_id(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  proprietary_release_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Release::set_proprietary_release_id(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  proprietary_release_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.Release.proprietary_release_id)
}
inline void Release::set_proprietary_release_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  proprietary_release_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.Release.proprietary_release_id)
}
inline void Release::set_proprietary_release_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  proprietary_release_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.Release.proprietary_release_id)
}
inline std::string* Release::_internal_mutable_proprietary_release_id() {
  _has_bits_[0] |= 0x00000004u;
  return proprietary_release_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Release::release_proprietary_release_id() {
  // @@protoc_insertion_point(field_release:mead101.mead.Release.proprietary_release_id)
  if (!_internal_has_proprietary_release_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return proprietary_release_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Release::set_allocated_proprietary_release_id(std::string* proprietary_release_id) {
  if (proprietary_release_id != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  proprietary_release_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), proprietary_release_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.Release.proprietary_release_id)
}

// repeated .mead101.mead.ReleaseTitle release_title = 5;
inline int Release::_internal_release_title_size() const {
  return release_title_.size();
}
inline int Release::release_title_size() const {
  return _internal_release_title_size();
}
inline void Release::clear_release_title() {
  release_title_.Clear();
}
inline ::mead101::mead::ReleaseTitle* Release::mutable_release_title(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Release.release_title)
  return release_title_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::ReleaseTitle >*
Release::mutable_release_title() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.Release.release_title)
  return &release_title_;
}
inline const ::mead101::mead::ReleaseTitle& Release::_internal_release_title(int index) const {
  return release_title_.Get(index);
}
inline const ::mead101::mead::ReleaseTitle& Release::release_title(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.Release.release_title)
  return _internal_release_title(index);
}
inline ::mead101::mead::ReleaseTitle* Release::_internal_add_release_title() {
  return release_title_.Add();
}
inline ::mead101::mead::ReleaseTitle* Release::add_release_title() {
  // @@protoc_insertion_point(field_add:mead101.mead.Release.release_title)
  return _internal_add_release_title();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::ReleaseTitle >&
Release::release_title() const {
  // @@protoc_insertion_point(field_list:mead101.mead.Release.release_title)
  return release_title_;
}

// -------------------------------------------------------------------

// ReleaseId

// optional .mead101.mead.CatalogNumber catalog_number = 1;
inline bool ReleaseId::_internal_has_catalog_number() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || catalog_number_ != nullptr);
  return value;
}
inline bool ReleaseId::has_catalog_number() const {
  return _internal_has_catalog_number();
}
inline void ReleaseId::clear_catalog_number() {
  if (catalog_number_ != nullptr) catalog_number_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::mead101::mead::CatalogNumber& ReleaseId::_internal_catalog_number() const {
  const ::mead101::mead::CatalogNumber* p = catalog_number_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::CatalogNumber*>(
      &::mead101::mead::_CatalogNumber_default_instance_);
}
inline const ::mead101::mead::CatalogNumber& ReleaseId::catalog_number() const {
  // @@protoc_insertion_point(field_get:mead101.mead.ReleaseId.catalog_number)
  return _internal_catalog_number();
}
inline void ReleaseId::unsafe_arena_set_allocated_catalog_number(
    ::mead101::mead::CatalogNumber* catalog_number) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(catalog_number_);
  }
  catalog_number_ = catalog_number;
  if (catalog_number) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.ReleaseId.catalog_number)
}
inline ::mead101::mead::CatalogNumber* ReleaseId::release_catalog_number() {
  _has_bits_[0] &= ~0x00000008u;
  ::mead101::mead::CatalogNumber* temp = catalog_number_;
  catalog_number_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::CatalogNumber* ReleaseId::unsafe_arena_release_catalog_number() {
  // @@protoc_insertion_point(field_release:mead101.mead.ReleaseId.catalog_number)
  _has_bits_[0] &= ~0x00000008u;
  ::mead101::mead::CatalogNumber* temp = catalog_number_;
  catalog_number_ = nullptr;
  return temp;
}
inline ::mead101::mead::CatalogNumber* ReleaseId::_internal_mutable_catalog_number() {
  _has_bits_[0] |= 0x00000008u;
  if (catalog_number_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::CatalogNumber>(GetArena());
    catalog_number_ = p;
  }
  return catalog_number_;
}
inline ::mead101::mead::CatalogNumber* ReleaseId::mutable_catalog_number() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.ReleaseId.catalog_number)
  return _internal_mutable_catalog_number();
}
inline void ReleaseId::set_allocated_catalog_number(::mead101::mead::CatalogNumber* catalog_number) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete catalog_number_;
  }
  if (catalog_number) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(catalog_number);
    if (message_arena != submessage_arena) {
      catalog_number = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, catalog_number, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  catalog_number_ = catalog_number;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.ReleaseId.catalog_number)
}

// optional string g_rid = 2;
inline bool ReleaseId::_internal_has_g_rid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ReleaseId::has_g_rid() const {
  return _internal_has_g_rid();
}
inline void ReleaseId::clear_g_rid() {
  g_rid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ReleaseId::g_rid() const {
  // @@protoc_insertion_point(field_get:mead101.mead.ReleaseId.g_rid)
  return _internal_g_rid();
}
inline void ReleaseId::set_g_rid(const std::string& value) {
  _internal_set_g_rid(value);
  // @@protoc_insertion_point(field_set:mead101.mead.ReleaseId.g_rid)
}
inline std::string* ReleaseId::mutable_g_rid() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.ReleaseId.g_rid)
  return _internal_mutable_g_rid();
}
inline const std::string& ReleaseId::_internal_g_rid() const {
  return g_rid_.Get();
}
inline void ReleaseId::_internal_set_g_rid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  g_rid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ReleaseId::set_g_rid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  g_rid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.ReleaseId.g_rid)
}
inline void ReleaseId::set_g_rid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  g_rid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.ReleaseId.g_rid)
}
inline void ReleaseId::set_g_rid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  g_rid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.ReleaseId.g_rid)
}
inline std::string* ReleaseId::_internal_mutable_g_rid() {
  _has_bits_[0] |= 0x00000001u;
  return g_rid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ReleaseId::release_g_rid() {
  // @@protoc_insertion_point(field_release:mead101.mead.ReleaseId.g_rid)
  if (!_internal_has_g_rid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return g_rid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReleaseId::set_allocated_g_rid(std::string* g_rid) {
  if (g_rid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  g_rid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), g_rid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.ReleaseId.g_rid)
}

// optional string i_c_p_n = 3;
inline bool ReleaseId::_internal_has_i_c_p_n() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ReleaseId::has_i_c_p_n() const {
  return _internal_has_i_c_p_n();
}
inline void ReleaseId::clear_i_c_p_n() {
  i_c_p_n_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ReleaseId::i_c_p_n() const {
  // @@protoc_insertion_point(field_get:mead101.mead.ReleaseId.i_c_p_n)
  return _internal_i_c_p_n();
}
inline void ReleaseId::set_i_c_p_n(const std::string& value) {
  _internal_set_i_c_p_n(value);
  // @@protoc_insertion_point(field_set:mead101.mead.ReleaseId.i_c_p_n)
}
inline std::string* ReleaseId::mutable_i_c_p_n() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.ReleaseId.i_c_p_n)
  return _internal_mutable_i_c_p_n();
}
inline const std::string& ReleaseId::_internal_i_c_p_n() const {
  return i_c_p_n_.Get();
}
inline void ReleaseId::_internal_set_i_c_p_n(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  i_c_p_n_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ReleaseId::set_i_c_p_n(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  i_c_p_n_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.ReleaseId.i_c_p_n)
}
inline void ReleaseId::set_i_c_p_n(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  i_c_p_n_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.ReleaseId.i_c_p_n)
}
inline void ReleaseId::set_i_c_p_n(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  i_c_p_n_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.ReleaseId.i_c_p_n)
}
inline std::string* ReleaseId::_internal_mutable_i_c_p_n() {
  _has_bits_[0] |= 0x00000002u;
  return i_c_p_n_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ReleaseId::release_i_c_p_n() {
  // @@protoc_insertion_point(field_release:mead101.mead.ReleaseId.i_c_p_n)
  if (!_internal_has_i_c_p_n()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return i_c_p_n_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReleaseId::set_allocated_i_c_p_n(std::string* i_c_p_n) {
  if (i_c_p_n != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  i_c_p_n_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), i_c_p_n,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.ReleaseId.i_c_p_n)
}

// optional string i_s_r_c = 4;
inline bool ReleaseId::_internal_has_i_s_r_c() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ReleaseId::has_i_s_r_c() const {
  return _internal_has_i_s_r_c();
}
inline void ReleaseId::clear_i_s_r_c() {
  i_s_r_c_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ReleaseId::i_s_r_c() const {
  // @@protoc_insertion_point(field_get:mead101.mead.ReleaseId.i_s_r_c)
  return _internal_i_s_r_c();
}
inline void ReleaseId::set_i_s_r_c(const std::string& value) {
  _internal_set_i_s_r_c(value);
  // @@protoc_insertion_point(field_set:mead101.mead.ReleaseId.i_s_r_c)
}
inline std::string* ReleaseId::mutable_i_s_r_c() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.ReleaseId.i_s_r_c)
  return _internal_mutable_i_s_r_c();
}
inline const std::string& ReleaseId::_internal_i_s_r_c() const {
  return i_s_r_c_.Get();
}
inline void ReleaseId::_internal_set_i_s_r_c(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  i_s_r_c_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ReleaseId::set_i_s_r_c(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  i_s_r_c_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.ReleaseId.i_s_r_c)
}
inline void ReleaseId::set_i_s_r_c(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  i_s_r_c_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.ReleaseId.i_s_r_c)
}
inline void ReleaseId::set_i_s_r_c(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  i_s_r_c_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.ReleaseId.i_s_r_c)
}
inline std::string* ReleaseId::_internal_mutable_i_s_r_c() {
  _has_bits_[0] |= 0x00000004u;
  return i_s_r_c_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ReleaseId::release_i_s_r_c() {
  // @@protoc_insertion_point(field_release:mead101.mead.ReleaseId.i_s_r_c)
  if (!_internal_has_i_s_r_c()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return i_s_r_c_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReleaseId::set_allocated_i_s_r_c(std::string* i_s_r_c) {
  if (i_s_r_c != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  i_s_r_c_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), i_s_r_c,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.ReleaseId.i_s_r_c)
}

// repeated .mead101.mead.ProprietaryId proprietary_id = 5;
inline int ReleaseId::_internal_proprietary_id_size() const {
  return proprietary_id_.size();
}
inline int ReleaseId::proprietary_id_size() const {
  return _internal_proprietary_id_size();
}
inline void ReleaseId::clear_proprietary_id() {
  proprietary_id_.Clear();
}
inline ::mead101::mead::ProprietaryId* ReleaseId::mutable_proprietary_id(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.ReleaseId.proprietary_id)
  return proprietary_id_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::ProprietaryId >*
ReleaseId::mutable_proprietary_id() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.ReleaseId.proprietary_id)
  return &proprietary_id_;
}
inline const ::mead101::mead::ProprietaryId& ReleaseId::_internal_proprietary_id(int index) const {
  return proprietary_id_.Get(index);
}
inline const ::mead101::mead::ProprietaryId& ReleaseId::proprietary_id(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.ReleaseId.proprietary_id)
  return _internal_proprietary_id(index);
}
inline ::mead101::mead::ProprietaryId* ReleaseId::_internal_add_proprietary_id() {
  return proprietary_id_.Add();
}
inline ::mead101::mead::ProprietaryId* ReleaseId::add_proprietary_id() {
  // @@protoc_insertion_point(field_add:mead101.mead.ReleaseId.proprietary_id)
  return _internal_add_proprietary_id();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::ProprietaryId >&
ReleaseId::proprietary_id() const {
  // @@protoc_insertion_point(field_list:mead101.mead.ReleaseId.proprietary_id)
  return proprietary_id_;
}

// -------------------------------------------------------------------

// ReleaseInformation

// repeated .mead101.mead.AlternativeTitle alternative_title = 1;
inline int ReleaseInformation::_internal_alternative_title_size() const {
  return alternative_title_.size();
}
inline int ReleaseInformation::alternative_title_size() const {
  return _internal_alternative_title_size();
}
inline void ReleaseInformation::clear_alternative_title() {
  alternative_title_.Clear();
}
inline ::mead101::mead::AlternativeTitle* ReleaseInformation::mutable_alternative_title(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.ReleaseInformation.alternative_title)
  return alternative_title_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::AlternativeTitle >*
ReleaseInformation::mutable_alternative_title() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.ReleaseInformation.alternative_title)
  return &alternative_title_;
}
inline const ::mead101::mead::AlternativeTitle& ReleaseInformation::_internal_alternative_title(int index) const {
  return alternative_title_.Get(index);
}
inline const ::mead101::mead::AlternativeTitle& ReleaseInformation::alternative_title(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.ReleaseInformation.alternative_title)
  return _internal_alternative_title(index);
}
inline ::mead101::mead::AlternativeTitle* ReleaseInformation::_internal_add_alternative_title() {
  return alternative_title_.Add();
}
inline ::mead101::mead::AlternativeTitle* ReleaseInformation::add_alternative_title() {
  // @@protoc_insertion_point(field_add:mead101.mead.ReleaseInformation.alternative_title)
  return _internal_add_alternative_title();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::AlternativeTitle >&
ReleaseInformation::alternative_title() const {
  // @@protoc_insertion_point(field_list:mead101.mead.ReleaseInformation.alternative_title)
  return alternative_title_;
}

// optional .mead101.avs.CurrentTerritoryCode applicable_territory_code = 2;
inline bool ReleaseInformation::_internal_has_applicable_territory_code() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || applicable_territory_code_ != nullptr);
  return value;
}
inline bool ReleaseInformation::has_applicable_territory_code() const {
  return _internal_has_applicable_territory_code();
}
inline const ::mead101::avs::CurrentTerritoryCode& ReleaseInformation::_internal_applicable_territory_code() const {
  const ::mead101::avs::CurrentTerritoryCode* p = applicable_territory_code_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::avs::CurrentTerritoryCode*>(
      &::mead101::avs::_CurrentTerritoryCode_default_instance_);
}
inline const ::mead101::avs::CurrentTerritoryCode& ReleaseInformation::applicable_territory_code() const {
  // @@protoc_insertion_point(field_get:mead101.mead.ReleaseInformation.applicable_territory_code)
  return _internal_applicable_territory_code();
}
inline void ReleaseInformation::unsafe_arena_set_allocated_applicable_territory_code(
    ::mead101::avs::CurrentTerritoryCode* applicable_territory_code) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(applicable_territory_code_);
  }
  applicable_territory_code_ = applicable_territory_code;
  if (applicable_territory_code) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.ReleaseInformation.applicable_territory_code)
}
inline ::mead101::avs::CurrentTerritoryCode* ReleaseInformation::release_applicable_territory_code() {
  _has_bits_[0] &= ~0x00000001u;
  ::mead101::avs::CurrentTerritoryCode* temp = applicable_territory_code_;
  applicable_territory_code_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::avs::CurrentTerritoryCode* ReleaseInformation::unsafe_arena_release_applicable_territory_code() {
  // @@protoc_insertion_point(field_release:mead101.mead.ReleaseInformation.applicable_territory_code)
  _has_bits_[0] &= ~0x00000001u;
  ::mead101::avs::CurrentTerritoryCode* temp = applicable_territory_code_;
  applicable_territory_code_ = nullptr;
  return temp;
}
inline ::mead101::avs::CurrentTerritoryCode* ReleaseInformation::_internal_mutable_applicable_territory_code() {
  _has_bits_[0] |= 0x00000001u;
  if (applicable_territory_code_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::avs::CurrentTerritoryCode>(GetArena());
    applicable_territory_code_ = p;
  }
  return applicable_territory_code_;
}
inline ::mead101::avs::CurrentTerritoryCode* ReleaseInformation::mutable_applicable_territory_code() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.ReleaseInformation.applicable_territory_code)
  return _internal_mutable_applicable_territory_code();
}
inline void ReleaseInformation::set_allocated_applicable_territory_code(::mead101::avs::CurrentTerritoryCode* applicable_territory_code) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(applicable_territory_code_);
  }
  if (applicable_territory_code) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(applicable_territory_code)->GetArena();
    if (message_arena != submessage_arena) {
      applicable_territory_code = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, applicable_territory_code, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  applicable_territory_code_ = applicable_territory_code;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.ReleaseInformation.applicable_territory_code)
}

// repeated .mead101.mead.ArtisticInfluence artistic_influence = 3;
inline int ReleaseInformation::_internal_artistic_influence_size() const {
  return artistic_influence_.size();
}
inline int ReleaseInformation::artistic_influence_size() const {
  return _internal_artistic_influence_size();
}
inline void ReleaseInformation::clear_artistic_influence() {
  artistic_influence_.Clear();
}
inline ::mead101::mead::ArtisticInfluence* ReleaseInformation::mutable_artistic_influence(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.ReleaseInformation.artistic_influence)
  return artistic_influence_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::ArtisticInfluence >*
ReleaseInformation::mutable_artistic_influence() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.ReleaseInformation.artistic_influence)
  return &artistic_influence_;
}
inline const ::mead101::mead::ArtisticInfluence& ReleaseInformation::_internal_artistic_influence(int index) const {
  return artistic_influence_.Get(index);
}
inline const ::mead101::mead::ArtisticInfluence& ReleaseInformation::artistic_influence(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.ReleaseInformation.artistic_influence)
  return _internal_artistic_influence(index);
}
inline ::mead101::mead::ArtisticInfluence* ReleaseInformation::_internal_add_artistic_influence() {
  return artistic_influence_.Add();
}
inline ::mead101::mead::ArtisticInfluence* ReleaseInformation::add_artistic_influence() {
  // @@protoc_insertion_point(field_add:mead101.mead.ReleaseInformation.artistic_influence)
  return _internal_add_artistic_influence();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::ArtisticInfluence >&
ReleaseInformation::artistic_influence() const {
  // @@protoc_insertion_point(field_list:mead101.mead.ReleaseInformation.artistic_influence)
  return artistic_influence_;
}

// repeated .mead101.mead.Award award = 4;
inline int ReleaseInformation::_internal_award_size() const {
  return award_.size();
}
inline int ReleaseInformation::award_size() const {
  return _internal_award_size();
}
inline void ReleaseInformation::clear_award() {
  award_.Clear();
}
inline ::mead101::mead::Award* ReleaseInformation::mutable_award(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.ReleaseInformation.award)
  return award_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Award >*
ReleaseInformation::mutable_award() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.ReleaseInformation.award)
  return &award_;
}
inline const ::mead101::mead::Award& ReleaseInformation::_internal_award(int index) const {
  return award_.Get(index);
}
inline const ::mead101::mead::Award& ReleaseInformation::award(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.ReleaseInformation.award)
  return _internal_award(index);
}
inline ::mead101::mead::Award* ReleaseInformation::_internal_add_award() {
  return award_.Add();
}
inline ::mead101::mead::Award* ReleaseInformation::add_award() {
  // @@protoc_insertion_point(field_add:mead101.mead.ReleaseInformation.award)
  return _internal_add_award();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Award >&
ReleaseInformation::award() const {
  // @@protoc_insertion_point(field_list:mead101.mead.ReleaseInformation.award)
  return award_;
}

// repeated .mead101.mead.CommentaryNote commentary_note = 5;
inline int ReleaseInformation::_internal_commentary_note_size() const {
  return commentary_note_.size();
}
inline int ReleaseInformation::commentary_note_size() const {
  return _internal_commentary_note_size();
}
inline void ReleaseInformation::clear_commentary_note() {
  commentary_note_.Clear();
}
inline ::mead101::mead::CommentaryNote* ReleaseInformation::mutable_commentary_note(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.ReleaseInformation.commentary_note)
  return commentary_note_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::CommentaryNote >*
ReleaseInformation::mutable_commentary_note() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.ReleaseInformation.commentary_note)
  return &commentary_note_;
}
inline const ::mead101::mead::CommentaryNote& ReleaseInformation::_internal_commentary_note(int index) const {
  return commentary_note_.Get(index);
}
inline const ::mead101::mead::CommentaryNote& ReleaseInformation::commentary_note(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.ReleaseInformation.commentary_note)
  return _internal_commentary_note(index);
}
inline ::mead101::mead::CommentaryNote* ReleaseInformation::_internal_add_commentary_note() {
  return commentary_note_.Add();
}
inline ::mead101::mead::CommentaryNote* ReleaseInformation::add_commentary_note() {
  // @@protoc_insertion_point(field_add:mead101.mead.ReleaseInformation.commentary_note)
  return _internal_add_commentary_note();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::CommentaryNote >&
ReleaseInformation::commentary_note() const {
  // @@protoc_insertion_point(field_list:mead101.mead.ReleaseInformation.commentary_note)
  return commentary_note_;
}

// repeated .mead101.mead.Epoch epoch = 6;
inline int ReleaseInformation::_internal_epoch_size() const {
  return epoch_.size();
}
inline int ReleaseInformation::epoch_size() const {
  return _internal_epoch_size();
}
inline void ReleaseInformation::clear_epoch() {
  epoch_.Clear();
}
inline ::mead101::mead::Epoch* ReleaseInformation::mutable_epoch(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.ReleaseInformation.epoch)
  return epoch_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Epoch >*
ReleaseInformation::mutable_epoch() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.ReleaseInformation.epoch)
  return &epoch_;
}
inline const ::mead101::mead::Epoch& ReleaseInformation::_internal_epoch(int index) const {
  return epoch_.Get(index);
}
inline const ::mead101::mead::Epoch& ReleaseInformation::epoch(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.ReleaseInformation.epoch)
  return _internal_epoch(index);
}
inline ::mead101::mead::Epoch* ReleaseInformation::_internal_add_epoch() {
  return epoch_.Add();
}
inline ::mead101::mead::Epoch* ReleaseInformation::add_epoch() {
  // @@protoc_insertion_point(field_add:mead101.mead.ReleaseInformation.epoch)
  return _internal_add_epoch();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Epoch >&
ReleaseInformation::epoch() const {
  // @@protoc_insertion_point(field_list:mead101.mead.ReleaseInformation.epoch)
  return epoch_;
}

// repeated .mead101.mead.GenreCategory genre_category = 7;
inline int ReleaseInformation::_internal_genre_category_size() const {
  return genre_category_.size();
}
inline int ReleaseInformation::genre_category_size() const {
  return _internal_genre_category_size();
}
inline void ReleaseInformation::clear_genre_category() {
  genre_category_.Clear();
}
inline ::mead101::mead::GenreCategory* ReleaseInformation::mutable_genre_category(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.ReleaseInformation.genre_category)
  return genre_category_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::GenreCategory >*
ReleaseInformation::mutable_genre_category() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.ReleaseInformation.genre_category)
  return &genre_category_;
}
inline const ::mead101::mead::GenreCategory& ReleaseInformation::_internal_genre_category(int index) const {
  return genre_category_.Get(index);
}
inline const ::mead101::mead::GenreCategory& ReleaseInformation::genre_category(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.ReleaseInformation.genre_category)
  return _internal_genre_category(index);
}
inline ::mead101::mead::GenreCategory* ReleaseInformation::_internal_add_genre_category() {
  return genre_category_.Add();
}
inline ::mead101::mead::GenreCategory* ReleaseInformation::add_genre_category() {
  // @@protoc_insertion_point(field_add:mead101.mead.ReleaseInformation.genre_category)
  return _internal_add_genre_category();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::GenreCategory >&
ReleaseInformation::genre_category() const {
  // @@protoc_insertion_point(field_list:mead101.mead.ReleaseInformation.genre_category)
  return genre_category_;
}

// repeated .mead101.mead.HistoricChartingInformation historic_charting_information = 8;
inline int ReleaseInformation::_internal_historic_charting_information_size() const {
  return historic_charting_information_.size();
}
inline int ReleaseInformation::historic_charting_information_size() const {
  return _internal_historic_charting_information_size();
}
inline void ReleaseInformation::clear_historic_charting_information() {
  historic_charting_information_.Clear();
}
inline ::mead101::mead::HistoricChartingInformation* ReleaseInformation::mutable_historic_charting_information(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.ReleaseInformation.historic_charting_information)
  return historic_charting_information_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::HistoricChartingInformation >*
ReleaseInformation::mutable_historic_charting_information() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.ReleaseInformation.historic_charting_information)
  return &historic_charting_information_;
}
inline const ::mead101::mead::HistoricChartingInformation& ReleaseInformation::_internal_historic_charting_information(int index) const {
  return historic_charting_information_.Get(index);
}
inline const ::mead101::mead::HistoricChartingInformation& ReleaseInformation::historic_charting_information(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.ReleaseInformation.historic_charting_information)
  return _internal_historic_charting_information(index);
}
inline ::mead101::mead::HistoricChartingInformation* ReleaseInformation::_internal_add_historic_charting_information() {
  return historic_charting_information_.Add();
}
inline ::mead101::mead::HistoricChartingInformation* ReleaseInformation::add_historic_charting_information() {
  // @@protoc_insertion_point(field_add:mead101.mead.ReleaseInformation.historic_charting_information)
  return _internal_add_historic_charting_information();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::HistoricChartingInformation >&
ReleaseInformation::historic_charting_information() const {
  // @@protoc_insertion_point(field_list:mead101.mead.ReleaseInformation.historic_charting_information)
  return historic_charting_information_;
}

// repeated .mead101.mead.Image image = 9;
inline int ReleaseInformation::_internal_image_size() const {
  return image_.size();
}
inline int ReleaseInformation::image_size() const {
  return _internal_image_size();
}
inline void ReleaseInformation::clear_image() {
  image_.Clear();
}
inline ::mead101::mead::Image* ReleaseInformation::mutable_image(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.ReleaseInformation.image)
  return image_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Image >*
ReleaseInformation::mutable_image() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.ReleaseInformation.image)
  return &image_;
}
inline const ::mead101::mead::Image& ReleaseInformation::_internal_image(int index) const {
  return image_.Get(index);
}
inline const ::mead101::mead::Image& ReleaseInformation::image(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.ReleaseInformation.image)
  return _internal_image(index);
}
inline ::mead101::mead::Image* ReleaseInformation::_internal_add_image() {
  return image_.Add();
}
inline ::mead101::mead::Image* ReleaseInformation::add_image() {
  // @@protoc_insertion_point(field_add:mead101.mead.ReleaseInformation.image)
  return _internal_add_image();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Image >&
ReleaseInformation::image() const {
  // @@protoc_insertion_point(field_list:mead101.mead.ReleaseInformation.image)
  return image_;
}

// repeated .mead101.mead.SimilarRelease is_similar = 10;
inline int ReleaseInformation::_internal_is_similar_size() const {
  return is_similar_.size();
}
inline int ReleaseInformation::is_similar_size() const {
  return _internal_is_similar_size();
}
inline void ReleaseInformation::clear_is_similar() {
  is_similar_.Clear();
}
inline ::mead101::mead::SimilarRelease* ReleaseInformation::mutable_is_similar(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.ReleaseInformation.is_similar)
  return is_similar_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::SimilarRelease >*
ReleaseInformation::mutable_is_similar() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.ReleaseInformation.is_similar)
  return &is_similar_;
}
inline const ::mead101::mead::SimilarRelease& ReleaseInformation::_internal_is_similar(int index) const {
  return is_similar_.Get(index);
}
inline const ::mead101::mead::SimilarRelease& ReleaseInformation::is_similar(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.ReleaseInformation.is_similar)
  return _internal_is_similar(index);
}
inline ::mead101::mead::SimilarRelease* ReleaseInformation::_internal_add_is_similar() {
  return is_similar_.Add();
}
inline ::mead101::mead::SimilarRelease* ReleaseInformation::add_is_similar() {
  // @@protoc_insertion_point(field_add:mead101.mead.ReleaseInformation.is_similar)
  return _internal_add_is_similar();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::SimilarRelease >&
ReleaseInformation::is_similar() const {
  // @@protoc_insertion_point(field_list:mead101.mead.ReleaseInformation.is_similar)
  return is_similar_;
}

// repeated .mead101.mead.Mood mood = 11;
inline int ReleaseInformation::_internal_mood_size() const {
  return mood_.size();
}
inline int ReleaseInformation::mood_size() const {
  return _internal_mood_size();
}
inline void ReleaseInformation::clear_mood() {
  mood_.Clear();
}
inline ::mead101::mead::Mood* ReleaseInformation::mutable_mood(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.ReleaseInformation.mood)
  return mood_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Mood >*
ReleaseInformation::mutable_mood() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.ReleaseInformation.mood)
  return &mood_;
}
inline const ::mead101::mead::Mood& ReleaseInformation::_internal_mood(int index) const {
  return mood_.Get(index);
}
inline const ::mead101::mead::Mood& ReleaseInformation::mood(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.ReleaseInformation.mood)
  return _internal_mood(index);
}
inline ::mead101::mead::Mood* ReleaseInformation::_internal_add_mood() {
  return mood_.Add();
}
inline ::mead101::mead::Mood* ReleaseInformation::add_mood() {
  // @@protoc_insertion_point(field_add:mead101.mead.ReleaseInformation.mood)
  return _internal_add_mood();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Mood >&
ReleaseInformation::mood() const {
  // @@protoc_insertion_point(field_list:mead101.mead.ReleaseInformation.mood)
  return mood_;
}

// optional .mead101.mead.ddex_IsoDate priority_period_end_date = 12;
inline bool ReleaseInformation::_internal_has_priority_period_end_date() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || priority_period_end_date_ != nullptr);
  return value;
}
inline bool ReleaseInformation::has_priority_period_end_date() const {
  return _internal_has_priority_period_end_date();
}
inline void ReleaseInformation::clear_priority_period_end_date() {
  if (priority_period_end_date_ != nullptr) priority_period_end_date_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::mead101::mead::ddex_IsoDate& ReleaseInformation::_internal_priority_period_end_date() const {
  const ::mead101::mead::ddex_IsoDate* p = priority_period_end_date_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::ddex_IsoDate*>(
      &::mead101::mead::_ddex_IsoDate_default_instance_);
}
inline const ::mead101::mead::ddex_IsoDate& ReleaseInformation::priority_period_end_date() const {
  // @@protoc_insertion_point(field_get:mead101.mead.ReleaseInformation.priority_period_end_date)
  return _internal_priority_period_end_date();
}
inline void ReleaseInformation::unsafe_arena_set_allocated_priority_period_end_date(
    ::mead101::mead::ddex_IsoDate* priority_period_end_date) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(priority_period_end_date_);
  }
  priority_period_end_date_ = priority_period_end_date;
  if (priority_period_end_date) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.ReleaseInformation.priority_period_end_date)
}
inline ::mead101::mead::ddex_IsoDate* ReleaseInformation::release_priority_period_end_date() {
  _has_bits_[0] &= ~0x00000002u;
  ::mead101::mead::ddex_IsoDate* temp = priority_period_end_date_;
  priority_period_end_date_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::ddex_IsoDate* ReleaseInformation::unsafe_arena_release_priority_period_end_date() {
  // @@protoc_insertion_point(field_release:mead101.mead.ReleaseInformation.priority_period_end_date)
  _has_bits_[0] &= ~0x00000002u;
  ::mead101::mead::ddex_IsoDate* temp = priority_period_end_date_;
  priority_period_end_date_ = nullptr;
  return temp;
}
inline ::mead101::mead::ddex_IsoDate* ReleaseInformation::_internal_mutable_priority_period_end_date() {
  _has_bits_[0] |= 0x00000002u;
  if (priority_period_end_date_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::ddex_IsoDate>(GetArena());
    priority_period_end_date_ = p;
  }
  return priority_period_end_date_;
}
inline ::mead101::mead::ddex_IsoDate* ReleaseInformation::mutable_priority_period_end_date() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.ReleaseInformation.priority_period_end_date)
  return _internal_mutable_priority_period_end_date();
}
inline void ReleaseInformation::set_allocated_priority_period_end_date(::mead101::mead::ddex_IsoDate* priority_period_end_date) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete priority_period_end_date_;
  }
  if (priority_period_end_date) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(priority_period_end_date);
    if (message_arena != submessage_arena) {
      priority_period_end_date = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, priority_period_end_date, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  priority_period_end_date_ = priority_period_end_date;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.ReleaseInformation.priority_period_end_date)
}

// optional .mead101.mead.ddex_IsoDate priority_period_start_date = 13;
inline bool ReleaseInformation::_internal_has_priority_period_start_date() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || priority_period_start_date_ != nullptr);
  return value;
}
inline bool ReleaseInformation::has_priority_period_start_date() const {
  return _internal_has_priority_period_start_date();
}
inline void ReleaseInformation::clear_priority_period_start_date() {
  if (priority_period_start_date_ != nullptr) priority_period_start_date_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::mead101::mead::ddex_IsoDate& ReleaseInformation::_internal_priority_period_start_date() const {
  const ::mead101::mead::ddex_IsoDate* p = priority_period_start_date_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::ddex_IsoDate*>(
      &::mead101::mead::_ddex_IsoDate_default_instance_);
}
inline const ::mead101::mead::ddex_IsoDate& ReleaseInformation::priority_period_start_date() const {
  // @@protoc_insertion_point(field_get:mead101.mead.ReleaseInformation.priority_period_start_date)
  return _internal_priority_period_start_date();
}
inline void ReleaseInformation::unsafe_arena_set_allocated_priority_period_start_date(
    ::mead101::mead::ddex_IsoDate* priority_period_start_date) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(priority_period_start_date_);
  }
  priority_period_start_date_ = priority_period_start_date;
  if (priority_period_start_date) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.ReleaseInformation.priority_period_start_date)
}
inline ::mead101::mead::ddex_IsoDate* ReleaseInformation::release_priority_period_start_date() {
  _has_bits_[0] &= ~0x00000004u;
  ::mead101::mead::ddex_IsoDate* temp = priority_period_start_date_;
  priority_period_start_date_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::ddex_IsoDate* ReleaseInformation::unsafe_arena_release_priority_period_start_date() {
  // @@protoc_insertion_point(field_release:mead101.mead.ReleaseInformation.priority_period_start_date)
  _has_bits_[0] &= ~0x00000004u;
  ::mead101::mead::ddex_IsoDate* temp = priority_period_start_date_;
  priority_period_start_date_ = nullptr;
  return temp;
}
inline ::mead101::mead::ddex_IsoDate* ReleaseInformation::_internal_mutable_priority_period_start_date() {
  _has_bits_[0] |= 0x00000004u;
  if (priority_period_start_date_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::ddex_IsoDate>(GetArena());
    priority_period_start_date_ = p;
  }
  return priority_period_start_date_;
}
inline ::mead101::mead::ddex_IsoDate* ReleaseInformation::mutable_priority_period_start_date() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.ReleaseInformation.priority_period_start_date)
  return _internal_mutable_priority_period_start_date();
}
inline void ReleaseInformation::set_allocated_priority_period_start_date(::mead101::mead::ddex_IsoDate* priority_period_start_date) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete priority_period_start_date_;
  }
  if (priority_period_start_date) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(priority_period_start_date);
    if (message_arena != submessage_arena) {
      priority_period_start_date = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, priority_period_start_date, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  priority_period_start_date_ = priority_period_start_date;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.ReleaseInformation.priority_period_start_date)
}

// optional .mead101.mead.ReleaseSummary release_summary = 14;
inline bool ReleaseInformation::_internal_has_release_summary() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || release_summary_ != nullptr);
  return value;
}
inline bool ReleaseInformation::has_release_summary() const {
  return _internal_has_release_summary();
}
inline void ReleaseInformation::clear_release_summary() {
  if (release_summary_ != nullptr) release_summary_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::mead101::mead::ReleaseSummary& ReleaseInformation::_internal_release_summary() const {
  const ::mead101::mead::ReleaseSummary* p = release_summary_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::ReleaseSummary*>(
      &::mead101::mead::_ReleaseSummary_default_instance_);
}
inline const ::mead101::mead::ReleaseSummary& ReleaseInformation::release_summary() const {
  // @@protoc_insertion_point(field_get:mead101.mead.ReleaseInformation.release_summary)
  return _internal_release_summary();
}
inline void ReleaseInformation::unsafe_arena_set_allocated_release_summary(
    ::mead101::mead::ReleaseSummary* release_summary) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(release_summary_);
  }
  release_summary_ = release_summary;
  if (release_summary) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.ReleaseInformation.release_summary)
}
inline ::mead101::mead::ReleaseSummary* ReleaseInformation::release_release_summary() {
  _has_bits_[0] &= ~0x00000008u;
  ::mead101::mead::ReleaseSummary* temp = release_summary_;
  release_summary_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::ReleaseSummary* ReleaseInformation::unsafe_arena_release_release_summary() {
  // @@protoc_insertion_point(field_release:mead101.mead.ReleaseInformation.release_summary)
  _has_bits_[0] &= ~0x00000008u;
  ::mead101::mead::ReleaseSummary* temp = release_summary_;
  release_summary_ = nullptr;
  return temp;
}
inline ::mead101::mead::ReleaseSummary* ReleaseInformation::_internal_mutable_release_summary() {
  _has_bits_[0] |= 0x00000008u;
  if (release_summary_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::ReleaseSummary>(GetArena());
    release_summary_ = p;
  }
  return release_summary_;
}
inline ::mead101::mead::ReleaseSummary* ReleaseInformation::mutable_release_summary() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.ReleaseInformation.release_summary)
  return _internal_mutable_release_summary();
}
inline void ReleaseInformation::set_allocated_release_summary(::mead101::mead::ReleaseSummary* release_summary) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete release_summary_;
  }
  if (release_summary) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(release_summary);
    if (message_arena != submessage_arena) {
      release_summary = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, release_summary, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  release_summary_ = release_summary;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.ReleaseInformation.release_summary)
}

// optional .mead101.mead.SubGenreCategory sub_genre_category = 15;
inline bool ReleaseInformation::_internal_has_sub_genre_category() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || sub_genre_category_ != nullptr);
  return value;
}
inline bool ReleaseInformation::has_sub_genre_category() const {
  return _internal_has_sub_genre_category();
}
inline void ReleaseInformation::clear_sub_genre_category() {
  if (sub_genre_category_ != nullptr) sub_genre_category_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::mead101::mead::SubGenreCategory& ReleaseInformation::_internal_sub_genre_category() const {
  const ::mead101::mead::SubGenreCategory* p = sub_genre_category_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::SubGenreCategory*>(
      &::mead101::mead::_SubGenreCategory_default_instance_);
}
inline const ::mead101::mead::SubGenreCategory& ReleaseInformation::sub_genre_category() const {
  // @@protoc_insertion_point(field_get:mead101.mead.ReleaseInformation.sub_genre_category)
  return _internal_sub_genre_category();
}
inline void ReleaseInformation::unsafe_arena_set_allocated_sub_genre_category(
    ::mead101::mead::SubGenreCategory* sub_genre_category) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sub_genre_category_);
  }
  sub_genre_category_ = sub_genre_category;
  if (sub_genre_category) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.ReleaseInformation.sub_genre_category)
}
inline ::mead101::mead::SubGenreCategory* ReleaseInformation::release_sub_genre_category() {
  _has_bits_[0] &= ~0x00000010u;
  ::mead101::mead::SubGenreCategory* temp = sub_genre_category_;
  sub_genre_category_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::SubGenreCategory* ReleaseInformation::unsafe_arena_release_sub_genre_category() {
  // @@protoc_insertion_point(field_release:mead101.mead.ReleaseInformation.sub_genre_category)
  _has_bits_[0] &= ~0x00000010u;
  ::mead101::mead::SubGenreCategory* temp = sub_genre_category_;
  sub_genre_category_ = nullptr;
  return temp;
}
inline ::mead101::mead::SubGenreCategory* ReleaseInformation::_internal_mutable_sub_genre_category() {
  _has_bits_[0] |= 0x00000010u;
  if (sub_genre_category_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::SubGenreCategory>(GetArena());
    sub_genre_category_ = p;
  }
  return sub_genre_category_;
}
inline ::mead101::mead::SubGenreCategory* ReleaseInformation::mutable_sub_genre_category() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.ReleaseInformation.sub_genre_category)
  return _internal_mutable_sub_genre_category();
}
inline void ReleaseInformation::set_allocated_sub_genre_category(::mead101::mead::SubGenreCategory* sub_genre_category) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete sub_genre_category_;
  }
  if (sub_genre_category) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(sub_genre_category);
    if (message_arena != submessage_arena) {
      sub_genre_category = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sub_genre_category, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  sub_genre_category_ = sub_genre_category;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.ReleaseInformation.sub_genre_category)
}

// repeated .mead101.mead.Theme theme = 16;
inline int ReleaseInformation::_internal_theme_size() const {
  return theme_.size();
}
inline int ReleaseInformation::theme_size() const {
  return _internal_theme_size();
}
inline void ReleaseInformation::clear_theme() {
  theme_.Clear();
}
inline ::mead101::mead::Theme* ReleaseInformation::mutable_theme(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.ReleaseInformation.theme)
  return theme_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Theme >*
ReleaseInformation::mutable_theme() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.ReleaseInformation.theme)
  return &theme_;
}
inline const ::mead101::mead::Theme& ReleaseInformation::_internal_theme(int index) const {
  return theme_.Get(index);
}
inline const ::mead101::mead::Theme& ReleaseInformation::theme(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.ReleaseInformation.theme)
  return _internal_theme(index);
}
inline ::mead101::mead::Theme* ReleaseInformation::_internal_add_theme() {
  return theme_.Add();
}
inline ::mead101::mead::Theme* ReleaseInformation::add_theme() {
  // @@protoc_insertion_point(field_add:mead101.mead.ReleaseInformation.theme)
  return _internal_add_theme();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Theme >&
ReleaseInformation::theme() const {
  // @@protoc_insertion_point(field_list:mead101.mead.ReleaseInformation.theme)
  return theme_;
}

// -------------------------------------------------------------------

// ReleaseInformationList

// repeated .mead101.mead.ReleaseInformation release_information = 1;
inline int ReleaseInformationList::_internal_release_information_size() const {
  return release_information_.size();
}
inline int ReleaseInformationList::release_information_size() const {
  return _internal_release_information_size();
}
inline void ReleaseInformationList::clear_release_information() {
  release_information_.Clear();
}
inline ::mead101::mead::ReleaseInformation* ReleaseInformationList::mutable_release_information(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.ReleaseInformationList.release_information)
  return release_information_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::ReleaseInformation >*
ReleaseInformationList::mutable_release_information() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.ReleaseInformationList.release_information)
  return &release_information_;
}
inline const ::mead101::mead::ReleaseInformation& ReleaseInformationList::_internal_release_information(int index) const {
  return release_information_.Get(index);
}
inline const ::mead101::mead::ReleaseInformation& ReleaseInformationList::release_information(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.ReleaseInformationList.release_information)
  return _internal_release_information(index);
}
inline ::mead101::mead::ReleaseInformation* ReleaseInformationList::_internal_add_release_information() {
  return release_information_.Add();
}
inline ::mead101::mead::ReleaseInformation* ReleaseInformationList::add_release_information() {
  // @@protoc_insertion_point(field_add:mead101.mead.ReleaseInformationList.release_information)
  return _internal_add_release_information();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::ReleaseInformation >&
ReleaseInformationList::release_information() const {
  // @@protoc_insertion_point(field_list:mead101.mead.ReleaseInformationList.release_information)
  return release_information_;
}

// -------------------------------------------------------------------

// ReleaseSummary

// repeated .mead101.mead.PartyNameWithTerritory display_artist = 1;
inline int ReleaseSummary::_internal_display_artist_size() const {
  return display_artist_.size();
}
inline int ReleaseSummary::display_artist_size() const {
  return _internal_display_artist_size();
}
inline void ReleaseSummary::clear_display_artist() {
  display_artist_.Clear();
}
inline ::mead101::mead::PartyNameWithTerritory* ReleaseSummary::mutable_display_artist(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.ReleaseSummary.display_artist)
  return display_artist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::PartyNameWithTerritory >*
ReleaseSummary::mutable_display_artist() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.ReleaseSummary.display_artist)
  return &display_artist_;
}
inline const ::mead101::mead::PartyNameWithTerritory& ReleaseSummary::_internal_display_artist(int index) const {
  return display_artist_.Get(index);
}
inline const ::mead101::mead::PartyNameWithTerritory& ReleaseSummary::display_artist(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.ReleaseSummary.display_artist)
  return _internal_display_artist(index);
}
inline ::mead101::mead::PartyNameWithTerritory* ReleaseSummary::_internal_add_display_artist() {
  return display_artist_.Add();
}
inline ::mead101::mead::PartyNameWithTerritory* ReleaseSummary::add_display_artist() {
  // @@protoc_insertion_point(field_add:mead101.mead.ReleaseSummary.display_artist)
  return _internal_add_display_artist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::PartyNameWithTerritory >&
ReleaseSummary::display_artist() const {
  // @@protoc_insertion_point(field_list:mead101.mead.ReleaseSummary.display_artist)
  return display_artist_;
}

// repeated .mead101.mead.DisplayTitle display_title = 2;
inline int ReleaseSummary::_internal_display_title_size() const {
  return display_title_.size();
}
inline int ReleaseSummary::display_title_size() const {
  return _internal_display_title_size();
}
inline void ReleaseSummary::clear_display_title() {
  display_title_.Clear();
}
inline ::mead101::mead::DisplayTitle* ReleaseSummary::mutable_display_title(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.ReleaseSummary.display_title)
  return display_title_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::DisplayTitle >*
ReleaseSummary::mutable_display_title() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.ReleaseSummary.display_title)
  return &display_title_;
}
inline const ::mead101::mead::DisplayTitle& ReleaseSummary::_internal_display_title(int index) const {
  return display_title_.Get(index);
}
inline const ::mead101::mead::DisplayTitle& ReleaseSummary::display_title(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.ReleaseSummary.display_title)
  return _internal_display_title(index);
}
inline ::mead101::mead::DisplayTitle* ReleaseSummary::_internal_add_display_title() {
  return display_title_.Add();
}
inline ::mead101::mead::DisplayTitle* ReleaseSummary::add_display_title() {
  // @@protoc_insertion_point(field_add:mead101.mead.ReleaseSummary.display_title)
  return _internal_add_display_title();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::DisplayTitle >&
ReleaseSummary::display_title() const {
  // @@protoc_insertion_point(field_list:mead101.mead.ReleaseSummary.display_title)
  return display_title_;
}

// optional .mead101.mead.ReleaseId release_id = 3;
inline bool ReleaseSummary::_internal_has_release_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || release_id_ != nullptr);
  return value;
}
inline bool ReleaseSummary::has_release_id() const {
  return _internal_has_release_id();
}
inline void ReleaseSummary::clear_release_id() {
  if (release_id_ != nullptr) release_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::mead101::mead::ReleaseId& ReleaseSummary::_internal_release_id() const {
  const ::mead101::mead::ReleaseId* p = release_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::ReleaseId*>(
      &::mead101::mead::_ReleaseId_default_instance_);
}
inline const ::mead101::mead::ReleaseId& ReleaseSummary::release_id() const {
  // @@protoc_insertion_point(field_get:mead101.mead.ReleaseSummary.release_id)
  return _internal_release_id();
}
inline void ReleaseSummary::unsafe_arena_set_allocated_release_id(
    ::mead101::mead::ReleaseId* release_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(release_id_);
  }
  release_id_ = release_id;
  if (release_id) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.ReleaseSummary.release_id)
}
inline ::mead101::mead::ReleaseId* ReleaseSummary::release_release_id() {
  _has_bits_[0] &= ~0x00000001u;
  ::mead101::mead::ReleaseId* temp = release_id_;
  release_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::ReleaseId* ReleaseSummary::unsafe_arena_release_release_id() {
  // @@protoc_insertion_point(field_release:mead101.mead.ReleaseSummary.release_id)
  _has_bits_[0] &= ~0x00000001u;
  ::mead101::mead::ReleaseId* temp = release_id_;
  release_id_ = nullptr;
  return temp;
}
inline ::mead101::mead::ReleaseId* ReleaseSummary::_internal_mutable_release_id() {
  _has_bits_[0] |= 0x00000001u;
  if (release_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::ReleaseId>(GetArena());
    release_id_ = p;
  }
  return release_id_;
}
inline ::mead101::mead::ReleaseId* ReleaseSummary::mutable_release_id() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.ReleaseSummary.release_id)
  return _internal_mutable_release_id();
}
inline void ReleaseSummary::set_allocated_release_id(::mead101::mead::ReleaseId* release_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete release_id_;
  }
  if (release_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(release_id);
    if (message_arena != submessage_arena) {
      release_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, release_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  release_id_ = release_id;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.ReleaseSummary.release_id)
}

// -------------------------------------------------------------------

// ReleaseTitle

// optional string language_and_script_code = 1;
inline bool ReleaseTitle::_internal_has_language_and_script_code() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ReleaseTitle::has_language_and_script_code() const {
  return _internal_has_language_and_script_code();
}
inline void ReleaseTitle::clear_language_and_script_code() {
  language_and_script_code_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ReleaseTitle::language_and_script_code() const {
  // @@protoc_insertion_point(field_get:mead101.mead.ReleaseTitle.language_and_script_code)
  return _internal_language_and_script_code();
}
inline void ReleaseTitle::set_language_and_script_code(const std::string& value) {
  _internal_set_language_and_script_code(value);
  // @@protoc_insertion_point(field_set:mead101.mead.ReleaseTitle.language_and_script_code)
}
inline std::string* ReleaseTitle::mutable_language_and_script_code() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.ReleaseTitle.language_and_script_code)
  return _internal_mutable_language_and_script_code();
}
inline const std::string& ReleaseTitle::_internal_language_and_script_code() const {
  return language_and_script_code_.Get();
}
inline void ReleaseTitle::_internal_set_language_and_script_code(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  language_and_script_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ReleaseTitle::set_language_and_script_code(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  language_and_script_code_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.ReleaseTitle.language_and_script_code)
}
inline void ReleaseTitle::set_language_and_script_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  language_and_script_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.ReleaseTitle.language_and_script_code)
}
inline void ReleaseTitle::set_language_and_script_code(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  language_and_script_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.ReleaseTitle.language_and_script_code)
}
inline std::string* ReleaseTitle::_internal_mutable_language_and_script_code() {
  _has_bits_[0] |= 0x00000001u;
  return language_and_script_code_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ReleaseTitle::release_language_and_script_code() {
  // @@protoc_insertion_point(field_release:mead101.mead.ReleaseTitle.language_and_script_code)
  if (!_internal_has_language_and_script_code()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return language_and_script_code_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReleaseTitle::set_allocated_language_and_script_code(std::string* language_and_script_code) {
  if (language_and_script_code != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  language_and_script_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), language_and_script_code,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.ReleaseTitle.language_and_script_code)
}

// optional string ext_value = 2;
inline bool ReleaseTitle::_internal_has_ext_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ReleaseTitle::has_ext_value() const {
  return _internal_has_ext_value();
}
inline void ReleaseTitle::clear_ext_value() {
  ext_value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ReleaseTitle::ext_value() const {
  // @@protoc_insertion_point(field_get:mead101.mead.ReleaseTitle.ext_value)
  return _internal_ext_value();
}
inline void ReleaseTitle::set_ext_value(const std::string& value) {
  _internal_set_ext_value(value);
  // @@protoc_insertion_point(field_set:mead101.mead.ReleaseTitle.ext_value)
}
inline std::string* ReleaseTitle::mutable_ext_value() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.ReleaseTitle.ext_value)
  return _internal_mutable_ext_value();
}
inline const std::string& ReleaseTitle::_internal_ext_value() const {
  return ext_value_.Get();
}
inline void ReleaseTitle::_internal_set_ext_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  ext_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ReleaseTitle::set_ext_value(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  ext_value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.ReleaseTitle.ext_value)
}
inline void ReleaseTitle::set_ext_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  ext_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.ReleaseTitle.ext_value)
}
inline void ReleaseTitle::set_ext_value(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  ext_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.ReleaseTitle.ext_value)
}
inline std::string* ReleaseTitle::_internal_mutable_ext_value() {
  _has_bits_[0] |= 0x00000002u;
  return ext_value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ReleaseTitle::release_ext_value() {
  // @@protoc_insertion_point(field_release:mead101.mead.ReleaseTitle.ext_value)
  if (!_internal_has_ext_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return ext_value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReleaseTitle::set_allocated_ext_value(std::string* ext_value) {
  if (ext_value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  ext_value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ext_value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.ReleaseTitle.ext_value)
}

// -------------------------------------------------------------------

// Resource

// optional string catalog_number = 1;
inline bool Resource::_internal_has_catalog_number() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Resource::has_catalog_number() const {
  return _internal_has_catalog_number();
}
inline void Resource::clear_catalog_number() {
  catalog_number_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Resource::catalog_number() const {
  // @@protoc_insertion_point(field_get:mead101.mead.Resource.catalog_number)
  return _internal_catalog_number();
}
inline void Resource::set_catalog_number(const std::string& value) {
  _internal_set_catalog_number(value);
  // @@protoc_insertion_point(field_set:mead101.mead.Resource.catalog_number)
}
inline std::string* Resource::mutable_catalog_number() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Resource.catalog_number)
  return _internal_mutable_catalog_number();
}
inline const std::string& Resource::_internal_catalog_number() const {
  return catalog_number_.Get();
}
inline void Resource::_internal_set_catalog_number(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  catalog_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Resource::set_catalog_number(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  catalog_number_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.Resource.catalog_number)
}
inline void Resource::set_catalog_number(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  catalog_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.Resource.catalog_number)
}
inline void Resource::set_catalog_number(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  catalog_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.Resource.catalog_number)
}
inline std::string* Resource::_internal_mutable_catalog_number() {
  _has_bits_[0] |= 0x00000001u;
  return catalog_number_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Resource::release_catalog_number() {
  // @@protoc_insertion_point(field_release:mead101.mead.Resource.catalog_number)
  if (!_internal_has_catalog_number()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return catalog_number_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Resource::set_allocated_catalog_number(std::string* catalog_number) {
  if (catalog_number != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  catalog_number_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), catalog_number,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.Resource.catalog_number)
}

// repeated .mead101.mead.DisplayArtist display_artist = 2;
inline int Resource::_internal_display_artist_size() const {
  return display_artist_.size();
}
inline int Resource::display_artist_size() const {
  return _internal_display_artist_size();
}
inline void Resource::clear_display_artist() {
  display_artist_.Clear();
}
inline ::mead101::mead::DisplayArtist* Resource::mutable_display_artist(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Resource.display_artist)
  return display_artist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::DisplayArtist >*
Resource::mutable_display_artist() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.Resource.display_artist)
  return &display_artist_;
}
inline const ::mead101::mead::DisplayArtist& Resource::_internal_display_artist(int index) const {
  return display_artist_.Get(index);
}
inline const ::mead101::mead::DisplayArtist& Resource::display_artist(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.Resource.display_artist)
  return _internal_display_artist(index);
}
inline ::mead101::mead::DisplayArtist* Resource::_internal_add_display_artist() {
  return display_artist_.Add();
}
inline ::mead101::mead::DisplayArtist* Resource::add_display_artist() {
  // @@protoc_insertion_point(field_add:mead101.mead.Resource.display_artist)
  return _internal_add_display_artist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::DisplayArtist >&
Resource::display_artist() const {
  // @@protoc_insertion_point(field_list:mead101.mead.Resource.display_artist)
  return display_artist_;
}

// optional string i_s_r_c = 3;
inline bool Resource::_internal_has_i_s_r_c() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Resource::has_i_s_r_c() const {
  return _internal_has_i_s_r_c();
}
inline void Resource::clear_i_s_r_c() {
  i_s_r_c_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Resource::i_s_r_c() const {
  // @@protoc_insertion_point(field_get:mead101.mead.Resource.i_s_r_c)
  return _internal_i_s_r_c();
}
inline void Resource::set_i_s_r_c(const std::string& value) {
  _internal_set_i_s_r_c(value);
  // @@protoc_insertion_point(field_set:mead101.mead.Resource.i_s_r_c)
}
inline std::string* Resource::mutable_i_s_r_c() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Resource.i_s_r_c)
  return _internal_mutable_i_s_r_c();
}
inline const std::string& Resource::_internal_i_s_r_c() const {
  return i_s_r_c_.Get();
}
inline void Resource::_internal_set_i_s_r_c(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  i_s_r_c_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Resource::set_i_s_r_c(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  i_s_r_c_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.Resource.i_s_r_c)
}
inline void Resource::set_i_s_r_c(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  i_s_r_c_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.Resource.i_s_r_c)
}
inline void Resource::set_i_s_r_c(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  i_s_r_c_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.Resource.i_s_r_c)
}
inline std::string* Resource::_internal_mutable_i_s_r_c() {
  _has_bits_[0] |= 0x00000002u;
  return i_s_r_c_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Resource::release_i_s_r_c() {
  // @@protoc_insertion_point(field_release:mead101.mead.Resource.i_s_r_c)
  if (!_internal_has_i_s_r_c()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return i_s_r_c_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Resource::set_allocated_i_s_r_c(std::string* i_s_r_c) {
  if (i_s_r_c != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  i_s_r_c_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), i_s_r_c,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.Resource.i_s_r_c)
}

// optional string proprietary_resource_id = 4;
inline bool Resource::_internal_has_proprietary_resource_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Resource::has_proprietary_resource_id() const {
  return _internal_has_proprietary_resource_id();
}
inline void Resource::clear_proprietary_resource_id() {
  proprietary_resource_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Resource::proprietary_resource_id() const {
  // @@protoc_insertion_point(field_get:mead101.mead.Resource.proprietary_resource_id)
  return _internal_proprietary_resource_id();
}
inline void Resource::set_proprietary_resource_id(const std::string& value) {
  _internal_set_proprietary_resource_id(value);
  // @@protoc_insertion_point(field_set:mead101.mead.Resource.proprietary_resource_id)
}
inline std::string* Resource::mutable_proprietary_resource_id() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Resource.proprietary_resource_id)
  return _internal_mutable_proprietary_resource_id();
}
inline const std::string& Resource::_internal_proprietary_resource_id() const {
  return proprietary_resource_id_.Get();
}
inline void Resource::_internal_set_proprietary_resource_id(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  proprietary_resource_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Resource::set_proprietary_resource_id(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  proprietary_resource_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.Resource.proprietary_resource_id)
}
inline void Resource::set_proprietary_resource_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  proprietary_resource_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.Resource.proprietary_resource_id)
}
inline void Resource::set_proprietary_resource_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  proprietary_resource_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.Resource.proprietary_resource_id)
}
inline std::string* Resource::_internal_mutable_proprietary_resource_id() {
  _has_bits_[0] |= 0x00000004u;
  return proprietary_resource_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Resource::release_proprietary_resource_id() {
  // @@protoc_insertion_point(field_release:mead101.mead.Resource.proprietary_resource_id)
  if (!_internal_has_proprietary_resource_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return proprietary_resource_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Resource::set_allocated_proprietary_resource_id(std::string* proprietary_resource_id) {
  if (proprietary_resource_id != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  proprietary_resource_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), proprietary_resource_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.Resource.proprietary_resource_id)
}

// repeated .mead101.mead.ResourceTitle resource_title = 5;
inline int Resource::_internal_resource_title_size() const {
  return resource_title_.size();
}
inline int Resource::resource_title_size() const {
  return _internal_resource_title_size();
}
inline void Resource::clear_resource_title() {
  resource_title_.Clear();
}
inline ::mead101::mead::ResourceTitle* Resource::mutable_resource_title(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Resource.resource_title)
  return resource_title_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::ResourceTitle >*
Resource::mutable_resource_title() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.Resource.resource_title)
  return &resource_title_;
}
inline const ::mead101::mead::ResourceTitle& Resource::_internal_resource_title(int index) const {
  return resource_title_.Get(index);
}
inline const ::mead101::mead::ResourceTitle& Resource::resource_title(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.Resource.resource_title)
  return _internal_resource_title(index);
}
inline ::mead101::mead::ResourceTitle* Resource::_internal_add_resource_title() {
  return resource_title_.Add();
}
inline ::mead101::mead::ResourceTitle* Resource::add_resource_title() {
  // @@protoc_insertion_point(field_add:mead101.mead.Resource.resource_title)
  return _internal_add_resource_title();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::ResourceTitle >&
Resource::resource_title() const {
  // @@protoc_insertion_point(field_list:mead101.mead.Resource.resource_title)
  return resource_title_;
}

// -------------------------------------------------------------------

// ResourceContributorRole

// optional string namespace = 1;
inline bool ResourceContributorRole::_internal_has_namespace_() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ResourceContributorRole::has_namespace_() const {
  return _internal_has_namespace_();
}
inline void ResourceContributorRole::clear_namespace_() {
  namespace__.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ResourceContributorRole::namespace_() const {
  // @@protoc_insertion_point(field_get:mead101.mead.ResourceContributorRole.namespace)
  return _internal_namespace_();
}
inline void ResourceContributorRole::set_namespace_(const std::string& value) {
  _internal_set_namespace_(value);
  // @@protoc_insertion_point(field_set:mead101.mead.ResourceContributorRole.namespace)
}
inline std::string* ResourceContributorRole::mutable_namespace_() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.ResourceContributorRole.namespace)
  return _internal_mutable_namespace_();
}
inline const std::string& ResourceContributorRole::_internal_namespace_() const {
  return namespace__.Get();
}
inline void ResourceContributorRole::_internal_set_namespace_(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ResourceContributorRole::set_namespace_(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  namespace__.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.ResourceContributorRole.namespace)
}
inline void ResourceContributorRole::set_namespace_(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.ResourceContributorRole.namespace)
}
inline void ResourceContributorRole::set_namespace_(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.ResourceContributorRole.namespace)
}
inline std::string* ResourceContributorRole::_internal_mutable_namespace_() {
  _has_bits_[0] |= 0x00000001u;
  return namespace__.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ResourceContributorRole::release_namespace_() {
  // @@protoc_insertion_point(field_release:mead101.mead.ResourceContributorRole.namespace)
  if (!_internal_has_namespace_()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return namespace__.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResourceContributorRole::set_allocated_namespace_(std::string* namespace_) {
  if (namespace_ != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  namespace__.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), namespace_,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.ResourceContributorRole.namespace)
}

// optional string user_defined_value = 2;
inline bool ResourceContributorRole::_internal_has_user_defined_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ResourceContributorRole::has_user_defined_value() const {
  return _internal_has_user_defined_value();
}
inline void ResourceContributorRole::clear_user_defined_value() {
  user_defined_value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ResourceContributorRole::user_defined_value() const {
  // @@protoc_insertion_point(field_get:mead101.mead.ResourceContributorRole.user_defined_value)
  return _internal_user_defined_value();
}
inline void ResourceContributorRole::set_user_defined_value(const std::string& value) {
  _internal_set_user_defined_value(value);
  // @@protoc_insertion_point(field_set:mead101.mead.ResourceContributorRole.user_defined_value)
}
inline std::string* ResourceContributorRole::mutable_user_defined_value() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.ResourceContributorRole.user_defined_value)
  return _internal_mutable_user_defined_value();
}
inline const std::string& ResourceContributorRole::_internal_user_defined_value() const {
  return user_defined_value_.Get();
}
inline void ResourceContributorRole::_internal_set_user_defined_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ResourceContributorRole::set_user_defined_value(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  user_defined_value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.ResourceContributorRole.user_defined_value)
}
inline void ResourceContributorRole::set_user_defined_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.ResourceContributorRole.user_defined_value)
}
inline void ResourceContributorRole::set_user_defined_value(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.ResourceContributorRole.user_defined_value)
}
inline std::string* ResourceContributorRole::_internal_mutable_user_defined_value() {
  _has_bits_[0] |= 0x00000002u;
  return user_defined_value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ResourceContributorRole::release_user_defined_value() {
  // @@protoc_insertion_point(field_release:mead101.mead.ResourceContributorRole.user_defined_value)
  if (!_internal_has_user_defined_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return user_defined_value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResourceContributorRole::set_allocated_user_defined_value(std::string* user_defined_value) {
  if (user_defined_value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  user_defined_value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_defined_value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.ResourceContributorRole.user_defined_value)
}

// optional .mead101.avs.ResourceContributorRole ext_value = 3;
inline bool ResourceContributorRole::_internal_has_ext_value() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || ext_value_ != nullptr);
  return value;
}
inline bool ResourceContributorRole::has_ext_value() const {
  return _internal_has_ext_value();
}
inline const ::mead101::avs::ResourceContributorRole& ResourceContributorRole::_internal_ext_value() const {
  const ::mead101::avs::ResourceContributorRole* p = ext_value_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::avs::ResourceContributorRole*>(
      &::mead101::avs::_ResourceContributorRole_default_instance_);
}
inline const ::mead101::avs::ResourceContributorRole& ResourceContributorRole::ext_value() const {
  // @@protoc_insertion_point(field_get:mead101.mead.ResourceContributorRole.ext_value)
  return _internal_ext_value();
}
inline void ResourceContributorRole::unsafe_arena_set_allocated_ext_value(
    ::mead101::avs::ResourceContributorRole* ext_value) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext_value_);
  }
  ext_value_ = ext_value;
  if (ext_value) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.ResourceContributorRole.ext_value)
}
inline ::mead101::avs::ResourceContributorRole* ResourceContributorRole::release_ext_value() {
  _has_bits_[0] &= ~0x00000004u;
  ::mead101::avs::ResourceContributorRole* temp = ext_value_;
  ext_value_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::avs::ResourceContributorRole* ResourceContributorRole::unsafe_arena_release_ext_value() {
  // @@protoc_insertion_point(field_release:mead101.mead.ResourceContributorRole.ext_value)
  _has_bits_[0] &= ~0x00000004u;
  ::mead101::avs::ResourceContributorRole* temp = ext_value_;
  ext_value_ = nullptr;
  return temp;
}
inline ::mead101::avs::ResourceContributorRole* ResourceContributorRole::_internal_mutable_ext_value() {
  _has_bits_[0] |= 0x00000004u;
  if (ext_value_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::avs::ResourceContributorRole>(GetArena());
    ext_value_ = p;
  }
  return ext_value_;
}
inline ::mead101::avs::ResourceContributorRole* ResourceContributorRole::mutable_ext_value() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.ResourceContributorRole.ext_value)
  return _internal_mutable_ext_value();
}
inline void ResourceContributorRole::set_allocated_ext_value(::mead101::avs::ResourceContributorRole* ext_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext_value_);
  }
  if (ext_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext_value)->GetArena();
    if (message_arena != submessage_arena) {
      ext_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext_value, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  ext_value_ = ext_value;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.ResourceContributorRole.ext_value)
}

// -------------------------------------------------------------------

// ResourceId

// optional .mead101.mead.CatalogNumber catalog_number = 1;
inline bool ResourceId::_internal_has_catalog_number() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || catalog_number_ != nullptr);
  return value;
}
inline bool ResourceId::has_catalog_number() const {
  return _internal_has_catalog_number();
}
inline void ResourceId::clear_catalog_number() {
  if (catalog_number_ != nullptr) catalog_number_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
inline const ::mead101::mead::CatalogNumber& ResourceId::_internal_catalog_number() const {
  const ::mead101::mead::CatalogNumber* p = catalog_number_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::CatalogNumber*>(
      &::mead101::mead::_CatalogNumber_default_instance_);
}
inline const ::mead101::mead::CatalogNumber& ResourceId::catalog_number() const {
  // @@protoc_insertion_point(field_get:mead101.mead.ResourceId.catalog_number)
  return _internal_catalog_number();
}
inline void ResourceId::unsafe_arena_set_allocated_catalog_number(
    ::mead101::mead::CatalogNumber* catalog_number) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(catalog_number_);
  }
  catalog_number_ = catalog_number;
  if (catalog_number) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.ResourceId.catalog_number)
}
inline ::mead101::mead::CatalogNumber* ResourceId::release_catalog_number() {
  _has_bits_[0] &= ~0x00000080u;
  ::mead101::mead::CatalogNumber* temp = catalog_number_;
  catalog_number_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::CatalogNumber* ResourceId::unsafe_arena_release_catalog_number() {
  // @@protoc_insertion_point(field_release:mead101.mead.ResourceId.catalog_number)
  _has_bits_[0] &= ~0x00000080u;
  ::mead101::mead::CatalogNumber* temp = catalog_number_;
  catalog_number_ = nullptr;
  return temp;
}
inline ::mead101::mead::CatalogNumber* ResourceId::_internal_mutable_catalog_number() {
  _has_bits_[0] |= 0x00000080u;
  if (catalog_number_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::CatalogNumber>(GetArena());
    catalog_number_ = p;
  }
  return catalog_number_;
}
inline ::mead101::mead::CatalogNumber* ResourceId::mutable_catalog_number() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.ResourceId.catalog_number)
  return _internal_mutable_catalog_number();
}
inline void ResourceId::set_allocated_catalog_number(::mead101::mead::CatalogNumber* catalog_number) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete catalog_number_;
  }
  if (catalog_number) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(catalog_number);
    if (message_arena != submessage_arena) {
      catalog_number = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, catalog_number, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  catalog_number_ = catalog_number;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.ResourceId.catalog_number)
}

// optional string i_s_a_n = 2;
inline bool ResourceId::_internal_has_i_s_a_n() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ResourceId::has_i_s_a_n() const {
  return _internal_has_i_s_a_n();
}
inline void ResourceId::clear_i_s_a_n() {
  i_s_a_n_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ResourceId::i_s_a_n() const {
  // @@protoc_insertion_point(field_get:mead101.mead.ResourceId.i_s_a_n)
  return _internal_i_s_a_n();
}
inline void ResourceId::set_i_s_a_n(const std::string& value) {
  _internal_set_i_s_a_n(value);
  // @@protoc_insertion_point(field_set:mead101.mead.ResourceId.i_s_a_n)
}
inline std::string* ResourceId::mutable_i_s_a_n() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.ResourceId.i_s_a_n)
  return _internal_mutable_i_s_a_n();
}
inline const std::string& ResourceId::_internal_i_s_a_n() const {
  return i_s_a_n_.Get();
}
inline void ResourceId::_internal_set_i_s_a_n(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  i_s_a_n_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ResourceId::set_i_s_a_n(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  i_s_a_n_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.ResourceId.i_s_a_n)
}
inline void ResourceId::set_i_s_a_n(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  i_s_a_n_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.ResourceId.i_s_a_n)
}
inline void ResourceId::set_i_s_a_n(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  i_s_a_n_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.ResourceId.i_s_a_n)
}
inline std::string* ResourceId::_internal_mutable_i_s_a_n() {
  _has_bits_[0] |= 0x00000001u;
  return i_s_a_n_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ResourceId::release_i_s_a_n() {
  // @@protoc_insertion_point(field_release:mead101.mead.ResourceId.i_s_a_n)
  if (!_internal_has_i_s_a_n()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return i_s_a_n_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResourceId::set_allocated_i_s_a_n(std::string* i_s_a_n) {
  if (i_s_a_n != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  i_s_a_n_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), i_s_a_n,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.ResourceId.i_s_a_n)
}

// optional string i_s_b_n = 3;
inline bool ResourceId::_internal_has_i_s_b_n() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ResourceId::has_i_s_b_n() const {
  return _internal_has_i_s_b_n();
}
inline void ResourceId::clear_i_s_b_n() {
  i_s_b_n_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ResourceId::i_s_b_n() const {
  // @@protoc_insertion_point(field_get:mead101.mead.ResourceId.i_s_b_n)
  return _internal_i_s_b_n();
}
inline void ResourceId::set_i_s_b_n(const std::string& value) {
  _internal_set_i_s_b_n(value);
  // @@protoc_insertion_point(field_set:mead101.mead.ResourceId.i_s_b_n)
}
inline std::string* ResourceId::mutable_i_s_b_n() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.ResourceId.i_s_b_n)
  return _internal_mutable_i_s_b_n();
}
inline const std::string& ResourceId::_internal_i_s_b_n() const {
  return i_s_b_n_.Get();
}
inline void ResourceId::_internal_set_i_s_b_n(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  i_s_b_n_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ResourceId::set_i_s_b_n(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  i_s_b_n_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.ResourceId.i_s_b_n)
}
inline void ResourceId::set_i_s_b_n(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  i_s_b_n_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.ResourceId.i_s_b_n)
}
inline void ResourceId::set_i_s_b_n(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  i_s_b_n_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.ResourceId.i_s_b_n)
}
inline std::string* ResourceId::_internal_mutable_i_s_b_n() {
  _has_bits_[0] |= 0x00000002u;
  return i_s_b_n_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ResourceId::release_i_s_b_n() {
  // @@protoc_insertion_point(field_release:mead101.mead.ResourceId.i_s_b_n)
  if (!_internal_has_i_s_b_n()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return i_s_b_n_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResourceId::set_allocated_i_s_b_n(std::string* i_s_b_n) {
  if (i_s_b_n != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  i_s_b_n_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), i_s_b_n,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.ResourceId.i_s_b_n)
}

// optional string i_s_m_n = 4;
inline bool ResourceId::_internal_has_i_s_m_n() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ResourceId::has_i_s_m_n() const {
  return _internal_has_i_s_m_n();
}
inline void ResourceId::clear_i_s_m_n() {
  i_s_m_n_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ResourceId::i_s_m_n() const {
  // @@protoc_insertion_point(field_get:mead101.mead.ResourceId.i_s_m_n)
  return _internal_i_s_m_n();
}
inline void ResourceId::set_i_s_m_n(const std::string& value) {
  _internal_set_i_s_m_n(value);
  // @@protoc_insertion_point(field_set:mead101.mead.ResourceId.i_s_m_n)
}
inline std::string* ResourceId::mutable_i_s_m_n() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.ResourceId.i_s_m_n)
  return _internal_mutable_i_s_m_n();
}
inline const std::string& ResourceId::_internal_i_s_m_n() const {
  return i_s_m_n_.Get();
}
inline void ResourceId::_internal_set_i_s_m_n(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  i_s_m_n_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ResourceId::set_i_s_m_n(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  i_s_m_n_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.ResourceId.i_s_m_n)
}
inline void ResourceId::set_i_s_m_n(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  i_s_m_n_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.ResourceId.i_s_m_n)
}
inline void ResourceId::set_i_s_m_n(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  i_s_m_n_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.ResourceId.i_s_m_n)
}
inline std::string* ResourceId::_internal_mutable_i_s_m_n() {
  _has_bits_[0] |= 0x00000004u;
  return i_s_m_n_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ResourceId::release_i_s_m_n() {
  // @@protoc_insertion_point(field_release:mead101.mead.ResourceId.i_s_m_n)
  if (!_internal_has_i_s_m_n()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return i_s_m_n_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResourceId::set_allocated_i_s_m_n(std::string* i_s_m_n) {
  if (i_s_m_n != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  i_s_m_n_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), i_s_m_n,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.ResourceId.i_s_m_n)
}

// optional string i_s_r_c = 5;
inline bool ResourceId::_internal_has_i_s_r_c() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ResourceId::has_i_s_r_c() const {
  return _internal_has_i_s_r_c();
}
inline void ResourceId::clear_i_s_r_c() {
  i_s_r_c_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& ResourceId::i_s_r_c() const {
  // @@protoc_insertion_point(field_get:mead101.mead.ResourceId.i_s_r_c)
  return _internal_i_s_r_c();
}
inline void ResourceId::set_i_s_r_c(const std::string& value) {
  _internal_set_i_s_r_c(value);
  // @@protoc_insertion_point(field_set:mead101.mead.ResourceId.i_s_r_c)
}
inline std::string* ResourceId::mutable_i_s_r_c() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.ResourceId.i_s_r_c)
  return _internal_mutable_i_s_r_c();
}
inline const std::string& ResourceId::_internal_i_s_r_c() const {
  return i_s_r_c_.Get();
}
inline void ResourceId::_internal_set_i_s_r_c(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  i_s_r_c_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ResourceId::set_i_s_r_c(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  i_s_r_c_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.ResourceId.i_s_r_c)
}
inline void ResourceId::set_i_s_r_c(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  i_s_r_c_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.ResourceId.i_s_r_c)
}
inline void ResourceId::set_i_s_r_c(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  i_s_r_c_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.ResourceId.i_s_r_c)
}
inline std::string* ResourceId::_internal_mutable_i_s_r_c() {
  _has_bits_[0] |= 0x00000008u;
  return i_s_r_c_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ResourceId::release_i_s_r_c() {
  // @@protoc_insertion_point(field_release:mead101.mead.ResourceId.i_s_r_c)
  if (!_internal_has_i_s_r_c()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return i_s_r_c_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResourceId::set_allocated_i_s_r_c(std::string* i_s_r_c) {
  if (i_s_r_c != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  i_s_r_c_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), i_s_r_c,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.ResourceId.i_s_r_c)
}

// optional string i_s_s_n = 6;
inline bool ResourceId::_internal_has_i_s_s_n() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ResourceId::has_i_s_s_n() const {
  return _internal_has_i_s_s_n();
}
inline void ResourceId::clear_i_s_s_n() {
  i_s_s_n_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& ResourceId::i_s_s_n() const {
  // @@protoc_insertion_point(field_get:mead101.mead.ResourceId.i_s_s_n)
  return _internal_i_s_s_n();
}
inline void ResourceId::set_i_s_s_n(const std::string& value) {
  _internal_set_i_s_s_n(value);
  // @@protoc_insertion_point(field_set:mead101.mead.ResourceId.i_s_s_n)
}
inline std::string* ResourceId::mutable_i_s_s_n() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.ResourceId.i_s_s_n)
  return _internal_mutable_i_s_s_n();
}
inline const std::string& ResourceId::_internal_i_s_s_n() const {
  return i_s_s_n_.Get();
}
inline void ResourceId::_internal_set_i_s_s_n(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  i_s_s_n_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ResourceId::set_i_s_s_n(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  i_s_s_n_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.ResourceId.i_s_s_n)
}
inline void ResourceId::set_i_s_s_n(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  i_s_s_n_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.ResourceId.i_s_s_n)
}
inline void ResourceId::set_i_s_s_n(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  i_s_s_n_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.ResourceId.i_s_s_n)
}
inline std::string* ResourceId::_internal_mutable_i_s_s_n() {
  _has_bits_[0] |= 0x00000010u;
  return i_s_s_n_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ResourceId::release_i_s_s_n() {
  // @@protoc_insertion_point(field_release:mead101.mead.ResourceId.i_s_s_n)
  if (!_internal_has_i_s_s_n()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return i_s_s_n_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResourceId::set_allocated_i_s_s_n(std::string* i_s_s_n) {
  if (i_s_s_n != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  i_s_s_n_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), i_s_s_n,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.ResourceId.i_s_s_n)
}

// repeated .mead101.mead.ProprietaryId proprietary_id = 7;
inline int ResourceId::_internal_proprietary_id_size() const {
  return proprietary_id_.size();
}
inline int ResourceId::proprietary_id_size() const {
  return _internal_proprietary_id_size();
}
inline void ResourceId::clear_proprietary_id() {
  proprietary_id_.Clear();
}
inline ::mead101::mead::ProprietaryId* ResourceId::mutable_proprietary_id(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.ResourceId.proprietary_id)
  return proprietary_id_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::ProprietaryId >*
ResourceId::mutable_proprietary_id() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.ResourceId.proprietary_id)
  return &proprietary_id_;
}
inline const ::mead101::mead::ProprietaryId& ResourceId::_internal_proprietary_id(int index) const {
  return proprietary_id_.Get(index);
}
inline const ::mead101::mead::ProprietaryId& ResourceId::proprietary_id(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.ResourceId.proprietary_id)
  return _internal_proprietary_id(index);
}
inline ::mead101::mead::ProprietaryId* ResourceId::_internal_add_proprietary_id() {
  return proprietary_id_.Add();
}
inline ::mead101::mead::ProprietaryId* ResourceId::add_proprietary_id() {
  // @@protoc_insertion_point(field_add:mead101.mead.ResourceId.proprietary_id)
  return _internal_add_proprietary_id();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::ProprietaryId >&
ResourceId::proprietary_id() const {
  // @@protoc_insertion_point(field_list:mead101.mead.ResourceId.proprietary_id)
  return proprietary_id_;
}

// optional string s_i_c_i = 8;
inline bool ResourceId::_internal_has_s_i_c_i() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ResourceId::has_s_i_c_i() const {
  return _internal_has_s_i_c_i();
}
inline void ResourceId::clear_s_i_c_i() {
  s_i_c_i_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& ResourceId::s_i_c_i() const {
  // @@protoc_insertion_point(field_get:mead101.mead.ResourceId.s_i_c_i)
  return _internal_s_i_c_i();
}
inline void ResourceId::set_s_i_c_i(const std::string& value) {
  _internal_set_s_i_c_i(value);
  // @@protoc_insertion_point(field_set:mead101.mead.ResourceId.s_i_c_i)
}
inline std::string* ResourceId::mutable_s_i_c_i() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.ResourceId.s_i_c_i)
  return _internal_mutable_s_i_c_i();
}
inline const std::string& ResourceId::_internal_s_i_c_i() const {
  return s_i_c_i_.Get();
}
inline void ResourceId::_internal_set_s_i_c_i(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  s_i_c_i_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ResourceId::set_s_i_c_i(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  s_i_c_i_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.ResourceId.s_i_c_i)
}
inline void ResourceId::set_s_i_c_i(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  s_i_c_i_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.ResourceId.s_i_c_i)
}
inline void ResourceId::set_s_i_c_i(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000020u;
  s_i_c_i_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.ResourceId.s_i_c_i)
}
inline std::string* ResourceId::_internal_mutable_s_i_c_i() {
  _has_bits_[0] |= 0x00000020u;
  return s_i_c_i_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ResourceId::release_s_i_c_i() {
  // @@protoc_insertion_point(field_release:mead101.mead.ResourceId.s_i_c_i)
  if (!_internal_has_s_i_c_i()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return s_i_c_i_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResourceId::set_allocated_s_i_c_i(std::string* s_i_c_i) {
  if (s_i_c_i != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  s_i_c_i_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), s_i_c_i,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.ResourceId.s_i_c_i)
}

// optional string v_i_s_a_n = 9;
inline bool ResourceId::_internal_has_v_i_s_a_n() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ResourceId::has_v_i_s_a_n() const {
  return _internal_has_v_i_s_a_n();
}
inline void ResourceId::clear_v_i_s_a_n() {
  v_i_s_a_n_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& ResourceId::v_i_s_a_n() const {
  // @@protoc_insertion_point(field_get:mead101.mead.ResourceId.v_i_s_a_n)
  return _internal_v_i_s_a_n();
}
inline void ResourceId::set_v_i_s_a_n(const std::string& value) {
  _internal_set_v_i_s_a_n(value);
  // @@protoc_insertion_point(field_set:mead101.mead.ResourceId.v_i_s_a_n)
}
inline std::string* ResourceId::mutable_v_i_s_a_n() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.ResourceId.v_i_s_a_n)
  return _internal_mutable_v_i_s_a_n();
}
inline const std::string& ResourceId::_internal_v_i_s_a_n() const {
  return v_i_s_a_n_.Get();
}
inline void ResourceId::_internal_set_v_i_s_a_n(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  v_i_s_a_n_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ResourceId::set_v_i_s_a_n(std::string&& value) {
  _has_bits_[0] |= 0x00000040u;
  v_i_s_a_n_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.ResourceId.v_i_s_a_n)
}
inline void ResourceId::set_v_i_s_a_n(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000040u;
  v_i_s_a_n_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.ResourceId.v_i_s_a_n)
}
inline void ResourceId::set_v_i_s_a_n(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000040u;
  v_i_s_a_n_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.ResourceId.v_i_s_a_n)
}
inline std::string* ResourceId::_internal_mutable_v_i_s_a_n() {
  _has_bits_[0] |= 0x00000040u;
  return v_i_s_a_n_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ResourceId::release_v_i_s_a_n() {
  // @@protoc_insertion_point(field_release:mead101.mead.ResourceId.v_i_s_a_n)
  if (!_internal_has_v_i_s_a_n()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  return v_i_s_a_n_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResourceId::set_allocated_v_i_s_a_n(std::string* v_i_s_a_n) {
  if (v_i_s_a_n != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  v_i_s_a_n_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), v_i_s_a_n,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.ResourceId.v_i_s_a_n)
}

// -------------------------------------------------------------------

// ResourceInformation

// optional .mead101.mead.AbsolutePitch absolute_pitch = 1;
inline bool ResourceInformation::_internal_has_absolute_pitch() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || absolute_pitch_ != nullptr);
  return value;
}
inline bool ResourceInformation::has_absolute_pitch() const {
  return _internal_has_absolute_pitch();
}
inline void ResourceInformation::clear_absolute_pitch() {
  if (absolute_pitch_ != nullptr) absolute_pitch_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::mead101::mead::AbsolutePitch& ResourceInformation::_internal_absolute_pitch() const {
  const ::mead101::mead::AbsolutePitch* p = absolute_pitch_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::AbsolutePitch*>(
      &::mead101::mead::_AbsolutePitch_default_instance_);
}
inline const ::mead101::mead::AbsolutePitch& ResourceInformation::absolute_pitch() const {
  // @@protoc_insertion_point(field_get:mead101.mead.ResourceInformation.absolute_pitch)
  return _internal_absolute_pitch();
}
inline void ResourceInformation::unsafe_arena_set_allocated_absolute_pitch(
    ::mead101::mead::AbsolutePitch* absolute_pitch) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(absolute_pitch_);
  }
  absolute_pitch_ = absolute_pitch;
  if (absolute_pitch) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.ResourceInformation.absolute_pitch)
}
inline ::mead101::mead::AbsolutePitch* ResourceInformation::release_absolute_pitch() {
  _has_bits_[0] &= ~0x00000001u;
  ::mead101::mead::AbsolutePitch* temp = absolute_pitch_;
  absolute_pitch_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::AbsolutePitch* ResourceInformation::unsafe_arena_release_absolute_pitch() {
  // @@protoc_insertion_point(field_release:mead101.mead.ResourceInformation.absolute_pitch)
  _has_bits_[0] &= ~0x00000001u;
  ::mead101::mead::AbsolutePitch* temp = absolute_pitch_;
  absolute_pitch_ = nullptr;
  return temp;
}
inline ::mead101::mead::AbsolutePitch* ResourceInformation::_internal_mutable_absolute_pitch() {
  _has_bits_[0] |= 0x00000001u;
  if (absolute_pitch_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::AbsolutePitch>(GetArena());
    absolute_pitch_ = p;
  }
  return absolute_pitch_;
}
inline ::mead101::mead::AbsolutePitch* ResourceInformation::mutable_absolute_pitch() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.ResourceInformation.absolute_pitch)
  return _internal_mutable_absolute_pitch();
}
inline void ResourceInformation::set_allocated_absolute_pitch(::mead101::mead::AbsolutePitch* absolute_pitch) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete absolute_pitch_;
  }
  if (absolute_pitch) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(absolute_pitch);
    if (message_arena != submessage_arena) {
      absolute_pitch = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, absolute_pitch, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  absolute_pitch_ = absolute_pitch;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.ResourceInformation.absolute_pitch)
}

// repeated .mead101.mead.AlternativeTitle alternative_title = 2;
inline int ResourceInformation::_internal_alternative_title_size() const {
  return alternative_title_.size();
}
inline int ResourceInformation::alternative_title_size() const {
  return _internal_alternative_title_size();
}
inline void ResourceInformation::clear_alternative_title() {
  alternative_title_.Clear();
}
inline ::mead101::mead::AlternativeTitle* ResourceInformation::mutable_alternative_title(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.ResourceInformation.alternative_title)
  return alternative_title_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::AlternativeTitle >*
ResourceInformation::mutable_alternative_title() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.ResourceInformation.alternative_title)
  return &alternative_title_;
}
inline const ::mead101::mead::AlternativeTitle& ResourceInformation::_internal_alternative_title(int index) const {
  return alternative_title_.Get(index);
}
inline const ::mead101::mead::AlternativeTitle& ResourceInformation::alternative_title(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.ResourceInformation.alternative_title)
  return _internal_alternative_title(index);
}
inline ::mead101::mead::AlternativeTitle* ResourceInformation::_internal_add_alternative_title() {
  return alternative_title_.Add();
}
inline ::mead101::mead::AlternativeTitle* ResourceInformation::add_alternative_title() {
  // @@protoc_insertion_point(field_add:mead101.mead.ResourceInformation.alternative_title)
  return _internal_add_alternative_title();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::AlternativeTitle >&
ResourceInformation::alternative_title() const {
  // @@protoc_insertion_point(field_list:mead101.mead.ResourceInformation.alternative_title)
  return alternative_title_;
}

// optional .mead101.avs.CurrentTerritoryCode applicable_territory_code = 3;
inline bool ResourceInformation::_internal_has_applicable_territory_code() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || applicable_territory_code_ != nullptr);
  return value;
}
inline bool ResourceInformation::has_applicable_territory_code() const {
  return _internal_has_applicable_territory_code();
}
inline const ::mead101::avs::CurrentTerritoryCode& ResourceInformation::_internal_applicable_territory_code() const {
  const ::mead101::avs::CurrentTerritoryCode* p = applicable_territory_code_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::avs::CurrentTerritoryCode*>(
      &::mead101::avs::_CurrentTerritoryCode_default_instance_);
}
inline const ::mead101::avs::CurrentTerritoryCode& ResourceInformation::applicable_territory_code() const {
  // @@protoc_insertion_point(field_get:mead101.mead.ResourceInformation.applicable_territory_code)
  return _internal_applicable_territory_code();
}
inline void ResourceInformation::unsafe_arena_set_allocated_applicable_territory_code(
    ::mead101::avs::CurrentTerritoryCode* applicable_territory_code) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(applicable_territory_code_);
  }
  applicable_territory_code_ = applicable_territory_code;
  if (applicable_territory_code) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.ResourceInformation.applicable_territory_code)
}
inline ::mead101::avs::CurrentTerritoryCode* ResourceInformation::release_applicable_territory_code() {
  _has_bits_[0] &= ~0x00000002u;
  ::mead101::avs::CurrentTerritoryCode* temp = applicable_territory_code_;
  applicable_territory_code_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::avs::CurrentTerritoryCode* ResourceInformation::unsafe_arena_release_applicable_territory_code() {
  // @@protoc_insertion_point(field_release:mead101.mead.ResourceInformation.applicable_territory_code)
  _has_bits_[0] &= ~0x00000002u;
  ::mead101::avs::CurrentTerritoryCode* temp = applicable_territory_code_;
  applicable_territory_code_ = nullptr;
  return temp;
}
inline ::mead101::avs::CurrentTerritoryCode* ResourceInformation::_internal_mutable_applicable_territory_code() {
  _has_bits_[0] |= 0x00000002u;
  if (applicable_territory_code_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::avs::CurrentTerritoryCode>(GetArena());
    applicable_territory_code_ = p;
  }
  return applicable_territory_code_;
}
inline ::mead101::avs::CurrentTerritoryCode* ResourceInformation::mutable_applicable_territory_code() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.ResourceInformation.applicable_territory_code)
  return _internal_mutable_applicable_territory_code();
}
inline void ResourceInformation::set_allocated_applicable_territory_code(::mead101::avs::CurrentTerritoryCode* applicable_territory_code) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(applicable_territory_code_);
  }
  if (applicable_territory_code) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(applicable_territory_code)->GetArena();
    if (message_arena != submessage_arena) {
      applicable_territory_code = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, applicable_territory_code, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  applicable_territory_code_ = applicable_territory_code;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.ResourceInformation.applicable_territory_code)
}

// repeated .mead101.mead.ArtisticInfluence artistic_influence = 4;
inline int ResourceInformation::_internal_artistic_influence_size() const {
  return artistic_influence_.size();
}
inline int ResourceInformation::artistic_influence_size() const {
  return _internal_artistic_influence_size();
}
inline void ResourceInformation::clear_artistic_influence() {
  artistic_influence_.Clear();
}
inline ::mead101::mead::ArtisticInfluence* ResourceInformation::mutable_artistic_influence(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.ResourceInformation.artistic_influence)
  return artistic_influence_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::ArtisticInfluence >*
ResourceInformation::mutable_artistic_influence() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.ResourceInformation.artistic_influence)
  return &artistic_influence_;
}
inline const ::mead101::mead::ArtisticInfluence& ResourceInformation::_internal_artistic_influence(int index) const {
  return artistic_influence_.Get(index);
}
inline const ::mead101::mead::ArtisticInfluence& ResourceInformation::artistic_influence(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.ResourceInformation.artistic_influence)
  return _internal_artistic_influence(index);
}
inline ::mead101::mead::ArtisticInfluence* ResourceInformation::_internal_add_artistic_influence() {
  return artistic_influence_.Add();
}
inline ::mead101::mead::ArtisticInfluence* ResourceInformation::add_artistic_influence() {
  // @@protoc_insertion_point(field_add:mead101.mead.ResourceInformation.artistic_influence)
  return _internal_add_artistic_influence();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::ArtisticInfluence >&
ResourceInformation::artistic_influence() const {
  // @@protoc_insertion_point(field_list:mead101.mead.ResourceInformation.artistic_influence)
  return artistic_influence_;
}

// repeated .mead101.mead.Award award = 5;
inline int ResourceInformation::_internal_award_size() const {
  return award_.size();
}
inline int ResourceInformation::award_size() const {
  return _internal_award_size();
}
inline void ResourceInformation::clear_award() {
  award_.Clear();
}
inline ::mead101::mead::Award* ResourceInformation::mutable_award(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.ResourceInformation.award)
  return award_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Award >*
ResourceInformation::mutable_award() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.ResourceInformation.award)
  return &award_;
}
inline const ::mead101::mead::Award& ResourceInformation::_internal_award(int index) const {
  return award_.Get(index);
}
inline const ::mead101::mead::Award& ResourceInformation::award(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.ResourceInformation.award)
  return _internal_award(index);
}
inline ::mead101::mead::Award* ResourceInformation::_internal_add_award() {
  return award_.Add();
}
inline ::mead101::mead::Award* ResourceInformation::add_award() {
  // @@protoc_insertion_point(field_add:mead101.mead.ResourceInformation.award)
  return _internal_add_award();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Award >&
ResourceInformation::award() const {
  // @@protoc_insertion_point(field_list:mead101.mead.ResourceInformation.award)
  return award_;
}

// optional .mead101.mead.BeatsPerMinute beats_per_minute = 6;
inline bool ResourceInformation::_internal_has_beats_per_minute() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || beats_per_minute_ != nullptr);
  return value;
}
inline bool ResourceInformation::has_beats_per_minute() const {
  return _internal_has_beats_per_minute();
}
inline void ResourceInformation::clear_beats_per_minute() {
  if (beats_per_minute_ != nullptr) beats_per_minute_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::mead101::mead::BeatsPerMinute& ResourceInformation::_internal_beats_per_minute() const {
  const ::mead101::mead::BeatsPerMinute* p = beats_per_minute_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::BeatsPerMinute*>(
      &::mead101::mead::_BeatsPerMinute_default_instance_);
}
inline const ::mead101::mead::BeatsPerMinute& ResourceInformation::beats_per_minute() const {
  // @@protoc_insertion_point(field_get:mead101.mead.ResourceInformation.beats_per_minute)
  return _internal_beats_per_minute();
}
inline void ResourceInformation::unsafe_arena_set_allocated_beats_per_minute(
    ::mead101::mead::BeatsPerMinute* beats_per_minute) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(beats_per_minute_);
  }
  beats_per_minute_ = beats_per_minute;
  if (beats_per_minute) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.ResourceInformation.beats_per_minute)
}
inline ::mead101::mead::BeatsPerMinute* ResourceInformation::release_beats_per_minute() {
  _has_bits_[0] &= ~0x00000004u;
  ::mead101::mead::BeatsPerMinute* temp = beats_per_minute_;
  beats_per_minute_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::BeatsPerMinute* ResourceInformation::unsafe_arena_release_beats_per_minute() {
  // @@protoc_insertion_point(field_release:mead101.mead.ResourceInformation.beats_per_minute)
  _has_bits_[0] &= ~0x00000004u;
  ::mead101::mead::BeatsPerMinute* temp = beats_per_minute_;
  beats_per_minute_ = nullptr;
  return temp;
}
inline ::mead101::mead::BeatsPerMinute* ResourceInformation::_internal_mutable_beats_per_minute() {
  _has_bits_[0] |= 0x00000004u;
  if (beats_per_minute_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::BeatsPerMinute>(GetArena());
    beats_per_minute_ = p;
  }
  return beats_per_minute_;
}
inline ::mead101::mead::BeatsPerMinute* ResourceInformation::mutable_beats_per_minute() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.ResourceInformation.beats_per_minute)
  return _internal_mutable_beats_per_minute();
}
inline void ResourceInformation::set_allocated_beats_per_minute(::mead101::mead::BeatsPerMinute* beats_per_minute) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete beats_per_minute_;
  }
  if (beats_per_minute) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(beats_per_minute);
    if (message_arena != submessage_arena) {
      beats_per_minute = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, beats_per_minute, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  beats_per_minute_ = beats_per_minute;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.ResourceInformation.beats_per_minute)
}

// repeated .mead101.mead.CommentaryNote commentary_note = 7;
inline int ResourceInformation::_internal_commentary_note_size() const {
  return commentary_note_.size();
}
inline int ResourceInformation::commentary_note_size() const {
  return _internal_commentary_note_size();
}
inline void ResourceInformation::clear_commentary_note() {
  commentary_note_.Clear();
}
inline ::mead101::mead::CommentaryNote* ResourceInformation::mutable_commentary_note(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.ResourceInformation.commentary_note)
  return commentary_note_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::CommentaryNote >*
ResourceInformation::mutable_commentary_note() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.ResourceInformation.commentary_note)
  return &commentary_note_;
}
inline const ::mead101::mead::CommentaryNote& ResourceInformation::_internal_commentary_note(int index) const {
  return commentary_note_.Get(index);
}
inline const ::mead101::mead::CommentaryNote& ResourceInformation::commentary_note(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.ResourceInformation.commentary_note)
  return _internal_commentary_note(index);
}
inline ::mead101::mead::CommentaryNote* ResourceInformation::_internal_add_commentary_note() {
  return commentary_note_.Add();
}
inline ::mead101::mead::CommentaryNote* ResourceInformation::add_commentary_note() {
  // @@protoc_insertion_point(field_add:mead101.mead.ResourceInformation.commentary_note)
  return _internal_add_commentary_note();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::CommentaryNote >&
ResourceInformation::commentary_note() const {
  // @@protoc_insertion_point(field_list:mead101.mead.ResourceInformation.commentary_note)
  return commentary_note_;
}

// repeated .mead101.mead.DanceAndRhythmStyle dance_and_rhythm_style = 8;
inline int ResourceInformation::_internal_dance_and_rhythm_style_size() const {
  return dance_and_rhythm_style_.size();
}
inline int ResourceInformation::dance_and_rhythm_style_size() const {
  return _internal_dance_and_rhythm_style_size();
}
inline void ResourceInformation::clear_dance_and_rhythm_style() {
  dance_and_rhythm_style_.Clear();
}
inline ::mead101::mead::DanceAndRhythmStyle* ResourceInformation::mutable_dance_and_rhythm_style(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.ResourceInformation.dance_and_rhythm_style)
  return dance_and_rhythm_style_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::DanceAndRhythmStyle >*
ResourceInformation::mutable_dance_and_rhythm_style() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.ResourceInformation.dance_and_rhythm_style)
  return &dance_and_rhythm_style_;
}
inline const ::mead101::mead::DanceAndRhythmStyle& ResourceInformation::_internal_dance_and_rhythm_style(int index) const {
  return dance_and_rhythm_style_.Get(index);
}
inline const ::mead101::mead::DanceAndRhythmStyle& ResourceInformation::dance_and_rhythm_style(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.ResourceInformation.dance_and_rhythm_style)
  return _internal_dance_and_rhythm_style(index);
}
inline ::mead101::mead::DanceAndRhythmStyle* ResourceInformation::_internal_add_dance_and_rhythm_style() {
  return dance_and_rhythm_style_.Add();
}
inline ::mead101::mead::DanceAndRhythmStyle* ResourceInformation::add_dance_and_rhythm_style() {
  // @@protoc_insertion_point(field_add:mead101.mead.ResourceInformation.dance_and_rhythm_style)
  return _internal_add_dance_and_rhythm_style();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::DanceAndRhythmStyle >&
ResourceInformation::dance_and_rhythm_style() const {
  // @@protoc_insertion_point(field_list:mead101.mead.ResourceInformation.dance_and_rhythm_style)
  return dance_and_rhythm_style_;
}

// repeated .mead101.mead.Epoch epoch = 9;
inline int ResourceInformation::_internal_epoch_size() const {
  return epoch_.size();
}
inline int ResourceInformation::epoch_size() const {
  return _internal_epoch_size();
}
inline void ResourceInformation::clear_epoch() {
  epoch_.Clear();
}
inline ::mead101::mead::Epoch* ResourceInformation::mutable_epoch(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.ResourceInformation.epoch)
  return epoch_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Epoch >*
ResourceInformation::mutable_epoch() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.ResourceInformation.epoch)
  return &epoch_;
}
inline const ::mead101::mead::Epoch& ResourceInformation::_internal_epoch(int index) const {
  return epoch_.Get(index);
}
inline const ::mead101::mead::Epoch& ResourceInformation::epoch(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.ResourceInformation.epoch)
  return _internal_epoch(index);
}
inline ::mead101::mead::Epoch* ResourceInformation::_internal_add_epoch() {
  return epoch_.Add();
}
inline ::mead101::mead::Epoch* ResourceInformation::add_epoch() {
  // @@protoc_insertion_point(field_add:mead101.mead.ResourceInformation.epoch)
  return _internal_add_epoch();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Epoch >&
ResourceInformation::epoch() const {
  // @@protoc_insertion_point(field_list:mead101.mead.ResourceInformation.epoch)
  return epoch_;
}

// repeated .mead101.mead.GenreCategory genre_category = 10;
inline int ResourceInformation::_internal_genre_category_size() const {
  return genre_category_.size();
}
inline int ResourceInformation::genre_category_size() const {
  return _internal_genre_category_size();
}
inline void ResourceInformation::clear_genre_category() {
  genre_category_.Clear();
}
inline ::mead101::mead::GenreCategory* ResourceInformation::mutable_genre_category(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.ResourceInformation.genre_category)
  return genre_category_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::GenreCategory >*
ResourceInformation::mutable_genre_category() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.ResourceInformation.genre_category)
  return &genre_category_;
}
inline const ::mead101::mead::GenreCategory& ResourceInformation::_internal_genre_category(int index) const {
  return genre_category_.Get(index);
}
inline const ::mead101::mead::GenreCategory& ResourceInformation::genre_category(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.ResourceInformation.genre_category)
  return _internal_genre_category(index);
}
inline ::mead101::mead::GenreCategory* ResourceInformation::_internal_add_genre_category() {
  return genre_category_.Add();
}
inline ::mead101::mead::GenreCategory* ResourceInformation::add_genre_category() {
  // @@protoc_insertion_point(field_add:mead101.mead.ResourceInformation.genre_category)
  return _internal_add_genre_category();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::GenreCategory >&
ResourceInformation::genre_category() const {
  // @@protoc_insertion_point(field_list:mead101.mead.ResourceInformation.genre_category)
  return genre_category_;
}

// optional .mead101.mead.Harmony harmony = 11;
inline bool ResourceInformation::_internal_has_harmony() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || harmony_ != nullptr);
  return value;
}
inline bool ResourceInformation::has_harmony() const {
  return _internal_has_harmony();
}
inline void ResourceInformation::clear_harmony() {
  if (harmony_ != nullptr) harmony_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::mead101::mead::Harmony& ResourceInformation::_internal_harmony() const {
  const ::mead101::mead::Harmony* p = harmony_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::Harmony*>(
      &::mead101::mead::_Harmony_default_instance_);
}
inline const ::mead101::mead::Harmony& ResourceInformation::harmony() const {
  // @@protoc_insertion_point(field_get:mead101.mead.ResourceInformation.harmony)
  return _internal_harmony();
}
inline void ResourceInformation::unsafe_arena_set_allocated_harmony(
    ::mead101::mead::Harmony* harmony) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(harmony_);
  }
  harmony_ = harmony;
  if (harmony) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.ResourceInformation.harmony)
}
inline ::mead101::mead::Harmony* ResourceInformation::release_harmony() {
  _has_bits_[0] &= ~0x00000008u;
  ::mead101::mead::Harmony* temp = harmony_;
  harmony_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::Harmony* ResourceInformation::unsafe_arena_release_harmony() {
  // @@protoc_insertion_point(field_release:mead101.mead.ResourceInformation.harmony)
  _has_bits_[0] &= ~0x00000008u;
  ::mead101::mead::Harmony* temp = harmony_;
  harmony_ = nullptr;
  return temp;
}
inline ::mead101::mead::Harmony* ResourceInformation::_internal_mutable_harmony() {
  _has_bits_[0] |= 0x00000008u;
  if (harmony_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::Harmony>(GetArena());
    harmony_ = p;
  }
  return harmony_;
}
inline ::mead101::mead::Harmony* ResourceInformation::mutable_harmony() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.ResourceInformation.harmony)
  return _internal_mutable_harmony();
}
inline void ResourceInformation::set_allocated_harmony(::mead101::mead::Harmony* harmony) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete harmony_;
  }
  if (harmony) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(harmony);
    if (message_arena != submessage_arena) {
      harmony = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, harmony, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  harmony_ = harmony;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.ResourceInformation.harmony)
}

// repeated .mead101.mead.HistoricChartingInformation historic_charting_information = 12;
inline int ResourceInformation::_internal_historic_charting_information_size() const {
  return historic_charting_information_.size();
}
inline int ResourceInformation::historic_charting_information_size() const {
  return _internal_historic_charting_information_size();
}
inline void ResourceInformation::clear_historic_charting_information() {
  historic_charting_information_.Clear();
}
inline ::mead101::mead::HistoricChartingInformation* ResourceInformation::mutable_historic_charting_information(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.ResourceInformation.historic_charting_information)
  return historic_charting_information_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::HistoricChartingInformation >*
ResourceInformation::mutable_historic_charting_information() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.ResourceInformation.historic_charting_information)
  return &historic_charting_information_;
}
inline const ::mead101::mead::HistoricChartingInformation& ResourceInformation::_internal_historic_charting_information(int index) const {
  return historic_charting_information_.Get(index);
}
inline const ::mead101::mead::HistoricChartingInformation& ResourceInformation::historic_charting_information(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.ResourceInformation.historic_charting_information)
  return _internal_historic_charting_information(index);
}
inline ::mead101::mead::HistoricChartingInformation* ResourceInformation::_internal_add_historic_charting_information() {
  return historic_charting_information_.Add();
}
inline ::mead101::mead::HistoricChartingInformation* ResourceInformation::add_historic_charting_information() {
  // @@protoc_insertion_point(field_add:mead101.mead.ResourceInformation.historic_charting_information)
  return _internal_add_historic_charting_information();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::HistoricChartingInformation >&
ResourceInformation::historic_charting_information() const {
  // @@protoc_insertion_point(field_list:mead101.mead.ResourceInformation.historic_charting_information)
  return historic_charting_information_;
}

// repeated .mead101.mead.Image image = 13;
inline int ResourceInformation::_internal_image_size() const {
  return image_.size();
}
inline int ResourceInformation::image_size() const {
  return _internal_image_size();
}
inline void ResourceInformation::clear_image() {
  image_.Clear();
}
inline ::mead101::mead::Image* ResourceInformation::mutable_image(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.ResourceInformation.image)
  return image_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Image >*
ResourceInformation::mutable_image() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.ResourceInformation.image)
  return &image_;
}
inline const ::mead101::mead::Image& ResourceInformation::_internal_image(int index) const {
  return image_.Get(index);
}
inline const ::mead101::mead::Image& ResourceInformation::image(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.ResourceInformation.image)
  return _internal_image(index);
}
inline ::mead101::mead::Image* ResourceInformation::_internal_add_image() {
  return image_.Add();
}
inline ::mead101::mead::Image* ResourceInformation::add_image() {
  // @@protoc_insertion_point(field_add:mead101.mead.ResourceInformation.image)
  return _internal_add_image();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Image >&
ResourceInformation::image() const {
  // @@protoc_insertion_point(field_list:mead101.mead.ResourceInformation.image)
  return image_;
}

// repeated .mead101.mead.InstrumentUsed instrument_used = 14;
inline int ResourceInformation::_internal_instrument_used_size() const {
  return instrument_used_.size();
}
inline int ResourceInformation::instrument_used_size() const {
  return _internal_instrument_used_size();
}
inline void ResourceInformation::clear_instrument_used() {
  instrument_used_.Clear();
}
inline ::mead101::mead::InstrumentUsed* ResourceInformation::mutable_instrument_used(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.ResourceInformation.instrument_used)
  return instrument_used_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::InstrumentUsed >*
ResourceInformation::mutable_instrument_used() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.ResourceInformation.instrument_used)
  return &instrument_used_;
}
inline const ::mead101::mead::InstrumentUsed& ResourceInformation::_internal_instrument_used(int index) const {
  return instrument_used_.Get(index);
}
inline const ::mead101::mead::InstrumentUsed& ResourceInformation::instrument_used(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.ResourceInformation.instrument_used)
  return _internal_instrument_used(index);
}
inline ::mead101::mead::InstrumentUsed* ResourceInformation::_internal_add_instrument_used() {
  return instrument_used_.Add();
}
inline ::mead101::mead::InstrumentUsed* ResourceInformation::add_instrument_used() {
  // @@protoc_insertion_point(field_add:mead101.mead.ResourceInformation.instrument_used)
  return _internal_add_instrument_used();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::InstrumentUsed >&
ResourceInformation::instrument_used() const {
  // @@protoc_insertion_point(field_list:mead101.mead.ResourceInformation.instrument_used)
  return instrument_used_;
}

// optional .mead101.mead.Flag is_cover = 15;
inline bool ResourceInformation::_internal_has_is_cover() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || is_cover_ != nullptr);
  return value;
}
inline bool ResourceInformation::has_is_cover() const {
  return _internal_has_is_cover();
}
inline void ResourceInformation::clear_is_cover() {
  if (is_cover_ != nullptr) is_cover_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::mead101::mead::Flag& ResourceInformation::_internal_is_cover() const {
  const ::mead101::mead::Flag* p = is_cover_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::Flag*>(
      &::mead101::mead::_Flag_default_instance_);
}
inline const ::mead101::mead::Flag& ResourceInformation::is_cover() const {
  // @@protoc_insertion_point(field_get:mead101.mead.ResourceInformation.is_cover)
  return _internal_is_cover();
}
inline void ResourceInformation::unsafe_arena_set_allocated_is_cover(
    ::mead101::mead::Flag* is_cover) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(is_cover_);
  }
  is_cover_ = is_cover;
  if (is_cover) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.ResourceInformation.is_cover)
}
inline ::mead101::mead::Flag* ResourceInformation::release_is_cover() {
  _has_bits_[0] &= ~0x00000010u;
  ::mead101::mead::Flag* temp = is_cover_;
  is_cover_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::Flag* ResourceInformation::unsafe_arena_release_is_cover() {
  // @@protoc_insertion_point(field_release:mead101.mead.ResourceInformation.is_cover)
  _has_bits_[0] &= ~0x00000010u;
  ::mead101::mead::Flag* temp = is_cover_;
  is_cover_ = nullptr;
  return temp;
}
inline ::mead101::mead::Flag* ResourceInformation::_internal_mutable_is_cover() {
  _has_bits_[0] |= 0x00000010u;
  if (is_cover_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::Flag>(GetArena());
    is_cover_ = p;
  }
  return is_cover_;
}
inline ::mead101::mead::Flag* ResourceInformation::mutable_is_cover() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.ResourceInformation.is_cover)
  return _internal_mutable_is_cover();
}
inline void ResourceInformation::set_allocated_is_cover(::mead101::mead::Flag* is_cover) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete is_cover_;
  }
  if (is_cover) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(is_cover);
    if (message_arena != submessage_arena) {
      is_cover = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, is_cover, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  is_cover_ = is_cover;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.ResourceInformation.is_cover)
}

// optional .mead101.mead.Flag is_original = 16;
inline bool ResourceInformation::_internal_has_is_original() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || is_original_ != nullptr);
  return value;
}
inline bool ResourceInformation::has_is_original() const {
  return _internal_has_is_original();
}
inline void ResourceInformation::clear_is_original() {
  if (is_original_ != nullptr) is_original_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::mead101::mead::Flag& ResourceInformation::_internal_is_original() const {
  const ::mead101::mead::Flag* p = is_original_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::Flag*>(
      &::mead101::mead::_Flag_default_instance_);
}
inline const ::mead101::mead::Flag& ResourceInformation::is_original() const {
  // @@protoc_insertion_point(field_get:mead101.mead.ResourceInformation.is_original)
  return _internal_is_original();
}
inline void ResourceInformation::unsafe_arena_set_allocated_is_original(
    ::mead101::mead::Flag* is_original) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(is_original_);
  }
  is_original_ = is_original;
  if (is_original) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.ResourceInformation.is_original)
}
inline ::mead101::mead::Flag* ResourceInformation::release_is_original() {
  _has_bits_[0] &= ~0x00000020u;
  ::mead101::mead::Flag* temp = is_original_;
  is_original_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::Flag* ResourceInformation::unsafe_arena_release_is_original() {
  // @@protoc_insertion_point(field_release:mead101.mead.ResourceInformation.is_original)
  _has_bits_[0] &= ~0x00000020u;
  ::mead101::mead::Flag* temp = is_original_;
  is_original_ = nullptr;
  return temp;
}
inline ::mead101::mead::Flag* ResourceInformation::_internal_mutable_is_original() {
  _has_bits_[0] |= 0x00000020u;
  if (is_original_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::Flag>(GetArena());
    is_original_ = p;
  }
  return is_original_;
}
inline ::mead101::mead::Flag* ResourceInformation::mutable_is_original() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.ResourceInformation.is_original)
  return _internal_mutable_is_original();
}
inline void ResourceInformation::set_allocated_is_original(::mead101::mead::Flag* is_original) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete is_original_;
  }
  if (is_original) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(is_original);
    if (message_arena != submessage_arena) {
      is_original = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, is_original, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  is_original_ = is_original;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.ResourceInformation.is_original)
}

// repeated .mead101.mead.SimilarResource is_similar = 17;
inline int ResourceInformation::_internal_is_similar_size() const {
  return is_similar_.size();
}
inline int ResourceInformation::is_similar_size() const {
  return _internal_is_similar_size();
}
inline void ResourceInformation::clear_is_similar() {
  is_similar_.Clear();
}
inline ::mead101::mead::SimilarResource* ResourceInformation::mutable_is_similar(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.ResourceInformation.is_similar)
  return is_similar_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::SimilarResource >*
ResourceInformation::mutable_is_similar() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.ResourceInformation.is_similar)
  return &is_similar_;
}
inline const ::mead101::mead::SimilarResource& ResourceInformation::_internal_is_similar(int index) const {
  return is_similar_.Get(index);
}
inline const ::mead101::mead::SimilarResource& ResourceInformation::is_similar(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.ResourceInformation.is_similar)
  return _internal_is_similar(index);
}
inline ::mead101::mead::SimilarResource* ResourceInformation::_internal_add_is_similar() {
  return is_similar_.Add();
}
inline ::mead101::mead::SimilarResource* ResourceInformation::add_is_similar() {
  // @@protoc_insertion_point(field_add:mead101.mead.ResourceInformation.is_similar)
  return _internal_add_is_similar();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::SimilarResource >&
ResourceInformation::is_similar() const {
  // @@protoc_insertion_point(field_list:mead101.mead.ResourceInformation.is_similar)
  return is_similar_;
}

// repeated .mead101.mead.LocationAndDateOfSession location_and_date_of_session = 18;
inline int ResourceInformation::_internal_location_and_date_of_session_size() const {
  return location_and_date_of_session_.size();
}
inline int ResourceInformation::location_and_date_of_session_size() const {
  return _internal_location_and_date_of_session_size();
}
inline void ResourceInformation::clear_location_and_date_of_session() {
  location_and_date_of_session_.Clear();
}
inline ::mead101::mead::LocationAndDateOfSession* ResourceInformation::mutable_location_and_date_of_session(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.ResourceInformation.location_and_date_of_session)
  return location_and_date_of_session_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::LocationAndDateOfSession >*
ResourceInformation::mutable_location_and_date_of_session() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.ResourceInformation.location_and_date_of_session)
  return &location_and_date_of_session_;
}
inline const ::mead101::mead::LocationAndDateOfSession& ResourceInformation::_internal_location_and_date_of_session(int index) const {
  return location_and_date_of_session_.Get(index);
}
inline const ::mead101::mead::LocationAndDateOfSession& ResourceInformation::location_and_date_of_session(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.ResourceInformation.location_and_date_of_session)
  return _internal_location_and_date_of_session(index);
}
inline ::mead101::mead::LocationAndDateOfSession* ResourceInformation::_internal_add_location_and_date_of_session() {
  return location_and_date_of_session_.Add();
}
inline ::mead101::mead::LocationAndDateOfSession* ResourceInformation::add_location_and_date_of_session() {
  // @@protoc_insertion_point(field_add:mead101.mead.ResourceInformation.location_and_date_of_session)
  return _internal_add_location_and_date_of_session();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::LocationAndDateOfSession >&
ResourceInformation::location_and_date_of_session() const {
  // @@protoc_insertion_point(field_list:mead101.mead.ResourceInformation.location_and_date_of_session)
  return location_and_date_of_session_;
}

// repeated .mead101.mead.Theme lyric_theme = 19;
inline int ResourceInformation::_internal_lyric_theme_size() const {
  return lyric_theme_.size();
}
inline int ResourceInformation::lyric_theme_size() const {
  return _internal_lyric_theme_size();
}
inline void ResourceInformation::clear_lyric_theme() {
  lyric_theme_.Clear();
}
inline ::mead101::mead::Theme* ResourceInformation::mutable_lyric_theme(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.ResourceInformation.lyric_theme)
  return lyric_theme_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Theme >*
ResourceInformation::mutable_lyric_theme() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.ResourceInformation.lyric_theme)
  return &lyric_theme_;
}
inline const ::mead101::mead::Theme& ResourceInformation::_internal_lyric_theme(int index) const {
  return lyric_theme_.Get(index);
}
inline const ::mead101::mead::Theme& ResourceInformation::lyric_theme(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.ResourceInformation.lyric_theme)
  return _internal_lyric_theme(index);
}
inline ::mead101::mead::Theme* ResourceInformation::_internal_add_lyric_theme() {
  return lyric_theme_.Add();
}
inline ::mead101::mead::Theme* ResourceInformation::add_lyric_theme() {
  // @@protoc_insertion_point(field_add:mead101.mead.ResourceInformation.lyric_theme)
  return _internal_add_lyric_theme();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Theme >&
ResourceInformation::lyric_theme() const {
  // @@protoc_insertion_point(field_list:mead101.mead.ResourceInformation.lyric_theme)
  return lyric_theme_;
}

// repeated .mead101.mead.Lyrics lyrics = 20;
inline int ResourceInformation::_internal_lyrics_size() const {
  return lyrics_.size();
}
inline int ResourceInformation::lyrics_size() const {
  return _internal_lyrics_size();
}
inline void ResourceInformation::clear_lyrics() {
  lyrics_.Clear();
}
inline ::mead101::mead::Lyrics* ResourceInformation::mutable_lyrics(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.ResourceInformation.lyrics)
  return lyrics_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Lyrics >*
ResourceInformation::mutable_lyrics() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.ResourceInformation.lyrics)
  return &lyrics_;
}
inline const ::mead101::mead::Lyrics& ResourceInformation::_internal_lyrics(int index) const {
  return lyrics_.Get(index);
}
inline const ::mead101::mead::Lyrics& ResourceInformation::lyrics(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.ResourceInformation.lyrics)
  return _internal_lyrics(index);
}
inline ::mead101::mead::Lyrics* ResourceInformation::_internal_add_lyrics() {
  return lyrics_.Add();
}
inline ::mead101::mead::Lyrics* ResourceInformation::add_lyrics() {
  // @@protoc_insertion_point(field_add:mead101.mead.ResourceInformation.lyrics)
  return _internal_add_lyrics();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Lyrics >&
ResourceInformation::lyrics() const {
  // @@protoc_insertion_point(field_list:mead101.mead.ResourceInformation.lyrics)
  return lyrics_;
}

// repeated .mead101.mead.Mood mood = 21;
inline int ResourceInformation::_internal_mood_size() const {
  return mood_.size();
}
inline int ResourceInformation::mood_size() const {
  return _internal_mood_size();
}
inline void ResourceInformation::clear_mood() {
  mood_.Clear();
}
inline ::mead101::mead::Mood* ResourceInformation::mutable_mood(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.ResourceInformation.mood)
  return mood_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Mood >*
ResourceInformation::mutable_mood() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.ResourceInformation.mood)
  return &mood_;
}
inline const ::mead101::mead::Mood& ResourceInformation::_internal_mood(int index) const {
  return mood_.Get(index);
}
inline const ::mead101::mead::Mood& ResourceInformation::mood(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.ResourceInformation.mood)
  return _internal_mood(index);
}
inline ::mead101::mead::Mood* ResourceInformation::_internal_add_mood() {
  return mood_.Add();
}
inline ::mead101::mead::Mood* ResourceInformation::add_mood() {
  // @@protoc_insertion_point(field_add:mead101.mead.ResourceInformation.mood)
  return _internal_add_mood();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Mood >&
ResourceInformation::mood() const {
  // @@protoc_insertion_point(field_list:mead101.mead.ResourceInformation.mood)
  return mood_;
}

// optional .mead101.mead.ddex_IsoDate priority_period_end_date = 22;
inline bool ResourceInformation::_internal_has_priority_period_end_date() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || priority_period_end_date_ != nullptr);
  return value;
}
inline bool ResourceInformation::has_priority_period_end_date() const {
  return _internal_has_priority_period_end_date();
}
inline void ResourceInformation::clear_priority_period_end_date() {
  if (priority_period_end_date_ != nullptr) priority_period_end_date_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::mead101::mead::ddex_IsoDate& ResourceInformation::_internal_priority_period_end_date() const {
  const ::mead101::mead::ddex_IsoDate* p = priority_period_end_date_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::ddex_IsoDate*>(
      &::mead101::mead::_ddex_IsoDate_default_instance_);
}
inline const ::mead101::mead::ddex_IsoDate& ResourceInformation::priority_period_end_date() const {
  // @@protoc_insertion_point(field_get:mead101.mead.ResourceInformation.priority_period_end_date)
  return _internal_priority_period_end_date();
}
inline void ResourceInformation::unsafe_arena_set_allocated_priority_period_end_date(
    ::mead101::mead::ddex_IsoDate* priority_period_end_date) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(priority_period_end_date_);
  }
  priority_period_end_date_ = priority_period_end_date;
  if (priority_period_end_date) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.ResourceInformation.priority_period_end_date)
}
inline ::mead101::mead::ddex_IsoDate* ResourceInformation::release_priority_period_end_date() {
  _has_bits_[0] &= ~0x00000040u;
  ::mead101::mead::ddex_IsoDate* temp = priority_period_end_date_;
  priority_period_end_date_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::ddex_IsoDate* ResourceInformation::unsafe_arena_release_priority_period_end_date() {
  // @@protoc_insertion_point(field_release:mead101.mead.ResourceInformation.priority_period_end_date)
  _has_bits_[0] &= ~0x00000040u;
  ::mead101::mead::ddex_IsoDate* temp = priority_period_end_date_;
  priority_period_end_date_ = nullptr;
  return temp;
}
inline ::mead101::mead::ddex_IsoDate* ResourceInformation::_internal_mutable_priority_period_end_date() {
  _has_bits_[0] |= 0x00000040u;
  if (priority_period_end_date_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::ddex_IsoDate>(GetArena());
    priority_period_end_date_ = p;
  }
  return priority_period_end_date_;
}
inline ::mead101::mead::ddex_IsoDate* ResourceInformation::mutable_priority_period_end_date() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.ResourceInformation.priority_period_end_date)
  return _internal_mutable_priority_period_end_date();
}
inline void ResourceInformation::set_allocated_priority_period_end_date(::mead101::mead::ddex_IsoDate* priority_period_end_date) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete priority_period_end_date_;
  }
  if (priority_period_end_date) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(priority_period_end_date);
    if (message_arena != submessage_arena) {
      priority_period_end_date = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, priority_period_end_date, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  priority_period_end_date_ = priority_period_end_date;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.ResourceInformation.priority_period_end_date)
}

// optional .mead101.mead.ddex_IsoDate priority_period_start_date = 23;
inline bool ResourceInformation::_internal_has_priority_period_start_date() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || priority_period_start_date_ != nullptr);
  return value;
}
inline bool ResourceInformation::has_priority_period_start_date() const {
  return _internal_has_priority_period_start_date();
}
inline void ResourceInformation::clear_priority_period_start_date() {
  if (priority_period_start_date_ != nullptr) priority_period_start_date_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
inline const ::mead101::mead::ddex_IsoDate& ResourceInformation::_internal_priority_period_start_date() const {
  const ::mead101::mead::ddex_IsoDate* p = priority_period_start_date_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::ddex_IsoDate*>(
      &::mead101::mead::_ddex_IsoDate_default_instance_);
}
inline const ::mead101::mead::ddex_IsoDate& ResourceInformation::priority_period_start_date() const {
  // @@protoc_insertion_point(field_get:mead101.mead.ResourceInformation.priority_period_start_date)
  return _internal_priority_period_start_date();
}
inline void ResourceInformation::unsafe_arena_set_allocated_priority_period_start_date(
    ::mead101::mead::ddex_IsoDate* priority_period_start_date) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(priority_period_start_date_);
  }
  priority_period_start_date_ = priority_period_start_date;
  if (priority_period_start_date) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.ResourceInformation.priority_period_start_date)
}
inline ::mead101::mead::ddex_IsoDate* ResourceInformation::release_priority_period_start_date() {
  _has_bits_[0] &= ~0x00000080u;
  ::mead101::mead::ddex_IsoDate* temp = priority_period_start_date_;
  priority_period_start_date_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::ddex_IsoDate* ResourceInformation::unsafe_arena_release_priority_period_start_date() {
  // @@protoc_insertion_point(field_release:mead101.mead.ResourceInformation.priority_period_start_date)
  _has_bits_[0] &= ~0x00000080u;
  ::mead101::mead::ddex_IsoDate* temp = priority_period_start_date_;
  priority_period_start_date_ = nullptr;
  return temp;
}
inline ::mead101::mead::ddex_IsoDate* ResourceInformation::_internal_mutable_priority_period_start_date() {
  _has_bits_[0] |= 0x00000080u;
  if (priority_period_start_date_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::ddex_IsoDate>(GetArena());
    priority_period_start_date_ = p;
  }
  return priority_period_start_date_;
}
inline ::mead101::mead::ddex_IsoDate* ResourceInformation::mutable_priority_period_start_date() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.ResourceInformation.priority_period_start_date)
  return _internal_mutable_priority_period_start_date();
}
inline void ResourceInformation::set_allocated_priority_period_start_date(::mead101::mead::ddex_IsoDate* priority_period_start_date) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete priority_period_start_date_;
  }
  if (priority_period_start_date) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(priority_period_start_date);
    if (message_arena != submessage_arena) {
      priority_period_start_date = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, priority_period_start_date, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  priority_period_start_date_ = priority_period_start_date;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.ResourceInformation.priority_period_start_date)
}

// repeated .mead101.mead.Theme programmatic_theme = 24;
inline int ResourceInformation::_internal_programmatic_theme_size() const {
  return programmatic_theme_.size();
}
inline int ResourceInformation::programmatic_theme_size() const {
  return _internal_programmatic_theme_size();
}
inline void ResourceInformation::clear_programmatic_theme() {
  programmatic_theme_.Clear();
}
inline ::mead101::mead::Theme* ResourceInformation::mutable_programmatic_theme(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.ResourceInformation.programmatic_theme)
  return programmatic_theme_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Theme >*
ResourceInformation::mutable_programmatic_theme() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.ResourceInformation.programmatic_theme)
  return &programmatic_theme_;
}
inline const ::mead101::mead::Theme& ResourceInformation::_internal_programmatic_theme(int index) const {
  return programmatic_theme_.Get(index);
}
inline const ::mead101::mead::Theme& ResourceInformation::programmatic_theme(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.ResourceInformation.programmatic_theme)
  return _internal_programmatic_theme(index);
}
inline ::mead101::mead::Theme* ResourceInformation::_internal_add_programmatic_theme() {
  return programmatic_theme_.Add();
}
inline ::mead101::mead::Theme* ResourceInformation::add_programmatic_theme() {
  // @@protoc_insertion_point(field_add:mead101.mead.ResourceInformation.programmatic_theme)
  return _internal_add_programmatic_theme();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Theme >&
ResourceInformation::programmatic_theme() const {
  // @@protoc_insertion_point(field_list:mead101.mead.ResourceInformation.programmatic_theme)
  return programmatic_theme_;
}

// repeated .mead101.mead.RecordingPart recording_part = 25;
inline int ResourceInformation::_internal_recording_part_size() const {
  return recording_part_.size();
}
inline int ResourceInformation::recording_part_size() const {
  return _internal_recording_part_size();
}
inline void ResourceInformation::clear_recording_part() {
  recording_part_.Clear();
}
inline ::mead101::mead::RecordingPart* ResourceInformation::mutable_recording_part(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.ResourceInformation.recording_part)
  return recording_part_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::RecordingPart >*
ResourceInformation::mutable_recording_part() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.ResourceInformation.recording_part)
  return &recording_part_;
}
inline const ::mead101::mead::RecordingPart& ResourceInformation::_internal_recording_part(int index) const {
  return recording_part_.Get(index);
}
inline const ::mead101::mead::RecordingPart& ResourceInformation::recording_part(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.ResourceInformation.recording_part)
  return _internal_recording_part(index);
}
inline ::mead101::mead::RecordingPart* ResourceInformation::_internal_add_recording_part() {
  return recording_part_.Add();
}
inline ::mead101::mead::RecordingPart* ResourceInformation::add_recording_part() {
  // @@protoc_insertion_point(field_add:mead101.mead.ResourceInformation.recording_part)
  return _internal_add_recording_part();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::RecordingPart >&
ResourceInformation::recording_part() const {
  // @@protoc_insertion_point(field_list:mead101.mead.ResourceInformation.recording_part)
  return recording_part_;
}

// repeated .mead101.mead.ResourceRelationship related_resource = 26;
inline int ResourceInformation::_internal_related_resource_size() const {
  return related_resource_.size();
}
inline int ResourceInformation::related_resource_size() const {
  return _internal_related_resource_size();
}
inline void ResourceInformation::clear_related_resource() {
  related_resource_.Clear();
}
inline ::mead101::mead::ResourceRelationship* ResourceInformation::mutable_related_resource(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.ResourceInformation.related_resource)
  return related_resource_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::ResourceRelationship >*
ResourceInformation::mutable_related_resource() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.ResourceInformation.related_resource)
  return &related_resource_;
}
inline const ::mead101::mead::ResourceRelationship& ResourceInformation::_internal_related_resource(int index) const {
  return related_resource_.Get(index);
}
inline const ::mead101::mead::ResourceRelationship& ResourceInformation::related_resource(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.ResourceInformation.related_resource)
  return _internal_related_resource(index);
}
inline ::mead101::mead::ResourceRelationship* ResourceInformation::_internal_add_related_resource() {
  return related_resource_.Add();
}
inline ::mead101::mead::ResourceRelationship* ResourceInformation::add_related_resource() {
  // @@protoc_insertion_point(field_add:mead101.mead.ResourceInformation.related_resource)
  return _internal_add_related_resource();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::ResourceRelationship >&
ResourceInformation::related_resource() const {
  // @@protoc_insertion_point(field_list:mead101.mead.ResourceInformation.related_resource)
  return related_resource_;
}

// optional .mead101.mead.ResourceSummary resource_summary = 27;
inline bool ResourceInformation::_internal_has_resource_summary() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || resource_summary_ != nullptr);
  return value;
}
inline bool ResourceInformation::has_resource_summary() const {
  return _internal_has_resource_summary();
}
inline void ResourceInformation::clear_resource_summary() {
  if (resource_summary_ != nullptr) resource_summary_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
inline const ::mead101::mead::ResourceSummary& ResourceInformation::_internal_resource_summary() const {
  const ::mead101::mead::ResourceSummary* p = resource_summary_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::ResourceSummary*>(
      &::mead101::mead::_ResourceSummary_default_instance_);
}
inline const ::mead101::mead::ResourceSummary& ResourceInformation::resource_summary() const {
  // @@protoc_insertion_point(field_get:mead101.mead.ResourceInformation.resource_summary)
  return _internal_resource_summary();
}
inline void ResourceInformation::unsafe_arena_set_allocated_resource_summary(
    ::mead101::mead::ResourceSummary* resource_summary) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(resource_summary_);
  }
  resource_summary_ = resource_summary;
  if (resource_summary) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.ResourceInformation.resource_summary)
}
inline ::mead101::mead::ResourceSummary* ResourceInformation::release_resource_summary() {
  _has_bits_[0] &= ~0x00000100u;
  ::mead101::mead::ResourceSummary* temp = resource_summary_;
  resource_summary_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::ResourceSummary* ResourceInformation::unsafe_arena_release_resource_summary() {
  // @@protoc_insertion_point(field_release:mead101.mead.ResourceInformation.resource_summary)
  _has_bits_[0] &= ~0x00000100u;
  ::mead101::mead::ResourceSummary* temp = resource_summary_;
  resource_summary_ = nullptr;
  return temp;
}
inline ::mead101::mead::ResourceSummary* ResourceInformation::_internal_mutable_resource_summary() {
  _has_bits_[0] |= 0x00000100u;
  if (resource_summary_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::ResourceSummary>(GetArena());
    resource_summary_ = p;
  }
  return resource_summary_;
}
inline ::mead101::mead::ResourceSummary* ResourceInformation::mutable_resource_summary() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.ResourceInformation.resource_summary)
  return _internal_mutable_resource_summary();
}
inline void ResourceInformation::set_allocated_resource_summary(::mead101::mead::ResourceSummary* resource_summary) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete resource_summary_;
  }
  if (resource_summary) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(resource_summary);
    if (message_arena != submessage_arena) {
      resource_summary = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resource_summary, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  resource_summary_ = resource_summary;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.ResourceInformation.resource_summary)
}

// repeated .mead101.mead.Sample sample = 28;
inline int ResourceInformation::_internal_sample_size() const {
  return sample_.size();
}
inline int ResourceInformation::sample_size() const {
  return _internal_sample_size();
}
inline void ResourceInformation::clear_sample() {
  sample_.Clear();
}
inline ::mead101::mead::Sample* ResourceInformation::mutable_sample(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.ResourceInformation.sample)
  return sample_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Sample >*
ResourceInformation::mutable_sample() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.ResourceInformation.sample)
  return &sample_;
}
inline const ::mead101::mead::Sample& ResourceInformation::_internal_sample(int index) const {
  return sample_.Get(index);
}
inline const ::mead101::mead::Sample& ResourceInformation::sample(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.ResourceInformation.sample)
  return _internal_sample(index);
}
inline ::mead101::mead::Sample* ResourceInformation::_internal_add_sample() {
  return sample_.Add();
}
inline ::mead101::mead::Sample* ResourceInformation::add_sample() {
  // @@protoc_insertion_point(field_add:mead101.mead.ResourceInformation.sample)
  return _internal_add_sample();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Sample >&
ResourceInformation::sample() const {
  // @@protoc_insertion_point(field_list:mead101.mead.ResourceInformation.sample)
  return sample_;
}

// optional .mead101.mead.SubGenreCategory sub_genre_category = 29;
inline bool ResourceInformation::_internal_has_sub_genre_category() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || sub_genre_category_ != nullptr);
  return value;
}
inline bool ResourceInformation::has_sub_genre_category() const {
  return _internal_has_sub_genre_category();
}
inline void ResourceInformation::clear_sub_genre_category() {
  if (sub_genre_category_ != nullptr) sub_genre_category_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
inline const ::mead101::mead::SubGenreCategory& ResourceInformation::_internal_sub_genre_category() const {
  const ::mead101::mead::SubGenreCategory* p = sub_genre_category_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::SubGenreCategory*>(
      &::mead101::mead::_SubGenreCategory_default_instance_);
}
inline const ::mead101::mead::SubGenreCategory& ResourceInformation::sub_genre_category() const {
  // @@protoc_insertion_point(field_get:mead101.mead.ResourceInformation.sub_genre_category)
  return _internal_sub_genre_category();
}
inline void ResourceInformation::unsafe_arena_set_allocated_sub_genre_category(
    ::mead101::mead::SubGenreCategory* sub_genre_category) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sub_genre_category_);
  }
  sub_genre_category_ = sub_genre_category;
  if (sub_genre_category) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.ResourceInformation.sub_genre_category)
}
inline ::mead101::mead::SubGenreCategory* ResourceInformation::release_sub_genre_category() {
  _has_bits_[0] &= ~0x00000200u;
  ::mead101::mead::SubGenreCategory* temp = sub_genre_category_;
  sub_genre_category_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::SubGenreCategory* ResourceInformation::unsafe_arena_release_sub_genre_category() {
  // @@protoc_insertion_point(field_release:mead101.mead.ResourceInformation.sub_genre_category)
  _has_bits_[0] &= ~0x00000200u;
  ::mead101::mead::SubGenreCategory* temp = sub_genre_category_;
  sub_genre_category_ = nullptr;
  return temp;
}
inline ::mead101::mead::SubGenreCategory* ResourceInformation::_internal_mutable_sub_genre_category() {
  _has_bits_[0] |= 0x00000200u;
  if (sub_genre_category_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::SubGenreCategory>(GetArena());
    sub_genre_category_ = p;
  }
  return sub_genre_category_;
}
inline ::mead101::mead::SubGenreCategory* ResourceInformation::mutable_sub_genre_category() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.ResourceInformation.sub_genre_category)
  return _internal_mutable_sub_genre_category();
}
inline void ResourceInformation::set_allocated_sub_genre_category(::mead101::mead::SubGenreCategory* sub_genre_category) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete sub_genre_category_;
  }
  if (sub_genre_category) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(sub_genre_category);
    if (message_arena != submessage_arena) {
      sub_genre_category = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sub_genre_category, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  sub_genre_category_ = sub_genre_category;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.ResourceInformation.sub_genre_category)
}

// optional .mead101.mead.TimeSignature time_signature = 30;
inline bool ResourceInformation::_internal_has_time_signature() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || time_signature_ != nullptr);
  return value;
}
inline bool ResourceInformation::has_time_signature() const {
  return _internal_has_time_signature();
}
inline void ResourceInformation::clear_time_signature() {
  if (time_signature_ != nullptr) time_signature_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
inline const ::mead101::mead::TimeSignature& ResourceInformation::_internal_time_signature() const {
  const ::mead101::mead::TimeSignature* p = time_signature_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::TimeSignature*>(
      &::mead101::mead::_TimeSignature_default_instance_);
}
inline const ::mead101::mead::TimeSignature& ResourceInformation::time_signature() const {
  // @@protoc_insertion_point(field_get:mead101.mead.ResourceInformation.time_signature)
  return _internal_time_signature();
}
inline void ResourceInformation::unsafe_arena_set_allocated_time_signature(
    ::mead101::mead::TimeSignature* time_signature) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_signature_);
  }
  time_signature_ = time_signature;
  if (time_signature) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.ResourceInformation.time_signature)
}
inline ::mead101::mead::TimeSignature* ResourceInformation::release_time_signature() {
  _has_bits_[0] &= ~0x00000400u;
  ::mead101::mead::TimeSignature* temp = time_signature_;
  time_signature_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::TimeSignature* ResourceInformation::unsafe_arena_release_time_signature() {
  // @@protoc_insertion_point(field_release:mead101.mead.ResourceInformation.time_signature)
  _has_bits_[0] &= ~0x00000400u;
  ::mead101::mead::TimeSignature* temp = time_signature_;
  time_signature_ = nullptr;
  return temp;
}
inline ::mead101::mead::TimeSignature* ResourceInformation::_internal_mutable_time_signature() {
  _has_bits_[0] |= 0x00000400u;
  if (time_signature_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::TimeSignature>(GetArena());
    time_signature_ = p;
  }
  return time_signature_;
}
inline ::mead101::mead::TimeSignature* ResourceInformation::mutable_time_signature() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.ResourceInformation.time_signature)
  return _internal_mutable_time_signature();
}
inline void ResourceInformation::set_allocated_time_signature(::mead101::mead::TimeSignature* time_signature) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete time_signature_;
  }
  if (time_signature) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(time_signature);
    if (message_arena != submessage_arena) {
      time_signature = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time_signature, submessage_arena);
    }
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  time_signature_ = time_signature;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.ResourceInformation.time_signature)
}

// repeated .mead101.mead.Usage usage = 31;
inline int ResourceInformation::_internal_usage_size() const {
  return usage_.size();
}
inline int ResourceInformation::usage_size() const {
  return _internal_usage_size();
}
inline void ResourceInformation::clear_usage() {
  usage_.Clear();
}
inline ::mead101::mead::Usage* ResourceInformation::mutable_usage(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.ResourceInformation.usage)
  return usage_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Usage >*
ResourceInformation::mutable_usage() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.ResourceInformation.usage)
  return &usage_;
}
inline const ::mead101::mead::Usage& ResourceInformation::_internal_usage(int index) const {
  return usage_.Get(index);
}
inline const ::mead101::mead::Usage& ResourceInformation::usage(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.ResourceInformation.usage)
  return _internal_usage(index);
}
inline ::mead101::mead::Usage* ResourceInformation::_internal_add_usage() {
  return usage_.Add();
}
inline ::mead101::mead::Usage* ResourceInformation::add_usage() {
  // @@protoc_insertion_point(field_add:mead101.mead.ResourceInformation.usage)
  return _internal_add_usage();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Usage >&
ResourceInformation::usage() const {
  // @@protoc_insertion_point(field_list:mead101.mead.ResourceInformation.usage)
  return usage_;
}

// repeated .mead101.mead.UsedMusicalWork used_musical_work = 32;
inline int ResourceInformation::_internal_used_musical_work_size() const {
  return used_musical_work_.size();
}
inline int ResourceInformation::used_musical_work_size() const {
  return _internal_used_musical_work_size();
}
inline void ResourceInformation::clear_used_musical_work() {
  used_musical_work_.Clear();
}
inline ::mead101::mead::UsedMusicalWork* ResourceInformation::mutable_used_musical_work(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.ResourceInformation.used_musical_work)
  return used_musical_work_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::UsedMusicalWork >*
ResourceInformation::mutable_used_musical_work() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.ResourceInformation.used_musical_work)
  return &used_musical_work_;
}
inline const ::mead101::mead::UsedMusicalWork& ResourceInformation::_internal_used_musical_work(int index) const {
  return used_musical_work_.Get(index);
}
inline const ::mead101::mead::UsedMusicalWork& ResourceInformation::used_musical_work(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.ResourceInformation.used_musical_work)
  return _internal_used_musical_work(index);
}
inline ::mead101::mead::UsedMusicalWork* ResourceInformation::_internal_add_used_musical_work() {
  return used_musical_work_.Add();
}
inline ::mead101::mead::UsedMusicalWork* ResourceInformation::add_used_musical_work() {
  // @@protoc_insertion_point(field_add:mead101.mead.ResourceInformation.used_musical_work)
  return _internal_add_used_musical_work();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::UsedMusicalWork >&
ResourceInformation::used_musical_work() const {
  // @@protoc_insertion_point(field_list:mead101.mead.ResourceInformation.used_musical_work)
  return used_musical_work_;
}

// optional .mead101.mead.VocalRegister vocal_register = 33;
inline bool ResourceInformation::_internal_has_vocal_register() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || vocal_register_ != nullptr);
  return value;
}
inline bool ResourceInformation::has_vocal_register() const {
  return _internal_has_vocal_register();
}
inline void ResourceInformation::clear_vocal_register() {
  if (vocal_register_ != nullptr) vocal_register_->Clear();
  _has_bits_[0] &= ~0x00000800u;
}
inline const ::mead101::mead::VocalRegister& ResourceInformation::_internal_vocal_register() const {
  const ::mead101::mead::VocalRegister* p = vocal_register_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::VocalRegister*>(
      &::mead101::mead::_VocalRegister_default_instance_);
}
inline const ::mead101::mead::VocalRegister& ResourceInformation::vocal_register() const {
  // @@protoc_insertion_point(field_get:mead101.mead.ResourceInformation.vocal_register)
  return _internal_vocal_register();
}
inline void ResourceInformation::unsafe_arena_set_allocated_vocal_register(
    ::mead101::mead::VocalRegister* vocal_register) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vocal_register_);
  }
  vocal_register_ = vocal_register;
  if (vocal_register) {
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.ResourceInformation.vocal_register)
}
inline ::mead101::mead::VocalRegister* ResourceInformation::release_vocal_register() {
  _has_bits_[0] &= ~0x00000800u;
  ::mead101::mead::VocalRegister* temp = vocal_register_;
  vocal_register_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::VocalRegister* ResourceInformation::unsafe_arena_release_vocal_register() {
  // @@protoc_insertion_point(field_release:mead101.mead.ResourceInformation.vocal_register)
  _has_bits_[0] &= ~0x00000800u;
  ::mead101::mead::VocalRegister* temp = vocal_register_;
  vocal_register_ = nullptr;
  return temp;
}
inline ::mead101::mead::VocalRegister* ResourceInformation::_internal_mutable_vocal_register() {
  _has_bits_[0] |= 0x00000800u;
  if (vocal_register_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::VocalRegister>(GetArena());
    vocal_register_ = p;
  }
  return vocal_register_;
}
inline ::mead101::mead::VocalRegister* ResourceInformation::mutable_vocal_register() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.ResourceInformation.vocal_register)
  return _internal_mutable_vocal_register();
}
inline void ResourceInformation::set_allocated_vocal_register(::mead101::mead::VocalRegister* vocal_register) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete vocal_register_;
  }
  if (vocal_register) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(vocal_register);
    if (message_arena != submessage_arena) {
      vocal_register = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vocal_register, submessage_arena);
    }
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  vocal_register_ = vocal_register;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.ResourceInformation.vocal_register)
}

// -------------------------------------------------------------------

// ResourceInformationList

// repeated .mead101.mead.ResourceInformation resource_information = 1;
inline int ResourceInformationList::_internal_resource_information_size() const {
  return resource_information_.size();
}
inline int ResourceInformationList::resource_information_size() const {
  return _internal_resource_information_size();
}
inline void ResourceInformationList::clear_resource_information() {
  resource_information_.Clear();
}
inline ::mead101::mead::ResourceInformation* ResourceInformationList::mutable_resource_information(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.ResourceInformationList.resource_information)
  return resource_information_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::ResourceInformation >*
ResourceInformationList::mutable_resource_information() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.ResourceInformationList.resource_information)
  return &resource_information_;
}
inline const ::mead101::mead::ResourceInformation& ResourceInformationList::_internal_resource_information(int index) const {
  return resource_information_.Get(index);
}
inline const ::mead101::mead::ResourceInformation& ResourceInformationList::resource_information(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.ResourceInformationList.resource_information)
  return _internal_resource_information(index);
}
inline ::mead101::mead::ResourceInformation* ResourceInformationList::_internal_add_resource_information() {
  return resource_information_.Add();
}
inline ::mead101::mead::ResourceInformation* ResourceInformationList::add_resource_information() {
  // @@protoc_insertion_point(field_add:mead101.mead.ResourceInformationList.resource_information)
  return _internal_add_resource_information();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::ResourceInformation >&
ResourceInformationList::resource_information() const {
  // @@protoc_insertion_point(field_list:mead101.mead.ResourceInformationList.resource_information)
  return resource_information_;
}

// -------------------------------------------------------------------

// ResourceRelationship

// optional .mead101.mead.DisplayArtistNameWithDefault display_artist_name = 1;
inline bool ResourceRelationship::_internal_has_display_artist_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || display_artist_name_ != nullptr);
  return value;
}
inline bool ResourceRelationship::has_display_artist_name() const {
  return _internal_has_display_artist_name();
}
inline void ResourceRelationship::clear_display_artist_name() {
  if (display_artist_name_ != nullptr) display_artist_name_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::mead101::mead::DisplayArtistNameWithDefault& ResourceRelationship::_internal_display_artist_name() const {
  const ::mead101::mead::DisplayArtistNameWithDefault* p = display_artist_name_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::DisplayArtistNameWithDefault*>(
      &::mead101::mead::_DisplayArtistNameWithDefault_default_instance_);
}
inline const ::mead101::mead::DisplayArtistNameWithDefault& ResourceRelationship::display_artist_name() const {
  // @@protoc_insertion_point(field_get:mead101.mead.ResourceRelationship.display_artist_name)
  return _internal_display_artist_name();
}
inline void ResourceRelationship::unsafe_arena_set_allocated_display_artist_name(
    ::mead101::mead::DisplayArtistNameWithDefault* display_artist_name) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(display_artist_name_);
  }
  display_artist_name_ = display_artist_name;
  if (display_artist_name) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.ResourceRelationship.display_artist_name)
}
inline ::mead101::mead::DisplayArtistNameWithDefault* ResourceRelationship::release_display_artist_name() {
  _has_bits_[0] &= ~0x00000001u;
  ::mead101::mead::DisplayArtistNameWithDefault* temp = display_artist_name_;
  display_artist_name_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::DisplayArtistNameWithDefault* ResourceRelationship::unsafe_arena_release_display_artist_name() {
  // @@protoc_insertion_point(field_release:mead101.mead.ResourceRelationship.display_artist_name)
  _has_bits_[0] &= ~0x00000001u;
  ::mead101::mead::DisplayArtistNameWithDefault* temp = display_artist_name_;
  display_artist_name_ = nullptr;
  return temp;
}
inline ::mead101::mead::DisplayArtistNameWithDefault* ResourceRelationship::_internal_mutable_display_artist_name() {
  _has_bits_[0] |= 0x00000001u;
  if (display_artist_name_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::DisplayArtistNameWithDefault>(GetArena());
    display_artist_name_ = p;
  }
  return display_artist_name_;
}
inline ::mead101::mead::DisplayArtistNameWithDefault* ResourceRelationship::mutable_display_artist_name() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.ResourceRelationship.display_artist_name)
  return _internal_mutable_display_artist_name();
}
inline void ResourceRelationship::set_allocated_display_artist_name(::mead101::mead::DisplayArtistNameWithDefault* display_artist_name) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete display_artist_name_;
  }
  if (display_artist_name) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(display_artist_name);
    if (message_arena != submessage_arena) {
      display_artist_name = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, display_artist_name, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  display_artist_name_ = display_artist_name;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.ResourceRelationship.display_artist_name)
}

// repeated string metadata_source_reference = 2;
inline int ResourceRelationship::_internal_metadata_source_reference_size() const {
  return metadata_source_reference_.size();
}
inline int ResourceRelationship::metadata_source_reference_size() const {
  return _internal_metadata_source_reference_size();
}
inline void ResourceRelationship::clear_metadata_source_reference() {
  metadata_source_reference_.Clear();
}
inline std::string* ResourceRelationship::add_metadata_source_reference() {
  // @@protoc_insertion_point(field_add_mutable:mead101.mead.ResourceRelationship.metadata_source_reference)
  return _internal_add_metadata_source_reference();
}
inline const std::string& ResourceRelationship::_internal_metadata_source_reference(int index) const {
  return metadata_source_reference_.Get(index);
}
inline const std::string& ResourceRelationship::metadata_source_reference(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.ResourceRelationship.metadata_source_reference)
  return _internal_metadata_source_reference(index);
}
inline std::string* ResourceRelationship::mutable_metadata_source_reference(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.ResourceRelationship.metadata_source_reference)
  return metadata_source_reference_.Mutable(index);
}
inline void ResourceRelationship::set_metadata_source_reference(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:mead101.mead.ResourceRelationship.metadata_source_reference)
  metadata_source_reference_.Mutable(index)->assign(value);
}
inline void ResourceRelationship::set_metadata_source_reference(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:mead101.mead.ResourceRelationship.metadata_source_reference)
  metadata_source_reference_.Mutable(index)->assign(std::move(value));
}
inline void ResourceRelationship::set_metadata_source_reference(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  metadata_source_reference_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mead101.mead.ResourceRelationship.metadata_source_reference)
}
inline void ResourceRelationship::set_metadata_source_reference(int index, const char* value, size_t size) {
  metadata_source_reference_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.ResourceRelationship.metadata_source_reference)
}
inline std::string* ResourceRelationship::_internal_add_metadata_source_reference() {
  return metadata_source_reference_.Add();
}
inline void ResourceRelationship::add_metadata_source_reference(const std::string& value) {
  metadata_source_reference_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mead101.mead.ResourceRelationship.metadata_source_reference)
}
inline void ResourceRelationship::add_metadata_source_reference(std::string&& value) {
  metadata_source_reference_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:mead101.mead.ResourceRelationship.metadata_source_reference)
}
inline void ResourceRelationship::add_metadata_source_reference(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  metadata_source_reference_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mead101.mead.ResourceRelationship.metadata_source_reference)
}
inline void ResourceRelationship::add_metadata_source_reference(const char* value, size_t size) {
  metadata_source_reference_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mead101.mead.ResourceRelationship.metadata_source_reference)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ResourceRelationship::metadata_source_reference() const {
  // @@protoc_insertion_point(field_list:mead101.mead.ResourceRelationship.metadata_source_reference)
  return metadata_source_reference_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ResourceRelationship::mutable_metadata_source_reference() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.ResourceRelationship.metadata_source_reference)
  return &metadata_source_reference_;
}

// optional .mead101.mead.RelatedResourceType related_resource_type = 3;
inline bool ResourceRelationship::_internal_has_related_resource_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || related_resource_type_ != nullptr);
  return value;
}
inline bool ResourceRelationship::has_related_resource_type() const {
  return _internal_has_related_resource_type();
}
inline void ResourceRelationship::clear_related_resource_type() {
  if (related_resource_type_ != nullptr) related_resource_type_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::mead101::mead::RelatedResourceType& ResourceRelationship::_internal_related_resource_type() const {
  const ::mead101::mead::RelatedResourceType* p = related_resource_type_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::RelatedResourceType*>(
      &::mead101::mead::_RelatedResourceType_default_instance_);
}
inline const ::mead101::mead::RelatedResourceType& ResourceRelationship::related_resource_type() const {
  // @@protoc_insertion_point(field_get:mead101.mead.ResourceRelationship.related_resource_type)
  return _internal_related_resource_type();
}
inline void ResourceRelationship::unsafe_arena_set_allocated_related_resource_type(
    ::mead101::mead::RelatedResourceType* related_resource_type) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(related_resource_type_);
  }
  related_resource_type_ = related_resource_type;
  if (related_resource_type) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.ResourceRelationship.related_resource_type)
}
inline ::mead101::mead::RelatedResourceType* ResourceRelationship::release_related_resource_type() {
  _has_bits_[0] &= ~0x00000002u;
  ::mead101::mead::RelatedResourceType* temp = related_resource_type_;
  related_resource_type_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::RelatedResourceType* ResourceRelationship::unsafe_arena_release_related_resource_type() {
  // @@protoc_insertion_point(field_release:mead101.mead.ResourceRelationship.related_resource_type)
  _has_bits_[0] &= ~0x00000002u;
  ::mead101::mead::RelatedResourceType* temp = related_resource_type_;
  related_resource_type_ = nullptr;
  return temp;
}
inline ::mead101::mead::RelatedResourceType* ResourceRelationship::_internal_mutable_related_resource_type() {
  _has_bits_[0] |= 0x00000002u;
  if (related_resource_type_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::RelatedResourceType>(GetArena());
    related_resource_type_ = p;
  }
  return related_resource_type_;
}
inline ::mead101::mead::RelatedResourceType* ResourceRelationship::mutable_related_resource_type() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.ResourceRelationship.related_resource_type)
  return _internal_mutable_related_resource_type();
}
inline void ResourceRelationship::set_allocated_related_resource_type(::mead101::mead::RelatedResourceType* related_resource_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete related_resource_type_;
  }
  if (related_resource_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(related_resource_type);
    if (message_arena != submessage_arena) {
      related_resource_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, related_resource_type, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  related_resource_type_ = related_resource_type;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.ResourceRelationship.related_resource_type)
}

// optional .mead101.mead.ResourceId resource_id = 4;
inline bool ResourceRelationship::_internal_has_resource_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || resource_id_ != nullptr);
  return value;
}
inline bool ResourceRelationship::has_resource_id() const {
  return _internal_has_resource_id();
}
inline void ResourceRelationship::clear_resource_id() {
  if (resource_id_ != nullptr) resource_id_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::mead101::mead::ResourceId& ResourceRelationship::_internal_resource_id() const {
  const ::mead101::mead::ResourceId* p = resource_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::ResourceId*>(
      &::mead101::mead::_ResourceId_default_instance_);
}
inline const ::mead101::mead::ResourceId& ResourceRelationship::resource_id() const {
  // @@protoc_insertion_point(field_get:mead101.mead.ResourceRelationship.resource_id)
  return _internal_resource_id();
}
inline void ResourceRelationship::unsafe_arena_set_allocated_resource_id(
    ::mead101::mead::ResourceId* resource_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(resource_id_);
  }
  resource_id_ = resource_id;
  if (resource_id) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.ResourceRelationship.resource_id)
}
inline ::mead101::mead::ResourceId* ResourceRelationship::release_resource_id() {
  _has_bits_[0] &= ~0x00000004u;
  ::mead101::mead::ResourceId* temp = resource_id_;
  resource_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::ResourceId* ResourceRelationship::unsafe_arena_release_resource_id() {
  // @@protoc_insertion_point(field_release:mead101.mead.ResourceRelationship.resource_id)
  _has_bits_[0] &= ~0x00000004u;
  ::mead101::mead::ResourceId* temp = resource_id_;
  resource_id_ = nullptr;
  return temp;
}
inline ::mead101::mead::ResourceId* ResourceRelationship::_internal_mutable_resource_id() {
  _has_bits_[0] |= 0x00000004u;
  if (resource_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::ResourceId>(GetArena());
    resource_id_ = p;
  }
  return resource_id_;
}
inline ::mead101::mead::ResourceId* ResourceRelationship::mutable_resource_id() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.ResourceRelationship.resource_id)
  return _internal_mutable_resource_id();
}
inline void ResourceRelationship::set_allocated_resource_id(::mead101::mead::ResourceId* resource_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete resource_id_;
  }
  if (resource_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(resource_id);
    if (message_arena != submessage_arena) {
      resource_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resource_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  resource_id_ = resource_id;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.ResourceRelationship.resource_id)
}

// repeated .mead101.mead.TitleWithPronunciation title = 5;
inline int ResourceRelationship::_internal_title_size() const {
  return title_.size();
}
inline int ResourceRelationship::title_size() const {
  return _internal_title_size();
}
inline void ResourceRelationship::clear_title() {
  title_.Clear();
}
inline ::mead101::mead::TitleWithPronunciation* ResourceRelationship::mutable_title(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.ResourceRelationship.title)
  return title_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::TitleWithPronunciation >*
ResourceRelationship::mutable_title() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.ResourceRelationship.title)
  return &title_;
}
inline const ::mead101::mead::TitleWithPronunciation& ResourceRelationship::_internal_title(int index) const {
  return title_.Get(index);
}
inline const ::mead101::mead::TitleWithPronunciation& ResourceRelationship::title(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.ResourceRelationship.title)
  return _internal_title(index);
}
inline ::mead101::mead::TitleWithPronunciation* ResourceRelationship::_internal_add_title() {
  return title_.Add();
}
inline ::mead101::mead::TitleWithPronunciation* ResourceRelationship::add_title() {
  // @@protoc_insertion_point(field_add:mead101.mead.ResourceRelationship.title)
  return _internal_add_title();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::TitleWithPronunciation >&
ResourceRelationship::title() const {
  // @@protoc_insertion_point(field_list:mead101.mead.ResourceRelationship.title)
  return title_;
}

// -------------------------------------------------------------------

// ResourceRelationshipType

// optional string namespace = 1;
inline bool ResourceRelationshipType::_internal_has_namespace_() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ResourceRelationshipType::has_namespace_() const {
  return _internal_has_namespace_();
}
inline void ResourceRelationshipType::clear_namespace_() {
  namespace__.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ResourceRelationshipType::namespace_() const {
  // @@protoc_insertion_point(field_get:mead101.mead.ResourceRelationshipType.namespace)
  return _internal_namespace_();
}
inline void ResourceRelationshipType::set_namespace_(const std::string& value) {
  _internal_set_namespace_(value);
  // @@protoc_insertion_point(field_set:mead101.mead.ResourceRelationshipType.namespace)
}
inline std::string* ResourceRelationshipType::mutable_namespace_() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.ResourceRelationshipType.namespace)
  return _internal_mutable_namespace_();
}
inline const std::string& ResourceRelationshipType::_internal_namespace_() const {
  return namespace__.Get();
}
inline void ResourceRelationshipType::_internal_set_namespace_(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ResourceRelationshipType::set_namespace_(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  namespace__.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.ResourceRelationshipType.namespace)
}
inline void ResourceRelationshipType::set_namespace_(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.ResourceRelationshipType.namespace)
}
inline void ResourceRelationshipType::set_namespace_(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.ResourceRelationshipType.namespace)
}
inline std::string* ResourceRelationshipType::_internal_mutable_namespace_() {
  _has_bits_[0] |= 0x00000001u;
  return namespace__.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ResourceRelationshipType::release_namespace_() {
  // @@protoc_insertion_point(field_release:mead101.mead.ResourceRelationshipType.namespace)
  if (!_internal_has_namespace_()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return namespace__.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResourceRelationshipType::set_allocated_namespace_(std::string* namespace_) {
  if (namespace_ != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  namespace__.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), namespace_,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.ResourceRelationshipType.namespace)
}

// optional string user_defined_value = 2;
inline bool ResourceRelationshipType::_internal_has_user_defined_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ResourceRelationshipType::has_user_defined_value() const {
  return _internal_has_user_defined_value();
}
inline void ResourceRelationshipType::clear_user_defined_value() {
  user_defined_value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ResourceRelationshipType::user_defined_value() const {
  // @@protoc_insertion_point(field_get:mead101.mead.ResourceRelationshipType.user_defined_value)
  return _internal_user_defined_value();
}
inline void ResourceRelationshipType::set_user_defined_value(const std::string& value) {
  _internal_set_user_defined_value(value);
  // @@protoc_insertion_point(field_set:mead101.mead.ResourceRelationshipType.user_defined_value)
}
inline std::string* ResourceRelationshipType::mutable_user_defined_value() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.ResourceRelationshipType.user_defined_value)
  return _internal_mutable_user_defined_value();
}
inline const std::string& ResourceRelationshipType::_internal_user_defined_value() const {
  return user_defined_value_.Get();
}
inline void ResourceRelationshipType::_internal_set_user_defined_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ResourceRelationshipType::set_user_defined_value(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  user_defined_value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.ResourceRelationshipType.user_defined_value)
}
inline void ResourceRelationshipType::set_user_defined_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.ResourceRelationshipType.user_defined_value)
}
inline void ResourceRelationshipType::set_user_defined_value(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.ResourceRelationshipType.user_defined_value)
}
inline std::string* ResourceRelationshipType::_internal_mutable_user_defined_value() {
  _has_bits_[0] |= 0x00000002u;
  return user_defined_value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ResourceRelationshipType::release_user_defined_value() {
  // @@protoc_insertion_point(field_release:mead101.mead.ResourceRelationshipType.user_defined_value)
  if (!_internal_has_user_defined_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return user_defined_value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResourceRelationshipType::set_allocated_user_defined_value(std::string* user_defined_value) {
  if (user_defined_value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  user_defined_value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_defined_value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.ResourceRelationshipType.user_defined_value)
}

// optional .mead101.avs.ResourceRelationshipType ext_value = 3;
inline bool ResourceRelationshipType::_internal_has_ext_value() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || ext_value_ != nullptr);
  return value;
}
inline bool ResourceRelationshipType::has_ext_value() const {
  return _internal_has_ext_value();
}
inline const ::mead101::avs::ResourceRelationshipType& ResourceRelationshipType::_internal_ext_value() const {
  const ::mead101::avs::ResourceRelationshipType* p = ext_value_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::avs::ResourceRelationshipType*>(
      &::mead101::avs::_ResourceRelationshipType_default_instance_);
}
inline const ::mead101::avs::ResourceRelationshipType& ResourceRelationshipType::ext_value() const {
  // @@protoc_insertion_point(field_get:mead101.mead.ResourceRelationshipType.ext_value)
  return _internal_ext_value();
}
inline void ResourceRelationshipType::unsafe_arena_set_allocated_ext_value(
    ::mead101::avs::ResourceRelationshipType* ext_value) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext_value_);
  }
  ext_value_ = ext_value;
  if (ext_value) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.ResourceRelationshipType.ext_value)
}
inline ::mead101::avs::ResourceRelationshipType* ResourceRelationshipType::release_ext_value() {
  _has_bits_[0] &= ~0x00000004u;
  ::mead101::avs::ResourceRelationshipType* temp = ext_value_;
  ext_value_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::avs::ResourceRelationshipType* ResourceRelationshipType::unsafe_arena_release_ext_value() {
  // @@protoc_insertion_point(field_release:mead101.mead.ResourceRelationshipType.ext_value)
  _has_bits_[0] &= ~0x00000004u;
  ::mead101::avs::ResourceRelationshipType* temp = ext_value_;
  ext_value_ = nullptr;
  return temp;
}
inline ::mead101::avs::ResourceRelationshipType* ResourceRelationshipType::_internal_mutable_ext_value() {
  _has_bits_[0] |= 0x00000004u;
  if (ext_value_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::avs::ResourceRelationshipType>(GetArena());
    ext_value_ = p;
  }
  return ext_value_;
}
inline ::mead101::avs::ResourceRelationshipType* ResourceRelationshipType::mutable_ext_value() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.ResourceRelationshipType.ext_value)
  return _internal_mutable_ext_value();
}
inline void ResourceRelationshipType::set_allocated_ext_value(::mead101::avs::ResourceRelationshipType* ext_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext_value_);
  }
  if (ext_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext_value)->GetArena();
    if (message_arena != submessage_arena) {
      ext_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext_value, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  ext_value_ = ext_value;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.ResourceRelationshipType.ext_value)
}

// -------------------------------------------------------------------

// ResourceSummary

// repeated .mead101.mead.PartyNameWithTerritory display_artist = 1;
inline int ResourceSummary::_internal_display_artist_size() const {
  return display_artist_.size();
}
inline int ResourceSummary::display_artist_size() const {
  return _internal_display_artist_size();
}
inline void ResourceSummary::clear_display_artist() {
  display_artist_.Clear();
}
inline ::mead101::mead::PartyNameWithTerritory* ResourceSummary::mutable_display_artist(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.ResourceSummary.display_artist)
  return display_artist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::PartyNameWithTerritory >*
ResourceSummary::mutable_display_artist() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.ResourceSummary.display_artist)
  return &display_artist_;
}
inline const ::mead101::mead::PartyNameWithTerritory& ResourceSummary::_internal_display_artist(int index) const {
  return display_artist_.Get(index);
}
inline const ::mead101::mead::PartyNameWithTerritory& ResourceSummary::display_artist(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.ResourceSummary.display_artist)
  return _internal_display_artist(index);
}
inline ::mead101::mead::PartyNameWithTerritory* ResourceSummary::_internal_add_display_artist() {
  return display_artist_.Add();
}
inline ::mead101::mead::PartyNameWithTerritory* ResourceSummary::add_display_artist() {
  // @@protoc_insertion_point(field_add:mead101.mead.ResourceSummary.display_artist)
  return _internal_add_display_artist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::PartyNameWithTerritory >&
ResourceSummary::display_artist() const {
  // @@protoc_insertion_point(field_list:mead101.mead.ResourceSummary.display_artist)
  return display_artist_;
}

// repeated .mead101.mead.DisplayTitle display_title = 2;
inline int ResourceSummary::_internal_display_title_size() const {
  return display_title_.size();
}
inline int ResourceSummary::display_title_size() const {
  return _internal_display_title_size();
}
inline void ResourceSummary::clear_display_title() {
  display_title_.Clear();
}
inline ::mead101::mead::DisplayTitle* ResourceSummary::mutable_display_title(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.ResourceSummary.display_title)
  return display_title_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::DisplayTitle >*
ResourceSummary::mutable_display_title() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.ResourceSummary.display_title)
  return &display_title_;
}
inline const ::mead101::mead::DisplayTitle& ResourceSummary::_internal_display_title(int index) const {
  return display_title_.Get(index);
}
inline const ::mead101::mead::DisplayTitle& ResourceSummary::display_title(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.ResourceSummary.display_title)
  return _internal_display_title(index);
}
inline ::mead101::mead::DisplayTitle* ResourceSummary::_internal_add_display_title() {
  return display_title_.Add();
}
inline ::mead101::mead::DisplayTitle* ResourceSummary::add_display_title() {
  // @@protoc_insertion_point(field_add:mead101.mead.ResourceSummary.display_title)
  return _internal_add_display_title();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::DisplayTitle >&
ResourceSummary::display_title() const {
  // @@protoc_insertion_point(field_list:mead101.mead.ResourceSummary.display_title)
  return display_title_;
}

// optional .mead101.mead.ResourceId resource_id = 3;
inline bool ResourceSummary::_internal_has_resource_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || resource_id_ != nullptr);
  return value;
}
inline bool ResourceSummary::has_resource_id() const {
  return _internal_has_resource_id();
}
inline void ResourceSummary::clear_resource_id() {
  if (resource_id_ != nullptr) resource_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::mead101::mead::ResourceId& ResourceSummary::_internal_resource_id() const {
  const ::mead101::mead::ResourceId* p = resource_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::ResourceId*>(
      &::mead101::mead::_ResourceId_default_instance_);
}
inline const ::mead101::mead::ResourceId& ResourceSummary::resource_id() const {
  // @@protoc_insertion_point(field_get:mead101.mead.ResourceSummary.resource_id)
  return _internal_resource_id();
}
inline void ResourceSummary::unsafe_arena_set_allocated_resource_id(
    ::mead101::mead::ResourceId* resource_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(resource_id_);
  }
  resource_id_ = resource_id;
  if (resource_id) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.ResourceSummary.resource_id)
}
inline ::mead101::mead::ResourceId* ResourceSummary::release_resource_id() {
  _has_bits_[0] &= ~0x00000001u;
  ::mead101::mead::ResourceId* temp = resource_id_;
  resource_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::ResourceId* ResourceSummary::unsafe_arena_release_resource_id() {
  // @@protoc_insertion_point(field_release:mead101.mead.ResourceSummary.resource_id)
  _has_bits_[0] &= ~0x00000001u;
  ::mead101::mead::ResourceId* temp = resource_id_;
  resource_id_ = nullptr;
  return temp;
}
inline ::mead101::mead::ResourceId* ResourceSummary::_internal_mutable_resource_id() {
  _has_bits_[0] |= 0x00000001u;
  if (resource_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::ResourceId>(GetArena());
    resource_id_ = p;
  }
  return resource_id_;
}
inline ::mead101::mead::ResourceId* ResourceSummary::mutable_resource_id() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.ResourceSummary.resource_id)
  return _internal_mutable_resource_id();
}
inline void ResourceSummary::set_allocated_resource_id(::mead101::mead::ResourceId* resource_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete resource_id_;
  }
  if (resource_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(resource_id);
    if (message_arena != submessage_arena) {
      resource_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resource_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  resource_id_ = resource_id;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.ResourceSummary.resource_id)
}

// -------------------------------------------------------------------

// ResourceTitle

// optional string language_and_script_code = 1;
inline bool ResourceTitle::_internal_has_language_and_script_code() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ResourceTitle::has_language_and_script_code() const {
  return _internal_has_language_and_script_code();
}
inline void ResourceTitle::clear_language_and_script_code() {
  language_and_script_code_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ResourceTitle::language_and_script_code() const {
  // @@protoc_insertion_point(field_get:mead101.mead.ResourceTitle.language_and_script_code)
  return _internal_language_and_script_code();
}
inline void ResourceTitle::set_language_and_script_code(const std::string& value) {
  _internal_set_language_and_script_code(value);
  // @@protoc_insertion_point(field_set:mead101.mead.ResourceTitle.language_and_script_code)
}
inline std::string* ResourceTitle::mutable_language_and_script_code() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.ResourceTitle.language_and_script_code)
  return _internal_mutable_language_and_script_code();
}
inline const std::string& ResourceTitle::_internal_language_and_script_code() const {
  return language_and_script_code_.Get();
}
inline void ResourceTitle::_internal_set_language_and_script_code(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  language_and_script_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ResourceTitle::set_language_and_script_code(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  language_and_script_code_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.ResourceTitle.language_and_script_code)
}
inline void ResourceTitle::set_language_and_script_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  language_and_script_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.ResourceTitle.language_and_script_code)
}
inline void ResourceTitle::set_language_and_script_code(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  language_and_script_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.ResourceTitle.language_and_script_code)
}
inline std::string* ResourceTitle::_internal_mutable_language_and_script_code() {
  _has_bits_[0] |= 0x00000001u;
  return language_and_script_code_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ResourceTitle::release_language_and_script_code() {
  // @@protoc_insertion_point(field_release:mead101.mead.ResourceTitle.language_and_script_code)
  if (!_internal_has_language_and_script_code()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return language_and_script_code_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResourceTitle::set_allocated_language_and_script_code(std::string* language_and_script_code) {
  if (language_and_script_code != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  language_and_script_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), language_and_script_code,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.ResourceTitle.language_and_script_code)
}

// optional string ext_value = 2;
inline bool ResourceTitle::_internal_has_ext_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ResourceTitle::has_ext_value() const {
  return _internal_has_ext_value();
}
inline void ResourceTitle::clear_ext_value() {
  ext_value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ResourceTitle::ext_value() const {
  // @@protoc_insertion_point(field_get:mead101.mead.ResourceTitle.ext_value)
  return _internal_ext_value();
}
inline void ResourceTitle::set_ext_value(const std::string& value) {
  _internal_set_ext_value(value);
  // @@protoc_insertion_point(field_set:mead101.mead.ResourceTitle.ext_value)
}
inline std::string* ResourceTitle::mutable_ext_value() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.ResourceTitle.ext_value)
  return _internal_mutable_ext_value();
}
inline const std::string& ResourceTitle::_internal_ext_value() const {
  return ext_value_.Get();
}
inline void ResourceTitle::_internal_set_ext_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  ext_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ResourceTitle::set_ext_value(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  ext_value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.ResourceTitle.ext_value)
}
inline void ResourceTitle::set_ext_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  ext_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.ResourceTitle.ext_value)
}
inline void ResourceTitle::set_ext_value(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  ext_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.ResourceTitle.ext_value)
}
inline std::string* ResourceTitle::_internal_mutable_ext_value() {
  _has_bits_[0] |= 0x00000002u;
  return ext_value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ResourceTitle::release_ext_value() {
  // @@protoc_insertion_point(field_release:mead101.mead.ResourceTitle.ext_value)
  if (!_internal_has_ext_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return ext_value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResourceTitle::set_allocated_ext_value(std::string* ext_value) {
  if (ext_value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  ext_value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ext_value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.ResourceTitle.ext_value)
}

// -------------------------------------------------------------------

// RootChordNote

// optional string namespace = 1;
inline bool RootChordNote::_internal_has_namespace_() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RootChordNote::has_namespace_() const {
  return _internal_has_namespace_();
}
inline void RootChordNote::clear_namespace_() {
  namespace__.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RootChordNote::namespace_() const {
  // @@protoc_insertion_point(field_get:mead101.mead.RootChordNote.namespace)
  return _internal_namespace_();
}
inline void RootChordNote::set_namespace_(const std::string& value) {
  _internal_set_namespace_(value);
  // @@protoc_insertion_point(field_set:mead101.mead.RootChordNote.namespace)
}
inline std::string* RootChordNote::mutable_namespace_() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.RootChordNote.namespace)
  return _internal_mutable_namespace_();
}
inline const std::string& RootChordNote::_internal_namespace_() const {
  return namespace__.Get();
}
inline void RootChordNote::_internal_set_namespace_(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RootChordNote::set_namespace_(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  namespace__.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.RootChordNote.namespace)
}
inline void RootChordNote::set_namespace_(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.RootChordNote.namespace)
}
inline void RootChordNote::set_namespace_(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.RootChordNote.namespace)
}
inline std::string* RootChordNote::_internal_mutable_namespace_() {
  _has_bits_[0] |= 0x00000001u;
  return namespace__.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RootChordNote::release_namespace_() {
  // @@protoc_insertion_point(field_release:mead101.mead.RootChordNote.namespace)
  if (!_internal_has_namespace_()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return namespace__.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RootChordNote::set_allocated_namespace_(std::string* namespace_) {
  if (namespace_ != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  namespace__.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), namespace_,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.RootChordNote.namespace)
}

// optional string user_defined_value = 2;
inline bool RootChordNote::_internal_has_user_defined_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RootChordNote::has_user_defined_value() const {
  return _internal_has_user_defined_value();
}
inline void RootChordNote::clear_user_defined_value() {
  user_defined_value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& RootChordNote::user_defined_value() const {
  // @@protoc_insertion_point(field_get:mead101.mead.RootChordNote.user_defined_value)
  return _internal_user_defined_value();
}
inline void RootChordNote::set_user_defined_value(const std::string& value) {
  _internal_set_user_defined_value(value);
  // @@protoc_insertion_point(field_set:mead101.mead.RootChordNote.user_defined_value)
}
inline std::string* RootChordNote::mutable_user_defined_value() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.RootChordNote.user_defined_value)
  return _internal_mutable_user_defined_value();
}
inline const std::string& RootChordNote::_internal_user_defined_value() const {
  return user_defined_value_.Get();
}
inline void RootChordNote::_internal_set_user_defined_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RootChordNote::set_user_defined_value(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  user_defined_value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.RootChordNote.user_defined_value)
}
inline void RootChordNote::set_user_defined_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.RootChordNote.user_defined_value)
}
inline void RootChordNote::set_user_defined_value(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.RootChordNote.user_defined_value)
}
inline std::string* RootChordNote::_internal_mutable_user_defined_value() {
  _has_bits_[0] |= 0x00000002u;
  return user_defined_value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RootChordNote::release_user_defined_value() {
  // @@protoc_insertion_point(field_release:mead101.mead.RootChordNote.user_defined_value)
  if (!_internal_has_user_defined_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return user_defined_value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RootChordNote::set_allocated_user_defined_value(std::string* user_defined_value) {
  if (user_defined_value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  user_defined_value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_defined_value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.RootChordNote.user_defined_value)
}

// optional .mead101.avs.RootChordNote ext_value = 3;
inline bool RootChordNote::_internal_has_ext_value() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || ext_value_ != nullptr);
  return value;
}
inline bool RootChordNote::has_ext_value() const {
  return _internal_has_ext_value();
}
inline const ::mead101::avs::RootChordNote& RootChordNote::_internal_ext_value() const {
  const ::mead101::avs::RootChordNote* p = ext_value_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::avs::RootChordNote*>(
      &::mead101::avs::_RootChordNote_default_instance_);
}
inline const ::mead101::avs::RootChordNote& RootChordNote::ext_value() const {
  // @@protoc_insertion_point(field_get:mead101.mead.RootChordNote.ext_value)
  return _internal_ext_value();
}
inline void RootChordNote::unsafe_arena_set_allocated_ext_value(
    ::mead101::avs::RootChordNote* ext_value) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext_value_);
  }
  ext_value_ = ext_value;
  if (ext_value) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.RootChordNote.ext_value)
}
inline ::mead101::avs::RootChordNote* RootChordNote::release_ext_value() {
  _has_bits_[0] &= ~0x00000004u;
  ::mead101::avs::RootChordNote* temp = ext_value_;
  ext_value_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::avs::RootChordNote* RootChordNote::unsafe_arena_release_ext_value() {
  // @@protoc_insertion_point(field_release:mead101.mead.RootChordNote.ext_value)
  _has_bits_[0] &= ~0x00000004u;
  ::mead101::avs::RootChordNote* temp = ext_value_;
  ext_value_ = nullptr;
  return temp;
}
inline ::mead101::avs::RootChordNote* RootChordNote::_internal_mutable_ext_value() {
  _has_bits_[0] |= 0x00000004u;
  if (ext_value_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::avs::RootChordNote>(GetArena());
    ext_value_ = p;
  }
  return ext_value_;
}
inline ::mead101::avs::RootChordNote* RootChordNote::mutable_ext_value() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.RootChordNote.ext_value)
  return _internal_mutable_ext_value();
}
inline void RootChordNote::set_allocated_ext_value(::mead101::avs::RootChordNote* ext_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext_value_);
  }
  if (ext_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext_value)->GetArena();
    if (message_arena != submessage_arena) {
      ext_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext_value, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  ext_value_ = ext_value;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.RootChordNote.ext_value)
}

// -------------------------------------------------------------------

// RootChordQuality

// optional string namespace = 1;
inline bool RootChordQuality::_internal_has_namespace_() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RootChordQuality::has_namespace_() const {
  return _internal_has_namespace_();
}
inline void RootChordQuality::clear_namespace_() {
  namespace__.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RootChordQuality::namespace_() const {
  // @@protoc_insertion_point(field_get:mead101.mead.RootChordQuality.namespace)
  return _internal_namespace_();
}
inline void RootChordQuality::set_namespace_(const std::string& value) {
  _internal_set_namespace_(value);
  // @@protoc_insertion_point(field_set:mead101.mead.RootChordQuality.namespace)
}
inline std::string* RootChordQuality::mutable_namespace_() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.RootChordQuality.namespace)
  return _internal_mutable_namespace_();
}
inline const std::string& RootChordQuality::_internal_namespace_() const {
  return namespace__.Get();
}
inline void RootChordQuality::_internal_set_namespace_(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RootChordQuality::set_namespace_(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  namespace__.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.RootChordQuality.namespace)
}
inline void RootChordQuality::set_namespace_(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.RootChordQuality.namespace)
}
inline void RootChordQuality::set_namespace_(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.RootChordQuality.namespace)
}
inline std::string* RootChordQuality::_internal_mutable_namespace_() {
  _has_bits_[0] |= 0x00000001u;
  return namespace__.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RootChordQuality::release_namespace_() {
  // @@protoc_insertion_point(field_release:mead101.mead.RootChordQuality.namespace)
  if (!_internal_has_namespace_()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return namespace__.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RootChordQuality::set_allocated_namespace_(std::string* namespace_) {
  if (namespace_ != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  namespace__.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), namespace_,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.RootChordQuality.namespace)
}

// optional string user_defined_value = 2;
inline bool RootChordQuality::_internal_has_user_defined_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RootChordQuality::has_user_defined_value() const {
  return _internal_has_user_defined_value();
}
inline void RootChordQuality::clear_user_defined_value() {
  user_defined_value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& RootChordQuality::user_defined_value() const {
  // @@protoc_insertion_point(field_get:mead101.mead.RootChordQuality.user_defined_value)
  return _internal_user_defined_value();
}
inline void RootChordQuality::set_user_defined_value(const std::string& value) {
  _internal_set_user_defined_value(value);
  // @@protoc_insertion_point(field_set:mead101.mead.RootChordQuality.user_defined_value)
}
inline std::string* RootChordQuality::mutable_user_defined_value() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.RootChordQuality.user_defined_value)
  return _internal_mutable_user_defined_value();
}
inline const std::string& RootChordQuality::_internal_user_defined_value() const {
  return user_defined_value_.Get();
}
inline void RootChordQuality::_internal_set_user_defined_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RootChordQuality::set_user_defined_value(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  user_defined_value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.RootChordQuality.user_defined_value)
}
inline void RootChordQuality::set_user_defined_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.RootChordQuality.user_defined_value)
}
inline void RootChordQuality::set_user_defined_value(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.RootChordQuality.user_defined_value)
}
inline std::string* RootChordQuality::_internal_mutable_user_defined_value() {
  _has_bits_[0] |= 0x00000002u;
  return user_defined_value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RootChordQuality::release_user_defined_value() {
  // @@protoc_insertion_point(field_release:mead101.mead.RootChordQuality.user_defined_value)
  if (!_internal_has_user_defined_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return user_defined_value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RootChordQuality::set_allocated_user_defined_value(std::string* user_defined_value) {
  if (user_defined_value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  user_defined_value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_defined_value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.RootChordQuality.user_defined_value)
}

// optional .mead101.avs.RootChordQuality ext_value = 3;
inline bool RootChordQuality::_internal_has_ext_value() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || ext_value_ != nullptr);
  return value;
}
inline bool RootChordQuality::has_ext_value() const {
  return _internal_has_ext_value();
}
inline const ::mead101::avs::RootChordQuality& RootChordQuality::_internal_ext_value() const {
  const ::mead101::avs::RootChordQuality* p = ext_value_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::avs::RootChordQuality*>(
      &::mead101::avs::_RootChordQuality_default_instance_);
}
inline const ::mead101::avs::RootChordQuality& RootChordQuality::ext_value() const {
  // @@protoc_insertion_point(field_get:mead101.mead.RootChordQuality.ext_value)
  return _internal_ext_value();
}
inline void RootChordQuality::unsafe_arena_set_allocated_ext_value(
    ::mead101::avs::RootChordQuality* ext_value) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext_value_);
  }
  ext_value_ = ext_value;
  if (ext_value) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.RootChordQuality.ext_value)
}
inline ::mead101::avs::RootChordQuality* RootChordQuality::release_ext_value() {
  _has_bits_[0] &= ~0x00000004u;
  ::mead101::avs::RootChordQuality* temp = ext_value_;
  ext_value_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::avs::RootChordQuality* RootChordQuality::unsafe_arena_release_ext_value() {
  // @@protoc_insertion_point(field_release:mead101.mead.RootChordQuality.ext_value)
  _has_bits_[0] &= ~0x00000004u;
  ::mead101::avs::RootChordQuality* temp = ext_value_;
  ext_value_ = nullptr;
  return temp;
}
inline ::mead101::avs::RootChordQuality* RootChordQuality::_internal_mutable_ext_value() {
  _has_bits_[0] |= 0x00000004u;
  if (ext_value_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::avs::RootChordQuality>(GetArena());
    ext_value_ = p;
  }
  return ext_value_;
}
inline ::mead101::avs::RootChordQuality* RootChordQuality::mutable_ext_value() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.RootChordQuality.ext_value)
  return _internal_mutable_ext_value();
}
inline void RootChordQuality::set_allocated_ext_value(::mead101::avs::RootChordQuality* ext_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext_value_);
  }
  if (ext_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext_value)->GetArena();
    if (message_arena != submessage_arena) {
      ext_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext_value, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  ext_value_ = ext_value;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.RootChordQuality.ext_value)
}

// -------------------------------------------------------------------

// Sample

// optional bool contains_samples = 1;
inline bool Sample::_internal_has_contains_samples() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Sample::has_contains_samples() const {
  return _internal_has_contains_samples();
}
inline void Sample::clear_contains_samples() {
  contains_samples_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool Sample::_internal_contains_samples() const {
  return contains_samples_;
}
inline bool Sample::contains_samples() const {
  // @@protoc_insertion_point(field_get:mead101.mead.Sample.contains_samples)
  return _internal_contains_samples();
}
inline void Sample::_internal_set_contains_samples(bool value) {
  _has_bits_[0] |= 0x00000002u;
  contains_samples_ = value;
}
inline void Sample::set_contains_samples(bool value) {
  _internal_set_contains_samples(value);
  // @@protoc_insertion_point(field_set:mead101.mead.Sample.contains_samples)
}

// repeated .mead101.mead.TextWithFormat description = 2;
inline int Sample::_internal_description_size() const {
  return description_.size();
}
inline int Sample::description_size() const {
  return _internal_description_size();
}
inline void Sample::clear_description() {
  description_.Clear();
}
inline ::mead101::mead::TextWithFormat* Sample::mutable_description(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Sample.description)
  return description_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::TextWithFormat >*
Sample::mutable_description() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.Sample.description)
  return &description_;
}
inline const ::mead101::mead::TextWithFormat& Sample::_internal_description(int index) const {
  return description_.Get(index);
}
inline const ::mead101::mead::TextWithFormat& Sample::description(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.Sample.description)
  return _internal_description(index);
}
inline ::mead101::mead::TextWithFormat* Sample::_internal_add_description() {
  return description_.Add();
}
inline ::mead101::mead::TextWithFormat* Sample::add_description() {
  // @@protoc_insertion_point(field_add:mead101.mead.Sample.description)
  return _internal_add_description();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::TextWithFormat >&
Sample::description() const {
  // @@protoc_insertion_point(field_list:mead101.mead.Sample.description)
  return description_;
}

// repeated .mead101.mead.Timing host_timing = 3;
inline int Sample::_internal_host_timing_size() const {
  return host_timing_.size();
}
inline int Sample::host_timing_size() const {
  return _internal_host_timing_size();
}
inline void Sample::clear_host_timing() {
  host_timing_.Clear();
}
inline ::mead101::mead::Timing* Sample::mutable_host_timing(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Sample.host_timing)
  return host_timing_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Timing >*
Sample::mutable_host_timing() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.Sample.host_timing)
  return &host_timing_;
}
inline const ::mead101::mead::Timing& Sample::_internal_host_timing(int index) const {
  return host_timing_.Get(index);
}
inline const ::mead101::mead::Timing& Sample::host_timing(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.Sample.host_timing)
  return _internal_host_timing(index);
}
inline ::mead101::mead::Timing* Sample::_internal_add_host_timing() {
  return host_timing_.Add();
}
inline ::mead101::mead::Timing* Sample::add_host_timing() {
  // @@protoc_insertion_point(field_add:mead101.mead.Sample.host_timing)
  return _internal_add_host_timing();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Timing >&
Sample::host_timing() const {
  // @@protoc_insertion_point(field_list:mead101.mead.Sample.host_timing)
  return host_timing_;
}

// optional bool is_contained_in_sample = 4;
inline bool Sample::_internal_has_is_contained_in_sample() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Sample::has_is_contained_in_sample() const {
  return _internal_has_is_contained_in_sample();
}
inline void Sample::clear_is_contained_in_sample() {
  is_contained_in_sample_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool Sample::_internal_is_contained_in_sample() const {
  return is_contained_in_sample_;
}
inline bool Sample::is_contained_in_sample() const {
  // @@protoc_insertion_point(field_get:mead101.mead.Sample.is_contained_in_sample)
  return _internal_is_contained_in_sample();
}
inline void Sample::_internal_set_is_contained_in_sample(bool value) {
  _has_bits_[0] |= 0x00000004u;
  is_contained_in_sample_ = value;
}
inline void Sample::set_is_contained_in_sample(bool value) {
  _internal_set_is_contained_in_sample(value);
  // @@protoc_insertion_point(field_set:mead101.mead.Sample.is_contained_in_sample)
}

// repeated string metadata_source_reference = 5;
inline int Sample::_internal_metadata_source_reference_size() const {
  return metadata_source_reference_.size();
}
inline int Sample::metadata_source_reference_size() const {
  return _internal_metadata_source_reference_size();
}
inline void Sample::clear_metadata_source_reference() {
  metadata_source_reference_.Clear();
}
inline std::string* Sample::add_metadata_source_reference() {
  // @@protoc_insertion_point(field_add_mutable:mead101.mead.Sample.metadata_source_reference)
  return _internal_add_metadata_source_reference();
}
inline const std::string& Sample::_internal_metadata_source_reference(int index) const {
  return metadata_source_reference_.Get(index);
}
inline const std::string& Sample::metadata_source_reference(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.Sample.metadata_source_reference)
  return _internal_metadata_source_reference(index);
}
inline std::string* Sample::mutable_metadata_source_reference(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Sample.metadata_source_reference)
  return metadata_source_reference_.Mutable(index);
}
inline void Sample::set_metadata_source_reference(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:mead101.mead.Sample.metadata_source_reference)
  metadata_source_reference_.Mutable(index)->assign(value);
}
inline void Sample::set_metadata_source_reference(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:mead101.mead.Sample.metadata_source_reference)
  metadata_source_reference_.Mutable(index)->assign(std::move(value));
}
inline void Sample::set_metadata_source_reference(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  metadata_source_reference_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mead101.mead.Sample.metadata_source_reference)
}
inline void Sample::set_metadata_source_reference(int index, const char* value, size_t size) {
  metadata_source_reference_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.Sample.metadata_source_reference)
}
inline std::string* Sample::_internal_add_metadata_source_reference() {
  return metadata_source_reference_.Add();
}
inline void Sample::add_metadata_source_reference(const std::string& value) {
  metadata_source_reference_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mead101.mead.Sample.metadata_source_reference)
}
inline void Sample::add_metadata_source_reference(std::string&& value) {
  metadata_source_reference_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:mead101.mead.Sample.metadata_source_reference)
}
inline void Sample::add_metadata_source_reference(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  metadata_source_reference_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mead101.mead.Sample.metadata_source_reference)
}
inline void Sample::add_metadata_source_reference(const char* value, size_t size) {
  metadata_source_reference_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mead101.mead.Sample.metadata_source_reference)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Sample::metadata_source_reference() const {
  // @@protoc_insertion_point(field_list:mead101.mead.Sample.metadata_source_reference)
  return metadata_source_reference_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Sample::mutable_metadata_source_reference() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.Sample.metadata_source_reference)
  return &metadata_source_reference_;
}

// optional .mead101.mead.ResourceSummary related_resource = 6;
inline bool Sample::_internal_has_related_resource() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || related_resource_ != nullptr);
  return value;
}
inline bool Sample::has_related_resource() const {
  return _internal_has_related_resource();
}
inline void Sample::clear_related_resource() {
  if (related_resource_ != nullptr) related_resource_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::mead101::mead::ResourceSummary& Sample::_internal_related_resource() const {
  const ::mead101::mead::ResourceSummary* p = related_resource_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::ResourceSummary*>(
      &::mead101::mead::_ResourceSummary_default_instance_);
}
inline const ::mead101::mead::ResourceSummary& Sample::related_resource() const {
  // @@protoc_insertion_point(field_get:mead101.mead.Sample.related_resource)
  return _internal_related_resource();
}
inline void Sample::unsafe_arena_set_allocated_related_resource(
    ::mead101::mead::ResourceSummary* related_resource) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(related_resource_);
  }
  related_resource_ = related_resource;
  if (related_resource) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.Sample.related_resource)
}
inline ::mead101::mead::ResourceSummary* Sample::release_related_resource() {
  _has_bits_[0] &= ~0x00000001u;
  ::mead101::mead::ResourceSummary* temp = related_resource_;
  related_resource_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::ResourceSummary* Sample::unsafe_arena_release_related_resource() {
  // @@protoc_insertion_point(field_release:mead101.mead.Sample.related_resource)
  _has_bits_[0] &= ~0x00000001u;
  ::mead101::mead::ResourceSummary* temp = related_resource_;
  related_resource_ = nullptr;
  return temp;
}
inline ::mead101::mead::ResourceSummary* Sample::_internal_mutable_related_resource() {
  _has_bits_[0] |= 0x00000001u;
  if (related_resource_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::ResourceSummary>(GetArena());
    related_resource_ = p;
  }
  return related_resource_;
}
inline ::mead101::mead::ResourceSummary* Sample::mutable_related_resource() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Sample.related_resource)
  return _internal_mutable_related_resource();
}
inline void Sample::set_allocated_related_resource(::mead101::mead::ResourceSummary* related_resource) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete related_resource_;
  }
  if (related_resource) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(related_resource);
    if (message_arena != submessage_arena) {
      related_resource = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, related_resource, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  related_resource_ = related_resource;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.Sample.related_resource)
}

// repeated .mead101.mead.SampleFeature sample_feature = 7;
inline int Sample::_internal_sample_feature_size() const {
  return sample_feature_.size();
}
inline int Sample::sample_feature_size() const {
  return _internal_sample_feature_size();
}
inline void Sample::clear_sample_feature() {
  sample_feature_.Clear();
}
inline ::mead101::mead::SampleFeature* Sample::mutable_sample_feature(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Sample.sample_feature)
  return sample_feature_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::SampleFeature >*
Sample::mutable_sample_feature() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.Sample.sample_feature)
  return &sample_feature_;
}
inline const ::mead101::mead::SampleFeature& Sample::_internal_sample_feature(int index) const {
  return sample_feature_.Get(index);
}
inline const ::mead101::mead::SampleFeature& Sample::sample_feature(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.Sample.sample_feature)
  return _internal_sample_feature(index);
}
inline ::mead101::mead::SampleFeature* Sample::_internal_add_sample_feature() {
  return sample_feature_.Add();
}
inline ::mead101::mead::SampleFeature* Sample::add_sample_feature() {
  // @@protoc_insertion_point(field_add:mead101.mead.Sample.sample_feature)
  return _internal_add_sample_feature();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::SampleFeature >&
Sample::sample_feature() const {
  // @@protoc_insertion_point(field_list:mead101.mead.Sample.sample_feature)
  return sample_feature_;
}

// repeated .mead101.mead.Timing sample_timing = 8;
inline int Sample::_internal_sample_timing_size() const {
  return sample_timing_.size();
}
inline int Sample::sample_timing_size() const {
  return _internal_sample_timing_size();
}
inline void Sample::clear_sample_timing() {
  sample_timing_.Clear();
}
inline ::mead101::mead::Timing* Sample::mutable_sample_timing(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Sample.sample_timing)
  return sample_timing_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Timing >*
Sample::mutable_sample_timing() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.Sample.sample_timing)
  return &sample_timing_;
}
inline const ::mead101::mead::Timing& Sample::_internal_sample_timing(int index) const {
  return sample_timing_.Get(index);
}
inline const ::mead101::mead::Timing& Sample::sample_timing(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.Sample.sample_timing)
  return _internal_sample_timing(index);
}
inline ::mead101::mead::Timing* Sample::_internal_add_sample_timing() {
  return sample_timing_.Add();
}
inline ::mead101::mead::Timing* Sample::add_sample_timing() {
  // @@protoc_insertion_point(field_add:mead101.mead.Sample.sample_timing)
  return _internal_add_sample_timing();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Timing >&
Sample::sample_timing() const {
  // @@protoc_insertion_point(field_list:mead101.mead.Sample.sample_timing)
  return sample_timing_;
}

// -------------------------------------------------------------------

// SampleFeature

// optional string language_and_script_code = 1;
inline bool SampleFeature::_internal_has_language_and_script_code() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SampleFeature::has_language_and_script_code() const {
  return _internal_has_language_and_script_code();
}
inline void SampleFeature::clear_language_and_script_code() {
  language_and_script_code_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SampleFeature::language_and_script_code() const {
  // @@protoc_insertion_point(field_get:mead101.mead.SampleFeature.language_and_script_code)
  return _internal_language_and_script_code();
}
inline void SampleFeature::set_language_and_script_code(const std::string& value) {
  _internal_set_language_and_script_code(value);
  // @@protoc_insertion_point(field_set:mead101.mead.SampleFeature.language_and_script_code)
}
inline std::string* SampleFeature::mutable_language_and_script_code() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.SampleFeature.language_and_script_code)
  return _internal_mutable_language_and_script_code();
}
inline const std::string& SampleFeature::_internal_language_and_script_code() const {
  return language_and_script_code_.Get();
}
inline void SampleFeature::_internal_set_language_and_script_code(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  language_and_script_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SampleFeature::set_language_and_script_code(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  language_and_script_code_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.SampleFeature.language_and_script_code)
}
inline void SampleFeature::set_language_and_script_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  language_and_script_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.SampleFeature.language_and_script_code)
}
inline void SampleFeature::set_language_and_script_code(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  language_and_script_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.SampleFeature.language_and_script_code)
}
inline std::string* SampleFeature::_internal_mutable_language_and_script_code() {
  _has_bits_[0] |= 0x00000001u;
  return language_and_script_code_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SampleFeature::release_language_and_script_code() {
  // @@protoc_insertion_point(field_release:mead101.mead.SampleFeature.language_and_script_code)
  if (!_internal_has_language_and_script_code()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return language_and_script_code_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SampleFeature::set_allocated_language_and_script_code(std::string* language_and_script_code) {
  if (language_and_script_code != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  language_and_script_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), language_and_script_code,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.SampleFeature.language_and_script_code)
}

// optional string ext_value = 2;
inline bool SampleFeature::_internal_has_ext_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SampleFeature::has_ext_value() const {
  return _internal_has_ext_value();
}
inline void SampleFeature::clear_ext_value() {
  ext_value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SampleFeature::ext_value() const {
  // @@protoc_insertion_point(field_get:mead101.mead.SampleFeature.ext_value)
  return _internal_ext_value();
}
inline void SampleFeature::set_ext_value(const std::string& value) {
  _internal_set_ext_value(value);
  // @@protoc_insertion_point(field_set:mead101.mead.SampleFeature.ext_value)
}
inline std::string* SampleFeature::mutable_ext_value() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.SampleFeature.ext_value)
  return _internal_mutable_ext_value();
}
inline const std::string& SampleFeature::_internal_ext_value() const {
  return ext_value_.Get();
}
inline void SampleFeature::_internal_set_ext_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  ext_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SampleFeature::set_ext_value(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  ext_value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.SampleFeature.ext_value)
}
inline void SampleFeature::set_ext_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  ext_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.SampleFeature.ext_value)
}
inline void SampleFeature::set_ext_value(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  ext_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.SampleFeature.ext_value)
}
inline std::string* SampleFeature::_internal_mutable_ext_value() {
  _has_bits_[0] |= 0x00000002u;
  return ext_value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SampleFeature::release_ext_value() {
  // @@protoc_insertion_point(field_release:mead101.mead.SampleFeature.ext_value)
  if (!_internal_has_ext_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return ext_value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SampleFeature::set_allocated_ext_value(std::string* ext_value) {
  if (ext_value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  ext_value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ext_value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.SampleFeature.ext_value)
}

// -------------------------------------------------------------------

// SessionType

// optional string namespace = 1;
inline bool SessionType::_internal_has_namespace_() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SessionType::has_namespace_() const {
  return _internal_has_namespace_();
}
inline void SessionType::clear_namespace_() {
  namespace__.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SessionType::namespace_() const {
  // @@protoc_insertion_point(field_get:mead101.mead.SessionType.namespace)
  return _internal_namespace_();
}
inline void SessionType::set_namespace_(const std::string& value) {
  _internal_set_namespace_(value);
  // @@protoc_insertion_point(field_set:mead101.mead.SessionType.namespace)
}
inline std::string* SessionType::mutable_namespace_() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.SessionType.namespace)
  return _internal_mutable_namespace_();
}
inline const std::string& SessionType::_internal_namespace_() const {
  return namespace__.Get();
}
inline void SessionType::_internal_set_namespace_(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SessionType::set_namespace_(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  namespace__.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.SessionType.namespace)
}
inline void SessionType::set_namespace_(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.SessionType.namespace)
}
inline void SessionType::set_namespace_(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.SessionType.namespace)
}
inline std::string* SessionType::_internal_mutable_namespace_() {
  _has_bits_[0] |= 0x00000001u;
  return namespace__.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SessionType::release_namespace_() {
  // @@protoc_insertion_point(field_release:mead101.mead.SessionType.namespace)
  if (!_internal_has_namespace_()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return namespace__.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SessionType::set_allocated_namespace_(std::string* namespace_) {
  if (namespace_ != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  namespace__.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), namespace_,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.SessionType.namespace)
}

// optional string user_defined_value = 2;
inline bool SessionType::_internal_has_user_defined_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SessionType::has_user_defined_value() const {
  return _internal_has_user_defined_value();
}
inline void SessionType::clear_user_defined_value() {
  user_defined_value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SessionType::user_defined_value() const {
  // @@protoc_insertion_point(field_get:mead101.mead.SessionType.user_defined_value)
  return _internal_user_defined_value();
}
inline void SessionType::set_user_defined_value(const std::string& value) {
  _internal_set_user_defined_value(value);
  // @@protoc_insertion_point(field_set:mead101.mead.SessionType.user_defined_value)
}
inline std::string* SessionType::mutable_user_defined_value() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.SessionType.user_defined_value)
  return _internal_mutable_user_defined_value();
}
inline const std::string& SessionType::_internal_user_defined_value() const {
  return user_defined_value_.Get();
}
inline void SessionType::_internal_set_user_defined_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SessionType::set_user_defined_value(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  user_defined_value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.SessionType.user_defined_value)
}
inline void SessionType::set_user_defined_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.SessionType.user_defined_value)
}
inline void SessionType::set_user_defined_value(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.SessionType.user_defined_value)
}
inline std::string* SessionType::_internal_mutable_user_defined_value() {
  _has_bits_[0] |= 0x00000002u;
  return user_defined_value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SessionType::release_user_defined_value() {
  // @@protoc_insertion_point(field_release:mead101.mead.SessionType.user_defined_value)
  if (!_internal_has_user_defined_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return user_defined_value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SessionType::set_allocated_user_defined_value(std::string* user_defined_value) {
  if (user_defined_value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  user_defined_value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_defined_value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.SessionType.user_defined_value)
}

// optional .mead101.avs.SessionType ext_value = 3;
inline bool SessionType::_internal_has_ext_value() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || ext_value_ != nullptr);
  return value;
}
inline bool SessionType::has_ext_value() const {
  return _internal_has_ext_value();
}
inline const ::mead101::avs::SessionType& SessionType::_internal_ext_value() const {
  const ::mead101::avs::SessionType* p = ext_value_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::avs::SessionType*>(
      &::mead101::avs::_SessionType_default_instance_);
}
inline const ::mead101::avs::SessionType& SessionType::ext_value() const {
  // @@protoc_insertion_point(field_get:mead101.mead.SessionType.ext_value)
  return _internal_ext_value();
}
inline void SessionType::unsafe_arena_set_allocated_ext_value(
    ::mead101::avs::SessionType* ext_value) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext_value_);
  }
  ext_value_ = ext_value;
  if (ext_value) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.SessionType.ext_value)
}
inline ::mead101::avs::SessionType* SessionType::release_ext_value() {
  _has_bits_[0] &= ~0x00000004u;
  ::mead101::avs::SessionType* temp = ext_value_;
  ext_value_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::avs::SessionType* SessionType::unsafe_arena_release_ext_value() {
  // @@protoc_insertion_point(field_release:mead101.mead.SessionType.ext_value)
  _has_bits_[0] &= ~0x00000004u;
  ::mead101::avs::SessionType* temp = ext_value_;
  ext_value_ = nullptr;
  return temp;
}
inline ::mead101::avs::SessionType* SessionType::_internal_mutable_ext_value() {
  _has_bits_[0] |= 0x00000004u;
  if (ext_value_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::avs::SessionType>(GetArena());
    ext_value_ = p;
  }
  return ext_value_;
}
inline ::mead101::avs::SessionType* SessionType::mutable_ext_value() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.SessionType.ext_value)
  return _internal_mutable_ext_value();
}
inline void SessionType::set_allocated_ext_value(::mead101::avs::SessionType* ext_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext_value_);
  }
  if (ext_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext_value)->GetArena();
    if (message_arena != submessage_arena) {
      ext_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext_value, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  ext_value_ = ext_value;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.SessionType.ext_value)
}

// -------------------------------------------------------------------

// SimilarParty

// repeated .mead101.mead.Annotation description = 1;
inline int SimilarParty::_internal_description_size() const {
  return description_.size();
}
inline int SimilarParty::description_size() const {
  return _internal_description_size();
}
inline void SimilarParty::clear_description() {
  description_.Clear();
}
inline ::mead101::mead::Annotation* SimilarParty::mutable_description(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.SimilarParty.description)
  return description_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Annotation >*
SimilarParty::mutable_description() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.SimilarParty.description)
  return &description_;
}
inline const ::mead101::mead::Annotation& SimilarParty::_internal_description(int index) const {
  return description_.Get(index);
}
inline const ::mead101::mead::Annotation& SimilarParty::description(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.SimilarParty.description)
  return _internal_description(index);
}
inline ::mead101::mead::Annotation* SimilarParty::_internal_add_description() {
  return description_.Add();
}
inline ::mead101::mead::Annotation* SimilarParty::add_description() {
  // @@protoc_insertion_point(field_add:mead101.mead.SimilarParty.description)
  return _internal_add_description();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Annotation >&
SimilarParty::description() const {
  // @@protoc_insertion_point(field_list:mead101.mead.SimilarParty.description)
  return description_;
}

// repeated string metadata_source_reference = 2;
inline int SimilarParty::_internal_metadata_source_reference_size() const {
  return metadata_source_reference_.size();
}
inline int SimilarParty::metadata_source_reference_size() const {
  return _internal_metadata_source_reference_size();
}
inline void SimilarParty::clear_metadata_source_reference() {
  metadata_source_reference_.Clear();
}
inline std::string* SimilarParty::add_metadata_source_reference() {
  // @@protoc_insertion_point(field_add_mutable:mead101.mead.SimilarParty.metadata_source_reference)
  return _internal_add_metadata_source_reference();
}
inline const std::string& SimilarParty::_internal_metadata_source_reference(int index) const {
  return metadata_source_reference_.Get(index);
}
inline const std::string& SimilarParty::metadata_source_reference(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.SimilarParty.metadata_source_reference)
  return _internal_metadata_source_reference(index);
}
inline std::string* SimilarParty::mutable_metadata_source_reference(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.SimilarParty.metadata_source_reference)
  return metadata_source_reference_.Mutable(index);
}
inline void SimilarParty::set_metadata_source_reference(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:mead101.mead.SimilarParty.metadata_source_reference)
  metadata_source_reference_.Mutable(index)->assign(value);
}
inline void SimilarParty::set_metadata_source_reference(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:mead101.mead.SimilarParty.metadata_source_reference)
  metadata_source_reference_.Mutable(index)->assign(std::move(value));
}
inline void SimilarParty::set_metadata_source_reference(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  metadata_source_reference_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mead101.mead.SimilarParty.metadata_source_reference)
}
inline void SimilarParty::set_metadata_source_reference(int index, const char* value, size_t size) {
  metadata_source_reference_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.SimilarParty.metadata_source_reference)
}
inline std::string* SimilarParty::_internal_add_metadata_source_reference() {
  return metadata_source_reference_.Add();
}
inline void SimilarParty::add_metadata_source_reference(const std::string& value) {
  metadata_source_reference_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mead101.mead.SimilarParty.metadata_source_reference)
}
inline void SimilarParty::add_metadata_source_reference(std::string&& value) {
  metadata_source_reference_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:mead101.mead.SimilarParty.metadata_source_reference)
}
inline void SimilarParty::add_metadata_source_reference(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  metadata_source_reference_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mead101.mead.SimilarParty.metadata_source_reference)
}
inline void SimilarParty::add_metadata_source_reference(const char* value, size_t size) {
  metadata_source_reference_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mead101.mead.SimilarParty.metadata_source_reference)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SimilarParty::metadata_source_reference() const {
  // @@protoc_insertion_point(field_list:mead101.mead.SimilarParty.metadata_source_reference)
  return metadata_source_reference_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SimilarParty::mutable_metadata_source_reference() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.SimilarParty.metadata_source_reference)
  return &metadata_source_reference_;
}

// optional .mead101.mead.PartyWithNames party = 3;
inline bool SimilarParty::_internal_has_party() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || party_ != nullptr);
  return value;
}
inline bool SimilarParty::has_party() const {
  return _internal_has_party();
}
inline void SimilarParty::clear_party() {
  if (party_ != nullptr) party_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::mead101::mead::PartyWithNames& SimilarParty::_internal_party() const {
  const ::mead101::mead::PartyWithNames* p = party_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::PartyWithNames*>(
      &::mead101::mead::_PartyWithNames_default_instance_);
}
inline const ::mead101::mead::PartyWithNames& SimilarParty::party() const {
  // @@protoc_insertion_point(field_get:mead101.mead.SimilarParty.party)
  return _internal_party();
}
inline void SimilarParty::unsafe_arena_set_allocated_party(
    ::mead101::mead::PartyWithNames* party) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(party_);
  }
  party_ = party;
  if (party) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.SimilarParty.party)
}
inline ::mead101::mead::PartyWithNames* SimilarParty::release_party() {
  _has_bits_[0] &= ~0x00000001u;
  ::mead101::mead::PartyWithNames* temp = party_;
  party_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::PartyWithNames* SimilarParty::unsafe_arena_release_party() {
  // @@protoc_insertion_point(field_release:mead101.mead.SimilarParty.party)
  _has_bits_[0] &= ~0x00000001u;
  ::mead101::mead::PartyWithNames* temp = party_;
  party_ = nullptr;
  return temp;
}
inline ::mead101::mead::PartyWithNames* SimilarParty::_internal_mutable_party() {
  _has_bits_[0] |= 0x00000001u;
  if (party_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::PartyWithNames>(GetArena());
    party_ = p;
  }
  return party_;
}
inline ::mead101::mead::PartyWithNames* SimilarParty::mutable_party() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.SimilarParty.party)
  return _internal_mutable_party();
}
inline void SimilarParty::set_allocated_party(::mead101::mead::PartyWithNames* party) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete party_;
  }
  if (party) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(party);
    if (message_arena != submessage_arena) {
      party = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, party, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  party_ = party;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.SimilarParty.party)
}

// -------------------------------------------------------------------

// SimilarRelease

// repeated .mead101.mead.Annotation description = 1;
inline int SimilarRelease::_internal_description_size() const {
  return description_.size();
}
inline int SimilarRelease::description_size() const {
  return _internal_description_size();
}
inline void SimilarRelease::clear_description() {
  description_.Clear();
}
inline ::mead101::mead::Annotation* SimilarRelease::mutable_description(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.SimilarRelease.description)
  return description_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Annotation >*
SimilarRelease::mutable_description() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.SimilarRelease.description)
  return &description_;
}
inline const ::mead101::mead::Annotation& SimilarRelease::_internal_description(int index) const {
  return description_.Get(index);
}
inline const ::mead101::mead::Annotation& SimilarRelease::description(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.SimilarRelease.description)
  return _internal_description(index);
}
inline ::mead101::mead::Annotation* SimilarRelease::_internal_add_description() {
  return description_.Add();
}
inline ::mead101::mead::Annotation* SimilarRelease::add_description() {
  // @@protoc_insertion_point(field_add:mead101.mead.SimilarRelease.description)
  return _internal_add_description();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Annotation >&
SimilarRelease::description() const {
  // @@protoc_insertion_point(field_list:mead101.mead.SimilarRelease.description)
  return description_;
}

// repeated string metadata_source_reference = 2;
inline int SimilarRelease::_internal_metadata_source_reference_size() const {
  return metadata_source_reference_.size();
}
inline int SimilarRelease::metadata_source_reference_size() const {
  return _internal_metadata_source_reference_size();
}
inline void SimilarRelease::clear_metadata_source_reference() {
  metadata_source_reference_.Clear();
}
inline std::string* SimilarRelease::add_metadata_source_reference() {
  // @@protoc_insertion_point(field_add_mutable:mead101.mead.SimilarRelease.metadata_source_reference)
  return _internal_add_metadata_source_reference();
}
inline const std::string& SimilarRelease::_internal_metadata_source_reference(int index) const {
  return metadata_source_reference_.Get(index);
}
inline const std::string& SimilarRelease::metadata_source_reference(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.SimilarRelease.metadata_source_reference)
  return _internal_metadata_source_reference(index);
}
inline std::string* SimilarRelease::mutable_metadata_source_reference(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.SimilarRelease.metadata_source_reference)
  return metadata_source_reference_.Mutable(index);
}
inline void SimilarRelease::set_metadata_source_reference(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:mead101.mead.SimilarRelease.metadata_source_reference)
  metadata_source_reference_.Mutable(index)->assign(value);
}
inline void SimilarRelease::set_metadata_source_reference(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:mead101.mead.SimilarRelease.metadata_source_reference)
  metadata_source_reference_.Mutable(index)->assign(std::move(value));
}
inline void SimilarRelease::set_metadata_source_reference(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  metadata_source_reference_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mead101.mead.SimilarRelease.metadata_source_reference)
}
inline void SimilarRelease::set_metadata_source_reference(int index, const char* value, size_t size) {
  metadata_source_reference_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.SimilarRelease.metadata_source_reference)
}
inline std::string* SimilarRelease::_internal_add_metadata_source_reference() {
  return metadata_source_reference_.Add();
}
inline void SimilarRelease::add_metadata_source_reference(const std::string& value) {
  metadata_source_reference_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mead101.mead.SimilarRelease.metadata_source_reference)
}
inline void SimilarRelease::add_metadata_source_reference(std::string&& value) {
  metadata_source_reference_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:mead101.mead.SimilarRelease.metadata_source_reference)
}
inline void SimilarRelease::add_metadata_source_reference(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  metadata_source_reference_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mead101.mead.SimilarRelease.metadata_source_reference)
}
inline void SimilarRelease::add_metadata_source_reference(const char* value, size_t size) {
  metadata_source_reference_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mead101.mead.SimilarRelease.metadata_source_reference)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SimilarRelease::metadata_source_reference() const {
  // @@protoc_insertion_point(field_list:mead101.mead.SimilarRelease.metadata_source_reference)
  return metadata_source_reference_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SimilarRelease::mutable_metadata_source_reference() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.SimilarRelease.metadata_source_reference)
  return &metadata_source_reference_;
}

// optional .mead101.mead.Release release = 3;
inline bool SimilarRelease::_internal_has_release() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || release_ != nullptr);
  return value;
}
inline bool SimilarRelease::has_release() const {
  return _internal_has_release();
}
inline void SimilarRelease::clear_release() {
  if (release_ != nullptr) release_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::mead101::mead::Release& SimilarRelease::_internal_release() const {
  const ::mead101::mead::Release* p = release_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::Release*>(
      &::mead101::mead::_Release_default_instance_);
}
inline const ::mead101::mead::Release& SimilarRelease::release() const {
  // @@protoc_insertion_point(field_get:mead101.mead.SimilarRelease.release)
  return _internal_release();
}
inline void SimilarRelease::unsafe_arena_set_allocated_release(
    ::mead101::mead::Release* release) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(release_);
  }
  release_ = release;
  if (release) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.SimilarRelease.release)
}
inline ::mead101::mead::Release* SimilarRelease::release_release() {
  _has_bits_[0] &= ~0x00000001u;
  ::mead101::mead::Release* temp = release_;
  release_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::Release* SimilarRelease::unsafe_arena_release_release() {
  // @@protoc_insertion_point(field_release:mead101.mead.SimilarRelease.release)
  _has_bits_[0] &= ~0x00000001u;
  ::mead101::mead::Release* temp = release_;
  release_ = nullptr;
  return temp;
}
inline ::mead101::mead::Release* SimilarRelease::_internal_mutable_release() {
  _has_bits_[0] |= 0x00000001u;
  if (release_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::Release>(GetArena());
    release_ = p;
  }
  return release_;
}
inline ::mead101::mead::Release* SimilarRelease::mutable_release() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.SimilarRelease.release)
  return _internal_mutable_release();
}
inline void SimilarRelease::set_allocated_release(::mead101::mead::Release* release) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete release_;
  }
  if (release) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(release);
    if (message_arena != submessage_arena) {
      release = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, release, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  release_ = release;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.SimilarRelease.release)
}

// -------------------------------------------------------------------

// SimilarResource

// repeated .mead101.mead.Annotation description = 1;
inline int SimilarResource::_internal_description_size() const {
  return description_.size();
}
inline int SimilarResource::description_size() const {
  return _internal_description_size();
}
inline void SimilarResource::clear_description() {
  description_.Clear();
}
inline ::mead101::mead::Annotation* SimilarResource::mutable_description(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.SimilarResource.description)
  return description_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Annotation >*
SimilarResource::mutable_description() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.SimilarResource.description)
  return &description_;
}
inline const ::mead101::mead::Annotation& SimilarResource::_internal_description(int index) const {
  return description_.Get(index);
}
inline const ::mead101::mead::Annotation& SimilarResource::description(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.SimilarResource.description)
  return _internal_description(index);
}
inline ::mead101::mead::Annotation* SimilarResource::_internal_add_description() {
  return description_.Add();
}
inline ::mead101::mead::Annotation* SimilarResource::add_description() {
  // @@protoc_insertion_point(field_add:mead101.mead.SimilarResource.description)
  return _internal_add_description();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Annotation >&
SimilarResource::description() const {
  // @@protoc_insertion_point(field_list:mead101.mead.SimilarResource.description)
  return description_;
}

// repeated string metadata_source_reference = 2;
inline int SimilarResource::_internal_metadata_source_reference_size() const {
  return metadata_source_reference_.size();
}
inline int SimilarResource::metadata_source_reference_size() const {
  return _internal_metadata_source_reference_size();
}
inline void SimilarResource::clear_metadata_source_reference() {
  metadata_source_reference_.Clear();
}
inline std::string* SimilarResource::add_metadata_source_reference() {
  // @@protoc_insertion_point(field_add_mutable:mead101.mead.SimilarResource.metadata_source_reference)
  return _internal_add_metadata_source_reference();
}
inline const std::string& SimilarResource::_internal_metadata_source_reference(int index) const {
  return metadata_source_reference_.Get(index);
}
inline const std::string& SimilarResource::metadata_source_reference(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.SimilarResource.metadata_source_reference)
  return _internal_metadata_source_reference(index);
}
inline std::string* SimilarResource::mutable_metadata_source_reference(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.SimilarResource.metadata_source_reference)
  return metadata_source_reference_.Mutable(index);
}
inline void SimilarResource::set_metadata_source_reference(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:mead101.mead.SimilarResource.metadata_source_reference)
  metadata_source_reference_.Mutable(index)->assign(value);
}
inline void SimilarResource::set_metadata_source_reference(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:mead101.mead.SimilarResource.metadata_source_reference)
  metadata_source_reference_.Mutable(index)->assign(std::move(value));
}
inline void SimilarResource::set_metadata_source_reference(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  metadata_source_reference_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mead101.mead.SimilarResource.metadata_source_reference)
}
inline void SimilarResource::set_metadata_source_reference(int index, const char* value, size_t size) {
  metadata_source_reference_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.SimilarResource.metadata_source_reference)
}
inline std::string* SimilarResource::_internal_add_metadata_source_reference() {
  return metadata_source_reference_.Add();
}
inline void SimilarResource::add_metadata_source_reference(const std::string& value) {
  metadata_source_reference_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mead101.mead.SimilarResource.metadata_source_reference)
}
inline void SimilarResource::add_metadata_source_reference(std::string&& value) {
  metadata_source_reference_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:mead101.mead.SimilarResource.metadata_source_reference)
}
inline void SimilarResource::add_metadata_source_reference(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  metadata_source_reference_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mead101.mead.SimilarResource.metadata_source_reference)
}
inline void SimilarResource::add_metadata_source_reference(const char* value, size_t size) {
  metadata_source_reference_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mead101.mead.SimilarResource.metadata_source_reference)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SimilarResource::metadata_source_reference() const {
  // @@protoc_insertion_point(field_list:mead101.mead.SimilarResource.metadata_source_reference)
  return metadata_source_reference_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SimilarResource::mutable_metadata_source_reference() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.SimilarResource.metadata_source_reference)
  return &metadata_source_reference_;
}

// optional .mead101.mead.Resource resource = 3;
inline bool SimilarResource::_internal_has_resource() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || resource_ != nullptr);
  return value;
}
inline bool SimilarResource::has_resource() const {
  return _internal_has_resource();
}
inline void SimilarResource::clear_resource() {
  if (resource_ != nullptr) resource_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::mead101::mead::Resource& SimilarResource::_internal_resource() const {
  const ::mead101::mead::Resource* p = resource_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::Resource*>(
      &::mead101::mead::_Resource_default_instance_);
}
inline const ::mead101::mead::Resource& SimilarResource::resource() const {
  // @@protoc_insertion_point(field_get:mead101.mead.SimilarResource.resource)
  return _internal_resource();
}
inline void SimilarResource::unsafe_arena_set_allocated_resource(
    ::mead101::mead::Resource* resource) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(resource_);
  }
  resource_ = resource;
  if (resource) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.SimilarResource.resource)
}
inline ::mead101::mead::Resource* SimilarResource::release_resource() {
  _has_bits_[0] &= ~0x00000001u;
  ::mead101::mead::Resource* temp = resource_;
  resource_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::Resource* SimilarResource::unsafe_arena_release_resource() {
  // @@protoc_insertion_point(field_release:mead101.mead.SimilarResource.resource)
  _has_bits_[0] &= ~0x00000001u;
  ::mead101::mead::Resource* temp = resource_;
  resource_ = nullptr;
  return temp;
}
inline ::mead101::mead::Resource* SimilarResource::_internal_mutable_resource() {
  _has_bits_[0] |= 0x00000001u;
  if (resource_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::Resource>(GetArena());
    resource_ = p;
  }
  return resource_;
}
inline ::mead101::mead::Resource* SimilarResource::mutable_resource() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.SimilarResource.resource)
  return _internal_mutable_resource();
}
inline void SimilarResource::set_allocated_resource(::mead101::mead::Resource* resource) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete resource_;
  }
  if (resource) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(resource);
    if (message_arena != submessage_arena) {
      resource = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resource, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  resource_ = resource;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.SimilarResource.resource)
}

// -------------------------------------------------------------------

// SimilarWork

// repeated .mead101.mead.Annotation description = 1;
inline int SimilarWork::_internal_description_size() const {
  return description_.size();
}
inline int SimilarWork::description_size() const {
  return _internal_description_size();
}
inline void SimilarWork::clear_description() {
  description_.Clear();
}
inline ::mead101::mead::Annotation* SimilarWork::mutable_description(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.SimilarWork.description)
  return description_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Annotation >*
SimilarWork::mutable_description() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.SimilarWork.description)
  return &description_;
}
inline const ::mead101::mead::Annotation& SimilarWork::_internal_description(int index) const {
  return description_.Get(index);
}
inline const ::mead101::mead::Annotation& SimilarWork::description(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.SimilarWork.description)
  return _internal_description(index);
}
inline ::mead101::mead::Annotation* SimilarWork::_internal_add_description() {
  return description_.Add();
}
inline ::mead101::mead::Annotation* SimilarWork::add_description() {
  // @@protoc_insertion_point(field_add:mead101.mead.SimilarWork.description)
  return _internal_add_description();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Annotation >&
SimilarWork::description() const {
  // @@protoc_insertion_point(field_list:mead101.mead.SimilarWork.description)
  return description_;
}

// repeated string metadata_source_reference = 2;
inline int SimilarWork::_internal_metadata_source_reference_size() const {
  return metadata_source_reference_.size();
}
inline int SimilarWork::metadata_source_reference_size() const {
  return _internal_metadata_source_reference_size();
}
inline void SimilarWork::clear_metadata_source_reference() {
  metadata_source_reference_.Clear();
}
inline std::string* SimilarWork::add_metadata_source_reference() {
  // @@protoc_insertion_point(field_add_mutable:mead101.mead.SimilarWork.metadata_source_reference)
  return _internal_add_metadata_source_reference();
}
inline const std::string& SimilarWork::_internal_metadata_source_reference(int index) const {
  return metadata_source_reference_.Get(index);
}
inline const std::string& SimilarWork::metadata_source_reference(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.SimilarWork.metadata_source_reference)
  return _internal_metadata_source_reference(index);
}
inline std::string* SimilarWork::mutable_metadata_source_reference(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.SimilarWork.metadata_source_reference)
  return metadata_source_reference_.Mutable(index);
}
inline void SimilarWork::set_metadata_source_reference(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:mead101.mead.SimilarWork.metadata_source_reference)
  metadata_source_reference_.Mutable(index)->assign(value);
}
inline void SimilarWork::set_metadata_source_reference(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:mead101.mead.SimilarWork.metadata_source_reference)
  metadata_source_reference_.Mutable(index)->assign(std::move(value));
}
inline void SimilarWork::set_metadata_source_reference(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  metadata_source_reference_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mead101.mead.SimilarWork.metadata_source_reference)
}
inline void SimilarWork::set_metadata_source_reference(int index, const char* value, size_t size) {
  metadata_source_reference_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.SimilarWork.metadata_source_reference)
}
inline std::string* SimilarWork::_internal_add_metadata_source_reference() {
  return metadata_source_reference_.Add();
}
inline void SimilarWork::add_metadata_source_reference(const std::string& value) {
  metadata_source_reference_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mead101.mead.SimilarWork.metadata_source_reference)
}
inline void SimilarWork::add_metadata_source_reference(std::string&& value) {
  metadata_source_reference_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:mead101.mead.SimilarWork.metadata_source_reference)
}
inline void SimilarWork::add_metadata_source_reference(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  metadata_source_reference_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mead101.mead.SimilarWork.metadata_source_reference)
}
inline void SimilarWork::add_metadata_source_reference(const char* value, size_t size) {
  metadata_source_reference_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mead101.mead.SimilarWork.metadata_source_reference)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SimilarWork::metadata_source_reference() const {
  // @@protoc_insertion_point(field_list:mead101.mead.SimilarWork.metadata_source_reference)
  return metadata_source_reference_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SimilarWork::mutable_metadata_source_reference() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.SimilarWork.metadata_source_reference)
  return &metadata_source_reference_;
}

// optional .mead101.mead.Work work = 3;
inline bool SimilarWork::_internal_has_work() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || work_ != nullptr);
  return value;
}
inline bool SimilarWork::has_work() const {
  return _internal_has_work();
}
inline void SimilarWork::clear_work() {
  if (work_ != nullptr) work_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::mead101::mead::Work& SimilarWork::_internal_work() const {
  const ::mead101::mead::Work* p = work_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::Work*>(
      &::mead101::mead::_Work_default_instance_);
}
inline const ::mead101::mead::Work& SimilarWork::work() const {
  // @@protoc_insertion_point(field_get:mead101.mead.SimilarWork.work)
  return _internal_work();
}
inline void SimilarWork::unsafe_arena_set_allocated_work(
    ::mead101::mead::Work* work) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(work_);
  }
  work_ = work;
  if (work) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.SimilarWork.work)
}
inline ::mead101::mead::Work* SimilarWork::release_work() {
  _has_bits_[0] &= ~0x00000001u;
  ::mead101::mead::Work* temp = work_;
  work_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::Work* SimilarWork::unsafe_arena_release_work() {
  // @@protoc_insertion_point(field_release:mead101.mead.SimilarWork.work)
  _has_bits_[0] &= ~0x00000001u;
  ::mead101::mead::Work* temp = work_;
  work_ = nullptr;
  return temp;
}
inline ::mead101::mead::Work* SimilarWork::_internal_mutable_work() {
  _has_bits_[0] |= 0x00000001u;
  if (work_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::Work>(GetArena());
    work_ = p;
  }
  return work_;
}
inline ::mead101::mead::Work* SimilarWork::mutable_work() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.SimilarWork.work)
  return _internal_mutable_work();
}
inline void SimilarWork::set_allocated_work(::mead101::mead::Work* work) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete work_;
  }
  if (work) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(work);
    if (message_arena != submessage_arena) {
      work = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, work, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  work_ = work;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.SimilarWork.work)
}

// -------------------------------------------------------------------

// Source

// repeated string any_attribute_value = 1;
inline int Source::_internal_any_attribute_value_size() const {
  return any_attribute_value_.size();
}
inline int Source::any_attribute_value_size() const {
  return _internal_any_attribute_value_size();
}
inline void Source::clear_any_attribute_value() {
  any_attribute_value_.Clear();
}
inline std::string* Source::add_any_attribute_value() {
  // @@protoc_insertion_point(field_add_mutable:mead101.mead.Source.any_attribute_value)
  return _internal_add_any_attribute_value();
}
inline const std::string& Source::_internal_any_attribute_value(int index) const {
  return any_attribute_value_.Get(index);
}
inline const std::string& Source::any_attribute_value(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.Source.any_attribute_value)
  return _internal_any_attribute_value(index);
}
inline std::string* Source::mutable_any_attribute_value(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Source.any_attribute_value)
  return any_attribute_value_.Mutable(index);
}
inline void Source::set_any_attribute_value(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:mead101.mead.Source.any_attribute_value)
  any_attribute_value_.Mutable(index)->assign(value);
}
inline void Source::set_any_attribute_value(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:mead101.mead.Source.any_attribute_value)
  any_attribute_value_.Mutable(index)->assign(std::move(value));
}
inline void Source::set_any_attribute_value(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  any_attribute_value_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mead101.mead.Source.any_attribute_value)
}
inline void Source::set_any_attribute_value(int index, const char* value, size_t size) {
  any_attribute_value_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.Source.any_attribute_value)
}
inline std::string* Source::_internal_add_any_attribute_value() {
  return any_attribute_value_.Add();
}
inline void Source::add_any_attribute_value(const std::string& value) {
  any_attribute_value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mead101.mead.Source.any_attribute_value)
}
inline void Source::add_any_attribute_value(std::string&& value) {
  any_attribute_value_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:mead101.mead.Source.any_attribute_value)
}
inline void Source::add_any_attribute_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  any_attribute_value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mead101.mead.Source.any_attribute_value)
}
inline void Source::add_any_attribute_value(const char* value, size_t size) {
  any_attribute_value_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mead101.mead.Source.any_attribute_value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Source::any_attribute_value() const {
  // @@protoc_insertion_point(field_list:mead101.mead.Source.any_attribute_value)
  return any_attribute_value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Source::mutable_any_attribute_value() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.Source.any_attribute_value)
  return &any_attribute_value_;
}

// repeated string any_value = 2;
inline int Source::_internal_any_value_size() const {
  return any_value_.size();
}
inline int Source::any_value_size() const {
  return _internal_any_value_size();
}
inline void Source::clear_any_value() {
  any_value_.Clear();
}
inline std::string* Source::add_any_value() {
  // @@protoc_insertion_point(field_add_mutable:mead101.mead.Source.any_value)
  return _internal_add_any_value();
}
inline const std::string& Source::_internal_any_value(int index) const {
  return any_value_.Get(index);
}
inline const std::string& Source::any_value(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.Source.any_value)
  return _internal_any_value(index);
}
inline std::string* Source::mutable_any_value(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Source.any_value)
  return any_value_.Mutable(index);
}
inline void Source::set_any_value(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:mead101.mead.Source.any_value)
  any_value_.Mutable(index)->assign(value);
}
inline void Source::set_any_value(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:mead101.mead.Source.any_value)
  any_value_.Mutable(index)->assign(std::move(value));
}
inline void Source::set_any_value(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  any_value_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mead101.mead.Source.any_value)
}
inline void Source::set_any_value(int index, const char* value, size_t size) {
  any_value_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.Source.any_value)
}
inline std::string* Source::_internal_add_any_value() {
  return any_value_.Add();
}
inline void Source::add_any_value(const std::string& value) {
  any_value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mead101.mead.Source.any_value)
}
inline void Source::add_any_value(std::string&& value) {
  any_value_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:mead101.mead.Source.any_value)
}
inline void Source::add_any_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  any_value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mead101.mead.Source.any_value)
}
inline void Source::add_any_value(const char* value, size_t size) {
  any_value_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mead101.mead.Source.any_value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Source::any_value() const {
  // @@protoc_insertion_point(field_list:mead101.mead.Source.any_value)
  return any_value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Source::mutable_any_value() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.Source.any_value)
  return &any_value_;
}

// repeated .mead101.mead.Person author = 3;
inline int Source::_internal_author_size() const {
  return author_.size();
}
inline int Source::author_size() const {
  return _internal_author_size();
}
inline void Source::clear_author() {
  author_.Clear();
}
inline ::mead101::mead::Person* Source::mutable_author(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Source.author)
  return author_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Person >*
Source::mutable_author() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.Source.author)
  return &author_;
}
inline const ::mead101::mead::Person& Source::_internal_author(int index) const {
  return author_.Get(index);
}
inline const ::mead101::mead::Person& Source::author(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.Source.author)
  return _internal_author(index);
}
inline ::mead101::mead::Person* Source::_internal_add_author() {
  return author_.Add();
}
inline ::mead101::mead::Person* Source::add_author() {
  // @@protoc_insertion_point(field_add:mead101.mead.Source.author)
  return _internal_add_author();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Person >&
Source::author() const {
  // @@protoc_insertion_point(field_list:mead101.mead.Source.author)
  return author_;
}

// repeated .mead101.mead.Category category = 4;
inline int Source::_internal_category_size() const {
  return category_.size();
}
inline int Source::category_size() const {
  return _internal_category_size();
}
inline void Source::clear_category() {
  category_.Clear();
}
inline ::mead101::mead::Category* Source::mutable_category(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Source.category)
  return category_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Category >*
Source::mutable_category() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.Source.category)
  return &category_;
}
inline const ::mead101::mead::Category& Source::_internal_category(int index) const {
  return category_.Get(index);
}
inline const ::mead101::mead::Category& Source::category(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.Source.category)
  return _internal_category(index);
}
inline ::mead101::mead::Category* Source::_internal_add_category() {
  return category_.Add();
}
inline ::mead101::mead::Category* Source::add_category() {
  // @@protoc_insertion_point(field_add:mead101.mead.Source.category)
  return _internal_add_category();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Category >&
Source::category() const {
  // @@protoc_insertion_point(field_list:mead101.mead.Source.category)
  return category_;
}

// repeated .mead101.mead.Person contributor = 5;
inline int Source::_internal_contributor_size() const {
  return contributor_.size();
}
inline int Source::contributor_size() const {
  return _internal_contributor_size();
}
inline void Source::clear_contributor() {
  contributor_.Clear();
}
inline ::mead101::mead::Person* Source::mutable_contributor(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Source.contributor)
  return contributor_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Person >*
Source::mutable_contributor() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.Source.contributor)
  return &contributor_;
}
inline const ::mead101::mead::Person& Source::_internal_contributor(int index) const {
  return contributor_.Get(index);
}
inline const ::mead101::mead::Person& Source::contributor(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.Source.contributor)
  return _internal_contributor(index);
}
inline ::mead101::mead::Person* Source::_internal_add_contributor() {
  return contributor_.Add();
}
inline ::mead101::mead::Person* Source::add_contributor() {
  // @@protoc_insertion_point(field_add:mead101.mead.Source.contributor)
  return _internal_add_contributor();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Person >&
Source::contributor() const {
  // @@protoc_insertion_point(field_list:mead101.mead.Source.contributor)
  return contributor_;
}

// optional .mead101.mead.Generator generator = 6;
inline bool Source::_internal_has_generator() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || generator_ != nullptr);
  return value;
}
inline bool Source::has_generator() const {
  return _internal_has_generator();
}
inline void Source::clear_generator() {
  if (generator_ != nullptr) generator_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::mead101::mead::Generator& Source::_internal_generator() const {
  const ::mead101::mead::Generator* p = generator_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::Generator*>(
      &::mead101::mead::_Generator_default_instance_);
}
inline const ::mead101::mead::Generator& Source::generator() const {
  // @@protoc_insertion_point(field_get:mead101.mead.Source.generator)
  return _internal_generator();
}
inline void Source::unsafe_arena_set_allocated_generator(
    ::mead101::mead::Generator* generator) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(generator_);
  }
  generator_ = generator;
  if (generator) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.Source.generator)
}
inline ::mead101::mead::Generator* Source::release_generator() {
  _has_bits_[0] &= ~0x00000001u;
  ::mead101::mead::Generator* temp = generator_;
  generator_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::Generator* Source::unsafe_arena_release_generator() {
  // @@protoc_insertion_point(field_release:mead101.mead.Source.generator)
  _has_bits_[0] &= ~0x00000001u;
  ::mead101::mead::Generator* temp = generator_;
  generator_ = nullptr;
  return temp;
}
inline ::mead101::mead::Generator* Source::_internal_mutable_generator() {
  _has_bits_[0] |= 0x00000001u;
  if (generator_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::Generator>(GetArena());
    generator_ = p;
  }
  return generator_;
}
inline ::mead101::mead::Generator* Source::mutable_generator() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Source.generator)
  return _internal_mutable_generator();
}
inline void Source::set_allocated_generator(::mead101::mead::Generator* generator) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete generator_;
  }
  if (generator) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(generator);
    if (message_arena != submessage_arena) {
      generator = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, generator, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  generator_ = generator;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.Source.generator)
}

// optional .mead101.mead.Icon icon = 7;
inline bool Source::_internal_has_icon() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || icon_ != nullptr);
  return value;
}
inline bool Source::has_icon() const {
  return _internal_has_icon();
}
inline void Source::clear_icon() {
  if (icon_ != nullptr) icon_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::mead101::mead::Icon& Source::_internal_icon() const {
  const ::mead101::mead::Icon* p = icon_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::Icon*>(
      &::mead101::mead::_Icon_default_instance_);
}
inline const ::mead101::mead::Icon& Source::icon() const {
  // @@protoc_insertion_point(field_get:mead101.mead.Source.icon)
  return _internal_icon();
}
inline void Source::unsafe_arena_set_allocated_icon(
    ::mead101::mead::Icon* icon) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(icon_);
  }
  icon_ = icon;
  if (icon) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.Source.icon)
}
inline ::mead101::mead::Icon* Source::release_icon() {
  _has_bits_[0] &= ~0x00000002u;
  ::mead101::mead::Icon* temp = icon_;
  icon_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::Icon* Source::unsafe_arena_release_icon() {
  // @@protoc_insertion_point(field_release:mead101.mead.Source.icon)
  _has_bits_[0] &= ~0x00000002u;
  ::mead101::mead::Icon* temp = icon_;
  icon_ = nullptr;
  return temp;
}
inline ::mead101::mead::Icon* Source::_internal_mutable_icon() {
  _has_bits_[0] |= 0x00000002u;
  if (icon_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::Icon>(GetArena());
    icon_ = p;
  }
  return icon_;
}
inline ::mead101::mead::Icon* Source::mutable_icon() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Source.icon)
  return _internal_mutable_icon();
}
inline void Source::set_allocated_icon(::mead101::mead::Icon* icon) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete icon_;
  }
  if (icon) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(icon);
    if (message_arena != submessage_arena) {
      icon = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, icon, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  icon_ = icon;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.Source.icon)
}

// optional .mead101.mead.Id id = 8;
inline bool Source::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || id_ != nullptr);
  return value;
}
inline bool Source::has_id() const {
  return _internal_has_id();
}
inline void Source::clear_id() {
  if (id_ != nullptr) id_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::mead101::mead::Id& Source::_internal_id() const {
  const ::mead101::mead::Id* p = id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::Id*>(
      &::mead101::mead::_Id_default_instance_);
}
inline const ::mead101::mead::Id& Source::id() const {
  // @@protoc_insertion_point(field_get:mead101.mead.Source.id)
  return _internal_id();
}
inline void Source::unsafe_arena_set_allocated_id(
    ::mead101::mead::Id* id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  id_ = id;
  if (id) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.Source.id)
}
inline ::mead101::mead::Id* Source::release_id() {
  _has_bits_[0] &= ~0x00000004u;
  ::mead101::mead::Id* temp = id_;
  id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::Id* Source::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_release:mead101.mead.Source.id)
  _has_bits_[0] &= ~0x00000004u;
  ::mead101::mead::Id* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::mead101::mead::Id* Source::_internal_mutable_id() {
  _has_bits_[0] |= 0x00000004u;
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::Id>(GetArena());
    id_ = p;
  }
  return id_;
}
inline ::mead101::mead::Id* Source::mutable_id() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Source.id)
  return _internal_mutable_id();
}
inline void Source::set_allocated_id(::mead101::mead::Id* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete id_;
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(id);
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.Source.id)
}

// repeated .mead101.mead.Link link = 9;
inline int Source::_internal_link_size() const {
  return link_.size();
}
inline int Source::link_size() const {
  return _internal_link_size();
}
inline void Source::clear_link() {
  link_.Clear();
}
inline ::mead101::mead::Link* Source::mutable_link(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Source.link)
  return link_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Link >*
Source::mutable_link() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.Source.link)
  return &link_;
}
inline const ::mead101::mead::Link& Source::_internal_link(int index) const {
  return link_.Get(index);
}
inline const ::mead101::mead::Link& Source::link(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.Source.link)
  return _internal_link(index);
}
inline ::mead101::mead::Link* Source::_internal_add_link() {
  return link_.Add();
}
inline ::mead101::mead::Link* Source::add_link() {
  // @@protoc_insertion_point(field_add:mead101.mead.Source.link)
  return _internal_add_link();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Link >&
Source::link() const {
  // @@protoc_insertion_point(field_list:mead101.mead.Source.link)
  return link_;
}

// optional .mead101.mead.Logo logo = 10;
inline bool Source::_internal_has_logo() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || logo_ != nullptr);
  return value;
}
inline bool Source::has_logo() const {
  return _internal_has_logo();
}
inline void Source::clear_logo() {
  if (logo_ != nullptr) logo_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::mead101::mead::Logo& Source::_internal_logo() const {
  const ::mead101::mead::Logo* p = logo_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::Logo*>(
      &::mead101::mead::_Logo_default_instance_);
}
inline const ::mead101::mead::Logo& Source::logo() const {
  // @@protoc_insertion_point(field_get:mead101.mead.Source.logo)
  return _internal_logo();
}
inline void Source::unsafe_arena_set_allocated_logo(
    ::mead101::mead::Logo* logo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(logo_);
  }
  logo_ = logo;
  if (logo) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.Source.logo)
}
inline ::mead101::mead::Logo* Source::release_logo() {
  _has_bits_[0] &= ~0x00000008u;
  ::mead101::mead::Logo* temp = logo_;
  logo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::Logo* Source::unsafe_arena_release_logo() {
  // @@protoc_insertion_point(field_release:mead101.mead.Source.logo)
  _has_bits_[0] &= ~0x00000008u;
  ::mead101::mead::Logo* temp = logo_;
  logo_ = nullptr;
  return temp;
}
inline ::mead101::mead::Logo* Source::_internal_mutable_logo() {
  _has_bits_[0] |= 0x00000008u;
  if (logo_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::Logo>(GetArena());
    logo_ = p;
  }
  return logo_;
}
inline ::mead101::mead::Logo* Source::mutable_logo() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Source.logo)
  return _internal_mutable_logo();
}
inline void Source::set_allocated_logo(::mead101::mead::Logo* logo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete logo_;
  }
  if (logo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(logo);
    if (message_arena != submessage_arena) {
      logo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, logo, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  logo_ = logo;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.Source.logo)
}

// optional .mead101.mead.Text rights = 11;
inline bool Source::_internal_has_rights() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || rights_ != nullptr);
  return value;
}
inline bool Source::has_rights() const {
  return _internal_has_rights();
}
inline void Source::clear_rights() {
  if (rights_ != nullptr) rights_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::mead101::mead::Text& Source::_internal_rights() const {
  const ::mead101::mead::Text* p = rights_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::Text*>(
      &::mead101::mead::_Text_default_instance_);
}
inline const ::mead101::mead::Text& Source::rights() const {
  // @@protoc_insertion_point(field_get:mead101.mead.Source.rights)
  return _internal_rights();
}
inline void Source::unsafe_arena_set_allocated_rights(
    ::mead101::mead::Text* rights) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rights_);
  }
  rights_ = rights;
  if (rights) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.Source.rights)
}
inline ::mead101::mead::Text* Source::release_rights() {
  _has_bits_[0] &= ~0x00000010u;
  ::mead101::mead::Text* temp = rights_;
  rights_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::Text* Source::unsafe_arena_release_rights() {
  // @@protoc_insertion_point(field_release:mead101.mead.Source.rights)
  _has_bits_[0] &= ~0x00000010u;
  ::mead101::mead::Text* temp = rights_;
  rights_ = nullptr;
  return temp;
}
inline ::mead101::mead::Text* Source::_internal_mutable_rights() {
  _has_bits_[0] |= 0x00000010u;
  if (rights_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::Text>(GetArena());
    rights_ = p;
  }
  return rights_;
}
inline ::mead101::mead::Text* Source::mutable_rights() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Source.rights)
  return _internal_mutable_rights();
}
inline void Source::set_allocated_rights(::mead101::mead::Text* rights) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete rights_;
  }
  if (rights) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(rights);
    if (message_arena != submessage_arena) {
      rights = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rights, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  rights_ = rights;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.Source.rights)
}

// optional .mead101.mead.Text subtitle = 12;
inline bool Source::_internal_has_subtitle() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || subtitle_ != nullptr);
  return value;
}
inline bool Source::has_subtitle() const {
  return _internal_has_subtitle();
}
inline void Source::clear_subtitle() {
  if (subtitle_ != nullptr) subtitle_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::mead101::mead::Text& Source::_internal_subtitle() const {
  const ::mead101::mead::Text* p = subtitle_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::Text*>(
      &::mead101::mead::_Text_default_instance_);
}
inline const ::mead101::mead::Text& Source::subtitle() const {
  // @@protoc_insertion_point(field_get:mead101.mead.Source.subtitle)
  return _internal_subtitle();
}
inline void Source::unsafe_arena_set_allocated_subtitle(
    ::mead101::mead::Text* subtitle) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(subtitle_);
  }
  subtitle_ = subtitle;
  if (subtitle) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.Source.subtitle)
}
inline ::mead101::mead::Text* Source::release_subtitle() {
  _has_bits_[0] &= ~0x00000020u;
  ::mead101::mead::Text* temp = subtitle_;
  subtitle_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::Text* Source::unsafe_arena_release_subtitle() {
  // @@protoc_insertion_point(field_release:mead101.mead.Source.subtitle)
  _has_bits_[0] &= ~0x00000020u;
  ::mead101::mead::Text* temp = subtitle_;
  subtitle_ = nullptr;
  return temp;
}
inline ::mead101::mead::Text* Source::_internal_mutable_subtitle() {
  _has_bits_[0] |= 0x00000020u;
  if (subtitle_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::Text>(GetArena());
    subtitle_ = p;
  }
  return subtitle_;
}
inline ::mead101::mead::Text* Source::mutable_subtitle() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Source.subtitle)
  return _internal_mutable_subtitle();
}
inline void Source::set_allocated_subtitle(::mead101::mead::Text* subtitle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete subtitle_;
  }
  if (subtitle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(subtitle);
    if (message_arena != submessage_arena) {
      subtitle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, subtitle, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  subtitle_ = subtitle;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.Source.subtitle)
}

// optional .mead101.mead.Text title = 13;
inline bool Source::_internal_has_title() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || title_ != nullptr);
  return value;
}
inline bool Source::has_title() const {
  return _internal_has_title();
}
inline void Source::clear_title() {
  if (title_ != nullptr) title_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::mead101::mead::Text& Source::_internal_title() const {
  const ::mead101::mead::Text* p = title_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::Text*>(
      &::mead101::mead::_Text_default_instance_);
}
inline const ::mead101::mead::Text& Source::title() const {
  // @@protoc_insertion_point(field_get:mead101.mead.Source.title)
  return _internal_title();
}
inline void Source::unsafe_arena_set_allocated_title(
    ::mead101::mead::Text* title) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(title_);
  }
  title_ = title;
  if (title) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.Source.title)
}
inline ::mead101::mead::Text* Source::release_title() {
  _has_bits_[0] &= ~0x00000040u;
  ::mead101::mead::Text* temp = title_;
  title_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::Text* Source::unsafe_arena_release_title() {
  // @@protoc_insertion_point(field_release:mead101.mead.Source.title)
  _has_bits_[0] &= ~0x00000040u;
  ::mead101::mead::Text* temp = title_;
  title_ = nullptr;
  return temp;
}
inline ::mead101::mead::Text* Source::_internal_mutable_title() {
  _has_bits_[0] |= 0x00000040u;
  if (title_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::Text>(GetArena());
    title_ = p;
  }
  return title_;
}
inline ::mead101::mead::Text* Source::mutable_title() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Source.title)
  return _internal_mutable_title();
}
inline void Source::set_allocated_title(::mead101::mead::Text* title) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete title_;
  }
  if (title) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(title);
    if (message_arena != submessage_arena) {
      title = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, title, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  title_ = title;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.Source.title)
}

// optional .mead101.mead.DateTime updated = 14;
inline bool Source::_internal_has_updated() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || updated_ != nullptr);
  return value;
}
inline bool Source::has_updated() const {
  return _internal_has_updated();
}
inline void Source::clear_updated() {
  if (updated_ != nullptr) updated_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
inline const ::mead101::mead::DateTime& Source::_internal_updated() const {
  const ::mead101::mead::DateTime* p = updated_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::DateTime*>(
      &::mead101::mead::_DateTime_default_instance_);
}
inline const ::mead101::mead::DateTime& Source::updated() const {
  // @@protoc_insertion_point(field_get:mead101.mead.Source.updated)
  return _internal_updated();
}
inline void Source::unsafe_arena_set_allocated_updated(
    ::mead101::mead::DateTime* updated) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_);
  }
  updated_ = updated;
  if (updated) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.Source.updated)
}
inline ::mead101::mead::DateTime* Source::release_updated() {
  _has_bits_[0] &= ~0x00000080u;
  ::mead101::mead::DateTime* temp = updated_;
  updated_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::DateTime* Source::unsafe_arena_release_updated() {
  // @@protoc_insertion_point(field_release:mead101.mead.Source.updated)
  _has_bits_[0] &= ~0x00000080u;
  ::mead101::mead::DateTime* temp = updated_;
  updated_ = nullptr;
  return temp;
}
inline ::mead101::mead::DateTime* Source::_internal_mutable_updated() {
  _has_bits_[0] |= 0x00000080u;
  if (updated_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::DateTime>(GetArena());
    updated_ = p;
  }
  return updated_;
}
inline ::mead101::mead::DateTime* Source::mutable_updated() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Source.updated)
  return _internal_mutable_updated();
}
inline void Source::set_allocated_updated(::mead101::mead::DateTime* updated) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete updated_;
  }
  if (updated) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(updated);
    if (message_arena != submessage_arena) {
      updated = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, updated, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  updated_ = updated;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.Source.updated)
}

// -------------------------------------------------------------------

// SubGenreCategory

// repeated string metadata_source_reference = 1;
inline int SubGenreCategory::_internal_metadata_source_reference_size() const {
  return metadata_source_reference_.size();
}
inline int SubGenreCategory::metadata_source_reference_size() const {
  return _internal_metadata_source_reference_size();
}
inline void SubGenreCategory::clear_metadata_source_reference() {
  metadata_source_reference_.Clear();
}
inline std::string* SubGenreCategory::add_metadata_source_reference() {
  // @@protoc_insertion_point(field_add_mutable:mead101.mead.SubGenreCategory.metadata_source_reference)
  return _internal_add_metadata_source_reference();
}
inline const std::string& SubGenreCategory::_internal_metadata_source_reference(int index) const {
  return metadata_source_reference_.Get(index);
}
inline const std::string& SubGenreCategory::metadata_source_reference(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.SubGenreCategory.metadata_source_reference)
  return _internal_metadata_source_reference(index);
}
inline std::string* SubGenreCategory::mutable_metadata_source_reference(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.SubGenreCategory.metadata_source_reference)
  return metadata_source_reference_.Mutable(index);
}
inline void SubGenreCategory::set_metadata_source_reference(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:mead101.mead.SubGenreCategory.metadata_source_reference)
  metadata_source_reference_.Mutable(index)->assign(value);
}
inline void SubGenreCategory::set_metadata_source_reference(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:mead101.mead.SubGenreCategory.metadata_source_reference)
  metadata_source_reference_.Mutable(index)->assign(std::move(value));
}
inline void SubGenreCategory::set_metadata_source_reference(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  metadata_source_reference_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mead101.mead.SubGenreCategory.metadata_source_reference)
}
inline void SubGenreCategory::set_metadata_source_reference(int index, const char* value, size_t size) {
  metadata_source_reference_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.SubGenreCategory.metadata_source_reference)
}
inline std::string* SubGenreCategory::_internal_add_metadata_source_reference() {
  return metadata_source_reference_.Add();
}
inline void SubGenreCategory::add_metadata_source_reference(const std::string& value) {
  metadata_source_reference_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mead101.mead.SubGenreCategory.metadata_source_reference)
}
inline void SubGenreCategory::add_metadata_source_reference(std::string&& value) {
  metadata_source_reference_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:mead101.mead.SubGenreCategory.metadata_source_reference)
}
inline void SubGenreCategory::add_metadata_source_reference(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  metadata_source_reference_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mead101.mead.SubGenreCategory.metadata_source_reference)
}
inline void SubGenreCategory::add_metadata_source_reference(const char* value, size_t size) {
  metadata_source_reference_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mead101.mead.SubGenreCategory.metadata_source_reference)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SubGenreCategory::metadata_source_reference() const {
  // @@protoc_insertion_point(field_list:mead101.mead.SubGenreCategory.metadata_source_reference)
  return metadata_source_reference_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SubGenreCategory::mutable_metadata_source_reference() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.SubGenreCategory.metadata_source_reference)
  return &metadata_source_reference_;
}

// repeated .mead101.mead.SubGenreCategoryValue value = 2;
inline int SubGenreCategory::_internal_value_size() const {
  return value_.size();
}
inline int SubGenreCategory::value_size() const {
  return _internal_value_size();
}
inline void SubGenreCategory::clear_value() {
  value_.Clear();
}
inline ::mead101::mead::SubGenreCategoryValue* SubGenreCategory::mutable_value(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.SubGenreCategory.value)
  return value_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::SubGenreCategoryValue >*
SubGenreCategory::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.SubGenreCategory.value)
  return &value_;
}
inline const ::mead101::mead::SubGenreCategoryValue& SubGenreCategory::_internal_value(int index) const {
  return value_.Get(index);
}
inline const ::mead101::mead::SubGenreCategoryValue& SubGenreCategory::value(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.SubGenreCategory.value)
  return _internal_value(index);
}
inline ::mead101::mead::SubGenreCategoryValue* SubGenreCategory::_internal_add_value() {
  return value_.Add();
}
inline ::mead101::mead::SubGenreCategoryValue* SubGenreCategory::add_value() {
  // @@protoc_insertion_point(field_add:mead101.mead.SubGenreCategory.value)
  return _internal_add_value();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::SubGenreCategoryValue >&
SubGenreCategory::value() const {
  // @@protoc_insertion_point(field_list:mead101.mead.SubGenreCategory.value)
  return value_;
}

// -------------------------------------------------------------------

// SubGenreCategoryValue

// optional string namespace = 1;
inline bool SubGenreCategoryValue::_internal_has_namespace_() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SubGenreCategoryValue::has_namespace_() const {
  return _internal_has_namespace_();
}
inline void SubGenreCategoryValue::clear_namespace_() {
  namespace__.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SubGenreCategoryValue::namespace_() const {
  // @@protoc_insertion_point(field_get:mead101.mead.SubGenreCategoryValue.namespace)
  return _internal_namespace_();
}
inline void SubGenreCategoryValue::set_namespace_(const std::string& value) {
  _internal_set_namespace_(value);
  // @@protoc_insertion_point(field_set:mead101.mead.SubGenreCategoryValue.namespace)
}
inline std::string* SubGenreCategoryValue::mutable_namespace_() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.SubGenreCategoryValue.namespace)
  return _internal_mutable_namespace_();
}
inline const std::string& SubGenreCategoryValue::_internal_namespace_() const {
  return namespace__.Get();
}
inline void SubGenreCategoryValue::_internal_set_namespace_(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SubGenreCategoryValue::set_namespace_(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  namespace__.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.SubGenreCategoryValue.namespace)
}
inline void SubGenreCategoryValue::set_namespace_(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.SubGenreCategoryValue.namespace)
}
inline void SubGenreCategoryValue::set_namespace_(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.SubGenreCategoryValue.namespace)
}
inline std::string* SubGenreCategoryValue::_internal_mutable_namespace_() {
  _has_bits_[0] |= 0x00000001u;
  return namespace__.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SubGenreCategoryValue::release_namespace_() {
  // @@protoc_insertion_point(field_release:mead101.mead.SubGenreCategoryValue.namespace)
  if (!_internal_has_namespace_()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return namespace__.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SubGenreCategoryValue::set_allocated_namespace_(std::string* namespace_) {
  if (namespace_ != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  namespace__.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), namespace_,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.SubGenreCategoryValue.namespace)
}

// optional string user_defined_value = 2;
inline bool SubGenreCategoryValue::_internal_has_user_defined_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SubGenreCategoryValue::has_user_defined_value() const {
  return _internal_has_user_defined_value();
}
inline void SubGenreCategoryValue::clear_user_defined_value() {
  user_defined_value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SubGenreCategoryValue::user_defined_value() const {
  // @@protoc_insertion_point(field_get:mead101.mead.SubGenreCategoryValue.user_defined_value)
  return _internal_user_defined_value();
}
inline void SubGenreCategoryValue::set_user_defined_value(const std::string& value) {
  _internal_set_user_defined_value(value);
  // @@protoc_insertion_point(field_set:mead101.mead.SubGenreCategoryValue.user_defined_value)
}
inline std::string* SubGenreCategoryValue::mutable_user_defined_value() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.SubGenreCategoryValue.user_defined_value)
  return _internal_mutable_user_defined_value();
}
inline const std::string& SubGenreCategoryValue::_internal_user_defined_value() const {
  return user_defined_value_.Get();
}
inline void SubGenreCategoryValue::_internal_set_user_defined_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SubGenreCategoryValue::set_user_defined_value(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  user_defined_value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.SubGenreCategoryValue.user_defined_value)
}
inline void SubGenreCategoryValue::set_user_defined_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.SubGenreCategoryValue.user_defined_value)
}
inline void SubGenreCategoryValue::set_user_defined_value(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.SubGenreCategoryValue.user_defined_value)
}
inline std::string* SubGenreCategoryValue::_internal_mutable_user_defined_value() {
  _has_bits_[0] |= 0x00000002u;
  return user_defined_value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SubGenreCategoryValue::release_user_defined_value() {
  // @@protoc_insertion_point(field_release:mead101.mead.SubGenreCategoryValue.user_defined_value)
  if (!_internal_has_user_defined_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return user_defined_value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SubGenreCategoryValue::set_allocated_user_defined_value(std::string* user_defined_value) {
  if (user_defined_value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  user_defined_value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_defined_value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.SubGenreCategoryValue.user_defined_value)
}

// optional .mead101.avs.SubGenre ext_value = 3;
inline bool SubGenreCategoryValue::_internal_has_ext_value() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || ext_value_ != nullptr);
  return value;
}
inline bool SubGenreCategoryValue::has_ext_value() const {
  return _internal_has_ext_value();
}
inline const ::mead101::avs::SubGenre& SubGenreCategoryValue::_internal_ext_value() const {
  const ::mead101::avs::SubGenre* p = ext_value_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::avs::SubGenre*>(
      &::mead101::avs::_SubGenre_default_instance_);
}
inline const ::mead101::avs::SubGenre& SubGenreCategoryValue::ext_value() const {
  // @@protoc_insertion_point(field_get:mead101.mead.SubGenreCategoryValue.ext_value)
  return _internal_ext_value();
}
inline void SubGenreCategoryValue::unsafe_arena_set_allocated_ext_value(
    ::mead101::avs::SubGenre* ext_value) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext_value_);
  }
  ext_value_ = ext_value;
  if (ext_value) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.SubGenreCategoryValue.ext_value)
}
inline ::mead101::avs::SubGenre* SubGenreCategoryValue::release_ext_value() {
  _has_bits_[0] &= ~0x00000004u;
  ::mead101::avs::SubGenre* temp = ext_value_;
  ext_value_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::avs::SubGenre* SubGenreCategoryValue::unsafe_arena_release_ext_value() {
  // @@protoc_insertion_point(field_release:mead101.mead.SubGenreCategoryValue.ext_value)
  _has_bits_[0] &= ~0x00000004u;
  ::mead101::avs::SubGenre* temp = ext_value_;
  ext_value_ = nullptr;
  return temp;
}
inline ::mead101::avs::SubGenre* SubGenreCategoryValue::_internal_mutable_ext_value() {
  _has_bits_[0] |= 0x00000004u;
  if (ext_value_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::avs::SubGenre>(GetArena());
    ext_value_ = p;
  }
  return ext_value_;
}
inline ::mead101::avs::SubGenre* SubGenreCategoryValue::mutable_ext_value() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.SubGenreCategoryValue.ext_value)
  return _internal_mutable_ext_value();
}
inline void SubGenreCategoryValue::set_allocated_ext_value(::mead101::avs::SubGenre* ext_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext_value_);
  }
  if (ext_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext_value)->GetArena();
    if (message_arena != submessage_arena) {
      ext_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext_value, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  ext_value_ = ext_value;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.SubGenreCategoryValue.ext_value)
}

// -------------------------------------------------------------------

// Tempo

// repeated string metadata_source_reference = 1;
inline int Tempo::_internal_metadata_source_reference_size() const {
  return metadata_source_reference_.size();
}
inline int Tempo::metadata_source_reference_size() const {
  return _internal_metadata_source_reference_size();
}
inline void Tempo::clear_metadata_source_reference() {
  metadata_source_reference_.Clear();
}
inline std::string* Tempo::add_metadata_source_reference() {
  // @@protoc_insertion_point(field_add_mutable:mead101.mead.Tempo.metadata_source_reference)
  return _internal_add_metadata_source_reference();
}
inline const std::string& Tempo::_internal_metadata_source_reference(int index) const {
  return metadata_source_reference_.Get(index);
}
inline const std::string& Tempo::metadata_source_reference(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.Tempo.metadata_source_reference)
  return _internal_metadata_source_reference(index);
}
inline std::string* Tempo::mutable_metadata_source_reference(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Tempo.metadata_source_reference)
  return metadata_source_reference_.Mutable(index);
}
inline void Tempo::set_metadata_source_reference(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:mead101.mead.Tempo.metadata_source_reference)
  metadata_source_reference_.Mutable(index)->assign(value);
}
inline void Tempo::set_metadata_source_reference(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:mead101.mead.Tempo.metadata_source_reference)
  metadata_source_reference_.Mutable(index)->assign(std::move(value));
}
inline void Tempo::set_metadata_source_reference(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  metadata_source_reference_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mead101.mead.Tempo.metadata_source_reference)
}
inline void Tempo::set_metadata_source_reference(int index, const char* value, size_t size) {
  metadata_source_reference_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.Tempo.metadata_source_reference)
}
inline std::string* Tempo::_internal_add_metadata_source_reference() {
  return metadata_source_reference_.Add();
}
inline void Tempo::add_metadata_source_reference(const std::string& value) {
  metadata_source_reference_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mead101.mead.Tempo.metadata_source_reference)
}
inline void Tempo::add_metadata_source_reference(std::string&& value) {
  metadata_source_reference_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:mead101.mead.Tempo.metadata_source_reference)
}
inline void Tempo::add_metadata_source_reference(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  metadata_source_reference_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mead101.mead.Tempo.metadata_source_reference)
}
inline void Tempo::add_metadata_source_reference(const char* value, size_t size) {
  metadata_source_reference_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mead101.mead.Tempo.metadata_source_reference)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Tempo::metadata_source_reference() const {
  // @@protoc_insertion_point(field_list:mead101.mead.Tempo.metadata_source_reference)
  return metadata_source_reference_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Tempo::mutable_metadata_source_reference() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.Tempo.metadata_source_reference)
  return &metadata_source_reference_;
}

// optional .mead101.mead.TempoValue value = 2;
inline bool Tempo::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || value_ != nullptr);
  return value;
}
inline bool Tempo::has_value() const {
  return _internal_has_value();
}
inline void Tempo::clear_value() {
  if (value_ != nullptr) value_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::mead101::mead::TempoValue& Tempo::_internal_value() const {
  const ::mead101::mead::TempoValue* p = value_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::TempoValue*>(
      &::mead101::mead::_TempoValue_default_instance_);
}
inline const ::mead101::mead::TempoValue& Tempo::value() const {
  // @@protoc_insertion_point(field_get:mead101.mead.Tempo.value)
  return _internal_value();
}
inline void Tempo::unsafe_arena_set_allocated_value(
    ::mead101::mead::TempoValue* value) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(value_);
  }
  value_ = value;
  if (value) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.Tempo.value)
}
inline ::mead101::mead::TempoValue* Tempo::release_value() {
  _has_bits_[0] &= ~0x00000001u;
  ::mead101::mead::TempoValue* temp = value_;
  value_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::TempoValue* Tempo::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_release:mead101.mead.Tempo.value)
  _has_bits_[0] &= ~0x00000001u;
  ::mead101::mead::TempoValue* temp = value_;
  value_ = nullptr;
  return temp;
}
inline ::mead101::mead::TempoValue* Tempo::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000001u;
  if (value_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::TempoValue>(GetArena());
    value_ = p;
  }
  return value_;
}
inline ::mead101::mead::TempoValue* Tempo::mutable_value() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Tempo.value)
  return _internal_mutable_value();
}
inline void Tempo::set_allocated_value(::mead101::mead::TempoValue* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete value_;
  }
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(value);
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.Tempo.value)
}

// -------------------------------------------------------------------

// TempoValue

// optional string namespace = 1;
inline bool TempoValue::_internal_has_namespace_() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TempoValue::has_namespace_() const {
  return _internal_has_namespace_();
}
inline void TempoValue::clear_namespace_() {
  namespace__.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TempoValue::namespace_() const {
  // @@protoc_insertion_point(field_get:mead101.mead.TempoValue.namespace)
  return _internal_namespace_();
}
inline void TempoValue::set_namespace_(const std::string& value) {
  _internal_set_namespace_(value);
  // @@protoc_insertion_point(field_set:mead101.mead.TempoValue.namespace)
}
inline std::string* TempoValue::mutable_namespace_() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.TempoValue.namespace)
  return _internal_mutable_namespace_();
}
inline const std::string& TempoValue::_internal_namespace_() const {
  return namespace__.Get();
}
inline void TempoValue::_internal_set_namespace_(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TempoValue::set_namespace_(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  namespace__.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.TempoValue.namespace)
}
inline void TempoValue::set_namespace_(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.TempoValue.namespace)
}
inline void TempoValue::set_namespace_(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.TempoValue.namespace)
}
inline std::string* TempoValue::_internal_mutable_namespace_() {
  _has_bits_[0] |= 0x00000001u;
  return namespace__.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TempoValue::release_namespace_() {
  // @@protoc_insertion_point(field_release:mead101.mead.TempoValue.namespace)
  if (!_internal_has_namespace_()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return namespace__.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TempoValue::set_allocated_namespace_(std::string* namespace_) {
  if (namespace_ != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  namespace__.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), namespace_,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.TempoValue.namespace)
}

// optional string user_defined_value = 2;
inline bool TempoValue::_internal_has_user_defined_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TempoValue::has_user_defined_value() const {
  return _internal_has_user_defined_value();
}
inline void TempoValue::clear_user_defined_value() {
  user_defined_value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TempoValue::user_defined_value() const {
  // @@protoc_insertion_point(field_get:mead101.mead.TempoValue.user_defined_value)
  return _internal_user_defined_value();
}
inline void TempoValue::set_user_defined_value(const std::string& value) {
  _internal_set_user_defined_value(value);
  // @@protoc_insertion_point(field_set:mead101.mead.TempoValue.user_defined_value)
}
inline std::string* TempoValue::mutable_user_defined_value() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.TempoValue.user_defined_value)
  return _internal_mutable_user_defined_value();
}
inline const std::string& TempoValue::_internal_user_defined_value() const {
  return user_defined_value_.Get();
}
inline void TempoValue::_internal_set_user_defined_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TempoValue::set_user_defined_value(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  user_defined_value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.TempoValue.user_defined_value)
}
inline void TempoValue::set_user_defined_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.TempoValue.user_defined_value)
}
inline void TempoValue::set_user_defined_value(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.TempoValue.user_defined_value)
}
inline std::string* TempoValue::_internal_mutable_user_defined_value() {
  _has_bits_[0] |= 0x00000002u;
  return user_defined_value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TempoValue::release_user_defined_value() {
  // @@protoc_insertion_point(field_release:mead101.mead.TempoValue.user_defined_value)
  if (!_internal_has_user_defined_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return user_defined_value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TempoValue::set_allocated_user_defined_value(std::string* user_defined_value) {
  if (user_defined_value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  user_defined_value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_defined_value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.TempoValue.user_defined_value)
}

// optional .mead101.avs.Tempo ext_value = 3;
inline bool TempoValue::_internal_has_ext_value() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || ext_value_ != nullptr);
  return value;
}
inline bool TempoValue::has_ext_value() const {
  return _internal_has_ext_value();
}
inline const ::mead101::avs::Tempo& TempoValue::_internal_ext_value() const {
  const ::mead101::avs::Tempo* p = ext_value_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::avs::Tempo*>(
      &::mead101::avs::_Tempo_default_instance_);
}
inline const ::mead101::avs::Tempo& TempoValue::ext_value() const {
  // @@protoc_insertion_point(field_get:mead101.mead.TempoValue.ext_value)
  return _internal_ext_value();
}
inline void TempoValue::unsafe_arena_set_allocated_ext_value(
    ::mead101::avs::Tempo* ext_value) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext_value_);
  }
  ext_value_ = ext_value;
  if (ext_value) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.TempoValue.ext_value)
}
inline ::mead101::avs::Tempo* TempoValue::release_ext_value() {
  _has_bits_[0] &= ~0x00000004u;
  ::mead101::avs::Tempo* temp = ext_value_;
  ext_value_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::avs::Tempo* TempoValue::unsafe_arena_release_ext_value() {
  // @@protoc_insertion_point(field_release:mead101.mead.TempoValue.ext_value)
  _has_bits_[0] &= ~0x00000004u;
  ::mead101::avs::Tempo* temp = ext_value_;
  ext_value_ = nullptr;
  return temp;
}
inline ::mead101::avs::Tempo* TempoValue::_internal_mutable_ext_value() {
  _has_bits_[0] |= 0x00000004u;
  if (ext_value_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::avs::Tempo>(GetArena());
    ext_value_ = p;
  }
  return ext_value_;
}
inline ::mead101::avs::Tempo* TempoValue::mutable_ext_value() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.TempoValue.ext_value)
  return _internal_mutable_ext_value();
}
inline void TempoValue::set_allocated_ext_value(::mead101::avs::Tempo* ext_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext_value_);
  }
  if (ext_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext_value)->GetArena();
    if (message_arena != submessage_arena) {
      ext_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext_value, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  ext_value_ = ext_value;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.TempoValue.ext_value)
}

// -------------------------------------------------------------------

// Text

// repeated string any_attribute_value = 1;
inline int Text::_internal_any_attribute_value_size() const {
  return any_attribute_value_.size();
}
inline int Text::any_attribute_value_size() const {
  return _internal_any_attribute_value_size();
}
inline void Text::clear_any_attribute_value() {
  any_attribute_value_.Clear();
}
inline std::string* Text::add_any_attribute_value() {
  // @@protoc_insertion_point(field_add_mutable:mead101.mead.Text.any_attribute_value)
  return _internal_add_any_attribute_value();
}
inline const std::string& Text::_internal_any_attribute_value(int index) const {
  return any_attribute_value_.Get(index);
}
inline const std::string& Text::any_attribute_value(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.Text.any_attribute_value)
  return _internal_any_attribute_value(index);
}
inline std::string* Text::mutable_any_attribute_value(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Text.any_attribute_value)
  return any_attribute_value_.Mutable(index);
}
inline void Text::set_any_attribute_value(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:mead101.mead.Text.any_attribute_value)
  any_attribute_value_.Mutable(index)->assign(value);
}
inline void Text::set_any_attribute_value(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:mead101.mead.Text.any_attribute_value)
  any_attribute_value_.Mutable(index)->assign(std::move(value));
}
inline void Text::set_any_attribute_value(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  any_attribute_value_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mead101.mead.Text.any_attribute_value)
}
inline void Text::set_any_attribute_value(int index, const char* value, size_t size) {
  any_attribute_value_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.Text.any_attribute_value)
}
inline std::string* Text::_internal_add_any_attribute_value() {
  return any_attribute_value_.Add();
}
inline void Text::add_any_attribute_value(const std::string& value) {
  any_attribute_value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mead101.mead.Text.any_attribute_value)
}
inline void Text::add_any_attribute_value(std::string&& value) {
  any_attribute_value_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:mead101.mead.Text.any_attribute_value)
}
inline void Text::add_any_attribute_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  any_attribute_value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mead101.mead.Text.any_attribute_value)
}
inline void Text::add_any_attribute_value(const char* value, size_t size) {
  any_attribute_value_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mead101.mead.Text.any_attribute_value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Text::any_attribute_value() const {
  // @@protoc_insertion_point(field_list:mead101.mead.Text.any_attribute_value)
  return any_attribute_value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Text::mutable_any_attribute_value() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.Text.any_attribute_value)
  return &any_attribute_value_;
}

// optional string any_value = 2;
inline bool Text::_internal_has_any_value() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Text::has_any_value() const {
  return _internal_has_any_value();
}
inline void Text::clear_any_value() {
  any_value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Text::any_value() const {
  // @@protoc_insertion_point(field_get:mead101.mead.Text.any_value)
  return _internal_any_value();
}
inline void Text::set_any_value(const std::string& value) {
  _internal_set_any_value(value);
  // @@protoc_insertion_point(field_set:mead101.mead.Text.any_value)
}
inline std::string* Text::mutable_any_value() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Text.any_value)
  return _internal_mutable_any_value();
}
inline const std::string& Text::_internal_any_value() const {
  return any_value_.Get();
}
inline void Text::_internal_set_any_value(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  any_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Text::set_any_value(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  any_value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.Text.any_value)
}
inline void Text::set_any_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  any_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.Text.any_value)
}
inline void Text::set_any_value(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  any_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.Text.any_value)
}
inline std::string* Text::_internal_mutable_any_value() {
  _has_bits_[0] |= 0x00000001u;
  return any_value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Text::release_any_value() {
  // @@protoc_insertion_point(field_release:mead101.mead.Text.any_value)
  if (!_internal_has_any_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return any_value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Text::set_allocated_any_value(std::string* any_value) {
  if (any_value != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  any_value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), any_value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.Text.any_value)
}

// optional .mead101.avs.TextType_ATOM type = 3;
inline bool Text::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || type_ != nullptr);
  return value;
}
inline bool Text::has_type() const {
  return _internal_has_type();
}
inline const ::mead101::avs::TextType_ATOM& Text::_internal_type() const {
  const ::mead101::avs::TextType_ATOM* p = type_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::avs::TextType_ATOM*>(
      &::mead101::avs::_TextType_ATOM_default_instance_);
}
inline const ::mead101::avs::TextType_ATOM& Text::type() const {
  // @@protoc_insertion_point(field_get:mead101.mead.Text.type)
  return _internal_type();
}
inline void Text::unsafe_arena_set_allocated_type(
    ::mead101::avs::TextType_ATOM* type) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(type_);
  }
  type_ = type;
  if (type) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.Text.type)
}
inline ::mead101::avs::TextType_ATOM* Text::release_type() {
  _has_bits_[0] &= ~0x00000002u;
  ::mead101::avs::TextType_ATOM* temp = type_;
  type_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::avs::TextType_ATOM* Text::unsafe_arena_release_type() {
  // @@protoc_insertion_point(field_release:mead101.mead.Text.type)
  _has_bits_[0] &= ~0x00000002u;
  ::mead101::avs::TextType_ATOM* temp = type_;
  type_ = nullptr;
  return temp;
}
inline ::mead101::avs::TextType_ATOM* Text::_internal_mutable_type() {
  _has_bits_[0] |= 0x00000002u;
  if (type_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::avs::TextType_ATOM>(GetArena());
    type_ = p;
  }
  return type_;
}
inline ::mead101::avs::TextType_ATOM* Text::mutable_type() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Text.type)
  return _internal_mutable_type();
}
inline void Text::set_allocated_type(::mead101::avs::TextType_ATOM* type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(type_);
  }
  if (type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(type)->GetArena();
    if (message_arena != submessage_arena) {
      type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, type, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  type_ = type;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.Text.type)
}

// -------------------------------------------------------------------

// TextWithFormat

// optional .mead101.avs.CurrentTerritoryCode applicable_territory_code = 1;
inline bool TextWithFormat::_internal_has_applicable_territory_code() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || applicable_territory_code_ != nullptr);
  return value;
}
inline bool TextWithFormat::has_applicable_territory_code() const {
  return _internal_has_applicable_territory_code();
}
inline const ::mead101::avs::CurrentTerritoryCode& TextWithFormat::_internal_applicable_territory_code() const {
  const ::mead101::avs::CurrentTerritoryCode* p = applicable_territory_code_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::avs::CurrentTerritoryCode*>(
      &::mead101::avs::_CurrentTerritoryCode_default_instance_);
}
inline const ::mead101::avs::CurrentTerritoryCode& TextWithFormat::applicable_territory_code() const {
  // @@protoc_insertion_point(field_get:mead101.mead.TextWithFormat.applicable_territory_code)
  return _internal_applicable_territory_code();
}
inline void TextWithFormat::unsafe_arena_set_allocated_applicable_territory_code(
    ::mead101::avs::CurrentTerritoryCode* applicable_territory_code) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(applicable_territory_code_);
  }
  applicable_territory_code_ = applicable_territory_code;
  if (applicable_territory_code) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.TextWithFormat.applicable_territory_code)
}
inline ::mead101::avs::CurrentTerritoryCode* TextWithFormat::release_applicable_territory_code() {
  _has_bits_[0] &= ~0x00000010u;
  ::mead101::avs::CurrentTerritoryCode* temp = applicable_territory_code_;
  applicable_territory_code_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::avs::CurrentTerritoryCode* TextWithFormat::unsafe_arena_release_applicable_territory_code() {
  // @@protoc_insertion_point(field_release:mead101.mead.TextWithFormat.applicable_territory_code)
  _has_bits_[0] &= ~0x00000010u;
  ::mead101::avs::CurrentTerritoryCode* temp = applicable_territory_code_;
  applicable_territory_code_ = nullptr;
  return temp;
}
inline ::mead101::avs::CurrentTerritoryCode* TextWithFormat::_internal_mutable_applicable_territory_code() {
  _has_bits_[0] |= 0x00000010u;
  if (applicable_territory_code_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::avs::CurrentTerritoryCode>(GetArena());
    applicable_territory_code_ = p;
  }
  return applicable_territory_code_;
}
inline ::mead101::avs::CurrentTerritoryCode* TextWithFormat::mutable_applicable_territory_code() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.TextWithFormat.applicable_territory_code)
  return _internal_mutable_applicable_territory_code();
}
inline void TextWithFormat::set_allocated_applicable_territory_code(::mead101::avs::CurrentTerritoryCode* applicable_territory_code) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(applicable_territory_code_);
  }
  if (applicable_territory_code) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(applicable_territory_code)->GetArena();
    if (message_arena != submessage_arena) {
      applicable_territory_code = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, applicable_territory_code, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  applicable_territory_code_ = applicable_territory_code;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.TextWithFormat.applicable_territory_code)
}

// optional .mead101.avs.TextCodecType format = 2;
inline bool TextWithFormat::_internal_has_format() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || format_ != nullptr);
  return value;
}
inline bool TextWithFormat::has_format() const {
  return _internal_has_format();
}
inline const ::mead101::avs::TextCodecType& TextWithFormat::_internal_format() const {
  const ::mead101::avs::TextCodecType* p = format_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::avs::TextCodecType*>(
      &::mead101::avs::_TextCodecType_default_instance_);
}
inline const ::mead101::avs::TextCodecType& TextWithFormat::format() const {
  // @@protoc_insertion_point(field_get:mead101.mead.TextWithFormat.format)
  return _internal_format();
}
inline void TextWithFormat::unsafe_arena_set_allocated_format(
    ::mead101::avs::TextCodecType* format) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(format_);
  }
  format_ = format;
  if (format) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.TextWithFormat.format)
}
inline ::mead101::avs::TextCodecType* TextWithFormat::release_format() {
  _has_bits_[0] &= ~0x00000020u;
  ::mead101::avs::TextCodecType* temp = format_;
  format_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::avs::TextCodecType* TextWithFormat::unsafe_arena_release_format() {
  // @@protoc_insertion_point(field_release:mead101.mead.TextWithFormat.format)
  _has_bits_[0] &= ~0x00000020u;
  ::mead101::avs::TextCodecType* temp = format_;
  format_ = nullptr;
  return temp;
}
inline ::mead101::avs::TextCodecType* TextWithFormat::_internal_mutable_format() {
  _has_bits_[0] |= 0x00000020u;
  if (format_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::avs::TextCodecType>(GetArena());
    format_ = p;
  }
  return format_;
}
inline ::mead101::avs::TextCodecType* TextWithFormat::mutable_format() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.TextWithFormat.format)
  return _internal_mutable_format();
}
inline void TextWithFormat::set_allocated_format(::mead101::avs::TextCodecType* format) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(format_);
  }
  if (format) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(format)->GetArena();
    if (message_arena != submessage_arena) {
      format = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, format, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  format_ = format;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.TextWithFormat.format)
}

// optional bool is_default = 3;
inline bool TextWithFormat::_internal_has_is_default() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool TextWithFormat::has_is_default() const {
  return _internal_has_is_default();
}
inline void TextWithFormat::clear_is_default() {
  is_default_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool TextWithFormat::_internal_is_default() const {
  return is_default_;
}
inline bool TextWithFormat::is_default() const {
  // @@protoc_insertion_point(field_get:mead101.mead.TextWithFormat.is_default)
  return _internal_is_default();
}
inline void TextWithFormat::_internal_set_is_default(bool value) {
  _has_bits_[0] |= 0x00000040u;
  is_default_ = value;
}
inline void TextWithFormat::set_is_default(bool value) {
  _internal_set_is_default(value);
  // @@protoc_insertion_point(field_set:mead101.mead.TextWithFormat.is_default)
}

// optional string language_and_script_code = 4;
inline bool TextWithFormat::_internal_has_language_and_script_code() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TextWithFormat::has_language_and_script_code() const {
  return _internal_has_language_and_script_code();
}
inline void TextWithFormat::clear_language_and_script_code() {
  language_and_script_code_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TextWithFormat::language_and_script_code() const {
  // @@protoc_insertion_point(field_get:mead101.mead.TextWithFormat.language_and_script_code)
  return _internal_language_and_script_code();
}
inline void TextWithFormat::set_language_and_script_code(const std::string& value) {
  _internal_set_language_and_script_code(value);
  // @@protoc_insertion_point(field_set:mead101.mead.TextWithFormat.language_and_script_code)
}
inline std::string* TextWithFormat::mutable_language_and_script_code() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.TextWithFormat.language_and_script_code)
  return _internal_mutable_language_and_script_code();
}
inline const std::string& TextWithFormat::_internal_language_and_script_code() const {
  return language_and_script_code_.Get();
}
inline void TextWithFormat::_internal_set_language_and_script_code(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  language_and_script_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TextWithFormat::set_language_and_script_code(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  language_and_script_code_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.TextWithFormat.language_and_script_code)
}
inline void TextWithFormat::set_language_and_script_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  language_and_script_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.TextWithFormat.language_and_script_code)
}
inline void TextWithFormat::set_language_and_script_code(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  language_and_script_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.TextWithFormat.language_and_script_code)
}
inline std::string* TextWithFormat::_internal_mutable_language_and_script_code() {
  _has_bits_[0] |= 0x00000001u;
  return language_and_script_code_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TextWithFormat::release_language_and_script_code() {
  // @@protoc_insertion_point(field_release:mead101.mead.TextWithFormat.language_and_script_code)
  if (!_internal_has_language_and_script_code()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return language_and_script_code_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TextWithFormat::set_allocated_language_and_script_code(std::string* language_and_script_code) {
  if (language_and_script_code != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  language_and_script_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), language_and_script_code,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.TextWithFormat.language_and_script_code)
}

// optional string namespace = 5;
inline bool TextWithFormat::_internal_has_namespace_() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TextWithFormat::has_namespace_() const {
  return _internal_has_namespace_();
}
inline void TextWithFormat::clear_namespace_() {
  namespace__.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TextWithFormat::namespace_() const {
  // @@protoc_insertion_point(field_get:mead101.mead.TextWithFormat.namespace)
  return _internal_namespace_();
}
inline void TextWithFormat::set_namespace_(const std::string& value) {
  _internal_set_namespace_(value);
  // @@protoc_insertion_point(field_set:mead101.mead.TextWithFormat.namespace)
}
inline std::string* TextWithFormat::mutable_namespace_() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.TextWithFormat.namespace)
  return _internal_mutable_namespace_();
}
inline const std::string& TextWithFormat::_internal_namespace_() const {
  return namespace__.Get();
}
inline void TextWithFormat::_internal_set_namespace_(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TextWithFormat::set_namespace_(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  namespace__.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.TextWithFormat.namespace)
}
inline void TextWithFormat::set_namespace_(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.TextWithFormat.namespace)
}
inline void TextWithFormat::set_namespace_(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.TextWithFormat.namespace)
}
inline std::string* TextWithFormat::_internal_mutable_namespace_() {
  _has_bits_[0] |= 0x00000002u;
  return namespace__.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TextWithFormat::release_namespace_() {
  // @@protoc_insertion_point(field_release:mead101.mead.TextWithFormat.namespace)
  if (!_internal_has_namespace_()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return namespace__.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TextWithFormat::set_allocated_namespace_(std::string* namespace_) {
  if (namespace_ != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  namespace__.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), namespace_,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.TextWithFormat.namespace)
}

// optional string user_defined_value = 6;
inline bool TextWithFormat::_internal_has_user_defined_value() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TextWithFormat::has_user_defined_value() const {
  return _internal_has_user_defined_value();
}
inline void TextWithFormat::clear_user_defined_value() {
  user_defined_value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& TextWithFormat::user_defined_value() const {
  // @@protoc_insertion_point(field_get:mead101.mead.TextWithFormat.user_defined_value)
  return _internal_user_defined_value();
}
inline void TextWithFormat::set_user_defined_value(const std::string& value) {
  _internal_set_user_defined_value(value);
  // @@protoc_insertion_point(field_set:mead101.mead.TextWithFormat.user_defined_value)
}
inline std::string* TextWithFormat::mutable_user_defined_value() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.TextWithFormat.user_defined_value)
  return _internal_mutable_user_defined_value();
}
inline const std::string& TextWithFormat::_internal_user_defined_value() const {
  return user_defined_value_.Get();
}
inline void TextWithFormat::_internal_set_user_defined_value(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TextWithFormat::set_user_defined_value(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  user_defined_value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.TextWithFormat.user_defined_value)
}
inline void TextWithFormat::set_user_defined_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.TextWithFormat.user_defined_value)
}
inline void TextWithFormat::set_user_defined_value(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.TextWithFormat.user_defined_value)
}
inline std::string* TextWithFormat::_internal_mutable_user_defined_value() {
  _has_bits_[0] |= 0x00000004u;
  return user_defined_value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TextWithFormat::release_user_defined_value() {
  // @@protoc_insertion_point(field_release:mead101.mead.TextWithFormat.user_defined_value)
  if (!_internal_has_user_defined_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return user_defined_value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TextWithFormat::set_allocated_user_defined_value(std::string* user_defined_value) {
  if (user_defined_value != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  user_defined_value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_defined_value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.TextWithFormat.user_defined_value)
}

// optional string ext_value = 7;
inline bool TextWithFormat::_internal_has_ext_value() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TextWithFormat::has_ext_value() const {
  return _internal_has_ext_value();
}
inline void TextWithFormat::clear_ext_value() {
  ext_value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& TextWithFormat::ext_value() const {
  // @@protoc_insertion_point(field_get:mead101.mead.TextWithFormat.ext_value)
  return _internal_ext_value();
}
inline void TextWithFormat::set_ext_value(const std::string& value) {
  _internal_set_ext_value(value);
  // @@protoc_insertion_point(field_set:mead101.mead.TextWithFormat.ext_value)
}
inline std::string* TextWithFormat::mutable_ext_value() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.TextWithFormat.ext_value)
  return _internal_mutable_ext_value();
}
inline const std::string& TextWithFormat::_internal_ext_value() const {
  return ext_value_.Get();
}
inline void TextWithFormat::_internal_set_ext_value(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  ext_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TextWithFormat::set_ext_value(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  ext_value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.TextWithFormat.ext_value)
}
inline void TextWithFormat::set_ext_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  ext_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.TextWithFormat.ext_value)
}
inline void TextWithFormat::set_ext_value(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  ext_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.TextWithFormat.ext_value)
}
inline std::string* TextWithFormat::_internal_mutable_ext_value() {
  _has_bits_[0] |= 0x00000008u;
  return ext_value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TextWithFormat::release_ext_value() {
  // @@protoc_insertion_point(field_release:mead101.mead.TextWithFormat.ext_value)
  if (!_internal_has_ext_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return ext_value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TextWithFormat::set_allocated_ext_value(std::string* ext_value) {
  if (ext_value != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  ext_value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ext_value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.TextWithFormat.ext_value)
}

// -------------------------------------------------------------------

// TextWithoutTerritory

// optional .mead101.avs.CurrentTerritoryCode applicable_territory_code = 1;
inline bool TextWithoutTerritory::_internal_has_applicable_territory_code() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || applicable_territory_code_ != nullptr);
  return value;
}
inline bool TextWithoutTerritory::has_applicable_territory_code() const {
  return _internal_has_applicable_territory_code();
}
inline const ::mead101::avs::CurrentTerritoryCode& TextWithoutTerritory::_internal_applicable_territory_code() const {
  const ::mead101::avs::CurrentTerritoryCode* p = applicable_territory_code_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::avs::CurrentTerritoryCode*>(
      &::mead101::avs::_CurrentTerritoryCode_default_instance_);
}
inline const ::mead101::avs::CurrentTerritoryCode& TextWithoutTerritory::applicable_territory_code() const {
  // @@protoc_insertion_point(field_get:mead101.mead.TextWithoutTerritory.applicable_territory_code)
  return _internal_applicable_territory_code();
}
inline void TextWithoutTerritory::unsafe_arena_set_allocated_applicable_territory_code(
    ::mead101::avs::CurrentTerritoryCode* applicable_territory_code) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(applicable_territory_code_);
  }
  applicable_territory_code_ = applicable_territory_code;
  if (applicable_territory_code) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.TextWithoutTerritory.applicable_territory_code)
}
inline ::mead101::avs::CurrentTerritoryCode* TextWithoutTerritory::release_applicable_territory_code() {
  _has_bits_[0] &= ~0x00000010u;
  ::mead101::avs::CurrentTerritoryCode* temp = applicable_territory_code_;
  applicable_territory_code_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::avs::CurrentTerritoryCode* TextWithoutTerritory::unsafe_arena_release_applicable_territory_code() {
  // @@protoc_insertion_point(field_release:mead101.mead.TextWithoutTerritory.applicable_territory_code)
  _has_bits_[0] &= ~0x00000010u;
  ::mead101::avs::CurrentTerritoryCode* temp = applicable_territory_code_;
  applicable_territory_code_ = nullptr;
  return temp;
}
inline ::mead101::avs::CurrentTerritoryCode* TextWithoutTerritory::_internal_mutable_applicable_territory_code() {
  _has_bits_[0] |= 0x00000010u;
  if (applicable_territory_code_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::avs::CurrentTerritoryCode>(GetArena());
    applicable_territory_code_ = p;
  }
  return applicable_territory_code_;
}
inline ::mead101::avs::CurrentTerritoryCode* TextWithoutTerritory::mutable_applicable_territory_code() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.TextWithoutTerritory.applicable_territory_code)
  return _internal_mutable_applicable_territory_code();
}
inline void TextWithoutTerritory::set_allocated_applicable_territory_code(::mead101::avs::CurrentTerritoryCode* applicable_territory_code) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(applicable_territory_code_);
  }
  if (applicable_territory_code) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(applicable_territory_code)->GetArena();
    if (message_arena != submessage_arena) {
      applicable_territory_code = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, applicable_territory_code, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  applicable_territory_code_ = applicable_territory_code;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.TextWithoutTerritory.applicable_territory_code)
}

// optional .mead101.avs.TextCodecType format = 2;
inline bool TextWithoutTerritory::_internal_has_format() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || format_ != nullptr);
  return value;
}
inline bool TextWithoutTerritory::has_format() const {
  return _internal_has_format();
}
inline const ::mead101::avs::TextCodecType& TextWithoutTerritory::_internal_format() const {
  const ::mead101::avs::TextCodecType* p = format_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::avs::TextCodecType*>(
      &::mead101::avs::_TextCodecType_default_instance_);
}
inline const ::mead101::avs::TextCodecType& TextWithoutTerritory::format() const {
  // @@protoc_insertion_point(field_get:mead101.mead.TextWithoutTerritory.format)
  return _internal_format();
}
inline void TextWithoutTerritory::unsafe_arena_set_allocated_format(
    ::mead101::avs::TextCodecType* format) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(format_);
  }
  format_ = format;
  if (format) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.TextWithoutTerritory.format)
}
inline ::mead101::avs::TextCodecType* TextWithoutTerritory::release_format() {
  _has_bits_[0] &= ~0x00000020u;
  ::mead101::avs::TextCodecType* temp = format_;
  format_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::avs::TextCodecType* TextWithoutTerritory::unsafe_arena_release_format() {
  // @@protoc_insertion_point(field_release:mead101.mead.TextWithoutTerritory.format)
  _has_bits_[0] &= ~0x00000020u;
  ::mead101::avs::TextCodecType* temp = format_;
  format_ = nullptr;
  return temp;
}
inline ::mead101::avs::TextCodecType* TextWithoutTerritory::_internal_mutable_format() {
  _has_bits_[0] |= 0x00000020u;
  if (format_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::avs::TextCodecType>(GetArena());
    format_ = p;
  }
  return format_;
}
inline ::mead101::avs::TextCodecType* TextWithoutTerritory::mutable_format() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.TextWithoutTerritory.format)
  return _internal_mutable_format();
}
inline void TextWithoutTerritory::set_allocated_format(::mead101::avs::TextCodecType* format) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(format_);
  }
  if (format) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(format)->GetArena();
    if (message_arena != submessage_arena) {
      format = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, format, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  format_ = format;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.TextWithoutTerritory.format)
}

// optional bool is_default = 3;
inline bool TextWithoutTerritory::_internal_has_is_default() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool TextWithoutTerritory::has_is_default() const {
  return _internal_has_is_default();
}
inline void TextWithoutTerritory::clear_is_default() {
  is_default_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool TextWithoutTerritory::_internal_is_default() const {
  return is_default_;
}
inline bool TextWithoutTerritory::is_default() const {
  // @@protoc_insertion_point(field_get:mead101.mead.TextWithoutTerritory.is_default)
  return _internal_is_default();
}
inline void TextWithoutTerritory::_internal_set_is_default(bool value) {
  _has_bits_[0] |= 0x00000040u;
  is_default_ = value;
}
inline void TextWithoutTerritory::set_is_default(bool value) {
  _internal_set_is_default(value);
  // @@protoc_insertion_point(field_set:mead101.mead.TextWithoutTerritory.is_default)
}

// optional string language_and_script_code = 4;
inline bool TextWithoutTerritory::_internal_has_language_and_script_code() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TextWithoutTerritory::has_language_and_script_code() const {
  return _internal_has_language_and_script_code();
}
inline void TextWithoutTerritory::clear_language_and_script_code() {
  language_and_script_code_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TextWithoutTerritory::language_and_script_code() const {
  // @@protoc_insertion_point(field_get:mead101.mead.TextWithoutTerritory.language_and_script_code)
  return _internal_language_and_script_code();
}
inline void TextWithoutTerritory::set_language_and_script_code(const std::string& value) {
  _internal_set_language_and_script_code(value);
  // @@protoc_insertion_point(field_set:mead101.mead.TextWithoutTerritory.language_and_script_code)
}
inline std::string* TextWithoutTerritory::mutable_language_and_script_code() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.TextWithoutTerritory.language_and_script_code)
  return _internal_mutable_language_and_script_code();
}
inline const std::string& TextWithoutTerritory::_internal_language_and_script_code() const {
  return language_and_script_code_.Get();
}
inline void TextWithoutTerritory::_internal_set_language_and_script_code(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  language_and_script_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TextWithoutTerritory::set_language_and_script_code(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  language_and_script_code_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.TextWithoutTerritory.language_and_script_code)
}
inline void TextWithoutTerritory::set_language_and_script_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  language_and_script_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.TextWithoutTerritory.language_and_script_code)
}
inline void TextWithoutTerritory::set_language_and_script_code(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  language_and_script_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.TextWithoutTerritory.language_and_script_code)
}
inline std::string* TextWithoutTerritory::_internal_mutable_language_and_script_code() {
  _has_bits_[0] |= 0x00000001u;
  return language_and_script_code_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TextWithoutTerritory::release_language_and_script_code() {
  // @@protoc_insertion_point(field_release:mead101.mead.TextWithoutTerritory.language_and_script_code)
  if (!_internal_has_language_and_script_code()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return language_and_script_code_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TextWithoutTerritory::set_allocated_language_and_script_code(std::string* language_and_script_code) {
  if (language_and_script_code != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  language_and_script_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), language_and_script_code,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.TextWithoutTerritory.language_and_script_code)
}

// optional string namespace = 5;
inline bool TextWithoutTerritory::_internal_has_namespace_() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TextWithoutTerritory::has_namespace_() const {
  return _internal_has_namespace_();
}
inline void TextWithoutTerritory::clear_namespace_() {
  namespace__.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TextWithoutTerritory::namespace_() const {
  // @@protoc_insertion_point(field_get:mead101.mead.TextWithoutTerritory.namespace)
  return _internal_namespace_();
}
inline void TextWithoutTerritory::set_namespace_(const std::string& value) {
  _internal_set_namespace_(value);
  // @@protoc_insertion_point(field_set:mead101.mead.TextWithoutTerritory.namespace)
}
inline std::string* TextWithoutTerritory::mutable_namespace_() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.TextWithoutTerritory.namespace)
  return _internal_mutable_namespace_();
}
inline const std::string& TextWithoutTerritory::_internal_namespace_() const {
  return namespace__.Get();
}
inline void TextWithoutTerritory::_internal_set_namespace_(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TextWithoutTerritory::set_namespace_(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  namespace__.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.TextWithoutTerritory.namespace)
}
inline void TextWithoutTerritory::set_namespace_(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.TextWithoutTerritory.namespace)
}
inline void TextWithoutTerritory::set_namespace_(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.TextWithoutTerritory.namespace)
}
inline std::string* TextWithoutTerritory::_internal_mutable_namespace_() {
  _has_bits_[0] |= 0x00000002u;
  return namespace__.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TextWithoutTerritory::release_namespace_() {
  // @@protoc_insertion_point(field_release:mead101.mead.TextWithoutTerritory.namespace)
  if (!_internal_has_namespace_()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return namespace__.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TextWithoutTerritory::set_allocated_namespace_(std::string* namespace_) {
  if (namespace_ != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  namespace__.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), namespace_,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.TextWithoutTerritory.namespace)
}

// optional string user_defined_value = 6;
inline bool TextWithoutTerritory::_internal_has_user_defined_value() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TextWithoutTerritory::has_user_defined_value() const {
  return _internal_has_user_defined_value();
}
inline void TextWithoutTerritory::clear_user_defined_value() {
  user_defined_value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& TextWithoutTerritory::user_defined_value() const {
  // @@protoc_insertion_point(field_get:mead101.mead.TextWithoutTerritory.user_defined_value)
  return _internal_user_defined_value();
}
inline void TextWithoutTerritory::set_user_defined_value(const std::string& value) {
  _internal_set_user_defined_value(value);
  // @@protoc_insertion_point(field_set:mead101.mead.TextWithoutTerritory.user_defined_value)
}
inline std::string* TextWithoutTerritory::mutable_user_defined_value() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.TextWithoutTerritory.user_defined_value)
  return _internal_mutable_user_defined_value();
}
inline const std::string& TextWithoutTerritory::_internal_user_defined_value() const {
  return user_defined_value_.Get();
}
inline void TextWithoutTerritory::_internal_set_user_defined_value(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TextWithoutTerritory::set_user_defined_value(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  user_defined_value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.TextWithoutTerritory.user_defined_value)
}
inline void TextWithoutTerritory::set_user_defined_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.TextWithoutTerritory.user_defined_value)
}
inline void TextWithoutTerritory::set_user_defined_value(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.TextWithoutTerritory.user_defined_value)
}
inline std::string* TextWithoutTerritory::_internal_mutable_user_defined_value() {
  _has_bits_[0] |= 0x00000004u;
  return user_defined_value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TextWithoutTerritory::release_user_defined_value() {
  // @@protoc_insertion_point(field_release:mead101.mead.TextWithoutTerritory.user_defined_value)
  if (!_internal_has_user_defined_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return user_defined_value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TextWithoutTerritory::set_allocated_user_defined_value(std::string* user_defined_value) {
  if (user_defined_value != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  user_defined_value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_defined_value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.TextWithoutTerritory.user_defined_value)
}

// optional string ext_value = 7;
inline bool TextWithoutTerritory::_internal_has_ext_value() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TextWithoutTerritory::has_ext_value() const {
  return _internal_has_ext_value();
}
inline void TextWithoutTerritory::clear_ext_value() {
  ext_value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& TextWithoutTerritory::ext_value() const {
  // @@protoc_insertion_point(field_get:mead101.mead.TextWithoutTerritory.ext_value)
  return _internal_ext_value();
}
inline void TextWithoutTerritory::set_ext_value(const std::string& value) {
  _internal_set_ext_value(value);
  // @@protoc_insertion_point(field_set:mead101.mead.TextWithoutTerritory.ext_value)
}
inline std::string* TextWithoutTerritory::mutable_ext_value() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.TextWithoutTerritory.ext_value)
  return _internal_mutable_ext_value();
}
inline const std::string& TextWithoutTerritory::_internal_ext_value() const {
  return ext_value_.Get();
}
inline void TextWithoutTerritory::_internal_set_ext_value(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  ext_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TextWithoutTerritory::set_ext_value(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  ext_value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.TextWithoutTerritory.ext_value)
}
inline void TextWithoutTerritory::set_ext_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  ext_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.TextWithoutTerritory.ext_value)
}
inline void TextWithoutTerritory::set_ext_value(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  ext_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.TextWithoutTerritory.ext_value)
}
inline std::string* TextWithoutTerritory::_internal_mutable_ext_value() {
  _has_bits_[0] |= 0x00000008u;
  return ext_value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TextWithoutTerritory::release_ext_value() {
  // @@protoc_insertion_point(field_release:mead101.mead.TextWithoutTerritory.ext_value)
  if (!_internal_has_ext_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return ext_value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TextWithoutTerritory::set_allocated_ext_value(std::string* ext_value) {
  if (ext_value != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  ext_value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ext_value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.TextWithoutTerritory.ext_value)
}

// -------------------------------------------------------------------

// Theme

// optional .mead101.avs.CurrentTerritoryCode applicable_territory_code = 1;
inline bool Theme::_internal_has_applicable_territory_code() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || applicable_territory_code_ != nullptr);
  return value;
}
inline bool Theme::has_applicable_territory_code() const {
  return _internal_has_applicable_territory_code();
}
inline const ::mead101::avs::CurrentTerritoryCode& Theme::_internal_applicable_territory_code() const {
  const ::mead101::avs::CurrentTerritoryCode* p = applicable_territory_code_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::avs::CurrentTerritoryCode*>(
      &::mead101::avs::_CurrentTerritoryCode_default_instance_);
}
inline const ::mead101::avs::CurrentTerritoryCode& Theme::applicable_territory_code() const {
  // @@protoc_insertion_point(field_get:mead101.mead.Theme.applicable_territory_code)
  return _internal_applicable_territory_code();
}
inline void Theme::unsafe_arena_set_allocated_applicable_territory_code(
    ::mead101::avs::CurrentTerritoryCode* applicable_territory_code) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(applicable_territory_code_);
  }
  applicable_territory_code_ = applicable_territory_code;
  if (applicable_territory_code) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.Theme.applicable_territory_code)
}
inline ::mead101::avs::CurrentTerritoryCode* Theme::release_applicable_territory_code() {
  _has_bits_[0] &= ~0x00000001u;
  ::mead101::avs::CurrentTerritoryCode* temp = applicable_territory_code_;
  applicable_territory_code_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::avs::CurrentTerritoryCode* Theme::unsafe_arena_release_applicable_territory_code() {
  // @@protoc_insertion_point(field_release:mead101.mead.Theme.applicable_territory_code)
  _has_bits_[0] &= ~0x00000001u;
  ::mead101::avs::CurrentTerritoryCode* temp = applicable_territory_code_;
  applicable_territory_code_ = nullptr;
  return temp;
}
inline ::mead101::avs::CurrentTerritoryCode* Theme::_internal_mutable_applicable_territory_code() {
  _has_bits_[0] |= 0x00000001u;
  if (applicable_territory_code_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::avs::CurrentTerritoryCode>(GetArena());
    applicable_territory_code_ = p;
  }
  return applicable_territory_code_;
}
inline ::mead101::avs::CurrentTerritoryCode* Theme::mutable_applicable_territory_code() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Theme.applicable_territory_code)
  return _internal_mutable_applicable_territory_code();
}
inline void Theme::set_allocated_applicable_territory_code(::mead101::avs::CurrentTerritoryCode* applicable_territory_code) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(applicable_territory_code_);
  }
  if (applicable_territory_code) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(applicable_territory_code)->GetArena();
    if (message_arena != submessage_arena) {
      applicable_territory_code = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, applicable_territory_code, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  applicable_territory_code_ = applicable_territory_code;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.Theme.applicable_territory_code)
}

// repeated .mead101.mead.TextWithoutTerritory description = 2;
inline int Theme::_internal_description_size() const {
  return description_.size();
}
inline int Theme::description_size() const {
  return _internal_description_size();
}
inline void Theme::clear_description() {
  description_.Clear();
}
inline ::mead101::mead::TextWithoutTerritory* Theme::mutable_description(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Theme.description)
  return description_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::TextWithoutTerritory >*
Theme::mutable_description() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.Theme.description)
  return &description_;
}
inline const ::mead101::mead::TextWithoutTerritory& Theme::_internal_description(int index) const {
  return description_.Get(index);
}
inline const ::mead101::mead::TextWithoutTerritory& Theme::description(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.Theme.description)
  return _internal_description(index);
}
inline ::mead101::mead::TextWithoutTerritory* Theme::_internal_add_description() {
  return description_.Add();
}
inline ::mead101::mead::TextWithoutTerritory* Theme::add_description() {
  // @@protoc_insertion_point(field_add:mead101.mead.Theme.description)
  return _internal_add_description();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::TextWithoutTerritory >&
Theme::description() const {
  // @@protoc_insertion_point(field_list:mead101.mead.Theme.description)
  return description_;
}

// repeated string metadata_source_reference = 3;
inline int Theme::_internal_metadata_source_reference_size() const {
  return metadata_source_reference_.size();
}
inline int Theme::metadata_source_reference_size() const {
  return _internal_metadata_source_reference_size();
}
inline void Theme::clear_metadata_source_reference() {
  metadata_source_reference_.Clear();
}
inline std::string* Theme::add_metadata_source_reference() {
  // @@protoc_insertion_point(field_add_mutable:mead101.mead.Theme.metadata_source_reference)
  return _internal_add_metadata_source_reference();
}
inline const std::string& Theme::_internal_metadata_source_reference(int index) const {
  return metadata_source_reference_.Get(index);
}
inline const std::string& Theme::metadata_source_reference(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.Theme.metadata_source_reference)
  return _internal_metadata_source_reference(index);
}
inline std::string* Theme::mutable_metadata_source_reference(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Theme.metadata_source_reference)
  return metadata_source_reference_.Mutable(index);
}
inline void Theme::set_metadata_source_reference(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:mead101.mead.Theme.metadata_source_reference)
  metadata_source_reference_.Mutable(index)->assign(value);
}
inline void Theme::set_metadata_source_reference(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:mead101.mead.Theme.metadata_source_reference)
  metadata_source_reference_.Mutable(index)->assign(std::move(value));
}
inline void Theme::set_metadata_source_reference(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  metadata_source_reference_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mead101.mead.Theme.metadata_source_reference)
}
inline void Theme::set_metadata_source_reference(int index, const char* value, size_t size) {
  metadata_source_reference_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.Theme.metadata_source_reference)
}
inline std::string* Theme::_internal_add_metadata_source_reference() {
  return metadata_source_reference_.Add();
}
inline void Theme::add_metadata_source_reference(const std::string& value) {
  metadata_source_reference_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mead101.mead.Theme.metadata_source_reference)
}
inline void Theme::add_metadata_source_reference(std::string&& value) {
  metadata_source_reference_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:mead101.mead.Theme.metadata_source_reference)
}
inline void Theme::add_metadata_source_reference(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  metadata_source_reference_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mead101.mead.Theme.metadata_source_reference)
}
inline void Theme::add_metadata_source_reference(const char* value, size_t size) {
  metadata_source_reference_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mead101.mead.Theme.metadata_source_reference)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Theme::metadata_source_reference() const {
  // @@protoc_insertion_point(field_list:mead101.mead.Theme.metadata_source_reference)
  return metadata_source_reference_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Theme::mutable_metadata_source_reference() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.Theme.metadata_source_reference)
  return &metadata_source_reference_;
}

// optional .mead101.mead.ThemeValue value = 4;
inline bool Theme::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || value_ != nullptr);
  return value;
}
inline bool Theme::has_value() const {
  return _internal_has_value();
}
inline void Theme::clear_value() {
  if (value_ != nullptr) value_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::mead101::mead::ThemeValue& Theme::_internal_value() const {
  const ::mead101::mead::ThemeValue* p = value_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::ThemeValue*>(
      &::mead101::mead::_ThemeValue_default_instance_);
}
inline const ::mead101::mead::ThemeValue& Theme::value() const {
  // @@protoc_insertion_point(field_get:mead101.mead.Theme.value)
  return _internal_value();
}
inline void Theme::unsafe_arena_set_allocated_value(
    ::mead101::mead::ThemeValue* value) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(value_);
  }
  value_ = value;
  if (value) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.Theme.value)
}
inline ::mead101::mead::ThemeValue* Theme::release_value() {
  _has_bits_[0] &= ~0x00000002u;
  ::mead101::mead::ThemeValue* temp = value_;
  value_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::ThemeValue* Theme::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_release:mead101.mead.Theme.value)
  _has_bits_[0] &= ~0x00000002u;
  ::mead101::mead::ThemeValue* temp = value_;
  value_ = nullptr;
  return temp;
}
inline ::mead101::mead::ThemeValue* Theme::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000002u;
  if (value_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::ThemeValue>(GetArena());
    value_ = p;
  }
  return value_;
}
inline ::mead101::mead::ThemeValue* Theme::mutable_value() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Theme.value)
  return _internal_mutable_value();
}
inline void Theme::set_allocated_value(::mead101::mead::ThemeValue* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete value_;
  }
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(value);
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.Theme.value)
}

// -------------------------------------------------------------------

// ThemeValue

// optional string namespace = 1;
inline bool ThemeValue::_internal_has_namespace_() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ThemeValue::has_namespace_() const {
  return _internal_has_namespace_();
}
inline void ThemeValue::clear_namespace_() {
  namespace__.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ThemeValue::namespace_() const {
  // @@protoc_insertion_point(field_get:mead101.mead.ThemeValue.namespace)
  return _internal_namespace_();
}
inline void ThemeValue::set_namespace_(const std::string& value) {
  _internal_set_namespace_(value);
  // @@protoc_insertion_point(field_set:mead101.mead.ThemeValue.namespace)
}
inline std::string* ThemeValue::mutable_namespace_() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.ThemeValue.namespace)
  return _internal_mutable_namespace_();
}
inline const std::string& ThemeValue::_internal_namespace_() const {
  return namespace__.Get();
}
inline void ThemeValue::_internal_set_namespace_(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ThemeValue::set_namespace_(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  namespace__.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.ThemeValue.namespace)
}
inline void ThemeValue::set_namespace_(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.ThemeValue.namespace)
}
inline void ThemeValue::set_namespace_(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.ThemeValue.namespace)
}
inline std::string* ThemeValue::_internal_mutable_namespace_() {
  _has_bits_[0] |= 0x00000001u;
  return namespace__.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ThemeValue::release_namespace_() {
  // @@protoc_insertion_point(field_release:mead101.mead.ThemeValue.namespace)
  if (!_internal_has_namespace_()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return namespace__.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ThemeValue::set_allocated_namespace_(std::string* namespace_) {
  if (namespace_ != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  namespace__.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), namespace_,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.ThemeValue.namespace)
}

// optional string user_defined_value = 2;
inline bool ThemeValue::_internal_has_user_defined_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ThemeValue::has_user_defined_value() const {
  return _internal_has_user_defined_value();
}
inline void ThemeValue::clear_user_defined_value() {
  user_defined_value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ThemeValue::user_defined_value() const {
  // @@protoc_insertion_point(field_get:mead101.mead.ThemeValue.user_defined_value)
  return _internal_user_defined_value();
}
inline void ThemeValue::set_user_defined_value(const std::string& value) {
  _internal_set_user_defined_value(value);
  // @@protoc_insertion_point(field_set:mead101.mead.ThemeValue.user_defined_value)
}
inline std::string* ThemeValue::mutable_user_defined_value() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.ThemeValue.user_defined_value)
  return _internal_mutable_user_defined_value();
}
inline const std::string& ThemeValue::_internal_user_defined_value() const {
  return user_defined_value_.Get();
}
inline void ThemeValue::_internal_set_user_defined_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ThemeValue::set_user_defined_value(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  user_defined_value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.ThemeValue.user_defined_value)
}
inline void ThemeValue::set_user_defined_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.ThemeValue.user_defined_value)
}
inline void ThemeValue::set_user_defined_value(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.ThemeValue.user_defined_value)
}
inline std::string* ThemeValue::_internal_mutable_user_defined_value() {
  _has_bits_[0] |= 0x00000002u;
  return user_defined_value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ThemeValue::release_user_defined_value() {
  // @@protoc_insertion_point(field_release:mead101.mead.ThemeValue.user_defined_value)
  if (!_internal_has_user_defined_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return user_defined_value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ThemeValue::set_allocated_user_defined_value(std::string* user_defined_value) {
  if (user_defined_value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  user_defined_value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_defined_value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.ThemeValue.user_defined_value)
}

// optional .mead101.avs.Theme ext_value = 3;
inline bool ThemeValue::_internal_has_ext_value() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || ext_value_ != nullptr);
  return value;
}
inline bool ThemeValue::has_ext_value() const {
  return _internal_has_ext_value();
}
inline const ::mead101::avs::Theme& ThemeValue::_internal_ext_value() const {
  const ::mead101::avs::Theme* p = ext_value_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::avs::Theme*>(
      &::mead101::avs::_Theme_default_instance_);
}
inline const ::mead101::avs::Theme& ThemeValue::ext_value() const {
  // @@protoc_insertion_point(field_get:mead101.mead.ThemeValue.ext_value)
  return _internal_ext_value();
}
inline void ThemeValue::unsafe_arena_set_allocated_ext_value(
    ::mead101::avs::Theme* ext_value) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext_value_);
  }
  ext_value_ = ext_value;
  if (ext_value) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.ThemeValue.ext_value)
}
inline ::mead101::avs::Theme* ThemeValue::release_ext_value() {
  _has_bits_[0] &= ~0x00000004u;
  ::mead101::avs::Theme* temp = ext_value_;
  ext_value_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::avs::Theme* ThemeValue::unsafe_arena_release_ext_value() {
  // @@protoc_insertion_point(field_release:mead101.mead.ThemeValue.ext_value)
  _has_bits_[0] &= ~0x00000004u;
  ::mead101::avs::Theme* temp = ext_value_;
  ext_value_ = nullptr;
  return temp;
}
inline ::mead101::avs::Theme* ThemeValue::_internal_mutable_ext_value() {
  _has_bits_[0] |= 0x00000004u;
  if (ext_value_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::avs::Theme>(GetArena());
    ext_value_ = p;
  }
  return ext_value_;
}
inline ::mead101::avs::Theme* ThemeValue::mutable_ext_value() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.ThemeValue.ext_value)
  return _internal_mutable_ext_value();
}
inline void ThemeValue::set_allocated_ext_value(::mead101::avs::Theme* ext_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext_value_);
  }
  if (ext_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext_value)->GetArena();
    if (message_arena != submessage_arena) {
      ext_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext_value, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  ext_value_ = ext_value;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.ThemeValue.ext_value)
}

// -------------------------------------------------------------------

// TimeSignature

// repeated string metadata_source_reference = 1;
inline int TimeSignature::_internal_metadata_source_reference_size() const {
  return metadata_source_reference_.size();
}
inline int TimeSignature::metadata_source_reference_size() const {
  return _internal_metadata_source_reference_size();
}
inline void TimeSignature::clear_metadata_source_reference() {
  metadata_source_reference_.Clear();
}
inline std::string* TimeSignature::add_metadata_source_reference() {
  // @@protoc_insertion_point(field_add_mutable:mead101.mead.TimeSignature.metadata_source_reference)
  return _internal_add_metadata_source_reference();
}
inline const std::string& TimeSignature::_internal_metadata_source_reference(int index) const {
  return metadata_source_reference_.Get(index);
}
inline const std::string& TimeSignature::metadata_source_reference(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.TimeSignature.metadata_source_reference)
  return _internal_metadata_source_reference(index);
}
inline std::string* TimeSignature::mutable_metadata_source_reference(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.TimeSignature.metadata_source_reference)
  return metadata_source_reference_.Mutable(index);
}
inline void TimeSignature::set_metadata_source_reference(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:mead101.mead.TimeSignature.metadata_source_reference)
  metadata_source_reference_.Mutable(index)->assign(value);
}
inline void TimeSignature::set_metadata_source_reference(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:mead101.mead.TimeSignature.metadata_source_reference)
  metadata_source_reference_.Mutable(index)->assign(std::move(value));
}
inline void TimeSignature::set_metadata_source_reference(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  metadata_source_reference_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mead101.mead.TimeSignature.metadata_source_reference)
}
inline void TimeSignature::set_metadata_source_reference(int index, const char* value, size_t size) {
  metadata_source_reference_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.TimeSignature.metadata_source_reference)
}
inline std::string* TimeSignature::_internal_add_metadata_source_reference() {
  return metadata_source_reference_.Add();
}
inline void TimeSignature::add_metadata_source_reference(const std::string& value) {
  metadata_source_reference_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mead101.mead.TimeSignature.metadata_source_reference)
}
inline void TimeSignature::add_metadata_source_reference(std::string&& value) {
  metadata_source_reference_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:mead101.mead.TimeSignature.metadata_source_reference)
}
inline void TimeSignature::add_metadata_source_reference(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  metadata_source_reference_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mead101.mead.TimeSignature.metadata_source_reference)
}
inline void TimeSignature::add_metadata_source_reference(const char* value, size_t size) {
  metadata_source_reference_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mead101.mead.TimeSignature.metadata_source_reference)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TimeSignature::metadata_source_reference() const {
  // @@protoc_insertion_point(field_list:mead101.mead.TimeSignature.metadata_source_reference)
  return metadata_source_reference_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TimeSignature::mutable_metadata_source_reference() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.TimeSignature.metadata_source_reference)
  return &metadata_source_reference_;
}

// optional .mead101.mead.Meter meter = 2;
inline bool TimeSignature::_internal_has_meter() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || meter_ != nullptr);
  return value;
}
inline bool TimeSignature::has_meter() const {
  return _internal_has_meter();
}
inline void TimeSignature::clear_meter() {
  if (meter_ != nullptr) meter_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::mead101::mead::Meter& TimeSignature::_internal_meter() const {
  const ::mead101::mead::Meter* p = meter_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::Meter*>(
      &::mead101::mead::_Meter_default_instance_);
}
inline const ::mead101::mead::Meter& TimeSignature::meter() const {
  // @@protoc_insertion_point(field_get:mead101.mead.TimeSignature.meter)
  return _internal_meter();
}
inline void TimeSignature::unsafe_arena_set_allocated_meter(
    ::mead101::mead::Meter* meter) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(meter_);
  }
  meter_ = meter;
  if (meter) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.TimeSignature.meter)
}
inline ::mead101::mead::Meter* TimeSignature::release_meter() {
  _has_bits_[0] &= ~0x00000001u;
  ::mead101::mead::Meter* temp = meter_;
  meter_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::Meter* TimeSignature::unsafe_arena_release_meter() {
  // @@protoc_insertion_point(field_release:mead101.mead.TimeSignature.meter)
  _has_bits_[0] &= ~0x00000001u;
  ::mead101::mead::Meter* temp = meter_;
  meter_ = nullptr;
  return temp;
}
inline ::mead101::mead::Meter* TimeSignature::_internal_mutable_meter() {
  _has_bits_[0] |= 0x00000001u;
  if (meter_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::Meter>(GetArena());
    meter_ = p;
  }
  return meter_;
}
inline ::mead101::mead::Meter* TimeSignature::mutable_meter() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.TimeSignature.meter)
  return _internal_mutable_meter();
}
inline void TimeSignature::set_allocated_meter(::mead101::mead::Meter* meter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete meter_;
  }
  if (meter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(meter);
    if (message_arena != submessage_arena) {
      meter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, meter, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  meter_ = meter;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.TimeSignature.meter)
}

// repeated .mead101.mead.TimeSignatureModulation modulation = 3;
inline int TimeSignature::_internal_modulation_size() const {
  return modulation_.size();
}
inline int TimeSignature::modulation_size() const {
  return _internal_modulation_size();
}
inline void TimeSignature::clear_modulation() {
  modulation_.Clear();
}
inline ::mead101::mead::TimeSignatureModulation* TimeSignature::mutable_modulation(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.TimeSignature.modulation)
  return modulation_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::TimeSignatureModulation >*
TimeSignature::mutable_modulation() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.TimeSignature.modulation)
  return &modulation_;
}
inline const ::mead101::mead::TimeSignatureModulation& TimeSignature::_internal_modulation(int index) const {
  return modulation_.Get(index);
}
inline const ::mead101::mead::TimeSignatureModulation& TimeSignature::modulation(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.TimeSignature.modulation)
  return _internal_modulation(index);
}
inline ::mead101::mead::TimeSignatureModulation* TimeSignature::_internal_add_modulation() {
  return modulation_.Add();
}
inline ::mead101::mead::TimeSignatureModulation* TimeSignature::add_modulation() {
  // @@protoc_insertion_point(field_add:mead101.mead.TimeSignature.modulation)
  return _internal_add_modulation();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::TimeSignatureModulation >&
TimeSignature::modulation() const {
  // @@protoc_insertion_point(field_list:mead101.mead.TimeSignature.modulation)
  return modulation_;
}

// optional bool no_meter_available = 4;
inline bool TimeSignature::_internal_has_no_meter_available() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TimeSignature::has_no_meter_available() const {
  return _internal_has_no_meter_available();
}
inline void TimeSignature::clear_no_meter_available() {
  no_meter_available_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool TimeSignature::_internal_no_meter_available() const {
  return no_meter_available_;
}
inline bool TimeSignature::no_meter_available() const {
  // @@protoc_insertion_point(field_get:mead101.mead.TimeSignature.no_meter_available)
  return _internal_no_meter_available();
}
inline void TimeSignature::_internal_set_no_meter_available(bool value) {
  _has_bits_[0] |= 0x00000004u;
  no_meter_available_ = value;
}
inline void TimeSignature::set_no_meter_available(bool value) {
  _internal_set_no_meter_available(value);
  // @@protoc_insertion_point(field_set:mead101.mead.TimeSignature.no_meter_available)
}

// optional .mead101.mead.TempoValue tempo = 5;
inline bool TimeSignature::_internal_has_tempo() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || tempo_ != nullptr);
  return value;
}
inline bool TimeSignature::has_tempo() const {
  return _internal_has_tempo();
}
inline void TimeSignature::clear_tempo() {
  if (tempo_ != nullptr) tempo_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::mead101::mead::TempoValue& TimeSignature::_internal_tempo() const {
  const ::mead101::mead::TempoValue* p = tempo_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::TempoValue*>(
      &::mead101::mead::_TempoValue_default_instance_);
}
inline const ::mead101::mead::TempoValue& TimeSignature::tempo() const {
  // @@protoc_insertion_point(field_get:mead101.mead.TimeSignature.tempo)
  return _internal_tempo();
}
inline void TimeSignature::unsafe_arena_set_allocated_tempo(
    ::mead101::mead::TempoValue* tempo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tempo_);
  }
  tempo_ = tempo;
  if (tempo) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.TimeSignature.tempo)
}
inline ::mead101::mead::TempoValue* TimeSignature::release_tempo() {
  _has_bits_[0] &= ~0x00000002u;
  ::mead101::mead::TempoValue* temp = tempo_;
  tempo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::TempoValue* TimeSignature::unsafe_arena_release_tempo() {
  // @@protoc_insertion_point(field_release:mead101.mead.TimeSignature.tempo)
  _has_bits_[0] &= ~0x00000002u;
  ::mead101::mead::TempoValue* temp = tempo_;
  tempo_ = nullptr;
  return temp;
}
inline ::mead101::mead::TempoValue* TimeSignature::_internal_mutable_tempo() {
  _has_bits_[0] |= 0x00000002u;
  if (tempo_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::TempoValue>(GetArena());
    tempo_ = p;
  }
  return tempo_;
}
inline ::mead101::mead::TempoValue* TimeSignature::mutable_tempo() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.TimeSignature.tempo)
  return _internal_mutable_tempo();
}
inline void TimeSignature::set_allocated_tempo(::mead101::mead::TempoValue* tempo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete tempo_;
  }
  if (tempo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(tempo);
    if (message_arena != submessage_arena) {
      tempo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tempo, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  tempo_ = tempo;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.TimeSignature.tempo)
}

// optional bool too_many_tempi = 6;
inline bool TimeSignature::_internal_has_too_many_tempi() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TimeSignature::has_too_many_tempi() const {
  return _internal_has_too_many_tempi();
}
inline void TimeSignature::clear_too_many_tempi() {
  too_many_tempi_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool TimeSignature::_internal_too_many_tempi() const {
  return too_many_tempi_;
}
inline bool TimeSignature::too_many_tempi() const {
  // @@protoc_insertion_point(field_get:mead101.mead.TimeSignature.too_many_tempi)
  return _internal_too_many_tempi();
}
inline void TimeSignature::_internal_set_too_many_tempi(bool value) {
  _has_bits_[0] |= 0x00000008u;
  too_many_tempi_ = value;
}
inline void TimeSignature::set_too_many_tempi(bool value) {
  _internal_set_too_many_tempi(value);
  // @@protoc_insertion_point(field_set:mead101.mead.TimeSignature.too_many_tempi)
}

// -------------------------------------------------------------------

// TimeSignatureModulation

// optional int32 end_bar = 1;
inline bool TimeSignatureModulation::_internal_has_end_bar() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TimeSignatureModulation::has_end_bar() const {
  return _internal_has_end_bar();
}
inline void TimeSignatureModulation::clear_end_bar() {
  end_bar_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TimeSignatureModulation::_internal_end_bar() const {
  return end_bar_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TimeSignatureModulation::end_bar() const {
  // @@protoc_insertion_point(field_get:mead101.mead.TimeSignatureModulation.end_bar)
  return _internal_end_bar();
}
inline void TimeSignatureModulation::_internal_set_end_bar(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  end_bar_ = value;
}
inline void TimeSignatureModulation::set_end_bar(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_end_bar(value);
  // @@protoc_insertion_point(field_set:mead101.mead.TimeSignatureModulation.end_bar)
}

// optional double end_point = 2;
inline bool TimeSignatureModulation::_internal_has_end_point() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TimeSignatureModulation::has_end_point() const {
  return _internal_has_end_point();
}
inline void TimeSignatureModulation::clear_end_point() {
  end_point_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double TimeSignatureModulation::_internal_end_point() const {
  return end_point_;
}
inline double TimeSignatureModulation::end_point() const {
  // @@protoc_insertion_point(field_get:mead101.mead.TimeSignatureModulation.end_point)
  return _internal_end_point();
}
inline void TimeSignatureModulation::_internal_set_end_point(double value) {
  _has_bits_[0] |= 0x00000004u;
  end_point_ = value;
}
inline void TimeSignatureModulation::set_end_point(double value) {
  _internal_set_end_point(value);
  // @@protoc_insertion_point(field_set:mead101.mead.TimeSignatureModulation.end_point)
}

// optional .mead101.mead.Meter meter = 3;
inline bool TimeSignatureModulation::_internal_has_meter() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || meter_ != nullptr);
  return value;
}
inline bool TimeSignatureModulation::has_meter() const {
  return _internal_has_meter();
}
inline void TimeSignatureModulation::clear_meter() {
  if (meter_ != nullptr) meter_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::mead101::mead::Meter& TimeSignatureModulation::_internal_meter() const {
  const ::mead101::mead::Meter* p = meter_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::Meter*>(
      &::mead101::mead::_Meter_default_instance_);
}
inline const ::mead101::mead::Meter& TimeSignatureModulation::meter() const {
  // @@protoc_insertion_point(field_get:mead101.mead.TimeSignatureModulation.meter)
  return _internal_meter();
}
inline void TimeSignatureModulation::unsafe_arena_set_allocated_meter(
    ::mead101::mead::Meter* meter) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(meter_);
  }
  meter_ = meter;
  if (meter) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.TimeSignatureModulation.meter)
}
inline ::mead101::mead::Meter* TimeSignatureModulation::release_meter() {
  _has_bits_[0] &= ~0x00000001u;
  ::mead101::mead::Meter* temp = meter_;
  meter_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::Meter* TimeSignatureModulation::unsafe_arena_release_meter() {
  // @@protoc_insertion_point(field_release:mead101.mead.TimeSignatureModulation.meter)
  _has_bits_[0] &= ~0x00000001u;
  ::mead101::mead::Meter* temp = meter_;
  meter_ = nullptr;
  return temp;
}
inline ::mead101::mead::Meter* TimeSignatureModulation::_internal_mutable_meter() {
  _has_bits_[0] |= 0x00000001u;
  if (meter_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::Meter>(GetArena());
    meter_ = p;
  }
  return meter_;
}
inline ::mead101::mead::Meter* TimeSignatureModulation::mutable_meter() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.TimeSignatureModulation.meter)
  return _internal_mutable_meter();
}
inline void TimeSignatureModulation::set_allocated_meter(::mead101::mead::Meter* meter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete meter_;
  }
  if (meter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(meter);
    if (message_arena != submessage_arena) {
      meter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, meter, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  meter_ = meter;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.TimeSignatureModulation.meter)
}

// optional bool no_meter_available = 4;
inline bool TimeSignatureModulation::_internal_has_no_meter_available() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool TimeSignatureModulation::has_no_meter_available() const {
  return _internal_has_no_meter_available();
}
inline void TimeSignatureModulation::clear_no_meter_available() {
  no_meter_available_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool TimeSignatureModulation::_internal_no_meter_available() const {
  return no_meter_available_;
}
inline bool TimeSignatureModulation::no_meter_available() const {
  // @@protoc_insertion_point(field_get:mead101.mead.TimeSignatureModulation.no_meter_available)
  return _internal_no_meter_available();
}
inline void TimeSignatureModulation::_internal_set_no_meter_available(bool value) {
  _has_bits_[0] |= 0x00000010u;
  no_meter_available_ = value;
}
inline void TimeSignatureModulation::set_no_meter_available(bool value) {
  _internal_set_no_meter_available(value);
  // @@protoc_insertion_point(field_set:mead101.mead.TimeSignatureModulation.no_meter_available)
}

// optional int32 start_bar = 5;
inline bool TimeSignatureModulation::_internal_has_start_bar() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool TimeSignatureModulation::has_start_bar() const {
  return _internal_has_start_bar();
}
inline void TimeSignatureModulation::clear_start_bar() {
  start_bar_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TimeSignatureModulation::_internal_start_bar() const {
  return start_bar_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TimeSignatureModulation::start_bar() const {
  // @@protoc_insertion_point(field_get:mead101.mead.TimeSignatureModulation.start_bar)
  return _internal_start_bar();
}
inline void TimeSignatureModulation::_internal_set_start_bar(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  start_bar_ = value;
}
inline void TimeSignatureModulation::set_start_bar(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_start_bar(value);
  // @@protoc_insertion_point(field_set:mead101.mead.TimeSignatureModulation.start_bar)
}

// optional double start_point = 6;
inline bool TimeSignatureModulation::_internal_has_start_point() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool TimeSignatureModulation::has_start_point() const {
  return _internal_has_start_point();
}
inline void TimeSignatureModulation::clear_start_point() {
  start_point_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline double TimeSignatureModulation::_internal_start_point() const {
  return start_point_;
}
inline double TimeSignatureModulation::start_point() const {
  // @@protoc_insertion_point(field_get:mead101.mead.TimeSignatureModulation.start_point)
  return _internal_start_point();
}
inline void TimeSignatureModulation::_internal_set_start_point(double value) {
  _has_bits_[0] |= 0x00000020u;
  start_point_ = value;
}
inline void TimeSignatureModulation::set_start_point(double value) {
  _internal_set_start_point(value);
  // @@protoc_insertion_point(field_set:mead101.mead.TimeSignatureModulation.start_point)
}

// optional .mead101.mead.Tempo tempo = 7;
inline bool TimeSignatureModulation::_internal_has_tempo() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || tempo_ != nullptr);
  return value;
}
inline bool TimeSignatureModulation::has_tempo() const {
  return _internal_has_tempo();
}
inline void TimeSignatureModulation::clear_tempo() {
  if (tempo_ != nullptr) tempo_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::mead101::mead::Tempo& TimeSignatureModulation::_internal_tempo() const {
  const ::mead101::mead::Tempo* p = tempo_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::Tempo*>(
      &::mead101::mead::_Tempo_default_instance_);
}
inline const ::mead101::mead::Tempo& TimeSignatureModulation::tempo() const {
  // @@protoc_insertion_point(field_get:mead101.mead.TimeSignatureModulation.tempo)
  return _internal_tempo();
}
inline void TimeSignatureModulation::unsafe_arena_set_allocated_tempo(
    ::mead101::mead::Tempo* tempo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tempo_);
  }
  tempo_ = tempo;
  if (tempo) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.TimeSignatureModulation.tempo)
}
inline ::mead101::mead::Tempo* TimeSignatureModulation::release_tempo() {
  _has_bits_[0] &= ~0x00000002u;
  ::mead101::mead::Tempo* temp = tempo_;
  tempo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::Tempo* TimeSignatureModulation::unsafe_arena_release_tempo() {
  // @@protoc_insertion_point(field_release:mead101.mead.TimeSignatureModulation.tempo)
  _has_bits_[0] &= ~0x00000002u;
  ::mead101::mead::Tempo* temp = tempo_;
  tempo_ = nullptr;
  return temp;
}
inline ::mead101::mead::Tempo* TimeSignatureModulation::_internal_mutable_tempo() {
  _has_bits_[0] |= 0x00000002u;
  if (tempo_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::Tempo>(GetArena());
    tempo_ = p;
  }
  return tempo_;
}
inline ::mead101::mead::Tempo* TimeSignatureModulation::mutable_tempo() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.TimeSignatureModulation.tempo)
  return _internal_mutable_tempo();
}
inline void TimeSignatureModulation::set_allocated_tempo(::mead101::mead::Tempo* tempo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete tempo_;
  }
  if (tempo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(tempo);
    if (message_arena != submessage_arena) {
      tempo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tempo, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  tempo_ = tempo;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.TimeSignatureModulation.tempo)
}

// -------------------------------------------------------------------

// Timing

// optional string duration_used = 1;
inline bool Timing::_internal_has_duration_used() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Timing::has_duration_used() const {
  return _internal_has_duration_used();
}
inline void Timing::clear_duration_used() {
  duration_used_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Timing::duration_used() const {
  // @@protoc_insertion_point(field_get:mead101.mead.Timing.duration_used)
  return _internal_duration_used();
}
inline void Timing::set_duration_used(const std::string& value) {
  _internal_set_duration_used(value);
  // @@protoc_insertion_point(field_set:mead101.mead.Timing.duration_used)
}
inline std::string* Timing::mutable_duration_used() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Timing.duration_used)
  return _internal_mutable_duration_used();
}
inline const std::string& Timing::_internal_duration_used() const {
  return duration_used_.Get();
}
inline void Timing::_internal_set_duration_used(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  duration_used_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Timing::set_duration_used(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  duration_used_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.Timing.duration_used)
}
inline void Timing::set_duration_used(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  duration_used_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.Timing.duration_used)
}
inline void Timing::set_duration_used(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  duration_used_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.Timing.duration_used)
}
inline std::string* Timing::_internal_mutable_duration_used() {
  _has_bits_[0] |= 0x00000001u;
  return duration_used_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Timing::release_duration_used() {
  // @@protoc_insertion_point(field_release:mead101.mead.Timing.duration_used)
  if (!_internal_has_duration_used()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return duration_used_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Timing::set_allocated_duration_used(std::string* duration_used) {
  if (duration_used != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  duration_used_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), duration_used,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.Timing.duration_used)
}

// optional string start_point = 2;
inline bool Timing::_internal_has_start_point() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Timing::has_start_point() const {
  return _internal_has_start_point();
}
inline void Timing::clear_start_point() {
  start_point_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Timing::start_point() const {
  // @@protoc_insertion_point(field_get:mead101.mead.Timing.start_point)
  return _internal_start_point();
}
inline void Timing::set_start_point(const std::string& value) {
  _internal_set_start_point(value);
  // @@protoc_insertion_point(field_set:mead101.mead.Timing.start_point)
}
inline std::string* Timing::mutable_start_point() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Timing.start_point)
  return _internal_mutable_start_point();
}
inline const std::string& Timing::_internal_start_point() const {
  return start_point_.Get();
}
inline void Timing::_internal_set_start_point(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  start_point_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Timing::set_start_point(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  start_point_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.Timing.start_point)
}
inline void Timing::set_start_point(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  start_point_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.Timing.start_point)
}
inline void Timing::set_start_point(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  start_point_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.Timing.start_point)
}
inline std::string* Timing::_internal_mutable_start_point() {
  _has_bits_[0] |= 0x00000002u;
  return start_point_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Timing::release_start_point() {
  // @@protoc_insertion_point(field_release:mead101.mead.Timing.start_point)
  if (!_internal_has_start_point()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return start_point_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Timing::set_allocated_start_point(std::string* start_point) {
  if (start_point != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  start_point_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), start_point,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.Timing.start_point)
}

// -------------------------------------------------------------------

// TitleTextWithPronunciation

// repeated .mead101.mead.Pronunciation pronunciation = 1;
inline int TitleTextWithPronunciation::_internal_pronunciation_size() const {
  return pronunciation_.size();
}
inline int TitleTextWithPronunciation::pronunciation_size() const {
  return _internal_pronunciation_size();
}
inline void TitleTextWithPronunciation::clear_pronunciation() {
  pronunciation_.Clear();
}
inline ::mead101::mead::Pronunciation* TitleTextWithPronunciation::mutable_pronunciation(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.TitleTextWithPronunciation.pronunciation)
  return pronunciation_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Pronunciation >*
TitleTextWithPronunciation::mutable_pronunciation() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.TitleTextWithPronunciation.pronunciation)
  return &pronunciation_;
}
inline const ::mead101::mead::Pronunciation& TitleTextWithPronunciation::_internal_pronunciation(int index) const {
  return pronunciation_.Get(index);
}
inline const ::mead101::mead::Pronunciation& TitleTextWithPronunciation::pronunciation(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.TitleTextWithPronunciation.pronunciation)
  return _internal_pronunciation(index);
}
inline ::mead101::mead::Pronunciation* TitleTextWithPronunciation::_internal_add_pronunciation() {
  return pronunciation_.Add();
}
inline ::mead101::mead::Pronunciation* TitleTextWithPronunciation::add_pronunciation() {
  // @@protoc_insertion_point(field_add:mead101.mead.TitleTextWithPronunciation.pronunciation)
  return _internal_add_pronunciation();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Pronunciation >&
TitleTextWithPronunciation::pronunciation() const {
  // @@protoc_insertion_point(field_list:mead101.mead.TitleTextWithPronunciation.pronunciation)
  return pronunciation_;
}

// optional string title = 2;
inline bool TitleTextWithPronunciation::_internal_has_title() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TitleTextWithPronunciation::has_title() const {
  return _internal_has_title();
}
inline void TitleTextWithPronunciation::clear_title() {
  title_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TitleTextWithPronunciation::title() const {
  // @@protoc_insertion_point(field_get:mead101.mead.TitleTextWithPronunciation.title)
  return _internal_title();
}
inline void TitleTextWithPronunciation::set_title(const std::string& value) {
  _internal_set_title(value);
  // @@protoc_insertion_point(field_set:mead101.mead.TitleTextWithPronunciation.title)
}
inline std::string* TitleTextWithPronunciation::mutable_title() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.TitleTextWithPronunciation.title)
  return _internal_mutable_title();
}
inline const std::string& TitleTextWithPronunciation::_internal_title() const {
  return title_.Get();
}
inline void TitleTextWithPronunciation::_internal_set_title(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TitleTextWithPronunciation::set_title(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  title_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.TitleTextWithPronunciation.title)
}
inline void TitleTextWithPronunciation::set_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.TitleTextWithPronunciation.title)
}
inline void TitleTextWithPronunciation::set_title(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.TitleTextWithPronunciation.title)
}
inline std::string* TitleTextWithPronunciation::_internal_mutable_title() {
  _has_bits_[0] |= 0x00000001u;
  return title_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TitleTextWithPronunciation::release_title() {
  // @@protoc_insertion_point(field_release:mead101.mead.TitleTextWithPronunciation.title)
  if (!_internal_has_title()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return title_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TitleTextWithPronunciation::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  title_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.TitleTextWithPronunciation.title)
}

// -------------------------------------------------------------------

// TitleWithPronunciation

// optional string language_and_script_code = 1;
inline bool TitleWithPronunciation::_internal_has_language_and_script_code() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TitleWithPronunciation::has_language_and_script_code() const {
  return _internal_has_language_and_script_code();
}
inline void TitleWithPronunciation::clear_language_and_script_code() {
  language_and_script_code_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TitleWithPronunciation::language_and_script_code() const {
  // @@protoc_insertion_point(field_get:mead101.mead.TitleWithPronunciation.language_and_script_code)
  return _internal_language_and_script_code();
}
inline void TitleWithPronunciation::set_language_and_script_code(const std::string& value) {
  _internal_set_language_and_script_code(value);
  // @@protoc_insertion_point(field_set:mead101.mead.TitleWithPronunciation.language_and_script_code)
}
inline std::string* TitleWithPronunciation::mutable_language_and_script_code() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.TitleWithPronunciation.language_and_script_code)
  return _internal_mutable_language_and_script_code();
}
inline const std::string& TitleWithPronunciation::_internal_language_and_script_code() const {
  return language_and_script_code_.Get();
}
inline void TitleWithPronunciation::_internal_set_language_and_script_code(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  language_and_script_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TitleWithPronunciation::set_language_and_script_code(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  language_and_script_code_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.TitleWithPronunciation.language_and_script_code)
}
inline void TitleWithPronunciation::set_language_and_script_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  language_and_script_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.TitleWithPronunciation.language_and_script_code)
}
inline void TitleWithPronunciation::set_language_and_script_code(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  language_and_script_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.TitleWithPronunciation.language_and_script_code)
}
inline std::string* TitleWithPronunciation::_internal_mutable_language_and_script_code() {
  _has_bits_[0] |= 0x00000001u;
  return language_and_script_code_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TitleWithPronunciation::release_language_and_script_code() {
  // @@protoc_insertion_point(field_release:mead101.mead.TitleWithPronunciation.language_and_script_code)
  if (!_internal_has_language_and_script_code()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return language_and_script_code_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TitleWithPronunciation::set_allocated_language_and_script_code(std::string* language_and_script_code) {
  if (language_and_script_code != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  language_and_script_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), language_and_script_code,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.TitleWithPronunciation.language_and_script_code)
}

// optional string namespace = 2;
inline bool TitleWithPronunciation::_internal_has_namespace_() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TitleWithPronunciation::has_namespace_() const {
  return _internal_has_namespace_();
}
inline void TitleWithPronunciation::clear_namespace_() {
  namespace__.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TitleWithPronunciation::namespace_() const {
  // @@protoc_insertion_point(field_get:mead101.mead.TitleWithPronunciation.namespace)
  return _internal_namespace_();
}
inline void TitleWithPronunciation::set_namespace_(const std::string& value) {
  _internal_set_namespace_(value);
  // @@protoc_insertion_point(field_set:mead101.mead.TitleWithPronunciation.namespace)
}
inline std::string* TitleWithPronunciation::mutable_namespace_() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.TitleWithPronunciation.namespace)
  return _internal_mutable_namespace_();
}
inline const std::string& TitleWithPronunciation::_internal_namespace_() const {
  return namespace__.Get();
}
inline void TitleWithPronunciation::_internal_set_namespace_(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TitleWithPronunciation::set_namespace_(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  namespace__.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.TitleWithPronunciation.namespace)
}
inline void TitleWithPronunciation::set_namespace_(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.TitleWithPronunciation.namespace)
}
inline void TitleWithPronunciation::set_namespace_(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.TitleWithPronunciation.namespace)
}
inline std::string* TitleWithPronunciation::_internal_mutable_namespace_() {
  _has_bits_[0] |= 0x00000002u;
  return namespace__.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TitleWithPronunciation::release_namespace_() {
  // @@protoc_insertion_point(field_release:mead101.mead.TitleWithPronunciation.namespace)
  if (!_internal_has_namespace_()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return namespace__.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TitleWithPronunciation::set_allocated_namespace_(std::string* namespace_) {
  if (namespace_ != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  namespace__.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), namespace_,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.TitleWithPronunciation.namespace)
}

// optional .mead101.mead.TitleTextWithPronunciation sub_title = 3;
inline bool TitleWithPronunciation::_internal_has_sub_title() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || sub_title_ != nullptr);
  return value;
}
inline bool TitleWithPronunciation::has_sub_title() const {
  return _internal_has_sub_title();
}
inline void TitleWithPronunciation::clear_sub_title() {
  if (sub_title_ != nullptr) sub_title_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::mead101::mead::TitleTextWithPronunciation& TitleWithPronunciation::_internal_sub_title() const {
  const ::mead101::mead::TitleTextWithPronunciation* p = sub_title_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::TitleTextWithPronunciation*>(
      &::mead101::mead::_TitleTextWithPronunciation_default_instance_);
}
inline const ::mead101::mead::TitleTextWithPronunciation& TitleWithPronunciation::sub_title() const {
  // @@protoc_insertion_point(field_get:mead101.mead.TitleWithPronunciation.sub_title)
  return _internal_sub_title();
}
inline void TitleWithPronunciation::unsafe_arena_set_allocated_sub_title(
    ::mead101::mead::TitleTextWithPronunciation* sub_title) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sub_title_);
  }
  sub_title_ = sub_title;
  if (sub_title) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.TitleWithPronunciation.sub_title)
}
inline ::mead101::mead::TitleTextWithPronunciation* TitleWithPronunciation::release_sub_title() {
  _has_bits_[0] &= ~0x00000008u;
  ::mead101::mead::TitleTextWithPronunciation* temp = sub_title_;
  sub_title_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::TitleTextWithPronunciation* TitleWithPronunciation::unsafe_arena_release_sub_title() {
  // @@protoc_insertion_point(field_release:mead101.mead.TitleWithPronunciation.sub_title)
  _has_bits_[0] &= ~0x00000008u;
  ::mead101::mead::TitleTextWithPronunciation* temp = sub_title_;
  sub_title_ = nullptr;
  return temp;
}
inline ::mead101::mead::TitleTextWithPronunciation* TitleWithPronunciation::_internal_mutable_sub_title() {
  _has_bits_[0] |= 0x00000008u;
  if (sub_title_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::TitleTextWithPronunciation>(GetArena());
    sub_title_ = p;
  }
  return sub_title_;
}
inline ::mead101::mead::TitleTextWithPronunciation* TitleWithPronunciation::mutable_sub_title() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.TitleWithPronunciation.sub_title)
  return _internal_mutable_sub_title();
}
inline void TitleWithPronunciation::set_allocated_sub_title(::mead101::mead::TitleTextWithPronunciation* sub_title) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete sub_title_;
  }
  if (sub_title) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(sub_title);
    if (message_arena != submessage_arena) {
      sub_title = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sub_title, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  sub_title_ = sub_title;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.TitleWithPronunciation.sub_title)
}

// optional .mead101.mead.TitleTextWithPronunciation title_text = 4;
inline bool TitleWithPronunciation::_internal_has_title_text() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || title_text_ != nullptr);
  return value;
}
inline bool TitleWithPronunciation::has_title_text() const {
  return _internal_has_title_text();
}
inline void TitleWithPronunciation::clear_title_text() {
  if (title_text_ != nullptr) title_text_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::mead101::mead::TitleTextWithPronunciation& TitleWithPronunciation::_internal_title_text() const {
  const ::mead101::mead::TitleTextWithPronunciation* p = title_text_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::TitleTextWithPronunciation*>(
      &::mead101::mead::_TitleTextWithPronunciation_default_instance_);
}
inline const ::mead101::mead::TitleTextWithPronunciation& TitleWithPronunciation::title_text() const {
  // @@protoc_insertion_point(field_get:mead101.mead.TitleWithPronunciation.title_text)
  return _internal_title_text();
}
inline void TitleWithPronunciation::unsafe_arena_set_allocated_title_text(
    ::mead101::mead::TitleTextWithPronunciation* title_text) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(title_text_);
  }
  title_text_ = title_text;
  if (title_text) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.TitleWithPronunciation.title_text)
}
inline ::mead101::mead::TitleTextWithPronunciation* TitleWithPronunciation::release_title_text() {
  _has_bits_[0] &= ~0x00000010u;
  ::mead101::mead::TitleTextWithPronunciation* temp = title_text_;
  title_text_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::TitleTextWithPronunciation* TitleWithPronunciation::unsafe_arena_release_title_text() {
  // @@protoc_insertion_point(field_release:mead101.mead.TitleWithPronunciation.title_text)
  _has_bits_[0] &= ~0x00000010u;
  ::mead101::mead::TitleTextWithPronunciation* temp = title_text_;
  title_text_ = nullptr;
  return temp;
}
inline ::mead101::mead::TitleTextWithPronunciation* TitleWithPronunciation::_internal_mutable_title_text() {
  _has_bits_[0] |= 0x00000010u;
  if (title_text_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::TitleTextWithPronunciation>(GetArena());
    title_text_ = p;
  }
  return title_text_;
}
inline ::mead101::mead::TitleTextWithPronunciation* TitleWithPronunciation::mutable_title_text() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.TitleWithPronunciation.title_text)
  return _internal_mutable_title_text();
}
inline void TitleWithPronunciation::set_allocated_title_text(::mead101::mead::TitleTextWithPronunciation* title_text) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete title_text_;
  }
  if (title_text) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(title_text);
    if (message_arena != submessage_arena) {
      title_text = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, title_text, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  title_text_ = title_text;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.TitleWithPronunciation.title_text)
}

// optional .mead101.avs.TitleType title_type = 5;
inline bool TitleWithPronunciation::_internal_has_title_type() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || title_type_ != nullptr);
  return value;
}
inline bool TitleWithPronunciation::has_title_type() const {
  return _internal_has_title_type();
}
inline const ::mead101::avs::TitleType& TitleWithPronunciation::_internal_title_type() const {
  const ::mead101::avs::TitleType* p = title_type_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::avs::TitleType*>(
      &::mead101::avs::_TitleType_default_instance_);
}
inline const ::mead101::avs::TitleType& TitleWithPronunciation::title_type() const {
  // @@protoc_insertion_point(field_get:mead101.mead.TitleWithPronunciation.title_type)
  return _internal_title_type();
}
inline void TitleWithPronunciation::unsafe_arena_set_allocated_title_type(
    ::mead101::avs::TitleType* title_type) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(title_type_);
  }
  title_type_ = title_type;
  if (title_type) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.TitleWithPronunciation.title_type)
}
inline ::mead101::avs::TitleType* TitleWithPronunciation::release_title_type() {
  _has_bits_[0] &= ~0x00000020u;
  ::mead101::avs::TitleType* temp = title_type_;
  title_type_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::avs::TitleType* TitleWithPronunciation::unsafe_arena_release_title_type() {
  // @@protoc_insertion_point(field_release:mead101.mead.TitleWithPronunciation.title_type)
  _has_bits_[0] &= ~0x00000020u;
  ::mead101::avs::TitleType* temp = title_type_;
  title_type_ = nullptr;
  return temp;
}
inline ::mead101::avs::TitleType* TitleWithPronunciation::_internal_mutable_title_type() {
  _has_bits_[0] |= 0x00000020u;
  if (title_type_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::avs::TitleType>(GetArena());
    title_type_ = p;
  }
  return title_type_;
}
inline ::mead101::avs::TitleType* TitleWithPronunciation::mutable_title_type() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.TitleWithPronunciation.title_type)
  return _internal_mutable_title_type();
}
inline void TitleWithPronunciation::set_allocated_title_type(::mead101::avs::TitleType* title_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(title_type_);
  }
  if (title_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(title_type)->GetArena();
    if (message_arena != submessage_arena) {
      title_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, title_type, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  title_type_ = title_type;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.TitleWithPronunciation.title_type)
}

// optional string user_defined_value = 6;
inline bool TitleWithPronunciation::_internal_has_user_defined_value() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TitleWithPronunciation::has_user_defined_value() const {
  return _internal_has_user_defined_value();
}
inline void TitleWithPronunciation::clear_user_defined_value() {
  user_defined_value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& TitleWithPronunciation::user_defined_value() const {
  // @@protoc_insertion_point(field_get:mead101.mead.TitleWithPronunciation.user_defined_value)
  return _internal_user_defined_value();
}
inline void TitleWithPronunciation::set_user_defined_value(const std::string& value) {
  _internal_set_user_defined_value(value);
  // @@protoc_insertion_point(field_set:mead101.mead.TitleWithPronunciation.user_defined_value)
}
inline std::string* TitleWithPronunciation::mutable_user_defined_value() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.TitleWithPronunciation.user_defined_value)
  return _internal_mutable_user_defined_value();
}
inline const std::string& TitleWithPronunciation::_internal_user_defined_value() const {
  return user_defined_value_.Get();
}
inline void TitleWithPronunciation::_internal_set_user_defined_value(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TitleWithPronunciation::set_user_defined_value(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  user_defined_value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.TitleWithPronunciation.user_defined_value)
}
inline void TitleWithPronunciation::set_user_defined_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.TitleWithPronunciation.user_defined_value)
}
inline void TitleWithPronunciation::set_user_defined_value(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.TitleWithPronunciation.user_defined_value)
}
inline std::string* TitleWithPronunciation::_internal_mutable_user_defined_value() {
  _has_bits_[0] |= 0x00000004u;
  return user_defined_value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TitleWithPronunciation::release_user_defined_value() {
  // @@protoc_insertion_point(field_release:mead101.mead.TitleWithPronunciation.user_defined_value)
  if (!_internal_has_user_defined_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return user_defined_value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TitleWithPronunciation::set_allocated_user_defined_value(std::string* user_defined_value) {
  if (user_defined_value != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  user_defined_value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_defined_value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.TitleWithPronunciation.user_defined_value)
}

// -------------------------------------------------------------------

// URI

// repeated string any_attribute_value = 1;
inline int URI::_internal_any_attribute_value_size() const {
  return any_attribute_value_.size();
}
inline int URI::any_attribute_value_size() const {
  return _internal_any_attribute_value_size();
}
inline void URI::clear_any_attribute_value() {
  any_attribute_value_.Clear();
}
inline std::string* URI::add_any_attribute_value() {
  // @@protoc_insertion_point(field_add_mutable:mead101.mead.URI.any_attribute_value)
  return _internal_add_any_attribute_value();
}
inline const std::string& URI::_internal_any_attribute_value(int index) const {
  return any_attribute_value_.Get(index);
}
inline const std::string& URI::any_attribute_value(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.URI.any_attribute_value)
  return _internal_any_attribute_value(index);
}
inline std::string* URI::mutable_any_attribute_value(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.URI.any_attribute_value)
  return any_attribute_value_.Mutable(index);
}
inline void URI::set_any_attribute_value(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:mead101.mead.URI.any_attribute_value)
  any_attribute_value_.Mutable(index)->assign(value);
}
inline void URI::set_any_attribute_value(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:mead101.mead.URI.any_attribute_value)
  any_attribute_value_.Mutable(index)->assign(std::move(value));
}
inline void URI::set_any_attribute_value(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  any_attribute_value_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mead101.mead.URI.any_attribute_value)
}
inline void URI::set_any_attribute_value(int index, const char* value, size_t size) {
  any_attribute_value_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.URI.any_attribute_value)
}
inline std::string* URI::_internal_add_any_attribute_value() {
  return any_attribute_value_.Add();
}
inline void URI::add_any_attribute_value(const std::string& value) {
  any_attribute_value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mead101.mead.URI.any_attribute_value)
}
inline void URI::add_any_attribute_value(std::string&& value) {
  any_attribute_value_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:mead101.mead.URI.any_attribute_value)
}
inline void URI::add_any_attribute_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  any_attribute_value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mead101.mead.URI.any_attribute_value)
}
inline void URI::add_any_attribute_value(const char* value, size_t size) {
  any_attribute_value_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mead101.mead.URI.any_attribute_value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
URI::any_attribute_value() const {
  // @@protoc_insertion_point(field_list:mead101.mead.URI.any_attribute_value)
  return any_attribute_value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
URI::mutable_any_attribute_value() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.URI.any_attribute_value)
  return &any_attribute_value_;
}

// optional string ext_value = 2;
inline bool URI::_internal_has_ext_value() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool URI::has_ext_value() const {
  return _internal_has_ext_value();
}
inline void URI::clear_ext_value() {
  ext_value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& URI::ext_value() const {
  // @@protoc_insertion_point(field_get:mead101.mead.URI.ext_value)
  return _internal_ext_value();
}
inline void URI::set_ext_value(const std::string& value) {
  _internal_set_ext_value(value);
  // @@protoc_insertion_point(field_set:mead101.mead.URI.ext_value)
}
inline std::string* URI::mutable_ext_value() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.URI.ext_value)
  return _internal_mutable_ext_value();
}
inline const std::string& URI::_internal_ext_value() const {
  return ext_value_.Get();
}
inline void URI::_internal_set_ext_value(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  ext_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void URI::set_ext_value(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  ext_value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.URI.ext_value)
}
inline void URI::set_ext_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  ext_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.URI.ext_value)
}
inline void URI::set_ext_value(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  ext_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.URI.ext_value)
}
inline std::string* URI::_internal_mutable_ext_value() {
  _has_bits_[0] |= 0x00000001u;
  return ext_value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* URI::release_ext_value() {
  // @@protoc_insertion_point(field_release:mead101.mead.URI.ext_value)
  if (!_internal_has_ext_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return ext_value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void URI::set_allocated_ext_value(std::string* ext_value) {
  if (ext_value != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  ext_value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ext_value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.URI.ext_value)
}

// -------------------------------------------------------------------

// Usage

// repeated .mead101.mead.TextWithFormat description = 1;
inline int Usage::_internal_description_size() const {
  return description_.size();
}
inline int Usage::description_size() const {
  return _internal_description_size();
}
inline void Usage::clear_description() {
  description_.Clear();
}
inline ::mead101::mead::TextWithFormat* Usage::mutable_description(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Usage.description)
  return description_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::TextWithFormat >*
Usage::mutable_description() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.Usage.description)
  return &description_;
}
inline const ::mead101::mead::TextWithFormat& Usage::_internal_description(int index) const {
  return description_.Get(index);
}
inline const ::mead101::mead::TextWithFormat& Usage::description(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.Usage.description)
  return _internal_description(index);
}
inline ::mead101::mead::TextWithFormat* Usage::_internal_add_description() {
  return description_.Add();
}
inline ::mead101::mead::TextWithFormat* Usage::add_description() {
  // @@protoc_insertion_point(field_add:mead101.mead.Usage.description)
  return _internal_add_description();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::TextWithFormat >&
Usage::description() const {
  // @@protoc_insertion_point(field_list:mead101.mead.Usage.description)
  return description_;
}

// repeated string metadata_source_reference = 2;
inline int Usage::_internal_metadata_source_reference_size() const {
  return metadata_source_reference_.size();
}
inline int Usage::metadata_source_reference_size() const {
  return _internal_metadata_source_reference_size();
}
inline void Usage::clear_metadata_source_reference() {
  metadata_source_reference_.Clear();
}
inline std::string* Usage::add_metadata_source_reference() {
  // @@protoc_insertion_point(field_add_mutable:mead101.mead.Usage.metadata_source_reference)
  return _internal_add_metadata_source_reference();
}
inline const std::string& Usage::_internal_metadata_source_reference(int index) const {
  return metadata_source_reference_.Get(index);
}
inline const std::string& Usage::metadata_source_reference(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.Usage.metadata_source_reference)
  return _internal_metadata_source_reference(index);
}
inline std::string* Usage::mutable_metadata_source_reference(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Usage.metadata_source_reference)
  return metadata_source_reference_.Mutable(index);
}
inline void Usage::set_metadata_source_reference(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:mead101.mead.Usage.metadata_source_reference)
  metadata_source_reference_.Mutable(index)->assign(value);
}
inline void Usage::set_metadata_source_reference(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:mead101.mead.Usage.metadata_source_reference)
  metadata_source_reference_.Mutable(index)->assign(std::move(value));
}
inline void Usage::set_metadata_source_reference(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  metadata_source_reference_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mead101.mead.Usage.metadata_source_reference)
}
inline void Usage::set_metadata_source_reference(int index, const char* value, size_t size) {
  metadata_source_reference_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.Usage.metadata_source_reference)
}
inline std::string* Usage::_internal_add_metadata_source_reference() {
  return metadata_source_reference_.Add();
}
inline void Usage::add_metadata_source_reference(const std::string& value) {
  metadata_source_reference_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mead101.mead.Usage.metadata_source_reference)
}
inline void Usage::add_metadata_source_reference(std::string&& value) {
  metadata_source_reference_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:mead101.mead.Usage.metadata_source_reference)
}
inline void Usage::add_metadata_source_reference(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  metadata_source_reference_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mead101.mead.Usage.metadata_source_reference)
}
inline void Usage::add_metadata_source_reference(const char* value, size_t size) {
  metadata_source_reference_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mead101.mead.Usage.metadata_source_reference)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Usage::metadata_source_reference() const {
  // @@protoc_insertion_point(field_list:mead101.mead.Usage.metadata_source_reference)
  return metadata_source_reference_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Usage::mutable_metadata_source_reference() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.Usage.metadata_source_reference)
  return &metadata_source_reference_;
}

// repeated .mead101.mead.RelatedResource relevant_resource = 3;
inline int Usage::_internal_relevant_resource_size() const {
  return relevant_resource_.size();
}
inline int Usage::relevant_resource_size() const {
  return _internal_relevant_resource_size();
}
inline void Usage::clear_relevant_resource() {
  relevant_resource_.Clear();
}
inline ::mead101::mead::RelatedResource* Usage::mutable_relevant_resource(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Usage.relevant_resource)
  return relevant_resource_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::RelatedResource >*
Usage::mutable_relevant_resource() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.Usage.relevant_resource)
  return &relevant_resource_;
}
inline const ::mead101::mead::RelatedResource& Usage::_internal_relevant_resource(int index) const {
  return relevant_resource_.Get(index);
}
inline const ::mead101::mead::RelatedResource& Usage::relevant_resource(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.Usage.relevant_resource)
  return _internal_relevant_resource(index);
}
inline ::mead101::mead::RelatedResource* Usage::_internal_add_relevant_resource() {
  return relevant_resource_.Add();
}
inline ::mead101::mead::RelatedResource* Usage::add_relevant_resource() {
  // @@protoc_insertion_point(field_add:mead101.mead.Usage.relevant_resource)
  return _internal_add_relevant_resource();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::RelatedResource >&
Usage::relevant_resource() const {
  // @@protoc_insertion_point(field_list:mead101.mead.Usage.relevant_resource)
  return relevant_resource_;
}

// optional int32 sequence_number = 4;
inline bool Usage::_internal_has_sequence_number() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Usage::has_sequence_number() const {
  return _internal_has_sequence_number();
}
inline void Usage::clear_sequence_number() {
  sequence_number_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Usage::_internal_sequence_number() const {
  return sequence_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Usage::sequence_number() const {
  // @@protoc_insertion_point(field_get:mead101.mead.Usage.sequence_number)
  return _internal_sequence_number();
}
inline void Usage::_internal_set_sequence_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  sequence_number_ = value;
}
inline void Usage::set_sequence_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sequence_number(value);
  // @@protoc_insertion_point(field_set:mead101.mead.Usage.sequence_number)
}

// repeated .mead101.mead.EventDate usage_date = 5;
inline int Usage::_internal_usage_date_size() const {
  return usage_date_.size();
}
inline int Usage::usage_date_size() const {
  return _internal_usage_date_size();
}
inline void Usage::clear_usage_date() {
  usage_date_.Clear();
}
inline ::mead101::mead::EventDate* Usage::mutable_usage_date(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Usage.usage_date)
  return usage_date_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::EventDate >*
Usage::mutable_usage_date() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.Usage.usage_date)
  return &usage_date_;
}
inline const ::mead101::mead::EventDate& Usage::_internal_usage_date(int index) const {
  return usage_date_.Get(index);
}
inline const ::mead101::mead::EventDate& Usage::usage_date(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.Usage.usage_date)
  return _internal_usage_date(index);
}
inline ::mead101::mead::EventDate* Usage::_internal_add_usage_date() {
  return usage_date_.Add();
}
inline ::mead101::mead::EventDate* Usage::add_usage_date() {
  // @@protoc_insertion_point(field_add:mead101.mead.Usage.usage_date)
  return _internal_add_usage_date();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::EventDate >&
Usage::usage_date() const {
  // @@protoc_insertion_point(field_list:mead101.mead.Usage.usage_date)
  return usage_date_;
}

// repeated .mead101.mead.UsagePeriod usage_period = 6;
inline int Usage::_internal_usage_period_size() const {
  return usage_period_.size();
}
inline int Usage::usage_period_size() const {
  return _internal_usage_period_size();
}
inline void Usage::clear_usage_period() {
  usage_period_.Clear();
}
inline ::mead101::mead::UsagePeriod* Usage::mutable_usage_period(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Usage.usage_period)
  return usage_period_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::UsagePeriod >*
Usage::mutable_usage_period() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.Usage.usage_period)
  return &usage_period_;
}
inline const ::mead101::mead::UsagePeriod& Usage::_internal_usage_period(int index) const {
  return usage_period_.Get(index);
}
inline const ::mead101::mead::UsagePeriod& Usage::usage_period(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.Usage.usage_period)
  return _internal_usage_period(index);
}
inline ::mead101::mead::UsagePeriod* Usage::_internal_add_usage_period() {
  return usage_period_.Add();
}
inline ::mead101::mead::UsagePeriod* Usage::add_usage_period() {
  // @@protoc_insertion_point(field_add:mead101.mead.Usage.usage_period)
  return _internal_add_usage_period();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::UsagePeriod >&
Usage::usage_period() const {
  // @@protoc_insertion_point(field_list:mead101.mead.Usage.usage_period)
  return usage_period_;
}

// -------------------------------------------------------------------

// UsagePeriod

// optional .mead101.mead.EventDateWithoutFlags end_date = 1;
inline bool UsagePeriod::_internal_has_end_date() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || end_date_ != nullptr);
  return value;
}
inline bool UsagePeriod::has_end_date() const {
  return _internal_has_end_date();
}
inline void UsagePeriod::clear_end_date() {
  if (end_date_ != nullptr) end_date_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::mead101::mead::EventDateWithoutFlags& UsagePeriod::_internal_end_date() const {
  const ::mead101::mead::EventDateWithoutFlags* p = end_date_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::EventDateWithoutFlags*>(
      &::mead101::mead::_EventDateWithoutFlags_default_instance_);
}
inline const ::mead101::mead::EventDateWithoutFlags& UsagePeriod::end_date() const {
  // @@protoc_insertion_point(field_get:mead101.mead.UsagePeriod.end_date)
  return _internal_end_date();
}
inline void UsagePeriod::unsafe_arena_set_allocated_end_date(
    ::mead101::mead::EventDateWithoutFlags* end_date) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_date_);
  }
  end_date_ = end_date;
  if (end_date) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.UsagePeriod.end_date)
}
inline ::mead101::mead::EventDateWithoutFlags* UsagePeriod::release_end_date() {
  _has_bits_[0] &= ~0x00000001u;
  ::mead101::mead::EventDateWithoutFlags* temp = end_date_;
  end_date_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::EventDateWithoutFlags* UsagePeriod::unsafe_arena_release_end_date() {
  // @@protoc_insertion_point(field_release:mead101.mead.UsagePeriod.end_date)
  _has_bits_[0] &= ~0x00000001u;
  ::mead101::mead::EventDateWithoutFlags* temp = end_date_;
  end_date_ = nullptr;
  return temp;
}
inline ::mead101::mead::EventDateWithoutFlags* UsagePeriod::_internal_mutable_end_date() {
  _has_bits_[0] |= 0x00000001u;
  if (end_date_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::EventDateWithoutFlags>(GetArena());
    end_date_ = p;
  }
  return end_date_;
}
inline ::mead101::mead::EventDateWithoutFlags* UsagePeriod::mutable_end_date() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.UsagePeriod.end_date)
  return _internal_mutable_end_date();
}
inline void UsagePeriod::set_allocated_end_date(::mead101::mead::EventDateWithoutFlags* end_date) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete end_date_;
  }
  if (end_date) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(end_date);
    if (message_arena != submessage_arena) {
      end_date = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end_date, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  end_date_ = end_date;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.UsagePeriod.end_date)
}

// optional .mead101.mead.EventDateWithoutFlags start_date = 2;
inline bool UsagePeriod::_internal_has_start_date() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || start_date_ != nullptr);
  return value;
}
inline bool UsagePeriod::has_start_date() const {
  return _internal_has_start_date();
}
inline void UsagePeriod::clear_start_date() {
  if (start_date_ != nullptr) start_date_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::mead101::mead::EventDateWithoutFlags& UsagePeriod::_internal_start_date() const {
  const ::mead101::mead::EventDateWithoutFlags* p = start_date_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::EventDateWithoutFlags*>(
      &::mead101::mead::_EventDateWithoutFlags_default_instance_);
}
inline const ::mead101::mead::EventDateWithoutFlags& UsagePeriod::start_date() const {
  // @@protoc_insertion_point(field_get:mead101.mead.UsagePeriod.start_date)
  return _internal_start_date();
}
inline void UsagePeriod::unsafe_arena_set_allocated_start_date(
    ::mead101::mead::EventDateWithoutFlags* start_date) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_date_);
  }
  start_date_ = start_date;
  if (start_date) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.UsagePeriod.start_date)
}
inline ::mead101::mead::EventDateWithoutFlags* UsagePeriod::release_start_date() {
  _has_bits_[0] &= ~0x00000002u;
  ::mead101::mead::EventDateWithoutFlags* temp = start_date_;
  start_date_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::EventDateWithoutFlags* UsagePeriod::unsafe_arena_release_start_date() {
  // @@protoc_insertion_point(field_release:mead101.mead.UsagePeriod.start_date)
  _has_bits_[0] &= ~0x00000002u;
  ::mead101::mead::EventDateWithoutFlags* temp = start_date_;
  start_date_ = nullptr;
  return temp;
}
inline ::mead101::mead::EventDateWithoutFlags* UsagePeriod::_internal_mutable_start_date() {
  _has_bits_[0] |= 0x00000002u;
  if (start_date_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::EventDateWithoutFlags>(GetArena());
    start_date_ = p;
  }
  return start_date_;
}
inline ::mead101::mead::EventDateWithoutFlags* UsagePeriod::mutable_start_date() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.UsagePeriod.start_date)
  return _internal_mutable_start_date();
}
inline void UsagePeriod::set_allocated_start_date(::mead101::mead::EventDateWithoutFlags* start_date) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete start_date_;
  }
  if (start_date) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(start_date);
    if (message_arena != submessage_arena) {
      start_date = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start_date, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  start_date_ = start_date;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.UsagePeriod.start_date)
}

// -------------------------------------------------------------------

// UsedMusicalWork

// repeated string metadata_source_reference = 1;
inline int UsedMusicalWork::_internal_metadata_source_reference_size() const {
  return metadata_source_reference_.size();
}
inline int UsedMusicalWork::metadata_source_reference_size() const {
  return _internal_metadata_source_reference_size();
}
inline void UsedMusicalWork::clear_metadata_source_reference() {
  metadata_source_reference_.Clear();
}
inline std::string* UsedMusicalWork::add_metadata_source_reference() {
  // @@protoc_insertion_point(field_add_mutable:mead101.mead.UsedMusicalWork.metadata_source_reference)
  return _internal_add_metadata_source_reference();
}
inline const std::string& UsedMusicalWork::_internal_metadata_source_reference(int index) const {
  return metadata_source_reference_.Get(index);
}
inline const std::string& UsedMusicalWork::metadata_source_reference(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.UsedMusicalWork.metadata_source_reference)
  return _internal_metadata_source_reference(index);
}
inline std::string* UsedMusicalWork::mutable_metadata_source_reference(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.UsedMusicalWork.metadata_source_reference)
  return metadata_source_reference_.Mutable(index);
}
inline void UsedMusicalWork::set_metadata_source_reference(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:mead101.mead.UsedMusicalWork.metadata_source_reference)
  metadata_source_reference_.Mutable(index)->assign(value);
}
inline void UsedMusicalWork::set_metadata_source_reference(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:mead101.mead.UsedMusicalWork.metadata_source_reference)
  metadata_source_reference_.Mutable(index)->assign(std::move(value));
}
inline void UsedMusicalWork::set_metadata_source_reference(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  metadata_source_reference_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mead101.mead.UsedMusicalWork.metadata_source_reference)
}
inline void UsedMusicalWork::set_metadata_source_reference(int index, const char* value, size_t size) {
  metadata_source_reference_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.UsedMusicalWork.metadata_source_reference)
}
inline std::string* UsedMusicalWork::_internal_add_metadata_source_reference() {
  return metadata_source_reference_.Add();
}
inline void UsedMusicalWork::add_metadata_source_reference(const std::string& value) {
  metadata_source_reference_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mead101.mead.UsedMusicalWork.metadata_source_reference)
}
inline void UsedMusicalWork::add_metadata_source_reference(std::string&& value) {
  metadata_source_reference_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:mead101.mead.UsedMusicalWork.metadata_source_reference)
}
inline void UsedMusicalWork::add_metadata_source_reference(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  metadata_source_reference_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mead101.mead.UsedMusicalWork.metadata_source_reference)
}
inline void UsedMusicalWork::add_metadata_source_reference(const char* value, size_t size) {
  metadata_source_reference_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mead101.mead.UsedMusicalWork.metadata_source_reference)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
UsedMusicalWork::metadata_source_reference() const {
  // @@protoc_insertion_point(field_list:mead101.mead.UsedMusicalWork.metadata_source_reference)
  return metadata_source_reference_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
UsedMusicalWork::mutable_metadata_source_reference() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.UsedMusicalWork.metadata_source_reference)
  return &metadata_source_reference_;
}

// repeated string resource_musical_work_reference = 2;
inline int UsedMusicalWork::_internal_resource_musical_work_reference_size() const {
  return resource_musical_work_reference_.size();
}
inline int UsedMusicalWork::resource_musical_work_reference_size() const {
  return _internal_resource_musical_work_reference_size();
}
inline void UsedMusicalWork::clear_resource_musical_work_reference() {
  resource_musical_work_reference_.Clear();
}
inline std::string* UsedMusicalWork::add_resource_musical_work_reference() {
  // @@protoc_insertion_point(field_add_mutable:mead101.mead.UsedMusicalWork.resource_musical_work_reference)
  return _internal_add_resource_musical_work_reference();
}
inline const std::string& UsedMusicalWork::_internal_resource_musical_work_reference(int index) const {
  return resource_musical_work_reference_.Get(index);
}
inline const std::string& UsedMusicalWork::resource_musical_work_reference(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.UsedMusicalWork.resource_musical_work_reference)
  return _internal_resource_musical_work_reference(index);
}
inline std::string* UsedMusicalWork::mutable_resource_musical_work_reference(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.UsedMusicalWork.resource_musical_work_reference)
  return resource_musical_work_reference_.Mutable(index);
}
inline void UsedMusicalWork::set_resource_musical_work_reference(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:mead101.mead.UsedMusicalWork.resource_musical_work_reference)
  resource_musical_work_reference_.Mutable(index)->assign(value);
}
inline void UsedMusicalWork::set_resource_musical_work_reference(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:mead101.mead.UsedMusicalWork.resource_musical_work_reference)
  resource_musical_work_reference_.Mutable(index)->assign(std::move(value));
}
inline void UsedMusicalWork::set_resource_musical_work_reference(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  resource_musical_work_reference_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mead101.mead.UsedMusicalWork.resource_musical_work_reference)
}
inline void UsedMusicalWork::set_resource_musical_work_reference(int index, const char* value, size_t size) {
  resource_musical_work_reference_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.UsedMusicalWork.resource_musical_work_reference)
}
inline std::string* UsedMusicalWork::_internal_add_resource_musical_work_reference() {
  return resource_musical_work_reference_.Add();
}
inline void UsedMusicalWork::add_resource_musical_work_reference(const std::string& value) {
  resource_musical_work_reference_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mead101.mead.UsedMusicalWork.resource_musical_work_reference)
}
inline void UsedMusicalWork::add_resource_musical_work_reference(std::string&& value) {
  resource_musical_work_reference_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:mead101.mead.UsedMusicalWork.resource_musical_work_reference)
}
inline void UsedMusicalWork::add_resource_musical_work_reference(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  resource_musical_work_reference_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mead101.mead.UsedMusicalWork.resource_musical_work_reference)
}
inline void UsedMusicalWork::add_resource_musical_work_reference(const char* value, size_t size) {
  resource_musical_work_reference_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mead101.mead.UsedMusicalWork.resource_musical_work_reference)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
UsedMusicalWork::resource_musical_work_reference() const {
  // @@protoc_insertion_point(field_list:mead101.mead.UsedMusicalWork.resource_musical_work_reference)
  return resource_musical_work_reference_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
UsedMusicalWork::mutable_resource_musical_work_reference() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.UsedMusicalWork.resource_musical_work_reference)
  return &resource_musical_work_reference_;
}

// -------------------------------------------------------------------

// Venue

// optional string location_code = 1;
inline bool Venue::_internal_has_location_code() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Venue::has_location_code() const {
  return _internal_has_location_code();
}
inline void Venue::clear_location_code() {
  location_code_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Venue::location_code() const {
  // @@protoc_insertion_point(field_get:mead101.mead.Venue.location_code)
  return _internal_location_code();
}
inline void Venue::set_location_code(const std::string& value) {
  _internal_set_location_code(value);
  // @@protoc_insertion_point(field_set:mead101.mead.Venue.location_code)
}
inline std::string* Venue::mutable_location_code() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Venue.location_code)
  return _internal_mutable_location_code();
}
inline const std::string& Venue::_internal_location_code() const {
  return location_code_.Get();
}
inline void Venue::_internal_set_location_code(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  location_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Venue::set_location_code(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  location_code_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.Venue.location_code)
}
inline void Venue::set_location_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  location_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.Venue.location_code)
}
inline void Venue::set_location_code(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  location_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.Venue.location_code)
}
inline std::string* Venue::_internal_mutable_location_code() {
  _has_bits_[0] |= 0x00000001u;
  return location_code_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Venue::release_location_code() {
  // @@protoc_insertion_point(field_release:mead101.mead.Venue.location_code)
  if (!_internal_has_location_code()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return location_code_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Venue::set_allocated_location_code(std::string* location_code) {
  if (location_code != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  location_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), location_code,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.Venue.location_code)
}

// optional .mead101.mead.AllTerritoryCode territory_code = 2;
inline bool Venue::_internal_has_territory_code() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || territory_code_ != nullptr);
  return value;
}
inline bool Venue::has_territory_code() const {
  return _internal_has_territory_code();
}
inline void Venue::clear_territory_code() {
  if (territory_code_ != nullptr) territory_code_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::mead101::mead::AllTerritoryCode& Venue::_internal_territory_code() const {
  const ::mead101::mead::AllTerritoryCode* p = territory_code_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::AllTerritoryCode*>(
      &::mead101::mead::_AllTerritoryCode_default_instance_);
}
inline const ::mead101::mead::AllTerritoryCode& Venue::territory_code() const {
  // @@protoc_insertion_point(field_get:mead101.mead.Venue.territory_code)
  return _internal_territory_code();
}
inline void Venue::unsafe_arena_set_allocated_territory_code(
    ::mead101::mead::AllTerritoryCode* territory_code) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(territory_code_);
  }
  territory_code_ = territory_code;
  if (territory_code) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.Venue.territory_code)
}
inline ::mead101::mead::AllTerritoryCode* Venue::release_territory_code() {
  _has_bits_[0] &= ~0x00000010u;
  ::mead101::mead::AllTerritoryCode* temp = territory_code_;
  territory_code_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::AllTerritoryCode* Venue::unsafe_arena_release_territory_code() {
  // @@protoc_insertion_point(field_release:mead101.mead.Venue.territory_code)
  _has_bits_[0] &= ~0x00000010u;
  ::mead101::mead::AllTerritoryCode* temp = territory_code_;
  territory_code_ = nullptr;
  return temp;
}
inline ::mead101::mead::AllTerritoryCode* Venue::_internal_mutable_territory_code() {
  _has_bits_[0] |= 0x00000010u;
  if (territory_code_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::AllTerritoryCode>(GetArena());
    territory_code_ = p;
  }
  return territory_code_;
}
inline ::mead101::mead::AllTerritoryCode* Venue::mutable_territory_code() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Venue.territory_code)
  return _internal_mutable_territory_code();
}
inline void Venue::set_allocated_territory_code(::mead101::mead::AllTerritoryCode* territory_code) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete territory_code_;
  }
  if (territory_code) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(territory_code);
    if (message_arena != submessage_arena) {
      territory_code = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, territory_code, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  territory_code_ = territory_code;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.Venue.territory_code)
}

// optional string venue_address = 3;
inline bool Venue::_internal_has_venue_address() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Venue::has_venue_address() const {
  return _internal_has_venue_address();
}
inline void Venue::clear_venue_address() {
  venue_address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Venue::venue_address() const {
  // @@protoc_insertion_point(field_get:mead101.mead.Venue.venue_address)
  return _internal_venue_address();
}
inline void Venue::set_venue_address(const std::string& value) {
  _internal_set_venue_address(value);
  // @@protoc_insertion_point(field_set:mead101.mead.Venue.venue_address)
}
inline std::string* Venue::mutable_venue_address() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Venue.venue_address)
  return _internal_mutable_venue_address();
}
inline const std::string& Venue::_internal_venue_address() const {
  return venue_address_.Get();
}
inline void Venue::_internal_set_venue_address(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  venue_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Venue::set_venue_address(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  venue_address_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.Venue.venue_address)
}
inline void Venue::set_venue_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  venue_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.Venue.venue_address)
}
inline void Venue::set_venue_address(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  venue_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.Venue.venue_address)
}
inline std::string* Venue::_internal_mutable_venue_address() {
  _has_bits_[0] |= 0x00000002u;
  return venue_address_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Venue::release_venue_address() {
  // @@protoc_insertion_point(field_release:mead101.mead.Venue.venue_address)
  if (!_internal_has_venue_address()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return venue_address_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Venue::set_allocated_venue_address(std::string* venue_address) {
  if (venue_address != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  venue_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), venue_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.Venue.venue_address)
}

// optional string venue_name = 4;
inline bool Venue::_internal_has_venue_name() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Venue::has_venue_name() const {
  return _internal_has_venue_name();
}
inline void Venue::clear_venue_name() {
  venue_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Venue::venue_name() const {
  // @@protoc_insertion_point(field_get:mead101.mead.Venue.venue_name)
  return _internal_venue_name();
}
inline void Venue::set_venue_name(const std::string& value) {
  _internal_set_venue_name(value);
  // @@protoc_insertion_point(field_set:mead101.mead.Venue.venue_name)
}
inline std::string* Venue::mutable_venue_name() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Venue.venue_name)
  return _internal_mutable_venue_name();
}
inline const std::string& Venue::_internal_venue_name() const {
  return venue_name_.Get();
}
inline void Venue::_internal_set_venue_name(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  venue_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Venue::set_venue_name(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  venue_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.Venue.venue_name)
}
inline void Venue::set_venue_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  venue_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.Venue.venue_name)
}
inline void Venue::set_venue_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  venue_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.Venue.venue_name)
}
inline std::string* Venue::_internal_mutable_venue_name() {
  _has_bits_[0] |= 0x00000004u;
  return venue_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Venue::release_venue_name() {
  // @@protoc_insertion_point(field_release:mead101.mead.Venue.venue_name)
  if (!_internal_has_venue_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return venue_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Venue::set_allocated_venue_name(std::string* venue_name) {
  if (venue_name != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  venue_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), venue_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.Venue.venue_name)
}

// optional string venue_room = 5;
inline bool Venue::_internal_has_venue_room() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Venue::has_venue_room() const {
  return _internal_has_venue_room();
}
inline void Venue::clear_venue_room() {
  venue_room_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& Venue::venue_room() const {
  // @@protoc_insertion_point(field_get:mead101.mead.Venue.venue_room)
  return _internal_venue_room();
}
inline void Venue::set_venue_room(const std::string& value) {
  _internal_set_venue_room(value);
  // @@protoc_insertion_point(field_set:mead101.mead.Venue.venue_room)
}
inline std::string* Venue::mutable_venue_room() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Venue.venue_room)
  return _internal_mutable_venue_room();
}
inline const std::string& Venue::_internal_venue_room() const {
  return venue_room_.Get();
}
inline void Venue::_internal_set_venue_room(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  venue_room_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Venue::set_venue_room(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  venue_room_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.Venue.venue_room)
}
inline void Venue::set_venue_room(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  venue_room_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.Venue.venue_room)
}
inline void Venue::set_venue_room(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  venue_room_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.Venue.venue_room)
}
inline std::string* Venue::_internal_mutable_venue_room() {
  _has_bits_[0] |= 0x00000008u;
  return venue_room_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Venue::release_venue_room() {
  // @@protoc_insertion_point(field_release:mead101.mead.Venue.venue_room)
  if (!_internal_has_venue_room()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return venue_room_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Venue::set_allocated_venue_room(std::string* venue_room) {
  if (venue_room != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  venue_room_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), venue_room,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.Venue.venue_room)
}

// -------------------------------------------------------------------

// VocalRegister

// repeated string metadata_source_reference = 1;
inline int VocalRegister::_internal_metadata_source_reference_size() const {
  return metadata_source_reference_.size();
}
inline int VocalRegister::metadata_source_reference_size() const {
  return _internal_metadata_source_reference_size();
}
inline void VocalRegister::clear_metadata_source_reference() {
  metadata_source_reference_.Clear();
}
inline std::string* VocalRegister::add_metadata_source_reference() {
  // @@protoc_insertion_point(field_add_mutable:mead101.mead.VocalRegister.metadata_source_reference)
  return _internal_add_metadata_source_reference();
}
inline const std::string& VocalRegister::_internal_metadata_source_reference(int index) const {
  return metadata_source_reference_.Get(index);
}
inline const std::string& VocalRegister::metadata_source_reference(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.VocalRegister.metadata_source_reference)
  return _internal_metadata_source_reference(index);
}
inline std::string* VocalRegister::mutable_metadata_source_reference(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.VocalRegister.metadata_source_reference)
  return metadata_source_reference_.Mutable(index);
}
inline void VocalRegister::set_metadata_source_reference(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:mead101.mead.VocalRegister.metadata_source_reference)
  metadata_source_reference_.Mutable(index)->assign(value);
}
inline void VocalRegister::set_metadata_source_reference(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:mead101.mead.VocalRegister.metadata_source_reference)
  metadata_source_reference_.Mutable(index)->assign(std::move(value));
}
inline void VocalRegister::set_metadata_source_reference(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  metadata_source_reference_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mead101.mead.VocalRegister.metadata_source_reference)
}
inline void VocalRegister::set_metadata_source_reference(int index, const char* value, size_t size) {
  metadata_source_reference_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.VocalRegister.metadata_source_reference)
}
inline std::string* VocalRegister::_internal_add_metadata_source_reference() {
  return metadata_source_reference_.Add();
}
inline void VocalRegister::add_metadata_source_reference(const std::string& value) {
  metadata_source_reference_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mead101.mead.VocalRegister.metadata_source_reference)
}
inline void VocalRegister::add_metadata_source_reference(std::string&& value) {
  metadata_source_reference_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:mead101.mead.VocalRegister.metadata_source_reference)
}
inline void VocalRegister::add_metadata_source_reference(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  metadata_source_reference_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mead101.mead.VocalRegister.metadata_source_reference)
}
inline void VocalRegister::add_metadata_source_reference(const char* value, size_t size) {
  metadata_source_reference_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mead101.mead.VocalRegister.metadata_source_reference)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
VocalRegister::metadata_source_reference() const {
  // @@protoc_insertion_point(field_list:mead101.mead.VocalRegister.metadata_source_reference)
  return metadata_source_reference_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
VocalRegister::mutable_metadata_source_reference() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.VocalRegister.metadata_source_reference)
  return &metadata_source_reference_;
}

// optional .mead101.mead.VocalRegisterValue value = 2;
inline bool VocalRegister::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || value_ != nullptr);
  return value;
}
inline bool VocalRegister::has_value() const {
  return _internal_has_value();
}
inline void VocalRegister::clear_value() {
  if (value_ != nullptr) value_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::mead101::mead::VocalRegisterValue& VocalRegister::_internal_value() const {
  const ::mead101::mead::VocalRegisterValue* p = value_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::VocalRegisterValue*>(
      &::mead101::mead::_VocalRegisterValue_default_instance_);
}
inline const ::mead101::mead::VocalRegisterValue& VocalRegister::value() const {
  // @@protoc_insertion_point(field_get:mead101.mead.VocalRegister.value)
  return _internal_value();
}
inline void VocalRegister::unsafe_arena_set_allocated_value(
    ::mead101::mead::VocalRegisterValue* value) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(value_);
  }
  value_ = value;
  if (value) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.VocalRegister.value)
}
inline ::mead101::mead::VocalRegisterValue* VocalRegister::release_value() {
  _has_bits_[0] &= ~0x00000001u;
  ::mead101::mead::VocalRegisterValue* temp = value_;
  value_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::VocalRegisterValue* VocalRegister::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_release:mead101.mead.VocalRegister.value)
  _has_bits_[0] &= ~0x00000001u;
  ::mead101::mead::VocalRegisterValue* temp = value_;
  value_ = nullptr;
  return temp;
}
inline ::mead101::mead::VocalRegisterValue* VocalRegister::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000001u;
  if (value_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::VocalRegisterValue>(GetArena());
    value_ = p;
  }
  return value_;
}
inline ::mead101::mead::VocalRegisterValue* VocalRegister::mutable_value() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.VocalRegister.value)
  return _internal_mutable_value();
}
inline void VocalRegister::set_allocated_value(::mead101::mead::VocalRegisterValue* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete value_;
  }
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(value);
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.VocalRegister.value)
}

// -------------------------------------------------------------------

// VocalRegisterValue

// optional string namespace = 1;
inline bool VocalRegisterValue::_internal_has_namespace_() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool VocalRegisterValue::has_namespace_() const {
  return _internal_has_namespace_();
}
inline void VocalRegisterValue::clear_namespace_() {
  namespace__.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& VocalRegisterValue::namespace_() const {
  // @@protoc_insertion_point(field_get:mead101.mead.VocalRegisterValue.namespace)
  return _internal_namespace_();
}
inline void VocalRegisterValue::set_namespace_(const std::string& value) {
  _internal_set_namespace_(value);
  // @@protoc_insertion_point(field_set:mead101.mead.VocalRegisterValue.namespace)
}
inline std::string* VocalRegisterValue::mutable_namespace_() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.VocalRegisterValue.namespace)
  return _internal_mutable_namespace_();
}
inline const std::string& VocalRegisterValue::_internal_namespace_() const {
  return namespace__.Get();
}
inline void VocalRegisterValue::_internal_set_namespace_(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void VocalRegisterValue::set_namespace_(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  namespace__.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.VocalRegisterValue.namespace)
}
inline void VocalRegisterValue::set_namespace_(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.VocalRegisterValue.namespace)
}
inline void VocalRegisterValue::set_namespace_(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.VocalRegisterValue.namespace)
}
inline std::string* VocalRegisterValue::_internal_mutable_namespace_() {
  _has_bits_[0] |= 0x00000001u;
  return namespace__.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* VocalRegisterValue::release_namespace_() {
  // @@protoc_insertion_point(field_release:mead101.mead.VocalRegisterValue.namespace)
  if (!_internal_has_namespace_()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return namespace__.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void VocalRegisterValue::set_allocated_namespace_(std::string* namespace_) {
  if (namespace_ != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  namespace__.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), namespace_,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.VocalRegisterValue.namespace)
}

// optional string user_defined_value = 2;
inline bool VocalRegisterValue::_internal_has_user_defined_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool VocalRegisterValue::has_user_defined_value() const {
  return _internal_has_user_defined_value();
}
inline void VocalRegisterValue::clear_user_defined_value() {
  user_defined_value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& VocalRegisterValue::user_defined_value() const {
  // @@protoc_insertion_point(field_get:mead101.mead.VocalRegisterValue.user_defined_value)
  return _internal_user_defined_value();
}
inline void VocalRegisterValue::set_user_defined_value(const std::string& value) {
  _internal_set_user_defined_value(value);
  // @@protoc_insertion_point(field_set:mead101.mead.VocalRegisterValue.user_defined_value)
}
inline std::string* VocalRegisterValue::mutable_user_defined_value() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.VocalRegisterValue.user_defined_value)
  return _internal_mutable_user_defined_value();
}
inline const std::string& VocalRegisterValue::_internal_user_defined_value() const {
  return user_defined_value_.Get();
}
inline void VocalRegisterValue::_internal_set_user_defined_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void VocalRegisterValue::set_user_defined_value(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  user_defined_value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.VocalRegisterValue.user_defined_value)
}
inline void VocalRegisterValue::set_user_defined_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.VocalRegisterValue.user_defined_value)
}
inline void VocalRegisterValue::set_user_defined_value(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.VocalRegisterValue.user_defined_value)
}
inline std::string* VocalRegisterValue::_internal_mutable_user_defined_value() {
  _has_bits_[0] |= 0x00000002u;
  return user_defined_value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* VocalRegisterValue::release_user_defined_value() {
  // @@protoc_insertion_point(field_release:mead101.mead.VocalRegisterValue.user_defined_value)
  if (!_internal_has_user_defined_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return user_defined_value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void VocalRegisterValue::set_allocated_user_defined_value(std::string* user_defined_value) {
  if (user_defined_value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  user_defined_value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_defined_value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.VocalRegisterValue.user_defined_value)
}

// optional .mead101.avs.VocalRegister ext_value = 3;
inline bool VocalRegisterValue::_internal_has_ext_value() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || ext_value_ != nullptr);
  return value;
}
inline bool VocalRegisterValue::has_ext_value() const {
  return _internal_has_ext_value();
}
inline const ::mead101::avs::VocalRegister& VocalRegisterValue::_internal_ext_value() const {
  const ::mead101::avs::VocalRegister* p = ext_value_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::avs::VocalRegister*>(
      &::mead101::avs::_VocalRegister_default_instance_);
}
inline const ::mead101::avs::VocalRegister& VocalRegisterValue::ext_value() const {
  // @@protoc_insertion_point(field_get:mead101.mead.VocalRegisterValue.ext_value)
  return _internal_ext_value();
}
inline void VocalRegisterValue::unsafe_arena_set_allocated_ext_value(
    ::mead101::avs::VocalRegister* ext_value) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext_value_);
  }
  ext_value_ = ext_value;
  if (ext_value) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.VocalRegisterValue.ext_value)
}
inline ::mead101::avs::VocalRegister* VocalRegisterValue::release_ext_value() {
  _has_bits_[0] &= ~0x00000004u;
  ::mead101::avs::VocalRegister* temp = ext_value_;
  ext_value_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::avs::VocalRegister* VocalRegisterValue::unsafe_arena_release_ext_value() {
  // @@protoc_insertion_point(field_release:mead101.mead.VocalRegisterValue.ext_value)
  _has_bits_[0] &= ~0x00000004u;
  ::mead101::avs::VocalRegister* temp = ext_value_;
  ext_value_ = nullptr;
  return temp;
}
inline ::mead101::avs::VocalRegister* VocalRegisterValue::_internal_mutable_ext_value() {
  _has_bits_[0] |= 0x00000004u;
  if (ext_value_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::avs::VocalRegister>(GetArena());
    ext_value_ = p;
  }
  return ext_value_;
}
inline ::mead101::avs::VocalRegister* VocalRegisterValue::mutable_ext_value() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.VocalRegisterValue.ext_value)
  return _internal_mutable_ext_value();
}
inline void VocalRegisterValue::set_allocated_ext_value(::mead101::avs::VocalRegister* ext_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext_value_);
  }
  if (ext_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext_value)->GetArena();
    if (message_arena != submessage_arena) {
      ext_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext_value, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  ext_value_ = ext_value;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.VocalRegisterValue.ext_value)
}

// -------------------------------------------------------------------

// Work

// optional string i_s_w_c = 1;
inline bool Work::_internal_has_i_s_w_c() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Work::has_i_s_w_c() const {
  return _internal_has_i_s_w_c();
}
inline void Work::clear_i_s_w_c() {
  i_s_w_c_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Work::i_s_w_c() const {
  // @@protoc_insertion_point(field_get:mead101.mead.Work.i_s_w_c)
  return _internal_i_s_w_c();
}
inline void Work::set_i_s_w_c(const std::string& value) {
  _internal_set_i_s_w_c(value);
  // @@protoc_insertion_point(field_set:mead101.mead.Work.i_s_w_c)
}
inline std::string* Work::mutable_i_s_w_c() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Work.i_s_w_c)
  return _internal_mutable_i_s_w_c();
}
inline const std::string& Work::_internal_i_s_w_c() const {
  return i_s_w_c_.Get();
}
inline void Work::_internal_set_i_s_w_c(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  i_s_w_c_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Work::set_i_s_w_c(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  i_s_w_c_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.Work.i_s_w_c)
}
inline void Work::set_i_s_w_c(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  i_s_w_c_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.Work.i_s_w_c)
}
inline void Work::set_i_s_w_c(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  i_s_w_c_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.Work.i_s_w_c)
}
inline std::string* Work::_internal_mutable_i_s_w_c() {
  _has_bits_[0] |= 0x00000001u;
  return i_s_w_c_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Work::release_i_s_w_c() {
  // @@protoc_insertion_point(field_release:mead101.mead.Work.i_s_w_c)
  if (!_internal_has_i_s_w_c()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return i_s_w_c_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Work::set_allocated_i_s_w_c(std::string* i_s_w_c) {
  if (i_s_w_c != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  i_s_w_c_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), i_s_w_c,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.Work.i_s_w_c)
}

// optional string proprietary_work_id = 2;
inline bool Work::_internal_has_proprietary_work_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Work::has_proprietary_work_id() const {
  return _internal_has_proprietary_work_id();
}
inline void Work::clear_proprietary_work_id() {
  proprietary_work_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Work::proprietary_work_id() const {
  // @@protoc_insertion_point(field_get:mead101.mead.Work.proprietary_work_id)
  return _internal_proprietary_work_id();
}
inline void Work::set_proprietary_work_id(const std::string& value) {
  _internal_set_proprietary_work_id(value);
  // @@protoc_insertion_point(field_set:mead101.mead.Work.proprietary_work_id)
}
inline std::string* Work::mutable_proprietary_work_id() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Work.proprietary_work_id)
  return _internal_mutable_proprietary_work_id();
}
inline const std::string& Work::_internal_proprietary_work_id() const {
  return proprietary_work_id_.Get();
}
inline void Work::_internal_set_proprietary_work_id(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  proprietary_work_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Work::set_proprietary_work_id(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  proprietary_work_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.Work.proprietary_work_id)
}
inline void Work::set_proprietary_work_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  proprietary_work_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.Work.proprietary_work_id)
}
inline void Work::set_proprietary_work_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  proprietary_work_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.Work.proprietary_work_id)
}
inline std::string* Work::_internal_mutable_proprietary_work_id() {
  _has_bits_[0] |= 0x00000002u;
  return proprietary_work_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Work::release_proprietary_work_id() {
  // @@protoc_insertion_point(field_release:mead101.mead.Work.proprietary_work_id)
  if (!_internal_has_proprietary_work_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return proprietary_work_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Work::set_allocated_proprietary_work_id(std::string* proprietary_work_id) {
  if (proprietary_work_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  proprietary_work_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), proprietary_work_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.Work.proprietary_work_id)
}

// repeated .mead101.mead.WorkTitle work_title = 3;
inline int Work::_internal_work_title_size() const {
  return work_title_.size();
}
inline int Work::work_title_size() const {
  return _internal_work_title_size();
}
inline void Work::clear_work_title() {
  work_title_.Clear();
}
inline ::mead101::mead::WorkTitle* Work::mutable_work_title(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Work.work_title)
  return work_title_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::WorkTitle >*
Work::mutable_work_title() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.Work.work_title)
  return &work_title_;
}
inline const ::mead101::mead::WorkTitle& Work::_internal_work_title(int index) const {
  return work_title_.Get(index);
}
inline const ::mead101::mead::WorkTitle& Work::work_title(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.Work.work_title)
  return _internal_work_title(index);
}
inline ::mead101::mead::WorkTitle* Work::_internal_add_work_title() {
  return work_title_.Add();
}
inline ::mead101::mead::WorkTitle* Work::add_work_title() {
  // @@protoc_insertion_point(field_add:mead101.mead.Work.work_title)
  return _internal_add_work_title();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::WorkTitle >&
Work::work_title() const {
  // @@protoc_insertion_point(field_list:mead101.mead.Work.work_title)
  return work_title_;
}

// repeated .mead101.mead.PartyWithNames writer = 4;
inline int Work::_internal_writer_size() const {
  return writer_.size();
}
inline int Work::writer_size() const {
  return _internal_writer_size();
}
inline void Work::clear_writer() {
  writer_.Clear();
}
inline ::mead101::mead::PartyWithNames* Work::mutable_writer(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.Work.writer)
  return writer_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::PartyWithNames >*
Work::mutable_writer() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.Work.writer)
  return &writer_;
}
inline const ::mead101::mead::PartyWithNames& Work::_internal_writer(int index) const {
  return writer_.Get(index);
}
inline const ::mead101::mead::PartyWithNames& Work::writer(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.Work.writer)
  return _internal_writer(index);
}
inline ::mead101::mead::PartyWithNames* Work::_internal_add_writer() {
  return writer_.Add();
}
inline ::mead101::mead::PartyWithNames* Work::add_writer() {
  // @@protoc_insertion_point(field_add:mead101.mead.Work.writer)
  return _internal_add_writer();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::PartyWithNames >&
Work::writer() const {
  // @@protoc_insertion_point(field_list:mead101.mead.Work.writer)
  return writer_;
}

// -------------------------------------------------------------------

// WorkHierarchy

// repeated .mead101.mead.ChildWorkHierarchy child = 1;
inline int WorkHierarchy::_internal_child_size() const {
  return child_.size();
}
inline int WorkHierarchy::child_size() const {
  return _internal_child_size();
}
inline void WorkHierarchy::clear_child() {
  child_.Clear();
}
inline ::mead101::mead::ChildWorkHierarchy* WorkHierarchy::mutable_child(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.WorkHierarchy.child)
  return child_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::ChildWorkHierarchy >*
WorkHierarchy::mutable_child() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.WorkHierarchy.child)
  return &child_;
}
inline const ::mead101::mead::ChildWorkHierarchy& WorkHierarchy::_internal_child(int index) const {
  return child_.Get(index);
}
inline const ::mead101::mead::ChildWorkHierarchy& WorkHierarchy::child(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.WorkHierarchy.child)
  return _internal_child(index);
}
inline ::mead101::mead::ChildWorkHierarchy* WorkHierarchy::_internal_add_child() {
  return child_.Add();
}
inline ::mead101::mead::ChildWorkHierarchy* WorkHierarchy::add_child() {
  // @@protoc_insertion_point(field_add:mead101.mead.WorkHierarchy.child)
  return _internal_add_child();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::ChildWorkHierarchy >&
WorkHierarchy::child() const {
  // @@protoc_insertion_point(field_list:mead101.mead.WorkHierarchy.child)
  return child_;
}

// optional .mead101.mead.Form form = 2;
inline bool WorkHierarchy::_internal_has_form() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || form_ != nullptr);
  return value;
}
inline bool WorkHierarchy::has_form() const {
  return _internal_has_form();
}
inline void WorkHierarchy::clear_form() {
  if (form_ != nullptr) form_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::mead101::mead::Form& WorkHierarchy::_internal_form() const {
  const ::mead101::mead::Form* p = form_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::Form*>(
      &::mead101::mead::_Form_default_instance_);
}
inline const ::mead101::mead::Form& WorkHierarchy::form() const {
  // @@protoc_insertion_point(field_get:mead101.mead.WorkHierarchy.form)
  return _internal_form();
}
inline void WorkHierarchy::unsafe_arena_set_allocated_form(
    ::mead101::mead::Form* form) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(form_);
  }
  form_ = form;
  if (form) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.WorkHierarchy.form)
}
inline ::mead101::mead::Form* WorkHierarchy::release_form() {
  _has_bits_[0] &= ~0x00000001u;
  ::mead101::mead::Form* temp = form_;
  form_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::Form* WorkHierarchy::unsafe_arena_release_form() {
  // @@protoc_insertion_point(field_release:mead101.mead.WorkHierarchy.form)
  _has_bits_[0] &= ~0x00000001u;
  ::mead101::mead::Form* temp = form_;
  form_ = nullptr;
  return temp;
}
inline ::mead101::mead::Form* WorkHierarchy::_internal_mutable_form() {
  _has_bits_[0] |= 0x00000001u;
  if (form_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::Form>(GetArena());
    form_ = p;
  }
  return form_;
}
inline ::mead101::mead::Form* WorkHierarchy::mutable_form() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.WorkHierarchy.form)
  return _internal_mutable_form();
}
inline void WorkHierarchy::set_allocated_form(::mead101::mead::Form* form) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete form_;
  }
  if (form) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(form);
    if (message_arena != submessage_arena) {
      form = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, form, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  form_ = form;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.WorkHierarchy.form)
}

// optional bool is_complete = 3;
inline bool WorkHierarchy::_internal_has_is_complete() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool WorkHierarchy::has_is_complete() const {
  return _internal_has_is_complete();
}
inline void WorkHierarchy::clear_is_complete() {
  is_complete_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool WorkHierarchy::_internal_is_complete() const {
  return is_complete_;
}
inline bool WorkHierarchy::is_complete() const {
  // @@protoc_insertion_point(field_get:mead101.mead.WorkHierarchy.is_complete)
  return _internal_is_complete();
}
inline void WorkHierarchy::_internal_set_is_complete(bool value) {
  _has_bits_[0] |= 0x00000004u;
  is_complete_ = value;
}
inline void WorkHierarchy::set_is_complete(bool value) {
  _internal_set_is_complete(value);
  // @@protoc_insertion_point(field_set:mead101.mead.WorkHierarchy.is_complete)
}

// optional bool is_described_element = 4;
inline bool WorkHierarchy::_internal_has_is_described_element() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool WorkHierarchy::has_is_described_element() const {
  return _internal_has_is_described_element();
}
inline void WorkHierarchy::clear_is_described_element() {
  is_described_element_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool WorkHierarchy::_internal_is_described_element() const {
  return is_described_element_;
}
inline bool WorkHierarchy::is_described_element() const {
  // @@protoc_insertion_point(field_get:mead101.mead.WorkHierarchy.is_described_element)
  return _internal_is_described_element();
}
inline void WorkHierarchy::_internal_set_is_described_element(bool value) {
  _has_bits_[0] |= 0x00000008u;
  is_described_element_ = value;
}
inline void WorkHierarchy::set_is_described_element(bool value) {
  _internal_set_is_described_element(value);
  // @@protoc_insertion_point(field_set:mead101.mead.WorkHierarchy.is_described_element)
}

// repeated string metadata_source_reference = 5;
inline int WorkHierarchy::_internal_metadata_source_reference_size() const {
  return metadata_source_reference_.size();
}
inline int WorkHierarchy::metadata_source_reference_size() const {
  return _internal_metadata_source_reference_size();
}
inline void WorkHierarchy::clear_metadata_source_reference() {
  metadata_source_reference_.Clear();
}
inline std::string* WorkHierarchy::add_metadata_source_reference() {
  // @@protoc_insertion_point(field_add_mutable:mead101.mead.WorkHierarchy.metadata_source_reference)
  return _internal_add_metadata_source_reference();
}
inline const std::string& WorkHierarchy::_internal_metadata_source_reference(int index) const {
  return metadata_source_reference_.Get(index);
}
inline const std::string& WorkHierarchy::metadata_source_reference(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.WorkHierarchy.metadata_source_reference)
  return _internal_metadata_source_reference(index);
}
inline std::string* WorkHierarchy::mutable_metadata_source_reference(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.WorkHierarchy.metadata_source_reference)
  return metadata_source_reference_.Mutable(index);
}
inline void WorkHierarchy::set_metadata_source_reference(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:mead101.mead.WorkHierarchy.metadata_source_reference)
  metadata_source_reference_.Mutable(index)->assign(value);
}
inline void WorkHierarchy::set_metadata_source_reference(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:mead101.mead.WorkHierarchy.metadata_source_reference)
  metadata_source_reference_.Mutable(index)->assign(std::move(value));
}
inline void WorkHierarchy::set_metadata_source_reference(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  metadata_source_reference_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mead101.mead.WorkHierarchy.metadata_source_reference)
}
inline void WorkHierarchy::set_metadata_source_reference(int index, const char* value, size_t size) {
  metadata_source_reference_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.WorkHierarchy.metadata_source_reference)
}
inline std::string* WorkHierarchy::_internal_add_metadata_source_reference() {
  return metadata_source_reference_.Add();
}
inline void WorkHierarchy::add_metadata_source_reference(const std::string& value) {
  metadata_source_reference_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mead101.mead.WorkHierarchy.metadata_source_reference)
}
inline void WorkHierarchy::add_metadata_source_reference(std::string&& value) {
  metadata_source_reference_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:mead101.mead.WorkHierarchy.metadata_source_reference)
}
inline void WorkHierarchy::add_metadata_source_reference(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  metadata_source_reference_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mead101.mead.WorkHierarchy.metadata_source_reference)
}
inline void WorkHierarchy::add_metadata_source_reference(const char* value, size_t size) {
  metadata_source_reference_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mead101.mead.WorkHierarchy.metadata_source_reference)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
WorkHierarchy::metadata_source_reference() const {
  // @@protoc_insertion_point(field_list:mead101.mead.WorkHierarchy.metadata_source_reference)
  return metadata_source_reference_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
WorkHierarchy::mutable_metadata_source_reference() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.WorkHierarchy.metadata_source_reference)
  return &metadata_source_reference_;
}

// optional int32 sequence_number = 6;
inline bool WorkHierarchy::_internal_has_sequence_number() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool WorkHierarchy::has_sequence_number() const {
  return _internal_has_sequence_number();
}
inline void WorkHierarchy::clear_sequence_number() {
  sequence_number_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WorkHierarchy::_internal_sequence_number() const {
  return sequence_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WorkHierarchy::sequence_number() const {
  // @@protoc_insertion_point(field_get:mead101.mead.WorkHierarchy.sequence_number)
  return _internal_sequence_number();
}
inline void WorkHierarchy::_internal_set_sequence_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  sequence_number_ = value;
}
inline void WorkHierarchy::set_sequence_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sequence_number(value);
  // @@protoc_insertion_point(field_set:mead101.mead.WorkHierarchy.sequence_number)
}

// optional .mead101.mead.MusicalWorkId work_id = 7;
inline bool WorkHierarchy::_internal_has_work_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || work_id_ != nullptr);
  return value;
}
inline bool WorkHierarchy::has_work_id() const {
  return _internal_has_work_id();
}
inline void WorkHierarchy::clear_work_id() {
  if (work_id_ != nullptr) work_id_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::mead101::mead::MusicalWorkId& WorkHierarchy::_internal_work_id() const {
  const ::mead101::mead::MusicalWorkId* p = work_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::MusicalWorkId*>(
      &::mead101::mead::_MusicalWorkId_default_instance_);
}
inline const ::mead101::mead::MusicalWorkId& WorkHierarchy::work_id() const {
  // @@protoc_insertion_point(field_get:mead101.mead.WorkHierarchy.work_id)
  return _internal_work_id();
}
inline void WorkHierarchy::unsafe_arena_set_allocated_work_id(
    ::mead101::mead::MusicalWorkId* work_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(work_id_);
  }
  work_id_ = work_id;
  if (work_id) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.WorkHierarchy.work_id)
}
inline ::mead101::mead::MusicalWorkId* WorkHierarchy::release_work_id() {
  _has_bits_[0] &= ~0x00000002u;
  ::mead101::mead::MusicalWorkId* temp = work_id_;
  work_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::MusicalWorkId* WorkHierarchy::unsafe_arena_release_work_id() {
  // @@protoc_insertion_point(field_release:mead101.mead.WorkHierarchy.work_id)
  _has_bits_[0] &= ~0x00000002u;
  ::mead101::mead::MusicalWorkId* temp = work_id_;
  work_id_ = nullptr;
  return temp;
}
inline ::mead101::mead::MusicalWorkId* WorkHierarchy::_internal_mutable_work_id() {
  _has_bits_[0] |= 0x00000002u;
  if (work_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::MusicalWorkId>(GetArena());
    work_id_ = p;
  }
  return work_id_;
}
inline ::mead101::mead::MusicalWorkId* WorkHierarchy::mutable_work_id() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.WorkHierarchy.work_id)
  return _internal_mutable_work_id();
}
inline void WorkHierarchy::set_allocated_work_id(::mead101::mead::MusicalWorkId* work_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete work_id_;
  }
  if (work_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(work_id);
    if (message_arena != submessage_arena) {
      work_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, work_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  work_id_ = work_id;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.WorkHierarchy.work_id)
}

// repeated .mead101.mead.WorkTitle work_title = 8;
inline int WorkHierarchy::_internal_work_title_size() const {
  return work_title_.size();
}
inline int WorkHierarchy::work_title_size() const {
  return _internal_work_title_size();
}
inline void WorkHierarchy::clear_work_title() {
  work_title_.Clear();
}
inline ::mead101::mead::WorkTitle* WorkHierarchy::mutable_work_title(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.WorkHierarchy.work_title)
  return work_title_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::WorkTitle >*
WorkHierarchy::mutable_work_title() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.WorkHierarchy.work_title)
  return &work_title_;
}
inline const ::mead101::mead::WorkTitle& WorkHierarchy::_internal_work_title(int index) const {
  return work_title_.Get(index);
}
inline const ::mead101::mead::WorkTitle& WorkHierarchy::work_title(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.WorkHierarchy.work_title)
  return _internal_work_title(index);
}
inline ::mead101::mead::WorkTitle* WorkHierarchy::_internal_add_work_title() {
  return work_title_.Add();
}
inline ::mead101::mead::WorkTitle* WorkHierarchy::add_work_title() {
  // @@protoc_insertion_point(field_add:mead101.mead.WorkHierarchy.work_title)
  return _internal_add_work_title();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::WorkTitle >&
WorkHierarchy::work_title() const {
  // @@protoc_insertion_point(field_list:mead101.mead.WorkHierarchy.work_title)
  return work_title_;
}

// -------------------------------------------------------------------

// WorkInformation

// repeated .mead101.mead.AlternativeTitle alternative_title = 1;
inline int WorkInformation::_internal_alternative_title_size() const {
  return alternative_title_.size();
}
inline int WorkInformation::alternative_title_size() const {
  return _internal_alternative_title_size();
}
inline void WorkInformation::clear_alternative_title() {
  alternative_title_.Clear();
}
inline ::mead101::mead::AlternativeTitle* WorkInformation::mutable_alternative_title(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.WorkInformation.alternative_title)
  return alternative_title_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::AlternativeTitle >*
WorkInformation::mutable_alternative_title() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.WorkInformation.alternative_title)
  return &alternative_title_;
}
inline const ::mead101::mead::AlternativeTitle& WorkInformation::_internal_alternative_title(int index) const {
  return alternative_title_.Get(index);
}
inline const ::mead101::mead::AlternativeTitle& WorkInformation::alternative_title(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.WorkInformation.alternative_title)
  return _internal_alternative_title(index);
}
inline ::mead101::mead::AlternativeTitle* WorkInformation::_internal_add_alternative_title() {
  return alternative_title_.Add();
}
inline ::mead101::mead::AlternativeTitle* WorkInformation::add_alternative_title() {
  // @@protoc_insertion_point(field_add:mead101.mead.WorkInformation.alternative_title)
  return _internal_add_alternative_title();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::AlternativeTitle >&
WorkInformation::alternative_title() const {
  // @@protoc_insertion_point(field_list:mead101.mead.WorkInformation.alternative_title)
  return alternative_title_;
}

// repeated .mead101.mead.ArtisticInfluence artistic_influence = 2;
inline int WorkInformation::_internal_artistic_influence_size() const {
  return artistic_influence_.size();
}
inline int WorkInformation::artistic_influence_size() const {
  return _internal_artistic_influence_size();
}
inline void WorkInformation::clear_artistic_influence() {
  artistic_influence_.Clear();
}
inline ::mead101::mead::ArtisticInfluence* WorkInformation::mutable_artistic_influence(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.WorkInformation.artistic_influence)
  return artistic_influence_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::ArtisticInfluence >*
WorkInformation::mutable_artistic_influence() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.WorkInformation.artistic_influence)
  return &artistic_influence_;
}
inline const ::mead101::mead::ArtisticInfluence& WorkInformation::_internal_artistic_influence(int index) const {
  return artistic_influence_.Get(index);
}
inline const ::mead101::mead::ArtisticInfluence& WorkInformation::artistic_influence(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.WorkInformation.artistic_influence)
  return _internal_artistic_influence(index);
}
inline ::mead101::mead::ArtisticInfluence* WorkInformation::_internal_add_artistic_influence() {
  return artistic_influence_.Add();
}
inline ::mead101::mead::ArtisticInfluence* WorkInformation::add_artistic_influence() {
  // @@protoc_insertion_point(field_add:mead101.mead.WorkInformation.artistic_influence)
  return _internal_add_artistic_influence();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::ArtisticInfluence >&
WorkInformation::artistic_influence() const {
  // @@protoc_insertion_point(field_list:mead101.mead.WorkInformation.artistic_influence)
  return artistic_influence_;
}

// repeated .mead101.mead.Award award = 3;
inline int WorkInformation::_internal_award_size() const {
  return award_.size();
}
inline int WorkInformation::award_size() const {
  return _internal_award_size();
}
inline void WorkInformation::clear_award() {
  award_.Clear();
}
inline ::mead101::mead::Award* WorkInformation::mutable_award(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.WorkInformation.award)
  return award_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Award >*
WorkInformation::mutable_award() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.WorkInformation.award)
  return &award_;
}
inline const ::mead101::mead::Award& WorkInformation::_internal_award(int index) const {
  return award_.Get(index);
}
inline const ::mead101::mead::Award& WorkInformation::award(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.WorkInformation.award)
  return _internal_award(index);
}
inline ::mead101::mead::Award* WorkInformation::_internal_add_award() {
  return award_.Add();
}
inline ::mead101::mead::Award* WorkInformation::add_award() {
  // @@protoc_insertion_point(field_add:mead101.mead.WorkInformation.award)
  return _internal_add_award();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Award >&
WorkInformation::award() const {
  // @@protoc_insertion_point(field_list:mead101.mead.WorkInformation.award)
  return award_;
}

// optional .mead101.mead.ClassicalPeriod classical_period = 4;
inline bool WorkInformation::_internal_has_classical_period() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || classical_period_ != nullptr);
  return value;
}
inline bool WorkInformation::has_classical_period() const {
  return _internal_has_classical_period();
}
inline void WorkInformation::clear_classical_period() {
  if (classical_period_ != nullptr) classical_period_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::mead101::mead::ClassicalPeriod& WorkInformation::_internal_classical_period() const {
  const ::mead101::mead::ClassicalPeriod* p = classical_period_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::ClassicalPeriod*>(
      &::mead101::mead::_ClassicalPeriod_default_instance_);
}
inline const ::mead101::mead::ClassicalPeriod& WorkInformation::classical_period() const {
  // @@protoc_insertion_point(field_get:mead101.mead.WorkInformation.classical_period)
  return _internal_classical_period();
}
inline void WorkInformation::unsafe_arena_set_allocated_classical_period(
    ::mead101::mead::ClassicalPeriod* classical_period) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(classical_period_);
  }
  classical_period_ = classical_period;
  if (classical_period) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.WorkInformation.classical_period)
}
inline ::mead101::mead::ClassicalPeriod* WorkInformation::release_classical_period() {
  _has_bits_[0] &= ~0x00000002u;
  ::mead101::mead::ClassicalPeriod* temp = classical_period_;
  classical_period_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::ClassicalPeriod* WorkInformation::unsafe_arena_release_classical_period() {
  // @@protoc_insertion_point(field_release:mead101.mead.WorkInformation.classical_period)
  _has_bits_[0] &= ~0x00000002u;
  ::mead101::mead::ClassicalPeriod* temp = classical_period_;
  classical_period_ = nullptr;
  return temp;
}
inline ::mead101::mead::ClassicalPeriod* WorkInformation::_internal_mutable_classical_period() {
  _has_bits_[0] |= 0x00000002u;
  if (classical_period_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::ClassicalPeriod>(GetArena());
    classical_period_ = p;
  }
  return classical_period_;
}
inline ::mead101::mead::ClassicalPeriod* WorkInformation::mutable_classical_period() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.WorkInformation.classical_period)
  return _internal_mutable_classical_period();
}
inline void WorkInformation::set_allocated_classical_period(::mead101::mead::ClassicalPeriod* classical_period) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete classical_period_;
  }
  if (classical_period) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(classical_period);
    if (message_arena != submessage_arena) {
      classical_period = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, classical_period, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  classical_period_ = classical_period;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.WorkInformation.classical_period)
}

// repeated .mead101.mead.CommentaryNote commentary_note = 5;
inline int WorkInformation::_internal_commentary_note_size() const {
  return commentary_note_.size();
}
inline int WorkInformation::commentary_note_size() const {
  return _internal_commentary_note_size();
}
inline void WorkInformation::clear_commentary_note() {
  commentary_note_.Clear();
}
inline ::mead101::mead::CommentaryNote* WorkInformation::mutable_commentary_note(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.WorkInformation.commentary_note)
  return commentary_note_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::CommentaryNote >*
WorkInformation::mutable_commentary_note() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.WorkInformation.commentary_note)
  return &commentary_note_;
}
inline const ::mead101::mead::CommentaryNote& WorkInformation::_internal_commentary_note(int index) const {
  return commentary_note_.Get(index);
}
inline const ::mead101::mead::CommentaryNote& WorkInformation::commentary_note(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.WorkInformation.commentary_note)
  return _internal_commentary_note(index);
}
inline ::mead101::mead::CommentaryNote* WorkInformation::_internal_add_commentary_note() {
  return commentary_note_.Add();
}
inline ::mead101::mead::CommentaryNote* WorkInformation::add_commentary_note() {
  // @@protoc_insertion_point(field_add:mead101.mead.WorkInformation.commentary_note)
  return _internal_add_commentary_note();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::CommentaryNote >&
WorkInformation::commentary_note() const {
  // @@protoc_insertion_point(field_list:mead101.mead.WorkInformation.commentary_note)
  return commentary_note_;
}

// repeated .mead101.mead.DanceAndRhythmStyle dance_and_rhythm_style = 6;
inline int WorkInformation::_internal_dance_and_rhythm_style_size() const {
  return dance_and_rhythm_style_.size();
}
inline int WorkInformation::dance_and_rhythm_style_size() const {
  return _internal_dance_and_rhythm_style_size();
}
inline void WorkInformation::clear_dance_and_rhythm_style() {
  dance_and_rhythm_style_.Clear();
}
inline ::mead101::mead::DanceAndRhythmStyle* WorkInformation::mutable_dance_and_rhythm_style(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.WorkInformation.dance_and_rhythm_style)
  return dance_and_rhythm_style_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::DanceAndRhythmStyle >*
WorkInformation::mutable_dance_and_rhythm_style() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.WorkInformation.dance_and_rhythm_style)
  return &dance_and_rhythm_style_;
}
inline const ::mead101::mead::DanceAndRhythmStyle& WorkInformation::_internal_dance_and_rhythm_style(int index) const {
  return dance_and_rhythm_style_.Get(index);
}
inline const ::mead101::mead::DanceAndRhythmStyle& WorkInformation::dance_and_rhythm_style(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.WorkInformation.dance_and_rhythm_style)
  return _internal_dance_and_rhythm_style(index);
}
inline ::mead101::mead::DanceAndRhythmStyle* WorkInformation::_internal_add_dance_and_rhythm_style() {
  return dance_and_rhythm_style_.Add();
}
inline ::mead101::mead::DanceAndRhythmStyle* WorkInformation::add_dance_and_rhythm_style() {
  // @@protoc_insertion_point(field_add:mead101.mead.WorkInformation.dance_and_rhythm_style)
  return _internal_add_dance_and_rhythm_style();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::DanceAndRhythmStyle >&
WorkInformation::dance_and_rhythm_style() const {
  // @@protoc_insertion_point(field_list:mead101.mead.WorkInformation.dance_and_rhythm_style)
  return dance_and_rhythm_style_;
}

// repeated .mead101.mead.DerivedRecording derived_recording = 7;
inline int WorkInformation::_internal_derived_recording_size() const {
  return derived_recording_.size();
}
inline int WorkInformation::derived_recording_size() const {
  return _internal_derived_recording_size();
}
inline void WorkInformation::clear_derived_recording() {
  derived_recording_.Clear();
}
inline ::mead101::mead::DerivedRecording* WorkInformation::mutable_derived_recording(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.WorkInformation.derived_recording)
  return derived_recording_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::DerivedRecording >*
WorkInformation::mutable_derived_recording() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.WorkInformation.derived_recording)
  return &derived_recording_;
}
inline const ::mead101::mead::DerivedRecording& WorkInformation::_internal_derived_recording(int index) const {
  return derived_recording_.Get(index);
}
inline const ::mead101::mead::DerivedRecording& WorkInformation::derived_recording(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.WorkInformation.derived_recording)
  return _internal_derived_recording(index);
}
inline ::mead101::mead::DerivedRecording* WorkInformation::_internal_add_derived_recording() {
  return derived_recording_.Add();
}
inline ::mead101::mead::DerivedRecording* WorkInformation::add_derived_recording() {
  // @@protoc_insertion_point(field_add:mead101.mead.WorkInformation.derived_recording)
  return _internal_add_derived_recording();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::DerivedRecording >&
WorkInformation::derived_recording() const {
  // @@protoc_insertion_point(field_list:mead101.mead.WorkInformation.derived_recording)
  return derived_recording_;
}

// repeated .mead101.mead.Epoch epoch = 8;
inline int WorkInformation::_internal_epoch_size() const {
  return epoch_.size();
}
inline int WorkInformation::epoch_size() const {
  return _internal_epoch_size();
}
inline void WorkInformation::clear_epoch() {
  epoch_.Clear();
}
inline ::mead101::mead::Epoch* WorkInformation::mutable_epoch(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.WorkInformation.epoch)
  return epoch_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Epoch >*
WorkInformation::mutable_epoch() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.WorkInformation.epoch)
  return &epoch_;
}
inline const ::mead101::mead::Epoch& WorkInformation::_internal_epoch(int index) const {
  return epoch_.Get(index);
}
inline const ::mead101::mead::Epoch& WorkInformation::epoch(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.WorkInformation.epoch)
  return _internal_epoch(index);
}
inline ::mead101::mead::Epoch* WorkInformation::_internal_add_epoch() {
  return epoch_.Add();
}
inline ::mead101::mead::Epoch* WorkInformation::add_epoch() {
  // @@protoc_insertion_point(field_add:mead101.mead.WorkInformation.epoch)
  return _internal_add_epoch();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Epoch >&
WorkInformation::epoch() const {
  // @@protoc_insertion_point(field_list:mead101.mead.WorkInformation.epoch)
  return epoch_;
}

// optional .mead101.mead.Form form = 9;
inline bool WorkInformation::_internal_has_form() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || form_ != nullptr);
  return value;
}
inline bool WorkInformation::has_form() const {
  return _internal_has_form();
}
inline void WorkInformation::clear_form() {
  if (form_ != nullptr) form_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::mead101::mead::Form& WorkInformation::_internal_form() const {
  const ::mead101::mead::Form* p = form_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::Form*>(
      &::mead101::mead::_Form_default_instance_);
}
inline const ::mead101::mead::Form& WorkInformation::form() const {
  // @@protoc_insertion_point(field_get:mead101.mead.WorkInformation.form)
  return _internal_form();
}
inline void WorkInformation::unsafe_arena_set_allocated_form(
    ::mead101::mead::Form* form) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(form_);
  }
  form_ = form;
  if (form) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.WorkInformation.form)
}
inline ::mead101::mead::Form* WorkInformation::release_form() {
  _has_bits_[0] &= ~0x00000004u;
  ::mead101::mead::Form* temp = form_;
  form_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::Form* WorkInformation::unsafe_arena_release_form() {
  // @@protoc_insertion_point(field_release:mead101.mead.WorkInformation.form)
  _has_bits_[0] &= ~0x00000004u;
  ::mead101::mead::Form* temp = form_;
  form_ = nullptr;
  return temp;
}
inline ::mead101::mead::Form* WorkInformation::_internal_mutable_form() {
  _has_bits_[0] |= 0x00000004u;
  if (form_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::Form>(GetArena());
    form_ = p;
  }
  return form_;
}
inline ::mead101::mead::Form* WorkInformation::mutable_form() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.WorkInformation.form)
  return _internal_mutable_form();
}
inline void WorkInformation::set_allocated_form(::mead101::mead::Form* form) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete form_;
  }
  if (form) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(form);
    if (message_arena != submessage_arena) {
      form = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, form, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  form_ = form;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.WorkInformation.form)
}

// optional .mead101.mead.Harmony harmony = 10;
inline bool WorkInformation::_internal_has_harmony() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || harmony_ != nullptr);
  return value;
}
inline bool WorkInformation::has_harmony() const {
  return _internal_has_harmony();
}
inline void WorkInformation::clear_harmony() {
  if (harmony_ != nullptr) harmony_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::mead101::mead::Harmony& WorkInformation::_internal_harmony() const {
  const ::mead101::mead::Harmony* p = harmony_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::Harmony*>(
      &::mead101::mead::_Harmony_default_instance_);
}
inline const ::mead101::mead::Harmony& WorkInformation::harmony() const {
  // @@protoc_insertion_point(field_get:mead101.mead.WorkInformation.harmony)
  return _internal_harmony();
}
inline void WorkInformation::unsafe_arena_set_allocated_harmony(
    ::mead101::mead::Harmony* harmony) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(harmony_);
  }
  harmony_ = harmony;
  if (harmony) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.WorkInformation.harmony)
}
inline ::mead101::mead::Harmony* WorkInformation::release_harmony() {
  _has_bits_[0] &= ~0x00000008u;
  ::mead101::mead::Harmony* temp = harmony_;
  harmony_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::Harmony* WorkInformation::unsafe_arena_release_harmony() {
  // @@protoc_insertion_point(field_release:mead101.mead.WorkInformation.harmony)
  _has_bits_[0] &= ~0x00000008u;
  ::mead101::mead::Harmony* temp = harmony_;
  harmony_ = nullptr;
  return temp;
}
inline ::mead101::mead::Harmony* WorkInformation::_internal_mutable_harmony() {
  _has_bits_[0] |= 0x00000008u;
  if (harmony_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::Harmony>(GetArena());
    harmony_ = p;
  }
  return harmony_;
}
inline ::mead101::mead::Harmony* WorkInformation::mutable_harmony() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.WorkInformation.harmony)
  return _internal_mutable_harmony();
}
inline void WorkInformation::set_allocated_harmony(::mead101::mead::Harmony* harmony) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete harmony_;
  }
  if (harmony) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(harmony);
    if (message_arena != submessage_arena) {
      harmony = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, harmony, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  harmony_ = harmony;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.WorkInformation.harmony)
}

// repeated .mead101.mead.SimilarWork is_similar = 11;
inline int WorkInformation::_internal_is_similar_size() const {
  return is_similar_.size();
}
inline int WorkInformation::is_similar_size() const {
  return _internal_is_similar_size();
}
inline void WorkInformation::clear_is_similar() {
  is_similar_.Clear();
}
inline ::mead101::mead::SimilarWork* WorkInformation::mutable_is_similar(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.WorkInformation.is_similar)
  return is_similar_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::SimilarWork >*
WorkInformation::mutable_is_similar() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.WorkInformation.is_similar)
  return &is_similar_;
}
inline const ::mead101::mead::SimilarWork& WorkInformation::_internal_is_similar(int index) const {
  return is_similar_.Get(index);
}
inline const ::mead101::mead::SimilarWork& WorkInformation::is_similar(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.WorkInformation.is_similar)
  return _internal_is_similar(index);
}
inline ::mead101::mead::SimilarWork* WorkInformation::_internal_add_is_similar() {
  return is_similar_.Add();
}
inline ::mead101::mead::SimilarWork* WorkInformation::add_is_similar() {
  // @@protoc_insertion_point(field_add:mead101.mead.WorkInformation.is_similar)
  return _internal_add_is_similar();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::SimilarWork >&
WorkInformation::is_similar() const {
  // @@protoc_insertion_point(field_list:mead101.mead.WorkInformation.is_similar)
  return is_similar_;
}

// repeated .mead101.mead.Lyrics lyrics = 12;
inline int WorkInformation::_internal_lyrics_size() const {
  return lyrics_.size();
}
inline int WorkInformation::lyrics_size() const {
  return _internal_lyrics_size();
}
inline void WorkInformation::clear_lyrics() {
  lyrics_.Clear();
}
inline ::mead101::mead::Lyrics* WorkInformation::mutable_lyrics(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.WorkInformation.lyrics)
  return lyrics_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Lyrics >*
WorkInformation::mutable_lyrics() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.WorkInformation.lyrics)
  return &lyrics_;
}
inline const ::mead101::mead::Lyrics& WorkInformation::_internal_lyrics(int index) const {
  return lyrics_.Get(index);
}
inline const ::mead101::mead::Lyrics& WorkInformation::lyrics(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.WorkInformation.lyrics)
  return _internal_lyrics(index);
}
inline ::mead101::mead::Lyrics* WorkInformation::_internal_add_lyrics() {
  return lyrics_.Add();
}
inline ::mead101::mead::Lyrics* WorkInformation::add_lyrics() {
  // @@protoc_insertion_point(field_add:mead101.mead.WorkInformation.lyrics)
  return _internal_add_lyrics();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Lyrics >&
WorkInformation::lyrics() const {
  // @@protoc_insertion_point(field_list:mead101.mead.WorkInformation.lyrics)
  return lyrics_;
}

// repeated .mead101.mead.Mood lyrics_mood = 13;
inline int WorkInformation::_internal_lyrics_mood_size() const {
  return lyrics_mood_.size();
}
inline int WorkInformation::lyrics_mood_size() const {
  return _internal_lyrics_mood_size();
}
inline void WorkInformation::clear_lyrics_mood() {
  lyrics_mood_.Clear();
}
inline ::mead101::mead::Mood* WorkInformation::mutable_lyrics_mood(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.WorkInformation.lyrics_mood)
  return lyrics_mood_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Mood >*
WorkInformation::mutable_lyrics_mood() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.WorkInformation.lyrics_mood)
  return &lyrics_mood_;
}
inline const ::mead101::mead::Mood& WorkInformation::_internal_lyrics_mood(int index) const {
  return lyrics_mood_.Get(index);
}
inline const ::mead101::mead::Mood& WorkInformation::lyrics_mood(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.WorkInformation.lyrics_mood)
  return _internal_lyrics_mood(index);
}
inline ::mead101::mead::Mood* WorkInformation::_internal_add_lyrics_mood() {
  return lyrics_mood_.Add();
}
inline ::mead101::mead::Mood* WorkInformation::add_lyrics_mood() {
  // @@protoc_insertion_point(field_add:mead101.mead.WorkInformation.lyrics_mood)
  return _internal_add_lyrics_mood();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Mood >&
WorkInformation::lyrics_mood() const {
  // @@protoc_insertion_point(field_list:mead101.mead.WorkInformation.lyrics_mood)
  return lyrics_mood_;
}

// optional string musical_work_reference = 14;
inline bool WorkInformation::_internal_has_musical_work_reference() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool WorkInformation::has_musical_work_reference() const {
  return _internal_has_musical_work_reference();
}
inline void WorkInformation::clear_musical_work_reference() {
  musical_work_reference_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& WorkInformation::musical_work_reference() const {
  // @@protoc_insertion_point(field_get:mead101.mead.WorkInformation.musical_work_reference)
  return _internal_musical_work_reference();
}
inline void WorkInformation::set_musical_work_reference(const std::string& value) {
  _internal_set_musical_work_reference(value);
  // @@protoc_insertion_point(field_set:mead101.mead.WorkInformation.musical_work_reference)
}
inline std::string* WorkInformation::mutable_musical_work_reference() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.WorkInformation.musical_work_reference)
  return _internal_mutable_musical_work_reference();
}
inline const std::string& WorkInformation::_internal_musical_work_reference() const {
  return musical_work_reference_.Get();
}
inline void WorkInformation::_internal_set_musical_work_reference(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  musical_work_reference_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void WorkInformation::set_musical_work_reference(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  musical_work_reference_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.WorkInformation.musical_work_reference)
}
inline void WorkInformation::set_musical_work_reference(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  musical_work_reference_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.WorkInformation.musical_work_reference)
}
inline void WorkInformation::set_musical_work_reference(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  musical_work_reference_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.WorkInformation.musical_work_reference)
}
inline std::string* WorkInformation::_internal_mutable_musical_work_reference() {
  _has_bits_[0] |= 0x00000001u;
  return musical_work_reference_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* WorkInformation::release_musical_work_reference() {
  // @@protoc_insertion_point(field_release:mead101.mead.WorkInformation.musical_work_reference)
  if (!_internal_has_musical_work_reference()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return musical_work_reference_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WorkInformation::set_allocated_musical_work_reference(std::string* musical_work_reference) {
  if (musical_work_reference != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  musical_work_reference_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), musical_work_reference,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.WorkInformation.musical_work_reference)
}

// repeated .mead101.mead.RelatedWork related_work = 15;
inline int WorkInformation::_internal_related_work_size() const {
  return related_work_.size();
}
inline int WorkInformation::related_work_size() const {
  return _internal_related_work_size();
}
inline void WorkInformation::clear_related_work() {
  related_work_.Clear();
}
inline ::mead101::mead::RelatedWork* WorkInformation::mutable_related_work(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.WorkInformation.related_work)
  return related_work_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::RelatedWork >*
WorkInformation::mutable_related_work() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.WorkInformation.related_work)
  return &related_work_;
}
inline const ::mead101::mead::RelatedWork& WorkInformation::_internal_related_work(int index) const {
  return related_work_.Get(index);
}
inline const ::mead101::mead::RelatedWork& WorkInformation::related_work(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.WorkInformation.related_work)
  return _internal_related_work(index);
}
inline ::mead101::mead::RelatedWork* WorkInformation::_internal_add_related_work() {
  return related_work_.Add();
}
inline ::mead101::mead::RelatedWork* WorkInformation::add_related_work() {
  // @@protoc_insertion_point(field_add:mead101.mead.WorkInformation.related_work)
  return _internal_add_related_work();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::RelatedWork >&
WorkInformation::related_work() const {
  // @@protoc_insertion_point(field_list:mead101.mead.WorkInformation.related_work)
  return related_work_;
}

// optional .mead101.mead.SubGenreCategory sub_genre_category = 16;
inline bool WorkInformation::_internal_has_sub_genre_category() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || sub_genre_category_ != nullptr);
  return value;
}
inline bool WorkInformation::has_sub_genre_category() const {
  return _internal_has_sub_genre_category();
}
inline void WorkInformation::clear_sub_genre_category() {
  if (sub_genre_category_ != nullptr) sub_genre_category_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::mead101::mead::SubGenreCategory& WorkInformation::_internal_sub_genre_category() const {
  const ::mead101::mead::SubGenreCategory* p = sub_genre_category_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::SubGenreCategory*>(
      &::mead101::mead::_SubGenreCategory_default_instance_);
}
inline const ::mead101::mead::SubGenreCategory& WorkInformation::sub_genre_category() const {
  // @@protoc_insertion_point(field_get:mead101.mead.WorkInformation.sub_genre_category)
  return _internal_sub_genre_category();
}
inline void WorkInformation::unsafe_arena_set_allocated_sub_genre_category(
    ::mead101::mead::SubGenreCategory* sub_genre_category) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sub_genre_category_);
  }
  sub_genre_category_ = sub_genre_category;
  if (sub_genre_category) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.WorkInformation.sub_genre_category)
}
inline ::mead101::mead::SubGenreCategory* WorkInformation::release_sub_genre_category() {
  _has_bits_[0] &= ~0x00000010u;
  ::mead101::mead::SubGenreCategory* temp = sub_genre_category_;
  sub_genre_category_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::SubGenreCategory* WorkInformation::unsafe_arena_release_sub_genre_category() {
  // @@protoc_insertion_point(field_release:mead101.mead.WorkInformation.sub_genre_category)
  _has_bits_[0] &= ~0x00000010u;
  ::mead101::mead::SubGenreCategory* temp = sub_genre_category_;
  sub_genre_category_ = nullptr;
  return temp;
}
inline ::mead101::mead::SubGenreCategory* WorkInformation::_internal_mutable_sub_genre_category() {
  _has_bits_[0] |= 0x00000010u;
  if (sub_genre_category_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::SubGenreCategory>(GetArena());
    sub_genre_category_ = p;
  }
  return sub_genre_category_;
}
inline ::mead101::mead::SubGenreCategory* WorkInformation::mutable_sub_genre_category() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.WorkInformation.sub_genre_category)
  return _internal_mutable_sub_genre_category();
}
inline void WorkInformation::set_allocated_sub_genre_category(::mead101::mead::SubGenreCategory* sub_genre_category) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete sub_genre_category_;
  }
  if (sub_genre_category) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(sub_genre_category);
    if (message_arena != submessage_arena) {
      sub_genre_category = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sub_genre_category, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  sub_genre_category_ = sub_genre_category;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.WorkInformation.sub_genre_category)
}

// repeated .mead101.mead.Instrument target_instrument = 17;
inline int WorkInformation::_internal_target_instrument_size() const {
  return target_instrument_.size();
}
inline int WorkInformation::target_instrument_size() const {
  return _internal_target_instrument_size();
}
inline void WorkInformation::clear_target_instrument() {
  target_instrument_.Clear();
}
inline ::mead101::mead::Instrument* WorkInformation::mutable_target_instrument(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.WorkInformation.target_instrument)
  return target_instrument_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Instrument >*
WorkInformation::mutable_target_instrument() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.WorkInformation.target_instrument)
  return &target_instrument_;
}
inline const ::mead101::mead::Instrument& WorkInformation::_internal_target_instrument(int index) const {
  return target_instrument_.Get(index);
}
inline const ::mead101::mead::Instrument& WorkInformation::target_instrument(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.WorkInformation.target_instrument)
  return _internal_target_instrument(index);
}
inline ::mead101::mead::Instrument* WorkInformation::_internal_add_target_instrument() {
  return target_instrument_.Add();
}
inline ::mead101::mead::Instrument* WorkInformation::add_target_instrument() {
  // @@protoc_insertion_point(field_add:mead101.mead.WorkInformation.target_instrument)
  return _internal_add_target_instrument();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Instrument >&
WorkInformation::target_instrument() const {
  // @@protoc_insertion_point(field_list:mead101.mead.WorkInformation.target_instrument)
  return target_instrument_;
}

// repeated .mead101.mead.Theme theme = 18;
inline int WorkInformation::_internal_theme_size() const {
  return theme_.size();
}
inline int WorkInformation::theme_size() const {
  return _internal_theme_size();
}
inline void WorkInformation::clear_theme() {
  theme_.Clear();
}
inline ::mead101::mead::Theme* WorkInformation::mutable_theme(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.WorkInformation.theme)
  return theme_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Theme >*
WorkInformation::mutable_theme() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.WorkInformation.theme)
  return &theme_;
}
inline const ::mead101::mead::Theme& WorkInformation::_internal_theme(int index) const {
  return theme_.Get(index);
}
inline const ::mead101::mead::Theme& WorkInformation::theme(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.WorkInformation.theme)
  return _internal_theme(index);
}
inline ::mead101::mead::Theme* WorkInformation::_internal_add_theme() {
  return theme_.Add();
}
inline ::mead101::mead::Theme* WorkInformation::add_theme() {
  // @@protoc_insertion_point(field_add:mead101.mead.WorkInformation.theme)
  return _internal_add_theme();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::Theme >&
WorkInformation::theme() const {
  // @@protoc_insertion_point(field_list:mead101.mead.WorkInformation.theme)
  return theme_;
}

// optional .mead101.mead.TimeSignature time_signature = 19;
inline bool WorkInformation::_internal_has_time_signature() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || time_signature_ != nullptr);
  return value;
}
inline bool WorkInformation::has_time_signature() const {
  return _internal_has_time_signature();
}
inline void WorkInformation::clear_time_signature() {
  if (time_signature_ != nullptr) time_signature_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::mead101::mead::TimeSignature& WorkInformation::_internal_time_signature() const {
  const ::mead101::mead::TimeSignature* p = time_signature_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::TimeSignature*>(
      &::mead101::mead::_TimeSignature_default_instance_);
}
inline const ::mead101::mead::TimeSignature& WorkInformation::time_signature() const {
  // @@protoc_insertion_point(field_get:mead101.mead.WorkInformation.time_signature)
  return _internal_time_signature();
}
inline void WorkInformation::unsafe_arena_set_allocated_time_signature(
    ::mead101::mead::TimeSignature* time_signature) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_signature_);
  }
  time_signature_ = time_signature;
  if (time_signature) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.WorkInformation.time_signature)
}
inline ::mead101::mead::TimeSignature* WorkInformation::release_time_signature() {
  _has_bits_[0] &= ~0x00000020u;
  ::mead101::mead::TimeSignature* temp = time_signature_;
  time_signature_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::TimeSignature* WorkInformation::unsafe_arena_release_time_signature() {
  // @@protoc_insertion_point(field_release:mead101.mead.WorkInformation.time_signature)
  _has_bits_[0] &= ~0x00000020u;
  ::mead101::mead::TimeSignature* temp = time_signature_;
  time_signature_ = nullptr;
  return temp;
}
inline ::mead101::mead::TimeSignature* WorkInformation::_internal_mutable_time_signature() {
  _has_bits_[0] |= 0x00000020u;
  if (time_signature_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::TimeSignature>(GetArena());
    time_signature_ = p;
  }
  return time_signature_;
}
inline ::mead101::mead::TimeSignature* WorkInformation::mutable_time_signature() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.WorkInformation.time_signature)
  return _internal_mutable_time_signature();
}
inline void WorkInformation::set_allocated_time_signature(::mead101::mead::TimeSignature* time_signature) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete time_signature_;
  }
  if (time_signature) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(time_signature);
    if (message_arena != submessage_arena) {
      time_signature = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time_signature, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  time_signature_ = time_signature;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.WorkInformation.time_signature)
}

// optional .mead101.mead.VocalRegister vocal_register = 20;
inline bool WorkInformation::_internal_has_vocal_register() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || vocal_register_ != nullptr);
  return value;
}
inline bool WorkInformation::has_vocal_register() const {
  return _internal_has_vocal_register();
}
inline void WorkInformation::clear_vocal_register() {
  if (vocal_register_ != nullptr) vocal_register_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::mead101::mead::VocalRegister& WorkInformation::_internal_vocal_register() const {
  const ::mead101::mead::VocalRegister* p = vocal_register_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::VocalRegister*>(
      &::mead101::mead::_VocalRegister_default_instance_);
}
inline const ::mead101::mead::VocalRegister& WorkInformation::vocal_register() const {
  // @@protoc_insertion_point(field_get:mead101.mead.WorkInformation.vocal_register)
  return _internal_vocal_register();
}
inline void WorkInformation::unsafe_arena_set_allocated_vocal_register(
    ::mead101::mead::VocalRegister* vocal_register) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vocal_register_);
  }
  vocal_register_ = vocal_register;
  if (vocal_register) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.WorkInformation.vocal_register)
}
inline ::mead101::mead::VocalRegister* WorkInformation::release_vocal_register() {
  _has_bits_[0] &= ~0x00000040u;
  ::mead101::mead::VocalRegister* temp = vocal_register_;
  vocal_register_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::VocalRegister* WorkInformation::unsafe_arena_release_vocal_register() {
  // @@protoc_insertion_point(field_release:mead101.mead.WorkInformation.vocal_register)
  _has_bits_[0] &= ~0x00000040u;
  ::mead101::mead::VocalRegister* temp = vocal_register_;
  vocal_register_ = nullptr;
  return temp;
}
inline ::mead101::mead::VocalRegister* WorkInformation::_internal_mutable_vocal_register() {
  _has_bits_[0] |= 0x00000040u;
  if (vocal_register_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::VocalRegister>(GetArena());
    vocal_register_ = p;
  }
  return vocal_register_;
}
inline ::mead101::mead::VocalRegister* WorkInformation::mutable_vocal_register() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.WorkInformation.vocal_register)
  return _internal_mutable_vocal_register();
}
inline void WorkInformation::set_allocated_vocal_register(::mead101::mead::VocalRegister* vocal_register) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete vocal_register_;
  }
  if (vocal_register) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(vocal_register);
    if (message_arena != submessage_arena) {
      vocal_register = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vocal_register, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  vocal_register_ = vocal_register;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.WorkInformation.vocal_register)
}

// repeated .mead101.mead.WorkHierarchy work_hierarchy = 21;
inline int WorkInformation::_internal_work_hierarchy_size() const {
  return work_hierarchy_.size();
}
inline int WorkInformation::work_hierarchy_size() const {
  return _internal_work_hierarchy_size();
}
inline void WorkInformation::clear_work_hierarchy() {
  work_hierarchy_.Clear();
}
inline ::mead101::mead::WorkHierarchy* WorkInformation::mutable_work_hierarchy(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.WorkInformation.work_hierarchy)
  return work_hierarchy_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::WorkHierarchy >*
WorkInformation::mutable_work_hierarchy() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.WorkInformation.work_hierarchy)
  return &work_hierarchy_;
}
inline const ::mead101::mead::WorkHierarchy& WorkInformation::_internal_work_hierarchy(int index) const {
  return work_hierarchy_.Get(index);
}
inline const ::mead101::mead::WorkHierarchy& WorkInformation::work_hierarchy(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.WorkInformation.work_hierarchy)
  return _internal_work_hierarchy(index);
}
inline ::mead101::mead::WorkHierarchy* WorkInformation::_internal_add_work_hierarchy() {
  return work_hierarchy_.Add();
}
inline ::mead101::mead::WorkHierarchy* WorkInformation::add_work_hierarchy() {
  // @@protoc_insertion_point(field_add:mead101.mead.WorkInformation.work_hierarchy)
  return _internal_add_work_hierarchy();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::WorkHierarchy >&
WorkInformation::work_hierarchy() const {
  // @@protoc_insertion_point(field_list:mead101.mead.WorkInformation.work_hierarchy)
  return work_hierarchy_;
}

// optional .mead101.mead.WorkSummary work_summary = 22;
inline bool WorkInformation::_internal_has_work_summary() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || work_summary_ != nullptr);
  return value;
}
inline bool WorkInformation::has_work_summary() const {
  return _internal_has_work_summary();
}
inline void WorkInformation::clear_work_summary() {
  if (work_summary_ != nullptr) work_summary_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
inline const ::mead101::mead::WorkSummary& WorkInformation::_internal_work_summary() const {
  const ::mead101::mead::WorkSummary* p = work_summary_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::WorkSummary*>(
      &::mead101::mead::_WorkSummary_default_instance_);
}
inline const ::mead101::mead::WorkSummary& WorkInformation::work_summary() const {
  // @@protoc_insertion_point(field_get:mead101.mead.WorkInformation.work_summary)
  return _internal_work_summary();
}
inline void WorkInformation::unsafe_arena_set_allocated_work_summary(
    ::mead101::mead::WorkSummary* work_summary) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(work_summary_);
  }
  work_summary_ = work_summary;
  if (work_summary) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.WorkInformation.work_summary)
}
inline ::mead101::mead::WorkSummary* WorkInformation::release_work_summary() {
  _has_bits_[0] &= ~0x00000080u;
  ::mead101::mead::WorkSummary* temp = work_summary_;
  work_summary_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::WorkSummary* WorkInformation::unsafe_arena_release_work_summary() {
  // @@protoc_insertion_point(field_release:mead101.mead.WorkInformation.work_summary)
  _has_bits_[0] &= ~0x00000080u;
  ::mead101::mead::WorkSummary* temp = work_summary_;
  work_summary_ = nullptr;
  return temp;
}
inline ::mead101::mead::WorkSummary* WorkInformation::_internal_mutable_work_summary() {
  _has_bits_[0] |= 0x00000080u;
  if (work_summary_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::WorkSummary>(GetArena());
    work_summary_ = p;
  }
  return work_summary_;
}
inline ::mead101::mead::WorkSummary* WorkInformation::mutable_work_summary() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.WorkInformation.work_summary)
  return _internal_mutable_work_summary();
}
inline void WorkInformation::set_allocated_work_summary(::mead101::mead::WorkSummary* work_summary) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete work_summary_;
  }
  if (work_summary) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(work_summary);
    if (message_arena != submessage_arena) {
      work_summary = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, work_summary, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  work_summary_ = work_summary;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.WorkInformation.work_summary)
}

// -------------------------------------------------------------------

// WorkInformationList

// repeated .mead101.mead.WorkInformation work_information = 1;
inline int WorkInformationList::_internal_work_information_size() const {
  return work_information_.size();
}
inline int WorkInformationList::work_information_size() const {
  return _internal_work_information_size();
}
inline void WorkInformationList::clear_work_information() {
  work_information_.Clear();
}
inline ::mead101::mead::WorkInformation* WorkInformationList::mutable_work_information(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.WorkInformationList.work_information)
  return work_information_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::WorkInformation >*
WorkInformationList::mutable_work_information() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.WorkInformationList.work_information)
  return &work_information_;
}
inline const ::mead101::mead::WorkInformation& WorkInformationList::_internal_work_information(int index) const {
  return work_information_.Get(index);
}
inline const ::mead101::mead::WorkInformation& WorkInformationList::work_information(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.WorkInformationList.work_information)
  return _internal_work_information(index);
}
inline ::mead101::mead::WorkInformation* WorkInformationList::_internal_add_work_information() {
  return work_information_.Add();
}
inline ::mead101::mead::WorkInformation* WorkInformationList::add_work_information() {
  // @@protoc_insertion_point(field_add:mead101.mead.WorkInformationList.work_information)
  return _internal_add_work_information();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::WorkInformation >&
WorkInformationList::work_information() const {
  // @@protoc_insertion_point(field_list:mead101.mead.WorkInformationList.work_information)
  return work_information_;
}

// -------------------------------------------------------------------

// WorkRelationshipType

// optional string namespace = 1;
inline bool WorkRelationshipType::_internal_has_namespace_() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool WorkRelationshipType::has_namespace_() const {
  return _internal_has_namespace_();
}
inline void WorkRelationshipType::clear_namespace_() {
  namespace__.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& WorkRelationshipType::namespace_() const {
  // @@protoc_insertion_point(field_get:mead101.mead.WorkRelationshipType.namespace)
  return _internal_namespace_();
}
inline void WorkRelationshipType::set_namespace_(const std::string& value) {
  _internal_set_namespace_(value);
  // @@protoc_insertion_point(field_set:mead101.mead.WorkRelationshipType.namespace)
}
inline std::string* WorkRelationshipType::mutable_namespace_() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.WorkRelationshipType.namespace)
  return _internal_mutable_namespace_();
}
inline const std::string& WorkRelationshipType::_internal_namespace_() const {
  return namespace__.Get();
}
inline void WorkRelationshipType::_internal_set_namespace_(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void WorkRelationshipType::set_namespace_(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  namespace__.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.WorkRelationshipType.namespace)
}
inline void WorkRelationshipType::set_namespace_(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.WorkRelationshipType.namespace)
}
inline void WorkRelationshipType::set_namespace_(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  namespace__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.WorkRelationshipType.namespace)
}
inline std::string* WorkRelationshipType::_internal_mutable_namespace_() {
  _has_bits_[0] |= 0x00000001u;
  return namespace__.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* WorkRelationshipType::release_namespace_() {
  // @@protoc_insertion_point(field_release:mead101.mead.WorkRelationshipType.namespace)
  if (!_internal_has_namespace_()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return namespace__.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WorkRelationshipType::set_allocated_namespace_(std::string* namespace_) {
  if (namespace_ != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  namespace__.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), namespace_,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.WorkRelationshipType.namespace)
}

// optional string user_defined_value = 2;
inline bool WorkRelationshipType::_internal_has_user_defined_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool WorkRelationshipType::has_user_defined_value() const {
  return _internal_has_user_defined_value();
}
inline void WorkRelationshipType::clear_user_defined_value() {
  user_defined_value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& WorkRelationshipType::user_defined_value() const {
  // @@protoc_insertion_point(field_get:mead101.mead.WorkRelationshipType.user_defined_value)
  return _internal_user_defined_value();
}
inline void WorkRelationshipType::set_user_defined_value(const std::string& value) {
  _internal_set_user_defined_value(value);
  // @@protoc_insertion_point(field_set:mead101.mead.WorkRelationshipType.user_defined_value)
}
inline std::string* WorkRelationshipType::mutable_user_defined_value() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.WorkRelationshipType.user_defined_value)
  return _internal_mutable_user_defined_value();
}
inline const std::string& WorkRelationshipType::_internal_user_defined_value() const {
  return user_defined_value_.Get();
}
inline void WorkRelationshipType::_internal_set_user_defined_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void WorkRelationshipType::set_user_defined_value(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  user_defined_value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.WorkRelationshipType.user_defined_value)
}
inline void WorkRelationshipType::set_user_defined_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.WorkRelationshipType.user_defined_value)
}
inline void WorkRelationshipType::set_user_defined_value(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  user_defined_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.WorkRelationshipType.user_defined_value)
}
inline std::string* WorkRelationshipType::_internal_mutable_user_defined_value() {
  _has_bits_[0] |= 0x00000002u;
  return user_defined_value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* WorkRelationshipType::release_user_defined_value() {
  // @@protoc_insertion_point(field_release:mead101.mead.WorkRelationshipType.user_defined_value)
  if (!_internal_has_user_defined_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return user_defined_value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WorkRelationshipType::set_allocated_user_defined_value(std::string* user_defined_value) {
  if (user_defined_value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  user_defined_value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_defined_value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.WorkRelationshipType.user_defined_value)
}

// optional .mead101.avs.WorkRelationshipType ext_value = 3;
inline bool WorkRelationshipType::_internal_has_ext_value() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || ext_value_ != nullptr);
  return value;
}
inline bool WorkRelationshipType::has_ext_value() const {
  return _internal_has_ext_value();
}
inline const ::mead101::avs::WorkRelationshipType& WorkRelationshipType::_internal_ext_value() const {
  const ::mead101::avs::WorkRelationshipType* p = ext_value_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::avs::WorkRelationshipType*>(
      &::mead101::avs::_WorkRelationshipType_default_instance_);
}
inline const ::mead101::avs::WorkRelationshipType& WorkRelationshipType::ext_value() const {
  // @@protoc_insertion_point(field_get:mead101.mead.WorkRelationshipType.ext_value)
  return _internal_ext_value();
}
inline void WorkRelationshipType::unsafe_arena_set_allocated_ext_value(
    ::mead101::avs::WorkRelationshipType* ext_value) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext_value_);
  }
  ext_value_ = ext_value;
  if (ext_value) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.WorkRelationshipType.ext_value)
}
inline ::mead101::avs::WorkRelationshipType* WorkRelationshipType::release_ext_value() {
  _has_bits_[0] &= ~0x00000004u;
  ::mead101::avs::WorkRelationshipType* temp = ext_value_;
  ext_value_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::avs::WorkRelationshipType* WorkRelationshipType::unsafe_arena_release_ext_value() {
  // @@protoc_insertion_point(field_release:mead101.mead.WorkRelationshipType.ext_value)
  _has_bits_[0] &= ~0x00000004u;
  ::mead101::avs::WorkRelationshipType* temp = ext_value_;
  ext_value_ = nullptr;
  return temp;
}
inline ::mead101::avs::WorkRelationshipType* WorkRelationshipType::_internal_mutable_ext_value() {
  _has_bits_[0] |= 0x00000004u;
  if (ext_value_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::avs::WorkRelationshipType>(GetArena());
    ext_value_ = p;
  }
  return ext_value_;
}
inline ::mead101::avs::WorkRelationshipType* WorkRelationshipType::mutable_ext_value() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.WorkRelationshipType.ext_value)
  return _internal_mutable_ext_value();
}
inline void WorkRelationshipType::set_allocated_ext_value(::mead101::avs::WorkRelationshipType* ext_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext_value_);
  }
  if (ext_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ext_value)->GetArena();
    if (message_arena != submessage_arena) {
      ext_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ext_value, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  ext_value_ = ext_value;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.WorkRelationshipType.ext_value)
}

// -------------------------------------------------------------------

// WorkSummary

// optional .mead101.mead.MusicalWorkId musical_work_id = 1;
inline bool WorkSummary::_internal_has_musical_work_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || musical_work_id_ != nullptr);
  return value;
}
inline bool WorkSummary::has_musical_work_id() const {
  return _internal_has_musical_work_id();
}
inline void WorkSummary::clear_musical_work_id() {
  if (musical_work_id_ != nullptr) musical_work_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::mead101::mead::MusicalWorkId& WorkSummary::_internal_musical_work_id() const {
  const ::mead101::mead::MusicalWorkId* p = musical_work_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mead101::mead::MusicalWorkId*>(
      &::mead101::mead::_MusicalWorkId_default_instance_);
}
inline const ::mead101::mead::MusicalWorkId& WorkSummary::musical_work_id() const {
  // @@protoc_insertion_point(field_get:mead101.mead.WorkSummary.musical_work_id)
  return _internal_musical_work_id();
}
inline void WorkSummary::unsafe_arena_set_allocated_musical_work_id(
    ::mead101::mead::MusicalWorkId* musical_work_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(musical_work_id_);
  }
  musical_work_id_ = musical_work_id;
  if (musical_work_id) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mead101.mead.WorkSummary.musical_work_id)
}
inline ::mead101::mead::MusicalWorkId* WorkSummary::release_musical_work_id() {
  _has_bits_[0] &= ~0x00000001u;
  ::mead101::mead::MusicalWorkId* temp = musical_work_id_;
  musical_work_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mead101::mead::MusicalWorkId* WorkSummary::unsafe_arena_release_musical_work_id() {
  // @@protoc_insertion_point(field_release:mead101.mead.WorkSummary.musical_work_id)
  _has_bits_[0] &= ~0x00000001u;
  ::mead101::mead::MusicalWorkId* temp = musical_work_id_;
  musical_work_id_ = nullptr;
  return temp;
}
inline ::mead101::mead::MusicalWorkId* WorkSummary::_internal_mutable_musical_work_id() {
  _has_bits_[0] |= 0x00000001u;
  if (musical_work_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::mead101::mead::MusicalWorkId>(GetArena());
    musical_work_id_ = p;
  }
  return musical_work_id_;
}
inline ::mead101::mead::MusicalWorkId* WorkSummary::mutable_musical_work_id() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.WorkSummary.musical_work_id)
  return _internal_mutable_musical_work_id();
}
inline void WorkSummary::set_allocated_musical_work_id(::mead101::mead::MusicalWorkId* musical_work_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete musical_work_id_;
  }
  if (musical_work_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(musical_work_id);
    if (message_arena != submessage_arena) {
      musical_work_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, musical_work_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  musical_work_id_ = musical_work_id;
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.WorkSummary.musical_work_id)
}

// repeated .mead101.mead.TitleWithPronunciation work_title = 2;
inline int WorkSummary::_internal_work_title_size() const {
  return work_title_.size();
}
inline int WorkSummary::work_title_size() const {
  return _internal_work_title_size();
}
inline void WorkSummary::clear_work_title() {
  work_title_.Clear();
}
inline ::mead101::mead::TitleWithPronunciation* WorkSummary::mutable_work_title(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.WorkSummary.work_title)
  return work_title_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::TitleWithPronunciation >*
WorkSummary::mutable_work_title() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.WorkSummary.work_title)
  return &work_title_;
}
inline const ::mead101::mead::TitleWithPronunciation& WorkSummary::_internal_work_title(int index) const {
  return work_title_.Get(index);
}
inline const ::mead101::mead::TitleWithPronunciation& WorkSummary::work_title(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.WorkSummary.work_title)
  return _internal_work_title(index);
}
inline ::mead101::mead::TitleWithPronunciation* WorkSummary::_internal_add_work_title() {
  return work_title_.Add();
}
inline ::mead101::mead::TitleWithPronunciation* WorkSummary::add_work_title() {
  // @@protoc_insertion_point(field_add:mead101.mead.WorkSummary.work_title)
  return _internal_add_work_title();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::TitleWithPronunciation >&
WorkSummary::work_title() const {
  // @@protoc_insertion_point(field_list:mead101.mead.WorkSummary.work_title)
  return work_title_;
}

// repeated .mead101.mead.PartyNameWithTerritory writer = 3;
inline int WorkSummary::_internal_writer_size() const {
  return writer_.size();
}
inline int WorkSummary::writer_size() const {
  return _internal_writer_size();
}
inline void WorkSummary::clear_writer() {
  writer_.Clear();
}
inline ::mead101::mead::PartyNameWithTerritory* WorkSummary::mutable_writer(int index) {
  // @@protoc_insertion_point(field_mutable:mead101.mead.WorkSummary.writer)
  return writer_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::PartyNameWithTerritory >*
WorkSummary::mutable_writer() {
  // @@protoc_insertion_point(field_mutable_list:mead101.mead.WorkSummary.writer)
  return &writer_;
}
inline const ::mead101::mead::PartyNameWithTerritory& WorkSummary::_internal_writer(int index) const {
  return writer_.Get(index);
}
inline const ::mead101::mead::PartyNameWithTerritory& WorkSummary::writer(int index) const {
  // @@protoc_insertion_point(field_get:mead101.mead.WorkSummary.writer)
  return _internal_writer(index);
}
inline ::mead101::mead::PartyNameWithTerritory* WorkSummary::_internal_add_writer() {
  return writer_.Add();
}
inline ::mead101::mead::PartyNameWithTerritory* WorkSummary::add_writer() {
  // @@protoc_insertion_point(field_add:mead101.mead.WorkSummary.writer)
  return _internal_add_writer();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mead101::mead::PartyNameWithTerritory >&
WorkSummary::writer() const {
  // @@protoc_insertion_point(field_list:mead101.mead.WorkSummary.writer)
  return writer_;
}

// -------------------------------------------------------------------

// WorkTitle

// optional string language_and_script_code = 1;
inline bool WorkTitle::_internal_has_language_and_script_code() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool WorkTitle::has_language_and_script_code() const {
  return _internal_has_language_and_script_code();
}
inline void WorkTitle::clear_language_and_script_code() {
  language_and_script_code_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& WorkTitle::language_and_script_code() const {
  // @@protoc_insertion_point(field_get:mead101.mead.WorkTitle.language_and_script_code)
  return _internal_language_and_script_code();
}
inline void WorkTitle::set_language_and_script_code(const std::string& value) {
  _internal_set_language_and_script_code(value);
  // @@protoc_insertion_point(field_set:mead101.mead.WorkTitle.language_and_script_code)
}
inline std::string* WorkTitle::mutable_language_and_script_code() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.WorkTitle.language_and_script_code)
  return _internal_mutable_language_and_script_code();
}
inline const std::string& WorkTitle::_internal_language_and_script_code() const {
  return language_and_script_code_.Get();
}
inline void WorkTitle::_internal_set_language_and_script_code(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  language_and_script_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void WorkTitle::set_language_and_script_code(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  language_and_script_code_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.WorkTitle.language_and_script_code)
}
inline void WorkTitle::set_language_and_script_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  language_and_script_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.WorkTitle.language_and_script_code)
}
inline void WorkTitle::set_language_and_script_code(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  language_and_script_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.WorkTitle.language_and_script_code)
}
inline std::string* WorkTitle::_internal_mutable_language_and_script_code() {
  _has_bits_[0] |= 0x00000001u;
  return language_and_script_code_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* WorkTitle::release_language_and_script_code() {
  // @@protoc_insertion_point(field_release:mead101.mead.WorkTitle.language_and_script_code)
  if (!_internal_has_language_and_script_code()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return language_and_script_code_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WorkTitle::set_allocated_language_and_script_code(std::string* language_and_script_code) {
  if (language_and_script_code != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  language_and_script_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), language_and_script_code,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.WorkTitle.language_and_script_code)
}

// optional string ext_value = 2;
inline bool WorkTitle::_internal_has_ext_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool WorkTitle::has_ext_value() const {
  return _internal_has_ext_value();
}
inline void WorkTitle::clear_ext_value() {
  ext_value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& WorkTitle::ext_value() const {
  // @@protoc_insertion_point(field_get:mead101.mead.WorkTitle.ext_value)
  return _internal_ext_value();
}
inline void WorkTitle::set_ext_value(const std::string& value) {
  _internal_set_ext_value(value);
  // @@protoc_insertion_point(field_set:mead101.mead.WorkTitle.ext_value)
}
inline std::string* WorkTitle::mutable_ext_value() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.WorkTitle.ext_value)
  return _internal_mutable_ext_value();
}
inline const std::string& WorkTitle::_internal_ext_value() const {
  return ext_value_.Get();
}
inline void WorkTitle::_internal_set_ext_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  ext_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void WorkTitle::set_ext_value(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  ext_value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.WorkTitle.ext_value)
}
inline void WorkTitle::set_ext_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  ext_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.WorkTitle.ext_value)
}
inline void WorkTitle::set_ext_value(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  ext_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.WorkTitle.ext_value)
}
inline std::string* WorkTitle::_internal_mutable_ext_value() {
  _has_bits_[0] |= 0x00000002u;
  return ext_value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* WorkTitle::release_ext_value() {
  // @@protoc_insertion_point(field_release:mead101.mead.WorkTitle.ext_value)
  if (!_internal_has_ext_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return ext_value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WorkTitle::set_allocated_ext_value(std::string* ext_value) {
  if (ext_value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  ext_value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ext_value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.WorkTitle.ext_value)
}

// -------------------------------------------------------------------

// ddex_IsoDate

// optional string auto_value = 1;
inline bool ddex_IsoDate::_internal_has_auto_value() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ddex_IsoDate::has_auto_value() const {
  return _internal_has_auto_value();
}
inline void ddex_IsoDate::clear_auto_value() {
  auto_value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ddex_IsoDate::auto_value() const {
  // @@protoc_insertion_point(field_get:mead101.mead.ddex_IsoDate.auto_value)
  return _internal_auto_value();
}
inline void ddex_IsoDate::set_auto_value(const std::string& value) {
  _internal_set_auto_value(value);
  // @@protoc_insertion_point(field_set:mead101.mead.ddex_IsoDate.auto_value)
}
inline std::string* ddex_IsoDate::mutable_auto_value() {
  // @@protoc_insertion_point(field_mutable:mead101.mead.ddex_IsoDate.auto_value)
  return _internal_mutable_auto_value();
}
inline const std::string& ddex_IsoDate::_internal_auto_value() const {
  return auto_value_.Get();
}
inline void ddex_IsoDate::_internal_set_auto_value(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  auto_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ddex_IsoDate::set_auto_value(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  auto_value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mead101.mead.ddex_IsoDate.auto_value)
}
inline void ddex_IsoDate::set_auto_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  auto_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mead101.mead.ddex_IsoDate.auto_value)
}
inline void ddex_IsoDate::set_auto_value(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  auto_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mead101.mead.ddex_IsoDate.auto_value)
}
inline std::string* ddex_IsoDate::_internal_mutable_auto_value() {
  _has_bits_[0] |= 0x00000001u;
  return auto_value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ddex_IsoDate::release_auto_value() {
  // @@protoc_insertion_point(field_release:mead101.mead.ddex_IsoDate.auto_value)
  if (!_internal_has_auto_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return auto_value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ddex_IsoDate::set_allocated_auto_value(std::string* auto_value) {
  if (auto_value != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  auto_value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), auto_value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mead101.mead.ddex_IsoDate.auto_value)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace mead
}  // namespace mead101

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ddex_2dxmltoproto_2fgenerated_2fmead101_2fmead_2eproto

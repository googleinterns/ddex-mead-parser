// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ddex-xmltoproto/generated/mead101/avs.proto

#include "ddex-xmltoproto/generated/mead101/avs.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace mead101 {
namespace avs {
class AdditionalTitleTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AdditionalTitleType> _instance;
} _AdditionalTitleType_default_instance_;
class AdditionalUseTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AdditionalUseType> _instance;
} _AdditionalUseType_default_instance_;
class AdditionalVideoTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AdditionalVideoType> _instance;
} _AdditionalVideoType_default_instance_;
class AdministratingRecordCompanyRoleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AdministratingRecordCompanyRole> _instance;
} _AdministratingRecordCompanyRole_default_instance_;
class AffiliationTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AffiliationType> _instance;
} _AffiliationType_default_instance_;
class AllTerritoryCodeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AllTerritoryCode> _instance;
} _AllTerritoryCode_default_instance_;
class ArtistRoleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ArtistRole> _instance;
} _ArtistRole_default_instance_;
class ArtistTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ArtistType> _instance;
} _ArtistType_default_instance_;
class AspectRatioTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AspectRatioType> _instance;
} _AspectRatioType_default_instance_;
class AsserterTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AsserterType> _instance;
} _AsserterType_default_instance_;
class AudioCodecTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AudioCodecType> _instance;
} _AudioCodecType_default_instance_;
class AvsVersionIdDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AvsVersionId> _instance;
} _AvsVersionId_default_instance_;
class BinaryDataTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BinaryDataType> _instance;
} _BinaryDataType_default_instance_;
class BusinessMusicalWorkContributorRoleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BusinessMusicalWorkContributorRole> _instance;
} _BusinessMusicalWorkContributorRole_default_instance_;
class CarrierTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CarrierType> _instance;
} _CarrierType_default_instance_;
class CatalogTransferTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CatalogTransferType> _instance;
} _CatalogTransferType_default_instance_;
class CdProtectionTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CdProtectionType> _instance;
} _CdProtectionType_default_instance_;
class CharacterTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CharacterType> _instance;
} _CharacterType_default_instance_;
class ClaimStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClaimStatus> _instance;
} _ClaimStatus_default_instance_;
class ClassifiedGenreDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClassifiedGenre> _instance;
} _ClassifiedGenre_default_instance_;
class CodingTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CodingType> _instance;
} _CodingType_default_instance_;
class CommentaryNoteTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CommentaryNoteType> _instance;
} _CommentaryNoteType_default_instance_;
class CommercialModelTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CommercialModelType> _instance;
} _CommercialModelType_default_instance_;
class CommercialModelType_MWNLDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CommercialModelType_MWNL> _instance;
} _CommercialModelType_MWNL_default_instance_;
class CompilationTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CompilationType> _instance;
} _CompilationType_default_instance_;
class CompositeMusicalWorkTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CompositeMusicalWorkType> _instance;
} _CompositeMusicalWorkType_default_instance_;
class ContainerFormatDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ContainerFormat> _instance;
} _ContainerFormat_default_instance_;
class ContributorRoleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ContributorRole> _instance;
} _ContributorRole_default_instance_;
class CreativeMusicalWorkContributorRoleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreativeMusicalWorkContributorRole> _instance;
} _CreativeMusicalWorkContributorRole_default_instance_;
class CueOriginDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CueOrigin> _instance;
} _CueOrigin_default_instance_;
class CueSheetTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CueSheetType> _instance;
} _CueSheetType_default_instance_;
class CueUseTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CueUseType> _instance;
} _CueUseType_default_instance_;
class CurrencyCodeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CurrencyCode> _instance;
} _CurrencyCode_default_instance_;
class CurrentTerritoryCodeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CurrentTerritoryCode> _instance;
} _CurrentTerritoryCode_default_instance_;
class DanceAndRhythmStyleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DanceAndRhythmStyle> _instance;
} _DanceAndRhythmStyle_default_instance_;
class DataCarrierFormatDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DataCarrierFormat> _instance;
} _DataCarrierFormat_default_instance_;
class DataCarrierTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DataCarrierType> _instance;
} _DataCarrierType_default_instance_;
class DdexTerritoryCodeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DdexTerritoryCode> _instance;
} _DdexTerritoryCode_default_instance_;
class DeprecatedCurrencyCodeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeprecatedCurrencyCode> _instance;
} _DeprecatedCurrencyCode_default_instance_;
class DeprecatedIsoTerritoryCodeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeprecatedIsoTerritoryCode> _instance;
} _DeprecatedIsoTerritoryCode_default_instance_;
class DeprecatedReleaseTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeprecatedReleaseType> _instance;
} _DeprecatedReleaseType_default_instance_;
class DigitizationModeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DigitizationMode> _instance;
} _DigitizationMode_default_instance_;
class DisplayArtistRoleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DisplayArtistRole> _instance;
} _DisplayArtistRole_default_instance_;
class DistributionChannelTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DistributionChannelType> _instance;
} _DistributionChannelType_default_instance_;
class DocumentType_LoDDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DocumentType_LoD> _instance;
} _DocumentType_LoD_default_instance_;
class DocumentType_MWLDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DocumentType_MWL> _instance;
} _DocumentType_MWL_default_instance_;
class DpidStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DpidStatus> _instance;
} _DpidStatus_default_instance_;
class DrmEnforcementTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DrmEnforcementType> _instance;
} _DrmEnforcementType_default_instance_;
class ElementConfigurationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ElementConfiguration> _instance;
} _ElementConfiguration_default_instance_;
class ElementDesignationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ElementDesignation> _instance;
} _ElementDesignation_default_instance_;
class EncodingTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EncodingType> _instance;
} _EncodingType_default_instance_;
class EquipmentTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EquipmentType> _instance;
} _EquipmentType_default_instance_;
class ErnMessageTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ErnMessageType> _instance;
} _ErnMessageType_default_instance_;
class ErnTestMessageTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ErnTestMessageType> _instance;
} _ErnTestMessageType_default_instance_;
class ErncFileStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ErncFileStatus> _instance;
} _ErncFileStatus_default_instance_;
class ErncProposedActionTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ErncProposedActionType> _instance;
} _ErncProposedActionType_default_instance_;
class ErrorSeverityDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ErrorSeverity> _instance;
} _ErrorSeverity_default_instance_;
class ErrorTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ErrorType> _instance;
} _ErrorType_default_instance_;
class ExceptionReasonDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ExceptionReason> _instance;
} _ExceptionReason_default_instance_;
class ExpressionTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ExpressionType> _instance;
} _ExpressionType_default_instance_;
class ExternallyLinkedResourceTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ExternallyLinkedResourceType> _instance;
} _ExternallyLinkedResourceType_default_instance_;
class FileTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FileType> _instance;
} _FileType_default_instance_;
class FingerprintAlgorithmTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FingerprintAlgorithmType> _instance;
} _FingerprintAlgorithmType_default_instance_;
class FormDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Form> _instance;
} _Form_default_instance_;
class FrameRateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FrameRate> _instance;
} _FrameRate_default_instance_;
class GenderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Gender> _instance;
} _Gender_default_instance_;
class GoverningAgreementTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GoverningAgreementType> _instance;
} _GoverningAgreementType_default_instance_;
class HashSumAlgorithmTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HashSumAlgorithmType> _instance;
} _HashSumAlgorithmType_default_instance_;
class ImageCodecTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ImageCodecType> _instance;
} _ImageCodecType_default_instance_;
class ImageTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ImageType> _instance;
} _ImageType_default_instance_;
class InstrumentTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InstrumentType> _instance;
} _InstrumentType_default_instance_;
class Iso639Part12LanguageCodeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Iso639Part12LanguageCode> _instance;
} _Iso639Part12LanguageCode_default_instance_;
class Iso639Part3LanguageCodeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Iso639Part3LanguageCode> _instance;
} _Iso639Part3LanguageCode_default_instance_;
class IsoCurrencyCodeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IsoCurrencyCode> _instance;
} _IsoCurrencyCode_default_instance_;
class IsoLanguageCodeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IsoLanguageCode> _instance;
} _IsoLanguageCode_default_instance_;
class IsoTerritoryCodeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IsoTerritoryCode> _instance;
} _IsoTerritoryCode_default_instance_;
class LabelNameTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LabelNameType> _instance;
} _LabelNameType_default_instance_;
class LabelTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LabelType> _instance;
} _LabelType_default_instance_;
class LanguageLocalizationTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LanguageLocalizationType> _instance;
} _LanguageLocalizationType_default_instance_;
class LicenseRecordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LicenseRecord> _instance;
} _LicenseRecord_default_instance_;
class LicenseRefusalReasonDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LicenseRefusalReason> _instance;
} _LicenseRefusalReason_default_instance_;
class LicenseRejectionReasonDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LicenseRejectionReason> _instance;
} _LicenseRejectionReason_default_instance_;
class LinkAcknowledgementStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LinkAcknowledgementStatus> _instance;
} _LinkAcknowledgementStatus_default_instance_;
class LinkDescriptionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LinkDescription> _instance;
} _LinkDescription_default_instance_;
class LyricsTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LyricsType> _instance;
} _LyricsType_default_instance_;
class MembershipTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MembershipType> _instance;
} _MembershipType_default_instance_;
class MessageActionTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MessageActionType> _instance;
} _MessageActionType_default_instance_;
class MessageControlTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MessageControlType> _instance;
} _MessageControlType_default_instance_;
class MessagePurposeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MessagePurpose> _instance;
} _MessagePurpose_default_instance_;
class MessageTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MessageType> _instance;
} _MessageType_default_instance_;
class MetadataSourceTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MetadataSourceType> _instance;
} _MetadataSourceType_default_instance_;
class MissingLinkReasonDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MissingLinkReason> _instance;
} _MissingLinkReason_default_instance_;
class MlcMessageTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MlcMessageType> _instance;
} _MlcMessageType_default_instance_;
class ModeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Mode> _instance;
} _Mode_default_instance_;
class MoodTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MoodType> _instance;
} _MoodType_default_instance_;
class MusicalWorkContributorRoleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MusicalWorkContributorRole> _instance;
} _MusicalWorkContributorRole_default_instance_;
class MusicalWorkTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MusicalWorkType> _instance;
} _MusicalWorkType_default_instance_;
class MwnlFileStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MwnlFileStatus> _instance;
} _MwnlFileStatus_default_instance_;
class MwnlProposedActionTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MwnlProposedActionType> _instance;
} _MwnlProposedActionType_default_instance_;
class NewStudioRoleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NewStudioRole> _instance;
} _NewStudioRole_default_instance_;
class OperatingSystemTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OperatingSystemType> _instance;
} _OperatingSystemType_default_instance_;
class PLineTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PLineType> _instance;
} _PLineType_default_instance_;
class ParentalWarningTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ParentalWarningType> _instance;
} _ParentalWarningType_default_instance_;
class PartyRelationshipTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PartyRelationshipType> _instance;
} _PartyRelationshipType_default_instance_;
class PercentageTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PercentageType> _instance;
} _PercentageType_default_instance_;
class PeriodDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Period> _instance;
} _Period_default_instance_;
class PhysicalCarrierTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PhysicalCarrierType> _instance;
} _PhysicalCarrierType_default_instance_;
class PriceInformationTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PriceInformationType> _instance;
} _PriceInformationType_default_instance_;
class ProductTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProductType> _instance;
} _ProductType_default_instance_;
class ProfileIdDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProfileId> _instance;
} _ProfileId_default_instance_;
class PurposeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Purpose> _instance;
} _Purpose_default_instance_;
class RatingAgencyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RatingAgency> _instance;
} _RatingAgency_default_instance_;
class RatingReasonDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RatingReason> _instance;
} _RatingReason_default_instance_;
class RecipientRevenueTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RecipientRevenueType> _instance;
} _RecipientRevenueType_default_instance_;
class RecordingModeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RecordingMode> _instance;
} _RecordingMode_default_instance_;
class RecordingPartTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RecordingPartType> _instance;
} _RecordingPartType_default_instance_;
class ReferenceCreationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReferenceCreation> _instance;
} _ReferenceCreation_default_instance_;
class ReferenceUnitDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReferenceUnit> _instance;
} _ReferenceUnit_default_instance_;
class RegistrationStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RegistrationStatus> _instance;
} _RegistrationStatus_default_instance_;
class RelatedResourceTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RelatedResourceType> _instance;
} _RelatedResourceType_default_instance_;
class RelationalRelatorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RelationalRelator> _instance;
} _RelationalRelator_default_instance_;
class ReleaseProfileVariantVersionIdDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReleaseProfileVariantVersionId> _instance;
} _ReleaseProfileVariantVersionId_default_instance_;
class ReleaseProfileVersionIdDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReleaseProfileVersionId> _instance;
} _ReleaseProfileVersionId_default_instance_;
class ReleaseRelationshipTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReleaseRelationshipType> _instance;
} _ReleaseRelationshipType_default_instance_;
class ReleaseResourceTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReleaseResourceType> _instance;
} _ReleaseResourceType_default_instance_;
class ReleaseTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReleaseType> _instance;
} _ReleaseType_default_instance_;
class ReleaseType_ERN4DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReleaseType_ERN4> _instance;
} _ReleaseType_ERN4_default_instance_;
class ReleaseType_MCNOTIFDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReleaseType_MCNOTIF> _instance;
} _ReleaseType_MCNOTIF_default_instance_;
class RequestMessagePurposeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RequestMessagePurpose> _instance;
} _RequestMessagePurpose_default_instance_;
class RequestReasonDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RequestReason> _instance;
} _RequestReason_default_instance_;
class ResourceContributorRoleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResourceContributorRole> _instance;
} _ResourceContributorRole_default_instance_;
class ResourceGroupTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResourceGroupType> _instance;
} _ResourceGroupType_default_instance_;
class ResourceRelationshipTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResourceRelationshipType> _instance;
} _ResourceRelationshipType_default_instance_;
class ResourceTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResourceType> _instance;
} _ResourceType_default_instance_;
class ResourceType_MCNOTIFDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResourceType_MCNOTIF> _instance;
} _ResourceType_MCNOTIF_default_instance_;
class ResourceWorkRelationshipTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResourceWorkRelationshipType> _instance;
} _ResourceWorkRelationshipType_default_instance_;
class RevenueSourceTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RevenueSourceType> _instance;
} _RevenueSourceType_default_instance_;
class RightShareTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RightShareType> _instance;
} _RightShareType_default_instance_;
class RightsClaimPolicyTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RightsClaimPolicyType> _instance;
} _RightsClaimPolicyType_default_instance_;
class RightsClaimStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RightsClaimStatus> _instance;
} _RightsClaimStatus_default_instance_;
class RightsControllerRoleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RightsControllerRole> _instance;
} _RightsControllerRole_default_instance_;
class RightsControllerTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RightsControllerType> _instance;
} _RightsControllerType_default_instance_;
class RightsCoverageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RightsCoverage> _instance;
} _RightsCoverage_default_instance_;
class RightsCoverage_MWNLDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RightsCoverage_MWNL> _instance;
} _RightsCoverage_MWNL_default_instance_;
class RightsStatementProfileDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RightsStatementProfile> _instance;
} _RightsStatementProfile_default_instance_;
class RootChordNoteDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RootChordNote> _instance;
} _RootChordNote_default_instance_;
class RootChordQualityDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RootChordQuality> _instance;
} _RootChordQuality_default_instance_;
class RoyaltyRateCalculationTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RoyaltyRateCalculationType> _instance;
} _RoyaltyRateCalculationType_default_instance_;
class RoyaltyRateTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RoyaltyRateType> _instance;
} _RoyaltyRateType_default_instance_;
class SessionTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SessionType> _instance;
} _SessionType_default_instance_;
class SheetMusicCodecTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SheetMusicCodecType> _instance;
} _SheetMusicCodecType_default_instance_;
class SheetMusicTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SheetMusicType> _instance;
} _SheetMusicType_default_instance_;
class SoftwareTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SoftwareType> _instance;
} _SoftwareType_default_instance_;
class SoundRecordingTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SoundRecordingType> _instance;
} _SoundRecordingType_default_instance_;
class StatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Status> _instance;
} _Status_default_instance_;
class SubGenreDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubGenre> _instance;
} _SubGenre_default_instance_;
class SubTitleTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubTitleType> _instance;
} _SubTitleType_default_instance_;
class SupplyChainStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SupplyChainStatus> _instance;
} _SupplyChainStatus_default_instance_;
class TempoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Tempo> _instance;
} _Tempo_default_instance_;
class TerritoryCodeTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TerritoryCodeType> _instance;
} _TerritoryCodeType_default_instance_;
class TerritoryCodeTypeIncludingDeprecatedCodesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TerritoryCodeTypeIncludingDeprecatedCodes> _instance;
} _TerritoryCodeTypeIncludingDeprecatedCodes_default_instance_;
class TextCodecTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TextCodecType> _instance;
} _TextCodecType_default_instance_;
class TextTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TextType> _instance;
} _TextType_default_instance_;
class TextType_ATOMDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TextType_ATOM> _instance;
} _TextType_ATOM_default_instance_;
class ThemeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Theme> _instance;
} _Theme_default_instance_;
class ThemeTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ThemeType> _instance;
} _ThemeType_default_instance_;
class TimecodeTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TimecodeType> _instance;
} _TimecodeType_default_instance_;
class TisTerritoryCodeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TisTerritoryCode> _instance;
} _TisTerritoryCode_default_instance_;
class TitleTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TitleType> _instance;
} _TitleType_default_instance_;
class TransferCategoryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransferCategory> _instance;
} _TransferCategory_default_instance_;
class TransferTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransferType> _instance;
} _TransferType_default_instance_;
class UnitOfBitRateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UnitOfBitRate> _instance;
} _UnitOfBitRate_default_instance_;
class UnitOfConditionValueDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UnitOfConditionValue> _instance;
} _UnitOfConditionValue_default_instance_;
class UnitOfCuePointsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UnitOfCuePoints> _instance;
} _UnitOfCuePoints_default_instance_;
class UnitOfDurationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UnitOfDuration> _instance;
} _UnitOfDuration_default_instance_;
class UnitOfExtentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UnitOfExtent> _instance;
} _UnitOfExtent_default_instance_;
class UnitOfFrameRateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UnitOfFrameRate> _instance;
} _UnitOfFrameRate_default_instance_;
class UnitOfFrequencyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UnitOfFrequency> _instance;
} _UnitOfFrequency_default_instance_;
class UseTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UseType> _instance;
} _UseType_default_instance_;
class UseType_MLCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UseType_MLC> _instance;
} _UseType_MLC_default_instance_;
class UseType_MWNLDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UseType_MWNL> _instance;
} _UseType_MWNL_default_instance_;
class UserInterfaceTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserInterfaceType> _instance;
} _UserInterfaceType_default_instance_;
class VersionTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VersionType> _instance;
} _VersionType_default_instance_;
class VideoCodecTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VideoCodecType> _instance;
} _VideoCodecType_default_instance_;
class VideoDefinitionTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VideoDefinitionType> _instance;
} _VideoDefinitionType_default_instance_;
class VideoTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VideoType> _instance;
} _VideoType_default_instance_;
class VideoType_DSRFDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VideoType_DSRF> _instance;
} _VideoType_DSRF_default_instance_;
class VisualPerceptionTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VisualPerceptionType> _instance;
} _VisualPerceptionType_default_instance_;
class VocalRegisterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VocalRegister> _instance;
} _VocalRegister_default_instance_;
class VocalTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VocalType> _instance;
} _VocalType_default_instance_;
class WorkRelationshipTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WorkRelationshipType> _instance;
} _WorkRelationshipType_default_instance_;
}  // namespace avs
}  // namespace mead101
static void InitDefaultsscc_info_AdditionalTitleType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_AdditionalTitleType_default_instance_;
    new (ptr) ::mead101::avs::AdditionalTitleType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::AdditionalTitleType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AdditionalTitleType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AdditionalTitleType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_AdditionalUseType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_AdditionalUseType_default_instance_;
    new (ptr) ::mead101::avs::AdditionalUseType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::AdditionalUseType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AdditionalUseType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AdditionalUseType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_AdditionalVideoType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_AdditionalVideoType_default_instance_;
    new (ptr) ::mead101::avs::AdditionalVideoType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::AdditionalVideoType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AdditionalVideoType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AdditionalVideoType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_AdministratingRecordCompanyRole_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_AdministratingRecordCompanyRole_default_instance_;
    new (ptr) ::mead101::avs::AdministratingRecordCompanyRole();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::AdministratingRecordCompanyRole::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AdministratingRecordCompanyRole_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AdministratingRecordCompanyRole_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_AffiliationType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_AffiliationType_default_instance_;
    new (ptr) ::mead101::avs::AffiliationType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::AffiliationType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AffiliationType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AffiliationType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_AllTerritoryCode_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_AllTerritoryCode_default_instance_;
    new (ptr) ::mead101::avs::AllTerritoryCode();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::AllTerritoryCode::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AllTerritoryCode_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AllTerritoryCode_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_ArtistRole_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_ArtistRole_default_instance_;
    new (ptr) ::mead101::avs::ArtistRole();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::ArtistRole::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ArtistRole_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ArtistRole_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_ArtistType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_ArtistType_default_instance_;
    new (ptr) ::mead101::avs::ArtistType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::ArtistType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ArtistType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ArtistType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_AspectRatioType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_AspectRatioType_default_instance_;
    new (ptr) ::mead101::avs::AspectRatioType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::AspectRatioType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AspectRatioType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AspectRatioType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_AsserterType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_AsserterType_default_instance_;
    new (ptr) ::mead101::avs::AsserterType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::AsserterType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AsserterType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AsserterType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_AudioCodecType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_AudioCodecType_default_instance_;
    new (ptr) ::mead101::avs::AudioCodecType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::AudioCodecType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AudioCodecType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AudioCodecType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_AvsVersionId_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_AvsVersionId_default_instance_;
    new (ptr) ::mead101::avs::AvsVersionId();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::AvsVersionId::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AvsVersionId_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AvsVersionId_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_BinaryDataType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_BinaryDataType_default_instance_;
    new (ptr) ::mead101::avs::BinaryDataType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::BinaryDataType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BinaryDataType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BinaryDataType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_BusinessMusicalWorkContributorRole_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_BusinessMusicalWorkContributorRole_default_instance_;
    new (ptr) ::mead101::avs::BusinessMusicalWorkContributorRole();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::BusinessMusicalWorkContributorRole::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BusinessMusicalWorkContributorRole_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BusinessMusicalWorkContributorRole_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_CarrierType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_CarrierType_default_instance_;
    new (ptr) ::mead101::avs::CarrierType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::CarrierType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CarrierType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CarrierType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_CatalogTransferType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_CatalogTransferType_default_instance_;
    new (ptr) ::mead101::avs::CatalogTransferType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::CatalogTransferType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CatalogTransferType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CatalogTransferType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_CdProtectionType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_CdProtectionType_default_instance_;
    new (ptr) ::mead101::avs::CdProtectionType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::CdProtectionType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CdProtectionType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CdProtectionType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_CharacterType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_CharacterType_default_instance_;
    new (ptr) ::mead101::avs::CharacterType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::CharacterType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CharacterType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CharacterType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_ClaimStatus_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_ClaimStatus_default_instance_;
    new (ptr) ::mead101::avs::ClaimStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::ClaimStatus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClaimStatus_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ClaimStatus_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_ClassifiedGenre_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_ClassifiedGenre_default_instance_;
    new (ptr) ::mead101::avs::ClassifiedGenre();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::ClassifiedGenre::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClassifiedGenre_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ClassifiedGenre_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_CodingType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_CodingType_default_instance_;
    new (ptr) ::mead101::avs::CodingType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::CodingType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CodingType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CodingType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_CommentaryNoteType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_CommentaryNoteType_default_instance_;
    new (ptr) ::mead101::avs::CommentaryNoteType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::CommentaryNoteType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CommentaryNoteType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CommentaryNoteType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_CommercialModelType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_CommercialModelType_default_instance_;
    new (ptr) ::mead101::avs::CommercialModelType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::CommercialModelType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CommercialModelType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CommercialModelType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_CommercialModelType_MWNL_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_CommercialModelType_MWNL_default_instance_;
    new (ptr) ::mead101::avs::CommercialModelType_MWNL();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::CommercialModelType_MWNL::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CommercialModelType_MWNL_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CommercialModelType_MWNL_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_CompilationType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_CompilationType_default_instance_;
    new (ptr) ::mead101::avs::CompilationType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::CompilationType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CompilationType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CompilationType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_CompositeMusicalWorkType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_CompositeMusicalWorkType_default_instance_;
    new (ptr) ::mead101::avs::CompositeMusicalWorkType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::CompositeMusicalWorkType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CompositeMusicalWorkType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CompositeMusicalWorkType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_ContainerFormat_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_ContainerFormat_default_instance_;
    new (ptr) ::mead101::avs::ContainerFormat();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::ContainerFormat::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ContainerFormat_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ContainerFormat_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_ContributorRole_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_ContributorRole_default_instance_;
    new (ptr) ::mead101::avs::ContributorRole();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::ContributorRole::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ContributorRole_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ContributorRole_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_CreativeMusicalWorkContributorRole_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_CreativeMusicalWorkContributorRole_default_instance_;
    new (ptr) ::mead101::avs::CreativeMusicalWorkContributorRole();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::CreativeMusicalWorkContributorRole::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CreativeMusicalWorkContributorRole_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CreativeMusicalWorkContributorRole_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_CueOrigin_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_CueOrigin_default_instance_;
    new (ptr) ::mead101::avs::CueOrigin();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::CueOrigin::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CueOrigin_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CueOrigin_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_CueSheetType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_CueSheetType_default_instance_;
    new (ptr) ::mead101::avs::CueSheetType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::CueSheetType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CueSheetType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CueSheetType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_CueUseType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_CueUseType_default_instance_;
    new (ptr) ::mead101::avs::CueUseType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::CueUseType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CueUseType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CueUseType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_CurrencyCode_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_CurrencyCode_default_instance_;
    new (ptr) ::mead101::avs::CurrencyCode();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::CurrencyCode::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CurrencyCode_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CurrencyCode_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_CurrentTerritoryCode_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_CurrentTerritoryCode_default_instance_;
    new (ptr) ::mead101::avs::CurrentTerritoryCode();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::CurrentTerritoryCode::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CurrentTerritoryCode_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CurrentTerritoryCode_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_DanceAndRhythmStyle_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_DanceAndRhythmStyle_default_instance_;
    new (ptr) ::mead101::avs::DanceAndRhythmStyle();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::DanceAndRhythmStyle::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DanceAndRhythmStyle_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DanceAndRhythmStyle_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_DataCarrierFormat_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_DataCarrierFormat_default_instance_;
    new (ptr) ::mead101::avs::DataCarrierFormat();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::DataCarrierFormat::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DataCarrierFormat_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DataCarrierFormat_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_DataCarrierType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_DataCarrierType_default_instance_;
    new (ptr) ::mead101::avs::DataCarrierType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::DataCarrierType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DataCarrierType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DataCarrierType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_DdexTerritoryCode_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_DdexTerritoryCode_default_instance_;
    new (ptr) ::mead101::avs::DdexTerritoryCode();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::DdexTerritoryCode::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DdexTerritoryCode_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DdexTerritoryCode_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_DeprecatedCurrencyCode_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_DeprecatedCurrencyCode_default_instance_;
    new (ptr) ::mead101::avs::DeprecatedCurrencyCode();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::DeprecatedCurrencyCode::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeprecatedCurrencyCode_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeprecatedCurrencyCode_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_DeprecatedIsoTerritoryCode_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_DeprecatedIsoTerritoryCode_default_instance_;
    new (ptr) ::mead101::avs::DeprecatedIsoTerritoryCode();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::DeprecatedIsoTerritoryCode::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeprecatedIsoTerritoryCode_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeprecatedIsoTerritoryCode_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_DeprecatedReleaseType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_DeprecatedReleaseType_default_instance_;
    new (ptr) ::mead101::avs::DeprecatedReleaseType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::DeprecatedReleaseType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeprecatedReleaseType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeprecatedReleaseType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_DigitizationMode_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_DigitizationMode_default_instance_;
    new (ptr) ::mead101::avs::DigitizationMode();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::DigitizationMode::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DigitizationMode_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DigitizationMode_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_DisplayArtistRole_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_DisplayArtistRole_default_instance_;
    new (ptr) ::mead101::avs::DisplayArtistRole();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::DisplayArtistRole::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DisplayArtistRole_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DisplayArtistRole_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_DistributionChannelType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_DistributionChannelType_default_instance_;
    new (ptr) ::mead101::avs::DistributionChannelType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::DistributionChannelType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DistributionChannelType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DistributionChannelType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_DocumentType_LoD_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_DocumentType_LoD_default_instance_;
    new (ptr) ::mead101::avs::DocumentType_LoD();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::DocumentType_LoD::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DocumentType_LoD_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DocumentType_LoD_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_DocumentType_MWL_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_DocumentType_MWL_default_instance_;
    new (ptr) ::mead101::avs::DocumentType_MWL();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::DocumentType_MWL::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DocumentType_MWL_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DocumentType_MWL_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_DpidStatus_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_DpidStatus_default_instance_;
    new (ptr) ::mead101::avs::DpidStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::DpidStatus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DpidStatus_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DpidStatus_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_DrmEnforcementType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_DrmEnforcementType_default_instance_;
    new (ptr) ::mead101::avs::DrmEnforcementType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::DrmEnforcementType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DrmEnforcementType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DrmEnforcementType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_ElementConfiguration_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_ElementConfiguration_default_instance_;
    new (ptr) ::mead101::avs::ElementConfiguration();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::ElementConfiguration::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ElementConfiguration_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ElementConfiguration_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_ElementDesignation_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_ElementDesignation_default_instance_;
    new (ptr) ::mead101::avs::ElementDesignation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::ElementDesignation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ElementDesignation_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ElementDesignation_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_EncodingType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_EncodingType_default_instance_;
    new (ptr) ::mead101::avs::EncodingType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::EncodingType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EncodingType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EncodingType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_EquipmentType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_EquipmentType_default_instance_;
    new (ptr) ::mead101::avs::EquipmentType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::EquipmentType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EquipmentType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EquipmentType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_ErnMessageType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_ErnMessageType_default_instance_;
    new (ptr) ::mead101::avs::ErnMessageType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::ErnMessageType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ErnMessageType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ErnMessageType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_ErnTestMessageType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_ErnTestMessageType_default_instance_;
    new (ptr) ::mead101::avs::ErnTestMessageType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::ErnTestMessageType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ErnTestMessageType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ErnTestMessageType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_ErncFileStatus_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_ErncFileStatus_default_instance_;
    new (ptr) ::mead101::avs::ErncFileStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::ErncFileStatus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ErncFileStatus_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ErncFileStatus_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_ErncProposedActionType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_ErncProposedActionType_default_instance_;
    new (ptr) ::mead101::avs::ErncProposedActionType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::ErncProposedActionType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ErncProposedActionType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ErncProposedActionType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_ErrorSeverity_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_ErrorSeverity_default_instance_;
    new (ptr) ::mead101::avs::ErrorSeverity();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::ErrorSeverity::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ErrorSeverity_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ErrorSeverity_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_ErrorType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_ErrorType_default_instance_;
    new (ptr) ::mead101::avs::ErrorType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::ErrorType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ErrorType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ErrorType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_ExceptionReason_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_ExceptionReason_default_instance_;
    new (ptr) ::mead101::avs::ExceptionReason();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::ExceptionReason::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ExceptionReason_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ExceptionReason_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_ExpressionType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_ExpressionType_default_instance_;
    new (ptr) ::mead101::avs::ExpressionType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::ExpressionType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ExpressionType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ExpressionType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_ExternallyLinkedResourceType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_ExternallyLinkedResourceType_default_instance_;
    new (ptr) ::mead101::avs::ExternallyLinkedResourceType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::ExternallyLinkedResourceType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ExternallyLinkedResourceType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ExternallyLinkedResourceType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_FileType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_FileType_default_instance_;
    new (ptr) ::mead101::avs::FileType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::FileType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FileType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FileType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_FingerprintAlgorithmType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_FingerprintAlgorithmType_default_instance_;
    new (ptr) ::mead101::avs::FingerprintAlgorithmType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::FingerprintAlgorithmType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FingerprintAlgorithmType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FingerprintAlgorithmType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_Form_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_Form_default_instance_;
    new (ptr) ::mead101::avs::Form();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::Form::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Form_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Form_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_FrameRate_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_FrameRate_default_instance_;
    new (ptr) ::mead101::avs::FrameRate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::FrameRate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FrameRate_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FrameRate_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_Gender_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_Gender_default_instance_;
    new (ptr) ::mead101::avs::Gender();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::Gender::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Gender_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Gender_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_GoverningAgreementType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_GoverningAgreementType_default_instance_;
    new (ptr) ::mead101::avs::GoverningAgreementType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::GoverningAgreementType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GoverningAgreementType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GoverningAgreementType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_HashSumAlgorithmType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_HashSumAlgorithmType_default_instance_;
    new (ptr) ::mead101::avs::HashSumAlgorithmType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::HashSumAlgorithmType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HashSumAlgorithmType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HashSumAlgorithmType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_ImageCodecType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_ImageCodecType_default_instance_;
    new (ptr) ::mead101::avs::ImageCodecType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::ImageCodecType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ImageCodecType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ImageCodecType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_ImageType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_ImageType_default_instance_;
    new (ptr) ::mead101::avs::ImageType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::ImageType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ImageType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ImageType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_InstrumentType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_InstrumentType_default_instance_;
    new (ptr) ::mead101::avs::InstrumentType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::InstrumentType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InstrumentType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_InstrumentType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_Iso639Part12LanguageCode_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_Iso639Part12LanguageCode_default_instance_;
    new (ptr) ::mead101::avs::Iso639Part12LanguageCode();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::Iso639Part12LanguageCode::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Iso639Part12LanguageCode_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Iso639Part12LanguageCode_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_Iso639Part3LanguageCode_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_Iso639Part3LanguageCode_default_instance_;
    new (ptr) ::mead101::avs::Iso639Part3LanguageCode();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::Iso639Part3LanguageCode::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Iso639Part3LanguageCode_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Iso639Part3LanguageCode_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_IsoCurrencyCode_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_IsoCurrencyCode_default_instance_;
    new (ptr) ::mead101::avs::IsoCurrencyCode();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::IsoCurrencyCode::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IsoCurrencyCode_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IsoCurrencyCode_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_IsoLanguageCode_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_IsoLanguageCode_default_instance_;
    new (ptr) ::mead101::avs::IsoLanguageCode();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::IsoLanguageCode::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IsoLanguageCode_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IsoLanguageCode_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_IsoTerritoryCode_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_IsoTerritoryCode_default_instance_;
    new (ptr) ::mead101::avs::IsoTerritoryCode();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::IsoTerritoryCode::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IsoTerritoryCode_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IsoTerritoryCode_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_LabelNameType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_LabelNameType_default_instance_;
    new (ptr) ::mead101::avs::LabelNameType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::LabelNameType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LabelNameType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LabelNameType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_LabelType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_LabelType_default_instance_;
    new (ptr) ::mead101::avs::LabelType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::LabelType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LabelType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LabelType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_LanguageLocalizationType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_LanguageLocalizationType_default_instance_;
    new (ptr) ::mead101::avs::LanguageLocalizationType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::LanguageLocalizationType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LanguageLocalizationType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LanguageLocalizationType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_LicenseRecord_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_LicenseRecord_default_instance_;
    new (ptr) ::mead101::avs::LicenseRecord();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::LicenseRecord::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LicenseRecord_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LicenseRecord_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_LicenseRefusalReason_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_LicenseRefusalReason_default_instance_;
    new (ptr) ::mead101::avs::LicenseRefusalReason();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::LicenseRefusalReason::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LicenseRefusalReason_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LicenseRefusalReason_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_LicenseRejectionReason_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_LicenseRejectionReason_default_instance_;
    new (ptr) ::mead101::avs::LicenseRejectionReason();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::LicenseRejectionReason::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LicenseRejectionReason_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LicenseRejectionReason_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_LinkAcknowledgementStatus_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_LinkAcknowledgementStatus_default_instance_;
    new (ptr) ::mead101::avs::LinkAcknowledgementStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::LinkAcknowledgementStatus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LinkAcknowledgementStatus_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LinkAcknowledgementStatus_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_LinkDescription_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_LinkDescription_default_instance_;
    new (ptr) ::mead101::avs::LinkDescription();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::LinkDescription::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LinkDescription_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LinkDescription_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_LyricsType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_LyricsType_default_instance_;
    new (ptr) ::mead101::avs::LyricsType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::LyricsType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LyricsType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LyricsType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_MembershipType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_MembershipType_default_instance_;
    new (ptr) ::mead101::avs::MembershipType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::MembershipType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MembershipType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MembershipType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_MessageActionType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_MessageActionType_default_instance_;
    new (ptr) ::mead101::avs::MessageActionType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::MessageActionType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MessageActionType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MessageActionType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_MessageControlType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_MessageControlType_default_instance_;
    new (ptr) ::mead101::avs::MessageControlType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::MessageControlType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MessageControlType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MessageControlType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_MessagePurpose_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_MessagePurpose_default_instance_;
    new (ptr) ::mead101::avs::MessagePurpose();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::MessagePurpose::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MessagePurpose_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MessagePurpose_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_MessageType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_MessageType_default_instance_;
    new (ptr) ::mead101::avs::MessageType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::MessageType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MessageType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MessageType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_MetadataSourceType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_MetadataSourceType_default_instance_;
    new (ptr) ::mead101::avs::MetadataSourceType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::MetadataSourceType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MetadataSourceType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MetadataSourceType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_MissingLinkReason_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_MissingLinkReason_default_instance_;
    new (ptr) ::mead101::avs::MissingLinkReason();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::MissingLinkReason::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MissingLinkReason_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MissingLinkReason_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_MlcMessageType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_MlcMessageType_default_instance_;
    new (ptr) ::mead101::avs::MlcMessageType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::MlcMessageType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MlcMessageType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MlcMessageType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_Mode_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_Mode_default_instance_;
    new (ptr) ::mead101::avs::Mode();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::Mode::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Mode_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Mode_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_MoodType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_MoodType_default_instance_;
    new (ptr) ::mead101::avs::MoodType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::MoodType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MoodType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MoodType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_MusicalWorkContributorRole_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_MusicalWorkContributorRole_default_instance_;
    new (ptr) ::mead101::avs::MusicalWorkContributorRole();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::MusicalWorkContributorRole::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MusicalWorkContributorRole_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MusicalWorkContributorRole_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_MusicalWorkType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_MusicalWorkType_default_instance_;
    new (ptr) ::mead101::avs::MusicalWorkType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::MusicalWorkType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MusicalWorkType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MusicalWorkType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_MwnlFileStatus_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_MwnlFileStatus_default_instance_;
    new (ptr) ::mead101::avs::MwnlFileStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::MwnlFileStatus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MwnlFileStatus_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MwnlFileStatus_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_MwnlProposedActionType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_MwnlProposedActionType_default_instance_;
    new (ptr) ::mead101::avs::MwnlProposedActionType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::MwnlProposedActionType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MwnlProposedActionType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MwnlProposedActionType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_NewStudioRole_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_NewStudioRole_default_instance_;
    new (ptr) ::mead101::avs::NewStudioRole();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::NewStudioRole::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NewStudioRole_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NewStudioRole_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_OperatingSystemType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_OperatingSystemType_default_instance_;
    new (ptr) ::mead101::avs::OperatingSystemType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::OperatingSystemType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OperatingSystemType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OperatingSystemType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_PLineType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_PLineType_default_instance_;
    new (ptr) ::mead101::avs::PLineType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::PLineType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PLineType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PLineType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_ParentalWarningType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_ParentalWarningType_default_instance_;
    new (ptr) ::mead101::avs::ParentalWarningType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::ParentalWarningType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ParentalWarningType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ParentalWarningType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_PartyRelationshipType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_PartyRelationshipType_default_instance_;
    new (ptr) ::mead101::avs::PartyRelationshipType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::PartyRelationshipType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PartyRelationshipType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PartyRelationshipType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_PercentageType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_PercentageType_default_instance_;
    new (ptr) ::mead101::avs::PercentageType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::PercentageType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PercentageType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PercentageType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_Period_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_Period_default_instance_;
    new (ptr) ::mead101::avs::Period();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::Period::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Period_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Period_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_PhysicalCarrierType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_PhysicalCarrierType_default_instance_;
    new (ptr) ::mead101::avs::PhysicalCarrierType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::PhysicalCarrierType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PhysicalCarrierType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PhysicalCarrierType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_PriceInformationType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_PriceInformationType_default_instance_;
    new (ptr) ::mead101::avs::PriceInformationType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::PriceInformationType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PriceInformationType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PriceInformationType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_ProductType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_ProductType_default_instance_;
    new (ptr) ::mead101::avs::ProductType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::ProductType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProductType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ProductType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_ProfileId_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_ProfileId_default_instance_;
    new (ptr) ::mead101::avs::ProfileId();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::ProfileId::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProfileId_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ProfileId_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_Purpose_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_Purpose_default_instance_;
    new (ptr) ::mead101::avs::Purpose();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::Purpose::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Purpose_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Purpose_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_RatingAgency_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_RatingAgency_default_instance_;
    new (ptr) ::mead101::avs::RatingAgency();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::RatingAgency::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RatingAgency_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RatingAgency_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_RatingReason_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_RatingReason_default_instance_;
    new (ptr) ::mead101::avs::RatingReason();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::RatingReason::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RatingReason_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RatingReason_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_RecipientRevenueType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_RecipientRevenueType_default_instance_;
    new (ptr) ::mead101::avs::RecipientRevenueType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::RecipientRevenueType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RecipientRevenueType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RecipientRevenueType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_RecordingMode_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_RecordingMode_default_instance_;
    new (ptr) ::mead101::avs::RecordingMode();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::RecordingMode::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RecordingMode_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RecordingMode_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_RecordingPartType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_RecordingPartType_default_instance_;
    new (ptr) ::mead101::avs::RecordingPartType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::RecordingPartType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RecordingPartType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RecordingPartType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_ReferenceCreation_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_ReferenceCreation_default_instance_;
    new (ptr) ::mead101::avs::ReferenceCreation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::ReferenceCreation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReferenceCreation_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ReferenceCreation_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_ReferenceUnit_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_ReferenceUnit_default_instance_;
    new (ptr) ::mead101::avs::ReferenceUnit();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::ReferenceUnit::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReferenceUnit_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ReferenceUnit_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_RegistrationStatus_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_RegistrationStatus_default_instance_;
    new (ptr) ::mead101::avs::RegistrationStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::RegistrationStatus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RegistrationStatus_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RegistrationStatus_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_RelatedResourceType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_RelatedResourceType_default_instance_;
    new (ptr) ::mead101::avs::RelatedResourceType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::RelatedResourceType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RelatedResourceType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RelatedResourceType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_RelationalRelator_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_RelationalRelator_default_instance_;
    new (ptr) ::mead101::avs::RelationalRelator();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::RelationalRelator::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RelationalRelator_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RelationalRelator_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_ReleaseProfileVariantVersionId_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_ReleaseProfileVariantVersionId_default_instance_;
    new (ptr) ::mead101::avs::ReleaseProfileVariantVersionId();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::ReleaseProfileVariantVersionId::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReleaseProfileVariantVersionId_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ReleaseProfileVariantVersionId_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_ReleaseProfileVersionId_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_ReleaseProfileVersionId_default_instance_;
    new (ptr) ::mead101::avs::ReleaseProfileVersionId();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::ReleaseProfileVersionId::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReleaseProfileVersionId_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ReleaseProfileVersionId_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_ReleaseRelationshipType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_ReleaseRelationshipType_default_instance_;
    new (ptr) ::mead101::avs::ReleaseRelationshipType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::ReleaseRelationshipType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReleaseRelationshipType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ReleaseRelationshipType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_ReleaseResourceType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_ReleaseResourceType_default_instance_;
    new (ptr) ::mead101::avs::ReleaseResourceType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::ReleaseResourceType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReleaseResourceType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ReleaseResourceType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_ReleaseType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_ReleaseType_default_instance_;
    new (ptr) ::mead101::avs::ReleaseType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::ReleaseType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReleaseType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ReleaseType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_ReleaseType_ERN4_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_ReleaseType_ERN4_default_instance_;
    new (ptr) ::mead101::avs::ReleaseType_ERN4();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::ReleaseType_ERN4::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReleaseType_ERN4_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ReleaseType_ERN4_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_ReleaseType_MCNOTIF_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_ReleaseType_MCNOTIF_default_instance_;
    new (ptr) ::mead101::avs::ReleaseType_MCNOTIF();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::ReleaseType_MCNOTIF::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReleaseType_MCNOTIF_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ReleaseType_MCNOTIF_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_RequestMessagePurpose_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_RequestMessagePurpose_default_instance_;
    new (ptr) ::mead101::avs::RequestMessagePurpose();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::RequestMessagePurpose::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RequestMessagePurpose_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RequestMessagePurpose_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_RequestReason_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_RequestReason_default_instance_;
    new (ptr) ::mead101::avs::RequestReason();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::RequestReason::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RequestReason_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RequestReason_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_ResourceContributorRole_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_ResourceContributorRole_default_instance_;
    new (ptr) ::mead101::avs::ResourceContributorRole();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::ResourceContributorRole::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResourceContributorRole_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ResourceContributorRole_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_ResourceGroupType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_ResourceGroupType_default_instance_;
    new (ptr) ::mead101::avs::ResourceGroupType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::ResourceGroupType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResourceGroupType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ResourceGroupType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_ResourceRelationshipType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_ResourceRelationshipType_default_instance_;
    new (ptr) ::mead101::avs::ResourceRelationshipType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::ResourceRelationshipType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResourceRelationshipType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ResourceRelationshipType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_ResourceType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_ResourceType_default_instance_;
    new (ptr) ::mead101::avs::ResourceType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::ResourceType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResourceType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ResourceType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_ResourceType_MCNOTIF_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_ResourceType_MCNOTIF_default_instance_;
    new (ptr) ::mead101::avs::ResourceType_MCNOTIF();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::ResourceType_MCNOTIF::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResourceType_MCNOTIF_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ResourceType_MCNOTIF_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_ResourceWorkRelationshipType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_ResourceWorkRelationshipType_default_instance_;
    new (ptr) ::mead101::avs::ResourceWorkRelationshipType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::ResourceWorkRelationshipType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResourceWorkRelationshipType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ResourceWorkRelationshipType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_RevenueSourceType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_RevenueSourceType_default_instance_;
    new (ptr) ::mead101::avs::RevenueSourceType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::RevenueSourceType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RevenueSourceType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RevenueSourceType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_RightShareType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_RightShareType_default_instance_;
    new (ptr) ::mead101::avs::RightShareType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::RightShareType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RightShareType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RightShareType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_RightsClaimPolicyType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_RightsClaimPolicyType_default_instance_;
    new (ptr) ::mead101::avs::RightsClaimPolicyType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::RightsClaimPolicyType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RightsClaimPolicyType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RightsClaimPolicyType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_RightsClaimStatus_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_RightsClaimStatus_default_instance_;
    new (ptr) ::mead101::avs::RightsClaimStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::RightsClaimStatus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RightsClaimStatus_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RightsClaimStatus_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_RightsControllerRole_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_RightsControllerRole_default_instance_;
    new (ptr) ::mead101::avs::RightsControllerRole();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::RightsControllerRole::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RightsControllerRole_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RightsControllerRole_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_RightsControllerType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_RightsControllerType_default_instance_;
    new (ptr) ::mead101::avs::RightsControllerType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::RightsControllerType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RightsControllerType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RightsControllerType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_RightsCoverage_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_RightsCoverage_default_instance_;
    new (ptr) ::mead101::avs::RightsCoverage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::RightsCoverage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RightsCoverage_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RightsCoverage_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_RightsCoverage_MWNL_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_RightsCoverage_MWNL_default_instance_;
    new (ptr) ::mead101::avs::RightsCoverage_MWNL();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::RightsCoverage_MWNL::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RightsCoverage_MWNL_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RightsCoverage_MWNL_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_RightsStatementProfile_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_RightsStatementProfile_default_instance_;
    new (ptr) ::mead101::avs::RightsStatementProfile();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::RightsStatementProfile::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RightsStatementProfile_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RightsStatementProfile_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_RootChordNote_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_RootChordNote_default_instance_;
    new (ptr) ::mead101::avs::RootChordNote();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::RootChordNote::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RootChordNote_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RootChordNote_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_RootChordQuality_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_RootChordQuality_default_instance_;
    new (ptr) ::mead101::avs::RootChordQuality();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::RootChordQuality::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RootChordQuality_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RootChordQuality_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_RoyaltyRateCalculationType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_RoyaltyRateCalculationType_default_instance_;
    new (ptr) ::mead101::avs::RoyaltyRateCalculationType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::RoyaltyRateCalculationType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RoyaltyRateCalculationType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RoyaltyRateCalculationType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_RoyaltyRateType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_RoyaltyRateType_default_instance_;
    new (ptr) ::mead101::avs::RoyaltyRateType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::RoyaltyRateType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RoyaltyRateType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RoyaltyRateType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_SessionType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_SessionType_default_instance_;
    new (ptr) ::mead101::avs::SessionType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::SessionType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SessionType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SessionType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_SheetMusicCodecType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_SheetMusicCodecType_default_instance_;
    new (ptr) ::mead101::avs::SheetMusicCodecType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::SheetMusicCodecType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SheetMusicCodecType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SheetMusicCodecType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_SheetMusicType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_SheetMusicType_default_instance_;
    new (ptr) ::mead101::avs::SheetMusicType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::SheetMusicType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SheetMusicType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SheetMusicType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_SoftwareType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_SoftwareType_default_instance_;
    new (ptr) ::mead101::avs::SoftwareType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::SoftwareType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SoftwareType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SoftwareType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_SoundRecordingType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_SoundRecordingType_default_instance_;
    new (ptr) ::mead101::avs::SoundRecordingType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::SoundRecordingType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SoundRecordingType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SoundRecordingType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_Status_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_Status_default_instance_;
    new (ptr) ::mead101::avs::Status();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::Status::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Status_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Status_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_SubGenre_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_SubGenre_default_instance_;
    new (ptr) ::mead101::avs::SubGenre();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::SubGenre::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SubGenre_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SubGenre_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_SubTitleType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_SubTitleType_default_instance_;
    new (ptr) ::mead101::avs::SubTitleType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::SubTitleType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SubTitleType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SubTitleType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_SupplyChainStatus_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_SupplyChainStatus_default_instance_;
    new (ptr) ::mead101::avs::SupplyChainStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::SupplyChainStatus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SupplyChainStatus_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SupplyChainStatus_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_Tempo_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_Tempo_default_instance_;
    new (ptr) ::mead101::avs::Tempo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::Tempo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Tempo_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Tempo_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_TerritoryCodeType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_TerritoryCodeType_default_instance_;
    new (ptr) ::mead101::avs::TerritoryCodeType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::TerritoryCodeType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TerritoryCodeType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TerritoryCodeType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_TerritoryCodeTypeIncludingDeprecatedCodes_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_TerritoryCodeTypeIncludingDeprecatedCodes_default_instance_;
    new (ptr) ::mead101::avs::TerritoryCodeTypeIncludingDeprecatedCodes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::TerritoryCodeTypeIncludingDeprecatedCodes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TerritoryCodeTypeIncludingDeprecatedCodes_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TerritoryCodeTypeIncludingDeprecatedCodes_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_TextCodecType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_TextCodecType_default_instance_;
    new (ptr) ::mead101::avs::TextCodecType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::TextCodecType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TextCodecType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TextCodecType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_TextType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_TextType_default_instance_;
    new (ptr) ::mead101::avs::TextType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::TextType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TextType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TextType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_TextType_ATOM_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_TextType_ATOM_default_instance_;
    new (ptr) ::mead101::avs::TextType_ATOM();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::TextType_ATOM::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TextType_ATOM_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TextType_ATOM_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_Theme_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_Theme_default_instance_;
    new (ptr) ::mead101::avs::Theme();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::Theme::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Theme_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Theme_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_ThemeType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_ThemeType_default_instance_;
    new (ptr) ::mead101::avs::ThemeType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::ThemeType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ThemeType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ThemeType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_TimecodeType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_TimecodeType_default_instance_;
    new (ptr) ::mead101::avs::TimecodeType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::TimecodeType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TimecodeType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TimecodeType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_TisTerritoryCode_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_TisTerritoryCode_default_instance_;
    new (ptr) ::mead101::avs::TisTerritoryCode();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::TisTerritoryCode::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TisTerritoryCode_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TisTerritoryCode_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_TitleType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_TitleType_default_instance_;
    new (ptr) ::mead101::avs::TitleType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::TitleType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TitleType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TitleType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_TransferCategory_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_TransferCategory_default_instance_;
    new (ptr) ::mead101::avs::TransferCategory();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::TransferCategory::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransferCategory_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TransferCategory_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_TransferType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_TransferType_default_instance_;
    new (ptr) ::mead101::avs::TransferType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::TransferType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransferType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TransferType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_UnitOfBitRate_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_UnitOfBitRate_default_instance_;
    new (ptr) ::mead101::avs::UnitOfBitRate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::UnitOfBitRate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UnitOfBitRate_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UnitOfBitRate_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_UnitOfConditionValue_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_UnitOfConditionValue_default_instance_;
    new (ptr) ::mead101::avs::UnitOfConditionValue();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::UnitOfConditionValue::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UnitOfConditionValue_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UnitOfConditionValue_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_UnitOfCuePoints_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_UnitOfCuePoints_default_instance_;
    new (ptr) ::mead101::avs::UnitOfCuePoints();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::UnitOfCuePoints::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UnitOfCuePoints_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UnitOfCuePoints_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_UnitOfDuration_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_UnitOfDuration_default_instance_;
    new (ptr) ::mead101::avs::UnitOfDuration();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::UnitOfDuration::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UnitOfDuration_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UnitOfDuration_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_UnitOfExtent_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_UnitOfExtent_default_instance_;
    new (ptr) ::mead101::avs::UnitOfExtent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::UnitOfExtent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UnitOfExtent_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UnitOfExtent_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_UnitOfFrameRate_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_UnitOfFrameRate_default_instance_;
    new (ptr) ::mead101::avs::UnitOfFrameRate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::UnitOfFrameRate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UnitOfFrameRate_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UnitOfFrameRate_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_UnitOfFrequency_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_UnitOfFrequency_default_instance_;
    new (ptr) ::mead101::avs::UnitOfFrequency();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::UnitOfFrequency::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UnitOfFrequency_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UnitOfFrequency_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_UseType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_UseType_default_instance_;
    new (ptr) ::mead101::avs::UseType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::UseType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UseType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UseType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_UseType_MLC_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_UseType_MLC_default_instance_;
    new (ptr) ::mead101::avs::UseType_MLC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::UseType_MLC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UseType_MLC_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UseType_MLC_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_UseType_MWNL_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_UseType_MWNL_default_instance_;
    new (ptr) ::mead101::avs::UseType_MWNL();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::UseType_MWNL::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UseType_MWNL_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UseType_MWNL_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_UserInterfaceType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_UserInterfaceType_default_instance_;
    new (ptr) ::mead101::avs::UserInterfaceType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::UserInterfaceType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserInterfaceType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UserInterfaceType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_VersionType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_VersionType_default_instance_;
    new (ptr) ::mead101::avs::VersionType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::VersionType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VersionType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_VersionType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_VideoCodecType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_VideoCodecType_default_instance_;
    new (ptr) ::mead101::avs::VideoCodecType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::VideoCodecType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VideoCodecType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_VideoCodecType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_VideoDefinitionType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_VideoDefinitionType_default_instance_;
    new (ptr) ::mead101::avs::VideoDefinitionType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::VideoDefinitionType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VideoDefinitionType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_VideoDefinitionType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_VideoType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_VideoType_default_instance_;
    new (ptr) ::mead101::avs::VideoType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::VideoType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VideoType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_VideoType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_VideoType_DSRF_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_VideoType_DSRF_default_instance_;
    new (ptr) ::mead101::avs::VideoType_DSRF();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::VideoType_DSRF::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VideoType_DSRF_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_VideoType_DSRF_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_VisualPerceptionType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_VisualPerceptionType_default_instance_;
    new (ptr) ::mead101::avs::VisualPerceptionType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::VisualPerceptionType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VisualPerceptionType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_VisualPerceptionType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_VocalRegister_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_VocalRegister_default_instance_;
    new (ptr) ::mead101::avs::VocalRegister();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::VocalRegister::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VocalRegister_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_VocalRegister_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_VocalType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_VocalType_default_instance_;
    new (ptr) ::mead101::avs::VocalType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::VocalType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VocalType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_VocalType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static void InitDefaultsscc_info_WorkRelationshipType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mead101::avs::_WorkRelationshipType_default_instance_;
    new (ptr) ::mead101::avs::WorkRelationshipType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mead101::avs::WorkRelationshipType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WorkRelationshipType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WorkRelationshipType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto[191];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::mead101::avs::AdditionalTitleType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::AdditionalTitleType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::AdditionalTitleType, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::AdditionalUseType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::AdditionalUseType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::AdditionalUseType, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::AdditionalVideoType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::AdditionalVideoType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::AdditionalVideoType, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::AdministratingRecordCompanyRole, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::AdministratingRecordCompanyRole, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::AdministratingRecordCompanyRole, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::AffiliationType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::AffiliationType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::AffiliationType, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::AllTerritoryCode, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::AllTerritoryCode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::AllTerritoryCode, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::ArtistRole, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::ArtistRole, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::ArtistRole, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::ArtistType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::ArtistType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::ArtistType, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::AspectRatioType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::AspectRatioType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::AspectRatioType, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::AsserterType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::AsserterType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::AsserterType, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::AudioCodecType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::AudioCodecType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::AudioCodecType, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::AvsVersionId, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::AvsVersionId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::AvsVersionId, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::BinaryDataType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::BinaryDataType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::BinaryDataType, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::BusinessMusicalWorkContributorRole, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::BusinessMusicalWorkContributorRole, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::BusinessMusicalWorkContributorRole, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::CarrierType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::CarrierType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::CarrierType, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::CatalogTransferType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::CatalogTransferType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::CatalogTransferType, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::CdProtectionType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::CdProtectionType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::CdProtectionType, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::CharacterType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::CharacterType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::CharacterType, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::ClaimStatus, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::ClaimStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::ClaimStatus, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::ClassifiedGenre, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::ClassifiedGenre, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::ClassifiedGenre, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::CodingType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::CodingType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::CodingType, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::CommentaryNoteType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::CommentaryNoteType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::CommentaryNoteType, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::CommercialModelType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::CommercialModelType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::CommercialModelType, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::CommercialModelType_MWNL, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::CommercialModelType_MWNL, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::CommercialModelType_MWNL, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::CompilationType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::CompilationType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::CompilationType, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::CompositeMusicalWorkType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::CompositeMusicalWorkType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::CompositeMusicalWorkType, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::ContainerFormat, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::ContainerFormat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::ContainerFormat, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::ContributorRole, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::ContributorRole, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::ContributorRole, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::CreativeMusicalWorkContributorRole, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::CreativeMusicalWorkContributorRole, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::CreativeMusicalWorkContributorRole, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::CueOrigin, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::CueOrigin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::CueOrigin, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::CueSheetType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::CueSheetType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::CueSheetType, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::CueUseType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::CueUseType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::CueUseType, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::CurrencyCode, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::CurrencyCode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::CurrencyCode, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::CurrentTerritoryCode, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::CurrentTerritoryCode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::CurrentTerritoryCode, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::DanceAndRhythmStyle, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::DanceAndRhythmStyle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::DanceAndRhythmStyle, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::DataCarrierFormat, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::DataCarrierFormat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::DataCarrierFormat, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::DataCarrierType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::DataCarrierType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::DataCarrierType, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::DdexTerritoryCode, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::DdexTerritoryCode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::DdexTerritoryCode, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::DeprecatedCurrencyCode, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::DeprecatedCurrencyCode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::DeprecatedCurrencyCode, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::DeprecatedIsoTerritoryCode, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::DeprecatedIsoTerritoryCode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::DeprecatedIsoTerritoryCode, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::DeprecatedReleaseType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::DeprecatedReleaseType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::DeprecatedReleaseType, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::DigitizationMode, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::DigitizationMode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::DigitizationMode, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::DisplayArtistRole, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::DisplayArtistRole, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::DisplayArtistRole, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::DistributionChannelType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::DistributionChannelType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::DistributionChannelType, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::DocumentType_LoD, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::DocumentType_LoD, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::DocumentType_LoD, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::DocumentType_MWL, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::DocumentType_MWL, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::DocumentType_MWL, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::DpidStatus, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::DpidStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::DpidStatus, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::DrmEnforcementType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::DrmEnforcementType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::DrmEnforcementType, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::ElementConfiguration, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::ElementConfiguration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::ElementConfiguration, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::ElementDesignation, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::ElementDesignation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::ElementDesignation, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::EncodingType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::EncodingType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::EncodingType, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::EquipmentType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::EquipmentType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::EquipmentType, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::ErnMessageType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::ErnMessageType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::ErnMessageType, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::ErnTestMessageType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::ErnTestMessageType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::ErnTestMessageType, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::ErncFileStatus, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::ErncFileStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::ErncFileStatus, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::ErncProposedActionType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::ErncProposedActionType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::ErncProposedActionType, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::ErrorSeverity, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::ErrorSeverity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::ErrorSeverity, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::ErrorType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::ErrorType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::ErrorType, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::ExceptionReason, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::ExceptionReason, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::ExceptionReason, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::ExpressionType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::ExpressionType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::ExpressionType, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::ExternallyLinkedResourceType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::ExternallyLinkedResourceType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::ExternallyLinkedResourceType, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::FileType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::FileType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::FileType, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::FingerprintAlgorithmType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::FingerprintAlgorithmType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::FingerprintAlgorithmType, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::Form, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::Form, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::Form, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::FrameRate, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::FrameRate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::FrameRate, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::Gender, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::Gender, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::Gender, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::GoverningAgreementType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::GoverningAgreementType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::GoverningAgreementType, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::HashSumAlgorithmType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::HashSumAlgorithmType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::HashSumAlgorithmType, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::ImageCodecType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::ImageCodecType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::ImageCodecType, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::ImageType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::ImageType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::ImageType, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::InstrumentType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::InstrumentType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::InstrumentType, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::Iso639Part12LanguageCode, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::Iso639Part12LanguageCode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::Iso639Part12LanguageCode, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::Iso639Part3LanguageCode, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::Iso639Part3LanguageCode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::Iso639Part3LanguageCode, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::IsoCurrencyCode, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::IsoCurrencyCode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::IsoCurrencyCode, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::IsoLanguageCode, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::IsoLanguageCode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::IsoLanguageCode, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::IsoTerritoryCode, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::IsoTerritoryCode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::IsoTerritoryCode, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::LabelNameType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::LabelNameType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::LabelNameType, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::LabelType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::LabelType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::LabelType, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::LanguageLocalizationType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::LanguageLocalizationType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::LanguageLocalizationType, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::LicenseRecord, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::LicenseRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::LicenseRecord, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::LicenseRefusalReason, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::LicenseRefusalReason, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::LicenseRefusalReason, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::LicenseRejectionReason, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::LicenseRejectionReason, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::LicenseRejectionReason, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::LinkAcknowledgementStatus, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::LinkAcknowledgementStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::LinkAcknowledgementStatus, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::LinkDescription, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::LinkDescription, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::LinkDescription, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::LyricsType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::LyricsType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::LyricsType, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::MembershipType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::MembershipType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::MembershipType, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::MessageActionType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::MessageActionType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::MessageActionType, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::MessageControlType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::MessageControlType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::MessageControlType, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::MessagePurpose, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::MessagePurpose, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::MessagePurpose, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::MessageType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::MessageType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::MessageType, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::MetadataSourceType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::MetadataSourceType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::MetadataSourceType, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::MissingLinkReason, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::MissingLinkReason, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::MissingLinkReason, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::MlcMessageType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::MlcMessageType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::MlcMessageType, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::Mode, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::Mode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::Mode, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::MoodType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::MoodType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::MoodType, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::MusicalWorkContributorRole, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::MusicalWorkContributorRole, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::MusicalWorkContributorRole, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::MusicalWorkType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::MusicalWorkType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::MusicalWorkType, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::MwnlFileStatus, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::MwnlFileStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::MwnlFileStatus, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::MwnlProposedActionType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::MwnlProposedActionType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::MwnlProposedActionType, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::NewStudioRole, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::NewStudioRole, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::NewStudioRole, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::OperatingSystemType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::OperatingSystemType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::OperatingSystemType, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::PLineType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::PLineType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::PLineType, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::ParentalWarningType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::ParentalWarningType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::ParentalWarningType, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::PartyRelationshipType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::PartyRelationshipType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::PartyRelationshipType, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::PercentageType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::PercentageType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::PercentageType, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::Period, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::Period, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::Period, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::PhysicalCarrierType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::PhysicalCarrierType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::PhysicalCarrierType, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::PriceInformationType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::PriceInformationType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::PriceInformationType, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::ProductType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::ProductType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::ProductType, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::ProfileId, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::ProfileId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::ProfileId, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::Purpose, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::Purpose, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::Purpose, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::RatingAgency, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::RatingAgency, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::RatingAgency, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::RatingReason, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::RatingReason, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::RatingReason, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::RecipientRevenueType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::RecipientRevenueType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::RecipientRevenueType, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::RecordingMode, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::RecordingMode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::RecordingMode, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::RecordingPartType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::RecordingPartType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::RecordingPartType, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::ReferenceCreation, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::ReferenceCreation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::ReferenceCreation, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::ReferenceUnit, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::ReferenceUnit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::ReferenceUnit, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::RegistrationStatus, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::RegistrationStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::RegistrationStatus, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::RelatedResourceType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::RelatedResourceType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::RelatedResourceType, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::RelationalRelator, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::RelationalRelator, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::RelationalRelator, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::ReleaseProfileVariantVersionId, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::ReleaseProfileVariantVersionId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::ReleaseProfileVariantVersionId, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::ReleaseProfileVersionId, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::ReleaseProfileVersionId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::ReleaseProfileVersionId, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::ReleaseRelationshipType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::ReleaseRelationshipType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::ReleaseRelationshipType, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::ReleaseResourceType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::ReleaseResourceType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::ReleaseResourceType, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::ReleaseType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::ReleaseType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::ReleaseType, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::ReleaseType_ERN4, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::ReleaseType_ERN4, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::ReleaseType_ERN4, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::ReleaseType_MCNOTIF, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::ReleaseType_MCNOTIF, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::ReleaseType_MCNOTIF, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::RequestMessagePurpose, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::RequestMessagePurpose, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::RequestMessagePurpose, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::RequestReason, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::RequestReason, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::RequestReason, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::ResourceContributorRole, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::ResourceContributorRole, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::ResourceContributorRole, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::ResourceGroupType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::ResourceGroupType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::ResourceGroupType, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::ResourceRelationshipType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::ResourceRelationshipType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::ResourceRelationshipType, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::ResourceType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::ResourceType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::ResourceType, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::ResourceType_MCNOTIF, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::ResourceType_MCNOTIF, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::ResourceType_MCNOTIF, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::ResourceWorkRelationshipType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::ResourceWorkRelationshipType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::ResourceWorkRelationshipType, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::RevenueSourceType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::RevenueSourceType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::RevenueSourceType, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::RightShareType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::RightShareType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::RightShareType, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::RightsClaimPolicyType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::RightsClaimPolicyType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::RightsClaimPolicyType, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::RightsClaimStatus, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::RightsClaimStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::RightsClaimStatus, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::RightsControllerRole, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::RightsControllerRole, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::RightsControllerRole, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::RightsControllerType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::RightsControllerType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::RightsControllerType, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::RightsCoverage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::RightsCoverage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::RightsCoverage, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::RightsCoverage_MWNL, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::RightsCoverage_MWNL, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::RightsCoverage_MWNL, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::RightsStatementProfile, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::RightsStatementProfile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::RightsStatementProfile, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::RootChordNote, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::RootChordNote, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::RootChordNote, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::RootChordQuality, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::RootChordQuality, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::RootChordQuality, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::RoyaltyRateCalculationType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::RoyaltyRateCalculationType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::RoyaltyRateCalculationType, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::RoyaltyRateType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::RoyaltyRateType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::RoyaltyRateType, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::SessionType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::SessionType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::SessionType, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::SheetMusicCodecType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::SheetMusicCodecType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::SheetMusicCodecType, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::SheetMusicType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::SheetMusicType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::SheetMusicType, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::SoftwareType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::SoftwareType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::SoftwareType, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::SoundRecordingType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::SoundRecordingType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::SoundRecordingType, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::Status, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::Status, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::Status, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::SubGenre, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::SubGenre, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::SubGenre, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::SubTitleType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::SubTitleType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::SubTitleType, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::SupplyChainStatus, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::SupplyChainStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::SupplyChainStatus, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::Tempo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::Tempo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::Tempo, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::TerritoryCodeType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::TerritoryCodeType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::TerritoryCodeType, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::TerritoryCodeTypeIncludingDeprecatedCodes, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::TerritoryCodeTypeIncludingDeprecatedCodes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::TerritoryCodeTypeIncludingDeprecatedCodes, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::TextCodecType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::TextCodecType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::TextCodecType, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::TextType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::TextType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::TextType, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::TextType_ATOM, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::TextType_ATOM, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::TextType_ATOM, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::Theme, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::Theme, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::Theme, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::ThemeType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::ThemeType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::ThemeType, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::TimecodeType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::TimecodeType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::TimecodeType, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::TisTerritoryCode, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::TisTerritoryCode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::TisTerritoryCode, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::TitleType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::TitleType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::TitleType, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::TransferCategory, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::TransferCategory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::TransferCategory, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::TransferType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::TransferType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::TransferType, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::UnitOfBitRate, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::UnitOfBitRate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::UnitOfBitRate, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::UnitOfConditionValue, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::UnitOfConditionValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::UnitOfConditionValue, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::UnitOfCuePoints, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::UnitOfCuePoints, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::UnitOfCuePoints, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::UnitOfDuration, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::UnitOfDuration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::UnitOfDuration, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::UnitOfExtent, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::UnitOfExtent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::UnitOfExtent, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::UnitOfFrameRate, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::UnitOfFrameRate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::UnitOfFrameRate, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::UnitOfFrequency, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::UnitOfFrequency, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::UnitOfFrequency, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::UseType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::UseType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::UseType, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::UseType_MLC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::UseType_MLC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::UseType_MLC, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::UseType_MWNL, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::UseType_MWNL, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::UseType_MWNL, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::UserInterfaceType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::UserInterfaceType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::UserInterfaceType, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::VersionType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::VersionType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::VersionType, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::VideoCodecType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::VideoCodecType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::VideoCodecType, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::VideoDefinitionType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::VideoDefinitionType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::VideoDefinitionType, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::VideoType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::VideoType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::VideoType, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::VideoType_DSRF, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::VideoType_DSRF, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::VideoType_DSRF, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::VisualPerceptionType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::VisualPerceptionType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::VisualPerceptionType, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::VocalRegister, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::VocalRegister, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::VocalRegister, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::VocalType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::VocalType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::VocalType, enum_value_),
  0,
  PROTOBUF_FIELD_OFFSET(::mead101::avs::WorkRelationshipType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mead101::avs::WorkRelationshipType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mead101::avs::WorkRelationshipType, enum_value_),
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::mead101::avs::AdditionalTitleType)},
  { 7, 13, sizeof(::mead101::avs::AdditionalUseType)},
  { 14, 20, sizeof(::mead101::avs::AdditionalVideoType)},
  { 21, 27, sizeof(::mead101::avs::AdministratingRecordCompanyRole)},
  { 28, 34, sizeof(::mead101::avs::AffiliationType)},
  { 35, 41, sizeof(::mead101::avs::AllTerritoryCode)},
  { 42, 48, sizeof(::mead101::avs::ArtistRole)},
  { 49, 55, sizeof(::mead101::avs::ArtistType)},
  { 56, 62, sizeof(::mead101::avs::AspectRatioType)},
  { 63, 69, sizeof(::mead101::avs::AsserterType)},
  { 70, 76, sizeof(::mead101::avs::AudioCodecType)},
  { 77, 83, sizeof(::mead101::avs::AvsVersionId)},
  { 84, 90, sizeof(::mead101::avs::BinaryDataType)},
  { 91, 97, sizeof(::mead101::avs::BusinessMusicalWorkContributorRole)},
  { 98, 104, sizeof(::mead101::avs::CarrierType)},
  { 105, 111, sizeof(::mead101::avs::CatalogTransferType)},
  { 112, 118, sizeof(::mead101::avs::CdProtectionType)},
  { 119, 125, sizeof(::mead101::avs::CharacterType)},
  { 126, 132, sizeof(::mead101::avs::ClaimStatus)},
  { 133, 139, sizeof(::mead101::avs::ClassifiedGenre)},
  { 140, 146, sizeof(::mead101::avs::CodingType)},
  { 147, 153, sizeof(::mead101::avs::CommentaryNoteType)},
  { 154, 160, sizeof(::mead101::avs::CommercialModelType)},
  { 161, 167, sizeof(::mead101::avs::CommercialModelType_MWNL)},
  { 168, 174, sizeof(::mead101::avs::CompilationType)},
  { 175, 181, sizeof(::mead101::avs::CompositeMusicalWorkType)},
  { 182, 188, sizeof(::mead101::avs::ContainerFormat)},
  { 189, 195, sizeof(::mead101::avs::ContributorRole)},
  { 196, 202, sizeof(::mead101::avs::CreativeMusicalWorkContributorRole)},
  { 203, 209, sizeof(::mead101::avs::CueOrigin)},
  { 210, 216, sizeof(::mead101::avs::CueSheetType)},
  { 217, 223, sizeof(::mead101::avs::CueUseType)},
  { 224, 230, sizeof(::mead101::avs::CurrencyCode)},
  { 231, 237, sizeof(::mead101::avs::CurrentTerritoryCode)},
  { 238, 244, sizeof(::mead101::avs::DanceAndRhythmStyle)},
  { 245, 251, sizeof(::mead101::avs::DataCarrierFormat)},
  { 252, 258, sizeof(::mead101::avs::DataCarrierType)},
  { 259, 265, sizeof(::mead101::avs::DdexTerritoryCode)},
  { 266, 272, sizeof(::mead101::avs::DeprecatedCurrencyCode)},
  { 273, 279, sizeof(::mead101::avs::DeprecatedIsoTerritoryCode)},
  { 280, 286, sizeof(::mead101::avs::DeprecatedReleaseType)},
  { 287, 293, sizeof(::mead101::avs::DigitizationMode)},
  { 294, 300, sizeof(::mead101::avs::DisplayArtistRole)},
  { 301, 307, sizeof(::mead101::avs::DistributionChannelType)},
  { 308, 314, sizeof(::mead101::avs::DocumentType_LoD)},
  { 315, 321, sizeof(::mead101::avs::DocumentType_MWL)},
  { 322, 328, sizeof(::mead101::avs::DpidStatus)},
  { 329, 335, sizeof(::mead101::avs::DrmEnforcementType)},
  { 336, 342, sizeof(::mead101::avs::ElementConfiguration)},
  { 343, 349, sizeof(::mead101::avs::ElementDesignation)},
  { 350, 356, sizeof(::mead101::avs::EncodingType)},
  { 357, 363, sizeof(::mead101::avs::EquipmentType)},
  { 364, 370, sizeof(::mead101::avs::ErnMessageType)},
  { 371, 377, sizeof(::mead101::avs::ErnTestMessageType)},
  { 378, 384, sizeof(::mead101::avs::ErncFileStatus)},
  { 385, 391, sizeof(::mead101::avs::ErncProposedActionType)},
  { 392, 398, sizeof(::mead101::avs::ErrorSeverity)},
  { 399, 405, sizeof(::mead101::avs::ErrorType)},
  { 406, 412, sizeof(::mead101::avs::ExceptionReason)},
  { 413, 419, sizeof(::mead101::avs::ExpressionType)},
  { 420, 426, sizeof(::mead101::avs::ExternallyLinkedResourceType)},
  { 427, 433, sizeof(::mead101::avs::FileType)},
  { 434, 440, sizeof(::mead101::avs::FingerprintAlgorithmType)},
  { 441, 447, sizeof(::mead101::avs::Form)},
  { 448, 454, sizeof(::mead101::avs::FrameRate)},
  { 455, 461, sizeof(::mead101::avs::Gender)},
  { 462, 468, sizeof(::mead101::avs::GoverningAgreementType)},
  { 469, 475, sizeof(::mead101::avs::HashSumAlgorithmType)},
  { 476, 482, sizeof(::mead101::avs::ImageCodecType)},
  { 483, 489, sizeof(::mead101::avs::ImageType)},
  { 490, 496, sizeof(::mead101::avs::InstrumentType)},
  { 497, 503, sizeof(::mead101::avs::Iso639Part12LanguageCode)},
  { 504, 510, sizeof(::mead101::avs::Iso639Part3LanguageCode)},
  { 511, 517, sizeof(::mead101::avs::IsoCurrencyCode)},
  { 518, 524, sizeof(::mead101::avs::IsoLanguageCode)},
  { 525, 531, sizeof(::mead101::avs::IsoTerritoryCode)},
  { 532, 538, sizeof(::mead101::avs::LabelNameType)},
  { 539, 545, sizeof(::mead101::avs::LabelType)},
  { 546, 552, sizeof(::mead101::avs::LanguageLocalizationType)},
  { 553, 559, sizeof(::mead101::avs::LicenseRecord)},
  { 560, 566, sizeof(::mead101::avs::LicenseRefusalReason)},
  { 567, 573, sizeof(::mead101::avs::LicenseRejectionReason)},
  { 574, 580, sizeof(::mead101::avs::LinkAcknowledgementStatus)},
  { 581, 587, sizeof(::mead101::avs::LinkDescription)},
  { 588, 594, sizeof(::mead101::avs::LyricsType)},
  { 595, 601, sizeof(::mead101::avs::MembershipType)},
  { 602, 608, sizeof(::mead101::avs::MessageActionType)},
  { 609, 615, sizeof(::mead101::avs::MessageControlType)},
  { 616, 622, sizeof(::mead101::avs::MessagePurpose)},
  { 623, 629, sizeof(::mead101::avs::MessageType)},
  { 630, 636, sizeof(::mead101::avs::MetadataSourceType)},
  { 637, 643, sizeof(::mead101::avs::MissingLinkReason)},
  { 644, 650, sizeof(::mead101::avs::MlcMessageType)},
  { 651, 657, sizeof(::mead101::avs::Mode)},
  { 658, 664, sizeof(::mead101::avs::MoodType)},
  { 665, 671, sizeof(::mead101::avs::MusicalWorkContributorRole)},
  { 672, 678, sizeof(::mead101::avs::MusicalWorkType)},
  { 679, 685, sizeof(::mead101::avs::MwnlFileStatus)},
  { 686, 692, sizeof(::mead101::avs::MwnlProposedActionType)},
  { 693, 699, sizeof(::mead101::avs::NewStudioRole)},
  { 700, 706, sizeof(::mead101::avs::OperatingSystemType)},
  { 707, 713, sizeof(::mead101::avs::PLineType)},
  { 714, 720, sizeof(::mead101::avs::ParentalWarningType)},
  { 721, 727, sizeof(::mead101::avs::PartyRelationshipType)},
  { 728, 734, sizeof(::mead101::avs::PercentageType)},
  { 735, 741, sizeof(::mead101::avs::Period)},
  { 742, 748, sizeof(::mead101::avs::PhysicalCarrierType)},
  { 749, 755, sizeof(::mead101::avs::PriceInformationType)},
  { 756, 762, sizeof(::mead101::avs::ProductType)},
  { 763, 769, sizeof(::mead101::avs::ProfileId)},
  { 770, 776, sizeof(::mead101::avs::Purpose)},
  { 777, 783, sizeof(::mead101::avs::RatingAgency)},
  { 784, 790, sizeof(::mead101::avs::RatingReason)},
  { 791, 797, sizeof(::mead101::avs::RecipientRevenueType)},
  { 798, 804, sizeof(::mead101::avs::RecordingMode)},
  { 805, 811, sizeof(::mead101::avs::RecordingPartType)},
  { 812, 818, sizeof(::mead101::avs::ReferenceCreation)},
  { 819, 825, sizeof(::mead101::avs::ReferenceUnit)},
  { 826, 832, sizeof(::mead101::avs::RegistrationStatus)},
  { 833, 839, sizeof(::mead101::avs::RelatedResourceType)},
  { 840, 846, sizeof(::mead101::avs::RelationalRelator)},
  { 847, 853, sizeof(::mead101::avs::ReleaseProfileVariantVersionId)},
  { 854, 860, sizeof(::mead101::avs::ReleaseProfileVersionId)},
  { 861, 867, sizeof(::mead101::avs::ReleaseRelationshipType)},
  { 868, 874, sizeof(::mead101::avs::ReleaseResourceType)},
  { 875, 881, sizeof(::mead101::avs::ReleaseType)},
  { 882, 888, sizeof(::mead101::avs::ReleaseType_ERN4)},
  { 889, 895, sizeof(::mead101::avs::ReleaseType_MCNOTIF)},
  { 896, 902, sizeof(::mead101::avs::RequestMessagePurpose)},
  { 903, 909, sizeof(::mead101::avs::RequestReason)},
  { 910, 916, sizeof(::mead101::avs::ResourceContributorRole)},
  { 917, 923, sizeof(::mead101::avs::ResourceGroupType)},
  { 924, 930, sizeof(::mead101::avs::ResourceRelationshipType)},
  { 931, 937, sizeof(::mead101::avs::ResourceType)},
  { 938, 944, sizeof(::mead101::avs::ResourceType_MCNOTIF)},
  { 945, 951, sizeof(::mead101::avs::ResourceWorkRelationshipType)},
  { 952, 958, sizeof(::mead101::avs::RevenueSourceType)},
  { 959, 965, sizeof(::mead101::avs::RightShareType)},
  { 966, 972, sizeof(::mead101::avs::RightsClaimPolicyType)},
  { 973, 979, sizeof(::mead101::avs::RightsClaimStatus)},
  { 980, 986, sizeof(::mead101::avs::RightsControllerRole)},
  { 987, 993, sizeof(::mead101::avs::RightsControllerType)},
  { 994, 1000, sizeof(::mead101::avs::RightsCoverage)},
  { 1001, 1007, sizeof(::mead101::avs::RightsCoverage_MWNL)},
  { 1008, 1014, sizeof(::mead101::avs::RightsStatementProfile)},
  { 1015, 1021, sizeof(::mead101::avs::RootChordNote)},
  { 1022, 1028, sizeof(::mead101::avs::RootChordQuality)},
  { 1029, 1035, sizeof(::mead101::avs::RoyaltyRateCalculationType)},
  { 1036, 1042, sizeof(::mead101::avs::RoyaltyRateType)},
  { 1043, 1049, sizeof(::mead101::avs::SessionType)},
  { 1050, 1056, sizeof(::mead101::avs::SheetMusicCodecType)},
  { 1057, 1063, sizeof(::mead101::avs::SheetMusicType)},
  { 1064, 1070, sizeof(::mead101::avs::SoftwareType)},
  { 1071, 1077, sizeof(::mead101::avs::SoundRecordingType)},
  { 1078, 1084, sizeof(::mead101::avs::Status)},
  { 1085, 1091, sizeof(::mead101::avs::SubGenre)},
  { 1092, 1098, sizeof(::mead101::avs::SubTitleType)},
  { 1099, 1105, sizeof(::mead101::avs::SupplyChainStatus)},
  { 1106, 1112, sizeof(::mead101::avs::Tempo)},
  { 1113, 1119, sizeof(::mead101::avs::TerritoryCodeType)},
  { 1120, 1126, sizeof(::mead101::avs::TerritoryCodeTypeIncludingDeprecatedCodes)},
  { 1127, 1133, sizeof(::mead101::avs::TextCodecType)},
  { 1134, 1140, sizeof(::mead101::avs::TextType)},
  { 1141, 1147, sizeof(::mead101::avs::TextType_ATOM)},
  { 1148, 1154, sizeof(::mead101::avs::Theme)},
  { 1155, 1161, sizeof(::mead101::avs::ThemeType)},
  { 1162, 1168, sizeof(::mead101::avs::TimecodeType)},
  { 1169, 1175, sizeof(::mead101::avs::TisTerritoryCode)},
  { 1176, 1182, sizeof(::mead101::avs::TitleType)},
  { 1183, 1189, sizeof(::mead101::avs::TransferCategory)},
  { 1190, 1196, sizeof(::mead101::avs::TransferType)},
  { 1197, 1203, sizeof(::mead101::avs::UnitOfBitRate)},
  { 1204, 1210, sizeof(::mead101::avs::UnitOfConditionValue)},
  { 1211, 1217, sizeof(::mead101::avs::UnitOfCuePoints)},
  { 1218, 1224, sizeof(::mead101::avs::UnitOfDuration)},
  { 1225, 1231, sizeof(::mead101::avs::UnitOfExtent)},
  { 1232, 1238, sizeof(::mead101::avs::UnitOfFrameRate)},
  { 1239, 1245, sizeof(::mead101::avs::UnitOfFrequency)},
  { 1246, 1252, sizeof(::mead101::avs::UseType)},
  { 1253, 1259, sizeof(::mead101::avs::UseType_MLC)},
  { 1260, 1266, sizeof(::mead101::avs::UseType_MWNL)},
  { 1267, 1273, sizeof(::mead101::avs::UserInterfaceType)},
  { 1274, 1280, sizeof(::mead101::avs::VersionType)},
  { 1281, 1287, sizeof(::mead101::avs::VideoCodecType)},
  { 1288, 1294, sizeof(::mead101::avs::VideoDefinitionType)},
  { 1295, 1301, sizeof(::mead101::avs::VideoType)},
  { 1302, 1308, sizeof(::mead101::avs::VideoType_DSRF)},
  { 1309, 1315, sizeof(::mead101::avs::VisualPerceptionType)},
  { 1316, 1322, sizeof(::mead101::avs::VocalRegister)},
  { 1323, 1329, sizeof(::mead101::avs::VocalType)},
  { 1330, 1336, sizeof(::mead101::avs::WorkRelationshipType)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_AdditionalTitleType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_AdditionalUseType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_AdditionalVideoType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_AdministratingRecordCompanyRole_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_AffiliationType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_AllTerritoryCode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_ArtistRole_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_ArtistType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_AspectRatioType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_AsserterType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_AudioCodecType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_AvsVersionId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_BinaryDataType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_BusinessMusicalWorkContributorRole_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_CarrierType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_CatalogTransferType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_CdProtectionType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_CharacterType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_ClaimStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_ClassifiedGenre_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_CodingType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_CommentaryNoteType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_CommercialModelType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_CommercialModelType_MWNL_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_CompilationType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_CompositeMusicalWorkType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_ContainerFormat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_ContributorRole_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_CreativeMusicalWorkContributorRole_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_CueOrigin_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_CueSheetType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_CueUseType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_CurrencyCode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_CurrentTerritoryCode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_DanceAndRhythmStyle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_DataCarrierFormat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_DataCarrierType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_DdexTerritoryCode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_DeprecatedCurrencyCode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_DeprecatedIsoTerritoryCode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_DeprecatedReleaseType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_DigitizationMode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_DisplayArtistRole_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_DistributionChannelType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_DocumentType_LoD_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_DocumentType_MWL_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_DpidStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_DrmEnforcementType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_ElementConfiguration_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_ElementDesignation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_EncodingType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_EquipmentType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_ErnMessageType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_ErnTestMessageType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_ErncFileStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_ErncProposedActionType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_ErrorSeverity_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_ErrorType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_ExceptionReason_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_ExpressionType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_ExternallyLinkedResourceType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_FileType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_FingerprintAlgorithmType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_Form_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_FrameRate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_Gender_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_GoverningAgreementType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_HashSumAlgorithmType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_ImageCodecType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_ImageType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_InstrumentType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_Iso639Part12LanguageCode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_Iso639Part3LanguageCode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_IsoCurrencyCode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_IsoLanguageCode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_IsoTerritoryCode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_LabelNameType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_LabelType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_LanguageLocalizationType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_LicenseRecord_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_LicenseRefusalReason_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_LicenseRejectionReason_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_LinkAcknowledgementStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_LinkDescription_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_LyricsType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_MembershipType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_MessageActionType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_MessageControlType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_MessagePurpose_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_MessageType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_MetadataSourceType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_MissingLinkReason_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_MlcMessageType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_Mode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_MoodType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_MusicalWorkContributorRole_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_MusicalWorkType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_MwnlFileStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_MwnlProposedActionType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_NewStudioRole_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_OperatingSystemType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_PLineType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_ParentalWarningType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_PartyRelationshipType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_PercentageType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_Period_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_PhysicalCarrierType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_PriceInformationType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_ProductType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_ProfileId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_Purpose_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_RatingAgency_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_RatingReason_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_RecipientRevenueType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_RecordingMode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_RecordingPartType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_ReferenceCreation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_ReferenceUnit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_RegistrationStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_RelatedResourceType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_RelationalRelator_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_ReleaseProfileVariantVersionId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_ReleaseProfileVersionId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_ReleaseRelationshipType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_ReleaseResourceType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_ReleaseType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_ReleaseType_ERN4_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_ReleaseType_MCNOTIF_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_RequestMessagePurpose_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_RequestReason_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_ResourceContributorRole_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_ResourceGroupType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_ResourceRelationshipType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_ResourceType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_ResourceType_MCNOTIF_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_ResourceWorkRelationshipType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_RevenueSourceType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_RightShareType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_RightsClaimPolicyType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_RightsClaimStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_RightsControllerRole_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_RightsControllerType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_RightsCoverage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_RightsCoverage_MWNL_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_RightsStatementProfile_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_RootChordNote_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_RootChordQuality_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_RoyaltyRateCalculationType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_RoyaltyRateType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_SessionType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_SheetMusicCodecType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_SheetMusicType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_SoftwareType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_SoundRecordingType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_Status_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_SubGenre_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_SubTitleType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_SupplyChainStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_Tempo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_TerritoryCodeType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_TerritoryCodeTypeIncludingDeprecatedCodes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_TextCodecType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_TextType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_TextType_ATOM_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_Theme_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_ThemeType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_TimecodeType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_TisTerritoryCode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_TitleType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_TransferCategory_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_TransferType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_UnitOfBitRate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_UnitOfConditionValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_UnitOfCuePoints_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_UnitOfDuration_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_UnitOfExtent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_UnitOfFrameRate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_UnitOfFrequency_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_UseType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_UseType_MLC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_UseType_MWNL_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_UserInterfaceType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_VersionType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_VideoCodecType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_VideoDefinitionType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_VideoType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_VideoType_DSRF_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_VisualPerceptionType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_VocalRegister_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_VocalType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mead101::avs::_WorkRelationshipType_default_instance_),
};

const char descriptor_table_protodef_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n+ddex-xmltoproto/generated/mead101/avs."
  "proto\022\013mead101.avs\")\n\023AdditionalTitleTyp"
  "e\022\022\n\nenum_value\030\001 \001(\t\"\'\n\021AdditionalUseTy"
  "pe\022\022\n\nenum_value\030\001 \001(\t\")\n\023AdditionalVide"
  "oType\022\022\n\nenum_value\030\001 \001(\t\"5\n\037Administrat"
  "ingRecordCompanyRole\022\022\n\nenum_value\030\001 \001(\t"
  "\"%\n\017AffiliationType\022\022\n\nenum_value\030\001 \001(\t\""
  "&\n\020AllTerritoryCode\022\022\n\nenum_value\030\001 \001(\t\""
  " \n\nArtistRole\022\022\n\nenum_value\030\001 \001(\t\" \n\nArt"
  "istType\022\022\n\nenum_value\030\001 \001(\t\"%\n\017AspectRat"
  "ioType\022\022\n\nenum_value\030\001 \001(\t\"\"\n\014AsserterTy"
  "pe\022\022\n\nenum_value\030\001 \001(\t\"$\n\016AudioCodecType"
  "\022\022\n\nenum_value\030\001 \001(\t\"\"\n\014AvsVersionId\022\022\n\n"
  "enum_value\030\001 \001(\t\"$\n\016BinaryDataType\022\022\n\nen"
  "um_value\030\001 \001(\t\"8\n\"BusinessMusicalWorkCon"
  "tributorRole\022\022\n\nenum_value\030\001 \001(\t\"!\n\013Carr"
  "ierType\022\022\n\nenum_value\030\001 \001(\t\")\n\023CatalogTr"
  "ansferType\022\022\n\nenum_value\030\001 \001(\t\"&\n\020CdProt"
  "ectionType\022\022\n\nenum_value\030\001 \001(\t\"#\n\rCharac"
  "terType\022\022\n\nenum_value\030\001 \001(\t\"!\n\013ClaimStat"
  "us\022\022\n\nenum_value\030\001 \001(\t\"%\n\017ClassifiedGenr"
  "e\022\022\n\nenum_value\030\001 \001(\t\" \n\nCodingType\022\022\n\ne"
  "num_value\030\001 \001(\t\"(\n\022CommentaryNoteType\022\022\n"
  "\nenum_value\030\001 \001(\t\")\n\023CommercialModelType"
  "\022\022\n\nenum_value\030\001 \001(\t\".\n\030CommercialModelT"
  "ype_MWNL\022\022\n\nenum_value\030\001 \001(\t\"%\n\017Compilat"
  "ionType\022\022\n\nenum_value\030\001 \001(\t\".\n\030Composite"
  "MusicalWorkType\022\022\n\nenum_value\030\001 \001(\t\"%\n\017C"
  "ontainerFormat\022\022\n\nenum_value\030\001 \001(\t\"%\n\017Co"
  "ntributorRole\022\022\n\nenum_value\030\001 \001(\t\"8\n\"Cre"
  "ativeMusicalWorkContributorRole\022\022\n\nenum_"
  "value\030\001 \001(\t\"\037\n\tCueOrigin\022\022\n\nenum_value\030\001"
  " \001(\t\"\"\n\014CueSheetType\022\022\n\nenum_value\030\001 \001(\t"
  "\" \n\nCueUseType\022\022\n\nenum_value\030\001 \001(\t\"\"\n\014Cu"
  "rrencyCode\022\022\n\nenum_value\030\001 \001(\t\"*\n\024Curren"
  "tTerritoryCode\022\022\n\nenum_value\030\001 \001(\t\")\n\023Da"
  "nceAndRhythmStyle\022\022\n\nenum_value\030\001 \001(\t\"\'\n"
  "\021DataCarrierFormat\022\022\n\nenum_value\030\001 \001(\t\"%"
  "\n\017DataCarrierType\022\022\n\nenum_value\030\001 \001(\t\"\'\n"
  "\021DdexTerritoryCode\022\022\n\nenum_value\030\001 \001(\t\","
  "\n\026DeprecatedCurrencyCode\022\022\n\nenum_value\030\001"
  " \001(\t\"0\n\032DeprecatedIsoTerritoryCode\022\022\n\nen"
  "um_value\030\001 \001(\t\"+\n\025DeprecatedReleaseType\022"
  "\022\n\nenum_value\030\001 \001(\t\"&\n\020DigitizationMode\022"
  "\022\n\nenum_value\030\001 \001(\t\"\'\n\021DisplayArtistRole"
  "\022\022\n\nenum_value\030\001 \001(\t\"-\n\027DistributionChan"
  "nelType\022\022\n\nenum_value\030\001 \001(\t\"&\n\020DocumentT"
  "ype_LoD\022\022\n\nenum_value\030\001 \001(\t\"&\n\020DocumentT"
  "ype_MWL\022\022\n\nenum_value\030\001 \001(\t\" \n\nDpidStatu"
  "s\022\022\n\nenum_value\030\001 \001(\t\"(\n\022DrmEnforcementT"
  "ype\022\022\n\nenum_value\030\001 \001(\t\"*\n\024ElementConfig"
  "uration\022\022\n\nenum_value\030\001 \001(\t\"(\n\022ElementDe"
  "signation\022\022\n\nenum_value\030\001 \001(\t\"\"\n\014Encodin"
  "gType\022\022\n\nenum_value\030\001 \001(\t\"#\n\rEquipmentTy"
  "pe\022\022\n\nenum_value\030\001 \001(\t\"$\n\016ErnMessageType"
  "\022\022\n\nenum_value\030\001 \001(\t\"(\n\022ErnTestMessageTy"
  "pe\022\022\n\nenum_value\030\001 \001(\t\"$\n\016ErncFileStatus"
  "\022\022\n\nenum_value\030\001 \001(\t\",\n\026ErncProposedActi"
  "onType\022\022\n\nenum_value\030\001 \001(\t\"#\n\rErrorSever"
  "ity\022\022\n\nenum_value\030\001 \001(\t\"\037\n\tErrorType\022\022\n\n"
  "enum_value\030\001 \001(\t\"%\n\017ExceptionReason\022\022\n\ne"
  "num_value\030\001 \001(\t\"$\n\016ExpressionType\022\022\n\nenu"
  "m_value\030\001 \001(\t\"2\n\034ExternallyLinkedResourc"
  "eType\022\022\n\nenum_value\030\001 \001(\t\"\036\n\010FileType\022\022\n"
  "\nenum_value\030\001 \001(\t\".\n\030FingerprintAlgorith"
  "mType\022\022\n\nenum_value\030\001 \001(\t\"\032\n\004Form\022\022\n\nenu"
  "m_value\030\001 \001(\t\"\037\n\tFrameRate\022\022\n\nenum_value"
  "\030\001 \001(\t\"\034\n\006Gender\022\022\n\nenum_value\030\001 \001(\t\",\n\026"
  "GoverningAgreementType\022\022\n\nenum_value\030\001 \001"
  "(\t\"*\n\024HashSumAlgorithmType\022\022\n\nenum_value"
  "\030\001 \001(\t\"$\n\016ImageCodecType\022\022\n\nenum_value\030\001"
  " \001(\t\"\037\n\tImageType\022\022\n\nenum_value\030\001 \001(\t\"$\n"
  "\016InstrumentType\022\022\n\nenum_value\030\001 \001(\t\".\n\030I"
  "so639Part12LanguageCode\022\022\n\nenum_value\030\001 "
  "\001(\t\"-\n\027Iso639Part3LanguageCode\022\022\n\nenum_v"
  "alue\030\001 \001(\t\"%\n\017IsoCurrencyCode\022\022\n\nenum_va"
  "lue\030\001 \001(\t\"%\n\017IsoLanguageCode\022\022\n\nenum_val"
  "ue\030\001 \001(\t\"&\n\020IsoTerritoryCode\022\022\n\nenum_val"
  "ue\030\001 \001(\t\"#\n\rLabelNameType\022\022\n\nenum_value\030"
  "\001 \001(\t\"\037\n\tLabelType\022\022\n\nenum_value\030\001 \001(\t\"."
  "\n\030LanguageLocalizationType\022\022\n\nenum_value"
  "\030\001 \001(\t\"#\n\rLicenseRecord\022\022\n\nenum_value\030\001 "
  "\001(\t\"*\n\024LicenseRefusalReason\022\022\n\nenum_valu"
  "e\030\001 \001(\t\",\n\026LicenseRejectionReason\022\022\n\nenu"
  "m_value\030\001 \001(\t\"/\n\031LinkAcknowledgementStat"
  "us\022\022\n\nenum_value\030\001 \001(\t\"%\n\017LinkDescriptio"
  "n\022\022\n\nenum_value\030\001 \001(\t\" \n\nLyricsType\022\022\n\ne"
  "num_value\030\001 \001(\t\"$\n\016MembershipType\022\022\n\nenu"
  "m_value\030\001 \001(\t\"\'\n\021MessageActionType\022\022\n\nen"
  "um_value\030\001 \001(\t\"(\n\022MessageControlType\022\022\n\n"
  "enum_value\030\001 \001(\t\"$\n\016MessagePurpose\022\022\n\nen"
  "um_value\030\001 \001(\t\"!\n\013MessageType\022\022\n\nenum_va"
  "lue\030\001 \001(\t\"(\n\022MetadataSourceType\022\022\n\nenum_"
  "value\030\001 \001(\t\"\'\n\021MissingLinkReason\022\022\n\nenum"
  "_value\030\001 \001(\t\"$\n\016MlcMessageType\022\022\n\nenum_v"
  "alue\030\001 \001(\t\"\032\n\004Mode\022\022\n\nenum_value\030\001 \001(\t\"\036"
  "\n\010MoodType\022\022\n\nenum_value\030\001 \001(\t\"0\n\032Musica"
  "lWorkContributorRole\022\022\n\nenum_value\030\001 \001(\t"
  "\"%\n\017MusicalWorkType\022\022\n\nenum_value\030\001 \001(\t\""
  "$\n\016MwnlFileStatus\022\022\n\nenum_value\030\001 \001(\t\",\n"
  "\026MwnlProposedActionType\022\022\n\nenum_value\030\001 "
  "\001(\t\"#\n\rNewStudioRole\022\022\n\nenum_value\030\001 \001(\t"
  "\")\n\023OperatingSystemType\022\022\n\nenum_value\030\001 "
  "\001(\t\"\037\n\tPLineType\022\022\n\nenum_value\030\001 \001(\t\")\n\023"
  "ParentalWarningType\022\022\n\nenum_value\030\001 \001(\t\""
  "+\n\025PartyRelationshipType\022\022\n\nenum_value\030\001"
  " \001(\t\"$\n\016PercentageType\022\022\n\nenum_value\030\001 \001"
  "(\t\"\034\n\006Period\022\022\n\nenum_value\030\001 \001(\t\")\n\023Phys"
  "icalCarrierType\022\022\n\nenum_value\030\001 \001(\t\"*\n\024P"
  "riceInformationType\022\022\n\nenum_value\030\001 \001(\t\""
  "!\n\013ProductType\022\022\n\nenum_value\030\001 \001(\t\"\037\n\tPr"
  "ofileId\022\022\n\nenum_value\030\001 \001(\t\"\035\n\007Purpose\022\022"
  "\n\nenum_value\030\001 \001(\t\"\"\n\014RatingAgency\022\022\n\nen"
  "um_value\030\001 \001(\t\"\"\n\014RatingReason\022\022\n\nenum_v"
  "alue\030\001 \001(\t\"*\n\024RecipientRevenueType\022\022\n\nen"
  "um_value\030\001 \001(\t\"#\n\rRecordingMode\022\022\n\nenum_"
  "value\030\001 \001(\t\"\'\n\021RecordingPartType\022\022\n\nenum"
  "_value\030\001 \001(\t\"\'\n\021ReferenceCreation\022\022\n\nenu"
  "m_value\030\001 \001(\t\"#\n\rReferenceUnit\022\022\n\nenum_v"
  "alue\030\001 \001(\t\"(\n\022RegistrationStatus\022\022\n\nenum"
  "_value\030\001 \001(\t\")\n\023RelatedResourceType\022\022\n\ne"
  "num_value\030\001 \001(\t\"\'\n\021RelationalRelator\022\022\n\n"
  "enum_value\030\001 \001(\t\"4\n\036ReleaseProfileVarian"
  "tVersionId\022\022\n\nenum_value\030\001 \001(\t\"-\n\027Releas"
  "eProfileVersionId\022\022\n\nenum_value\030\001 \001(\t\"-\n"
  "\027ReleaseRelationshipType\022\022\n\nenum_value\030\001"
  " \001(\t\")\n\023ReleaseResourceType\022\022\n\nenum_valu"
  "e\030\001 \001(\t\"!\n\013ReleaseType\022\022\n\nenum_value\030\001 \001"
  "(\t\"&\n\020ReleaseType_ERN4\022\022\n\nenum_value\030\001 \001"
  "(\t\")\n\023ReleaseType_MCNOTIF\022\022\n\nenum_value\030"
  "\001 \001(\t\"+\n\025RequestMessagePurpose\022\022\n\nenum_v"
  "alue\030\001 \001(\t\"#\n\rRequestReason\022\022\n\nenum_valu"
  "e\030\001 \001(\t\"-\n\027ResourceContributorRole\022\022\n\nen"
  "um_value\030\001 \001(\t\"\'\n\021ResourceGroupType\022\022\n\ne"
  "num_value\030\001 \001(\t\".\n\030ResourceRelationshipT"
  "ype\022\022\n\nenum_value\030\001 \001(\t\"\"\n\014ResourceType\022"
  "\022\n\nenum_value\030\001 \001(\t\"*\n\024ResourceType_MCNO"
  "TIF\022\022\n\nenum_value\030\001 \001(\t\"2\n\034ResourceWorkR"
  "elationshipType\022\022\n\nenum_value\030\001 \001(\t\"\'\n\021R"
  "evenueSourceType\022\022\n\nenum_value\030\001 \001(\t\"$\n\016"
  "RightShareType\022\022\n\nenum_value\030\001 \001(\t\"+\n\025Ri"
  "ghtsClaimPolicyType\022\022\n\nenum_value\030\001 \001(\t\""
  "\'\n\021RightsClaimStatus\022\022\n\nenum_value\030\001 \001(\t"
  "\"*\n\024RightsControllerRole\022\022\n\nenum_value\030\001"
  " \001(\t\"*\n\024RightsControllerType\022\022\n\nenum_val"
  "ue\030\001 \001(\t\"$\n\016RightsCoverage\022\022\n\nenum_value"
  "\030\001 \001(\t\")\n\023RightsCoverage_MWNL\022\022\n\nenum_va"
  "lue\030\001 \001(\t\",\n\026RightsStatementProfile\022\022\n\ne"
  "num_value\030\001 \001(\t\"#\n\rRootChordNote\022\022\n\nenum"
  "_value\030\001 \001(\t\"&\n\020RootChordQuality\022\022\n\nenum"
  "_value\030\001 \001(\t\"0\n\032RoyaltyRateCalculationTy"
  "pe\022\022\n\nenum_value\030\001 \001(\t\"%\n\017RoyaltyRateTyp"
  "e\022\022\n\nenum_value\030\001 \001(\t\"!\n\013SessionType\022\022\n\n"
  "enum_value\030\001 \001(\t\")\n\023SheetMusicCodecType\022"
  "\022\n\nenum_value\030\001 \001(\t\"$\n\016SheetMusicType\022\022\n"
  "\nenum_value\030\001 \001(\t\"\"\n\014SoftwareType\022\022\n\nenu"
  "m_value\030\001 \001(\t\"(\n\022SoundRecordingType\022\022\n\ne"
  "num_value\030\001 \001(\t\"\034\n\006Status\022\022\n\nenum_value\030"
  "\001 \001(\t\"\036\n\010SubGenre\022\022\n\nenum_value\030\001 \001(\t\"\"\n"
  "\014SubTitleType\022\022\n\nenum_value\030\001 \001(\t\"\'\n\021Sup"
  "plyChainStatus\022\022\n\nenum_value\030\001 \001(\t\"\033\n\005Te"
  "mpo\022\022\n\nenum_value\030\001 \001(\t\"\'\n\021TerritoryCode"
  "Type\022\022\n\nenum_value\030\001 \001(\t\"\?\n)TerritoryCod"
  "eTypeIncludingDeprecatedCodes\022\022\n\nenum_va"
  "lue\030\001 \001(\t\"#\n\rTextCodecType\022\022\n\nenum_value"
  "\030\001 \001(\t\"\036\n\010TextType\022\022\n\nenum_value\030\001 \001(\t\"#"
  "\n\rTextType_ATOM\022\022\n\nenum_value\030\001 \001(\t\"\033\n\005T"
  "heme\022\022\n\nenum_value\030\001 \001(\t\"\037\n\tThemeType\022\022\n"
  "\nenum_value\030\001 \001(\t\"\"\n\014TimecodeType\022\022\n\nenu"
  "m_value\030\001 \001(\t\"&\n\020TisTerritoryCode\022\022\n\nenu"
  "m_value\030\001 \001(\t\"\037\n\tTitleType\022\022\n\nenum_value"
  "\030\001 \001(\t\"&\n\020TransferCategory\022\022\n\nenum_value"
  "\030\001 \001(\t\"\"\n\014TransferType\022\022\n\nenum_value\030\001 \001"
  "(\t\"#\n\rUnitOfBitRate\022\022\n\nenum_value\030\001 \001(\t\""
  "*\n\024UnitOfConditionValue\022\022\n\nenum_value\030\001 "
  "\001(\t\"%\n\017UnitOfCuePoints\022\022\n\nenum_value\030\001 \001"
  "(\t\"$\n\016UnitOfDuration\022\022\n\nenum_value\030\001 \001(\t"
  "\"\"\n\014UnitOfExtent\022\022\n\nenum_value\030\001 \001(\t\"%\n\017"
  "UnitOfFrameRate\022\022\n\nenum_value\030\001 \001(\t\"%\n\017U"
  "nitOfFrequency\022\022\n\nenum_value\030\001 \001(\t\"\035\n\007Us"
  "eType\022\022\n\nenum_value\030\001 \001(\t\"!\n\013UseType_MLC"
  "\022\022\n\nenum_value\030\001 \001(\t\"\"\n\014UseType_MWNL\022\022\n\n"
  "enum_value\030\001 \001(\t\"\'\n\021UserInterfaceType\022\022\n"
  "\nenum_value\030\001 \001(\t\"!\n\013VersionType\022\022\n\nenum"
  "_value\030\001 \001(\t\"$\n\016VideoCodecType\022\022\n\nenum_v"
  "alue\030\001 \001(\t\")\n\023VideoDefinitionType\022\022\n\nenu"
  "m_value\030\001 \001(\t\"\037\n\tVideoType\022\022\n\nenum_value"
  "\030\001 \001(\t\"$\n\016VideoType_DSRF\022\022\n\nenum_value\030\001"
  " \001(\t\"*\n\024VisualPerceptionType\022\022\n\nenum_val"
  "ue\030\001 \001(\t\"#\n\rVocalRegister\022\022\n\nenum_value\030"
  "\001 \001(\t\"\037\n\tVocalType\022\022\n\nenum_value\030\001 \001(\t\"*"
  "\n\024WorkRelationshipType\022\022\n\nenum_value\030\001 \001"
  "(\t"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto_sccs[191] = {
  &scc_info_AdditionalTitleType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_AdditionalUseType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_AdditionalVideoType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_AdministratingRecordCompanyRole_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_AffiliationType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_AllTerritoryCode_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_ArtistRole_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_ArtistType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_AspectRatioType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_AsserterType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_AudioCodecType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_AvsVersionId_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_BinaryDataType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_BusinessMusicalWorkContributorRole_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_CarrierType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_CatalogTransferType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_CdProtectionType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_CharacterType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_ClaimStatus_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_ClassifiedGenre_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_CodingType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_CommentaryNoteType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_CommercialModelType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_CommercialModelType_MWNL_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_CompilationType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_CompositeMusicalWorkType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_ContainerFormat_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_ContributorRole_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_CreativeMusicalWorkContributorRole_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_CueOrigin_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_CueSheetType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_CueUseType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_CurrencyCode_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_CurrentTerritoryCode_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_DanceAndRhythmStyle_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_DataCarrierFormat_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_DataCarrierType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_DdexTerritoryCode_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_DeprecatedCurrencyCode_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_DeprecatedIsoTerritoryCode_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_DeprecatedReleaseType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_DigitizationMode_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_DisplayArtistRole_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_DistributionChannelType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_DocumentType_LoD_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_DocumentType_MWL_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_DpidStatus_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_DrmEnforcementType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_ElementConfiguration_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_ElementDesignation_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_EncodingType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_EquipmentType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_ErnMessageType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_ErnTestMessageType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_ErncFileStatus_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_ErncProposedActionType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_ErrorSeverity_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_ErrorType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_ExceptionReason_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_ExpressionType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_ExternallyLinkedResourceType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_FileType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_FingerprintAlgorithmType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_Form_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_FrameRate_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_Gender_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_GoverningAgreementType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_HashSumAlgorithmType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_ImageCodecType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_ImageType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_InstrumentType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_Iso639Part12LanguageCode_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_Iso639Part3LanguageCode_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_IsoCurrencyCode_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_IsoLanguageCode_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_IsoTerritoryCode_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_LabelNameType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_LabelType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_LanguageLocalizationType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_LicenseRecord_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_LicenseRefusalReason_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_LicenseRejectionReason_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_LinkAcknowledgementStatus_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_LinkDescription_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_LyricsType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_MembershipType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_MessageActionType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_MessageControlType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_MessagePurpose_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_MessageType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_MetadataSourceType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_MissingLinkReason_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_MlcMessageType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_Mode_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_MoodType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_MusicalWorkContributorRole_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_MusicalWorkType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_MwnlFileStatus_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_MwnlProposedActionType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_NewStudioRole_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_OperatingSystemType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_PLineType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_ParentalWarningType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_PartyRelationshipType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_PercentageType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_Period_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_PhysicalCarrierType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_PriceInformationType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_ProductType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_ProfileId_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_Purpose_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_RatingAgency_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_RatingReason_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_RecipientRevenueType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_RecordingMode_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_RecordingPartType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_ReferenceCreation_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_ReferenceUnit_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_RegistrationStatus_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_RelatedResourceType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_RelationalRelator_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_ReleaseProfileVariantVersionId_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_ReleaseProfileVersionId_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_ReleaseRelationshipType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_ReleaseResourceType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_ReleaseType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_ReleaseType_ERN4_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_ReleaseType_MCNOTIF_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_RequestMessagePurpose_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_RequestReason_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_ResourceContributorRole_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_ResourceGroupType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_ResourceRelationshipType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_ResourceType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_ResourceType_MCNOTIF_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_ResourceWorkRelationshipType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_RevenueSourceType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_RightShareType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_RightsClaimPolicyType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_RightsClaimStatus_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_RightsControllerRole_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_RightsControllerType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_RightsCoverage_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_RightsCoverage_MWNL_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_RightsStatementProfile_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_RootChordNote_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_RootChordQuality_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_RoyaltyRateCalculationType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_RoyaltyRateType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_SessionType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_SheetMusicCodecType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_SheetMusicType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_SoftwareType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_SoundRecordingType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_Status_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_SubGenre_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_SubTitleType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_SupplyChainStatus_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_Tempo_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_TerritoryCodeType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_TerritoryCodeTypeIncludingDeprecatedCodes_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_TextCodecType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_TextType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_TextType_ATOM_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_Theme_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_ThemeType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_TimecodeType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_TisTerritoryCode_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_TitleType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_TransferCategory_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_TransferType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_UnitOfBitRate_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_UnitOfConditionValue_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_UnitOfCuePoints_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_UnitOfDuration_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_UnitOfExtent_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_UnitOfFrameRate_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_UnitOfFrequency_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_UseType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_UseType_MLC_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_UseType_MWNL_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_UserInterfaceType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_VersionType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_VideoCodecType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_VideoDefinitionType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_VideoType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_VideoType_DSRF_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_VisualPerceptionType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_VocalRegister_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_VocalType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
  &scc_info_WorkRelationshipType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto = {
  false, false, descriptor_table_protodef_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto, "ddex-xmltoproto/generated/mead101/avs.proto", 7682,
  &descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto_once, descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto_sccs, descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto_deps, 191, 0,
  schemas, file_default_instances, TableStruct_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto::offsets,
  file_level_metadata_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto, 191, file_level_enum_descriptors_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto, file_level_service_descriptors_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto)), true);
namespace mead101 {
namespace avs {

// ===================================================================

void AdditionalTitleType::InitAsDefaultInstance() {
}
class AdditionalTitleType::_Internal {
 public:
  using HasBits = decltype(std::declval<AdditionalTitleType>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

AdditionalTitleType::AdditionalTitleType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.AdditionalTitleType)
}
AdditionalTitleType::AdditionalTitleType(const AdditionalTitleType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.AdditionalTitleType)
}

void AdditionalTitleType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AdditionalTitleType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AdditionalTitleType::~AdditionalTitleType() {
  // @@protoc_insertion_point(destructor:mead101.avs.AdditionalTitleType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AdditionalTitleType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AdditionalTitleType::ArenaDtor(void* object) {
  AdditionalTitleType* _this = reinterpret_cast< AdditionalTitleType* >(object);
  (void)_this;
}
void AdditionalTitleType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AdditionalTitleType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AdditionalTitleType& AdditionalTitleType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AdditionalTitleType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void AdditionalTitleType::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.AdditionalTitleType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AdditionalTitleType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.AdditionalTitleType.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AdditionalTitleType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.AdditionalTitleType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.AdditionalTitleType.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.AdditionalTitleType)
  return target;
}

size_t AdditionalTitleType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.AdditionalTitleType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AdditionalTitleType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.AdditionalTitleType)
  GOOGLE_DCHECK_NE(&from, this);
  const AdditionalTitleType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AdditionalTitleType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.AdditionalTitleType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.AdditionalTitleType)
    MergeFrom(*source);
  }
}

void AdditionalTitleType::MergeFrom(const AdditionalTitleType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.AdditionalTitleType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void AdditionalTitleType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.AdditionalTitleType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdditionalTitleType::CopyFrom(const AdditionalTitleType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.AdditionalTitleType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdditionalTitleType::IsInitialized() const {
  return true;
}

void AdditionalTitleType::InternalSwap(AdditionalTitleType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata AdditionalTitleType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AdditionalUseType::InitAsDefaultInstance() {
}
class AdditionalUseType::_Internal {
 public:
  using HasBits = decltype(std::declval<AdditionalUseType>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

AdditionalUseType::AdditionalUseType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.AdditionalUseType)
}
AdditionalUseType::AdditionalUseType(const AdditionalUseType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.AdditionalUseType)
}

void AdditionalUseType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AdditionalUseType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AdditionalUseType::~AdditionalUseType() {
  // @@protoc_insertion_point(destructor:mead101.avs.AdditionalUseType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AdditionalUseType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AdditionalUseType::ArenaDtor(void* object) {
  AdditionalUseType* _this = reinterpret_cast< AdditionalUseType* >(object);
  (void)_this;
}
void AdditionalUseType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AdditionalUseType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AdditionalUseType& AdditionalUseType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AdditionalUseType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void AdditionalUseType::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.AdditionalUseType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AdditionalUseType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.AdditionalUseType.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AdditionalUseType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.AdditionalUseType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.AdditionalUseType.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.AdditionalUseType)
  return target;
}

size_t AdditionalUseType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.AdditionalUseType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AdditionalUseType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.AdditionalUseType)
  GOOGLE_DCHECK_NE(&from, this);
  const AdditionalUseType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AdditionalUseType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.AdditionalUseType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.AdditionalUseType)
    MergeFrom(*source);
  }
}

void AdditionalUseType::MergeFrom(const AdditionalUseType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.AdditionalUseType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void AdditionalUseType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.AdditionalUseType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdditionalUseType::CopyFrom(const AdditionalUseType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.AdditionalUseType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdditionalUseType::IsInitialized() const {
  return true;
}

void AdditionalUseType::InternalSwap(AdditionalUseType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata AdditionalUseType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AdditionalVideoType::InitAsDefaultInstance() {
}
class AdditionalVideoType::_Internal {
 public:
  using HasBits = decltype(std::declval<AdditionalVideoType>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

AdditionalVideoType::AdditionalVideoType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.AdditionalVideoType)
}
AdditionalVideoType::AdditionalVideoType(const AdditionalVideoType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.AdditionalVideoType)
}

void AdditionalVideoType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AdditionalVideoType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AdditionalVideoType::~AdditionalVideoType() {
  // @@protoc_insertion_point(destructor:mead101.avs.AdditionalVideoType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AdditionalVideoType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AdditionalVideoType::ArenaDtor(void* object) {
  AdditionalVideoType* _this = reinterpret_cast< AdditionalVideoType* >(object);
  (void)_this;
}
void AdditionalVideoType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AdditionalVideoType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AdditionalVideoType& AdditionalVideoType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AdditionalVideoType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void AdditionalVideoType::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.AdditionalVideoType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AdditionalVideoType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.AdditionalVideoType.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AdditionalVideoType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.AdditionalVideoType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.AdditionalVideoType.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.AdditionalVideoType)
  return target;
}

size_t AdditionalVideoType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.AdditionalVideoType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AdditionalVideoType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.AdditionalVideoType)
  GOOGLE_DCHECK_NE(&from, this);
  const AdditionalVideoType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AdditionalVideoType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.AdditionalVideoType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.AdditionalVideoType)
    MergeFrom(*source);
  }
}

void AdditionalVideoType::MergeFrom(const AdditionalVideoType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.AdditionalVideoType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void AdditionalVideoType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.AdditionalVideoType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdditionalVideoType::CopyFrom(const AdditionalVideoType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.AdditionalVideoType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdditionalVideoType::IsInitialized() const {
  return true;
}

void AdditionalVideoType::InternalSwap(AdditionalVideoType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata AdditionalVideoType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AdministratingRecordCompanyRole::InitAsDefaultInstance() {
}
class AdministratingRecordCompanyRole::_Internal {
 public:
  using HasBits = decltype(std::declval<AdministratingRecordCompanyRole>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

AdministratingRecordCompanyRole::AdministratingRecordCompanyRole(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.AdministratingRecordCompanyRole)
}
AdministratingRecordCompanyRole::AdministratingRecordCompanyRole(const AdministratingRecordCompanyRole& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.AdministratingRecordCompanyRole)
}

void AdministratingRecordCompanyRole::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AdministratingRecordCompanyRole_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AdministratingRecordCompanyRole::~AdministratingRecordCompanyRole() {
  // @@protoc_insertion_point(destructor:mead101.avs.AdministratingRecordCompanyRole)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AdministratingRecordCompanyRole::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AdministratingRecordCompanyRole::ArenaDtor(void* object) {
  AdministratingRecordCompanyRole* _this = reinterpret_cast< AdministratingRecordCompanyRole* >(object);
  (void)_this;
}
void AdministratingRecordCompanyRole::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AdministratingRecordCompanyRole::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AdministratingRecordCompanyRole& AdministratingRecordCompanyRole::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AdministratingRecordCompanyRole_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void AdministratingRecordCompanyRole::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.AdministratingRecordCompanyRole)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AdministratingRecordCompanyRole::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.AdministratingRecordCompanyRole.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AdministratingRecordCompanyRole::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.AdministratingRecordCompanyRole)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.AdministratingRecordCompanyRole.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.AdministratingRecordCompanyRole)
  return target;
}

size_t AdministratingRecordCompanyRole::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.AdministratingRecordCompanyRole)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AdministratingRecordCompanyRole::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.AdministratingRecordCompanyRole)
  GOOGLE_DCHECK_NE(&from, this);
  const AdministratingRecordCompanyRole* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AdministratingRecordCompanyRole>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.AdministratingRecordCompanyRole)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.AdministratingRecordCompanyRole)
    MergeFrom(*source);
  }
}

void AdministratingRecordCompanyRole::MergeFrom(const AdministratingRecordCompanyRole& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.AdministratingRecordCompanyRole)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void AdministratingRecordCompanyRole::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.AdministratingRecordCompanyRole)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdministratingRecordCompanyRole::CopyFrom(const AdministratingRecordCompanyRole& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.AdministratingRecordCompanyRole)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdministratingRecordCompanyRole::IsInitialized() const {
  return true;
}

void AdministratingRecordCompanyRole::InternalSwap(AdministratingRecordCompanyRole* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata AdministratingRecordCompanyRole::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AffiliationType::InitAsDefaultInstance() {
}
class AffiliationType::_Internal {
 public:
  using HasBits = decltype(std::declval<AffiliationType>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

AffiliationType::AffiliationType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.AffiliationType)
}
AffiliationType::AffiliationType(const AffiliationType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.AffiliationType)
}

void AffiliationType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AffiliationType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AffiliationType::~AffiliationType() {
  // @@protoc_insertion_point(destructor:mead101.avs.AffiliationType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AffiliationType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AffiliationType::ArenaDtor(void* object) {
  AffiliationType* _this = reinterpret_cast< AffiliationType* >(object);
  (void)_this;
}
void AffiliationType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AffiliationType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AffiliationType& AffiliationType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AffiliationType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void AffiliationType::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.AffiliationType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AffiliationType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.AffiliationType.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AffiliationType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.AffiliationType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.AffiliationType.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.AffiliationType)
  return target;
}

size_t AffiliationType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.AffiliationType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AffiliationType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.AffiliationType)
  GOOGLE_DCHECK_NE(&from, this);
  const AffiliationType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AffiliationType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.AffiliationType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.AffiliationType)
    MergeFrom(*source);
  }
}

void AffiliationType::MergeFrom(const AffiliationType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.AffiliationType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void AffiliationType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.AffiliationType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AffiliationType::CopyFrom(const AffiliationType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.AffiliationType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AffiliationType::IsInitialized() const {
  return true;
}

void AffiliationType::InternalSwap(AffiliationType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata AffiliationType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AllTerritoryCode::InitAsDefaultInstance() {
}
class AllTerritoryCode::_Internal {
 public:
  using HasBits = decltype(std::declval<AllTerritoryCode>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

AllTerritoryCode::AllTerritoryCode(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.AllTerritoryCode)
}
AllTerritoryCode::AllTerritoryCode(const AllTerritoryCode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.AllTerritoryCode)
}

void AllTerritoryCode::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AllTerritoryCode_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AllTerritoryCode::~AllTerritoryCode() {
  // @@protoc_insertion_point(destructor:mead101.avs.AllTerritoryCode)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AllTerritoryCode::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AllTerritoryCode::ArenaDtor(void* object) {
  AllTerritoryCode* _this = reinterpret_cast< AllTerritoryCode* >(object);
  (void)_this;
}
void AllTerritoryCode::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AllTerritoryCode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AllTerritoryCode& AllTerritoryCode::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AllTerritoryCode_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void AllTerritoryCode::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.AllTerritoryCode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AllTerritoryCode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.AllTerritoryCode.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AllTerritoryCode::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.AllTerritoryCode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.AllTerritoryCode.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.AllTerritoryCode)
  return target;
}

size_t AllTerritoryCode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.AllTerritoryCode)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AllTerritoryCode::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.AllTerritoryCode)
  GOOGLE_DCHECK_NE(&from, this);
  const AllTerritoryCode* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AllTerritoryCode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.AllTerritoryCode)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.AllTerritoryCode)
    MergeFrom(*source);
  }
}

void AllTerritoryCode::MergeFrom(const AllTerritoryCode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.AllTerritoryCode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void AllTerritoryCode::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.AllTerritoryCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllTerritoryCode::CopyFrom(const AllTerritoryCode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.AllTerritoryCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllTerritoryCode::IsInitialized() const {
  return true;
}

void AllTerritoryCode::InternalSwap(AllTerritoryCode* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata AllTerritoryCode::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ArtistRole::InitAsDefaultInstance() {
}
class ArtistRole::_Internal {
 public:
  using HasBits = decltype(std::declval<ArtistRole>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ArtistRole::ArtistRole(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.ArtistRole)
}
ArtistRole::ArtistRole(const ArtistRole& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.ArtistRole)
}

void ArtistRole::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ArtistRole_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ArtistRole::~ArtistRole() {
  // @@protoc_insertion_point(destructor:mead101.avs.ArtistRole)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ArtistRole::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ArtistRole::ArenaDtor(void* object) {
  ArtistRole* _this = reinterpret_cast< ArtistRole* >(object);
  (void)_this;
}
void ArtistRole::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ArtistRole::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ArtistRole& ArtistRole::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ArtistRole_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void ArtistRole::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.ArtistRole)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ArtistRole::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.ArtistRole.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ArtistRole::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.ArtistRole)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.ArtistRole.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.ArtistRole)
  return target;
}

size_t ArtistRole::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.ArtistRole)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ArtistRole::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.ArtistRole)
  GOOGLE_DCHECK_NE(&from, this);
  const ArtistRole* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ArtistRole>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.ArtistRole)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.ArtistRole)
    MergeFrom(*source);
  }
}

void ArtistRole::MergeFrom(const ArtistRole& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.ArtistRole)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void ArtistRole::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.ArtistRole)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArtistRole::CopyFrom(const ArtistRole& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.ArtistRole)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArtistRole::IsInitialized() const {
  return true;
}

void ArtistRole::InternalSwap(ArtistRole* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ArtistRole::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ArtistType::InitAsDefaultInstance() {
}
class ArtistType::_Internal {
 public:
  using HasBits = decltype(std::declval<ArtistType>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ArtistType::ArtistType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.ArtistType)
}
ArtistType::ArtistType(const ArtistType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.ArtistType)
}

void ArtistType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ArtistType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ArtistType::~ArtistType() {
  // @@protoc_insertion_point(destructor:mead101.avs.ArtistType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ArtistType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ArtistType::ArenaDtor(void* object) {
  ArtistType* _this = reinterpret_cast< ArtistType* >(object);
  (void)_this;
}
void ArtistType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ArtistType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ArtistType& ArtistType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ArtistType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void ArtistType::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.ArtistType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ArtistType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.ArtistType.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ArtistType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.ArtistType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.ArtistType.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.ArtistType)
  return target;
}

size_t ArtistType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.ArtistType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ArtistType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.ArtistType)
  GOOGLE_DCHECK_NE(&from, this);
  const ArtistType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ArtistType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.ArtistType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.ArtistType)
    MergeFrom(*source);
  }
}

void ArtistType::MergeFrom(const ArtistType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.ArtistType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void ArtistType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.ArtistType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArtistType::CopyFrom(const ArtistType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.ArtistType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArtistType::IsInitialized() const {
  return true;
}

void ArtistType::InternalSwap(ArtistType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ArtistType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AspectRatioType::InitAsDefaultInstance() {
}
class AspectRatioType::_Internal {
 public:
  using HasBits = decltype(std::declval<AspectRatioType>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

AspectRatioType::AspectRatioType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.AspectRatioType)
}
AspectRatioType::AspectRatioType(const AspectRatioType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.AspectRatioType)
}

void AspectRatioType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AspectRatioType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AspectRatioType::~AspectRatioType() {
  // @@protoc_insertion_point(destructor:mead101.avs.AspectRatioType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AspectRatioType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AspectRatioType::ArenaDtor(void* object) {
  AspectRatioType* _this = reinterpret_cast< AspectRatioType* >(object);
  (void)_this;
}
void AspectRatioType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AspectRatioType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AspectRatioType& AspectRatioType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AspectRatioType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void AspectRatioType::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.AspectRatioType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AspectRatioType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.AspectRatioType.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AspectRatioType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.AspectRatioType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.AspectRatioType.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.AspectRatioType)
  return target;
}

size_t AspectRatioType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.AspectRatioType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AspectRatioType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.AspectRatioType)
  GOOGLE_DCHECK_NE(&from, this);
  const AspectRatioType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AspectRatioType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.AspectRatioType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.AspectRatioType)
    MergeFrom(*source);
  }
}

void AspectRatioType::MergeFrom(const AspectRatioType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.AspectRatioType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void AspectRatioType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.AspectRatioType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AspectRatioType::CopyFrom(const AspectRatioType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.AspectRatioType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AspectRatioType::IsInitialized() const {
  return true;
}

void AspectRatioType::InternalSwap(AspectRatioType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata AspectRatioType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AsserterType::InitAsDefaultInstance() {
}
class AsserterType::_Internal {
 public:
  using HasBits = decltype(std::declval<AsserterType>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

AsserterType::AsserterType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.AsserterType)
}
AsserterType::AsserterType(const AsserterType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.AsserterType)
}

void AsserterType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AsserterType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AsserterType::~AsserterType() {
  // @@protoc_insertion_point(destructor:mead101.avs.AsserterType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AsserterType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AsserterType::ArenaDtor(void* object) {
  AsserterType* _this = reinterpret_cast< AsserterType* >(object);
  (void)_this;
}
void AsserterType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AsserterType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AsserterType& AsserterType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AsserterType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void AsserterType::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.AsserterType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AsserterType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.AsserterType.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AsserterType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.AsserterType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.AsserterType.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.AsserterType)
  return target;
}

size_t AsserterType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.AsserterType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AsserterType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.AsserterType)
  GOOGLE_DCHECK_NE(&from, this);
  const AsserterType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AsserterType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.AsserterType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.AsserterType)
    MergeFrom(*source);
  }
}

void AsserterType::MergeFrom(const AsserterType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.AsserterType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void AsserterType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.AsserterType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AsserterType::CopyFrom(const AsserterType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.AsserterType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AsserterType::IsInitialized() const {
  return true;
}

void AsserterType::InternalSwap(AsserterType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata AsserterType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AudioCodecType::InitAsDefaultInstance() {
}
class AudioCodecType::_Internal {
 public:
  using HasBits = decltype(std::declval<AudioCodecType>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

AudioCodecType::AudioCodecType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.AudioCodecType)
}
AudioCodecType::AudioCodecType(const AudioCodecType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.AudioCodecType)
}

void AudioCodecType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AudioCodecType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AudioCodecType::~AudioCodecType() {
  // @@protoc_insertion_point(destructor:mead101.avs.AudioCodecType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AudioCodecType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AudioCodecType::ArenaDtor(void* object) {
  AudioCodecType* _this = reinterpret_cast< AudioCodecType* >(object);
  (void)_this;
}
void AudioCodecType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AudioCodecType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AudioCodecType& AudioCodecType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AudioCodecType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void AudioCodecType::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.AudioCodecType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AudioCodecType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.AudioCodecType.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AudioCodecType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.AudioCodecType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.AudioCodecType.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.AudioCodecType)
  return target;
}

size_t AudioCodecType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.AudioCodecType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AudioCodecType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.AudioCodecType)
  GOOGLE_DCHECK_NE(&from, this);
  const AudioCodecType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AudioCodecType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.AudioCodecType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.AudioCodecType)
    MergeFrom(*source);
  }
}

void AudioCodecType::MergeFrom(const AudioCodecType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.AudioCodecType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void AudioCodecType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.AudioCodecType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AudioCodecType::CopyFrom(const AudioCodecType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.AudioCodecType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioCodecType::IsInitialized() const {
  return true;
}

void AudioCodecType::InternalSwap(AudioCodecType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata AudioCodecType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AvsVersionId::InitAsDefaultInstance() {
}
class AvsVersionId::_Internal {
 public:
  using HasBits = decltype(std::declval<AvsVersionId>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

AvsVersionId::AvsVersionId(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.AvsVersionId)
}
AvsVersionId::AvsVersionId(const AvsVersionId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.AvsVersionId)
}

void AvsVersionId::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AvsVersionId_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AvsVersionId::~AvsVersionId() {
  // @@protoc_insertion_point(destructor:mead101.avs.AvsVersionId)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AvsVersionId::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AvsVersionId::ArenaDtor(void* object) {
  AvsVersionId* _this = reinterpret_cast< AvsVersionId* >(object);
  (void)_this;
}
void AvsVersionId::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AvsVersionId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AvsVersionId& AvsVersionId::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AvsVersionId_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void AvsVersionId::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.AvsVersionId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AvsVersionId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.AvsVersionId.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AvsVersionId::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.AvsVersionId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.AvsVersionId.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.AvsVersionId)
  return target;
}

size_t AvsVersionId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.AvsVersionId)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AvsVersionId::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.AvsVersionId)
  GOOGLE_DCHECK_NE(&from, this);
  const AvsVersionId* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AvsVersionId>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.AvsVersionId)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.AvsVersionId)
    MergeFrom(*source);
  }
}

void AvsVersionId::MergeFrom(const AvsVersionId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.AvsVersionId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void AvsVersionId::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.AvsVersionId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AvsVersionId::CopyFrom(const AvsVersionId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.AvsVersionId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AvsVersionId::IsInitialized() const {
  return true;
}

void AvsVersionId::InternalSwap(AvsVersionId* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata AvsVersionId::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BinaryDataType::InitAsDefaultInstance() {
}
class BinaryDataType::_Internal {
 public:
  using HasBits = decltype(std::declval<BinaryDataType>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

BinaryDataType::BinaryDataType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.BinaryDataType)
}
BinaryDataType::BinaryDataType(const BinaryDataType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.BinaryDataType)
}

void BinaryDataType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BinaryDataType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

BinaryDataType::~BinaryDataType() {
  // @@protoc_insertion_point(destructor:mead101.avs.BinaryDataType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BinaryDataType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BinaryDataType::ArenaDtor(void* object) {
  BinaryDataType* _this = reinterpret_cast< BinaryDataType* >(object);
  (void)_this;
}
void BinaryDataType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BinaryDataType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BinaryDataType& BinaryDataType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BinaryDataType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void BinaryDataType::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.BinaryDataType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BinaryDataType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.BinaryDataType.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BinaryDataType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.BinaryDataType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.BinaryDataType.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.BinaryDataType)
  return target;
}

size_t BinaryDataType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.BinaryDataType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BinaryDataType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.BinaryDataType)
  GOOGLE_DCHECK_NE(&from, this);
  const BinaryDataType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BinaryDataType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.BinaryDataType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.BinaryDataType)
    MergeFrom(*source);
  }
}

void BinaryDataType::MergeFrom(const BinaryDataType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.BinaryDataType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void BinaryDataType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.BinaryDataType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BinaryDataType::CopyFrom(const BinaryDataType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.BinaryDataType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BinaryDataType::IsInitialized() const {
  return true;
}

void BinaryDataType::InternalSwap(BinaryDataType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata BinaryDataType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BusinessMusicalWorkContributorRole::InitAsDefaultInstance() {
}
class BusinessMusicalWorkContributorRole::_Internal {
 public:
  using HasBits = decltype(std::declval<BusinessMusicalWorkContributorRole>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

BusinessMusicalWorkContributorRole::BusinessMusicalWorkContributorRole(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.BusinessMusicalWorkContributorRole)
}
BusinessMusicalWorkContributorRole::BusinessMusicalWorkContributorRole(const BusinessMusicalWorkContributorRole& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.BusinessMusicalWorkContributorRole)
}

void BusinessMusicalWorkContributorRole::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BusinessMusicalWorkContributorRole_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

BusinessMusicalWorkContributorRole::~BusinessMusicalWorkContributorRole() {
  // @@protoc_insertion_point(destructor:mead101.avs.BusinessMusicalWorkContributorRole)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BusinessMusicalWorkContributorRole::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BusinessMusicalWorkContributorRole::ArenaDtor(void* object) {
  BusinessMusicalWorkContributorRole* _this = reinterpret_cast< BusinessMusicalWorkContributorRole* >(object);
  (void)_this;
}
void BusinessMusicalWorkContributorRole::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BusinessMusicalWorkContributorRole::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BusinessMusicalWorkContributorRole& BusinessMusicalWorkContributorRole::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BusinessMusicalWorkContributorRole_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void BusinessMusicalWorkContributorRole::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.BusinessMusicalWorkContributorRole)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BusinessMusicalWorkContributorRole::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.BusinessMusicalWorkContributorRole.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BusinessMusicalWorkContributorRole::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.BusinessMusicalWorkContributorRole)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.BusinessMusicalWorkContributorRole.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.BusinessMusicalWorkContributorRole)
  return target;
}

size_t BusinessMusicalWorkContributorRole::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.BusinessMusicalWorkContributorRole)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BusinessMusicalWorkContributorRole::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.BusinessMusicalWorkContributorRole)
  GOOGLE_DCHECK_NE(&from, this);
  const BusinessMusicalWorkContributorRole* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BusinessMusicalWorkContributorRole>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.BusinessMusicalWorkContributorRole)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.BusinessMusicalWorkContributorRole)
    MergeFrom(*source);
  }
}

void BusinessMusicalWorkContributorRole::MergeFrom(const BusinessMusicalWorkContributorRole& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.BusinessMusicalWorkContributorRole)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void BusinessMusicalWorkContributorRole::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.BusinessMusicalWorkContributorRole)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BusinessMusicalWorkContributorRole::CopyFrom(const BusinessMusicalWorkContributorRole& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.BusinessMusicalWorkContributorRole)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BusinessMusicalWorkContributorRole::IsInitialized() const {
  return true;
}

void BusinessMusicalWorkContributorRole::InternalSwap(BusinessMusicalWorkContributorRole* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata BusinessMusicalWorkContributorRole::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CarrierType::InitAsDefaultInstance() {
}
class CarrierType::_Internal {
 public:
  using HasBits = decltype(std::declval<CarrierType>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CarrierType::CarrierType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.CarrierType)
}
CarrierType::CarrierType(const CarrierType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.CarrierType)
}

void CarrierType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CarrierType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CarrierType::~CarrierType() {
  // @@protoc_insertion_point(destructor:mead101.avs.CarrierType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CarrierType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CarrierType::ArenaDtor(void* object) {
  CarrierType* _this = reinterpret_cast< CarrierType* >(object);
  (void)_this;
}
void CarrierType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CarrierType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CarrierType& CarrierType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CarrierType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void CarrierType::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.CarrierType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CarrierType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.CarrierType.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CarrierType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.CarrierType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.CarrierType.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.CarrierType)
  return target;
}

size_t CarrierType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.CarrierType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CarrierType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.CarrierType)
  GOOGLE_DCHECK_NE(&from, this);
  const CarrierType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CarrierType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.CarrierType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.CarrierType)
    MergeFrom(*source);
  }
}

void CarrierType::MergeFrom(const CarrierType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.CarrierType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void CarrierType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.CarrierType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CarrierType::CopyFrom(const CarrierType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.CarrierType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CarrierType::IsInitialized() const {
  return true;
}

void CarrierType::InternalSwap(CarrierType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CarrierType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CatalogTransferType::InitAsDefaultInstance() {
}
class CatalogTransferType::_Internal {
 public:
  using HasBits = decltype(std::declval<CatalogTransferType>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CatalogTransferType::CatalogTransferType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.CatalogTransferType)
}
CatalogTransferType::CatalogTransferType(const CatalogTransferType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.CatalogTransferType)
}

void CatalogTransferType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CatalogTransferType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CatalogTransferType::~CatalogTransferType() {
  // @@protoc_insertion_point(destructor:mead101.avs.CatalogTransferType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CatalogTransferType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CatalogTransferType::ArenaDtor(void* object) {
  CatalogTransferType* _this = reinterpret_cast< CatalogTransferType* >(object);
  (void)_this;
}
void CatalogTransferType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CatalogTransferType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CatalogTransferType& CatalogTransferType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CatalogTransferType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void CatalogTransferType::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.CatalogTransferType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CatalogTransferType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.CatalogTransferType.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CatalogTransferType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.CatalogTransferType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.CatalogTransferType.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.CatalogTransferType)
  return target;
}

size_t CatalogTransferType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.CatalogTransferType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CatalogTransferType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.CatalogTransferType)
  GOOGLE_DCHECK_NE(&from, this);
  const CatalogTransferType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CatalogTransferType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.CatalogTransferType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.CatalogTransferType)
    MergeFrom(*source);
  }
}

void CatalogTransferType::MergeFrom(const CatalogTransferType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.CatalogTransferType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void CatalogTransferType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.CatalogTransferType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CatalogTransferType::CopyFrom(const CatalogTransferType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.CatalogTransferType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CatalogTransferType::IsInitialized() const {
  return true;
}

void CatalogTransferType::InternalSwap(CatalogTransferType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CatalogTransferType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CdProtectionType::InitAsDefaultInstance() {
}
class CdProtectionType::_Internal {
 public:
  using HasBits = decltype(std::declval<CdProtectionType>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CdProtectionType::CdProtectionType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.CdProtectionType)
}
CdProtectionType::CdProtectionType(const CdProtectionType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.CdProtectionType)
}

void CdProtectionType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CdProtectionType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CdProtectionType::~CdProtectionType() {
  // @@protoc_insertion_point(destructor:mead101.avs.CdProtectionType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CdProtectionType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CdProtectionType::ArenaDtor(void* object) {
  CdProtectionType* _this = reinterpret_cast< CdProtectionType* >(object);
  (void)_this;
}
void CdProtectionType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CdProtectionType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CdProtectionType& CdProtectionType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CdProtectionType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void CdProtectionType::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.CdProtectionType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CdProtectionType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.CdProtectionType.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CdProtectionType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.CdProtectionType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.CdProtectionType.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.CdProtectionType)
  return target;
}

size_t CdProtectionType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.CdProtectionType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CdProtectionType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.CdProtectionType)
  GOOGLE_DCHECK_NE(&from, this);
  const CdProtectionType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CdProtectionType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.CdProtectionType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.CdProtectionType)
    MergeFrom(*source);
  }
}

void CdProtectionType::MergeFrom(const CdProtectionType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.CdProtectionType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void CdProtectionType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.CdProtectionType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CdProtectionType::CopyFrom(const CdProtectionType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.CdProtectionType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CdProtectionType::IsInitialized() const {
  return true;
}

void CdProtectionType::InternalSwap(CdProtectionType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CdProtectionType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CharacterType::InitAsDefaultInstance() {
}
class CharacterType::_Internal {
 public:
  using HasBits = decltype(std::declval<CharacterType>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CharacterType::CharacterType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.CharacterType)
}
CharacterType::CharacterType(const CharacterType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.CharacterType)
}

void CharacterType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CharacterType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CharacterType::~CharacterType() {
  // @@protoc_insertion_point(destructor:mead101.avs.CharacterType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CharacterType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CharacterType::ArenaDtor(void* object) {
  CharacterType* _this = reinterpret_cast< CharacterType* >(object);
  (void)_this;
}
void CharacterType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CharacterType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CharacterType& CharacterType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CharacterType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void CharacterType::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.CharacterType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CharacterType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.CharacterType.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CharacterType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.CharacterType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.CharacterType.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.CharacterType)
  return target;
}

size_t CharacterType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.CharacterType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CharacterType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.CharacterType)
  GOOGLE_DCHECK_NE(&from, this);
  const CharacterType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CharacterType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.CharacterType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.CharacterType)
    MergeFrom(*source);
  }
}

void CharacterType::MergeFrom(const CharacterType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.CharacterType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void CharacterType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.CharacterType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterType::CopyFrom(const CharacterType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.CharacterType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterType::IsInitialized() const {
  return true;
}

void CharacterType::InternalSwap(CharacterType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CharacterType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClaimStatus::InitAsDefaultInstance() {
}
class ClaimStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<ClaimStatus>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ClaimStatus::ClaimStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.ClaimStatus)
}
ClaimStatus::ClaimStatus(const ClaimStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.ClaimStatus)
}

void ClaimStatus::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClaimStatus_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ClaimStatus::~ClaimStatus() {
  // @@protoc_insertion_point(destructor:mead101.avs.ClaimStatus)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ClaimStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ClaimStatus::ArenaDtor(void* object) {
  ClaimStatus* _this = reinterpret_cast< ClaimStatus* >(object);
  (void)_this;
}
void ClaimStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ClaimStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClaimStatus& ClaimStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClaimStatus_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void ClaimStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.ClaimStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClaimStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.ClaimStatus.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClaimStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.ClaimStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.ClaimStatus.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.ClaimStatus)
  return target;
}

size_t ClaimStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.ClaimStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClaimStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.ClaimStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const ClaimStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClaimStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.ClaimStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.ClaimStatus)
    MergeFrom(*source);
  }
}

void ClaimStatus::MergeFrom(const ClaimStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.ClaimStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void ClaimStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.ClaimStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClaimStatus::CopyFrom(const ClaimStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.ClaimStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClaimStatus::IsInitialized() const {
  return true;
}

void ClaimStatus::InternalSwap(ClaimStatus* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ClaimStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClassifiedGenre::InitAsDefaultInstance() {
}
class ClassifiedGenre::_Internal {
 public:
  using HasBits = decltype(std::declval<ClassifiedGenre>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ClassifiedGenre::ClassifiedGenre(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.ClassifiedGenre)
}
ClassifiedGenre::ClassifiedGenre(const ClassifiedGenre& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.ClassifiedGenre)
}

void ClassifiedGenre::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClassifiedGenre_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ClassifiedGenre::~ClassifiedGenre() {
  // @@protoc_insertion_point(destructor:mead101.avs.ClassifiedGenre)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ClassifiedGenre::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ClassifiedGenre::ArenaDtor(void* object) {
  ClassifiedGenre* _this = reinterpret_cast< ClassifiedGenre* >(object);
  (void)_this;
}
void ClassifiedGenre::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ClassifiedGenre::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClassifiedGenre& ClassifiedGenre::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClassifiedGenre_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void ClassifiedGenre::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.ClassifiedGenre)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClassifiedGenre::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.ClassifiedGenre.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClassifiedGenre::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.ClassifiedGenre)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.ClassifiedGenre.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.ClassifiedGenre)
  return target;
}

size_t ClassifiedGenre::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.ClassifiedGenre)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClassifiedGenre::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.ClassifiedGenre)
  GOOGLE_DCHECK_NE(&from, this);
  const ClassifiedGenre* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClassifiedGenre>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.ClassifiedGenre)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.ClassifiedGenre)
    MergeFrom(*source);
  }
}

void ClassifiedGenre::MergeFrom(const ClassifiedGenre& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.ClassifiedGenre)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void ClassifiedGenre::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.ClassifiedGenre)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClassifiedGenre::CopyFrom(const ClassifiedGenre& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.ClassifiedGenre)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClassifiedGenre::IsInitialized() const {
  return true;
}

void ClassifiedGenre::InternalSwap(ClassifiedGenre* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ClassifiedGenre::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CodingType::InitAsDefaultInstance() {
}
class CodingType::_Internal {
 public:
  using HasBits = decltype(std::declval<CodingType>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CodingType::CodingType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.CodingType)
}
CodingType::CodingType(const CodingType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.CodingType)
}

void CodingType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CodingType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CodingType::~CodingType() {
  // @@protoc_insertion_point(destructor:mead101.avs.CodingType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CodingType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CodingType::ArenaDtor(void* object) {
  CodingType* _this = reinterpret_cast< CodingType* >(object);
  (void)_this;
}
void CodingType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CodingType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CodingType& CodingType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CodingType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void CodingType::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.CodingType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CodingType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.CodingType.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CodingType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.CodingType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.CodingType.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.CodingType)
  return target;
}

size_t CodingType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.CodingType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CodingType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.CodingType)
  GOOGLE_DCHECK_NE(&from, this);
  const CodingType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CodingType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.CodingType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.CodingType)
    MergeFrom(*source);
  }
}

void CodingType::MergeFrom(const CodingType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.CodingType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void CodingType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.CodingType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CodingType::CopyFrom(const CodingType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.CodingType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CodingType::IsInitialized() const {
  return true;
}

void CodingType::InternalSwap(CodingType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CodingType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CommentaryNoteType::InitAsDefaultInstance() {
}
class CommentaryNoteType::_Internal {
 public:
  using HasBits = decltype(std::declval<CommentaryNoteType>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CommentaryNoteType::CommentaryNoteType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.CommentaryNoteType)
}
CommentaryNoteType::CommentaryNoteType(const CommentaryNoteType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.CommentaryNoteType)
}

void CommentaryNoteType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CommentaryNoteType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CommentaryNoteType::~CommentaryNoteType() {
  // @@protoc_insertion_point(destructor:mead101.avs.CommentaryNoteType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommentaryNoteType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CommentaryNoteType::ArenaDtor(void* object) {
  CommentaryNoteType* _this = reinterpret_cast< CommentaryNoteType* >(object);
  (void)_this;
}
void CommentaryNoteType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommentaryNoteType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CommentaryNoteType& CommentaryNoteType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CommentaryNoteType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void CommentaryNoteType::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.CommentaryNoteType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommentaryNoteType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.CommentaryNoteType.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommentaryNoteType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.CommentaryNoteType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.CommentaryNoteType.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.CommentaryNoteType)
  return target;
}

size_t CommentaryNoteType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.CommentaryNoteType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommentaryNoteType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.CommentaryNoteType)
  GOOGLE_DCHECK_NE(&from, this);
  const CommentaryNoteType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommentaryNoteType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.CommentaryNoteType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.CommentaryNoteType)
    MergeFrom(*source);
  }
}

void CommentaryNoteType::MergeFrom(const CommentaryNoteType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.CommentaryNoteType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void CommentaryNoteType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.CommentaryNoteType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommentaryNoteType::CopyFrom(const CommentaryNoteType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.CommentaryNoteType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommentaryNoteType::IsInitialized() const {
  return true;
}

void CommentaryNoteType::InternalSwap(CommentaryNoteType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CommentaryNoteType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CommercialModelType::InitAsDefaultInstance() {
}
class CommercialModelType::_Internal {
 public:
  using HasBits = decltype(std::declval<CommercialModelType>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CommercialModelType::CommercialModelType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.CommercialModelType)
}
CommercialModelType::CommercialModelType(const CommercialModelType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.CommercialModelType)
}

void CommercialModelType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CommercialModelType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CommercialModelType::~CommercialModelType() {
  // @@protoc_insertion_point(destructor:mead101.avs.CommercialModelType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommercialModelType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CommercialModelType::ArenaDtor(void* object) {
  CommercialModelType* _this = reinterpret_cast< CommercialModelType* >(object);
  (void)_this;
}
void CommercialModelType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommercialModelType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CommercialModelType& CommercialModelType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CommercialModelType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void CommercialModelType::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.CommercialModelType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommercialModelType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.CommercialModelType.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommercialModelType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.CommercialModelType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.CommercialModelType.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.CommercialModelType)
  return target;
}

size_t CommercialModelType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.CommercialModelType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommercialModelType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.CommercialModelType)
  GOOGLE_DCHECK_NE(&from, this);
  const CommercialModelType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommercialModelType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.CommercialModelType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.CommercialModelType)
    MergeFrom(*source);
  }
}

void CommercialModelType::MergeFrom(const CommercialModelType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.CommercialModelType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void CommercialModelType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.CommercialModelType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommercialModelType::CopyFrom(const CommercialModelType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.CommercialModelType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommercialModelType::IsInitialized() const {
  return true;
}

void CommercialModelType::InternalSwap(CommercialModelType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CommercialModelType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CommercialModelType_MWNL::InitAsDefaultInstance() {
}
class CommercialModelType_MWNL::_Internal {
 public:
  using HasBits = decltype(std::declval<CommercialModelType_MWNL>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CommercialModelType_MWNL::CommercialModelType_MWNL(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.CommercialModelType_MWNL)
}
CommercialModelType_MWNL::CommercialModelType_MWNL(const CommercialModelType_MWNL& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.CommercialModelType_MWNL)
}

void CommercialModelType_MWNL::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CommercialModelType_MWNL_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CommercialModelType_MWNL::~CommercialModelType_MWNL() {
  // @@protoc_insertion_point(destructor:mead101.avs.CommercialModelType_MWNL)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommercialModelType_MWNL::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CommercialModelType_MWNL::ArenaDtor(void* object) {
  CommercialModelType_MWNL* _this = reinterpret_cast< CommercialModelType_MWNL* >(object);
  (void)_this;
}
void CommercialModelType_MWNL::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommercialModelType_MWNL::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CommercialModelType_MWNL& CommercialModelType_MWNL::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CommercialModelType_MWNL_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void CommercialModelType_MWNL::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.CommercialModelType_MWNL)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommercialModelType_MWNL::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.CommercialModelType_MWNL.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommercialModelType_MWNL::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.CommercialModelType_MWNL)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.CommercialModelType_MWNL.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.CommercialModelType_MWNL)
  return target;
}

size_t CommercialModelType_MWNL::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.CommercialModelType_MWNL)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommercialModelType_MWNL::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.CommercialModelType_MWNL)
  GOOGLE_DCHECK_NE(&from, this);
  const CommercialModelType_MWNL* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommercialModelType_MWNL>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.CommercialModelType_MWNL)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.CommercialModelType_MWNL)
    MergeFrom(*source);
  }
}

void CommercialModelType_MWNL::MergeFrom(const CommercialModelType_MWNL& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.CommercialModelType_MWNL)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void CommercialModelType_MWNL::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.CommercialModelType_MWNL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommercialModelType_MWNL::CopyFrom(const CommercialModelType_MWNL& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.CommercialModelType_MWNL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommercialModelType_MWNL::IsInitialized() const {
  return true;
}

void CommercialModelType_MWNL::InternalSwap(CommercialModelType_MWNL* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CommercialModelType_MWNL::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CompilationType::InitAsDefaultInstance() {
}
class CompilationType::_Internal {
 public:
  using HasBits = decltype(std::declval<CompilationType>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CompilationType::CompilationType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.CompilationType)
}
CompilationType::CompilationType(const CompilationType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.CompilationType)
}

void CompilationType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CompilationType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CompilationType::~CompilationType() {
  // @@protoc_insertion_point(destructor:mead101.avs.CompilationType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CompilationType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CompilationType::ArenaDtor(void* object) {
  CompilationType* _this = reinterpret_cast< CompilationType* >(object);
  (void)_this;
}
void CompilationType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CompilationType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CompilationType& CompilationType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CompilationType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void CompilationType::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.CompilationType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CompilationType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.CompilationType.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CompilationType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.CompilationType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.CompilationType.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.CompilationType)
  return target;
}

size_t CompilationType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.CompilationType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CompilationType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.CompilationType)
  GOOGLE_DCHECK_NE(&from, this);
  const CompilationType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CompilationType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.CompilationType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.CompilationType)
    MergeFrom(*source);
  }
}

void CompilationType::MergeFrom(const CompilationType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.CompilationType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void CompilationType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.CompilationType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompilationType::CopyFrom(const CompilationType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.CompilationType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompilationType::IsInitialized() const {
  return true;
}

void CompilationType::InternalSwap(CompilationType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CompilationType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CompositeMusicalWorkType::InitAsDefaultInstance() {
}
class CompositeMusicalWorkType::_Internal {
 public:
  using HasBits = decltype(std::declval<CompositeMusicalWorkType>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CompositeMusicalWorkType::CompositeMusicalWorkType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.CompositeMusicalWorkType)
}
CompositeMusicalWorkType::CompositeMusicalWorkType(const CompositeMusicalWorkType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.CompositeMusicalWorkType)
}

void CompositeMusicalWorkType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CompositeMusicalWorkType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CompositeMusicalWorkType::~CompositeMusicalWorkType() {
  // @@protoc_insertion_point(destructor:mead101.avs.CompositeMusicalWorkType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CompositeMusicalWorkType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CompositeMusicalWorkType::ArenaDtor(void* object) {
  CompositeMusicalWorkType* _this = reinterpret_cast< CompositeMusicalWorkType* >(object);
  (void)_this;
}
void CompositeMusicalWorkType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CompositeMusicalWorkType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CompositeMusicalWorkType& CompositeMusicalWorkType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CompositeMusicalWorkType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void CompositeMusicalWorkType::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.CompositeMusicalWorkType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CompositeMusicalWorkType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.CompositeMusicalWorkType.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CompositeMusicalWorkType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.CompositeMusicalWorkType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.CompositeMusicalWorkType.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.CompositeMusicalWorkType)
  return target;
}

size_t CompositeMusicalWorkType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.CompositeMusicalWorkType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CompositeMusicalWorkType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.CompositeMusicalWorkType)
  GOOGLE_DCHECK_NE(&from, this);
  const CompositeMusicalWorkType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CompositeMusicalWorkType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.CompositeMusicalWorkType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.CompositeMusicalWorkType)
    MergeFrom(*source);
  }
}

void CompositeMusicalWorkType::MergeFrom(const CompositeMusicalWorkType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.CompositeMusicalWorkType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void CompositeMusicalWorkType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.CompositeMusicalWorkType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompositeMusicalWorkType::CopyFrom(const CompositeMusicalWorkType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.CompositeMusicalWorkType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompositeMusicalWorkType::IsInitialized() const {
  return true;
}

void CompositeMusicalWorkType::InternalSwap(CompositeMusicalWorkType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CompositeMusicalWorkType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ContainerFormat::InitAsDefaultInstance() {
}
class ContainerFormat::_Internal {
 public:
  using HasBits = decltype(std::declval<ContainerFormat>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ContainerFormat::ContainerFormat(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.ContainerFormat)
}
ContainerFormat::ContainerFormat(const ContainerFormat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.ContainerFormat)
}

void ContainerFormat::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ContainerFormat_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ContainerFormat::~ContainerFormat() {
  // @@protoc_insertion_point(destructor:mead101.avs.ContainerFormat)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ContainerFormat::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ContainerFormat::ArenaDtor(void* object) {
  ContainerFormat* _this = reinterpret_cast< ContainerFormat* >(object);
  (void)_this;
}
void ContainerFormat::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ContainerFormat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ContainerFormat& ContainerFormat::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ContainerFormat_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void ContainerFormat::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.ContainerFormat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContainerFormat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.ContainerFormat.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ContainerFormat::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.ContainerFormat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.ContainerFormat.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.ContainerFormat)
  return target;
}

size_t ContainerFormat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.ContainerFormat)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContainerFormat::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.ContainerFormat)
  GOOGLE_DCHECK_NE(&from, this);
  const ContainerFormat* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ContainerFormat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.ContainerFormat)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.ContainerFormat)
    MergeFrom(*source);
  }
}

void ContainerFormat::MergeFrom(const ContainerFormat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.ContainerFormat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void ContainerFormat::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.ContainerFormat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContainerFormat::CopyFrom(const ContainerFormat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.ContainerFormat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContainerFormat::IsInitialized() const {
  return true;
}

void ContainerFormat::InternalSwap(ContainerFormat* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ContainerFormat::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ContributorRole::InitAsDefaultInstance() {
}
class ContributorRole::_Internal {
 public:
  using HasBits = decltype(std::declval<ContributorRole>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ContributorRole::ContributorRole(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.ContributorRole)
}
ContributorRole::ContributorRole(const ContributorRole& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.ContributorRole)
}

void ContributorRole::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ContributorRole_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ContributorRole::~ContributorRole() {
  // @@protoc_insertion_point(destructor:mead101.avs.ContributorRole)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ContributorRole::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ContributorRole::ArenaDtor(void* object) {
  ContributorRole* _this = reinterpret_cast< ContributorRole* >(object);
  (void)_this;
}
void ContributorRole::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ContributorRole::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ContributorRole& ContributorRole::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ContributorRole_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void ContributorRole::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.ContributorRole)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContributorRole::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.ContributorRole.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ContributorRole::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.ContributorRole)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.ContributorRole.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.ContributorRole)
  return target;
}

size_t ContributorRole::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.ContributorRole)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContributorRole::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.ContributorRole)
  GOOGLE_DCHECK_NE(&from, this);
  const ContributorRole* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ContributorRole>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.ContributorRole)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.ContributorRole)
    MergeFrom(*source);
  }
}

void ContributorRole::MergeFrom(const ContributorRole& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.ContributorRole)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void ContributorRole::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.ContributorRole)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContributorRole::CopyFrom(const ContributorRole& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.ContributorRole)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContributorRole::IsInitialized() const {
  return true;
}

void ContributorRole::InternalSwap(ContributorRole* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ContributorRole::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreativeMusicalWorkContributorRole::InitAsDefaultInstance() {
}
class CreativeMusicalWorkContributorRole::_Internal {
 public:
  using HasBits = decltype(std::declval<CreativeMusicalWorkContributorRole>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CreativeMusicalWorkContributorRole::CreativeMusicalWorkContributorRole(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.CreativeMusicalWorkContributorRole)
}
CreativeMusicalWorkContributorRole::CreativeMusicalWorkContributorRole(const CreativeMusicalWorkContributorRole& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.CreativeMusicalWorkContributorRole)
}

void CreativeMusicalWorkContributorRole::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreativeMusicalWorkContributorRole_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CreativeMusicalWorkContributorRole::~CreativeMusicalWorkContributorRole() {
  // @@protoc_insertion_point(destructor:mead101.avs.CreativeMusicalWorkContributorRole)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CreativeMusicalWorkContributorRole::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CreativeMusicalWorkContributorRole::ArenaDtor(void* object) {
  CreativeMusicalWorkContributorRole* _this = reinterpret_cast< CreativeMusicalWorkContributorRole* >(object);
  (void)_this;
}
void CreativeMusicalWorkContributorRole::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreativeMusicalWorkContributorRole::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreativeMusicalWorkContributorRole& CreativeMusicalWorkContributorRole::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreativeMusicalWorkContributorRole_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void CreativeMusicalWorkContributorRole::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.CreativeMusicalWorkContributorRole)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreativeMusicalWorkContributorRole::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.CreativeMusicalWorkContributorRole.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreativeMusicalWorkContributorRole::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.CreativeMusicalWorkContributorRole)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.CreativeMusicalWorkContributorRole.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.CreativeMusicalWorkContributorRole)
  return target;
}

size_t CreativeMusicalWorkContributorRole::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.CreativeMusicalWorkContributorRole)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreativeMusicalWorkContributorRole::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.CreativeMusicalWorkContributorRole)
  GOOGLE_DCHECK_NE(&from, this);
  const CreativeMusicalWorkContributorRole* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreativeMusicalWorkContributorRole>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.CreativeMusicalWorkContributorRole)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.CreativeMusicalWorkContributorRole)
    MergeFrom(*source);
  }
}

void CreativeMusicalWorkContributorRole::MergeFrom(const CreativeMusicalWorkContributorRole& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.CreativeMusicalWorkContributorRole)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void CreativeMusicalWorkContributorRole::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.CreativeMusicalWorkContributorRole)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreativeMusicalWorkContributorRole::CopyFrom(const CreativeMusicalWorkContributorRole& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.CreativeMusicalWorkContributorRole)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreativeMusicalWorkContributorRole::IsInitialized() const {
  return true;
}

void CreativeMusicalWorkContributorRole::InternalSwap(CreativeMusicalWorkContributorRole* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CreativeMusicalWorkContributorRole::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CueOrigin::InitAsDefaultInstance() {
}
class CueOrigin::_Internal {
 public:
  using HasBits = decltype(std::declval<CueOrigin>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CueOrigin::CueOrigin(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.CueOrigin)
}
CueOrigin::CueOrigin(const CueOrigin& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.CueOrigin)
}

void CueOrigin::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CueOrigin_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CueOrigin::~CueOrigin() {
  // @@protoc_insertion_point(destructor:mead101.avs.CueOrigin)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CueOrigin::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CueOrigin::ArenaDtor(void* object) {
  CueOrigin* _this = reinterpret_cast< CueOrigin* >(object);
  (void)_this;
}
void CueOrigin::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CueOrigin::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CueOrigin& CueOrigin::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CueOrigin_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void CueOrigin::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.CueOrigin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CueOrigin::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.CueOrigin.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CueOrigin::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.CueOrigin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.CueOrigin.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.CueOrigin)
  return target;
}

size_t CueOrigin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.CueOrigin)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CueOrigin::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.CueOrigin)
  GOOGLE_DCHECK_NE(&from, this);
  const CueOrigin* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CueOrigin>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.CueOrigin)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.CueOrigin)
    MergeFrom(*source);
  }
}

void CueOrigin::MergeFrom(const CueOrigin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.CueOrigin)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void CueOrigin::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.CueOrigin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CueOrigin::CopyFrom(const CueOrigin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.CueOrigin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CueOrigin::IsInitialized() const {
  return true;
}

void CueOrigin::InternalSwap(CueOrigin* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CueOrigin::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CueSheetType::InitAsDefaultInstance() {
}
class CueSheetType::_Internal {
 public:
  using HasBits = decltype(std::declval<CueSheetType>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CueSheetType::CueSheetType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.CueSheetType)
}
CueSheetType::CueSheetType(const CueSheetType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.CueSheetType)
}

void CueSheetType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CueSheetType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CueSheetType::~CueSheetType() {
  // @@protoc_insertion_point(destructor:mead101.avs.CueSheetType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CueSheetType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CueSheetType::ArenaDtor(void* object) {
  CueSheetType* _this = reinterpret_cast< CueSheetType* >(object);
  (void)_this;
}
void CueSheetType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CueSheetType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CueSheetType& CueSheetType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CueSheetType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void CueSheetType::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.CueSheetType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CueSheetType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.CueSheetType.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CueSheetType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.CueSheetType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.CueSheetType.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.CueSheetType)
  return target;
}

size_t CueSheetType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.CueSheetType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CueSheetType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.CueSheetType)
  GOOGLE_DCHECK_NE(&from, this);
  const CueSheetType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CueSheetType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.CueSheetType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.CueSheetType)
    MergeFrom(*source);
  }
}

void CueSheetType::MergeFrom(const CueSheetType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.CueSheetType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void CueSheetType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.CueSheetType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CueSheetType::CopyFrom(const CueSheetType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.CueSheetType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CueSheetType::IsInitialized() const {
  return true;
}

void CueSheetType::InternalSwap(CueSheetType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CueSheetType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CueUseType::InitAsDefaultInstance() {
}
class CueUseType::_Internal {
 public:
  using HasBits = decltype(std::declval<CueUseType>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CueUseType::CueUseType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.CueUseType)
}
CueUseType::CueUseType(const CueUseType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.CueUseType)
}

void CueUseType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CueUseType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CueUseType::~CueUseType() {
  // @@protoc_insertion_point(destructor:mead101.avs.CueUseType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CueUseType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CueUseType::ArenaDtor(void* object) {
  CueUseType* _this = reinterpret_cast< CueUseType* >(object);
  (void)_this;
}
void CueUseType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CueUseType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CueUseType& CueUseType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CueUseType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void CueUseType::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.CueUseType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CueUseType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.CueUseType.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CueUseType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.CueUseType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.CueUseType.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.CueUseType)
  return target;
}

size_t CueUseType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.CueUseType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CueUseType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.CueUseType)
  GOOGLE_DCHECK_NE(&from, this);
  const CueUseType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CueUseType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.CueUseType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.CueUseType)
    MergeFrom(*source);
  }
}

void CueUseType::MergeFrom(const CueUseType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.CueUseType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void CueUseType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.CueUseType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CueUseType::CopyFrom(const CueUseType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.CueUseType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CueUseType::IsInitialized() const {
  return true;
}

void CueUseType::InternalSwap(CueUseType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CueUseType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CurrencyCode::InitAsDefaultInstance() {
}
class CurrencyCode::_Internal {
 public:
  using HasBits = decltype(std::declval<CurrencyCode>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CurrencyCode::CurrencyCode(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.CurrencyCode)
}
CurrencyCode::CurrencyCode(const CurrencyCode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.CurrencyCode)
}

void CurrencyCode::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CurrencyCode_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CurrencyCode::~CurrencyCode() {
  // @@protoc_insertion_point(destructor:mead101.avs.CurrencyCode)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CurrencyCode::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CurrencyCode::ArenaDtor(void* object) {
  CurrencyCode* _this = reinterpret_cast< CurrencyCode* >(object);
  (void)_this;
}
void CurrencyCode::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CurrencyCode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CurrencyCode& CurrencyCode::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CurrencyCode_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void CurrencyCode::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.CurrencyCode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CurrencyCode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.CurrencyCode.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CurrencyCode::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.CurrencyCode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.CurrencyCode.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.CurrencyCode)
  return target;
}

size_t CurrencyCode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.CurrencyCode)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CurrencyCode::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.CurrencyCode)
  GOOGLE_DCHECK_NE(&from, this);
  const CurrencyCode* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CurrencyCode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.CurrencyCode)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.CurrencyCode)
    MergeFrom(*source);
  }
}

void CurrencyCode::MergeFrom(const CurrencyCode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.CurrencyCode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void CurrencyCode::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.CurrencyCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CurrencyCode::CopyFrom(const CurrencyCode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.CurrencyCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CurrencyCode::IsInitialized() const {
  return true;
}

void CurrencyCode::InternalSwap(CurrencyCode* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CurrencyCode::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CurrentTerritoryCode::InitAsDefaultInstance() {
}
class CurrentTerritoryCode::_Internal {
 public:
  using HasBits = decltype(std::declval<CurrentTerritoryCode>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CurrentTerritoryCode::CurrentTerritoryCode(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.CurrentTerritoryCode)
}
CurrentTerritoryCode::CurrentTerritoryCode(const CurrentTerritoryCode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.CurrentTerritoryCode)
}

void CurrentTerritoryCode::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CurrentTerritoryCode_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CurrentTerritoryCode::~CurrentTerritoryCode() {
  // @@protoc_insertion_point(destructor:mead101.avs.CurrentTerritoryCode)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CurrentTerritoryCode::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CurrentTerritoryCode::ArenaDtor(void* object) {
  CurrentTerritoryCode* _this = reinterpret_cast< CurrentTerritoryCode* >(object);
  (void)_this;
}
void CurrentTerritoryCode::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CurrentTerritoryCode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CurrentTerritoryCode& CurrentTerritoryCode::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CurrentTerritoryCode_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void CurrentTerritoryCode::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.CurrentTerritoryCode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CurrentTerritoryCode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.CurrentTerritoryCode.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CurrentTerritoryCode::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.CurrentTerritoryCode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.CurrentTerritoryCode.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.CurrentTerritoryCode)
  return target;
}

size_t CurrentTerritoryCode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.CurrentTerritoryCode)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CurrentTerritoryCode::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.CurrentTerritoryCode)
  GOOGLE_DCHECK_NE(&from, this);
  const CurrentTerritoryCode* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CurrentTerritoryCode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.CurrentTerritoryCode)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.CurrentTerritoryCode)
    MergeFrom(*source);
  }
}

void CurrentTerritoryCode::MergeFrom(const CurrentTerritoryCode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.CurrentTerritoryCode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void CurrentTerritoryCode::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.CurrentTerritoryCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CurrentTerritoryCode::CopyFrom(const CurrentTerritoryCode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.CurrentTerritoryCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CurrentTerritoryCode::IsInitialized() const {
  return true;
}

void CurrentTerritoryCode::InternalSwap(CurrentTerritoryCode* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CurrentTerritoryCode::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DanceAndRhythmStyle::InitAsDefaultInstance() {
}
class DanceAndRhythmStyle::_Internal {
 public:
  using HasBits = decltype(std::declval<DanceAndRhythmStyle>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DanceAndRhythmStyle::DanceAndRhythmStyle(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.DanceAndRhythmStyle)
}
DanceAndRhythmStyle::DanceAndRhythmStyle(const DanceAndRhythmStyle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.DanceAndRhythmStyle)
}

void DanceAndRhythmStyle::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DanceAndRhythmStyle_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DanceAndRhythmStyle::~DanceAndRhythmStyle() {
  // @@protoc_insertion_point(destructor:mead101.avs.DanceAndRhythmStyle)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DanceAndRhythmStyle::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DanceAndRhythmStyle::ArenaDtor(void* object) {
  DanceAndRhythmStyle* _this = reinterpret_cast< DanceAndRhythmStyle* >(object);
  (void)_this;
}
void DanceAndRhythmStyle::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DanceAndRhythmStyle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DanceAndRhythmStyle& DanceAndRhythmStyle::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DanceAndRhythmStyle_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void DanceAndRhythmStyle::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.DanceAndRhythmStyle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DanceAndRhythmStyle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.DanceAndRhythmStyle.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DanceAndRhythmStyle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.DanceAndRhythmStyle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.DanceAndRhythmStyle.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.DanceAndRhythmStyle)
  return target;
}

size_t DanceAndRhythmStyle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.DanceAndRhythmStyle)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DanceAndRhythmStyle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.DanceAndRhythmStyle)
  GOOGLE_DCHECK_NE(&from, this);
  const DanceAndRhythmStyle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DanceAndRhythmStyle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.DanceAndRhythmStyle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.DanceAndRhythmStyle)
    MergeFrom(*source);
  }
}

void DanceAndRhythmStyle::MergeFrom(const DanceAndRhythmStyle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.DanceAndRhythmStyle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void DanceAndRhythmStyle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.DanceAndRhythmStyle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DanceAndRhythmStyle::CopyFrom(const DanceAndRhythmStyle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.DanceAndRhythmStyle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DanceAndRhythmStyle::IsInitialized() const {
  return true;
}

void DanceAndRhythmStyle::InternalSwap(DanceAndRhythmStyle* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata DanceAndRhythmStyle::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DataCarrierFormat::InitAsDefaultInstance() {
}
class DataCarrierFormat::_Internal {
 public:
  using HasBits = decltype(std::declval<DataCarrierFormat>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DataCarrierFormat::DataCarrierFormat(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.DataCarrierFormat)
}
DataCarrierFormat::DataCarrierFormat(const DataCarrierFormat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.DataCarrierFormat)
}

void DataCarrierFormat::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DataCarrierFormat_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DataCarrierFormat::~DataCarrierFormat() {
  // @@protoc_insertion_point(destructor:mead101.avs.DataCarrierFormat)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DataCarrierFormat::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DataCarrierFormat::ArenaDtor(void* object) {
  DataCarrierFormat* _this = reinterpret_cast< DataCarrierFormat* >(object);
  (void)_this;
}
void DataCarrierFormat::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DataCarrierFormat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DataCarrierFormat& DataCarrierFormat::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DataCarrierFormat_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void DataCarrierFormat::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.DataCarrierFormat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataCarrierFormat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.DataCarrierFormat.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DataCarrierFormat::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.DataCarrierFormat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.DataCarrierFormat.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.DataCarrierFormat)
  return target;
}

size_t DataCarrierFormat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.DataCarrierFormat)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DataCarrierFormat::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.DataCarrierFormat)
  GOOGLE_DCHECK_NE(&from, this);
  const DataCarrierFormat* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DataCarrierFormat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.DataCarrierFormat)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.DataCarrierFormat)
    MergeFrom(*source);
  }
}

void DataCarrierFormat::MergeFrom(const DataCarrierFormat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.DataCarrierFormat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void DataCarrierFormat::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.DataCarrierFormat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataCarrierFormat::CopyFrom(const DataCarrierFormat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.DataCarrierFormat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataCarrierFormat::IsInitialized() const {
  return true;
}

void DataCarrierFormat::InternalSwap(DataCarrierFormat* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata DataCarrierFormat::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DataCarrierType::InitAsDefaultInstance() {
}
class DataCarrierType::_Internal {
 public:
  using HasBits = decltype(std::declval<DataCarrierType>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DataCarrierType::DataCarrierType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.DataCarrierType)
}
DataCarrierType::DataCarrierType(const DataCarrierType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.DataCarrierType)
}

void DataCarrierType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DataCarrierType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DataCarrierType::~DataCarrierType() {
  // @@protoc_insertion_point(destructor:mead101.avs.DataCarrierType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DataCarrierType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DataCarrierType::ArenaDtor(void* object) {
  DataCarrierType* _this = reinterpret_cast< DataCarrierType* >(object);
  (void)_this;
}
void DataCarrierType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DataCarrierType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DataCarrierType& DataCarrierType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DataCarrierType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void DataCarrierType::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.DataCarrierType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataCarrierType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.DataCarrierType.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DataCarrierType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.DataCarrierType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.DataCarrierType.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.DataCarrierType)
  return target;
}

size_t DataCarrierType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.DataCarrierType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DataCarrierType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.DataCarrierType)
  GOOGLE_DCHECK_NE(&from, this);
  const DataCarrierType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DataCarrierType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.DataCarrierType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.DataCarrierType)
    MergeFrom(*source);
  }
}

void DataCarrierType::MergeFrom(const DataCarrierType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.DataCarrierType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void DataCarrierType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.DataCarrierType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataCarrierType::CopyFrom(const DataCarrierType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.DataCarrierType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataCarrierType::IsInitialized() const {
  return true;
}

void DataCarrierType::InternalSwap(DataCarrierType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata DataCarrierType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DdexTerritoryCode::InitAsDefaultInstance() {
}
class DdexTerritoryCode::_Internal {
 public:
  using HasBits = decltype(std::declval<DdexTerritoryCode>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DdexTerritoryCode::DdexTerritoryCode(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.DdexTerritoryCode)
}
DdexTerritoryCode::DdexTerritoryCode(const DdexTerritoryCode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.DdexTerritoryCode)
}

void DdexTerritoryCode::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DdexTerritoryCode_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DdexTerritoryCode::~DdexTerritoryCode() {
  // @@protoc_insertion_point(destructor:mead101.avs.DdexTerritoryCode)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DdexTerritoryCode::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DdexTerritoryCode::ArenaDtor(void* object) {
  DdexTerritoryCode* _this = reinterpret_cast< DdexTerritoryCode* >(object);
  (void)_this;
}
void DdexTerritoryCode::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DdexTerritoryCode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DdexTerritoryCode& DdexTerritoryCode::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DdexTerritoryCode_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void DdexTerritoryCode::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.DdexTerritoryCode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DdexTerritoryCode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.DdexTerritoryCode.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DdexTerritoryCode::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.DdexTerritoryCode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.DdexTerritoryCode.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.DdexTerritoryCode)
  return target;
}

size_t DdexTerritoryCode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.DdexTerritoryCode)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DdexTerritoryCode::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.DdexTerritoryCode)
  GOOGLE_DCHECK_NE(&from, this);
  const DdexTerritoryCode* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DdexTerritoryCode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.DdexTerritoryCode)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.DdexTerritoryCode)
    MergeFrom(*source);
  }
}

void DdexTerritoryCode::MergeFrom(const DdexTerritoryCode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.DdexTerritoryCode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void DdexTerritoryCode::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.DdexTerritoryCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DdexTerritoryCode::CopyFrom(const DdexTerritoryCode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.DdexTerritoryCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DdexTerritoryCode::IsInitialized() const {
  return true;
}

void DdexTerritoryCode::InternalSwap(DdexTerritoryCode* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata DdexTerritoryCode::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeprecatedCurrencyCode::InitAsDefaultInstance() {
}
class DeprecatedCurrencyCode::_Internal {
 public:
  using HasBits = decltype(std::declval<DeprecatedCurrencyCode>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DeprecatedCurrencyCode::DeprecatedCurrencyCode(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.DeprecatedCurrencyCode)
}
DeprecatedCurrencyCode::DeprecatedCurrencyCode(const DeprecatedCurrencyCode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.DeprecatedCurrencyCode)
}

void DeprecatedCurrencyCode::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeprecatedCurrencyCode_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DeprecatedCurrencyCode::~DeprecatedCurrencyCode() {
  // @@protoc_insertion_point(destructor:mead101.avs.DeprecatedCurrencyCode)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeprecatedCurrencyCode::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeprecatedCurrencyCode::ArenaDtor(void* object) {
  DeprecatedCurrencyCode* _this = reinterpret_cast< DeprecatedCurrencyCode* >(object);
  (void)_this;
}
void DeprecatedCurrencyCode::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeprecatedCurrencyCode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeprecatedCurrencyCode& DeprecatedCurrencyCode::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeprecatedCurrencyCode_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void DeprecatedCurrencyCode::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.DeprecatedCurrencyCode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeprecatedCurrencyCode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.DeprecatedCurrencyCode.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeprecatedCurrencyCode::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.DeprecatedCurrencyCode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.DeprecatedCurrencyCode.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.DeprecatedCurrencyCode)
  return target;
}

size_t DeprecatedCurrencyCode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.DeprecatedCurrencyCode)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeprecatedCurrencyCode::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.DeprecatedCurrencyCode)
  GOOGLE_DCHECK_NE(&from, this);
  const DeprecatedCurrencyCode* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeprecatedCurrencyCode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.DeprecatedCurrencyCode)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.DeprecatedCurrencyCode)
    MergeFrom(*source);
  }
}

void DeprecatedCurrencyCode::MergeFrom(const DeprecatedCurrencyCode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.DeprecatedCurrencyCode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void DeprecatedCurrencyCode::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.DeprecatedCurrencyCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeprecatedCurrencyCode::CopyFrom(const DeprecatedCurrencyCode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.DeprecatedCurrencyCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeprecatedCurrencyCode::IsInitialized() const {
  return true;
}

void DeprecatedCurrencyCode::InternalSwap(DeprecatedCurrencyCode* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata DeprecatedCurrencyCode::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeprecatedIsoTerritoryCode::InitAsDefaultInstance() {
}
class DeprecatedIsoTerritoryCode::_Internal {
 public:
  using HasBits = decltype(std::declval<DeprecatedIsoTerritoryCode>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DeprecatedIsoTerritoryCode::DeprecatedIsoTerritoryCode(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.DeprecatedIsoTerritoryCode)
}
DeprecatedIsoTerritoryCode::DeprecatedIsoTerritoryCode(const DeprecatedIsoTerritoryCode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.DeprecatedIsoTerritoryCode)
}

void DeprecatedIsoTerritoryCode::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeprecatedIsoTerritoryCode_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DeprecatedIsoTerritoryCode::~DeprecatedIsoTerritoryCode() {
  // @@protoc_insertion_point(destructor:mead101.avs.DeprecatedIsoTerritoryCode)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeprecatedIsoTerritoryCode::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeprecatedIsoTerritoryCode::ArenaDtor(void* object) {
  DeprecatedIsoTerritoryCode* _this = reinterpret_cast< DeprecatedIsoTerritoryCode* >(object);
  (void)_this;
}
void DeprecatedIsoTerritoryCode::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeprecatedIsoTerritoryCode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeprecatedIsoTerritoryCode& DeprecatedIsoTerritoryCode::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeprecatedIsoTerritoryCode_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void DeprecatedIsoTerritoryCode::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.DeprecatedIsoTerritoryCode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeprecatedIsoTerritoryCode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.DeprecatedIsoTerritoryCode.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeprecatedIsoTerritoryCode::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.DeprecatedIsoTerritoryCode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.DeprecatedIsoTerritoryCode.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.DeprecatedIsoTerritoryCode)
  return target;
}

size_t DeprecatedIsoTerritoryCode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.DeprecatedIsoTerritoryCode)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeprecatedIsoTerritoryCode::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.DeprecatedIsoTerritoryCode)
  GOOGLE_DCHECK_NE(&from, this);
  const DeprecatedIsoTerritoryCode* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeprecatedIsoTerritoryCode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.DeprecatedIsoTerritoryCode)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.DeprecatedIsoTerritoryCode)
    MergeFrom(*source);
  }
}

void DeprecatedIsoTerritoryCode::MergeFrom(const DeprecatedIsoTerritoryCode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.DeprecatedIsoTerritoryCode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void DeprecatedIsoTerritoryCode::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.DeprecatedIsoTerritoryCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeprecatedIsoTerritoryCode::CopyFrom(const DeprecatedIsoTerritoryCode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.DeprecatedIsoTerritoryCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeprecatedIsoTerritoryCode::IsInitialized() const {
  return true;
}

void DeprecatedIsoTerritoryCode::InternalSwap(DeprecatedIsoTerritoryCode* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata DeprecatedIsoTerritoryCode::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeprecatedReleaseType::InitAsDefaultInstance() {
}
class DeprecatedReleaseType::_Internal {
 public:
  using HasBits = decltype(std::declval<DeprecatedReleaseType>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DeprecatedReleaseType::DeprecatedReleaseType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.DeprecatedReleaseType)
}
DeprecatedReleaseType::DeprecatedReleaseType(const DeprecatedReleaseType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.DeprecatedReleaseType)
}

void DeprecatedReleaseType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeprecatedReleaseType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DeprecatedReleaseType::~DeprecatedReleaseType() {
  // @@protoc_insertion_point(destructor:mead101.avs.DeprecatedReleaseType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeprecatedReleaseType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeprecatedReleaseType::ArenaDtor(void* object) {
  DeprecatedReleaseType* _this = reinterpret_cast< DeprecatedReleaseType* >(object);
  (void)_this;
}
void DeprecatedReleaseType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeprecatedReleaseType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeprecatedReleaseType& DeprecatedReleaseType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeprecatedReleaseType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void DeprecatedReleaseType::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.DeprecatedReleaseType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeprecatedReleaseType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.DeprecatedReleaseType.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeprecatedReleaseType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.DeprecatedReleaseType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.DeprecatedReleaseType.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.DeprecatedReleaseType)
  return target;
}

size_t DeprecatedReleaseType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.DeprecatedReleaseType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeprecatedReleaseType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.DeprecatedReleaseType)
  GOOGLE_DCHECK_NE(&from, this);
  const DeprecatedReleaseType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeprecatedReleaseType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.DeprecatedReleaseType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.DeprecatedReleaseType)
    MergeFrom(*source);
  }
}

void DeprecatedReleaseType::MergeFrom(const DeprecatedReleaseType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.DeprecatedReleaseType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void DeprecatedReleaseType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.DeprecatedReleaseType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeprecatedReleaseType::CopyFrom(const DeprecatedReleaseType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.DeprecatedReleaseType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeprecatedReleaseType::IsInitialized() const {
  return true;
}

void DeprecatedReleaseType::InternalSwap(DeprecatedReleaseType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata DeprecatedReleaseType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DigitizationMode::InitAsDefaultInstance() {
}
class DigitizationMode::_Internal {
 public:
  using HasBits = decltype(std::declval<DigitizationMode>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DigitizationMode::DigitizationMode(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.DigitizationMode)
}
DigitizationMode::DigitizationMode(const DigitizationMode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.DigitizationMode)
}

void DigitizationMode::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DigitizationMode_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DigitizationMode::~DigitizationMode() {
  // @@protoc_insertion_point(destructor:mead101.avs.DigitizationMode)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DigitizationMode::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DigitizationMode::ArenaDtor(void* object) {
  DigitizationMode* _this = reinterpret_cast< DigitizationMode* >(object);
  (void)_this;
}
void DigitizationMode::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DigitizationMode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DigitizationMode& DigitizationMode::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DigitizationMode_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void DigitizationMode::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.DigitizationMode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DigitizationMode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.DigitizationMode.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DigitizationMode::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.DigitizationMode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.DigitizationMode.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.DigitizationMode)
  return target;
}

size_t DigitizationMode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.DigitizationMode)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DigitizationMode::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.DigitizationMode)
  GOOGLE_DCHECK_NE(&from, this);
  const DigitizationMode* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DigitizationMode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.DigitizationMode)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.DigitizationMode)
    MergeFrom(*source);
  }
}

void DigitizationMode::MergeFrom(const DigitizationMode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.DigitizationMode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void DigitizationMode::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.DigitizationMode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DigitizationMode::CopyFrom(const DigitizationMode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.DigitizationMode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DigitizationMode::IsInitialized() const {
  return true;
}

void DigitizationMode::InternalSwap(DigitizationMode* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata DigitizationMode::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DisplayArtistRole::InitAsDefaultInstance() {
}
class DisplayArtistRole::_Internal {
 public:
  using HasBits = decltype(std::declval<DisplayArtistRole>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DisplayArtistRole::DisplayArtistRole(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.DisplayArtistRole)
}
DisplayArtistRole::DisplayArtistRole(const DisplayArtistRole& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.DisplayArtistRole)
}

void DisplayArtistRole::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DisplayArtistRole_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DisplayArtistRole::~DisplayArtistRole() {
  // @@protoc_insertion_point(destructor:mead101.avs.DisplayArtistRole)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DisplayArtistRole::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DisplayArtistRole::ArenaDtor(void* object) {
  DisplayArtistRole* _this = reinterpret_cast< DisplayArtistRole* >(object);
  (void)_this;
}
void DisplayArtistRole::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DisplayArtistRole::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DisplayArtistRole& DisplayArtistRole::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DisplayArtistRole_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void DisplayArtistRole::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.DisplayArtistRole)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DisplayArtistRole::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.DisplayArtistRole.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DisplayArtistRole::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.DisplayArtistRole)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.DisplayArtistRole.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.DisplayArtistRole)
  return target;
}

size_t DisplayArtistRole::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.DisplayArtistRole)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DisplayArtistRole::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.DisplayArtistRole)
  GOOGLE_DCHECK_NE(&from, this);
  const DisplayArtistRole* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DisplayArtistRole>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.DisplayArtistRole)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.DisplayArtistRole)
    MergeFrom(*source);
  }
}

void DisplayArtistRole::MergeFrom(const DisplayArtistRole& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.DisplayArtistRole)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void DisplayArtistRole::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.DisplayArtistRole)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DisplayArtistRole::CopyFrom(const DisplayArtistRole& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.DisplayArtistRole)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DisplayArtistRole::IsInitialized() const {
  return true;
}

void DisplayArtistRole::InternalSwap(DisplayArtistRole* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata DisplayArtistRole::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DistributionChannelType::InitAsDefaultInstance() {
}
class DistributionChannelType::_Internal {
 public:
  using HasBits = decltype(std::declval<DistributionChannelType>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DistributionChannelType::DistributionChannelType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.DistributionChannelType)
}
DistributionChannelType::DistributionChannelType(const DistributionChannelType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.DistributionChannelType)
}

void DistributionChannelType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DistributionChannelType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DistributionChannelType::~DistributionChannelType() {
  // @@protoc_insertion_point(destructor:mead101.avs.DistributionChannelType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DistributionChannelType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DistributionChannelType::ArenaDtor(void* object) {
  DistributionChannelType* _this = reinterpret_cast< DistributionChannelType* >(object);
  (void)_this;
}
void DistributionChannelType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DistributionChannelType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DistributionChannelType& DistributionChannelType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DistributionChannelType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void DistributionChannelType::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.DistributionChannelType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DistributionChannelType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.DistributionChannelType.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DistributionChannelType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.DistributionChannelType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.DistributionChannelType.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.DistributionChannelType)
  return target;
}

size_t DistributionChannelType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.DistributionChannelType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DistributionChannelType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.DistributionChannelType)
  GOOGLE_DCHECK_NE(&from, this);
  const DistributionChannelType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DistributionChannelType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.DistributionChannelType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.DistributionChannelType)
    MergeFrom(*source);
  }
}

void DistributionChannelType::MergeFrom(const DistributionChannelType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.DistributionChannelType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void DistributionChannelType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.DistributionChannelType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DistributionChannelType::CopyFrom(const DistributionChannelType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.DistributionChannelType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DistributionChannelType::IsInitialized() const {
  return true;
}

void DistributionChannelType::InternalSwap(DistributionChannelType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata DistributionChannelType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DocumentType_LoD::InitAsDefaultInstance() {
}
class DocumentType_LoD::_Internal {
 public:
  using HasBits = decltype(std::declval<DocumentType_LoD>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DocumentType_LoD::DocumentType_LoD(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.DocumentType_LoD)
}
DocumentType_LoD::DocumentType_LoD(const DocumentType_LoD& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.DocumentType_LoD)
}

void DocumentType_LoD::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DocumentType_LoD_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DocumentType_LoD::~DocumentType_LoD() {
  // @@protoc_insertion_point(destructor:mead101.avs.DocumentType_LoD)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DocumentType_LoD::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DocumentType_LoD::ArenaDtor(void* object) {
  DocumentType_LoD* _this = reinterpret_cast< DocumentType_LoD* >(object);
  (void)_this;
}
void DocumentType_LoD::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DocumentType_LoD::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DocumentType_LoD& DocumentType_LoD::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DocumentType_LoD_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void DocumentType_LoD::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.DocumentType_LoD)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DocumentType_LoD::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.DocumentType_LoD.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DocumentType_LoD::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.DocumentType_LoD)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.DocumentType_LoD.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.DocumentType_LoD)
  return target;
}

size_t DocumentType_LoD::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.DocumentType_LoD)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DocumentType_LoD::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.DocumentType_LoD)
  GOOGLE_DCHECK_NE(&from, this);
  const DocumentType_LoD* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DocumentType_LoD>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.DocumentType_LoD)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.DocumentType_LoD)
    MergeFrom(*source);
  }
}

void DocumentType_LoD::MergeFrom(const DocumentType_LoD& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.DocumentType_LoD)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void DocumentType_LoD::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.DocumentType_LoD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DocumentType_LoD::CopyFrom(const DocumentType_LoD& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.DocumentType_LoD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocumentType_LoD::IsInitialized() const {
  return true;
}

void DocumentType_LoD::InternalSwap(DocumentType_LoD* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata DocumentType_LoD::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DocumentType_MWL::InitAsDefaultInstance() {
}
class DocumentType_MWL::_Internal {
 public:
  using HasBits = decltype(std::declval<DocumentType_MWL>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DocumentType_MWL::DocumentType_MWL(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.DocumentType_MWL)
}
DocumentType_MWL::DocumentType_MWL(const DocumentType_MWL& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.DocumentType_MWL)
}

void DocumentType_MWL::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DocumentType_MWL_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DocumentType_MWL::~DocumentType_MWL() {
  // @@protoc_insertion_point(destructor:mead101.avs.DocumentType_MWL)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DocumentType_MWL::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DocumentType_MWL::ArenaDtor(void* object) {
  DocumentType_MWL* _this = reinterpret_cast< DocumentType_MWL* >(object);
  (void)_this;
}
void DocumentType_MWL::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DocumentType_MWL::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DocumentType_MWL& DocumentType_MWL::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DocumentType_MWL_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void DocumentType_MWL::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.DocumentType_MWL)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DocumentType_MWL::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.DocumentType_MWL.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DocumentType_MWL::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.DocumentType_MWL)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.DocumentType_MWL.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.DocumentType_MWL)
  return target;
}

size_t DocumentType_MWL::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.DocumentType_MWL)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DocumentType_MWL::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.DocumentType_MWL)
  GOOGLE_DCHECK_NE(&from, this);
  const DocumentType_MWL* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DocumentType_MWL>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.DocumentType_MWL)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.DocumentType_MWL)
    MergeFrom(*source);
  }
}

void DocumentType_MWL::MergeFrom(const DocumentType_MWL& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.DocumentType_MWL)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void DocumentType_MWL::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.DocumentType_MWL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DocumentType_MWL::CopyFrom(const DocumentType_MWL& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.DocumentType_MWL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocumentType_MWL::IsInitialized() const {
  return true;
}

void DocumentType_MWL::InternalSwap(DocumentType_MWL* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata DocumentType_MWL::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DpidStatus::InitAsDefaultInstance() {
}
class DpidStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<DpidStatus>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DpidStatus::DpidStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.DpidStatus)
}
DpidStatus::DpidStatus(const DpidStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.DpidStatus)
}

void DpidStatus::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DpidStatus_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DpidStatus::~DpidStatus() {
  // @@protoc_insertion_point(destructor:mead101.avs.DpidStatus)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DpidStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DpidStatus::ArenaDtor(void* object) {
  DpidStatus* _this = reinterpret_cast< DpidStatus* >(object);
  (void)_this;
}
void DpidStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DpidStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DpidStatus& DpidStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DpidStatus_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void DpidStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.DpidStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DpidStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.DpidStatus.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DpidStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.DpidStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.DpidStatus.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.DpidStatus)
  return target;
}

size_t DpidStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.DpidStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DpidStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.DpidStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const DpidStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DpidStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.DpidStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.DpidStatus)
    MergeFrom(*source);
  }
}

void DpidStatus::MergeFrom(const DpidStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.DpidStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void DpidStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.DpidStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DpidStatus::CopyFrom(const DpidStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.DpidStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DpidStatus::IsInitialized() const {
  return true;
}

void DpidStatus::InternalSwap(DpidStatus* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata DpidStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DrmEnforcementType::InitAsDefaultInstance() {
}
class DrmEnforcementType::_Internal {
 public:
  using HasBits = decltype(std::declval<DrmEnforcementType>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DrmEnforcementType::DrmEnforcementType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.DrmEnforcementType)
}
DrmEnforcementType::DrmEnforcementType(const DrmEnforcementType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.DrmEnforcementType)
}

void DrmEnforcementType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DrmEnforcementType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DrmEnforcementType::~DrmEnforcementType() {
  // @@protoc_insertion_point(destructor:mead101.avs.DrmEnforcementType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DrmEnforcementType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DrmEnforcementType::ArenaDtor(void* object) {
  DrmEnforcementType* _this = reinterpret_cast< DrmEnforcementType* >(object);
  (void)_this;
}
void DrmEnforcementType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DrmEnforcementType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DrmEnforcementType& DrmEnforcementType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DrmEnforcementType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void DrmEnforcementType::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.DrmEnforcementType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DrmEnforcementType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.DrmEnforcementType.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DrmEnforcementType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.DrmEnforcementType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.DrmEnforcementType.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.DrmEnforcementType)
  return target;
}

size_t DrmEnforcementType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.DrmEnforcementType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DrmEnforcementType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.DrmEnforcementType)
  GOOGLE_DCHECK_NE(&from, this);
  const DrmEnforcementType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DrmEnforcementType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.DrmEnforcementType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.DrmEnforcementType)
    MergeFrom(*source);
  }
}

void DrmEnforcementType::MergeFrom(const DrmEnforcementType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.DrmEnforcementType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void DrmEnforcementType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.DrmEnforcementType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DrmEnforcementType::CopyFrom(const DrmEnforcementType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.DrmEnforcementType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DrmEnforcementType::IsInitialized() const {
  return true;
}

void DrmEnforcementType::InternalSwap(DrmEnforcementType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata DrmEnforcementType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ElementConfiguration::InitAsDefaultInstance() {
}
class ElementConfiguration::_Internal {
 public:
  using HasBits = decltype(std::declval<ElementConfiguration>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ElementConfiguration::ElementConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.ElementConfiguration)
}
ElementConfiguration::ElementConfiguration(const ElementConfiguration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.ElementConfiguration)
}

void ElementConfiguration::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ElementConfiguration_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ElementConfiguration::~ElementConfiguration() {
  // @@protoc_insertion_point(destructor:mead101.avs.ElementConfiguration)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ElementConfiguration::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ElementConfiguration::ArenaDtor(void* object) {
  ElementConfiguration* _this = reinterpret_cast< ElementConfiguration* >(object);
  (void)_this;
}
void ElementConfiguration::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ElementConfiguration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ElementConfiguration& ElementConfiguration::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ElementConfiguration_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void ElementConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.ElementConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ElementConfiguration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.ElementConfiguration.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ElementConfiguration::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.ElementConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.ElementConfiguration.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.ElementConfiguration)
  return target;
}

size_t ElementConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.ElementConfiguration)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ElementConfiguration::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.ElementConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  const ElementConfiguration* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ElementConfiguration>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.ElementConfiguration)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.ElementConfiguration)
    MergeFrom(*source);
  }
}

void ElementConfiguration::MergeFrom(const ElementConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.ElementConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void ElementConfiguration::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.ElementConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ElementConfiguration::CopyFrom(const ElementConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.ElementConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ElementConfiguration::IsInitialized() const {
  return true;
}

void ElementConfiguration::InternalSwap(ElementConfiguration* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ElementConfiguration::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ElementDesignation::InitAsDefaultInstance() {
}
class ElementDesignation::_Internal {
 public:
  using HasBits = decltype(std::declval<ElementDesignation>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ElementDesignation::ElementDesignation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.ElementDesignation)
}
ElementDesignation::ElementDesignation(const ElementDesignation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.ElementDesignation)
}

void ElementDesignation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ElementDesignation_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ElementDesignation::~ElementDesignation() {
  // @@protoc_insertion_point(destructor:mead101.avs.ElementDesignation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ElementDesignation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ElementDesignation::ArenaDtor(void* object) {
  ElementDesignation* _this = reinterpret_cast< ElementDesignation* >(object);
  (void)_this;
}
void ElementDesignation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ElementDesignation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ElementDesignation& ElementDesignation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ElementDesignation_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void ElementDesignation::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.ElementDesignation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ElementDesignation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.ElementDesignation.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ElementDesignation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.ElementDesignation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.ElementDesignation.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.ElementDesignation)
  return target;
}

size_t ElementDesignation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.ElementDesignation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ElementDesignation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.ElementDesignation)
  GOOGLE_DCHECK_NE(&from, this);
  const ElementDesignation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ElementDesignation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.ElementDesignation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.ElementDesignation)
    MergeFrom(*source);
  }
}

void ElementDesignation::MergeFrom(const ElementDesignation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.ElementDesignation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void ElementDesignation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.ElementDesignation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ElementDesignation::CopyFrom(const ElementDesignation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.ElementDesignation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ElementDesignation::IsInitialized() const {
  return true;
}

void ElementDesignation::InternalSwap(ElementDesignation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ElementDesignation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EncodingType::InitAsDefaultInstance() {
}
class EncodingType::_Internal {
 public:
  using HasBits = decltype(std::declval<EncodingType>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EncodingType::EncodingType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.EncodingType)
}
EncodingType::EncodingType(const EncodingType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.EncodingType)
}

void EncodingType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EncodingType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

EncodingType::~EncodingType() {
  // @@protoc_insertion_point(destructor:mead101.avs.EncodingType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EncodingType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EncodingType::ArenaDtor(void* object) {
  EncodingType* _this = reinterpret_cast< EncodingType* >(object);
  (void)_this;
}
void EncodingType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EncodingType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EncodingType& EncodingType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EncodingType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void EncodingType::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.EncodingType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EncodingType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.EncodingType.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EncodingType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.EncodingType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.EncodingType.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.EncodingType)
  return target;
}

size_t EncodingType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.EncodingType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EncodingType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.EncodingType)
  GOOGLE_DCHECK_NE(&from, this);
  const EncodingType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EncodingType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.EncodingType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.EncodingType)
    MergeFrom(*source);
  }
}

void EncodingType::MergeFrom(const EncodingType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.EncodingType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void EncodingType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.EncodingType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EncodingType::CopyFrom(const EncodingType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.EncodingType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EncodingType::IsInitialized() const {
  return true;
}

void EncodingType::InternalSwap(EncodingType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata EncodingType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EquipmentType::InitAsDefaultInstance() {
}
class EquipmentType::_Internal {
 public:
  using HasBits = decltype(std::declval<EquipmentType>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EquipmentType::EquipmentType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.EquipmentType)
}
EquipmentType::EquipmentType(const EquipmentType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.EquipmentType)
}

void EquipmentType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EquipmentType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

EquipmentType::~EquipmentType() {
  // @@protoc_insertion_point(destructor:mead101.avs.EquipmentType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EquipmentType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EquipmentType::ArenaDtor(void* object) {
  EquipmentType* _this = reinterpret_cast< EquipmentType* >(object);
  (void)_this;
}
void EquipmentType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EquipmentType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EquipmentType& EquipmentType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EquipmentType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void EquipmentType::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.EquipmentType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EquipmentType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.EquipmentType.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EquipmentType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.EquipmentType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.EquipmentType.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.EquipmentType)
  return target;
}

size_t EquipmentType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.EquipmentType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EquipmentType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.EquipmentType)
  GOOGLE_DCHECK_NE(&from, this);
  const EquipmentType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EquipmentType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.EquipmentType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.EquipmentType)
    MergeFrom(*source);
  }
}

void EquipmentType::MergeFrom(const EquipmentType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.EquipmentType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void EquipmentType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.EquipmentType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipmentType::CopyFrom(const EquipmentType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.EquipmentType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipmentType::IsInitialized() const {
  return true;
}

void EquipmentType::InternalSwap(EquipmentType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata EquipmentType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ErnMessageType::InitAsDefaultInstance() {
}
class ErnMessageType::_Internal {
 public:
  using HasBits = decltype(std::declval<ErnMessageType>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ErnMessageType::ErnMessageType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.ErnMessageType)
}
ErnMessageType::ErnMessageType(const ErnMessageType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.ErnMessageType)
}

void ErnMessageType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ErnMessageType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ErnMessageType::~ErnMessageType() {
  // @@protoc_insertion_point(destructor:mead101.avs.ErnMessageType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ErnMessageType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ErnMessageType::ArenaDtor(void* object) {
  ErnMessageType* _this = reinterpret_cast< ErnMessageType* >(object);
  (void)_this;
}
void ErnMessageType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ErnMessageType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ErnMessageType& ErnMessageType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ErnMessageType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void ErnMessageType::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.ErnMessageType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ErnMessageType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.ErnMessageType.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ErnMessageType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.ErnMessageType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.ErnMessageType.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.ErnMessageType)
  return target;
}

size_t ErnMessageType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.ErnMessageType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ErnMessageType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.ErnMessageType)
  GOOGLE_DCHECK_NE(&from, this);
  const ErnMessageType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ErnMessageType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.ErnMessageType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.ErnMessageType)
    MergeFrom(*source);
  }
}

void ErnMessageType::MergeFrom(const ErnMessageType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.ErnMessageType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void ErnMessageType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.ErnMessageType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ErnMessageType::CopyFrom(const ErnMessageType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.ErnMessageType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ErnMessageType::IsInitialized() const {
  return true;
}

void ErnMessageType::InternalSwap(ErnMessageType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ErnMessageType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ErnTestMessageType::InitAsDefaultInstance() {
}
class ErnTestMessageType::_Internal {
 public:
  using HasBits = decltype(std::declval<ErnTestMessageType>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ErnTestMessageType::ErnTestMessageType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.ErnTestMessageType)
}
ErnTestMessageType::ErnTestMessageType(const ErnTestMessageType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.ErnTestMessageType)
}

void ErnTestMessageType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ErnTestMessageType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ErnTestMessageType::~ErnTestMessageType() {
  // @@protoc_insertion_point(destructor:mead101.avs.ErnTestMessageType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ErnTestMessageType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ErnTestMessageType::ArenaDtor(void* object) {
  ErnTestMessageType* _this = reinterpret_cast< ErnTestMessageType* >(object);
  (void)_this;
}
void ErnTestMessageType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ErnTestMessageType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ErnTestMessageType& ErnTestMessageType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ErnTestMessageType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void ErnTestMessageType::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.ErnTestMessageType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ErnTestMessageType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.ErnTestMessageType.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ErnTestMessageType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.ErnTestMessageType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.ErnTestMessageType.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.ErnTestMessageType)
  return target;
}

size_t ErnTestMessageType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.ErnTestMessageType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ErnTestMessageType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.ErnTestMessageType)
  GOOGLE_DCHECK_NE(&from, this);
  const ErnTestMessageType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ErnTestMessageType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.ErnTestMessageType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.ErnTestMessageType)
    MergeFrom(*source);
  }
}

void ErnTestMessageType::MergeFrom(const ErnTestMessageType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.ErnTestMessageType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void ErnTestMessageType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.ErnTestMessageType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ErnTestMessageType::CopyFrom(const ErnTestMessageType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.ErnTestMessageType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ErnTestMessageType::IsInitialized() const {
  return true;
}

void ErnTestMessageType::InternalSwap(ErnTestMessageType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ErnTestMessageType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ErncFileStatus::InitAsDefaultInstance() {
}
class ErncFileStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<ErncFileStatus>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ErncFileStatus::ErncFileStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.ErncFileStatus)
}
ErncFileStatus::ErncFileStatus(const ErncFileStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.ErncFileStatus)
}

void ErncFileStatus::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ErncFileStatus_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ErncFileStatus::~ErncFileStatus() {
  // @@protoc_insertion_point(destructor:mead101.avs.ErncFileStatus)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ErncFileStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ErncFileStatus::ArenaDtor(void* object) {
  ErncFileStatus* _this = reinterpret_cast< ErncFileStatus* >(object);
  (void)_this;
}
void ErncFileStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ErncFileStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ErncFileStatus& ErncFileStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ErncFileStatus_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void ErncFileStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.ErncFileStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ErncFileStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.ErncFileStatus.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ErncFileStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.ErncFileStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.ErncFileStatus.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.ErncFileStatus)
  return target;
}

size_t ErncFileStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.ErncFileStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ErncFileStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.ErncFileStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const ErncFileStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ErncFileStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.ErncFileStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.ErncFileStatus)
    MergeFrom(*source);
  }
}

void ErncFileStatus::MergeFrom(const ErncFileStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.ErncFileStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void ErncFileStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.ErncFileStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ErncFileStatus::CopyFrom(const ErncFileStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.ErncFileStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ErncFileStatus::IsInitialized() const {
  return true;
}

void ErncFileStatus::InternalSwap(ErncFileStatus* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ErncFileStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ErncProposedActionType::InitAsDefaultInstance() {
}
class ErncProposedActionType::_Internal {
 public:
  using HasBits = decltype(std::declval<ErncProposedActionType>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ErncProposedActionType::ErncProposedActionType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.ErncProposedActionType)
}
ErncProposedActionType::ErncProposedActionType(const ErncProposedActionType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.ErncProposedActionType)
}

void ErncProposedActionType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ErncProposedActionType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ErncProposedActionType::~ErncProposedActionType() {
  // @@protoc_insertion_point(destructor:mead101.avs.ErncProposedActionType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ErncProposedActionType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ErncProposedActionType::ArenaDtor(void* object) {
  ErncProposedActionType* _this = reinterpret_cast< ErncProposedActionType* >(object);
  (void)_this;
}
void ErncProposedActionType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ErncProposedActionType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ErncProposedActionType& ErncProposedActionType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ErncProposedActionType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void ErncProposedActionType::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.ErncProposedActionType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ErncProposedActionType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.ErncProposedActionType.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ErncProposedActionType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.ErncProposedActionType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.ErncProposedActionType.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.ErncProposedActionType)
  return target;
}

size_t ErncProposedActionType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.ErncProposedActionType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ErncProposedActionType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.ErncProposedActionType)
  GOOGLE_DCHECK_NE(&from, this);
  const ErncProposedActionType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ErncProposedActionType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.ErncProposedActionType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.ErncProposedActionType)
    MergeFrom(*source);
  }
}

void ErncProposedActionType::MergeFrom(const ErncProposedActionType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.ErncProposedActionType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void ErncProposedActionType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.ErncProposedActionType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ErncProposedActionType::CopyFrom(const ErncProposedActionType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.ErncProposedActionType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ErncProposedActionType::IsInitialized() const {
  return true;
}

void ErncProposedActionType::InternalSwap(ErncProposedActionType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ErncProposedActionType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ErrorSeverity::InitAsDefaultInstance() {
}
class ErrorSeverity::_Internal {
 public:
  using HasBits = decltype(std::declval<ErrorSeverity>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ErrorSeverity::ErrorSeverity(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.ErrorSeverity)
}
ErrorSeverity::ErrorSeverity(const ErrorSeverity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.ErrorSeverity)
}

void ErrorSeverity::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ErrorSeverity_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ErrorSeverity::~ErrorSeverity() {
  // @@protoc_insertion_point(destructor:mead101.avs.ErrorSeverity)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ErrorSeverity::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ErrorSeverity::ArenaDtor(void* object) {
  ErrorSeverity* _this = reinterpret_cast< ErrorSeverity* >(object);
  (void)_this;
}
void ErrorSeverity::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ErrorSeverity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ErrorSeverity& ErrorSeverity::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ErrorSeverity_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void ErrorSeverity::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.ErrorSeverity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ErrorSeverity::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.ErrorSeverity.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ErrorSeverity::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.ErrorSeverity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.ErrorSeverity.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.ErrorSeverity)
  return target;
}

size_t ErrorSeverity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.ErrorSeverity)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ErrorSeverity::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.ErrorSeverity)
  GOOGLE_DCHECK_NE(&from, this);
  const ErrorSeverity* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ErrorSeverity>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.ErrorSeverity)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.ErrorSeverity)
    MergeFrom(*source);
  }
}

void ErrorSeverity::MergeFrom(const ErrorSeverity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.ErrorSeverity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void ErrorSeverity::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.ErrorSeverity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ErrorSeverity::CopyFrom(const ErrorSeverity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.ErrorSeverity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ErrorSeverity::IsInitialized() const {
  return true;
}

void ErrorSeverity::InternalSwap(ErrorSeverity* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ErrorSeverity::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ErrorType::InitAsDefaultInstance() {
}
class ErrorType::_Internal {
 public:
  using HasBits = decltype(std::declval<ErrorType>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ErrorType::ErrorType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.ErrorType)
}
ErrorType::ErrorType(const ErrorType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.ErrorType)
}

void ErrorType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ErrorType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ErrorType::~ErrorType() {
  // @@protoc_insertion_point(destructor:mead101.avs.ErrorType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ErrorType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ErrorType::ArenaDtor(void* object) {
  ErrorType* _this = reinterpret_cast< ErrorType* >(object);
  (void)_this;
}
void ErrorType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ErrorType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ErrorType& ErrorType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ErrorType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void ErrorType::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.ErrorType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ErrorType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.ErrorType.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ErrorType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.ErrorType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.ErrorType.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.ErrorType)
  return target;
}

size_t ErrorType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.ErrorType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ErrorType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.ErrorType)
  GOOGLE_DCHECK_NE(&from, this);
  const ErrorType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ErrorType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.ErrorType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.ErrorType)
    MergeFrom(*source);
  }
}

void ErrorType::MergeFrom(const ErrorType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.ErrorType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void ErrorType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.ErrorType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ErrorType::CopyFrom(const ErrorType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.ErrorType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ErrorType::IsInitialized() const {
  return true;
}

void ErrorType::InternalSwap(ErrorType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ErrorType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ExceptionReason::InitAsDefaultInstance() {
}
class ExceptionReason::_Internal {
 public:
  using HasBits = decltype(std::declval<ExceptionReason>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ExceptionReason::ExceptionReason(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.ExceptionReason)
}
ExceptionReason::ExceptionReason(const ExceptionReason& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.ExceptionReason)
}

void ExceptionReason::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ExceptionReason_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ExceptionReason::~ExceptionReason() {
  // @@protoc_insertion_point(destructor:mead101.avs.ExceptionReason)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ExceptionReason::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ExceptionReason::ArenaDtor(void* object) {
  ExceptionReason* _this = reinterpret_cast< ExceptionReason* >(object);
  (void)_this;
}
void ExceptionReason::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExceptionReason::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExceptionReason& ExceptionReason::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ExceptionReason_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void ExceptionReason::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.ExceptionReason)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExceptionReason::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.ExceptionReason.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExceptionReason::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.ExceptionReason)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.ExceptionReason.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.ExceptionReason)
  return target;
}

size_t ExceptionReason::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.ExceptionReason)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExceptionReason::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.ExceptionReason)
  GOOGLE_DCHECK_NE(&from, this);
  const ExceptionReason* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ExceptionReason>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.ExceptionReason)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.ExceptionReason)
    MergeFrom(*source);
  }
}

void ExceptionReason::MergeFrom(const ExceptionReason& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.ExceptionReason)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void ExceptionReason::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.ExceptionReason)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExceptionReason::CopyFrom(const ExceptionReason& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.ExceptionReason)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExceptionReason::IsInitialized() const {
  return true;
}

void ExceptionReason::InternalSwap(ExceptionReason* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ExceptionReason::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ExpressionType::InitAsDefaultInstance() {
}
class ExpressionType::_Internal {
 public:
  using HasBits = decltype(std::declval<ExpressionType>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ExpressionType::ExpressionType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.ExpressionType)
}
ExpressionType::ExpressionType(const ExpressionType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.ExpressionType)
}

void ExpressionType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ExpressionType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ExpressionType::~ExpressionType() {
  // @@protoc_insertion_point(destructor:mead101.avs.ExpressionType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ExpressionType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ExpressionType::ArenaDtor(void* object) {
  ExpressionType* _this = reinterpret_cast< ExpressionType* >(object);
  (void)_this;
}
void ExpressionType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExpressionType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExpressionType& ExpressionType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ExpressionType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void ExpressionType::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.ExpressionType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExpressionType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.ExpressionType.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExpressionType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.ExpressionType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.ExpressionType.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.ExpressionType)
  return target;
}

size_t ExpressionType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.ExpressionType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExpressionType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.ExpressionType)
  GOOGLE_DCHECK_NE(&from, this);
  const ExpressionType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ExpressionType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.ExpressionType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.ExpressionType)
    MergeFrom(*source);
  }
}

void ExpressionType::MergeFrom(const ExpressionType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.ExpressionType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void ExpressionType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.ExpressionType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExpressionType::CopyFrom(const ExpressionType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.ExpressionType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExpressionType::IsInitialized() const {
  return true;
}

void ExpressionType::InternalSwap(ExpressionType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ExpressionType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ExternallyLinkedResourceType::InitAsDefaultInstance() {
}
class ExternallyLinkedResourceType::_Internal {
 public:
  using HasBits = decltype(std::declval<ExternallyLinkedResourceType>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ExternallyLinkedResourceType::ExternallyLinkedResourceType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.ExternallyLinkedResourceType)
}
ExternallyLinkedResourceType::ExternallyLinkedResourceType(const ExternallyLinkedResourceType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.ExternallyLinkedResourceType)
}

void ExternallyLinkedResourceType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ExternallyLinkedResourceType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ExternallyLinkedResourceType::~ExternallyLinkedResourceType() {
  // @@protoc_insertion_point(destructor:mead101.avs.ExternallyLinkedResourceType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ExternallyLinkedResourceType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ExternallyLinkedResourceType::ArenaDtor(void* object) {
  ExternallyLinkedResourceType* _this = reinterpret_cast< ExternallyLinkedResourceType* >(object);
  (void)_this;
}
void ExternallyLinkedResourceType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExternallyLinkedResourceType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExternallyLinkedResourceType& ExternallyLinkedResourceType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ExternallyLinkedResourceType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void ExternallyLinkedResourceType::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.ExternallyLinkedResourceType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExternallyLinkedResourceType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.ExternallyLinkedResourceType.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExternallyLinkedResourceType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.ExternallyLinkedResourceType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.ExternallyLinkedResourceType.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.ExternallyLinkedResourceType)
  return target;
}

size_t ExternallyLinkedResourceType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.ExternallyLinkedResourceType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExternallyLinkedResourceType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.ExternallyLinkedResourceType)
  GOOGLE_DCHECK_NE(&from, this);
  const ExternallyLinkedResourceType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ExternallyLinkedResourceType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.ExternallyLinkedResourceType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.ExternallyLinkedResourceType)
    MergeFrom(*source);
  }
}

void ExternallyLinkedResourceType::MergeFrom(const ExternallyLinkedResourceType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.ExternallyLinkedResourceType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void ExternallyLinkedResourceType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.ExternallyLinkedResourceType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExternallyLinkedResourceType::CopyFrom(const ExternallyLinkedResourceType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.ExternallyLinkedResourceType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExternallyLinkedResourceType::IsInitialized() const {
  return true;
}

void ExternallyLinkedResourceType::InternalSwap(ExternallyLinkedResourceType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ExternallyLinkedResourceType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FileType::InitAsDefaultInstance() {
}
class FileType::_Internal {
 public:
  using HasBits = decltype(std::declval<FileType>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

FileType::FileType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.FileType)
}
FileType::FileType(const FileType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.FileType)
}

void FileType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FileType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

FileType::~FileType() {
  // @@protoc_insertion_point(destructor:mead101.avs.FileType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FileType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FileType::ArenaDtor(void* object) {
  FileType* _this = reinterpret_cast< FileType* >(object);
  (void)_this;
}
void FileType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FileType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FileType& FileType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FileType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void FileType::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.FileType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FileType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.FileType.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FileType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.FileType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.FileType.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.FileType)
  return target;
}

size_t FileType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.FileType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FileType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.FileType)
  GOOGLE_DCHECK_NE(&from, this);
  const FileType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FileType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.FileType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.FileType)
    MergeFrom(*source);
  }
}

void FileType::MergeFrom(const FileType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.FileType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void FileType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.FileType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileType::CopyFrom(const FileType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.FileType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileType::IsInitialized() const {
  return true;
}

void FileType::InternalSwap(FileType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata FileType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FingerprintAlgorithmType::InitAsDefaultInstance() {
}
class FingerprintAlgorithmType::_Internal {
 public:
  using HasBits = decltype(std::declval<FingerprintAlgorithmType>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

FingerprintAlgorithmType::FingerprintAlgorithmType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.FingerprintAlgorithmType)
}
FingerprintAlgorithmType::FingerprintAlgorithmType(const FingerprintAlgorithmType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.FingerprintAlgorithmType)
}

void FingerprintAlgorithmType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FingerprintAlgorithmType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

FingerprintAlgorithmType::~FingerprintAlgorithmType() {
  // @@protoc_insertion_point(destructor:mead101.avs.FingerprintAlgorithmType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FingerprintAlgorithmType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FingerprintAlgorithmType::ArenaDtor(void* object) {
  FingerprintAlgorithmType* _this = reinterpret_cast< FingerprintAlgorithmType* >(object);
  (void)_this;
}
void FingerprintAlgorithmType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FingerprintAlgorithmType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FingerprintAlgorithmType& FingerprintAlgorithmType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FingerprintAlgorithmType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void FingerprintAlgorithmType::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.FingerprintAlgorithmType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FingerprintAlgorithmType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.FingerprintAlgorithmType.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FingerprintAlgorithmType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.FingerprintAlgorithmType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.FingerprintAlgorithmType.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.FingerprintAlgorithmType)
  return target;
}

size_t FingerprintAlgorithmType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.FingerprintAlgorithmType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FingerprintAlgorithmType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.FingerprintAlgorithmType)
  GOOGLE_DCHECK_NE(&from, this);
  const FingerprintAlgorithmType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FingerprintAlgorithmType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.FingerprintAlgorithmType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.FingerprintAlgorithmType)
    MergeFrom(*source);
  }
}

void FingerprintAlgorithmType::MergeFrom(const FingerprintAlgorithmType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.FingerprintAlgorithmType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void FingerprintAlgorithmType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.FingerprintAlgorithmType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FingerprintAlgorithmType::CopyFrom(const FingerprintAlgorithmType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.FingerprintAlgorithmType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FingerprintAlgorithmType::IsInitialized() const {
  return true;
}

void FingerprintAlgorithmType::InternalSwap(FingerprintAlgorithmType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata FingerprintAlgorithmType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Form::InitAsDefaultInstance() {
}
class Form::_Internal {
 public:
  using HasBits = decltype(std::declval<Form>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Form::Form(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.Form)
}
Form::Form(const Form& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.Form)
}

void Form::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Form_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Form::~Form() {
  // @@protoc_insertion_point(destructor:mead101.avs.Form)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Form::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Form::ArenaDtor(void* object) {
  Form* _this = reinterpret_cast< Form* >(object);
  (void)_this;
}
void Form::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Form::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Form& Form::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Form_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void Form::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.Form)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Form::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.Form.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Form::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.Form)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.Form.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.Form)
  return target;
}

size_t Form::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.Form)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Form::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.Form)
  GOOGLE_DCHECK_NE(&from, this);
  const Form* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Form>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.Form)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.Form)
    MergeFrom(*source);
  }
}

void Form::MergeFrom(const Form& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.Form)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void Form::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.Form)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Form::CopyFrom(const Form& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.Form)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Form::IsInitialized() const {
  return true;
}

void Form::InternalSwap(Form* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Form::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FrameRate::InitAsDefaultInstance() {
}
class FrameRate::_Internal {
 public:
  using HasBits = decltype(std::declval<FrameRate>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

FrameRate::FrameRate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.FrameRate)
}
FrameRate::FrameRate(const FrameRate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.FrameRate)
}

void FrameRate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FrameRate_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

FrameRate::~FrameRate() {
  // @@protoc_insertion_point(destructor:mead101.avs.FrameRate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FrameRate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FrameRate::ArenaDtor(void* object) {
  FrameRate* _this = reinterpret_cast< FrameRate* >(object);
  (void)_this;
}
void FrameRate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FrameRate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FrameRate& FrameRate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FrameRate_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void FrameRate::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.FrameRate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FrameRate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.FrameRate.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FrameRate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.FrameRate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.FrameRate.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.FrameRate)
  return target;
}

size_t FrameRate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.FrameRate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FrameRate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.FrameRate)
  GOOGLE_DCHECK_NE(&from, this);
  const FrameRate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FrameRate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.FrameRate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.FrameRate)
    MergeFrom(*source);
  }
}

void FrameRate::MergeFrom(const FrameRate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.FrameRate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void FrameRate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.FrameRate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FrameRate::CopyFrom(const FrameRate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.FrameRate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameRate::IsInitialized() const {
  return true;
}

void FrameRate::InternalSwap(FrameRate* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata FrameRate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Gender::InitAsDefaultInstance() {
}
class Gender::_Internal {
 public:
  using HasBits = decltype(std::declval<Gender>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Gender::Gender(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.Gender)
}
Gender::Gender(const Gender& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.Gender)
}

void Gender::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Gender_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Gender::~Gender() {
  // @@protoc_insertion_point(destructor:mead101.avs.Gender)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Gender::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Gender::ArenaDtor(void* object) {
  Gender* _this = reinterpret_cast< Gender* >(object);
  (void)_this;
}
void Gender::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Gender::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Gender& Gender::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Gender_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void Gender::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.Gender)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Gender::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.Gender.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Gender::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.Gender)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.Gender.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.Gender)
  return target;
}

size_t Gender::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.Gender)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Gender::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.Gender)
  GOOGLE_DCHECK_NE(&from, this);
  const Gender* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Gender>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.Gender)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.Gender)
    MergeFrom(*source);
  }
}

void Gender::MergeFrom(const Gender& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.Gender)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void Gender::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.Gender)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Gender::CopyFrom(const Gender& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.Gender)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Gender::IsInitialized() const {
  return true;
}

void Gender::InternalSwap(Gender* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Gender::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GoverningAgreementType::InitAsDefaultInstance() {
}
class GoverningAgreementType::_Internal {
 public:
  using HasBits = decltype(std::declval<GoverningAgreementType>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

GoverningAgreementType::GoverningAgreementType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.GoverningAgreementType)
}
GoverningAgreementType::GoverningAgreementType(const GoverningAgreementType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.GoverningAgreementType)
}

void GoverningAgreementType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GoverningAgreementType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GoverningAgreementType::~GoverningAgreementType() {
  // @@protoc_insertion_point(destructor:mead101.avs.GoverningAgreementType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GoverningAgreementType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GoverningAgreementType::ArenaDtor(void* object) {
  GoverningAgreementType* _this = reinterpret_cast< GoverningAgreementType* >(object);
  (void)_this;
}
void GoverningAgreementType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GoverningAgreementType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GoverningAgreementType& GoverningAgreementType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GoverningAgreementType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void GoverningAgreementType::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.GoverningAgreementType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GoverningAgreementType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.GoverningAgreementType.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GoverningAgreementType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.GoverningAgreementType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.GoverningAgreementType.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.GoverningAgreementType)
  return target;
}

size_t GoverningAgreementType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.GoverningAgreementType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GoverningAgreementType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.GoverningAgreementType)
  GOOGLE_DCHECK_NE(&from, this);
  const GoverningAgreementType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GoverningAgreementType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.GoverningAgreementType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.GoverningAgreementType)
    MergeFrom(*source);
  }
}

void GoverningAgreementType::MergeFrom(const GoverningAgreementType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.GoverningAgreementType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void GoverningAgreementType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.GoverningAgreementType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GoverningAgreementType::CopyFrom(const GoverningAgreementType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.GoverningAgreementType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GoverningAgreementType::IsInitialized() const {
  return true;
}

void GoverningAgreementType::InternalSwap(GoverningAgreementType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata GoverningAgreementType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HashSumAlgorithmType::InitAsDefaultInstance() {
}
class HashSumAlgorithmType::_Internal {
 public:
  using HasBits = decltype(std::declval<HashSumAlgorithmType>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

HashSumAlgorithmType::HashSumAlgorithmType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.HashSumAlgorithmType)
}
HashSumAlgorithmType::HashSumAlgorithmType(const HashSumAlgorithmType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.HashSumAlgorithmType)
}

void HashSumAlgorithmType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HashSumAlgorithmType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

HashSumAlgorithmType::~HashSumAlgorithmType() {
  // @@protoc_insertion_point(destructor:mead101.avs.HashSumAlgorithmType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HashSumAlgorithmType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void HashSumAlgorithmType::ArenaDtor(void* object) {
  HashSumAlgorithmType* _this = reinterpret_cast< HashSumAlgorithmType* >(object);
  (void)_this;
}
void HashSumAlgorithmType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HashSumAlgorithmType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HashSumAlgorithmType& HashSumAlgorithmType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HashSumAlgorithmType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void HashSumAlgorithmType::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.HashSumAlgorithmType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HashSumAlgorithmType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.HashSumAlgorithmType.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HashSumAlgorithmType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.HashSumAlgorithmType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.HashSumAlgorithmType.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.HashSumAlgorithmType)
  return target;
}

size_t HashSumAlgorithmType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.HashSumAlgorithmType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HashSumAlgorithmType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.HashSumAlgorithmType)
  GOOGLE_DCHECK_NE(&from, this);
  const HashSumAlgorithmType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HashSumAlgorithmType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.HashSumAlgorithmType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.HashSumAlgorithmType)
    MergeFrom(*source);
  }
}

void HashSumAlgorithmType::MergeFrom(const HashSumAlgorithmType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.HashSumAlgorithmType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void HashSumAlgorithmType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.HashSumAlgorithmType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HashSumAlgorithmType::CopyFrom(const HashSumAlgorithmType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.HashSumAlgorithmType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HashSumAlgorithmType::IsInitialized() const {
  return true;
}

void HashSumAlgorithmType::InternalSwap(HashSumAlgorithmType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata HashSumAlgorithmType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ImageCodecType::InitAsDefaultInstance() {
}
class ImageCodecType::_Internal {
 public:
  using HasBits = decltype(std::declval<ImageCodecType>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ImageCodecType::ImageCodecType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.ImageCodecType)
}
ImageCodecType::ImageCodecType(const ImageCodecType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.ImageCodecType)
}

void ImageCodecType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ImageCodecType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ImageCodecType::~ImageCodecType() {
  // @@protoc_insertion_point(destructor:mead101.avs.ImageCodecType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ImageCodecType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ImageCodecType::ArenaDtor(void* object) {
  ImageCodecType* _this = reinterpret_cast< ImageCodecType* >(object);
  (void)_this;
}
void ImageCodecType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ImageCodecType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ImageCodecType& ImageCodecType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ImageCodecType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void ImageCodecType::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.ImageCodecType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImageCodecType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.ImageCodecType.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ImageCodecType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.ImageCodecType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.ImageCodecType.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.ImageCodecType)
  return target;
}

size_t ImageCodecType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.ImageCodecType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ImageCodecType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.ImageCodecType)
  GOOGLE_DCHECK_NE(&from, this);
  const ImageCodecType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ImageCodecType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.ImageCodecType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.ImageCodecType)
    MergeFrom(*source);
  }
}

void ImageCodecType::MergeFrom(const ImageCodecType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.ImageCodecType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void ImageCodecType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.ImageCodecType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageCodecType::CopyFrom(const ImageCodecType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.ImageCodecType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageCodecType::IsInitialized() const {
  return true;
}

void ImageCodecType::InternalSwap(ImageCodecType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ImageCodecType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ImageType::InitAsDefaultInstance() {
}
class ImageType::_Internal {
 public:
  using HasBits = decltype(std::declval<ImageType>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ImageType::ImageType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.ImageType)
}
ImageType::ImageType(const ImageType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.ImageType)
}

void ImageType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ImageType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ImageType::~ImageType() {
  // @@protoc_insertion_point(destructor:mead101.avs.ImageType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ImageType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ImageType::ArenaDtor(void* object) {
  ImageType* _this = reinterpret_cast< ImageType* >(object);
  (void)_this;
}
void ImageType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ImageType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ImageType& ImageType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ImageType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void ImageType::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.ImageType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImageType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.ImageType.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ImageType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.ImageType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.ImageType.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.ImageType)
  return target;
}

size_t ImageType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.ImageType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ImageType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.ImageType)
  GOOGLE_DCHECK_NE(&from, this);
  const ImageType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ImageType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.ImageType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.ImageType)
    MergeFrom(*source);
  }
}

void ImageType::MergeFrom(const ImageType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.ImageType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void ImageType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.ImageType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageType::CopyFrom(const ImageType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.ImageType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageType::IsInitialized() const {
  return true;
}

void ImageType::InternalSwap(ImageType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ImageType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InstrumentType::InitAsDefaultInstance() {
}
class InstrumentType::_Internal {
 public:
  using HasBits = decltype(std::declval<InstrumentType>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

InstrumentType::InstrumentType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.InstrumentType)
}
InstrumentType::InstrumentType(const InstrumentType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.InstrumentType)
}

void InstrumentType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InstrumentType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

InstrumentType::~InstrumentType() {
  // @@protoc_insertion_point(destructor:mead101.avs.InstrumentType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InstrumentType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void InstrumentType::ArenaDtor(void* object) {
  InstrumentType* _this = reinterpret_cast< InstrumentType* >(object);
  (void)_this;
}
void InstrumentType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InstrumentType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InstrumentType& InstrumentType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InstrumentType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void InstrumentType::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.InstrumentType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InstrumentType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.InstrumentType.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InstrumentType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.InstrumentType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.InstrumentType.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.InstrumentType)
  return target;
}

size_t InstrumentType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.InstrumentType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InstrumentType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.InstrumentType)
  GOOGLE_DCHECK_NE(&from, this);
  const InstrumentType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InstrumentType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.InstrumentType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.InstrumentType)
    MergeFrom(*source);
  }
}

void InstrumentType::MergeFrom(const InstrumentType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.InstrumentType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void InstrumentType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.InstrumentType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstrumentType::CopyFrom(const InstrumentType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.InstrumentType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstrumentType::IsInitialized() const {
  return true;
}

void InstrumentType::InternalSwap(InstrumentType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata InstrumentType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Iso639Part12LanguageCode::InitAsDefaultInstance() {
}
class Iso639Part12LanguageCode::_Internal {
 public:
  using HasBits = decltype(std::declval<Iso639Part12LanguageCode>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Iso639Part12LanguageCode::Iso639Part12LanguageCode(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.Iso639Part12LanguageCode)
}
Iso639Part12LanguageCode::Iso639Part12LanguageCode(const Iso639Part12LanguageCode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.Iso639Part12LanguageCode)
}

void Iso639Part12LanguageCode::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Iso639Part12LanguageCode_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Iso639Part12LanguageCode::~Iso639Part12LanguageCode() {
  // @@protoc_insertion_point(destructor:mead101.avs.Iso639Part12LanguageCode)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Iso639Part12LanguageCode::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Iso639Part12LanguageCode::ArenaDtor(void* object) {
  Iso639Part12LanguageCode* _this = reinterpret_cast< Iso639Part12LanguageCode* >(object);
  (void)_this;
}
void Iso639Part12LanguageCode::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Iso639Part12LanguageCode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Iso639Part12LanguageCode& Iso639Part12LanguageCode::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Iso639Part12LanguageCode_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void Iso639Part12LanguageCode::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.Iso639Part12LanguageCode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Iso639Part12LanguageCode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.Iso639Part12LanguageCode.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Iso639Part12LanguageCode::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.Iso639Part12LanguageCode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.Iso639Part12LanguageCode.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.Iso639Part12LanguageCode)
  return target;
}

size_t Iso639Part12LanguageCode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.Iso639Part12LanguageCode)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Iso639Part12LanguageCode::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.Iso639Part12LanguageCode)
  GOOGLE_DCHECK_NE(&from, this);
  const Iso639Part12LanguageCode* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Iso639Part12LanguageCode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.Iso639Part12LanguageCode)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.Iso639Part12LanguageCode)
    MergeFrom(*source);
  }
}

void Iso639Part12LanguageCode::MergeFrom(const Iso639Part12LanguageCode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.Iso639Part12LanguageCode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void Iso639Part12LanguageCode::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.Iso639Part12LanguageCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Iso639Part12LanguageCode::CopyFrom(const Iso639Part12LanguageCode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.Iso639Part12LanguageCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Iso639Part12LanguageCode::IsInitialized() const {
  return true;
}

void Iso639Part12LanguageCode::InternalSwap(Iso639Part12LanguageCode* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Iso639Part12LanguageCode::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Iso639Part3LanguageCode::InitAsDefaultInstance() {
}
class Iso639Part3LanguageCode::_Internal {
 public:
  using HasBits = decltype(std::declval<Iso639Part3LanguageCode>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Iso639Part3LanguageCode::Iso639Part3LanguageCode(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.Iso639Part3LanguageCode)
}
Iso639Part3LanguageCode::Iso639Part3LanguageCode(const Iso639Part3LanguageCode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.Iso639Part3LanguageCode)
}

void Iso639Part3LanguageCode::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Iso639Part3LanguageCode_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Iso639Part3LanguageCode::~Iso639Part3LanguageCode() {
  // @@protoc_insertion_point(destructor:mead101.avs.Iso639Part3LanguageCode)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Iso639Part3LanguageCode::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Iso639Part3LanguageCode::ArenaDtor(void* object) {
  Iso639Part3LanguageCode* _this = reinterpret_cast< Iso639Part3LanguageCode* >(object);
  (void)_this;
}
void Iso639Part3LanguageCode::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Iso639Part3LanguageCode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Iso639Part3LanguageCode& Iso639Part3LanguageCode::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Iso639Part3LanguageCode_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void Iso639Part3LanguageCode::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.Iso639Part3LanguageCode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Iso639Part3LanguageCode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.Iso639Part3LanguageCode.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Iso639Part3LanguageCode::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.Iso639Part3LanguageCode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.Iso639Part3LanguageCode.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.Iso639Part3LanguageCode)
  return target;
}

size_t Iso639Part3LanguageCode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.Iso639Part3LanguageCode)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Iso639Part3LanguageCode::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.Iso639Part3LanguageCode)
  GOOGLE_DCHECK_NE(&from, this);
  const Iso639Part3LanguageCode* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Iso639Part3LanguageCode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.Iso639Part3LanguageCode)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.Iso639Part3LanguageCode)
    MergeFrom(*source);
  }
}

void Iso639Part3LanguageCode::MergeFrom(const Iso639Part3LanguageCode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.Iso639Part3LanguageCode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void Iso639Part3LanguageCode::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.Iso639Part3LanguageCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Iso639Part3LanguageCode::CopyFrom(const Iso639Part3LanguageCode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.Iso639Part3LanguageCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Iso639Part3LanguageCode::IsInitialized() const {
  return true;
}

void Iso639Part3LanguageCode::InternalSwap(Iso639Part3LanguageCode* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Iso639Part3LanguageCode::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IsoCurrencyCode::InitAsDefaultInstance() {
}
class IsoCurrencyCode::_Internal {
 public:
  using HasBits = decltype(std::declval<IsoCurrencyCode>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

IsoCurrencyCode::IsoCurrencyCode(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.IsoCurrencyCode)
}
IsoCurrencyCode::IsoCurrencyCode(const IsoCurrencyCode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.IsoCurrencyCode)
}

void IsoCurrencyCode::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IsoCurrencyCode_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

IsoCurrencyCode::~IsoCurrencyCode() {
  // @@protoc_insertion_point(destructor:mead101.avs.IsoCurrencyCode)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IsoCurrencyCode::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void IsoCurrencyCode::ArenaDtor(void* object) {
  IsoCurrencyCode* _this = reinterpret_cast< IsoCurrencyCode* >(object);
  (void)_this;
}
void IsoCurrencyCode::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IsoCurrencyCode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IsoCurrencyCode& IsoCurrencyCode::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IsoCurrencyCode_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void IsoCurrencyCode::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.IsoCurrencyCode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IsoCurrencyCode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.IsoCurrencyCode.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IsoCurrencyCode::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.IsoCurrencyCode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.IsoCurrencyCode.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.IsoCurrencyCode)
  return target;
}

size_t IsoCurrencyCode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.IsoCurrencyCode)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IsoCurrencyCode::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.IsoCurrencyCode)
  GOOGLE_DCHECK_NE(&from, this);
  const IsoCurrencyCode* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IsoCurrencyCode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.IsoCurrencyCode)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.IsoCurrencyCode)
    MergeFrom(*source);
  }
}

void IsoCurrencyCode::MergeFrom(const IsoCurrencyCode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.IsoCurrencyCode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void IsoCurrencyCode::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.IsoCurrencyCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IsoCurrencyCode::CopyFrom(const IsoCurrencyCode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.IsoCurrencyCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IsoCurrencyCode::IsInitialized() const {
  return true;
}

void IsoCurrencyCode::InternalSwap(IsoCurrencyCode* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata IsoCurrencyCode::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IsoLanguageCode::InitAsDefaultInstance() {
}
class IsoLanguageCode::_Internal {
 public:
  using HasBits = decltype(std::declval<IsoLanguageCode>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

IsoLanguageCode::IsoLanguageCode(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.IsoLanguageCode)
}
IsoLanguageCode::IsoLanguageCode(const IsoLanguageCode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.IsoLanguageCode)
}

void IsoLanguageCode::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IsoLanguageCode_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

IsoLanguageCode::~IsoLanguageCode() {
  // @@protoc_insertion_point(destructor:mead101.avs.IsoLanguageCode)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IsoLanguageCode::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void IsoLanguageCode::ArenaDtor(void* object) {
  IsoLanguageCode* _this = reinterpret_cast< IsoLanguageCode* >(object);
  (void)_this;
}
void IsoLanguageCode::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IsoLanguageCode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IsoLanguageCode& IsoLanguageCode::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IsoLanguageCode_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void IsoLanguageCode::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.IsoLanguageCode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IsoLanguageCode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.IsoLanguageCode.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IsoLanguageCode::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.IsoLanguageCode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.IsoLanguageCode.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.IsoLanguageCode)
  return target;
}

size_t IsoLanguageCode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.IsoLanguageCode)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IsoLanguageCode::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.IsoLanguageCode)
  GOOGLE_DCHECK_NE(&from, this);
  const IsoLanguageCode* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IsoLanguageCode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.IsoLanguageCode)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.IsoLanguageCode)
    MergeFrom(*source);
  }
}

void IsoLanguageCode::MergeFrom(const IsoLanguageCode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.IsoLanguageCode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void IsoLanguageCode::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.IsoLanguageCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IsoLanguageCode::CopyFrom(const IsoLanguageCode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.IsoLanguageCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IsoLanguageCode::IsInitialized() const {
  return true;
}

void IsoLanguageCode::InternalSwap(IsoLanguageCode* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata IsoLanguageCode::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IsoTerritoryCode::InitAsDefaultInstance() {
}
class IsoTerritoryCode::_Internal {
 public:
  using HasBits = decltype(std::declval<IsoTerritoryCode>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

IsoTerritoryCode::IsoTerritoryCode(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.IsoTerritoryCode)
}
IsoTerritoryCode::IsoTerritoryCode(const IsoTerritoryCode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.IsoTerritoryCode)
}

void IsoTerritoryCode::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IsoTerritoryCode_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

IsoTerritoryCode::~IsoTerritoryCode() {
  // @@protoc_insertion_point(destructor:mead101.avs.IsoTerritoryCode)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IsoTerritoryCode::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void IsoTerritoryCode::ArenaDtor(void* object) {
  IsoTerritoryCode* _this = reinterpret_cast< IsoTerritoryCode* >(object);
  (void)_this;
}
void IsoTerritoryCode::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IsoTerritoryCode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IsoTerritoryCode& IsoTerritoryCode::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IsoTerritoryCode_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void IsoTerritoryCode::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.IsoTerritoryCode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IsoTerritoryCode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.IsoTerritoryCode.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IsoTerritoryCode::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.IsoTerritoryCode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.IsoTerritoryCode.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.IsoTerritoryCode)
  return target;
}

size_t IsoTerritoryCode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.IsoTerritoryCode)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IsoTerritoryCode::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.IsoTerritoryCode)
  GOOGLE_DCHECK_NE(&from, this);
  const IsoTerritoryCode* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IsoTerritoryCode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.IsoTerritoryCode)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.IsoTerritoryCode)
    MergeFrom(*source);
  }
}

void IsoTerritoryCode::MergeFrom(const IsoTerritoryCode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.IsoTerritoryCode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void IsoTerritoryCode::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.IsoTerritoryCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IsoTerritoryCode::CopyFrom(const IsoTerritoryCode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.IsoTerritoryCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IsoTerritoryCode::IsInitialized() const {
  return true;
}

void IsoTerritoryCode::InternalSwap(IsoTerritoryCode* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata IsoTerritoryCode::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LabelNameType::InitAsDefaultInstance() {
}
class LabelNameType::_Internal {
 public:
  using HasBits = decltype(std::declval<LabelNameType>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

LabelNameType::LabelNameType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.LabelNameType)
}
LabelNameType::LabelNameType(const LabelNameType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.LabelNameType)
}

void LabelNameType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LabelNameType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

LabelNameType::~LabelNameType() {
  // @@protoc_insertion_point(destructor:mead101.avs.LabelNameType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LabelNameType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LabelNameType::ArenaDtor(void* object) {
  LabelNameType* _this = reinterpret_cast< LabelNameType* >(object);
  (void)_this;
}
void LabelNameType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LabelNameType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LabelNameType& LabelNameType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LabelNameType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void LabelNameType::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.LabelNameType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LabelNameType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.LabelNameType.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LabelNameType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.LabelNameType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.LabelNameType.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.LabelNameType)
  return target;
}

size_t LabelNameType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.LabelNameType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LabelNameType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.LabelNameType)
  GOOGLE_DCHECK_NE(&from, this);
  const LabelNameType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LabelNameType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.LabelNameType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.LabelNameType)
    MergeFrom(*source);
  }
}

void LabelNameType::MergeFrom(const LabelNameType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.LabelNameType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void LabelNameType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.LabelNameType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LabelNameType::CopyFrom(const LabelNameType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.LabelNameType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LabelNameType::IsInitialized() const {
  return true;
}

void LabelNameType::InternalSwap(LabelNameType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata LabelNameType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LabelType::InitAsDefaultInstance() {
}
class LabelType::_Internal {
 public:
  using HasBits = decltype(std::declval<LabelType>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

LabelType::LabelType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.LabelType)
}
LabelType::LabelType(const LabelType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.LabelType)
}

void LabelType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LabelType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

LabelType::~LabelType() {
  // @@protoc_insertion_point(destructor:mead101.avs.LabelType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LabelType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LabelType::ArenaDtor(void* object) {
  LabelType* _this = reinterpret_cast< LabelType* >(object);
  (void)_this;
}
void LabelType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LabelType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LabelType& LabelType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LabelType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void LabelType::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.LabelType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LabelType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.LabelType.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LabelType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.LabelType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.LabelType.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.LabelType)
  return target;
}

size_t LabelType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.LabelType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LabelType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.LabelType)
  GOOGLE_DCHECK_NE(&from, this);
  const LabelType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LabelType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.LabelType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.LabelType)
    MergeFrom(*source);
  }
}

void LabelType::MergeFrom(const LabelType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.LabelType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void LabelType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.LabelType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LabelType::CopyFrom(const LabelType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.LabelType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LabelType::IsInitialized() const {
  return true;
}

void LabelType::InternalSwap(LabelType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata LabelType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LanguageLocalizationType::InitAsDefaultInstance() {
}
class LanguageLocalizationType::_Internal {
 public:
  using HasBits = decltype(std::declval<LanguageLocalizationType>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

LanguageLocalizationType::LanguageLocalizationType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.LanguageLocalizationType)
}
LanguageLocalizationType::LanguageLocalizationType(const LanguageLocalizationType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.LanguageLocalizationType)
}

void LanguageLocalizationType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LanguageLocalizationType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

LanguageLocalizationType::~LanguageLocalizationType() {
  // @@protoc_insertion_point(destructor:mead101.avs.LanguageLocalizationType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LanguageLocalizationType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LanguageLocalizationType::ArenaDtor(void* object) {
  LanguageLocalizationType* _this = reinterpret_cast< LanguageLocalizationType* >(object);
  (void)_this;
}
void LanguageLocalizationType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LanguageLocalizationType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LanguageLocalizationType& LanguageLocalizationType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LanguageLocalizationType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void LanguageLocalizationType::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.LanguageLocalizationType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LanguageLocalizationType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.LanguageLocalizationType.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LanguageLocalizationType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.LanguageLocalizationType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.LanguageLocalizationType.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.LanguageLocalizationType)
  return target;
}

size_t LanguageLocalizationType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.LanguageLocalizationType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LanguageLocalizationType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.LanguageLocalizationType)
  GOOGLE_DCHECK_NE(&from, this);
  const LanguageLocalizationType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LanguageLocalizationType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.LanguageLocalizationType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.LanguageLocalizationType)
    MergeFrom(*source);
  }
}

void LanguageLocalizationType::MergeFrom(const LanguageLocalizationType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.LanguageLocalizationType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void LanguageLocalizationType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.LanguageLocalizationType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LanguageLocalizationType::CopyFrom(const LanguageLocalizationType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.LanguageLocalizationType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LanguageLocalizationType::IsInitialized() const {
  return true;
}

void LanguageLocalizationType::InternalSwap(LanguageLocalizationType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata LanguageLocalizationType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LicenseRecord::InitAsDefaultInstance() {
}
class LicenseRecord::_Internal {
 public:
  using HasBits = decltype(std::declval<LicenseRecord>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

LicenseRecord::LicenseRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.LicenseRecord)
}
LicenseRecord::LicenseRecord(const LicenseRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.LicenseRecord)
}

void LicenseRecord::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LicenseRecord_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

LicenseRecord::~LicenseRecord() {
  // @@protoc_insertion_point(destructor:mead101.avs.LicenseRecord)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LicenseRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LicenseRecord::ArenaDtor(void* object) {
  LicenseRecord* _this = reinterpret_cast< LicenseRecord* >(object);
  (void)_this;
}
void LicenseRecord::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LicenseRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LicenseRecord& LicenseRecord::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LicenseRecord_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void LicenseRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.LicenseRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LicenseRecord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.LicenseRecord.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LicenseRecord::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.LicenseRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.LicenseRecord.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.LicenseRecord)
  return target;
}

size_t LicenseRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.LicenseRecord)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LicenseRecord::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.LicenseRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const LicenseRecord* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LicenseRecord>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.LicenseRecord)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.LicenseRecord)
    MergeFrom(*source);
  }
}

void LicenseRecord::MergeFrom(const LicenseRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.LicenseRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void LicenseRecord::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.LicenseRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LicenseRecord::CopyFrom(const LicenseRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.LicenseRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LicenseRecord::IsInitialized() const {
  return true;
}

void LicenseRecord::InternalSwap(LicenseRecord* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata LicenseRecord::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LicenseRefusalReason::InitAsDefaultInstance() {
}
class LicenseRefusalReason::_Internal {
 public:
  using HasBits = decltype(std::declval<LicenseRefusalReason>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

LicenseRefusalReason::LicenseRefusalReason(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.LicenseRefusalReason)
}
LicenseRefusalReason::LicenseRefusalReason(const LicenseRefusalReason& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.LicenseRefusalReason)
}

void LicenseRefusalReason::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LicenseRefusalReason_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

LicenseRefusalReason::~LicenseRefusalReason() {
  // @@protoc_insertion_point(destructor:mead101.avs.LicenseRefusalReason)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LicenseRefusalReason::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LicenseRefusalReason::ArenaDtor(void* object) {
  LicenseRefusalReason* _this = reinterpret_cast< LicenseRefusalReason* >(object);
  (void)_this;
}
void LicenseRefusalReason::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LicenseRefusalReason::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LicenseRefusalReason& LicenseRefusalReason::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LicenseRefusalReason_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void LicenseRefusalReason::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.LicenseRefusalReason)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LicenseRefusalReason::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.LicenseRefusalReason.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LicenseRefusalReason::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.LicenseRefusalReason)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.LicenseRefusalReason.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.LicenseRefusalReason)
  return target;
}

size_t LicenseRefusalReason::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.LicenseRefusalReason)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LicenseRefusalReason::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.LicenseRefusalReason)
  GOOGLE_DCHECK_NE(&from, this);
  const LicenseRefusalReason* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LicenseRefusalReason>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.LicenseRefusalReason)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.LicenseRefusalReason)
    MergeFrom(*source);
  }
}

void LicenseRefusalReason::MergeFrom(const LicenseRefusalReason& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.LicenseRefusalReason)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void LicenseRefusalReason::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.LicenseRefusalReason)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LicenseRefusalReason::CopyFrom(const LicenseRefusalReason& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.LicenseRefusalReason)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LicenseRefusalReason::IsInitialized() const {
  return true;
}

void LicenseRefusalReason::InternalSwap(LicenseRefusalReason* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata LicenseRefusalReason::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LicenseRejectionReason::InitAsDefaultInstance() {
}
class LicenseRejectionReason::_Internal {
 public:
  using HasBits = decltype(std::declval<LicenseRejectionReason>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

LicenseRejectionReason::LicenseRejectionReason(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.LicenseRejectionReason)
}
LicenseRejectionReason::LicenseRejectionReason(const LicenseRejectionReason& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.LicenseRejectionReason)
}

void LicenseRejectionReason::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LicenseRejectionReason_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

LicenseRejectionReason::~LicenseRejectionReason() {
  // @@protoc_insertion_point(destructor:mead101.avs.LicenseRejectionReason)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LicenseRejectionReason::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LicenseRejectionReason::ArenaDtor(void* object) {
  LicenseRejectionReason* _this = reinterpret_cast< LicenseRejectionReason* >(object);
  (void)_this;
}
void LicenseRejectionReason::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LicenseRejectionReason::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LicenseRejectionReason& LicenseRejectionReason::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LicenseRejectionReason_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void LicenseRejectionReason::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.LicenseRejectionReason)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LicenseRejectionReason::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.LicenseRejectionReason.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LicenseRejectionReason::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.LicenseRejectionReason)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.LicenseRejectionReason.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.LicenseRejectionReason)
  return target;
}

size_t LicenseRejectionReason::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.LicenseRejectionReason)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LicenseRejectionReason::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.LicenseRejectionReason)
  GOOGLE_DCHECK_NE(&from, this);
  const LicenseRejectionReason* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LicenseRejectionReason>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.LicenseRejectionReason)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.LicenseRejectionReason)
    MergeFrom(*source);
  }
}

void LicenseRejectionReason::MergeFrom(const LicenseRejectionReason& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.LicenseRejectionReason)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void LicenseRejectionReason::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.LicenseRejectionReason)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LicenseRejectionReason::CopyFrom(const LicenseRejectionReason& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.LicenseRejectionReason)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LicenseRejectionReason::IsInitialized() const {
  return true;
}

void LicenseRejectionReason::InternalSwap(LicenseRejectionReason* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata LicenseRejectionReason::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LinkAcknowledgementStatus::InitAsDefaultInstance() {
}
class LinkAcknowledgementStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<LinkAcknowledgementStatus>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

LinkAcknowledgementStatus::LinkAcknowledgementStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.LinkAcknowledgementStatus)
}
LinkAcknowledgementStatus::LinkAcknowledgementStatus(const LinkAcknowledgementStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.LinkAcknowledgementStatus)
}

void LinkAcknowledgementStatus::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LinkAcknowledgementStatus_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

LinkAcknowledgementStatus::~LinkAcknowledgementStatus() {
  // @@protoc_insertion_point(destructor:mead101.avs.LinkAcknowledgementStatus)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LinkAcknowledgementStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LinkAcknowledgementStatus::ArenaDtor(void* object) {
  LinkAcknowledgementStatus* _this = reinterpret_cast< LinkAcknowledgementStatus* >(object);
  (void)_this;
}
void LinkAcknowledgementStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LinkAcknowledgementStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LinkAcknowledgementStatus& LinkAcknowledgementStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LinkAcknowledgementStatus_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void LinkAcknowledgementStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.LinkAcknowledgementStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LinkAcknowledgementStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.LinkAcknowledgementStatus.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LinkAcknowledgementStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.LinkAcknowledgementStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.LinkAcknowledgementStatus.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.LinkAcknowledgementStatus)
  return target;
}

size_t LinkAcknowledgementStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.LinkAcknowledgementStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LinkAcknowledgementStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.LinkAcknowledgementStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const LinkAcknowledgementStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LinkAcknowledgementStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.LinkAcknowledgementStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.LinkAcknowledgementStatus)
    MergeFrom(*source);
  }
}

void LinkAcknowledgementStatus::MergeFrom(const LinkAcknowledgementStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.LinkAcknowledgementStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void LinkAcknowledgementStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.LinkAcknowledgementStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LinkAcknowledgementStatus::CopyFrom(const LinkAcknowledgementStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.LinkAcknowledgementStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinkAcknowledgementStatus::IsInitialized() const {
  return true;
}

void LinkAcknowledgementStatus::InternalSwap(LinkAcknowledgementStatus* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata LinkAcknowledgementStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LinkDescription::InitAsDefaultInstance() {
}
class LinkDescription::_Internal {
 public:
  using HasBits = decltype(std::declval<LinkDescription>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

LinkDescription::LinkDescription(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.LinkDescription)
}
LinkDescription::LinkDescription(const LinkDescription& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.LinkDescription)
}

void LinkDescription::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LinkDescription_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

LinkDescription::~LinkDescription() {
  // @@protoc_insertion_point(destructor:mead101.avs.LinkDescription)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LinkDescription::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LinkDescription::ArenaDtor(void* object) {
  LinkDescription* _this = reinterpret_cast< LinkDescription* >(object);
  (void)_this;
}
void LinkDescription::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LinkDescription::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LinkDescription& LinkDescription::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LinkDescription_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void LinkDescription::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.LinkDescription)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LinkDescription::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.LinkDescription.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LinkDescription::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.LinkDescription)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.LinkDescription.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.LinkDescription)
  return target;
}

size_t LinkDescription::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.LinkDescription)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LinkDescription::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.LinkDescription)
  GOOGLE_DCHECK_NE(&from, this);
  const LinkDescription* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LinkDescription>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.LinkDescription)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.LinkDescription)
    MergeFrom(*source);
  }
}

void LinkDescription::MergeFrom(const LinkDescription& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.LinkDescription)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void LinkDescription::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.LinkDescription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LinkDescription::CopyFrom(const LinkDescription& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.LinkDescription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinkDescription::IsInitialized() const {
  return true;
}

void LinkDescription::InternalSwap(LinkDescription* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata LinkDescription::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LyricsType::InitAsDefaultInstance() {
}
class LyricsType::_Internal {
 public:
  using HasBits = decltype(std::declval<LyricsType>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

LyricsType::LyricsType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.LyricsType)
}
LyricsType::LyricsType(const LyricsType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.LyricsType)
}

void LyricsType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LyricsType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

LyricsType::~LyricsType() {
  // @@protoc_insertion_point(destructor:mead101.avs.LyricsType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LyricsType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LyricsType::ArenaDtor(void* object) {
  LyricsType* _this = reinterpret_cast< LyricsType* >(object);
  (void)_this;
}
void LyricsType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LyricsType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LyricsType& LyricsType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LyricsType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void LyricsType::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.LyricsType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LyricsType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.LyricsType.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LyricsType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.LyricsType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.LyricsType.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.LyricsType)
  return target;
}

size_t LyricsType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.LyricsType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LyricsType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.LyricsType)
  GOOGLE_DCHECK_NE(&from, this);
  const LyricsType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LyricsType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.LyricsType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.LyricsType)
    MergeFrom(*source);
  }
}

void LyricsType::MergeFrom(const LyricsType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.LyricsType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void LyricsType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.LyricsType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LyricsType::CopyFrom(const LyricsType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.LyricsType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LyricsType::IsInitialized() const {
  return true;
}

void LyricsType::InternalSwap(LyricsType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata LyricsType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MembershipType::InitAsDefaultInstance() {
}
class MembershipType::_Internal {
 public:
  using HasBits = decltype(std::declval<MembershipType>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MembershipType::MembershipType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.MembershipType)
}
MembershipType::MembershipType(const MembershipType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.MembershipType)
}

void MembershipType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MembershipType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MembershipType::~MembershipType() {
  // @@protoc_insertion_point(destructor:mead101.avs.MembershipType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MembershipType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MembershipType::ArenaDtor(void* object) {
  MembershipType* _this = reinterpret_cast< MembershipType* >(object);
  (void)_this;
}
void MembershipType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MembershipType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MembershipType& MembershipType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MembershipType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void MembershipType::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.MembershipType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MembershipType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.MembershipType.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MembershipType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.MembershipType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.MembershipType.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.MembershipType)
  return target;
}

size_t MembershipType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.MembershipType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MembershipType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.MembershipType)
  GOOGLE_DCHECK_NE(&from, this);
  const MembershipType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MembershipType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.MembershipType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.MembershipType)
    MergeFrom(*source);
  }
}

void MembershipType::MergeFrom(const MembershipType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.MembershipType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void MembershipType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.MembershipType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MembershipType::CopyFrom(const MembershipType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.MembershipType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MembershipType::IsInitialized() const {
  return true;
}

void MembershipType::InternalSwap(MembershipType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata MembershipType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MessageActionType::InitAsDefaultInstance() {
}
class MessageActionType::_Internal {
 public:
  using HasBits = decltype(std::declval<MessageActionType>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MessageActionType::MessageActionType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.MessageActionType)
}
MessageActionType::MessageActionType(const MessageActionType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.MessageActionType)
}

void MessageActionType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MessageActionType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MessageActionType::~MessageActionType() {
  // @@protoc_insertion_point(destructor:mead101.avs.MessageActionType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MessageActionType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MessageActionType::ArenaDtor(void* object) {
  MessageActionType* _this = reinterpret_cast< MessageActionType* >(object);
  (void)_this;
}
void MessageActionType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MessageActionType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MessageActionType& MessageActionType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MessageActionType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void MessageActionType::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.MessageActionType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MessageActionType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.MessageActionType.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MessageActionType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.MessageActionType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.MessageActionType.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.MessageActionType)
  return target;
}

size_t MessageActionType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.MessageActionType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MessageActionType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.MessageActionType)
  GOOGLE_DCHECK_NE(&from, this);
  const MessageActionType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MessageActionType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.MessageActionType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.MessageActionType)
    MergeFrom(*source);
  }
}

void MessageActionType::MergeFrom(const MessageActionType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.MessageActionType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void MessageActionType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.MessageActionType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageActionType::CopyFrom(const MessageActionType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.MessageActionType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageActionType::IsInitialized() const {
  return true;
}

void MessageActionType::InternalSwap(MessageActionType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageActionType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MessageControlType::InitAsDefaultInstance() {
}
class MessageControlType::_Internal {
 public:
  using HasBits = decltype(std::declval<MessageControlType>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MessageControlType::MessageControlType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.MessageControlType)
}
MessageControlType::MessageControlType(const MessageControlType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.MessageControlType)
}

void MessageControlType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MessageControlType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MessageControlType::~MessageControlType() {
  // @@protoc_insertion_point(destructor:mead101.avs.MessageControlType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MessageControlType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MessageControlType::ArenaDtor(void* object) {
  MessageControlType* _this = reinterpret_cast< MessageControlType* >(object);
  (void)_this;
}
void MessageControlType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MessageControlType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MessageControlType& MessageControlType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MessageControlType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void MessageControlType::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.MessageControlType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MessageControlType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.MessageControlType.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MessageControlType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.MessageControlType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.MessageControlType.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.MessageControlType)
  return target;
}

size_t MessageControlType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.MessageControlType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MessageControlType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.MessageControlType)
  GOOGLE_DCHECK_NE(&from, this);
  const MessageControlType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MessageControlType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.MessageControlType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.MessageControlType)
    MergeFrom(*source);
  }
}

void MessageControlType::MergeFrom(const MessageControlType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.MessageControlType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void MessageControlType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.MessageControlType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageControlType::CopyFrom(const MessageControlType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.MessageControlType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageControlType::IsInitialized() const {
  return true;
}

void MessageControlType::InternalSwap(MessageControlType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageControlType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MessagePurpose::InitAsDefaultInstance() {
}
class MessagePurpose::_Internal {
 public:
  using HasBits = decltype(std::declval<MessagePurpose>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MessagePurpose::MessagePurpose(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.MessagePurpose)
}
MessagePurpose::MessagePurpose(const MessagePurpose& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.MessagePurpose)
}

void MessagePurpose::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MessagePurpose_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MessagePurpose::~MessagePurpose() {
  // @@protoc_insertion_point(destructor:mead101.avs.MessagePurpose)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MessagePurpose::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MessagePurpose::ArenaDtor(void* object) {
  MessagePurpose* _this = reinterpret_cast< MessagePurpose* >(object);
  (void)_this;
}
void MessagePurpose::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MessagePurpose::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MessagePurpose& MessagePurpose::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MessagePurpose_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void MessagePurpose::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.MessagePurpose)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MessagePurpose::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.MessagePurpose.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MessagePurpose::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.MessagePurpose)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.MessagePurpose.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.MessagePurpose)
  return target;
}

size_t MessagePurpose::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.MessagePurpose)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MessagePurpose::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.MessagePurpose)
  GOOGLE_DCHECK_NE(&from, this);
  const MessagePurpose* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MessagePurpose>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.MessagePurpose)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.MessagePurpose)
    MergeFrom(*source);
  }
}

void MessagePurpose::MergeFrom(const MessagePurpose& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.MessagePurpose)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void MessagePurpose::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.MessagePurpose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessagePurpose::CopyFrom(const MessagePurpose& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.MessagePurpose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessagePurpose::IsInitialized() const {
  return true;
}

void MessagePurpose::InternalSwap(MessagePurpose* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata MessagePurpose::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MessageType::InitAsDefaultInstance() {
}
class MessageType::_Internal {
 public:
  using HasBits = decltype(std::declval<MessageType>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MessageType::MessageType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.MessageType)
}
MessageType::MessageType(const MessageType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.MessageType)
}

void MessageType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MessageType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MessageType::~MessageType() {
  // @@protoc_insertion_point(destructor:mead101.avs.MessageType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MessageType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MessageType::ArenaDtor(void* object) {
  MessageType* _this = reinterpret_cast< MessageType* >(object);
  (void)_this;
}
void MessageType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MessageType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MessageType& MessageType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MessageType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void MessageType::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.MessageType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MessageType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.MessageType.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MessageType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.MessageType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.MessageType.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.MessageType)
  return target;
}

size_t MessageType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.MessageType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MessageType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.MessageType)
  GOOGLE_DCHECK_NE(&from, this);
  const MessageType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MessageType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.MessageType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.MessageType)
    MergeFrom(*source);
  }
}

void MessageType::MergeFrom(const MessageType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.MessageType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void MessageType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.MessageType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageType::CopyFrom(const MessageType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.MessageType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageType::IsInitialized() const {
  return true;
}

void MessageType::InternalSwap(MessageType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MetadataSourceType::InitAsDefaultInstance() {
}
class MetadataSourceType::_Internal {
 public:
  using HasBits = decltype(std::declval<MetadataSourceType>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MetadataSourceType::MetadataSourceType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.MetadataSourceType)
}
MetadataSourceType::MetadataSourceType(const MetadataSourceType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.MetadataSourceType)
}

void MetadataSourceType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MetadataSourceType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MetadataSourceType::~MetadataSourceType() {
  // @@protoc_insertion_point(destructor:mead101.avs.MetadataSourceType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MetadataSourceType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MetadataSourceType::ArenaDtor(void* object) {
  MetadataSourceType* _this = reinterpret_cast< MetadataSourceType* >(object);
  (void)_this;
}
void MetadataSourceType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MetadataSourceType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MetadataSourceType& MetadataSourceType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MetadataSourceType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void MetadataSourceType::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.MetadataSourceType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MetadataSourceType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.MetadataSourceType.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MetadataSourceType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.MetadataSourceType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.MetadataSourceType.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.MetadataSourceType)
  return target;
}

size_t MetadataSourceType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.MetadataSourceType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MetadataSourceType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.MetadataSourceType)
  GOOGLE_DCHECK_NE(&from, this);
  const MetadataSourceType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MetadataSourceType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.MetadataSourceType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.MetadataSourceType)
    MergeFrom(*source);
  }
}

void MetadataSourceType::MergeFrom(const MetadataSourceType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.MetadataSourceType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void MetadataSourceType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.MetadataSourceType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MetadataSourceType::CopyFrom(const MetadataSourceType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.MetadataSourceType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetadataSourceType::IsInitialized() const {
  return true;
}

void MetadataSourceType::InternalSwap(MetadataSourceType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata MetadataSourceType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MissingLinkReason::InitAsDefaultInstance() {
}
class MissingLinkReason::_Internal {
 public:
  using HasBits = decltype(std::declval<MissingLinkReason>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MissingLinkReason::MissingLinkReason(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.MissingLinkReason)
}
MissingLinkReason::MissingLinkReason(const MissingLinkReason& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.MissingLinkReason)
}

void MissingLinkReason::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MissingLinkReason_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MissingLinkReason::~MissingLinkReason() {
  // @@protoc_insertion_point(destructor:mead101.avs.MissingLinkReason)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MissingLinkReason::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MissingLinkReason::ArenaDtor(void* object) {
  MissingLinkReason* _this = reinterpret_cast< MissingLinkReason* >(object);
  (void)_this;
}
void MissingLinkReason::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MissingLinkReason::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MissingLinkReason& MissingLinkReason::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MissingLinkReason_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void MissingLinkReason::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.MissingLinkReason)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MissingLinkReason::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.MissingLinkReason.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MissingLinkReason::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.MissingLinkReason)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.MissingLinkReason.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.MissingLinkReason)
  return target;
}

size_t MissingLinkReason::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.MissingLinkReason)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MissingLinkReason::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.MissingLinkReason)
  GOOGLE_DCHECK_NE(&from, this);
  const MissingLinkReason* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MissingLinkReason>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.MissingLinkReason)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.MissingLinkReason)
    MergeFrom(*source);
  }
}

void MissingLinkReason::MergeFrom(const MissingLinkReason& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.MissingLinkReason)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void MissingLinkReason::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.MissingLinkReason)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MissingLinkReason::CopyFrom(const MissingLinkReason& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.MissingLinkReason)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MissingLinkReason::IsInitialized() const {
  return true;
}

void MissingLinkReason::InternalSwap(MissingLinkReason* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata MissingLinkReason::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MlcMessageType::InitAsDefaultInstance() {
}
class MlcMessageType::_Internal {
 public:
  using HasBits = decltype(std::declval<MlcMessageType>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MlcMessageType::MlcMessageType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.MlcMessageType)
}
MlcMessageType::MlcMessageType(const MlcMessageType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.MlcMessageType)
}

void MlcMessageType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MlcMessageType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MlcMessageType::~MlcMessageType() {
  // @@protoc_insertion_point(destructor:mead101.avs.MlcMessageType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MlcMessageType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MlcMessageType::ArenaDtor(void* object) {
  MlcMessageType* _this = reinterpret_cast< MlcMessageType* >(object);
  (void)_this;
}
void MlcMessageType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MlcMessageType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MlcMessageType& MlcMessageType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MlcMessageType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void MlcMessageType::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.MlcMessageType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MlcMessageType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.MlcMessageType.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MlcMessageType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.MlcMessageType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.MlcMessageType.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.MlcMessageType)
  return target;
}

size_t MlcMessageType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.MlcMessageType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MlcMessageType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.MlcMessageType)
  GOOGLE_DCHECK_NE(&from, this);
  const MlcMessageType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MlcMessageType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.MlcMessageType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.MlcMessageType)
    MergeFrom(*source);
  }
}

void MlcMessageType::MergeFrom(const MlcMessageType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.MlcMessageType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void MlcMessageType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.MlcMessageType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MlcMessageType::CopyFrom(const MlcMessageType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.MlcMessageType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MlcMessageType::IsInitialized() const {
  return true;
}

void MlcMessageType::InternalSwap(MlcMessageType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata MlcMessageType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Mode::InitAsDefaultInstance() {
}
class Mode::_Internal {
 public:
  using HasBits = decltype(std::declval<Mode>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Mode::Mode(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.Mode)
}
Mode::Mode(const Mode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.Mode)
}

void Mode::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Mode_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Mode::~Mode() {
  // @@protoc_insertion_point(destructor:mead101.avs.Mode)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Mode::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Mode::ArenaDtor(void* object) {
  Mode* _this = reinterpret_cast< Mode* >(object);
  (void)_this;
}
void Mode::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Mode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Mode& Mode::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Mode_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void Mode::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.Mode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Mode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.Mode.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Mode::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.Mode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.Mode.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.Mode)
  return target;
}

size_t Mode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.Mode)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Mode::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.Mode)
  GOOGLE_DCHECK_NE(&from, this);
  const Mode* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Mode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.Mode)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.Mode)
    MergeFrom(*source);
  }
}

void Mode::MergeFrom(const Mode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.Mode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void Mode::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.Mode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mode::CopyFrom(const Mode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.Mode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mode::IsInitialized() const {
  return true;
}

void Mode::InternalSwap(Mode* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Mode::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MoodType::InitAsDefaultInstance() {
}
class MoodType::_Internal {
 public:
  using HasBits = decltype(std::declval<MoodType>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MoodType::MoodType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.MoodType)
}
MoodType::MoodType(const MoodType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.MoodType)
}

void MoodType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MoodType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MoodType::~MoodType() {
  // @@protoc_insertion_point(destructor:mead101.avs.MoodType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MoodType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MoodType::ArenaDtor(void* object) {
  MoodType* _this = reinterpret_cast< MoodType* >(object);
  (void)_this;
}
void MoodType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MoodType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MoodType& MoodType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MoodType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void MoodType::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.MoodType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MoodType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.MoodType.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MoodType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.MoodType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.MoodType.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.MoodType)
  return target;
}

size_t MoodType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.MoodType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MoodType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.MoodType)
  GOOGLE_DCHECK_NE(&from, this);
  const MoodType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MoodType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.MoodType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.MoodType)
    MergeFrom(*source);
  }
}

void MoodType::MergeFrom(const MoodType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.MoodType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void MoodType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.MoodType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoodType::CopyFrom(const MoodType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.MoodType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoodType::IsInitialized() const {
  return true;
}

void MoodType::InternalSwap(MoodType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata MoodType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MusicalWorkContributorRole::InitAsDefaultInstance() {
}
class MusicalWorkContributorRole::_Internal {
 public:
  using HasBits = decltype(std::declval<MusicalWorkContributorRole>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MusicalWorkContributorRole::MusicalWorkContributorRole(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.MusicalWorkContributorRole)
}
MusicalWorkContributorRole::MusicalWorkContributorRole(const MusicalWorkContributorRole& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.MusicalWorkContributorRole)
}

void MusicalWorkContributorRole::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MusicalWorkContributorRole_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MusicalWorkContributorRole::~MusicalWorkContributorRole() {
  // @@protoc_insertion_point(destructor:mead101.avs.MusicalWorkContributorRole)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MusicalWorkContributorRole::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MusicalWorkContributorRole::ArenaDtor(void* object) {
  MusicalWorkContributorRole* _this = reinterpret_cast< MusicalWorkContributorRole* >(object);
  (void)_this;
}
void MusicalWorkContributorRole::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MusicalWorkContributorRole::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MusicalWorkContributorRole& MusicalWorkContributorRole::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MusicalWorkContributorRole_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void MusicalWorkContributorRole::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.MusicalWorkContributorRole)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MusicalWorkContributorRole::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.MusicalWorkContributorRole.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MusicalWorkContributorRole::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.MusicalWorkContributorRole)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.MusicalWorkContributorRole.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.MusicalWorkContributorRole)
  return target;
}

size_t MusicalWorkContributorRole::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.MusicalWorkContributorRole)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MusicalWorkContributorRole::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.MusicalWorkContributorRole)
  GOOGLE_DCHECK_NE(&from, this);
  const MusicalWorkContributorRole* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MusicalWorkContributorRole>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.MusicalWorkContributorRole)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.MusicalWorkContributorRole)
    MergeFrom(*source);
  }
}

void MusicalWorkContributorRole::MergeFrom(const MusicalWorkContributorRole& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.MusicalWorkContributorRole)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void MusicalWorkContributorRole::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.MusicalWorkContributorRole)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MusicalWorkContributorRole::CopyFrom(const MusicalWorkContributorRole& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.MusicalWorkContributorRole)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MusicalWorkContributorRole::IsInitialized() const {
  return true;
}

void MusicalWorkContributorRole::InternalSwap(MusicalWorkContributorRole* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata MusicalWorkContributorRole::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MusicalWorkType::InitAsDefaultInstance() {
}
class MusicalWorkType::_Internal {
 public:
  using HasBits = decltype(std::declval<MusicalWorkType>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MusicalWorkType::MusicalWorkType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.MusicalWorkType)
}
MusicalWorkType::MusicalWorkType(const MusicalWorkType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.MusicalWorkType)
}

void MusicalWorkType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MusicalWorkType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MusicalWorkType::~MusicalWorkType() {
  // @@protoc_insertion_point(destructor:mead101.avs.MusicalWorkType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MusicalWorkType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MusicalWorkType::ArenaDtor(void* object) {
  MusicalWorkType* _this = reinterpret_cast< MusicalWorkType* >(object);
  (void)_this;
}
void MusicalWorkType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MusicalWorkType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MusicalWorkType& MusicalWorkType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MusicalWorkType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void MusicalWorkType::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.MusicalWorkType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MusicalWorkType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.MusicalWorkType.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MusicalWorkType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.MusicalWorkType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.MusicalWorkType.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.MusicalWorkType)
  return target;
}

size_t MusicalWorkType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.MusicalWorkType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MusicalWorkType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.MusicalWorkType)
  GOOGLE_DCHECK_NE(&from, this);
  const MusicalWorkType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MusicalWorkType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.MusicalWorkType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.MusicalWorkType)
    MergeFrom(*source);
  }
}

void MusicalWorkType::MergeFrom(const MusicalWorkType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.MusicalWorkType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void MusicalWorkType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.MusicalWorkType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MusicalWorkType::CopyFrom(const MusicalWorkType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.MusicalWorkType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MusicalWorkType::IsInitialized() const {
  return true;
}

void MusicalWorkType::InternalSwap(MusicalWorkType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata MusicalWorkType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MwnlFileStatus::InitAsDefaultInstance() {
}
class MwnlFileStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<MwnlFileStatus>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MwnlFileStatus::MwnlFileStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.MwnlFileStatus)
}
MwnlFileStatus::MwnlFileStatus(const MwnlFileStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.MwnlFileStatus)
}

void MwnlFileStatus::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MwnlFileStatus_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MwnlFileStatus::~MwnlFileStatus() {
  // @@protoc_insertion_point(destructor:mead101.avs.MwnlFileStatus)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MwnlFileStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MwnlFileStatus::ArenaDtor(void* object) {
  MwnlFileStatus* _this = reinterpret_cast< MwnlFileStatus* >(object);
  (void)_this;
}
void MwnlFileStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MwnlFileStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MwnlFileStatus& MwnlFileStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MwnlFileStatus_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void MwnlFileStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.MwnlFileStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MwnlFileStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.MwnlFileStatus.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MwnlFileStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.MwnlFileStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.MwnlFileStatus.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.MwnlFileStatus)
  return target;
}

size_t MwnlFileStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.MwnlFileStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MwnlFileStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.MwnlFileStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const MwnlFileStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MwnlFileStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.MwnlFileStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.MwnlFileStatus)
    MergeFrom(*source);
  }
}

void MwnlFileStatus::MergeFrom(const MwnlFileStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.MwnlFileStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void MwnlFileStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.MwnlFileStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MwnlFileStatus::CopyFrom(const MwnlFileStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.MwnlFileStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MwnlFileStatus::IsInitialized() const {
  return true;
}

void MwnlFileStatus::InternalSwap(MwnlFileStatus* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata MwnlFileStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MwnlProposedActionType::InitAsDefaultInstance() {
}
class MwnlProposedActionType::_Internal {
 public:
  using HasBits = decltype(std::declval<MwnlProposedActionType>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MwnlProposedActionType::MwnlProposedActionType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.MwnlProposedActionType)
}
MwnlProposedActionType::MwnlProposedActionType(const MwnlProposedActionType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.MwnlProposedActionType)
}

void MwnlProposedActionType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MwnlProposedActionType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MwnlProposedActionType::~MwnlProposedActionType() {
  // @@protoc_insertion_point(destructor:mead101.avs.MwnlProposedActionType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MwnlProposedActionType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MwnlProposedActionType::ArenaDtor(void* object) {
  MwnlProposedActionType* _this = reinterpret_cast< MwnlProposedActionType* >(object);
  (void)_this;
}
void MwnlProposedActionType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MwnlProposedActionType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MwnlProposedActionType& MwnlProposedActionType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MwnlProposedActionType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void MwnlProposedActionType::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.MwnlProposedActionType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MwnlProposedActionType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.MwnlProposedActionType.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MwnlProposedActionType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.MwnlProposedActionType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.MwnlProposedActionType.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.MwnlProposedActionType)
  return target;
}

size_t MwnlProposedActionType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.MwnlProposedActionType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MwnlProposedActionType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.MwnlProposedActionType)
  GOOGLE_DCHECK_NE(&from, this);
  const MwnlProposedActionType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MwnlProposedActionType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.MwnlProposedActionType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.MwnlProposedActionType)
    MergeFrom(*source);
  }
}

void MwnlProposedActionType::MergeFrom(const MwnlProposedActionType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.MwnlProposedActionType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void MwnlProposedActionType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.MwnlProposedActionType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MwnlProposedActionType::CopyFrom(const MwnlProposedActionType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.MwnlProposedActionType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MwnlProposedActionType::IsInitialized() const {
  return true;
}

void MwnlProposedActionType::InternalSwap(MwnlProposedActionType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata MwnlProposedActionType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NewStudioRole::InitAsDefaultInstance() {
}
class NewStudioRole::_Internal {
 public:
  using HasBits = decltype(std::declval<NewStudioRole>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

NewStudioRole::NewStudioRole(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.NewStudioRole)
}
NewStudioRole::NewStudioRole(const NewStudioRole& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.NewStudioRole)
}

void NewStudioRole::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NewStudioRole_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

NewStudioRole::~NewStudioRole() {
  // @@protoc_insertion_point(destructor:mead101.avs.NewStudioRole)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NewStudioRole::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NewStudioRole::ArenaDtor(void* object) {
  NewStudioRole* _this = reinterpret_cast< NewStudioRole* >(object);
  (void)_this;
}
void NewStudioRole::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NewStudioRole::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NewStudioRole& NewStudioRole::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NewStudioRole_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void NewStudioRole::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.NewStudioRole)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NewStudioRole::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.NewStudioRole.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NewStudioRole::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.NewStudioRole)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.NewStudioRole.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.NewStudioRole)
  return target;
}

size_t NewStudioRole::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.NewStudioRole)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NewStudioRole::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.NewStudioRole)
  GOOGLE_DCHECK_NE(&from, this);
  const NewStudioRole* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NewStudioRole>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.NewStudioRole)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.NewStudioRole)
    MergeFrom(*source);
  }
}

void NewStudioRole::MergeFrom(const NewStudioRole& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.NewStudioRole)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void NewStudioRole::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.NewStudioRole)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewStudioRole::CopyFrom(const NewStudioRole& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.NewStudioRole)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewStudioRole::IsInitialized() const {
  return true;
}

void NewStudioRole::InternalSwap(NewStudioRole* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata NewStudioRole::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OperatingSystemType::InitAsDefaultInstance() {
}
class OperatingSystemType::_Internal {
 public:
  using HasBits = decltype(std::declval<OperatingSystemType>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

OperatingSystemType::OperatingSystemType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.OperatingSystemType)
}
OperatingSystemType::OperatingSystemType(const OperatingSystemType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.OperatingSystemType)
}

void OperatingSystemType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OperatingSystemType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

OperatingSystemType::~OperatingSystemType() {
  // @@protoc_insertion_point(destructor:mead101.avs.OperatingSystemType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OperatingSystemType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OperatingSystemType::ArenaDtor(void* object) {
  OperatingSystemType* _this = reinterpret_cast< OperatingSystemType* >(object);
  (void)_this;
}
void OperatingSystemType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OperatingSystemType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OperatingSystemType& OperatingSystemType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OperatingSystemType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void OperatingSystemType::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.OperatingSystemType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OperatingSystemType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.OperatingSystemType.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OperatingSystemType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.OperatingSystemType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.OperatingSystemType.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.OperatingSystemType)
  return target;
}

size_t OperatingSystemType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.OperatingSystemType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OperatingSystemType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.OperatingSystemType)
  GOOGLE_DCHECK_NE(&from, this);
  const OperatingSystemType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OperatingSystemType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.OperatingSystemType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.OperatingSystemType)
    MergeFrom(*source);
  }
}

void OperatingSystemType::MergeFrom(const OperatingSystemType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.OperatingSystemType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void OperatingSystemType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.OperatingSystemType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OperatingSystemType::CopyFrom(const OperatingSystemType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.OperatingSystemType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperatingSystemType::IsInitialized() const {
  return true;
}

void OperatingSystemType::InternalSwap(OperatingSystemType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata OperatingSystemType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PLineType::InitAsDefaultInstance() {
}
class PLineType::_Internal {
 public:
  using HasBits = decltype(std::declval<PLineType>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PLineType::PLineType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.PLineType)
}
PLineType::PLineType(const PLineType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.PLineType)
}

void PLineType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PLineType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PLineType::~PLineType() {
  // @@protoc_insertion_point(destructor:mead101.avs.PLineType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PLineType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PLineType::ArenaDtor(void* object) {
  PLineType* _this = reinterpret_cast< PLineType* >(object);
  (void)_this;
}
void PLineType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PLineType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PLineType& PLineType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PLineType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void PLineType::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.PLineType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PLineType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.PLineType.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PLineType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.PLineType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.PLineType.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.PLineType)
  return target;
}

size_t PLineType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.PLineType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PLineType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.PLineType)
  GOOGLE_DCHECK_NE(&from, this);
  const PLineType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PLineType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.PLineType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.PLineType)
    MergeFrom(*source);
  }
}

void PLineType::MergeFrom(const PLineType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.PLineType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void PLineType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.PLineType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PLineType::CopyFrom(const PLineType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.PLineType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PLineType::IsInitialized() const {
  return true;
}

void PLineType::InternalSwap(PLineType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata PLineType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ParentalWarningType::InitAsDefaultInstance() {
}
class ParentalWarningType::_Internal {
 public:
  using HasBits = decltype(std::declval<ParentalWarningType>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ParentalWarningType::ParentalWarningType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.ParentalWarningType)
}
ParentalWarningType::ParentalWarningType(const ParentalWarningType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.ParentalWarningType)
}

void ParentalWarningType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ParentalWarningType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ParentalWarningType::~ParentalWarningType() {
  // @@protoc_insertion_point(destructor:mead101.avs.ParentalWarningType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ParentalWarningType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ParentalWarningType::ArenaDtor(void* object) {
  ParentalWarningType* _this = reinterpret_cast< ParentalWarningType* >(object);
  (void)_this;
}
void ParentalWarningType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ParentalWarningType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ParentalWarningType& ParentalWarningType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ParentalWarningType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void ParentalWarningType::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.ParentalWarningType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ParentalWarningType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.ParentalWarningType.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ParentalWarningType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.ParentalWarningType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.ParentalWarningType.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.ParentalWarningType)
  return target;
}

size_t ParentalWarningType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.ParentalWarningType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ParentalWarningType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.ParentalWarningType)
  GOOGLE_DCHECK_NE(&from, this);
  const ParentalWarningType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ParentalWarningType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.ParentalWarningType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.ParentalWarningType)
    MergeFrom(*source);
  }
}

void ParentalWarningType::MergeFrom(const ParentalWarningType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.ParentalWarningType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void ParentalWarningType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.ParentalWarningType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParentalWarningType::CopyFrom(const ParentalWarningType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.ParentalWarningType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParentalWarningType::IsInitialized() const {
  return true;
}

void ParentalWarningType::InternalSwap(ParentalWarningType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ParentalWarningType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PartyRelationshipType::InitAsDefaultInstance() {
}
class PartyRelationshipType::_Internal {
 public:
  using HasBits = decltype(std::declval<PartyRelationshipType>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PartyRelationshipType::PartyRelationshipType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.PartyRelationshipType)
}
PartyRelationshipType::PartyRelationshipType(const PartyRelationshipType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.PartyRelationshipType)
}

void PartyRelationshipType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PartyRelationshipType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PartyRelationshipType::~PartyRelationshipType() {
  // @@protoc_insertion_point(destructor:mead101.avs.PartyRelationshipType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PartyRelationshipType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PartyRelationshipType::ArenaDtor(void* object) {
  PartyRelationshipType* _this = reinterpret_cast< PartyRelationshipType* >(object);
  (void)_this;
}
void PartyRelationshipType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PartyRelationshipType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PartyRelationshipType& PartyRelationshipType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PartyRelationshipType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void PartyRelationshipType::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.PartyRelationshipType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PartyRelationshipType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.PartyRelationshipType.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PartyRelationshipType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.PartyRelationshipType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.PartyRelationshipType.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.PartyRelationshipType)
  return target;
}

size_t PartyRelationshipType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.PartyRelationshipType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PartyRelationshipType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.PartyRelationshipType)
  GOOGLE_DCHECK_NE(&from, this);
  const PartyRelationshipType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PartyRelationshipType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.PartyRelationshipType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.PartyRelationshipType)
    MergeFrom(*source);
  }
}

void PartyRelationshipType::MergeFrom(const PartyRelationshipType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.PartyRelationshipType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void PartyRelationshipType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.PartyRelationshipType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PartyRelationshipType::CopyFrom(const PartyRelationshipType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.PartyRelationshipType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PartyRelationshipType::IsInitialized() const {
  return true;
}

void PartyRelationshipType::InternalSwap(PartyRelationshipType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata PartyRelationshipType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PercentageType::InitAsDefaultInstance() {
}
class PercentageType::_Internal {
 public:
  using HasBits = decltype(std::declval<PercentageType>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PercentageType::PercentageType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.PercentageType)
}
PercentageType::PercentageType(const PercentageType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.PercentageType)
}

void PercentageType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PercentageType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PercentageType::~PercentageType() {
  // @@protoc_insertion_point(destructor:mead101.avs.PercentageType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PercentageType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PercentageType::ArenaDtor(void* object) {
  PercentageType* _this = reinterpret_cast< PercentageType* >(object);
  (void)_this;
}
void PercentageType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PercentageType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PercentageType& PercentageType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PercentageType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void PercentageType::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.PercentageType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PercentageType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.PercentageType.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PercentageType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.PercentageType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.PercentageType.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.PercentageType)
  return target;
}

size_t PercentageType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.PercentageType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PercentageType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.PercentageType)
  GOOGLE_DCHECK_NE(&from, this);
  const PercentageType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PercentageType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.PercentageType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.PercentageType)
    MergeFrom(*source);
  }
}

void PercentageType::MergeFrom(const PercentageType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.PercentageType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void PercentageType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.PercentageType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PercentageType::CopyFrom(const PercentageType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.PercentageType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PercentageType::IsInitialized() const {
  return true;
}

void PercentageType::InternalSwap(PercentageType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata PercentageType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Period::InitAsDefaultInstance() {
}
class Period::_Internal {
 public:
  using HasBits = decltype(std::declval<Period>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Period::Period(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.Period)
}
Period::Period(const Period& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.Period)
}

void Period::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Period_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Period::~Period() {
  // @@protoc_insertion_point(destructor:mead101.avs.Period)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Period::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Period::ArenaDtor(void* object) {
  Period* _this = reinterpret_cast< Period* >(object);
  (void)_this;
}
void Period::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Period::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Period& Period::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Period_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void Period::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.Period)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Period::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.Period.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Period::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.Period)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.Period.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.Period)
  return target;
}

size_t Period::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.Period)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Period::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.Period)
  GOOGLE_DCHECK_NE(&from, this);
  const Period* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Period>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.Period)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.Period)
    MergeFrom(*source);
  }
}

void Period::MergeFrom(const Period& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.Period)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void Period::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.Period)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Period::CopyFrom(const Period& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.Period)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Period::IsInitialized() const {
  return true;
}

void Period::InternalSwap(Period* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Period::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PhysicalCarrierType::InitAsDefaultInstance() {
}
class PhysicalCarrierType::_Internal {
 public:
  using HasBits = decltype(std::declval<PhysicalCarrierType>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PhysicalCarrierType::PhysicalCarrierType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.PhysicalCarrierType)
}
PhysicalCarrierType::PhysicalCarrierType(const PhysicalCarrierType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.PhysicalCarrierType)
}

void PhysicalCarrierType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PhysicalCarrierType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PhysicalCarrierType::~PhysicalCarrierType() {
  // @@protoc_insertion_point(destructor:mead101.avs.PhysicalCarrierType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PhysicalCarrierType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PhysicalCarrierType::ArenaDtor(void* object) {
  PhysicalCarrierType* _this = reinterpret_cast< PhysicalCarrierType* >(object);
  (void)_this;
}
void PhysicalCarrierType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PhysicalCarrierType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PhysicalCarrierType& PhysicalCarrierType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PhysicalCarrierType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void PhysicalCarrierType::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.PhysicalCarrierType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PhysicalCarrierType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.PhysicalCarrierType.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PhysicalCarrierType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.PhysicalCarrierType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.PhysicalCarrierType.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.PhysicalCarrierType)
  return target;
}

size_t PhysicalCarrierType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.PhysicalCarrierType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PhysicalCarrierType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.PhysicalCarrierType)
  GOOGLE_DCHECK_NE(&from, this);
  const PhysicalCarrierType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PhysicalCarrierType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.PhysicalCarrierType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.PhysicalCarrierType)
    MergeFrom(*source);
  }
}

void PhysicalCarrierType::MergeFrom(const PhysicalCarrierType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.PhysicalCarrierType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void PhysicalCarrierType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.PhysicalCarrierType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PhysicalCarrierType::CopyFrom(const PhysicalCarrierType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.PhysicalCarrierType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PhysicalCarrierType::IsInitialized() const {
  return true;
}

void PhysicalCarrierType::InternalSwap(PhysicalCarrierType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata PhysicalCarrierType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PriceInformationType::InitAsDefaultInstance() {
}
class PriceInformationType::_Internal {
 public:
  using HasBits = decltype(std::declval<PriceInformationType>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PriceInformationType::PriceInformationType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.PriceInformationType)
}
PriceInformationType::PriceInformationType(const PriceInformationType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.PriceInformationType)
}

void PriceInformationType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PriceInformationType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PriceInformationType::~PriceInformationType() {
  // @@protoc_insertion_point(destructor:mead101.avs.PriceInformationType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PriceInformationType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PriceInformationType::ArenaDtor(void* object) {
  PriceInformationType* _this = reinterpret_cast< PriceInformationType* >(object);
  (void)_this;
}
void PriceInformationType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PriceInformationType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PriceInformationType& PriceInformationType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PriceInformationType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void PriceInformationType::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.PriceInformationType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PriceInformationType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.PriceInformationType.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PriceInformationType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.PriceInformationType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.PriceInformationType.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.PriceInformationType)
  return target;
}

size_t PriceInformationType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.PriceInformationType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PriceInformationType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.PriceInformationType)
  GOOGLE_DCHECK_NE(&from, this);
  const PriceInformationType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PriceInformationType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.PriceInformationType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.PriceInformationType)
    MergeFrom(*source);
  }
}

void PriceInformationType::MergeFrom(const PriceInformationType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.PriceInformationType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void PriceInformationType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.PriceInformationType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PriceInformationType::CopyFrom(const PriceInformationType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.PriceInformationType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PriceInformationType::IsInitialized() const {
  return true;
}

void PriceInformationType::InternalSwap(PriceInformationType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata PriceInformationType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ProductType::InitAsDefaultInstance() {
}
class ProductType::_Internal {
 public:
  using HasBits = decltype(std::declval<ProductType>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ProductType::ProductType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.ProductType)
}
ProductType::ProductType(const ProductType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.ProductType)
}

void ProductType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProductType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ProductType::~ProductType() {
  // @@protoc_insertion_point(destructor:mead101.avs.ProductType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProductType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ProductType::ArenaDtor(void* object) {
  ProductType* _this = reinterpret_cast< ProductType* >(object);
  (void)_this;
}
void ProductType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProductType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProductType& ProductType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProductType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void ProductType::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.ProductType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProductType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.ProductType.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProductType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.ProductType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.ProductType.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.ProductType)
  return target;
}

size_t ProductType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.ProductType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProductType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.ProductType)
  GOOGLE_DCHECK_NE(&from, this);
  const ProductType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProductType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.ProductType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.ProductType)
    MergeFrom(*source);
  }
}

void ProductType::MergeFrom(const ProductType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.ProductType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void ProductType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.ProductType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProductType::CopyFrom(const ProductType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.ProductType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProductType::IsInitialized() const {
  return true;
}

void ProductType::InternalSwap(ProductType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ProductType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ProfileId::InitAsDefaultInstance() {
}
class ProfileId::_Internal {
 public:
  using HasBits = decltype(std::declval<ProfileId>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ProfileId::ProfileId(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.ProfileId)
}
ProfileId::ProfileId(const ProfileId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.ProfileId)
}

void ProfileId::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProfileId_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ProfileId::~ProfileId() {
  // @@protoc_insertion_point(destructor:mead101.avs.ProfileId)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProfileId::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ProfileId::ArenaDtor(void* object) {
  ProfileId* _this = reinterpret_cast< ProfileId* >(object);
  (void)_this;
}
void ProfileId::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProfileId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProfileId& ProfileId::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProfileId_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void ProfileId::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.ProfileId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProfileId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.ProfileId.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProfileId::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.ProfileId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.ProfileId.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.ProfileId)
  return target;
}

size_t ProfileId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.ProfileId)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProfileId::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.ProfileId)
  GOOGLE_DCHECK_NE(&from, this);
  const ProfileId* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProfileId>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.ProfileId)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.ProfileId)
    MergeFrom(*source);
  }
}

void ProfileId::MergeFrom(const ProfileId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.ProfileId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void ProfileId::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.ProfileId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProfileId::CopyFrom(const ProfileId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.ProfileId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfileId::IsInitialized() const {
  return true;
}

void ProfileId::InternalSwap(ProfileId* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ProfileId::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Purpose::InitAsDefaultInstance() {
}
class Purpose::_Internal {
 public:
  using HasBits = decltype(std::declval<Purpose>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Purpose::Purpose(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.Purpose)
}
Purpose::Purpose(const Purpose& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.Purpose)
}

void Purpose::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Purpose_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Purpose::~Purpose() {
  // @@protoc_insertion_point(destructor:mead101.avs.Purpose)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Purpose::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Purpose::ArenaDtor(void* object) {
  Purpose* _this = reinterpret_cast< Purpose* >(object);
  (void)_this;
}
void Purpose::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Purpose::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Purpose& Purpose::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Purpose_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void Purpose::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.Purpose)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Purpose::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.Purpose.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Purpose::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.Purpose)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.Purpose.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.Purpose)
  return target;
}

size_t Purpose::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.Purpose)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Purpose::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.Purpose)
  GOOGLE_DCHECK_NE(&from, this);
  const Purpose* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Purpose>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.Purpose)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.Purpose)
    MergeFrom(*source);
  }
}

void Purpose::MergeFrom(const Purpose& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.Purpose)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void Purpose::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.Purpose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Purpose::CopyFrom(const Purpose& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.Purpose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Purpose::IsInitialized() const {
  return true;
}

void Purpose::InternalSwap(Purpose* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Purpose::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RatingAgency::InitAsDefaultInstance() {
}
class RatingAgency::_Internal {
 public:
  using HasBits = decltype(std::declval<RatingAgency>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

RatingAgency::RatingAgency(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.RatingAgency)
}
RatingAgency::RatingAgency(const RatingAgency& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.RatingAgency)
}

void RatingAgency::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RatingAgency_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RatingAgency::~RatingAgency() {
  // @@protoc_insertion_point(destructor:mead101.avs.RatingAgency)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RatingAgency::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RatingAgency::ArenaDtor(void* object) {
  RatingAgency* _this = reinterpret_cast< RatingAgency* >(object);
  (void)_this;
}
void RatingAgency::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RatingAgency::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RatingAgency& RatingAgency::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RatingAgency_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void RatingAgency::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.RatingAgency)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RatingAgency::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.RatingAgency.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RatingAgency::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.RatingAgency)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.RatingAgency.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.RatingAgency)
  return target;
}

size_t RatingAgency::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.RatingAgency)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RatingAgency::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.RatingAgency)
  GOOGLE_DCHECK_NE(&from, this);
  const RatingAgency* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RatingAgency>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.RatingAgency)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.RatingAgency)
    MergeFrom(*source);
  }
}

void RatingAgency::MergeFrom(const RatingAgency& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.RatingAgency)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void RatingAgency::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.RatingAgency)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RatingAgency::CopyFrom(const RatingAgency& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.RatingAgency)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RatingAgency::IsInitialized() const {
  return true;
}

void RatingAgency::InternalSwap(RatingAgency* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata RatingAgency::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RatingReason::InitAsDefaultInstance() {
}
class RatingReason::_Internal {
 public:
  using HasBits = decltype(std::declval<RatingReason>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

RatingReason::RatingReason(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.RatingReason)
}
RatingReason::RatingReason(const RatingReason& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.RatingReason)
}

void RatingReason::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RatingReason_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RatingReason::~RatingReason() {
  // @@protoc_insertion_point(destructor:mead101.avs.RatingReason)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RatingReason::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RatingReason::ArenaDtor(void* object) {
  RatingReason* _this = reinterpret_cast< RatingReason* >(object);
  (void)_this;
}
void RatingReason::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RatingReason::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RatingReason& RatingReason::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RatingReason_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void RatingReason::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.RatingReason)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RatingReason::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.RatingReason.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RatingReason::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.RatingReason)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.RatingReason.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.RatingReason)
  return target;
}

size_t RatingReason::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.RatingReason)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RatingReason::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.RatingReason)
  GOOGLE_DCHECK_NE(&from, this);
  const RatingReason* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RatingReason>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.RatingReason)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.RatingReason)
    MergeFrom(*source);
  }
}

void RatingReason::MergeFrom(const RatingReason& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.RatingReason)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void RatingReason::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.RatingReason)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RatingReason::CopyFrom(const RatingReason& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.RatingReason)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RatingReason::IsInitialized() const {
  return true;
}

void RatingReason::InternalSwap(RatingReason* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata RatingReason::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RecipientRevenueType::InitAsDefaultInstance() {
}
class RecipientRevenueType::_Internal {
 public:
  using HasBits = decltype(std::declval<RecipientRevenueType>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

RecipientRevenueType::RecipientRevenueType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.RecipientRevenueType)
}
RecipientRevenueType::RecipientRevenueType(const RecipientRevenueType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.RecipientRevenueType)
}

void RecipientRevenueType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RecipientRevenueType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RecipientRevenueType::~RecipientRevenueType() {
  // @@protoc_insertion_point(destructor:mead101.avs.RecipientRevenueType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RecipientRevenueType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RecipientRevenueType::ArenaDtor(void* object) {
  RecipientRevenueType* _this = reinterpret_cast< RecipientRevenueType* >(object);
  (void)_this;
}
void RecipientRevenueType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RecipientRevenueType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RecipientRevenueType& RecipientRevenueType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RecipientRevenueType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void RecipientRevenueType::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.RecipientRevenueType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecipientRevenueType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.RecipientRevenueType.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RecipientRevenueType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.RecipientRevenueType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.RecipientRevenueType.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.RecipientRevenueType)
  return target;
}

size_t RecipientRevenueType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.RecipientRevenueType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RecipientRevenueType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.RecipientRevenueType)
  GOOGLE_DCHECK_NE(&from, this);
  const RecipientRevenueType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RecipientRevenueType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.RecipientRevenueType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.RecipientRevenueType)
    MergeFrom(*source);
  }
}

void RecipientRevenueType::MergeFrom(const RecipientRevenueType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.RecipientRevenueType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void RecipientRevenueType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.RecipientRevenueType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecipientRevenueType::CopyFrom(const RecipientRevenueType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.RecipientRevenueType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecipientRevenueType::IsInitialized() const {
  return true;
}

void RecipientRevenueType::InternalSwap(RecipientRevenueType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata RecipientRevenueType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RecordingMode::InitAsDefaultInstance() {
}
class RecordingMode::_Internal {
 public:
  using HasBits = decltype(std::declval<RecordingMode>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

RecordingMode::RecordingMode(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.RecordingMode)
}
RecordingMode::RecordingMode(const RecordingMode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.RecordingMode)
}

void RecordingMode::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RecordingMode_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RecordingMode::~RecordingMode() {
  // @@protoc_insertion_point(destructor:mead101.avs.RecordingMode)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RecordingMode::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RecordingMode::ArenaDtor(void* object) {
  RecordingMode* _this = reinterpret_cast< RecordingMode* >(object);
  (void)_this;
}
void RecordingMode::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RecordingMode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RecordingMode& RecordingMode::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RecordingMode_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void RecordingMode::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.RecordingMode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecordingMode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.RecordingMode.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RecordingMode::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.RecordingMode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.RecordingMode.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.RecordingMode)
  return target;
}

size_t RecordingMode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.RecordingMode)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RecordingMode::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.RecordingMode)
  GOOGLE_DCHECK_NE(&from, this);
  const RecordingMode* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RecordingMode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.RecordingMode)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.RecordingMode)
    MergeFrom(*source);
  }
}

void RecordingMode::MergeFrom(const RecordingMode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.RecordingMode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void RecordingMode::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.RecordingMode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecordingMode::CopyFrom(const RecordingMode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.RecordingMode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordingMode::IsInitialized() const {
  return true;
}

void RecordingMode::InternalSwap(RecordingMode* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata RecordingMode::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RecordingPartType::InitAsDefaultInstance() {
}
class RecordingPartType::_Internal {
 public:
  using HasBits = decltype(std::declval<RecordingPartType>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

RecordingPartType::RecordingPartType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.RecordingPartType)
}
RecordingPartType::RecordingPartType(const RecordingPartType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.RecordingPartType)
}

void RecordingPartType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RecordingPartType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RecordingPartType::~RecordingPartType() {
  // @@protoc_insertion_point(destructor:mead101.avs.RecordingPartType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RecordingPartType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RecordingPartType::ArenaDtor(void* object) {
  RecordingPartType* _this = reinterpret_cast< RecordingPartType* >(object);
  (void)_this;
}
void RecordingPartType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RecordingPartType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RecordingPartType& RecordingPartType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RecordingPartType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void RecordingPartType::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.RecordingPartType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecordingPartType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.RecordingPartType.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RecordingPartType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.RecordingPartType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.RecordingPartType.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.RecordingPartType)
  return target;
}

size_t RecordingPartType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.RecordingPartType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RecordingPartType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.RecordingPartType)
  GOOGLE_DCHECK_NE(&from, this);
  const RecordingPartType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RecordingPartType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.RecordingPartType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.RecordingPartType)
    MergeFrom(*source);
  }
}

void RecordingPartType::MergeFrom(const RecordingPartType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.RecordingPartType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void RecordingPartType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.RecordingPartType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecordingPartType::CopyFrom(const RecordingPartType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.RecordingPartType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordingPartType::IsInitialized() const {
  return true;
}

void RecordingPartType::InternalSwap(RecordingPartType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata RecordingPartType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReferenceCreation::InitAsDefaultInstance() {
}
class ReferenceCreation::_Internal {
 public:
  using HasBits = decltype(std::declval<ReferenceCreation>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ReferenceCreation::ReferenceCreation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.ReferenceCreation)
}
ReferenceCreation::ReferenceCreation(const ReferenceCreation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.ReferenceCreation)
}

void ReferenceCreation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReferenceCreation_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ReferenceCreation::~ReferenceCreation() {
  // @@protoc_insertion_point(destructor:mead101.avs.ReferenceCreation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReferenceCreation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ReferenceCreation::ArenaDtor(void* object) {
  ReferenceCreation* _this = reinterpret_cast< ReferenceCreation* >(object);
  (void)_this;
}
void ReferenceCreation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReferenceCreation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReferenceCreation& ReferenceCreation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReferenceCreation_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void ReferenceCreation::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.ReferenceCreation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReferenceCreation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.ReferenceCreation.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReferenceCreation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.ReferenceCreation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.ReferenceCreation.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.ReferenceCreation)
  return target;
}

size_t ReferenceCreation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.ReferenceCreation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReferenceCreation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.ReferenceCreation)
  GOOGLE_DCHECK_NE(&from, this);
  const ReferenceCreation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReferenceCreation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.ReferenceCreation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.ReferenceCreation)
    MergeFrom(*source);
  }
}

void ReferenceCreation::MergeFrom(const ReferenceCreation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.ReferenceCreation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void ReferenceCreation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.ReferenceCreation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReferenceCreation::CopyFrom(const ReferenceCreation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.ReferenceCreation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReferenceCreation::IsInitialized() const {
  return true;
}

void ReferenceCreation::InternalSwap(ReferenceCreation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ReferenceCreation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReferenceUnit::InitAsDefaultInstance() {
}
class ReferenceUnit::_Internal {
 public:
  using HasBits = decltype(std::declval<ReferenceUnit>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ReferenceUnit::ReferenceUnit(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.ReferenceUnit)
}
ReferenceUnit::ReferenceUnit(const ReferenceUnit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.ReferenceUnit)
}

void ReferenceUnit::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReferenceUnit_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ReferenceUnit::~ReferenceUnit() {
  // @@protoc_insertion_point(destructor:mead101.avs.ReferenceUnit)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReferenceUnit::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ReferenceUnit::ArenaDtor(void* object) {
  ReferenceUnit* _this = reinterpret_cast< ReferenceUnit* >(object);
  (void)_this;
}
void ReferenceUnit::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReferenceUnit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReferenceUnit& ReferenceUnit::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReferenceUnit_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void ReferenceUnit::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.ReferenceUnit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReferenceUnit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.ReferenceUnit.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReferenceUnit::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.ReferenceUnit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.ReferenceUnit.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.ReferenceUnit)
  return target;
}

size_t ReferenceUnit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.ReferenceUnit)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReferenceUnit::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.ReferenceUnit)
  GOOGLE_DCHECK_NE(&from, this);
  const ReferenceUnit* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReferenceUnit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.ReferenceUnit)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.ReferenceUnit)
    MergeFrom(*source);
  }
}

void ReferenceUnit::MergeFrom(const ReferenceUnit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.ReferenceUnit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void ReferenceUnit::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.ReferenceUnit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReferenceUnit::CopyFrom(const ReferenceUnit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.ReferenceUnit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReferenceUnit::IsInitialized() const {
  return true;
}

void ReferenceUnit::InternalSwap(ReferenceUnit* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ReferenceUnit::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RegistrationStatus::InitAsDefaultInstance() {
}
class RegistrationStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<RegistrationStatus>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

RegistrationStatus::RegistrationStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.RegistrationStatus)
}
RegistrationStatus::RegistrationStatus(const RegistrationStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.RegistrationStatus)
}

void RegistrationStatus::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RegistrationStatus_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RegistrationStatus::~RegistrationStatus() {
  // @@protoc_insertion_point(destructor:mead101.avs.RegistrationStatus)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RegistrationStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RegistrationStatus::ArenaDtor(void* object) {
  RegistrationStatus* _this = reinterpret_cast< RegistrationStatus* >(object);
  (void)_this;
}
void RegistrationStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RegistrationStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RegistrationStatus& RegistrationStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RegistrationStatus_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void RegistrationStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.RegistrationStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegistrationStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.RegistrationStatus.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RegistrationStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.RegistrationStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.RegistrationStatus.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.RegistrationStatus)
  return target;
}

size_t RegistrationStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.RegistrationStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegistrationStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.RegistrationStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const RegistrationStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RegistrationStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.RegistrationStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.RegistrationStatus)
    MergeFrom(*source);
  }
}

void RegistrationStatus::MergeFrom(const RegistrationStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.RegistrationStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void RegistrationStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.RegistrationStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegistrationStatus::CopyFrom(const RegistrationStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.RegistrationStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegistrationStatus::IsInitialized() const {
  return true;
}

void RegistrationStatus::InternalSwap(RegistrationStatus* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata RegistrationStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RelatedResourceType::InitAsDefaultInstance() {
}
class RelatedResourceType::_Internal {
 public:
  using HasBits = decltype(std::declval<RelatedResourceType>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

RelatedResourceType::RelatedResourceType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.RelatedResourceType)
}
RelatedResourceType::RelatedResourceType(const RelatedResourceType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.RelatedResourceType)
}

void RelatedResourceType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RelatedResourceType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RelatedResourceType::~RelatedResourceType() {
  // @@protoc_insertion_point(destructor:mead101.avs.RelatedResourceType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RelatedResourceType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RelatedResourceType::ArenaDtor(void* object) {
  RelatedResourceType* _this = reinterpret_cast< RelatedResourceType* >(object);
  (void)_this;
}
void RelatedResourceType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RelatedResourceType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RelatedResourceType& RelatedResourceType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RelatedResourceType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void RelatedResourceType::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.RelatedResourceType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RelatedResourceType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.RelatedResourceType.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RelatedResourceType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.RelatedResourceType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.RelatedResourceType.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.RelatedResourceType)
  return target;
}

size_t RelatedResourceType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.RelatedResourceType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RelatedResourceType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.RelatedResourceType)
  GOOGLE_DCHECK_NE(&from, this);
  const RelatedResourceType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RelatedResourceType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.RelatedResourceType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.RelatedResourceType)
    MergeFrom(*source);
  }
}

void RelatedResourceType::MergeFrom(const RelatedResourceType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.RelatedResourceType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void RelatedResourceType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.RelatedResourceType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RelatedResourceType::CopyFrom(const RelatedResourceType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.RelatedResourceType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RelatedResourceType::IsInitialized() const {
  return true;
}

void RelatedResourceType::InternalSwap(RelatedResourceType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata RelatedResourceType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RelationalRelator::InitAsDefaultInstance() {
}
class RelationalRelator::_Internal {
 public:
  using HasBits = decltype(std::declval<RelationalRelator>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

RelationalRelator::RelationalRelator(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.RelationalRelator)
}
RelationalRelator::RelationalRelator(const RelationalRelator& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.RelationalRelator)
}

void RelationalRelator::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RelationalRelator_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RelationalRelator::~RelationalRelator() {
  // @@protoc_insertion_point(destructor:mead101.avs.RelationalRelator)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RelationalRelator::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RelationalRelator::ArenaDtor(void* object) {
  RelationalRelator* _this = reinterpret_cast< RelationalRelator* >(object);
  (void)_this;
}
void RelationalRelator::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RelationalRelator::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RelationalRelator& RelationalRelator::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RelationalRelator_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void RelationalRelator::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.RelationalRelator)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RelationalRelator::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.RelationalRelator.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RelationalRelator::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.RelationalRelator)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.RelationalRelator.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.RelationalRelator)
  return target;
}

size_t RelationalRelator::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.RelationalRelator)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RelationalRelator::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.RelationalRelator)
  GOOGLE_DCHECK_NE(&from, this);
  const RelationalRelator* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RelationalRelator>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.RelationalRelator)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.RelationalRelator)
    MergeFrom(*source);
  }
}

void RelationalRelator::MergeFrom(const RelationalRelator& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.RelationalRelator)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void RelationalRelator::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.RelationalRelator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RelationalRelator::CopyFrom(const RelationalRelator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.RelationalRelator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RelationalRelator::IsInitialized() const {
  return true;
}

void RelationalRelator::InternalSwap(RelationalRelator* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata RelationalRelator::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReleaseProfileVariantVersionId::InitAsDefaultInstance() {
}
class ReleaseProfileVariantVersionId::_Internal {
 public:
  using HasBits = decltype(std::declval<ReleaseProfileVariantVersionId>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ReleaseProfileVariantVersionId::ReleaseProfileVariantVersionId(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.ReleaseProfileVariantVersionId)
}
ReleaseProfileVariantVersionId::ReleaseProfileVariantVersionId(const ReleaseProfileVariantVersionId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.ReleaseProfileVariantVersionId)
}

void ReleaseProfileVariantVersionId::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReleaseProfileVariantVersionId_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ReleaseProfileVariantVersionId::~ReleaseProfileVariantVersionId() {
  // @@protoc_insertion_point(destructor:mead101.avs.ReleaseProfileVariantVersionId)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReleaseProfileVariantVersionId::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ReleaseProfileVariantVersionId::ArenaDtor(void* object) {
  ReleaseProfileVariantVersionId* _this = reinterpret_cast< ReleaseProfileVariantVersionId* >(object);
  (void)_this;
}
void ReleaseProfileVariantVersionId::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReleaseProfileVariantVersionId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReleaseProfileVariantVersionId& ReleaseProfileVariantVersionId::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReleaseProfileVariantVersionId_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void ReleaseProfileVariantVersionId::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.ReleaseProfileVariantVersionId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReleaseProfileVariantVersionId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.ReleaseProfileVariantVersionId.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReleaseProfileVariantVersionId::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.ReleaseProfileVariantVersionId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.ReleaseProfileVariantVersionId.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.ReleaseProfileVariantVersionId)
  return target;
}

size_t ReleaseProfileVariantVersionId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.ReleaseProfileVariantVersionId)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReleaseProfileVariantVersionId::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.ReleaseProfileVariantVersionId)
  GOOGLE_DCHECK_NE(&from, this);
  const ReleaseProfileVariantVersionId* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReleaseProfileVariantVersionId>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.ReleaseProfileVariantVersionId)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.ReleaseProfileVariantVersionId)
    MergeFrom(*source);
  }
}

void ReleaseProfileVariantVersionId::MergeFrom(const ReleaseProfileVariantVersionId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.ReleaseProfileVariantVersionId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void ReleaseProfileVariantVersionId::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.ReleaseProfileVariantVersionId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReleaseProfileVariantVersionId::CopyFrom(const ReleaseProfileVariantVersionId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.ReleaseProfileVariantVersionId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReleaseProfileVariantVersionId::IsInitialized() const {
  return true;
}

void ReleaseProfileVariantVersionId::InternalSwap(ReleaseProfileVariantVersionId* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ReleaseProfileVariantVersionId::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReleaseProfileVersionId::InitAsDefaultInstance() {
}
class ReleaseProfileVersionId::_Internal {
 public:
  using HasBits = decltype(std::declval<ReleaseProfileVersionId>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ReleaseProfileVersionId::ReleaseProfileVersionId(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.ReleaseProfileVersionId)
}
ReleaseProfileVersionId::ReleaseProfileVersionId(const ReleaseProfileVersionId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.ReleaseProfileVersionId)
}

void ReleaseProfileVersionId::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReleaseProfileVersionId_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ReleaseProfileVersionId::~ReleaseProfileVersionId() {
  // @@protoc_insertion_point(destructor:mead101.avs.ReleaseProfileVersionId)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReleaseProfileVersionId::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ReleaseProfileVersionId::ArenaDtor(void* object) {
  ReleaseProfileVersionId* _this = reinterpret_cast< ReleaseProfileVersionId* >(object);
  (void)_this;
}
void ReleaseProfileVersionId::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReleaseProfileVersionId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReleaseProfileVersionId& ReleaseProfileVersionId::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReleaseProfileVersionId_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void ReleaseProfileVersionId::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.ReleaseProfileVersionId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReleaseProfileVersionId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.ReleaseProfileVersionId.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReleaseProfileVersionId::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.ReleaseProfileVersionId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.ReleaseProfileVersionId.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.ReleaseProfileVersionId)
  return target;
}

size_t ReleaseProfileVersionId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.ReleaseProfileVersionId)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReleaseProfileVersionId::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.ReleaseProfileVersionId)
  GOOGLE_DCHECK_NE(&from, this);
  const ReleaseProfileVersionId* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReleaseProfileVersionId>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.ReleaseProfileVersionId)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.ReleaseProfileVersionId)
    MergeFrom(*source);
  }
}

void ReleaseProfileVersionId::MergeFrom(const ReleaseProfileVersionId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.ReleaseProfileVersionId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void ReleaseProfileVersionId::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.ReleaseProfileVersionId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReleaseProfileVersionId::CopyFrom(const ReleaseProfileVersionId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.ReleaseProfileVersionId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReleaseProfileVersionId::IsInitialized() const {
  return true;
}

void ReleaseProfileVersionId::InternalSwap(ReleaseProfileVersionId* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ReleaseProfileVersionId::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReleaseRelationshipType::InitAsDefaultInstance() {
}
class ReleaseRelationshipType::_Internal {
 public:
  using HasBits = decltype(std::declval<ReleaseRelationshipType>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ReleaseRelationshipType::ReleaseRelationshipType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.ReleaseRelationshipType)
}
ReleaseRelationshipType::ReleaseRelationshipType(const ReleaseRelationshipType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.ReleaseRelationshipType)
}

void ReleaseRelationshipType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReleaseRelationshipType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ReleaseRelationshipType::~ReleaseRelationshipType() {
  // @@protoc_insertion_point(destructor:mead101.avs.ReleaseRelationshipType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReleaseRelationshipType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ReleaseRelationshipType::ArenaDtor(void* object) {
  ReleaseRelationshipType* _this = reinterpret_cast< ReleaseRelationshipType* >(object);
  (void)_this;
}
void ReleaseRelationshipType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReleaseRelationshipType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReleaseRelationshipType& ReleaseRelationshipType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReleaseRelationshipType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void ReleaseRelationshipType::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.ReleaseRelationshipType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReleaseRelationshipType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.ReleaseRelationshipType.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReleaseRelationshipType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.ReleaseRelationshipType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.ReleaseRelationshipType.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.ReleaseRelationshipType)
  return target;
}

size_t ReleaseRelationshipType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.ReleaseRelationshipType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReleaseRelationshipType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.ReleaseRelationshipType)
  GOOGLE_DCHECK_NE(&from, this);
  const ReleaseRelationshipType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReleaseRelationshipType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.ReleaseRelationshipType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.ReleaseRelationshipType)
    MergeFrom(*source);
  }
}

void ReleaseRelationshipType::MergeFrom(const ReleaseRelationshipType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.ReleaseRelationshipType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void ReleaseRelationshipType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.ReleaseRelationshipType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReleaseRelationshipType::CopyFrom(const ReleaseRelationshipType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.ReleaseRelationshipType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReleaseRelationshipType::IsInitialized() const {
  return true;
}

void ReleaseRelationshipType::InternalSwap(ReleaseRelationshipType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ReleaseRelationshipType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReleaseResourceType::InitAsDefaultInstance() {
}
class ReleaseResourceType::_Internal {
 public:
  using HasBits = decltype(std::declval<ReleaseResourceType>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ReleaseResourceType::ReleaseResourceType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.ReleaseResourceType)
}
ReleaseResourceType::ReleaseResourceType(const ReleaseResourceType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.ReleaseResourceType)
}

void ReleaseResourceType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReleaseResourceType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ReleaseResourceType::~ReleaseResourceType() {
  // @@protoc_insertion_point(destructor:mead101.avs.ReleaseResourceType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReleaseResourceType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ReleaseResourceType::ArenaDtor(void* object) {
  ReleaseResourceType* _this = reinterpret_cast< ReleaseResourceType* >(object);
  (void)_this;
}
void ReleaseResourceType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReleaseResourceType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReleaseResourceType& ReleaseResourceType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReleaseResourceType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void ReleaseResourceType::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.ReleaseResourceType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReleaseResourceType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.ReleaseResourceType.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReleaseResourceType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.ReleaseResourceType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.ReleaseResourceType.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.ReleaseResourceType)
  return target;
}

size_t ReleaseResourceType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.ReleaseResourceType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReleaseResourceType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.ReleaseResourceType)
  GOOGLE_DCHECK_NE(&from, this);
  const ReleaseResourceType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReleaseResourceType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.ReleaseResourceType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.ReleaseResourceType)
    MergeFrom(*source);
  }
}

void ReleaseResourceType::MergeFrom(const ReleaseResourceType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.ReleaseResourceType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void ReleaseResourceType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.ReleaseResourceType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReleaseResourceType::CopyFrom(const ReleaseResourceType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.ReleaseResourceType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReleaseResourceType::IsInitialized() const {
  return true;
}

void ReleaseResourceType::InternalSwap(ReleaseResourceType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ReleaseResourceType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReleaseType::InitAsDefaultInstance() {
}
class ReleaseType::_Internal {
 public:
  using HasBits = decltype(std::declval<ReleaseType>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ReleaseType::ReleaseType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.ReleaseType)
}
ReleaseType::ReleaseType(const ReleaseType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.ReleaseType)
}

void ReleaseType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReleaseType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ReleaseType::~ReleaseType() {
  // @@protoc_insertion_point(destructor:mead101.avs.ReleaseType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReleaseType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ReleaseType::ArenaDtor(void* object) {
  ReleaseType* _this = reinterpret_cast< ReleaseType* >(object);
  (void)_this;
}
void ReleaseType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReleaseType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReleaseType& ReleaseType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReleaseType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void ReleaseType::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.ReleaseType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReleaseType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.ReleaseType.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReleaseType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.ReleaseType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.ReleaseType.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.ReleaseType)
  return target;
}

size_t ReleaseType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.ReleaseType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReleaseType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.ReleaseType)
  GOOGLE_DCHECK_NE(&from, this);
  const ReleaseType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReleaseType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.ReleaseType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.ReleaseType)
    MergeFrom(*source);
  }
}

void ReleaseType::MergeFrom(const ReleaseType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.ReleaseType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void ReleaseType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.ReleaseType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReleaseType::CopyFrom(const ReleaseType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.ReleaseType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReleaseType::IsInitialized() const {
  return true;
}

void ReleaseType::InternalSwap(ReleaseType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ReleaseType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReleaseType_ERN4::InitAsDefaultInstance() {
}
class ReleaseType_ERN4::_Internal {
 public:
  using HasBits = decltype(std::declval<ReleaseType_ERN4>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ReleaseType_ERN4::ReleaseType_ERN4(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.ReleaseType_ERN4)
}
ReleaseType_ERN4::ReleaseType_ERN4(const ReleaseType_ERN4& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.ReleaseType_ERN4)
}

void ReleaseType_ERN4::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReleaseType_ERN4_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ReleaseType_ERN4::~ReleaseType_ERN4() {
  // @@protoc_insertion_point(destructor:mead101.avs.ReleaseType_ERN4)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReleaseType_ERN4::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ReleaseType_ERN4::ArenaDtor(void* object) {
  ReleaseType_ERN4* _this = reinterpret_cast< ReleaseType_ERN4* >(object);
  (void)_this;
}
void ReleaseType_ERN4::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReleaseType_ERN4::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReleaseType_ERN4& ReleaseType_ERN4::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReleaseType_ERN4_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void ReleaseType_ERN4::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.ReleaseType_ERN4)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReleaseType_ERN4::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.ReleaseType_ERN4.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReleaseType_ERN4::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.ReleaseType_ERN4)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.ReleaseType_ERN4.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.ReleaseType_ERN4)
  return target;
}

size_t ReleaseType_ERN4::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.ReleaseType_ERN4)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReleaseType_ERN4::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.ReleaseType_ERN4)
  GOOGLE_DCHECK_NE(&from, this);
  const ReleaseType_ERN4* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReleaseType_ERN4>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.ReleaseType_ERN4)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.ReleaseType_ERN4)
    MergeFrom(*source);
  }
}

void ReleaseType_ERN4::MergeFrom(const ReleaseType_ERN4& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.ReleaseType_ERN4)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void ReleaseType_ERN4::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.ReleaseType_ERN4)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReleaseType_ERN4::CopyFrom(const ReleaseType_ERN4& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.ReleaseType_ERN4)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReleaseType_ERN4::IsInitialized() const {
  return true;
}

void ReleaseType_ERN4::InternalSwap(ReleaseType_ERN4* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ReleaseType_ERN4::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReleaseType_MCNOTIF::InitAsDefaultInstance() {
}
class ReleaseType_MCNOTIF::_Internal {
 public:
  using HasBits = decltype(std::declval<ReleaseType_MCNOTIF>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ReleaseType_MCNOTIF::ReleaseType_MCNOTIF(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.ReleaseType_MCNOTIF)
}
ReleaseType_MCNOTIF::ReleaseType_MCNOTIF(const ReleaseType_MCNOTIF& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.ReleaseType_MCNOTIF)
}

void ReleaseType_MCNOTIF::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReleaseType_MCNOTIF_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ReleaseType_MCNOTIF::~ReleaseType_MCNOTIF() {
  // @@protoc_insertion_point(destructor:mead101.avs.ReleaseType_MCNOTIF)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReleaseType_MCNOTIF::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ReleaseType_MCNOTIF::ArenaDtor(void* object) {
  ReleaseType_MCNOTIF* _this = reinterpret_cast< ReleaseType_MCNOTIF* >(object);
  (void)_this;
}
void ReleaseType_MCNOTIF::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReleaseType_MCNOTIF::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReleaseType_MCNOTIF& ReleaseType_MCNOTIF::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReleaseType_MCNOTIF_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void ReleaseType_MCNOTIF::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.ReleaseType_MCNOTIF)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReleaseType_MCNOTIF::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.ReleaseType_MCNOTIF.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReleaseType_MCNOTIF::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.ReleaseType_MCNOTIF)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.ReleaseType_MCNOTIF.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.ReleaseType_MCNOTIF)
  return target;
}

size_t ReleaseType_MCNOTIF::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.ReleaseType_MCNOTIF)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReleaseType_MCNOTIF::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.ReleaseType_MCNOTIF)
  GOOGLE_DCHECK_NE(&from, this);
  const ReleaseType_MCNOTIF* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReleaseType_MCNOTIF>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.ReleaseType_MCNOTIF)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.ReleaseType_MCNOTIF)
    MergeFrom(*source);
  }
}

void ReleaseType_MCNOTIF::MergeFrom(const ReleaseType_MCNOTIF& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.ReleaseType_MCNOTIF)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void ReleaseType_MCNOTIF::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.ReleaseType_MCNOTIF)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReleaseType_MCNOTIF::CopyFrom(const ReleaseType_MCNOTIF& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.ReleaseType_MCNOTIF)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReleaseType_MCNOTIF::IsInitialized() const {
  return true;
}

void ReleaseType_MCNOTIF::InternalSwap(ReleaseType_MCNOTIF* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ReleaseType_MCNOTIF::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RequestMessagePurpose::InitAsDefaultInstance() {
}
class RequestMessagePurpose::_Internal {
 public:
  using HasBits = decltype(std::declval<RequestMessagePurpose>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

RequestMessagePurpose::RequestMessagePurpose(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.RequestMessagePurpose)
}
RequestMessagePurpose::RequestMessagePurpose(const RequestMessagePurpose& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.RequestMessagePurpose)
}

void RequestMessagePurpose::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RequestMessagePurpose_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RequestMessagePurpose::~RequestMessagePurpose() {
  // @@protoc_insertion_point(destructor:mead101.avs.RequestMessagePurpose)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RequestMessagePurpose::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RequestMessagePurpose::ArenaDtor(void* object) {
  RequestMessagePurpose* _this = reinterpret_cast< RequestMessagePurpose* >(object);
  (void)_this;
}
void RequestMessagePurpose::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RequestMessagePurpose::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RequestMessagePurpose& RequestMessagePurpose::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RequestMessagePurpose_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void RequestMessagePurpose::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.RequestMessagePurpose)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestMessagePurpose::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.RequestMessagePurpose.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RequestMessagePurpose::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.RequestMessagePurpose)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.RequestMessagePurpose.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.RequestMessagePurpose)
  return target;
}

size_t RequestMessagePurpose::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.RequestMessagePurpose)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestMessagePurpose::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.RequestMessagePurpose)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestMessagePurpose* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RequestMessagePurpose>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.RequestMessagePurpose)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.RequestMessagePurpose)
    MergeFrom(*source);
  }
}

void RequestMessagePurpose::MergeFrom(const RequestMessagePurpose& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.RequestMessagePurpose)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void RequestMessagePurpose::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.RequestMessagePurpose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestMessagePurpose::CopyFrom(const RequestMessagePurpose& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.RequestMessagePurpose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestMessagePurpose::IsInitialized() const {
  return true;
}

void RequestMessagePurpose::InternalSwap(RequestMessagePurpose* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestMessagePurpose::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RequestReason::InitAsDefaultInstance() {
}
class RequestReason::_Internal {
 public:
  using HasBits = decltype(std::declval<RequestReason>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

RequestReason::RequestReason(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.RequestReason)
}
RequestReason::RequestReason(const RequestReason& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.RequestReason)
}

void RequestReason::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RequestReason_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RequestReason::~RequestReason() {
  // @@protoc_insertion_point(destructor:mead101.avs.RequestReason)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RequestReason::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RequestReason::ArenaDtor(void* object) {
  RequestReason* _this = reinterpret_cast< RequestReason* >(object);
  (void)_this;
}
void RequestReason::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RequestReason::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RequestReason& RequestReason::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RequestReason_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void RequestReason::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.RequestReason)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestReason::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.RequestReason.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RequestReason::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.RequestReason)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.RequestReason.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.RequestReason)
  return target;
}

size_t RequestReason::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.RequestReason)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestReason::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.RequestReason)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestReason* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RequestReason>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.RequestReason)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.RequestReason)
    MergeFrom(*source);
  }
}

void RequestReason::MergeFrom(const RequestReason& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.RequestReason)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void RequestReason::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.RequestReason)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestReason::CopyFrom(const RequestReason& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.RequestReason)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestReason::IsInitialized() const {
  return true;
}

void RequestReason::InternalSwap(RequestReason* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestReason::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResourceContributorRole::InitAsDefaultInstance() {
}
class ResourceContributorRole::_Internal {
 public:
  using HasBits = decltype(std::declval<ResourceContributorRole>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ResourceContributorRole::ResourceContributorRole(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.ResourceContributorRole)
}
ResourceContributorRole::ResourceContributorRole(const ResourceContributorRole& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.ResourceContributorRole)
}

void ResourceContributorRole::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ResourceContributorRole_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ResourceContributorRole::~ResourceContributorRole() {
  // @@protoc_insertion_point(destructor:mead101.avs.ResourceContributorRole)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ResourceContributorRole::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ResourceContributorRole::ArenaDtor(void* object) {
  ResourceContributorRole* _this = reinterpret_cast< ResourceContributorRole* >(object);
  (void)_this;
}
void ResourceContributorRole::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResourceContributorRole::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResourceContributorRole& ResourceContributorRole::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResourceContributorRole_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void ResourceContributorRole::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.ResourceContributorRole)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResourceContributorRole::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.ResourceContributorRole.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResourceContributorRole::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.ResourceContributorRole)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.ResourceContributorRole.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.ResourceContributorRole)
  return target;
}

size_t ResourceContributorRole::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.ResourceContributorRole)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResourceContributorRole::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.ResourceContributorRole)
  GOOGLE_DCHECK_NE(&from, this);
  const ResourceContributorRole* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResourceContributorRole>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.ResourceContributorRole)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.ResourceContributorRole)
    MergeFrom(*source);
  }
}

void ResourceContributorRole::MergeFrom(const ResourceContributorRole& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.ResourceContributorRole)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void ResourceContributorRole::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.ResourceContributorRole)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResourceContributorRole::CopyFrom(const ResourceContributorRole& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.ResourceContributorRole)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourceContributorRole::IsInitialized() const {
  return true;
}

void ResourceContributorRole::InternalSwap(ResourceContributorRole* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ResourceContributorRole::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResourceGroupType::InitAsDefaultInstance() {
}
class ResourceGroupType::_Internal {
 public:
  using HasBits = decltype(std::declval<ResourceGroupType>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ResourceGroupType::ResourceGroupType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.ResourceGroupType)
}
ResourceGroupType::ResourceGroupType(const ResourceGroupType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.ResourceGroupType)
}

void ResourceGroupType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ResourceGroupType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ResourceGroupType::~ResourceGroupType() {
  // @@protoc_insertion_point(destructor:mead101.avs.ResourceGroupType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ResourceGroupType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ResourceGroupType::ArenaDtor(void* object) {
  ResourceGroupType* _this = reinterpret_cast< ResourceGroupType* >(object);
  (void)_this;
}
void ResourceGroupType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResourceGroupType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResourceGroupType& ResourceGroupType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResourceGroupType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void ResourceGroupType::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.ResourceGroupType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResourceGroupType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.ResourceGroupType.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResourceGroupType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.ResourceGroupType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.ResourceGroupType.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.ResourceGroupType)
  return target;
}

size_t ResourceGroupType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.ResourceGroupType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResourceGroupType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.ResourceGroupType)
  GOOGLE_DCHECK_NE(&from, this);
  const ResourceGroupType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResourceGroupType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.ResourceGroupType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.ResourceGroupType)
    MergeFrom(*source);
  }
}

void ResourceGroupType::MergeFrom(const ResourceGroupType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.ResourceGroupType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void ResourceGroupType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.ResourceGroupType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResourceGroupType::CopyFrom(const ResourceGroupType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.ResourceGroupType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourceGroupType::IsInitialized() const {
  return true;
}

void ResourceGroupType::InternalSwap(ResourceGroupType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ResourceGroupType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResourceRelationshipType::InitAsDefaultInstance() {
}
class ResourceRelationshipType::_Internal {
 public:
  using HasBits = decltype(std::declval<ResourceRelationshipType>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ResourceRelationshipType::ResourceRelationshipType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.ResourceRelationshipType)
}
ResourceRelationshipType::ResourceRelationshipType(const ResourceRelationshipType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.ResourceRelationshipType)
}

void ResourceRelationshipType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ResourceRelationshipType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ResourceRelationshipType::~ResourceRelationshipType() {
  // @@protoc_insertion_point(destructor:mead101.avs.ResourceRelationshipType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ResourceRelationshipType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ResourceRelationshipType::ArenaDtor(void* object) {
  ResourceRelationshipType* _this = reinterpret_cast< ResourceRelationshipType* >(object);
  (void)_this;
}
void ResourceRelationshipType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResourceRelationshipType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResourceRelationshipType& ResourceRelationshipType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResourceRelationshipType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void ResourceRelationshipType::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.ResourceRelationshipType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResourceRelationshipType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.ResourceRelationshipType.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResourceRelationshipType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.ResourceRelationshipType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.ResourceRelationshipType.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.ResourceRelationshipType)
  return target;
}

size_t ResourceRelationshipType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.ResourceRelationshipType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResourceRelationshipType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.ResourceRelationshipType)
  GOOGLE_DCHECK_NE(&from, this);
  const ResourceRelationshipType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResourceRelationshipType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.ResourceRelationshipType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.ResourceRelationshipType)
    MergeFrom(*source);
  }
}

void ResourceRelationshipType::MergeFrom(const ResourceRelationshipType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.ResourceRelationshipType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void ResourceRelationshipType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.ResourceRelationshipType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResourceRelationshipType::CopyFrom(const ResourceRelationshipType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.ResourceRelationshipType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourceRelationshipType::IsInitialized() const {
  return true;
}

void ResourceRelationshipType::InternalSwap(ResourceRelationshipType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ResourceRelationshipType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResourceType::InitAsDefaultInstance() {
}
class ResourceType::_Internal {
 public:
  using HasBits = decltype(std::declval<ResourceType>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ResourceType::ResourceType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.ResourceType)
}
ResourceType::ResourceType(const ResourceType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.ResourceType)
}

void ResourceType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ResourceType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ResourceType::~ResourceType() {
  // @@protoc_insertion_point(destructor:mead101.avs.ResourceType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ResourceType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ResourceType::ArenaDtor(void* object) {
  ResourceType* _this = reinterpret_cast< ResourceType* >(object);
  (void)_this;
}
void ResourceType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResourceType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResourceType& ResourceType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResourceType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void ResourceType::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.ResourceType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResourceType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.ResourceType.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResourceType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.ResourceType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.ResourceType.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.ResourceType)
  return target;
}

size_t ResourceType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.ResourceType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResourceType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.ResourceType)
  GOOGLE_DCHECK_NE(&from, this);
  const ResourceType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResourceType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.ResourceType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.ResourceType)
    MergeFrom(*source);
  }
}

void ResourceType::MergeFrom(const ResourceType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.ResourceType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void ResourceType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.ResourceType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResourceType::CopyFrom(const ResourceType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.ResourceType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourceType::IsInitialized() const {
  return true;
}

void ResourceType::InternalSwap(ResourceType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ResourceType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResourceType_MCNOTIF::InitAsDefaultInstance() {
}
class ResourceType_MCNOTIF::_Internal {
 public:
  using HasBits = decltype(std::declval<ResourceType_MCNOTIF>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ResourceType_MCNOTIF::ResourceType_MCNOTIF(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.ResourceType_MCNOTIF)
}
ResourceType_MCNOTIF::ResourceType_MCNOTIF(const ResourceType_MCNOTIF& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.ResourceType_MCNOTIF)
}

void ResourceType_MCNOTIF::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ResourceType_MCNOTIF_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ResourceType_MCNOTIF::~ResourceType_MCNOTIF() {
  // @@protoc_insertion_point(destructor:mead101.avs.ResourceType_MCNOTIF)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ResourceType_MCNOTIF::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ResourceType_MCNOTIF::ArenaDtor(void* object) {
  ResourceType_MCNOTIF* _this = reinterpret_cast< ResourceType_MCNOTIF* >(object);
  (void)_this;
}
void ResourceType_MCNOTIF::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResourceType_MCNOTIF::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResourceType_MCNOTIF& ResourceType_MCNOTIF::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResourceType_MCNOTIF_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void ResourceType_MCNOTIF::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.ResourceType_MCNOTIF)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResourceType_MCNOTIF::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.ResourceType_MCNOTIF.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResourceType_MCNOTIF::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.ResourceType_MCNOTIF)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.ResourceType_MCNOTIF.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.ResourceType_MCNOTIF)
  return target;
}

size_t ResourceType_MCNOTIF::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.ResourceType_MCNOTIF)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResourceType_MCNOTIF::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.ResourceType_MCNOTIF)
  GOOGLE_DCHECK_NE(&from, this);
  const ResourceType_MCNOTIF* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResourceType_MCNOTIF>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.ResourceType_MCNOTIF)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.ResourceType_MCNOTIF)
    MergeFrom(*source);
  }
}

void ResourceType_MCNOTIF::MergeFrom(const ResourceType_MCNOTIF& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.ResourceType_MCNOTIF)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void ResourceType_MCNOTIF::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.ResourceType_MCNOTIF)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResourceType_MCNOTIF::CopyFrom(const ResourceType_MCNOTIF& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.ResourceType_MCNOTIF)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourceType_MCNOTIF::IsInitialized() const {
  return true;
}

void ResourceType_MCNOTIF::InternalSwap(ResourceType_MCNOTIF* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ResourceType_MCNOTIF::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResourceWorkRelationshipType::InitAsDefaultInstance() {
}
class ResourceWorkRelationshipType::_Internal {
 public:
  using HasBits = decltype(std::declval<ResourceWorkRelationshipType>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ResourceWorkRelationshipType::ResourceWorkRelationshipType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.ResourceWorkRelationshipType)
}
ResourceWorkRelationshipType::ResourceWorkRelationshipType(const ResourceWorkRelationshipType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.ResourceWorkRelationshipType)
}

void ResourceWorkRelationshipType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ResourceWorkRelationshipType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ResourceWorkRelationshipType::~ResourceWorkRelationshipType() {
  // @@protoc_insertion_point(destructor:mead101.avs.ResourceWorkRelationshipType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ResourceWorkRelationshipType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ResourceWorkRelationshipType::ArenaDtor(void* object) {
  ResourceWorkRelationshipType* _this = reinterpret_cast< ResourceWorkRelationshipType* >(object);
  (void)_this;
}
void ResourceWorkRelationshipType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResourceWorkRelationshipType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResourceWorkRelationshipType& ResourceWorkRelationshipType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResourceWorkRelationshipType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void ResourceWorkRelationshipType::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.ResourceWorkRelationshipType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResourceWorkRelationshipType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.ResourceWorkRelationshipType.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResourceWorkRelationshipType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.ResourceWorkRelationshipType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.ResourceWorkRelationshipType.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.ResourceWorkRelationshipType)
  return target;
}

size_t ResourceWorkRelationshipType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.ResourceWorkRelationshipType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResourceWorkRelationshipType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.ResourceWorkRelationshipType)
  GOOGLE_DCHECK_NE(&from, this);
  const ResourceWorkRelationshipType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResourceWorkRelationshipType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.ResourceWorkRelationshipType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.ResourceWorkRelationshipType)
    MergeFrom(*source);
  }
}

void ResourceWorkRelationshipType::MergeFrom(const ResourceWorkRelationshipType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.ResourceWorkRelationshipType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void ResourceWorkRelationshipType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.ResourceWorkRelationshipType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResourceWorkRelationshipType::CopyFrom(const ResourceWorkRelationshipType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.ResourceWorkRelationshipType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourceWorkRelationshipType::IsInitialized() const {
  return true;
}

void ResourceWorkRelationshipType::InternalSwap(ResourceWorkRelationshipType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ResourceWorkRelationshipType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RevenueSourceType::InitAsDefaultInstance() {
}
class RevenueSourceType::_Internal {
 public:
  using HasBits = decltype(std::declval<RevenueSourceType>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

RevenueSourceType::RevenueSourceType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.RevenueSourceType)
}
RevenueSourceType::RevenueSourceType(const RevenueSourceType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.RevenueSourceType)
}

void RevenueSourceType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RevenueSourceType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RevenueSourceType::~RevenueSourceType() {
  // @@protoc_insertion_point(destructor:mead101.avs.RevenueSourceType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RevenueSourceType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RevenueSourceType::ArenaDtor(void* object) {
  RevenueSourceType* _this = reinterpret_cast< RevenueSourceType* >(object);
  (void)_this;
}
void RevenueSourceType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RevenueSourceType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RevenueSourceType& RevenueSourceType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RevenueSourceType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void RevenueSourceType::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.RevenueSourceType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RevenueSourceType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.RevenueSourceType.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RevenueSourceType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.RevenueSourceType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.RevenueSourceType.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.RevenueSourceType)
  return target;
}

size_t RevenueSourceType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.RevenueSourceType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RevenueSourceType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.RevenueSourceType)
  GOOGLE_DCHECK_NE(&from, this);
  const RevenueSourceType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RevenueSourceType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.RevenueSourceType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.RevenueSourceType)
    MergeFrom(*source);
  }
}

void RevenueSourceType::MergeFrom(const RevenueSourceType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.RevenueSourceType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void RevenueSourceType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.RevenueSourceType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RevenueSourceType::CopyFrom(const RevenueSourceType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.RevenueSourceType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RevenueSourceType::IsInitialized() const {
  return true;
}

void RevenueSourceType::InternalSwap(RevenueSourceType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata RevenueSourceType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RightShareType::InitAsDefaultInstance() {
}
class RightShareType::_Internal {
 public:
  using HasBits = decltype(std::declval<RightShareType>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

RightShareType::RightShareType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.RightShareType)
}
RightShareType::RightShareType(const RightShareType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.RightShareType)
}

void RightShareType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RightShareType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RightShareType::~RightShareType() {
  // @@protoc_insertion_point(destructor:mead101.avs.RightShareType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RightShareType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RightShareType::ArenaDtor(void* object) {
  RightShareType* _this = reinterpret_cast< RightShareType* >(object);
  (void)_this;
}
void RightShareType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RightShareType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RightShareType& RightShareType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RightShareType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void RightShareType::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.RightShareType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RightShareType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.RightShareType.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RightShareType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.RightShareType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.RightShareType.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.RightShareType)
  return target;
}

size_t RightShareType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.RightShareType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RightShareType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.RightShareType)
  GOOGLE_DCHECK_NE(&from, this);
  const RightShareType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RightShareType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.RightShareType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.RightShareType)
    MergeFrom(*source);
  }
}

void RightShareType::MergeFrom(const RightShareType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.RightShareType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void RightShareType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.RightShareType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RightShareType::CopyFrom(const RightShareType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.RightShareType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RightShareType::IsInitialized() const {
  return true;
}

void RightShareType::InternalSwap(RightShareType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata RightShareType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RightsClaimPolicyType::InitAsDefaultInstance() {
}
class RightsClaimPolicyType::_Internal {
 public:
  using HasBits = decltype(std::declval<RightsClaimPolicyType>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

RightsClaimPolicyType::RightsClaimPolicyType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.RightsClaimPolicyType)
}
RightsClaimPolicyType::RightsClaimPolicyType(const RightsClaimPolicyType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.RightsClaimPolicyType)
}

void RightsClaimPolicyType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RightsClaimPolicyType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RightsClaimPolicyType::~RightsClaimPolicyType() {
  // @@protoc_insertion_point(destructor:mead101.avs.RightsClaimPolicyType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RightsClaimPolicyType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RightsClaimPolicyType::ArenaDtor(void* object) {
  RightsClaimPolicyType* _this = reinterpret_cast< RightsClaimPolicyType* >(object);
  (void)_this;
}
void RightsClaimPolicyType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RightsClaimPolicyType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RightsClaimPolicyType& RightsClaimPolicyType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RightsClaimPolicyType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void RightsClaimPolicyType::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.RightsClaimPolicyType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RightsClaimPolicyType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.RightsClaimPolicyType.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RightsClaimPolicyType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.RightsClaimPolicyType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.RightsClaimPolicyType.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.RightsClaimPolicyType)
  return target;
}

size_t RightsClaimPolicyType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.RightsClaimPolicyType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RightsClaimPolicyType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.RightsClaimPolicyType)
  GOOGLE_DCHECK_NE(&from, this);
  const RightsClaimPolicyType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RightsClaimPolicyType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.RightsClaimPolicyType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.RightsClaimPolicyType)
    MergeFrom(*source);
  }
}

void RightsClaimPolicyType::MergeFrom(const RightsClaimPolicyType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.RightsClaimPolicyType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void RightsClaimPolicyType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.RightsClaimPolicyType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RightsClaimPolicyType::CopyFrom(const RightsClaimPolicyType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.RightsClaimPolicyType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RightsClaimPolicyType::IsInitialized() const {
  return true;
}

void RightsClaimPolicyType::InternalSwap(RightsClaimPolicyType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata RightsClaimPolicyType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RightsClaimStatus::InitAsDefaultInstance() {
}
class RightsClaimStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<RightsClaimStatus>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

RightsClaimStatus::RightsClaimStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.RightsClaimStatus)
}
RightsClaimStatus::RightsClaimStatus(const RightsClaimStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.RightsClaimStatus)
}

void RightsClaimStatus::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RightsClaimStatus_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RightsClaimStatus::~RightsClaimStatus() {
  // @@protoc_insertion_point(destructor:mead101.avs.RightsClaimStatus)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RightsClaimStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RightsClaimStatus::ArenaDtor(void* object) {
  RightsClaimStatus* _this = reinterpret_cast< RightsClaimStatus* >(object);
  (void)_this;
}
void RightsClaimStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RightsClaimStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RightsClaimStatus& RightsClaimStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RightsClaimStatus_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void RightsClaimStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.RightsClaimStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RightsClaimStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.RightsClaimStatus.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RightsClaimStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.RightsClaimStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.RightsClaimStatus.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.RightsClaimStatus)
  return target;
}

size_t RightsClaimStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.RightsClaimStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RightsClaimStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.RightsClaimStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const RightsClaimStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RightsClaimStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.RightsClaimStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.RightsClaimStatus)
    MergeFrom(*source);
  }
}

void RightsClaimStatus::MergeFrom(const RightsClaimStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.RightsClaimStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void RightsClaimStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.RightsClaimStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RightsClaimStatus::CopyFrom(const RightsClaimStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.RightsClaimStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RightsClaimStatus::IsInitialized() const {
  return true;
}

void RightsClaimStatus::InternalSwap(RightsClaimStatus* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata RightsClaimStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RightsControllerRole::InitAsDefaultInstance() {
}
class RightsControllerRole::_Internal {
 public:
  using HasBits = decltype(std::declval<RightsControllerRole>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

RightsControllerRole::RightsControllerRole(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.RightsControllerRole)
}
RightsControllerRole::RightsControllerRole(const RightsControllerRole& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.RightsControllerRole)
}

void RightsControllerRole::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RightsControllerRole_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RightsControllerRole::~RightsControllerRole() {
  // @@protoc_insertion_point(destructor:mead101.avs.RightsControllerRole)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RightsControllerRole::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RightsControllerRole::ArenaDtor(void* object) {
  RightsControllerRole* _this = reinterpret_cast< RightsControllerRole* >(object);
  (void)_this;
}
void RightsControllerRole::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RightsControllerRole::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RightsControllerRole& RightsControllerRole::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RightsControllerRole_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void RightsControllerRole::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.RightsControllerRole)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RightsControllerRole::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.RightsControllerRole.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RightsControllerRole::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.RightsControllerRole)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.RightsControllerRole.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.RightsControllerRole)
  return target;
}

size_t RightsControllerRole::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.RightsControllerRole)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RightsControllerRole::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.RightsControllerRole)
  GOOGLE_DCHECK_NE(&from, this);
  const RightsControllerRole* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RightsControllerRole>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.RightsControllerRole)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.RightsControllerRole)
    MergeFrom(*source);
  }
}

void RightsControllerRole::MergeFrom(const RightsControllerRole& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.RightsControllerRole)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void RightsControllerRole::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.RightsControllerRole)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RightsControllerRole::CopyFrom(const RightsControllerRole& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.RightsControllerRole)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RightsControllerRole::IsInitialized() const {
  return true;
}

void RightsControllerRole::InternalSwap(RightsControllerRole* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata RightsControllerRole::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RightsControllerType::InitAsDefaultInstance() {
}
class RightsControllerType::_Internal {
 public:
  using HasBits = decltype(std::declval<RightsControllerType>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

RightsControllerType::RightsControllerType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.RightsControllerType)
}
RightsControllerType::RightsControllerType(const RightsControllerType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.RightsControllerType)
}

void RightsControllerType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RightsControllerType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RightsControllerType::~RightsControllerType() {
  // @@protoc_insertion_point(destructor:mead101.avs.RightsControllerType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RightsControllerType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RightsControllerType::ArenaDtor(void* object) {
  RightsControllerType* _this = reinterpret_cast< RightsControllerType* >(object);
  (void)_this;
}
void RightsControllerType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RightsControllerType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RightsControllerType& RightsControllerType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RightsControllerType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void RightsControllerType::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.RightsControllerType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RightsControllerType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.RightsControllerType.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RightsControllerType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.RightsControllerType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.RightsControllerType.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.RightsControllerType)
  return target;
}

size_t RightsControllerType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.RightsControllerType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RightsControllerType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.RightsControllerType)
  GOOGLE_DCHECK_NE(&from, this);
  const RightsControllerType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RightsControllerType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.RightsControllerType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.RightsControllerType)
    MergeFrom(*source);
  }
}

void RightsControllerType::MergeFrom(const RightsControllerType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.RightsControllerType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void RightsControllerType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.RightsControllerType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RightsControllerType::CopyFrom(const RightsControllerType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.RightsControllerType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RightsControllerType::IsInitialized() const {
  return true;
}

void RightsControllerType::InternalSwap(RightsControllerType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata RightsControllerType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RightsCoverage::InitAsDefaultInstance() {
}
class RightsCoverage::_Internal {
 public:
  using HasBits = decltype(std::declval<RightsCoverage>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

RightsCoverage::RightsCoverage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.RightsCoverage)
}
RightsCoverage::RightsCoverage(const RightsCoverage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.RightsCoverage)
}

void RightsCoverage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RightsCoverage_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RightsCoverage::~RightsCoverage() {
  // @@protoc_insertion_point(destructor:mead101.avs.RightsCoverage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RightsCoverage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RightsCoverage::ArenaDtor(void* object) {
  RightsCoverage* _this = reinterpret_cast< RightsCoverage* >(object);
  (void)_this;
}
void RightsCoverage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RightsCoverage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RightsCoverage& RightsCoverage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RightsCoverage_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void RightsCoverage::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.RightsCoverage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RightsCoverage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.RightsCoverage.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RightsCoverage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.RightsCoverage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.RightsCoverage.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.RightsCoverage)
  return target;
}

size_t RightsCoverage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.RightsCoverage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RightsCoverage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.RightsCoverage)
  GOOGLE_DCHECK_NE(&from, this);
  const RightsCoverage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RightsCoverage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.RightsCoverage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.RightsCoverage)
    MergeFrom(*source);
  }
}

void RightsCoverage::MergeFrom(const RightsCoverage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.RightsCoverage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void RightsCoverage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.RightsCoverage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RightsCoverage::CopyFrom(const RightsCoverage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.RightsCoverage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RightsCoverage::IsInitialized() const {
  return true;
}

void RightsCoverage::InternalSwap(RightsCoverage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata RightsCoverage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RightsCoverage_MWNL::InitAsDefaultInstance() {
}
class RightsCoverage_MWNL::_Internal {
 public:
  using HasBits = decltype(std::declval<RightsCoverage_MWNL>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

RightsCoverage_MWNL::RightsCoverage_MWNL(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.RightsCoverage_MWNL)
}
RightsCoverage_MWNL::RightsCoverage_MWNL(const RightsCoverage_MWNL& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.RightsCoverage_MWNL)
}

void RightsCoverage_MWNL::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RightsCoverage_MWNL_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RightsCoverage_MWNL::~RightsCoverage_MWNL() {
  // @@protoc_insertion_point(destructor:mead101.avs.RightsCoverage_MWNL)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RightsCoverage_MWNL::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RightsCoverage_MWNL::ArenaDtor(void* object) {
  RightsCoverage_MWNL* _this = reinterpret_cast< RightsCoverage_MWNL* >(object);
  (void)_this;
}
void RightsCoverage_MWNL::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RightsCoverage_MWNL::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RightsCoverage_MWNL& RightsCoverage_MWNL::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RightsCoverage_MWNL_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void RightsCoverage_MWNL::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.RightsCoverage_MWNL)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RightsCoverage_MWNL::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.RightsCoverage_MWNL.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RightsCoverage_MWNL::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.RightsCoverage_MWNL)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.RightsCoverage_MWNL.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.RightsCoverage_MWNL)
  return target;
}

size_t RightsCoverage_MWNL::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.RightsCoverage_MWNL)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RightsCoverage_MWNL::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.RightsCoverage_MWNL)
  GOOGLE_DCHECK_NE(&from, this);
  const RightsCoverage_MWNL* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RightsCoverage_MWNL>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.RightsCoverage_MWNL)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.RightsCoverage_MWNL)
    MergeFrom(*source);
  }
}

void RightsCoverage_MWNL::MergeFrom(const RightsCoverage_MWNL& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.RightsCoverage_MWNL)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void RightsCoverage_MWNL::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.RightsCoverage_MWNL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RightsCoverage_MWNL::CopyFrom(const RightsCoverage_MWNL& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.RightsCoverage_MWNL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RightsCoverage_MWNL::IsInitialized() const {
  return true;
}

void RightsCoverage_MWNL::InternalSwap(RightsCoverage_MWNL* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata RightsCoverage_MWNL::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RightsStatementProfile::InitAsDefaultInstance() {
}
class RightsStatementProfile::_Internal {
 public:
  using HasBits = decltype(std::declval<RightsStatementProfile>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

RightsStatementProfile::RightsStatementProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.RightsStatementProfile)
}
RightsStatementProfile::RightsStatementProfile(const RightsStatementProfile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.RightsStatementProfile)
}

void RightsStatementProfile::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RightsStatementProfile_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RightsStatementProfile::~RightsStatementProfile() {
  // @@protoc_insertion_point(destructor:mead101.avs.RightsStatementProfile)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RightsStatementProfile::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RightsStatementProfile::ArenaDtor(void* object) {
  RightsStatementProfile* _this = reinterpret_cast< RightsStatementProfile* >(object);
  (void)_this;
}
void RightsStatementProfile::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RightsStatementProfile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RightsStatementProfile& RightsStatementProfile::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RightsStatementProfile_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void RightsStatementProfile::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.RightsStatementProfile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RightsStatementProfile::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.RightsStatementProfile.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RightsStatementProfile::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.RightsStatementProfile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.RightsStatementProfile.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.RightsStatementProfile)
  return target;
}

size_t RightsStatementProfile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.RightsStatementProfile)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RightsStatementProfile::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.RightsStatementProfile)
  GOOGLE_DCHECK_NE(&from, this);
  const RightsStatementProfile* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RightsStatementProfile>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.RightsStatementProfile)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.RightsStatementProfile)
    MergeFrom(*source);
  }
}

void RightsStatementProfile::MergeFrom(const RightsStatementProfile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.RightsStatementProfile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void RightsStatementProfile::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.RightsStatementProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RightsStatementProfile::CopyFrom(const RightsStatementProfile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.RightsStatementProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RightsStatementProfile::IsInitialized() const {
  return true;
}

void RightsStatementProfile::InternalSwap(RightsStatementProfile* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata RightsStatementProfile::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RootChordNote::InitAsDefaultInstance() {
}
class RootChordNote::_Internal {
 public:
  using HasBits = decltype(std::declval<RootChordNote>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

RootChordNote::RootChordNote(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.RootChordNote)
}
RootChordNote::RootChordNote(const RootChordNote& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.RootChordNote)
}

void RootChordNote::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RootChordNote_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RootChordNote::~RootChordNote() {
  // @@protoc_insertion_point(destructor:mead101.avs.RootChordNote)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RootChordNote::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RootChordNote::ArenaDtor(void* object) {
  RootChordNote* _this = reinterpret_cast< RootChordNote* >(object);
  (void)_this;
}
void RootChordNote::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RootChordNote::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RootChordNote& RootChordNote::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RootChordNote_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void RootChordNote::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.RootChordNote)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RootChordNote::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.RootChordNote.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RootChordNote::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.RootChordNote)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.RootChordNote.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.RootChordNote)
  return target;
}

size_t RootChordNote::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.RootChordNote)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RootChordNote::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.RootChordNote)
  GOOGLE_DCHECK_NE(&from, this);
  const RootChordNote* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RootChordNote>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.RootChordNote)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.RootChordNote)
    MergeFrom(*source);
  }
}

void RootChordNote::MergeFrom(const RootChordNote& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.RootChordNote)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void RootChordNote::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.RootChordNote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RootChordNote::CopyFrom(const RootChordNote& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.RootChordNote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RootChordNote::IsInitialized() const {
  return true;
}

void RootChordNote::InternalSwap(RootChordNote* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata RootChordNote::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RootChordQuality::InitAsDefaultInstance() {
}
class RootChordQuality::_Internal {
 public:
  using HasBits = decltype(std::declval<RootChordQuality>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

RootChordQuality::RootChordQuality(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.RootChordQuality)
}
RootChordQuality::RootChordQuality(const RootChordQuality& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.RootChordQuality)
}

void RootChordQuality::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RootChordQuality_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RootChordQuality::~RootChordQuality() {
  // @@protoc_insertion_point(destructor:mead101.avs.RootChordQuality)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RootChordQuality::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RootChordQuality::ArenaDtor(void* object) {
  RootChordQuality* _this = reinterpret_cast< RootChordQuality* >(object);
  (void)_this;
}
void RootChordQuality::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RootChordQuality::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RootChordQuality& RootChordQuality::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RootChordQuality_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void RootChordQuality::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.RootChordQuality)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RootChordQuality::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.RootChordQuality.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RootChordQuality::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.RootChordQuality)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.RootChordQuality.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.RootChordQuality)
  return target;
}

size_t RootChordQuality::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.RootChordQuality)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RootChordQuality::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.RootChordQuality)
  GOOGLE_DCHECK_NE(&from, this);
  const RootChordQuality* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RootChordQuality>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.RootChordQuality)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.RootChordQuality)
    MergeFrom(*source);
  }
}

void RootChordQuality::MergeFrom(const RootChordQuality& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.RootChordQuality)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void RootChordQuality::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.RootChordQuality)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RootChordQuality::CopyFrom(const RootChordQuality& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.RootChordQuality)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RootChordQuality::IsInitialized() const {
  return true;
}

void RootChordQuality::InternalSwap(RootChordQuality* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata RootChordQuality::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RoyaltyRateCalculationType::InitAsDefaultInstance() {
}
class RoyaltyRateCalculationType::_Internal {
 public:
  using HasBits = decltype(std::declval<RoyaltyRateCalculationType>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

RoyaltyRateCalculationType::RoyaltyRateCalculationType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.RoyaltyRateCalculationType)
}
RoyaltyRateCalculationType::RoyaltyRateCalculationType(const RoyaltyRateCalculationType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.RoyaltyRateCalculationType)
}

void RoyaltyRateCalculationType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RoyaltyRateCalculationType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RoyaltyRateCalculationType::~RoyaltyRateCalculationType() {
  // @@protoc_insertion_point(destructor:mead101.avs.RoyaltyRateCalculationType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RoyaltyRateCalculationType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RoyaltyRateCalculationType::ArenaDtor(void* object) {
  RoyaltyRateCalculationType* _this = reinterpret_cast< RoyaltyRateCalculationType* >(object);
  (void)_this;
}
void RoyaltyRateCalculationType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RoyaltyRateCalculationType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoyaltyRateCalculationType& RoyaltyRateCalculationType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RoyaltyRateCalculationType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void RoyaltyRateCalculationType::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.RoyaltyRateCalculationType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoyaltyRateCalculationType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.RoyaltyRateCalculationType.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RoyaltyRateCalculationType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.RoyaltyRateCalculationType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.RoyaltyRateCalculationType.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.RoyaltyRateCalculationType)
  return target;
}

size_t RoyaltyRateCalculationType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.RoyaltyRateCalculationType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoyaltyRateCalculationType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.RoyaltyRateCalculationType)
  GOOGLE_DCHECK_NE(&from, this);
  const RoyaltyRateCalculationType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RoyaltyRateCalculationType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.RoyaltyRateCalculationType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.RoyaltyRateCalculationType)
    MergeFrom(*source);
  }
}

void RoyaltyRateCalculationType::MergeFrom(const RoyaltyRateCalculationType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.RoyaltyRateCalculationType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void RoyaltyRateCalculationType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.RoyaltyRateCalculationType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoyaltyRateCalculationType::CopyFrom(const RoyaltyRateCalculationType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.RoyaltyRateCalculationType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoyaltyRateCalculationType::IsInitialized() const {
  return true;
}

void RoyaltyRateCalculationType::InternalSwap(RoyaltyRateCalculationType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata RoyaltyRateCalculationType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RoyaltyRateType::InitAsDefaultInstance() {
}
class RoyaltyRateType::_Internal {
 public:
  using HasBits = decltype(std::declval<RoyaltyRateType>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

RoyaltyRateType::RoyaltyRateType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.RoyaltyRateType)
}
RoyaltyRateType::RoyaltyRateType(const RoyaltyRateType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.RoyaltyRateType)
}

void RoyaltyRateType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RoyaltyRateType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RoyaltyRateType::~RoyaltyRateType() {
  // @@protoc_insertion_point(destructor:mead101.avs.RoyaltyRateType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RoyaltyRateType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RoyaltyRateType::ArenaDtor(void* object) {
  RoyaltyRateType* _this = reinterpret_cast< RoyaltyRateType* >(object);
  (void)_this;
}
void RoyaltyRateType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RoyaltyRateType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoyaltyRateType& RoyaltyRateType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RoyaltyRateType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void RoyaltyRateType::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.RoyaltyRateType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoyaltyRateType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.RoyaltyRateType.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RoyaltyRateType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.RoyaltyRateType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.RoyaltyRateType.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.RoyaltyRateType)
  return target;
}

size_t RoyaltyRateType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.RoyaltyRateType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoyaltyRateType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.RoyaltyRateType)
  GOOGLE_DCHECK_NE(&from, this);
  const RoyaltyRateType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RoyaltyRateType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.RoyaltyRateType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.RoyaltyRateType)
    MergeFrom(*source);
  }
}

void RoyaltyRateType::MergeFrom(const RoyaltyRateType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.RoyaltyRateType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void RoyaltyRateType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.RoyaltyRateType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoyaltyRateType::CopyFrom(const RoyaltyRateType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.RoyaltyRateType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoyaltyRateType::IsInitialized() const {
  return true;
}

void RoyaltyRateType::InternalSwap(RoyaltyRateType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata RoyaltyRateType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SessionType::InitAsDefaultInstance() {
}
class SessionType::_Internal {
 public:
  using HasBits = decltype(std::declval<SessionType>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SessionType::SessionType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.SessionType)
}
SessionType::SessionType(const SessionType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.SessionType)
}

void SessionType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SessionType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SessionType::~SessionType() {
  // @@protoc_insertion_point(destructor:mead101.avs.SessionType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SessionType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SessionType::ArenaDtor(void* object) {
  SessionType* _this = reinterpret_cast< SessionType* >(object);
  (void)_this;
}
void SessionType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SessionType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SessionType& SessionType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SessionType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void SessionType::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.SessionType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SessionType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.SessionType.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SessionType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.SessionType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.SessionType.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.SessionType)
  return target;
}

size_t SessionType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.SessionType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SessionType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.SessionType)
  GOOGLE_DCHECK_NE(&from, this);
  const SessionType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SessionType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.SessionType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.SessionType)
    MergeFrom(*source);
  }
}

void SessionType::MergeFrom(const SessionType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.SessionType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void SessionType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.SessionType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SessionType::CopyFrom(const SessionType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.SessionType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionType::IsInitialized() const {
  return true;
}

void SessionType::InternalSwap(SessionType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata SessionType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SheetMusicCodecType::InitAsDefaultInstance() {
}
class SheetMusicCodecType::_Internal {
 public:
  using HasBits = decltype(std::declval<SheetMusicCodecType>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SheetMusicCodecType::SheetMusicCodecType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.SheetMusicCodecType)
}
SheetMusicCodecType::SheetMusicCodecType(const SheetMusicCodecType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.SheetMusicCodecType)
}

void SheetMusicCodecType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SheetMusicCodecType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SheetMusicCodecType::~SheetMusicCodecType() {
  // @@protoc_insertion_point(destructor:mead101.avs.SheetMusicCodecType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SheetMusicCodecType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SheetMusicCodecType::ArenaDtor(void* object) {
  SheetMusicCodecType* _this = reinterpret_cast< SheetMusicCodecType* >(object);
  (void)_this;
}
void SheetMusicCodecType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SheetMusicCodecType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SheetMusicCodecType& SheetMusicCodecType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SheetMusicCodecType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void SheetMusicCodecType::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.SheetMusicCodecType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SheetMusicCodecType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.SheetMusicCodecType.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SheetMusicCodecType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.SheetMusicCodecType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.SheetMusicCodecType.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.SheetMusicCodecType)
  return target;
}

size_t SheetMusicCodecType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.SheetMusicCodecType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SheetMusicCodecType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.SheetMusicCodecType)
  GOOGLE_DCHECK_NE(&from, this);
  const SheetMusicCodecType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SheetMusicCodecType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.SheetMusicCodecType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.SheetMusicCodecType)
    MergeFrom(*source);
  }
}

void SheetMusicCodecType::MergeFrom(const SheetMusicCodecType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.SheetMusicCodecType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void SheetMusicCodecType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.SheetMusicCodecType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SheetMusicCodecType::CopyFrom(const SheetMusicCodecType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.SheetMusicCodecType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SheetMusicCodecType::IsInitialized() const {
  return true;
}

void SheetMusicCodecType::InternalSwap(SheetMusicCodecType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata SheetMusicCodecType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SheetMusicType::InitAsDefaultInstance() {
}
class SheetMusicType::_Internal {
 public:
  using HasBits = decltype(std::declval<SheetMusicType>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SheetMusicType::SheetMusicType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.SheetMusicType)
}
SheetMusicType::SheetMusicType(const SheetMusicType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.SheetMusicType)
}

void SheetMusicType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SheetMusicType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SheetMusicType::~SheetMusicType() {
  // @@protoc_insertion_point(destructor:mead101.avs.SheetMusicType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SheetMusicType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SheetMusicType::ArenaDtor(void* object) {
  SheetMusicType* _this = reinterpret_cast< SheetMusicType* >(object);
  (void)_this;
}
void SheetMusicType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SheetMusicType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SheetMusicType& SheetMusicType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SheetMusicType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void SheetMusicType::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.SheetMusicType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SheetMusicType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.SheetMusicType.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SheetMusicType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.SheetMusicType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.SheetMusicType.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.SheetMusicType)
  return target;
}

size_t SheetMusicType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.SheetMusicType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SheetMusicType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.SheetMusicType)
  GOOGLE_DCHECK_NE(&from, this);
  const SheetMusicType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SheetMusicType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.SheetMusicType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.SheetMusicType)
    MergeFrom(*source);
  }
}

void SheetMusicType::MergeFrom(const SheetMusicType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.SheetMusicType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void SheetMusicType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.SheetMusicType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SheetMusicType::CopyFrom(const SheetMusicType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.SheetMusicType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SheetMusicType::IsInitialized() const {
  return true;
}

void SheetMusicType::InternalSwap(SheetMusicType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata SheetMusicType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SoftwareType::InitAsDefaultInstance() {
}
class SoftwareType::_Internal {
 public:
  using HasBits = decltype(std::declval<SoftwareType>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SoftwareType::SoftwareType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.SoftwareType)
}
SoftwareType::SoftwareType(const SoftwareType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.SoftwareType)
}

void SoftwareType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SoftwareType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SoftwareType::~SoftwareType() {
  // @@protoc_insertion_point(destructor:mead101.avs.SoftwareType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SoftwareType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SoftwareType::ArenaDtor(void* object) {
  SoftwareType* _this = reinterpret_cast< SoftwareType* >(object);
  (void)_this;
}
void SoftwareType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SoftwareType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SoftwareType& SoftwareType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SoftwareType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void SoftwareType::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.SoftwareType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SoftwareType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.SoftwareType.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SoftwareType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.SoftwareType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.SoftwareType.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.SoftwareType)
  return target;
}

size_t SoftwareType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.SoftwareType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SoftwareType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.SoftwareType)
  GOOGLE_DCHECK_NE(&from, this);
  const SoftwareType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SoftwareType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.SoftwareType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.SoftwareType)
    MergeFrom(*source);
  }
}

void SoftwareType::MergeFrom(const SoftwareType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.SoftwareType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void SoftwareType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.SoftwareType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SoftwareType::CopyFrom(const SoftwareType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.SoftwareType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SoftwareType::IsInitialized() const {
  return true;
}

void SoftwareType::InternalSwap(SoftwareType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata SoftwareType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SoundRecordingType::InitAsDefaultInstance() {
}
class SoundRecordingType::_Internal {
 public:
  using HasBits = decltype(std::declval<SoundRecordingType>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SoundRecordingType::SoundRecordingType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.SoundRecordingType)
}
SoundRecordingType::SoundRecordingType(const SoundRecordingType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.SoundRecordingType)
}

void SoundRecordingType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SoundRecordingType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SoundRecordingType::~SoundRecordingType() {
  // @@protoc_insertion_point(destructor:mead101.avs.SoundRecordingType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SoundRecordingType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SoundRecordingType::ArenaDtor(void* object) {
  SoundRecordingType* _this = reinterpret_cast< SoundRecordingType* >(object);
  (void)_this;
}
void SoundRecordingType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SoundRecordingType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SoundRecordingType& SoundRecordingType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SoundRecordingType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void SoundRecordingType::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.SoundRecordingType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SoundRecordingType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.SoundRecordingType.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SoundRecordingType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.SoundRecordingType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.SoundRecordingType.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.SoundRecordingType)
  return target;
}

size_t SoundRecordingType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.SoundRecordingType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SoundRecordingType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.SoundRecordingType)
  GOOGLE_DCHECK_NE(&from, this);
  const SoundRecordingType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SoundRecordingType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.SoundRecordingType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.SoundRecordingType)
    MergeFrom(*source);
  }
}

void SoundRecordingType::MergeFrom(const SoundRecordingType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.SoundRecordingType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void SoundRecordingType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.SoundRecordingType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SoundRecordingType::CopyFrom(const SoundRecordingType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.SoundRecordingType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SoundRecordingType::IsInitialized() const {
  return true;
}

void SoundRecordingType::InternalSwap(SoundRecordingType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata SoundRecordingType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Status::InitAsDefaultInstance() {
}
class Status::_Internal {
 public:
  using HasBits = decltype(std::declval<Status>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Status::Status(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.Status)
}
Status::Status(const Status& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.Status)
}

void Status::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Status_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Status::~Status() {
  // @@protoc_insertion_point(destructor:mead101.avs.Status)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Status::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Status::ArenaDtor(void* object) {
  Status* _this = reinterpret_cast< Status* >(object);
  (void)_this;
}
void Status::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Status::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Status& Status::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Status_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void Status::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.Status)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Status::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.Status.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Status::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.Status)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.Status.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.Status)
  return target;
}

size_t Status::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.Status)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Status::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.Status)
  GOOGLE_DCHECK_NE(&from, this);
  const Status* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Status>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.Status)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.Status)
    MergeFrom(*source);
  }
}

void Status::MergeFrom(const Status& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.Status)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void Status::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.Status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Status::CopyFrom(const Status& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.Status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Status::IsInitialized() const {
  return true;
}

void Status::InternalSwap(Status* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Status::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SubGenre::InitAsDefaultInstance() {
}
class SubGenre::_Internal {
 public:
  using HasBits = decltype(std::declval<SubGenre>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SubGenre::SubGenre(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.SubGenre)
}
SubGenre::SubGenre(const SubGenre& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.SubGenre)
}

void SubGenre::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SubGenre_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SubGenre::~SubGenre() {
  // @@protoc_insertion_point(destructor:mead101.avs.SubGenre)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SubGenre::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SubGenre::ArenaDtor(void* object) {
  SubGenre* _this = reinterpret_cast< SubGenre* >(object);
  (void)_this;
}
void SubGenre::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubGenre::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubGenre& SubGenre::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubGenre_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void SubGenre::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.SubGenre)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubGenre::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.SubGenre.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubGenre::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.SubGenre)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.SubGenre.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.SubGenre)
  return target;
}

size_t SubGenre::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.SubGenre)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubGenre::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.SubGenre)
  GOOGLE_DCHECK_NE(&from, this);
  const SubGenre* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubGenre>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.SubGenre)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.SubGenre)
    MergeFrom(*source);
  }
}

void SubGenre::MergeFrom(const SubGenre& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.SubGenre)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void SubGenre::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.SubGenre)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubGenre::CopyFrom(const SubGenre& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.SubGenre)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubGenre::IsInitialized() const {
  return true;
}

void SubGenre::InternalSwap(SubGenre* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata SubGenre::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SubTitleType::InitAsDefaultInstance() {
}
class SubTitleType::_Internal {
 public:
  using HasBits = decltype(std::declval<SubTitleType>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SubTitleType::SubTitleType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.SubTitleType)
}
SubTitleType::SubTitleType(const SubTitleType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.SubTitleType)
}

void SubTitleType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SubTitleType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SubTitleType::~SubTitleType() {
  // @@protoc_insertion_point(destructor:mead101.avs.SubTitleType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SubTitleType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SubTitleType::ArenaDtor(void* object) {
  SubTitleType* _this = reinterpret_cast< SubTitleType* >(object);
  (void)_this;
}
void SubTitleType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubTitleType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubTitleType& SubTitleType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubTitleType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void SubTitleType::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.SubTitleType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubTitleType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.SubTitleType.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubTitleType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.SubTitleType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.SubTitleType.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.SubTitleType)
  return target;
}

size_t SubTitleType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.SubTitleType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubTitleType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.SubTitleType)
  GOOGLE_DCHECK_NE(&from, this);
  const SubTitleType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubTitleType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.SubTitleType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.SubTitleType)
    MergeFrom(*source);
  }
}

void SubTitleType::MergeFrom(const SubTitleType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.SubTitleType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void SubTitleType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.SubTitleType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubTitleType::CopyFrom(const SubTitleType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.SubTitleType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubTitleType::IsInitialized() const {
  return true;
}

void SubTitleType::InternalSwap(SubTitleType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata SubTitleType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SupplyChainStatus::InitAsDefaultInstance() {
}
class SupplyChainStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<SupplyChainStatus>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SupplyChainStatus::SupplyChainStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.SupplyChainStatus)
}
SupplyChainStatus::SupplyChainStatus(const SupplyChainStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.SupplyChainStatus)
}

void SupplyChainStatus::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SupplyChainStatus_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SupplyChainStatus::~SupplyChainStatus() {
  // @@protoc_insertion_point(destructor:mead101.avs.SupplyChainStatus)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SupplyChainStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SupplyChainStatus::ArenaDtor(void* object) {
  SupplyChainStatus* _this = reinterpret_cast< SupplyChainStatus* >(object);
  (void)_this;
}
void SupplyChainStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SupplyChainStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SupplyChainStatus& SupplyChainStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SupplyChainStatus_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void SupplyChainStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.SupplyChainStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SupplyChainStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.SupplyChainStatus.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SupplyChainStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.SupplyChainStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.SupplyChainStatus.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.SupplyChainStatus)
  return target;
}

size_t SupplyChainStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.SupplyChainStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SupplyChainStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.SupplyChainStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const SupplyChainStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SupplyChainStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.SupplyChainStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.SupplyChainStatus)
    MergeFrom(*source);
  }
}

void SupplyChainStatus::MergeFrom(const SupplyChainStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.SupplyChainStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void SupplyChainStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.SupplyChainStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SupplyChainStatus::CopyFrom(const SupplyChainStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.SupplyChainStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SupplyChainStatus::IsInitialized() const {
  return true;
}

void SupplyChainStatus::InternalSwap(SupplyChainStatus* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata SupplyChainStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Tempo::InitAsDefaultInstance() {
}
class Tempo::_Internal {
 public:
  using HasBits = decltype(std::declval<Tempo>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Tempo::Tempo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.Tempo)
}
Tempo::Tempo(const Tempo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.Tempo)
}

void Tempo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Tempo_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Tempo::~Tempo() {
  // @@protoc_insertion_point(destructor:mead101.avs.Tempo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Tempo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Tempo::ArenaDtor(void* object) {
  Tempo* _this = reinterpret_cast< Tempo* >(object);
  (void)_this;
}
void Tempo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Tempo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Tempo& Tempo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Tempo_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void Tempo::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.Tempo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Tempo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.Tempo.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Tempo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.Tempo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.Tempo.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.Tempo)
  return target;
}

size_t Tempo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.Tempo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Tempo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.Tempo)
  GOOGLE_DCHECK_NE(&from, this);
  const Tempo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Tempo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.Tempo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.Tempo)
    MergeFrom(*source);
  }
}

void Tempo::MergeFrom(const Tempo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.Tempo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void Tempo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.Tempo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Tempo::CopyFrom(const Tempo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.Tempo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tempo::IsInitialized() const {
  return true;
}

void Tempo::InternalSwap(Tempo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Tempo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TerritoryCodeType::InitAsDefaultInstance() {
}
class TerritoryCodeType::_Internal {
 public:
  using HasBits = decltype(std::declval<TerritoryCodeType>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TerritoryCodeType::TerritoryCodeType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.TerritoryCodeType)
}
TerritoryCodeType::TerritoryCodeType(const TerritoryCodeType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.TerritoryCodeType)
}

void TerritoryCodeType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TerritoryCodeType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TerritoryCodeType::~TerritoryCodeType() {
  // @@protoc_insertion_point(destructor:mead101.avs.TerritoryCodeType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TerritoryCodeType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TerritoryCodeType::ArenaDtor(void* object) {
  TerritoryCodeType* _this = reinterpret_cast< TerritoryCodeType* >(object);
  (void)_this;
}
void TerritoryCodeType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TerritoryCodeType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TerritoryCodeType& TerritoryCodeType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TerritoryCodeType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void TerritoryCodeType::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.TerritoryCodeType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TerritoryCodeType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.TerritoryCodeType.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TerritoryCodeType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.TerritoryCodeType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.TerritoryCodeType.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.TerritoryCodeType)
  return target;
}

size_t TerritoryCodeType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.TerritoryCodeType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TerritoryCodeType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.TerritoryCodeType)
  GOOGLE_DCHECK_NE(&from, this);
  const TerritoryCodeType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TerritoryCodeType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.TerritoryCodeType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.TerritoryCodeType)
    MergeFrom(*source);
  }
}

void TerritoryCodeType::MergeFrom(const TerritoryCodeType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.TerritoryCodeType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void TerritoryCodeType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.TerritoryCodeType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TerritoryCodeType::CopyFrom(const TerritoryCodeType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.TerritoryCodeType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TerritoryCodeType::IsInitialized() const {
  return true;
}

void TerritoryCodeType::InternalSwap(TerritoryCodeType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata TerritoryCodeType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TerritoryCodeTypeIncludingDeprecatedCodes::InitAsDefaultInstance() {
}
class TerritoryCodeTypeIncludingDeprecatedCodes::_Internal {
 public:
  using HasBits = decltype(std::declval<TerritoryCodeTypeIncludingDeprecatedCodes>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TerritoryCodeTypeIncludingDeprecatedCodes::TerritoryCodeTypeIncludingDeprecatedCodes(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.TerritoryCodeTypeIncludingDeprecatedCodes)
}
TerritoryCodeTypeIncludingDeprecatedCodes::TerritoryCodeTypeIncludingDeprecatedCodes(const TerritoryCodeTypeIncludingDeprecatedCodes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.TerritoryCodeTypeIncludingDeprecatedCodes)
}

void TerritoryCodeTypeIncludingDeprecatedCodes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TerritoryCodeTypeIncludingDeprecatedCodes_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TerritoryCodeTypeIncludingDeprecatedCodes::~TerritoryCodeTypeIncludingDeprecatedCodes() {
  // @@protoc_insertion_point(destructor:mead101.avs.TerritoryCodeTypeIncludingDeprecatedCodes)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TerritoryCodeTypeIncludingDeprecatedCodes::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TerritoryCodeTypeIncludingDeprecatedCodes::ArenaDtor(void* object) {
  TerritoryCodeTypeIncludingDeprecatedCodes* _this = reinterpret_cast< TerritoryCodeTypeIncludingDeprecatedCodes* >(object);
  (void)_this;
}
void TerritoryCodeTypeIncludingDeprecatedCodes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TerritoryCodeTypeIncludingDeprecatedCodes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TerritoryCodeTypeIncludingDeprecatedCodes& TerritoryCodeTypeIncludingDeprecatedCodes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TerritoryCodeTypeIncludingDeprecatedCodes_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void TerritoryCodeTypeIncludingDeprecatedCodes::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.TerritoryCodeTypeIncludingDeprecatedCodes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TerritoryCodeTypeIncludingDeprecatedCodes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.TerritoryCodeTypeIncludingDeprecatedCodes.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TerritoryCodeTypeIncludingDeprecatedCodes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.TerritoryCodeTypeIncludingDeprecatedCodes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.TerritoryCodeTypeIncludingDeprecatedCodes.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.TerritoryCodeTypeIncludingDeprecatedCodes)
  return target;
}

size_t TerritoryCodeTypeIncludingDeprecatedCodes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.TerritoryCodeTypeIncludingDeprecatedCodes)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TerritoryCodeTypeIncludingDeprecatedCodes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.TerritoryCodeTypeIncludingDeprecatedCodes)
  GOOGLE_DCHECK_NE(&from, this);
  const TerritoryCodeTypeIncludingDeprecatedCodes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TerritoryCodeTypeIncludingDeprecatedCodes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.TerritoryCodeTypeIncludingDeprecatedCodes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.TerritoryCodeTypeIncludingDeprecatedCodes)
    MergeFrom(*source);
  }
}

void TerritoryCodeTypeIncludingDeprecatedCodes::MergeFrom(const TerritoryCodeTypeIncludingDeprecatedCodes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.TerritoryCodeTypeIncludingDeprecatedCodes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void TerritoryCodeTypeIncludingDeprecatedCodes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.TerritoryCodeTypeIncludingDeprecatedCodes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TerritoryCodeTypeIncludingDeprecatedCodes::CopyFrom(const TerritoryCodeTypeIncludingDeprecatedCodes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.TerritoryCodeTypeIncludingDeprecatedCodes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TerritoryCodeTypeIncludingDeprecatedCodes::IsInitialized() const {
  return true;
}

void TerritoryCodeTypeIncludingDeprecatedCodes::InternalSwap(TerritoryCodeTypeIncludingDeprecatedCodes* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata TerritoryCodeTypeIncludingDeprecatedCodes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TextCodecType::InitAsDefaultInstance() {
}
class TextCodecType::_Internal {
 public:
  using HasBits = decltype(std::declval<TextCodecType>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TextCodecType::TextCodecType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.TextCodecType)
}
TextCodecType::TextCodecType(const TextCodecType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.TextCodecType)
}

void TextCodecType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TextCodecType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TextCodecType::~TextCodecType() {
  // @@protoc_insertion_point(destructor:mead101.avs.TextCodecType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TextCodecType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TextCodecType::ArenaDtor(void* object) {
  TextCodecType* _this = reinterpret_cast< TextCodecType* >(object);
  (void)_this;
}
void TextCodecType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TextCodecType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TextCodecType& TextCodecType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TextCodecType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void TextCodecType::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.TextCodecType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TextCodecType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.TextCodecType.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TextCodecType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.TextCodecType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.TextCodecType.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.TextCodecType)
  return target;
}

size_t TextCodecType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.TextCodecType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TextCodecType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.TextCodecType)
  GOOGLE_DCHECK_NE(&from, this);
  const TextCodecType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TextCodecType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.TextCodecType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.TextCodecType)
    MergeFrom(*source);
  }
}

void TextCodecType::MergeFrom(const TextCodecType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.TextCodecType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void TextCodecType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.TextCodecType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TextCodecType::CopyFrom(const TextCodecType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.TextCodecType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TextCodecType::IsInitialized() const {
  return true;
}

void TextCodecType::InternalSwap(TextCodecType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata TextCodecType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TextType::InitAsDefaultInstance() {
}
class TextType::_Internal {
 public:
  using HasBits = decltype(std::declval<TextType>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TextType::TextType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.TextType)
}
TextType::TextType(const TextType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.TextType)
}

void TextType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TextType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TextType::~TextType() {
  // @@protoc_insertion_point(destructor:mead101.avs.TextType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TextType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TextType::ArenaDtor(void* object) {
  TextType* _this = reinterpret_cast< TextType* >(object);
  (void)_this;
}
void TextType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TextType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TextType& TextType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TextType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void TextType::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.TextType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TextType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.TextType.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TextType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.TextType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.TextType.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.TextType)
  return target;
}

size_t TextType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.TextType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TextType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.TextType)
  GOOGLE_DCHECK_NE(&from, this);
  const TextType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TextType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.TextType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.TextType)
    MergeFrom(*source);
  }
}

void TextType::MergeFrom(const TextType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.TextType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void TextType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.TextType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TextType::CopyFrom(const TextType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.TextType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TextType::IsInitialized() const {
  return true;
}

void TextType::InternalSwap(TextType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata TextType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TextType_ATOM::InitAsDefaultInstance() {
}
class TextType_ATOM::_Internal {
 public:
  using HasBits = decltype(std::declval<TextType_ATOM>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TextType_ATOM::TextType_ATOM(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.TextType_ATOM)
}
TextType_ATOM::TextType_ATOM(const TextType_ATOM& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.TextType_ATOM)
}

void TextType_ATOM::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TextType_ATOM_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TextType_ATOM::~TextType_ATOM() {
  // @@protoc_insertion_point(destructor:mead101.avs.TextType_ATOM)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TextType_ATOM::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TextType_ATOM::ArenaDtor(void* object) {
  TextType_ATOM* _this = reinterpret_cast< TextType_ATOM* >(object);
  (void)_this;
}
void TextType_ATOM::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TextType_ATOM::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TextType_ATOM& TextType_ATOM::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TextType_ATOM_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void TextType_ATOM::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.TextType_ATOM)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TextType_ATOM::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.TextType_ATOM.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TextType_ATOM::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.TextType_ATOM)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.TextType_ATOM.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.TextType_ATOM)
  return target;
}

size_t TextType_ATOM::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.TextType_ATOM)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TextType_ATOM::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.TextType_ATOM)
  GOOGLE_DCHECK_NE(&from, this);
  const TextType_ATOM* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TextType_ATOM>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.TextType_ATOM)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.TextType_ATOM)
    MergeFrom(*source);
  }
}

void TextType_ATOM::MergeFrom(const TextType_ATOM& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.TextType_ATOM)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void TextType_ATOM::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.TextType_ATOM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TextType_ATOM::CopyFrom(const TextType_ATOM& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.TextType_ATOM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TextType_ATOM::IsInitialized() const {
  return true;
}

void TextType_ATOM::InternalSwap(TextType_ATOM* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata TextType_ATOM::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Theme::InitAsDefaultInstance() {
}
class Theme::_Internal {
 public:
  using HasBits = decltype(std::declval<Theme>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Theme::Theme(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.Theme)
}
Theme::Theme(const Theme& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.Theme)
}

void Theme::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Theme_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Theme::~Theme() {
  // @@protoc_insertion_point(destructor:mead101.avs.Theme)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Theme::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Theme::ArenaDtor(void* object) {
  Theme* _this = reinterpret_cast< Theme* >(object);
  (void)_this;
}
void Theme::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Theme::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Theme& Theme::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Theme_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void Theme::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.Theme)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Theme::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.Theme.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Theme::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.Theme)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.Theme.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.Theme)
  return target;
}

size_t Theme::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.Theme)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Theme::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.Theme)
  GOOGLE_DCHECK_NE(&from, this);
  const Theme* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Theme>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.Theme)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.Theme)
    MergeFrom(*source);
  }
}

void Theme::MergeFrom(const Theme& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.Theme)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void Theme::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.Theme)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Theme::CopyFrom(const Theme& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.Theme)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Theme::IsInitialized() const {
  return true;
}

void Theme::InternalSwap(Theme* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Theme::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ThemeType::InitAsDefaultInstance() {
}
class ThemeType::_Internal {
 public:
  using HasBits = decltype(std::declval<ThemeType>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ThemeType::ThemeType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.ThemeType)
}
ThemeType::ThemeType(const ThemeType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.ThemeType)
}

void ThemeType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ThemeType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ThemeType::~ThemeType() {
  // @@protoc_insertion_point(destructor:mead101.avs.ThemeType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ThemeType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ThemeType::ArenaDtor(void* object) {
  ThemeType* _this = reinterpret_cast< ThemeType* >(object);
  (void)_this;
}
void ThemeType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ThemeType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ThemeType& ThemeType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ThemeType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void ThemeType::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.ThemeType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ThemeType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.ThemeType.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ThemeType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.ThemeType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.ThemeType.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.ThemeType)
  return target;
}

size_t ThemeType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.ThemeType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ThemeType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.ThemeType)
  GOOGLE_DCHECK_NE(&from, this);
  const ThemeType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ThemeType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.ThemeType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.ThemeType)
    MergeFrom(*source);
  }
}

void ThemeType::MergeFrom(const ThemeType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.ThemeType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void ThemeType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.ThemeType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ThemeType::CopyFrom(const ThemeType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.ThemeType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThemeType::IsInitialized() const {
  return true;
}

void ThemeType::InternalSwap(ThemeType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ThemeType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TimecodeType::InitAsDefaultInstance() {
}
class TimecodeType::_Internal {
 public:
  using HasBits = decltype(std::declval<TimecodeType>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TimecodeType::TimecodeType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.TimecodeType)
}
TimecodeType::TimecodeType(const TimecodeType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.TimecodeType)
}

void TimecodeType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TimecodeType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TimecodeType::~TimecodeType() {
  // @@protoc_insertion_point(destructor:mead101.avs.TimecodeType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TimecodeType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TimecodeType::ArenaDtor(void* object) {
  TimecodeType* _this = reinterpret_cast< TimecodeType* >(object);
  (void)_this;
}
void TimecodeType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TimecodeType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TimecodeType& TimecodeType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TimecodeType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void TimecodeType::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.TimecodeType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TimecodeType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.TimecodeType.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TimecodeType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.TimecodeType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.TimecodeType.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.TimecodeType)
  return target;
}

size_t TimecodeType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.TimecodeType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TimecodeType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.TimecodeType)
  GOOGLE_DCHECK_NE(&from, this);
  const TimecodeType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TimecodeType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.TimecodeType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.TimecodeType)
    MergeFrom(*source);
  }
}

void TimecodeType::MergeFrom(const TimecodeType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.TimecodeType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void TimecodeType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.TimecodeType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimecodeType::CopyFrom(const TimecodeType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.TimecodeType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimecodeType::IsInitialized() const {
  return true;
}

void TimecodeType::InternalSwap(TimecodeType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata TimecodeType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TisTerritoryCode::InitAsDefaultInstance() {
}
class TisTerritoryCode::_Internal {
 public:
  using HasBits = decltype(std::declval<TisTerritoryCode>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TisTerritoryCode::TisTerritoryCode(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.TisTerritoryCode)
}
TisTerritoryCode::TisTerritoryCode(const TisTerritoryCode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.TisTerritoryCode)
}

void TisTerritoryCode::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TisTerritoryCode_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TisTerritoryCode::~TisTerritoryCode() {
  // @@protoc_insertion_point(destructor:mead101.avs.TisTerritoryCode)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TisTerritoryCode::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TisTerritoryCode::ArenaDtor(void* object) {
  TisTerritoryCode* _this = reinterpret_cast< TisTerritoryCode* >(object);
  (void)_this;
}
void TisTerritoryCode::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TisTerritoryCode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TisTerritoryCode& TisTerritoryCode::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TisTerritoryCode_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void TisTerritoryCode::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.TisTerritoryCode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TisTerritoryCode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.TisTerritoryCode.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TisTerritoryCode::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.TisTerritoryCode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.TisTerritoryCode.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.TisTerritoryCode)
  return target;
}

size_t TisTerritoryCode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.TisTerritoryCode)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TisTerritoryCode::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.TisTerritoryCode)
  GOOGLE_DCHECK_NE(&from, this);
  const TisTerritoryCode* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TisTerritoryCode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.TisTerritoryCode)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.TisTerritoryCode)
    MergeFrom(*source);
  }
}

void TisTerritoryCode::MergeFrom(const TisTerritoryCode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.TisTerritoryCode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void TisTerritoryCode::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.TisTerritoryCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TisTerritoryCode::CopyFrom(const TisTerritoryCode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.TisTerritoryCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TisTerritoryCode::IsInitialized() const {
  return true;
}

void TisTerritoryCode::InternalSwap(TisTerritoryCode* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata TisTerritoryCode::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TitleType::InitAsDefaultInstance() {
}
class TitleType::_Internal {
 public:
  using HasBits = decltype(std::declval<TitleType>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TitleType::TitleType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.TitleType)
}
TitleType::TitleType(const TitleType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.TitleType)
}

void TitleType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TitleType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TitleType::~TitleType() {
  // @@protoc_insertion_point(destructor:mead101.avs.TitleType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TitleType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TitleType::ArenaDtor(void* object) {
  TitleType* _this = reinterpret_cast< TitleType* >(object);
  (void)_this;
}
void TitleType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TitleType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TitleType& TitleType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TitleType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void TitleType::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.TitleType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TitleType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.TitleType.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TitleType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.TitleType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.TitleType.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.TitleType)
  return target;
}

size_t TitleType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.TitleType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TitleType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.TitleType)
  GOOGLE_DCHECK_NE(&from, this);
  const TitleType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TitleType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.TitleType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.TitleType)
    MergeFrom(*source);
  }
}

void TitleType::MergeFrom(const TitleType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.TitleType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void TitleType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.TitleType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TitleType::CopyFrom(const TitleType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.TitleType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TitleType::IsInitialized() const {
  return true;
}

void TitleType::InternalSwap(TitleType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata TitleType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TransferCategory::InitAsDefaultInstance() {
}
class TransferCategory::_Internal {
 public:
  using HasBits = decltype(std::declval<TransferCategory>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TransferCategory::TransferCategory(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.TransferCategory)
}
TransferCategory::TransferCategory(const TransferCategory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.TransferCategory)
}

void TransferCategory::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TransferCategory_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TransferCategory::~TransferCategory() {
  // @@protoc_insertion_point(destructor:mead101.avs.TransferCategory)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TransferCategory::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TransferCategory::ArenaDtor(void* object) {
  TransferCategory* _this = reinterpret_cast< TransferCategory* >(object);
  (void)_this;
}
void TransferCategory::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransferCategory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransferCategory& TransferCategory::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransferCategory_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void TransferCategory::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.TransferCategory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransferCategory::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.TransferCategory.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransferCategory::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.TransferCategory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.TransferCategory.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.TransferCategory)
  return target;
}

size_t TransferCategory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.TransferCategory)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransferCategory::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.TransferCategory)
  GOOGLE_DCHECK_NE(&from, this);
  const TransferCategory* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransferCategory>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.TransferCategory)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.TransferCategory)
    MergeFrom(*source);
  }
}

void TransferCategory::MergeFrom(const TransferCategory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.TransferCategory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void TransferCategory::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.TransferCategory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransferCategory::CopyFrom(const TransferCategory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.TransferCategory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransferCategory::IsInitialized() const {
  return true;
}

void TransferCategory::InternalSwap(TransferCategory* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata TransferCategory::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TransferType::InitAsDefaultInstance() {
}
class TransferType::_Internal {
 public:
  using HasBits = decltype(std::declval<TransferType>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TransferType::TransferType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.TransferType)
}
TransferType::TransferType(const TransferType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.TransferType)
}

void TransferType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TransferType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TransferType::~TransferType() {
  // @@protoc_insertion_point(destructor:mead101.avs.TransferType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TransferType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TransferType::ArenaDtor(void* object) {
  TransferType* _this = reinterpret_cast< TransferType* >(object);
  (void)_this;
}
void TransferType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransferType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransferType& TransferType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransferType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void TransferType::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.TransferType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransferType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.TransferType.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransferType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.TransferType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.TransferType.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.TransferType)
  return target;
}

size_t TransferType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.TransferType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransferType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.TransferType)
  GOOGLE_DCHECK_NE(&from, this);
  const TransferType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransferType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.TransferType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.TransferType)
    MergeFrom(*source);
  }
}

void TransferType::MergeFrom(const TransferType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.TransferType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void TransferType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.TransferType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransferType::CopyFrom(const TransferType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.TransferType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransferType::IsInitialized() const {
  return true;
}

void TransferType::InternalSwap(TransferType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata TransferType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UnitOfBitRate::InitAsDefaultInstance() {
}
class UnitOfBitRate::_Internal {
 public:
  using HasBits = decltype(std::declval<UnitOfBitRate>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

UnitOfBitRate::UnitOfBitRate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.UnitOfBitRate)
}
UnitOfBitRate::UnitOfBitRate(const UnitOfBitRate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.UnitOfBitRate)
}

void UnitOfBitRate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UnitOfBitRate_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

UnitOfBitRate::~UnitOfBitRate() {
  // @@protoc_insertion_point(destructor:mead101.avs.UnitOfBitRate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UnitOfBitRate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UnitOfBitRate::ArenaDtor(void* object) {
  UnitOfBitRate* _this = reinterpret_cast< UnitOfBitRate* >(object);
  (void)_this;
}
void UnitOfBitRate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UnitOfBitRate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnitOfBitRate& UnitOfBitRate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UnitOfBitRate_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void UnitOfBitRate::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.UnitOfBitRate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnitOfBitRate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.UnitOfBitRate.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnitOfBitRate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.UnitOfBitRate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.UnitOfBitRate.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.UnitOfBitRate)
  return target;
}

size_t UnitOfBitRate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.UnitOfBitRate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnitOfBitRate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.UnitOfBitRate)
  GOOGLE_DCHECK_NE(&from, this);
  const UnitOfBitRate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UnitOfBitRate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.UnitOfBitRate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.UnitOfBitRate)
    MergeFrom(*source);
  }
}

void UnitOfBitRate::MergeFrom(const UnitOfBitRate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.UnitOfBitRate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void UnitOfBitRate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.UnitOfBitRate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnitOfBitRate::CopyFrom(const UnitOfBitRate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.UnitOfBitRate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnitOfBitRate::IsInitialized() const {
  return true;
}

void UnitOfBitRate::InternalSwap(UnitOfBitRate* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata UnitOfBitRate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UnitOfConditionValue::InitAsDefaultInstance() {
}
class UnitOfConditionValue::_Internal {
 public:
  using HasBits = decltype(std::declval<UnitOfConditionValue>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

UnitOfConditionValue::UnitOfConditionValue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.UnitOfConditionValue)
}
UnitOfConditionValue::UnitOfConditionValue(const UnitOfConditionValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.UnitOfConditionValue)
}

void UnitOfConditionValue::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UnitOfConditionValue_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

UnitOfConditionValue::~UnitOfConditionValue() {
  // @@protoc_insertion_point(destructor:mead101.avs.UnitOfConditionValue)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UnitOfConditionValue::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UnitOfConditionValue::ArenaDtor(void* object) {
  UnitOfConditionValue* _this = reinterpret_cast< UnitOfConditionValue* >(object);
  (void)_this;
}
void UnitOfConditionValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UnitOfConditionValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnitOfConditionValue& UnitOfConditionValue::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UnitOfConditionValue_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void UnitOfConditionValue::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.UnitOfConditionValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnitOfConditionValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.UnitOfConditionValue.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnitOfConditionValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.UnitOfConditionValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.UnitOfConditionValue.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.UnitOfConditionValue)
  return target;
}

size_t UnitOfConditionValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.UnitOfConditionValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnitOfConditionValue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.UnitOfConditionValue)
  GOOGLE_DCHECK_NE(&from, this);
  const UnitOfConditionValue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UnitOfConditionValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.UnitOfConditionValue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.UnitOfConditionValue)
    MergeFrom(*source);
  }
}

void UnitOfConditionValue::MergeFrom(const UnitOfConditionValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.UnitOfConditionValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void UnitOfConditionValue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.UnitOfConditionValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnitOfConditionValue::CopyFrom(const UnitOfConditionValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.UnitOfConditionValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnitOfConditionValue::IsInitialized() const {
  return true;
}

void UnitOfConditionValue::InternalSwap(UnitOfConditionValue* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata UnitOfConditionValue::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UnitOfCuePoints::InitAsDefaultInstance() {
}
class UnitOfCuePoints::_Internal {
 public:
  using HasBits = decltype(std::declval<UnitOfCuePoints>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

UnitOfCuePoints::UnitOfCuePoints(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.UnitOfCuePoints)
}
UnitOfCuePoints::UnitOfCuePoints(const UnitOfCuePoints& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.UnitOfCuePoints)
}

void UnitOfCuePoints::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UnitOfCuePoints_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

UnitOfCuePoints::~UnitOfCuePoints() {
  // @@protoc_insertion_point(destructor:mead101.avs.UnitOfCuePoints)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UnitOfCuePoints::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UnitOfCuePoints::ArenaDtor(void* object) {
  UnitOfCuePoints* _this = reinterpret_cast< UnitOfCuePoints* >(object);
  (void)_this;
}
void UnitOfCuePoints::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UnitOfCuePoints::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnitOfCuePoints& UnitOfCuePoints::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UnitOfCuePoints_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void UnitOfCuePoints::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.UnitOfCuePoints)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnitOfCuePoints::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.UnitOfCuePoints.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnitOfCuePoints::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.UnitOfCuePoints)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.UnitOfCuePoints.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.UnitOfCuePoints)
  return target;
}

size_t UnitOfCuePoints::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.UnitOfCuePoints)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnitOfCuePoints::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.UnitOfCuePoints)
  GOOGLE_DCHECK_NE(&from, this);
  const UnitOfCuePoints* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UnitOfCuePoints>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.UnitOfCuePoints)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.UnitOfCuePoints)
    MergeFrom(*source);
  }
}

void UnitOfCuePoints::MergeFrom(const UnitOfCuePoints& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.UnitOfCuePoints)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void UnitOfCuePoints::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.UnitOfCuePoints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnitOfCuePoints::CopyFrom(const UnitOfCuePoints& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.UnitOfCuePoints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnitOfCuePoints::IsInitialized() const {
  return true;
}

void UnitOfCuePoints::InternalSwap(UnitOfCuePoints* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata UnitOfCuePoints::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UnitOfDuration::InitAsDefaultInstance() {
}
class UnitOfDuration::_Internal {
 public:
  using HasBits = decltype(std::declval<UnitOfDuration>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

UnitOfDuration::UnitOfDuration(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.UnitOfDuration)
}
UnitOfDuration::UnitOfDuration(const UnitOfDuration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.UnitOfDuration)
}

void UnitOfDuration::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UnitOfDuration_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

UnitOfDuration::~UnitOfDuration() {
  // @@protoc_insertion_point(destructor:mead101.avs.UnitOfDuration)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UnitOfDuration::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UnitOfDuration::ArenaDtor(void* object) {
  UnitOfDuration* _this = reinterpret_cast< UnitOfDuration* >(object);
  (void)_this;
}
void UnitOfDuration::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UnitOfDuration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnitOfDuration& UnitOfDuration::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UnitOfDuration_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void UnitOfDuration::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.UnitOfDuration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnitOfDuration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.UnitOfDuration.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnitOfDuration::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.UnitOfDuration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.UnitOfDuration.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.UnitOfDuration)
  return target;
}

size_t UnitOfDuration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.UnitOfDuration)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnitOfDuration::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.UnitOfDuration)
  GOOGLE_DCHECK_NE(&from, this);
  const UnitOfDuration* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UnitOfDuration>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.UnitOfDuration)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.UnitOfDuration)
    MergeFrom(*source);
  }
}

void UnitOfDuration::MergeFrom(const UnitOfDuration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.UnitOfDuration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void UnitOfDuration::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.UnitOfDuration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnitOfDuration::CopyFrom(const UnitOfDuration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.UnitOfDuration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnitOfDuration::IsInitialized() const {
  return true;
}

void UnitOfDuration::InternalSwap(UnitOfDuration* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata UnitOfDuration::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UnitOfExtent::InitAsDefaultInstance() {
}
class UnitOfExtent::_Internal {
 public:
  using HasBits = decltype(std::declval<UnitOfExtent>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

UnitOfExtent::UnitOfExtent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.UnitOfExtent)
}
UnitOfExtent::UnitOfExtent(const UnitOfExtent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.UnitOfExtent)
}

void UnitOfExtent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UnitOfExtent_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

UnitOfExtent::~UnitOfExtent() {
  // @@protoc_insertion_point(destructor:mead101.avs.UnitOfExtent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UnitOfExtent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UnitOfExtent::ArenaDtor(void* object) {
  UnitOfExtent* _this = reinterpret_cast< UnitOfExtent* >(object);
  (void)_this;
}
void UnitOfExtent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UnitOfExtent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnitOfExtent& UnitOfExtent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UnitOfExtent_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void UnitOfExtent::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.UnitOfExtent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnitOfExtent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.UnitOfExtent.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnitOfExtent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.UnitOfExtent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.UnitOfExtent.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.UnitOfExtent)
  return target;
}

size_t UnitOfExtent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.UnitOfExtent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnitOfExtent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.UnitOfExtent)
  GOOGLE_DCHECK_NE(&from, this);
  const UnitOfExtent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UnitOfExtent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.UnitOfExtent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.UnitOfExtent)
    MergeFrom(*source);
  }
}

void UnitOfExtent::MergeFrom(const UnitOfExtent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.UnitOfExtent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void UnitOfExtent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.UnitOfExtent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnitOfExtent::CopyFrom(const UnitOfExtent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.UnitOfExtent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnitOfExtent::IsInitialized() const {
  return true;
}

void UnitOfExtent::InternalSwap(UnitOfExtent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata UnitOfExtent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UnitOfFrameRate::InitAsDefaultInstance() {
}
class UnitOfFrameRate::_Internal {
 public:
  using HasBits = decltype(std::declval<UnitOfFrameRate>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

UnitOfFrameRate::UnitOfFrameRate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.UnitOfFrameRate)
}
UnitOfFrameRate::UnitOfFrameRate(const UnitOfFrameRate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.UnitOfFrameRate)
}

void UnitOfFrameRate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UnitOfFrameRate_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

UnitOfFrameRate::~UnitOfFrameRate() {
  // @@protoc_insertion_point(destructor:mead101.avs.UnitOfFrameRate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UnitOfFrameRate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UnitOfFrameRate::ArenaDtor(void* object) {
  UnitOfFrameRate* _this = reinterpret_cast< UnitOfFrameRate* >(object);
  (void)_this;
}
void UnitOfFrameRate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UnitOfFrameRate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnitOfFrameRate& UnitOfFrameRate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UnitOfFrameRate_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void UnitOfFrameRate::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.UnitOfFrameRate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnitOfFrameRate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.UnitOfFrameRate.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnitOfFrameRate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.UnitOfFrameRate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.UnitOfFrameRate.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.UnitOfFrameRate)
  return target;
}

size_t UnitOfFrameRate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.UnitOfFrameRate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnitOfFrameRate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.UnitOfFrameRate)
  GOOGLE_DCHECK_NE(&from, this);
  const UnitOfFrameRate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UnitOfFrameRate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.UnitOfFrameRate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.UnitOfFrameRate)
    MergeFrom(*source);
  }
}

void UnitOfFrameRate::MergeFrom(const UnitOfFrameRate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.UnitOfFrameRate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void UnitOfFrameRate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.UnitOfFrameRate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnitOfFrameRate::CopyFrom(const UnitOfFrameRate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.UnitOfFrameRate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnitOfFrameRate::IsInitialized() const {
  return true;
}

void UnitOfFrameRate::InternalSwap(UnitOfFrameRate* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata UnitOfFrameRate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UnitOfFrequency::InitAsDefaultInstance() {
}
class UnitOfFrequency::_Internal {
 public:
  using HasBits = decltype(std::declval<UnitOfFrequency>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

UnitOfFrequency::UnitOfFrequency(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.UnitOfFrequency)
}
UnitOfFrequency::UnitOfFrequency(const UnitOfFrequency& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.UnitOfFrequency)
}

void UnitOfFrequency::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UnitOfFrequency_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

UnitOfFrequency::~UnitOfFrequency() {
  // @@protoc_insertion_point(destructor:mead101.avs.UnitOfFrequency)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UnitOfFrequency::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UnitOfFrequency::ArenaDtor(void* object) {
  UnitOfFrequency* _this = reinterpret_cast< UnitOfFrequency* >(object);
  (void)_this;
}
void UnitOfFrequency::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UnitOfFrequency::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnitOfFrequency& UnitOfFrequency::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UnitOfFrequency_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void UnitOfFrequency::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.UnitOfFrequency)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnitOfFrequency::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.UnitOfFrequency.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnitOfFrequency::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.UnitOfFrequency)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.UnitOfFrequency.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.UnitOfFrequency)
  return target;
}

size_t UnitOfFrequency::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.UnitOfFrequency)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnitOfFrequency::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.UnitOfFrequency)
  GOOGLE_DCHECK_NE(&from, this);
  const UnitOfFrequency* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UnitOfFrequency>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.UnitOfFrequency)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.UnitOfFrequency)
    MergeFrom(*source);
  }
}

void UnitOfFrequency::MergeFrom(const UnitOfFrequency& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.UnitOfFrequency)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void UnitOfFrequency::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.UnitOfFrequency)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnitOfFrequency::CopyFrom(const UnitOfFrequency& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.UnitOfFrequency)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnitOfFrequency::IsInitialized() const {
  return true;
}

void UnitOfFrequency::InternalSwap(UnitOfFrequency* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata UnitOfFrequency::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UseType::InitAsDefaultInstance() {
}
class UseType::_Internal {
 public:
  using HasBits = decltype(std::declval<UseType>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

UseType::UseType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.UseType)
}
UseType::UseType(const UseType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.UseType)
}

void UseType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UseType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

UseType::~UseType() {
  // @@protoc_insertion_point(destructor:mead101.avs.UseType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UseType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UseType::ArenaDtor(void* object) {
  UseType* _this = reinterpret_cast< UseType* >(object);
  (void)_this;
}
void UseType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UseType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UseType& UseType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UseType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void UseType::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.UseType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UseType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.UseType.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UseType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.UseType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.UseType.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.UseType)
  return target;
}

size_t UseType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.UseType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UseType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.UseType)
  GOOGLE_DCHECK_NE(&from, this);
  const UseType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UseType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.UseType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.UseType)
    MergeFrom(*source);
  }
}

void UseType::MergeFrom(const UseType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.UseType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void UseType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.UseType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UseType::CopyFrom(const UseType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.UseType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UseType::IsInitialized() const {
  return true;
}

void UseType::InternalSwap(UseType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata UseType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UseType_MLC::InitAsDefaultInstance() {
}
class UseType_MLC::_Internal {
 public:
  using HasBits = decltype(std::declval<UseType_MLC>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

UseType_MLC::UseType_MLC(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.UseType_MLC)
}
UseType_MLC::UseType_MLC(const UseType_MLC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.UseType_MLC)
}

void UseType_MLC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UseType_MLC_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

UseType_MLC::~UseType_MLC() {
  // @@protoc_insertion_point(destructor:mead101.avs.UseType_MLC)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UseType_MLC::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UseType_MLC::ArenaDtor(void* object) {
  UseType_MLC* _this = reinterpret_cast< UseType_MLC* >(object);
  (void)_this;
}
void UseType_MLC::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UseType_MLC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UseType_MLC& UseType_MLC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UseType_MLC_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void UseType_MLC::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.UseType_MLC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UseType_MLC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.UseType_MLC.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UseType_MLC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.UseType_MLC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.UseType_MLC.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.UseType_MLC)
  return target;
}

size_t UseType_MLC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.UseType_MLC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UseType_MLC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.UseType_MLC)
  GOOGLE_DCHECK_NE(&from, this);
  const UseType_MLC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UseType_MLC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.UseType_MLC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.UseType_MLC)
    MergeFrom(*source);
  }
}

void UseType_MLC::MergeFrom(const UseType_MLC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.UseType_MLC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void UseType_MLC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.UseType_MLC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UseType_MLC::CopyFrom(const UseType_MLC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.UseType_MLC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UseType_MLC::IsInitialized() const {
  return true;
}

void UseType_MLC::InternalSwap(UseType_MLC* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata UseType_MLC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UseType_MWNL::InitAsDefaultInstance() {
}
class UseType_MWNL::_Internal {
 public:
  using HasBits = decltype(std::declval<UseType_MWNL>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

UseType_MWNL::UseType_MWNL(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.UseType_MWNL)
}
UseType_MWNL::UseType_MWNL(const UseType_MWNL& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.UseType_MWNL)
}

void UseType_MWNL::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UseType_MWNL_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

UseType_MWNL::~UseType_MWNL() {
  // @@protoc_insertion_point(destructor:mead101.avs.UseType_MWNL)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UseType_MWNL::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UseType_MWNL::ArenaDtor(void* object) {
  UseType_MWNL* _this = reinterpret_cast< UseType_MWNL* >(object);
  (void)_this;
}
void UseType_MWNL::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UseType_MWNL::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UseType_MWNL& UseType_MWNL::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UseType_MWNL_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void UseType_MWNL::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.UseType_MWNL)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UseType_MWNL::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.UseType_MWNL.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UseType_MWNL::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.UseType_MWNL)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.UseType_MWNL.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.UseType_MWNL)
  return target;
}

size_t UseType_MWNL::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.UseType_MWNL)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UseType_MWNL::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.UseType_MWNL)
  GOOGLE_DCHECK_NE(&from, this);
  const UseType_MWNL* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UseType_MWNL>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.UseType_MWNL)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.UseType_MWNL)
    MergeFrom(*source);
  }
}

void UseType_MWNL::MergeFrom(const UseType_MWNL& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.UseType_MWNL)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void UseType_MWNL::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.UseType_MWNL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UseType_MWNL::CopyFrom(const UseType_MWNL& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.UseType_MWNL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UseType_MWNL::IsInitialized() const {
  return true;
}

void UseType_MWNL::InternalSwap(UseType_MWNL* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata UseType_MWNL::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UserInterfaceType::InitAsDefaultInstance() {
}
class UserInterfaceType::_Internal {
 public:
  using HasBits = decltype(std::declval<UserInterfaceType>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

UserInterfaceType::UserInterfaceType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.UserInterfaceType)
}
UserInterfaceType::UserInterfaceType(const UserInterfaceType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.UserInterfaceType)
}

void UserInterfaceType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UserInterfaceType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

UserInterfaceType::~UserInterfaceType() {
  // @@protoc_insertion_point(destructor:mead101.avs.UserInterfaceType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UserInterfaceType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UserInterfaceType::ArenaDtor(void* object) {
  UserInterfaceType* _this = reinterpret_cast< UserInterfaceType* >(object);
  (void)_this;
}
void UserInterfaceType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UserInterfaceType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserInterfaceType& UserInterfaceType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserInterfaceType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void UserInterfaceType::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.UserInterfaceType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserInterfaceType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.UserInterfaceType.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserInterfaceType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.UserInterfaceType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.UserInterfaceType.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.UserInterfaceType)
  return target;
}

size_t UserInterfaceType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.UserInterfaceType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserInterfaceType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.UserInterfaceType)
  GOOGLE_DCHECK_NE(&from, this);
  const UserInterfaceType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserInterfaceType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.UserInterfaceType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.UserInterfaceType)
    MergeFrom(*source);
  }
}

void UserInterfaceType::MergeFrom(const UserInterfaceType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.UserInterfaceType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void UserInterfaceType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.UserInterfaceType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserInterfaceType::CopyFrom(const UserInterfaceType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.UserInterfaceType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserInterfaceType::IsInitialized() const {
  return true;
}

void UserInterfaceType::InternalSwap(UserInterfaceType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata UserInterfaceType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VersionType::InitAsDefaultInstance() {
}
class VersionType::_Internal {
 public:
  using HasBits = decltype(std::declval<VersionType>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

VersionType::VersionType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.VersionType)
}
VersionType::VersionType(const VersionType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.VersionType)
}

void VersionType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VersionType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

VersionType::~VersionType() {
  // @@protoc_insertion_point(destructor:mead101.avs.VersionType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VersionType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VersionType::ArenaDtor(void* object) {
  VersionType* _this = reinterpret_cast< VersionType* >(object);
  (void)_this;
}
void VersionType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VersionType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VersionType& VersionType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VersionType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void VersionType::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.VersionType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VersionType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.VersionType.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VersionType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.VersionType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.VersionType.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.VersionType)
  return target;
}

size_t VersionType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.VersionType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VersionType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.VersionType)
  GOOGLE_DCHECK_NE(&from, this);
  const VersionType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VersionType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.VersionType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.VersionType)
    MergeFrom(*source);
  }
}

void VersionType::MergeFrom(const VersionType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.VersionType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void VersionType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.VersionType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VersionType::CopyFrom(const VersionType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.VersionType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VersionType::IsInitialized() const {
  return true;
}

void VersionType::InternalSwap(VersionType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata VersionType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VideoCodecType::InitAsDefaultInstance() {
}
class VideoCodecType::_Internal {
 public:
  using HasBits = decltype(std::declval<VideoCodecType>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

VideoCodecType::VideoCodecType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.VideoCodecType)
}
VideoCodecType::VideoCodecType(const VideoCodecType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.VideoCodecType)
}

void VideoCodecType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VideoCodecType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

VideoCodecType::~VideoCodecType() {
  // @@protoc_insertion_point(destructor:mead101.avs.VideoCodecType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VideoCodecType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VideoCodecType::ArenaDtor(void* object) {
  VideoCodecType* _this = reinterpret_cast< VideoCodecType* >(object);
  (void)_this;
}
void VideoCodecType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VideoCodecType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VideoCodecType& VideoCodecType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VideoCodecType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void VideoCodecType::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.VideoCodecType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VideoCodecType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.VideoCodecType.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VideoCodecType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.VideoCodecType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.VideoCodecType.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.VideoCodecType)
  return target;
}

size_t VideoCodecType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.VideoCodecType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VideoCodecType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.VideoCodecType)
  GOOGLE_DCHECK_NE(&from, this);
  const VideoCodecType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VideoCodecType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.VideoCodecType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.VideoCodecType)
    MergeFrom(*source);
  }
}

void VideoCodecType::MergeFrom(const VideoCodecType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.VideoCodecType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void VideoCodecType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.VideoCodecType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VideoCodecType::CopyFrom(const VideoCodecType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.VideoCodecType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoCodecType::IsInitialized() const {
  return true;
}

void VideoCodecType::InternalSwap(VideoCodecType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata VideoCodecType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VideoDefinitionType::InitAsDefaultInstance() {
}
class VideoDefinitionType::_Internal {
 public:
  using HasBits = decltype(std::declval<VideoDefinitionType>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

VideoDefinitionType::VideoDefinitionType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.VideoDefinitionType)
}
VideoDefinitionType::VideoDefinitionType(const VideoDefinitionType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.VideoDefinitionType)
}

void VideoDefinitionType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VideoDefinitionType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

VideoDefinitionType::~VideoDefinitionType() {
  // @@protoc_insertion_point(destructor:mead101.avs.VideoDefinitionType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VideoDefinitionType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VideoDefinitionType::ArenaDtor(void* object) {
  VideoDefinitionType* _this = reinterpret_cast< VideoDefinitionType* >(object);
  (void)_this;
}
void VideoDefinitionType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VideoDefinitionType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VideoDefinitionType& VideoDefinitionType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VideoDefinitionType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void VideoDefinitionType::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.VideoDefinitionType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VideoDefinitionType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.VideoDefinitionType.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VideoDefinitionType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.VideoDefinitionType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.VideoDefinitionType.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.VideoDefinitionType)
  return target;
}

size_t VideoDefinitionType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.VideoDefinitionType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VideoDefinitionType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.VideoDefinitionType)
  GOOGLE_DCHECK_NE(&from, this);
  const VideoDefinitionType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VideoDefinitionType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.VideoDefinitionType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.VideoDefinitionType)
    MergeFrom(*source);
  }
}

void VideoDefinitionType::MergeFrom(const VideoDefinitionType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.VideoDefinitionType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void VideoDefinitionType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.VideoDefinitionType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VideoDefinitionType::CopyFrom(const VideoDefinitionType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.VideoDefinitionType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoDefinitionType::IsInitialized() const {
  return true;
}

void VideoDefinitionType::InternalSwap(VideoDefinitionType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata VideoDefinitionType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VideoType::InitAsDefaultInstance() {
}
class VideoType::_Internal {
 public:
  using HasBits = decltype(std::declval<VideoType>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

VideoType::VideoType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.VideoType)
}
VideoType::VideoType(const VideoType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.VideoType)
}

void VideoType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VideoType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

VideoType::~VideoType() {
  // @@protoc_insertion_point(destructor:mead101.avs.VideoType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VideoType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VideoType::ArenaDtor(void* object) {
  VideoType* _this = reinterpret_cast< VideoType* >(object);
  (void)_this;
}
void VideoType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VideoType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VideoType& VideoType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VideoType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void VideoType::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.VideoType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VideoType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.VideoType.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VideoType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.VideoType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.VideoType.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.VideoType)
  return target;
}

size_t VideoType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.VideoType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VideoType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.VideoType)
  GOOGLE_DCHECK_NE(&from, this);
  const VideoType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VideoType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.VideoType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.VideoType)
    MergeFrom(*source);
  }
}

void VideoType::MergeFrom(const VideoType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.VideoType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void VideoType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.VideoType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VideoType::CopyFrom(const VideoType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.VideoType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoType::IsInitialized() const {
  return true;
}

void VideoType::InternalSwap(VideoType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata VideoType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VideoType_DSRF::InitAsDefaultInstance() {
}
class VideoType_DSRF::_Internal {
 public:
  using HasBits = decltype(std::declval<VideoType_DSRF>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

VideoType_DSRF::VideoType_DSRF(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.VideoType_DSRF)
}
VideoType_DSRF::VideoType_DSRF(const VideoType_DSRF& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.VideoType_DSRF)
}

void VideoType_DSRF::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VideoType_DSRF_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

VideoType_DSRF::~VideoType_DSRF() {
  // @@protoc_insertion_point(destructor:mead101.avs.VideoType_DSRF)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VideoType_DSRF::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VideoType_DSRF::ArenaDtor(void* object) {
  VideoType_DSRF* _this = reinterpret_cast< VideoType_DSRF* >(object);
  (void)_this;
}
void VideoType_DSRF::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VideoType_DSRF::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VideoType_DSRF& VideoType_DSRF::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VideoType_DSRF_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void VideoType_DSRF::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.VideoType_DSRF)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VideoType_DSRF::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.VideoType_DSRF.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VideoType_DSRF::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.VideoType_DSRF)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.VideoType_DSRF.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.VideoType_DSRF)
  return target;
}

size_t VideoType_DSRF::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.VideoType_DSRF)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VideoType_DSRF::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.VideoType_DSRF)
  GOOGLE_DCHECK_NE(&from, this);
  const VideoType_DSRF* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VideoType_DSRF>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.VideoType_DSRF)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.VideoType_DSRF)
    MergeFrom(*source);
  }
}

void VideoType_DSRF::MergeFrom(const VideoType_DSRF& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.VideoType_DSRF)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void VideoType_DSRF::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.VideoType_DSRF)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VideoType_DSRF::CopyFrom(const VideoType_DSRF& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.VideoType_DSRF)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoType_DSRF::IsInitialized() const {
  return true;
}

void VideoType_DSRF::InternalSwap(VideoType_DSRF* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata VideoType_DSRF::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VisualPerceptionType::InitAsDefaultInstance() {
}
class VisualPerceptionType::_Internal {
 public:
  using HasBits = decltype(std::declval<VisualPerceptionType>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

VisualPerceptionType::VisualPerceptionType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.VisualPerceptionType)
}
VisualPerceptionType::VisualPerceptionType(const VisualPerceptionType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.VisualPerceptionType)
}

void VisualPerceptionType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VisualPerceptionType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

VisualPerceptionType::~VisualPerceptionType() {
  // @@protoc_insertion_point(destructor:mead101.avs.VisualPerceptionType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VisualPerceptionType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VisualPerceptionType::ArenaDtor(void* object) {
  VisualPerceptionType* _this = reinterpret_cast< VisualPerceptionType* >(object);
  (void)_this;
}
void VisualPerceptionType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VisualPerceptionType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VisualPerceptionType& VisualPerceptionType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VisualPerceptionType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void VisualPerceptionType::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.VisualPerceptionType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VisualPerceptionType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.VisualPerceptionType.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VisualPerceptionType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.VisualPerceptionType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.VisualPerceptionType.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.VisualPerceptionType)
  return target;
}

size_t VisualPerceptionType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.VisualPerceptionType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VisualPerceptionType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.VisualPerceptionType)
  GOOGLE_DCHECK_NE(&from, this);
  const VisualPerceptionType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VisualPerceptionType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.VisualPerceptionType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.VisualPerceptionType)
    MergeFrom(*source);
  }
}

void VisualPerceptionType::MergeFrom(const VisualPerceptionType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.VisualPerceptionType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void VisualPerceptionType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.VisualPerceptionType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VisualPerceptionType::CopyFrom(const VisualPerceptionType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.VisualPerceptionType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VisualPerceptionType::IsInitialized() const {
  return true;
}

void VisualPerceptionType::InternalSwap(VisualPerceptionType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata VisualPerceptionType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VocalRegister::InitAsDefaultInstance() {
}
class VocalRegister::_Internal {
 public:
  using HasBits = decltype(std::declval<VocalRegister>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

VocalRegister::VocalRegister(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.VocalRegister)
}
VocalRegister::VocalRegister(const VocalRegister& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.VocalRegister)
}

void VocalRegister::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VocalRegister_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

VocalRegister::~VocalRegister() {
  // @@protoc_insertion_point(destructor:mead101.avs.VocalRegister)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VocalRegister::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VocalRegister::ArenaDtor(void* object) {
  VocalRegister* _this = reinterpret_cast< VocalRegister* >(object);
  (void)_this;
}
void VocalRegister::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VocalRegister::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VocalRegister& VocalRegister::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VocalRegister_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void VocalRegister::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.VocalRegister)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VocalRegister::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.VocalRegister.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VocalRegister::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.VocalRegister)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.VocalRegister.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.VocalRegister)
  return target;
}

size_t VocalRegister::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.VocalRegister)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VocalRegister::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.VocalRegister)
  GOOGLE_DCHECK_NE(&from, this);
  const VocalRegister* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VocalRegister>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.VocalRegister)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.VocalRegister)
    MergeFrom(*source);
  }
}

void VocalRegister::MergeFrom(const VocalRegister& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.VocalRegister)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void VocalRegister::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.VocalRegister)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VocalRegister::CopyFrom(const VocalRegister& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.VocalRegister)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VocalRegister::IsInitialized() const {
  return true;
}

void VocalRegister::InternalSwap(VocalRegister* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata VocalRegister::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VocalType::InitAsDefaultInstance() {
}
class VocalType::_Internal {
 public:
  using HasBits = decltype(std::declval<VocalType>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

VocalType::VocalType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.VocalType)
}
VocalType::VocalType(const VocalType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.VocalType)
}

void VocalType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VocalType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

VocalType::~VocalType() {
  // @@protoc_insertion_point(destructor:mead101.avs.VocalType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VocalType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VocalType::ArenaDtor(void* object) {
  VocalType* _this = reinterpret_cast< VocalType* >(object);
  (void)_this;
}
void VocalType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VocalType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VocalType& VocalType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VocalType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void VocalType::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.VocalType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VocalType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.VocalType.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VocalType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.VocalType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.VocalType.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.VocalType)
  return target;
}

size_t VocalType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.VocalType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VocalType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.VocalType)
  GOOGLE_DCHECK_NE(&from, this);
  const VocalType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VocalType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.VocalType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.VocalType)
    MergeFrom(*source);
  }
}

void VocalType::MergeFrom(const VocalType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.VocalType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void VocalType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.VocalType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VocalType::CopyFrom(const VocalType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.VocalType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VocalType::IsInitialized() const {
  return true;
}

void VocalType::InternalSwap(VocalType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata VocalType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WorkRelationshipType::InitAsDefaultInstance() {
}
class WorkRelationshipType::_Internal {
 public:
  using HasBits = decltype(std::declval<WorkRelationshipType>()._has_bits_);
  static void set_has_enum_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

WorkRelationshipType::WorkRelationshipType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mead101.avs.WorkRelationshipType)
}
WorkRelationshipType::WorkRelationshipType(const WorkRelationshipType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enum_value()) {
    enum_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enum_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mead101.avs.WorkRelationshipType)
}

void WorkRelationshipType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WorkRelationshipType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  enum_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

WorkRelationshipType::~WorkRelationshipType() {
  // @@protoc_insertion_point(destructor:mead101.avs.WorkRelationshipType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WorkRelationshipType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enum_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void WorkRelationshipType::ArenaDtor(void* object) {
  WorkRelationshipType* _this = reinterpret_cast< WorkRelationshipType* >(object);
  (void)_this;
}
void WorkRelationshipType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WorkRelationshipType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WorkRelationshipType& WorkRelationshipType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WorkRelationshipType_ddex_2dxmltoproto_2fgenerated_2fmead101_2favs_2eproto.base);
  return *internal_default_instance();
}


void WorkRelationshipType::Clear() {
// @@protoc_insertion_point(message_clear_start:mead101.avs.WorkRelationshipType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    enum_value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WorkRelationshipType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string enum_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_enum_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mead101.avs.WorkRelationshipType.enum_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WorkRelationshipType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mead101.avs.WorkRelationshipType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string enum_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enum_value().data(), static_cast<int>(this->_internal_enum_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mead101.avs.WorkRelationshipType.enum_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_enum_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mead101.avs.WorkRelationshipType)
  return target;
}

size_t WorkRelationshipType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mead101.avs.WorkRelationshipType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string enum_value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enum_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WorkRelationshipType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mead101.avs.WorkRelationshipType)
  GOOGLE_DCHECK_NE(&from, this);
  const WorkRelationshipType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WorkRelationshipType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mead101.avs.WorkRelationshipType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mead101.avs.WorkRelationshipType)
    MergeFrom(*source);
  }
}

void WorkRelationshipType::MergeFrom(const WorkRelationshipType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mead101.avs.WorkRelationshipType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_value()) {
    _internal_set_enum_value(from._internal_enum_value());
  }
}

void WorkRelationshipType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mead101.avs.WorkRelationshipType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkRelationshipType::CopyFrom(const WorkRelationshipType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mead101.avs.WorkRelationshipType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkRelationshipType::IsInitialized() const {
  return true;
}

void WorkRelationshipType::InternalSwap(WorkRelationshipType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enum_value_.Swap(&other->enum_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata WorkRelationshipType::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace avs
}  // namespace mead101
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mead101::avs::AdditionalTitleType* Arena::CreateMaybeMessage< ::mead101::avs::AdditionalTitleType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::AdditionalTitleType >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::AdditionalUseType* Arena::CreateMaybeMessage< ::mead101::avs::AdditionalUseType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::AdditionalUseType >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::AdditionalVideoType* Arena::CreateMaybeMessage< ::mead101::avs::AdditionalVideoType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::AdditionalVideoType >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::AdministratingRecordCompanyRole* Arena::CreateMaybeMessage< ::mead101::avs::AdministratingRecordCompanyRole >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::AdministratingRecordCompanyRole >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::AffiliationType* Arena::CreateMaybeMessage< ::mead101::avs::AffiliationType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::AffiliationType >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::AllTerritoryCode* Arena::CreateMaybeMessage< ::mead101::avs::AllTerritoryCode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::AllTerritoryCode >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::ArtistRole* Arena::CreateMaybeMessage< ::mead101::avs::ArtistRole >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::ArtistRole >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::ArtistType* Arena::CreateMaybeMessage< ::mead101::avs::ArtistType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::ArtistType >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::AspectRatioType* Arena::CreateMaybeMessage< ::mead101::avs::AspectRatioType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::AspectRatioType >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::AsserterType* Arena::CreateMaybeMessage< ::mead101::avs::AsserterType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::AsserterType >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::AudioCodecType* Arena::CreateMaybeMessage< ::mead101::avs::AudioCodecType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::AudioCodecType >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::AvsVersionId* Arena::CreateMaybeMessage< ::mead101::avs::AvsVersionId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::AvsVersionId >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::BinaryDataType* Arena::CreateMaybeMessage< ::mead101::avs::BinaryDataType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::BinaryDataType >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::BusinessMusicalWorkContributorRole* Arena::CreateMaybeMessage< ::mead101::avs::BusinessMusicalWorkContributorRole >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::BusinessMusicalWorkContributorRole >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::CarrierType* Arena::CreateMaybeMessage< ::mead101::avs::CarrierType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::CarrierType >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::CatalogTransferType* Arena::CreateMaybeMessage< ::mead101::avs::CatalogTransferType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::CatalogTransferType >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::CdProtectionType* Arena::CreateMaybeMessage< ::mead101::avs::CdProtectionType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::CdProtectionType >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::CharacterType* Arena::CreateMaybeMessage< ::mead101::avs::CharacterType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::CharacterType >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::ClaimStatus* Arena::CreateMaybeMessage< ::mead101::avs::ClaimStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::ClaimStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::ClassifiedGenre* Arena::CreateMaybeMessage< ::mead101::avs::ClassifiedGenre >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::ClassifiedGenre >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::CodingType* Arena::CreateMaybeMessage< ::mead101::avs::CodingType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::CodingType >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::CommentaryNoteType* Arena::CreateMaybeMessage< ::mead101::avs::CommentaryNoteType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::CommentaryNoteType >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::CommercialModelType* Arena::CreateMaybeMessage< ::mead101::avs::CommercialModelType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::CommercialModelType >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::CommercialModelType_MWNL* Arena::CreateMaybeMessage< ::mead101::avs::CommercialModelType_MWNL >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::CommercialModelType_MWNL >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::CompilationType* Arena::CreateMaybeMessage< ::mead101::avs::CompilationType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::CompilationType >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::CompositeMusicalWorkType* Arena::CreateMaybeMessage< ::mead101::avs::CompositeMusicalWorkType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::CompositeMusicalWorkType >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::ContainerFormat* Arena::CreateMaybeMessage< ::mead101::avs::ContainerFormat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::ContainerFormat >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::ContributorRole* Arena::CreateMaybeMessage< ::mead101::avs::ContributorRole >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::ContributorRole >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::CreativeMusicalWorkContributorRole* Arena::CreateMaybeMessage< ::mead101::avs::CreativeMusicalWorkContributorRole >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::CreativeMusicalWorkContributorRole >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::CueOrigin* Arena::CreateMaybeMessage< ::mead101::avs::CueOrigin >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::CueOrigin >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::CueSheetType* Arena::CreateMaybeMessage< ::mead101::avs::CueSheetType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::CueSheetType >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::CueUseType* Arena::CreateMaybeMessage< ::mead101::avs::CueUseType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::CueUseType >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::CurrencyCode* Arena::CreateMaybeMessage< ::mead101::avs::CurrencyCode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::CurrencyCode >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::CurrentTerritoryCode* Arena::CreateMaybeMessage< ::mead101::avs::CurrentTerritoryCode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::CurrentTerritoryCode >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::DanceAndRhythmStyle* Arena::CreateMaybeMessage< ::mead101::avs::DanceAndRhythmStyle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::DanceAndRhythmStyle >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::DataCarrierFormat* Arena::CreateMaybeMessage< ::mead101::avs::DataCarrierFormat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::DataCarrierFormat >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::DataCarrierType* Arena::CreateMaybeMessage< ::mead101::avs::DataCarrierType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::DataCarrierType >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::DdexTerritoryCode* Arena::CreateMaybeMessage< ::mead101::avs::DdexTerritoryCode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::DdexTerritoryCode >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::DeprecatedCurrencyCode* Arena::CreateMaybeMessage< ::mead101::avs::DeprecatedCurrencyCode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::DeprecatedCurrencyCode >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::DeprecatedIsoTerritoryCode* Arena::CreateMaybeMessage< ::mead101::avs::DeprecatedIsoTerritoryCode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::DeprecatedIsoTerritoryCode >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::DeprecatedReleaseType* Arena::CreateMaybeMessage< ::mead101::avs::DeprecatedReleaseType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::DeprecatedReleaseType >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::DigitizationMode* Arena::CreateMaybeMessage< ::mead101::avs::DigitizationMode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::DigitizationMode >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::DisplayArtistRole* Arena::CreateMaybeMessage< ::mead101::avs::DisplayArtistRole >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::DisplayArtistRole >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::DistributionChannelType* Arena::CreateMaybeMessage< ::mead101::avs::DistributionChannelType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::DistributionChannelType >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::DocumentType_LoD* Arena::CreateMaybeMessage< ::mead101::avs::DocumentType_LoD >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::DocumentType_LoD >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::DocumentType_MWL* Arena::CreateMaybeMessage< ::mead101::avs::DocumentType_MWL >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::DocumentType_MWL >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::DpidStatus* Arena::CreateMaybeMessage< ::mead101::avs::DpidStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::DpidStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::DrmEnforcementType* Arena::CreateMaybeMessage< ::mead101::avs::DrmEnforcementType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::DrmEnforcementType >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::ElementConfiguration* Arena::CreateMaybeMessage< ::mead101::avs::ElementConfiguration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::ElementConfiguration >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::ElementDesignation* Arena::CreateMaybeMessage< ::mead101::avs::ElementDesignation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::ElementDesignation >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::EncodingType* Arena::CreateMaybeMessage< ::mead101::avs::EncodingType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::EncodingType >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::EquipmentType* Arena::CreateMaybeMessage< ::mead101::avs::EquipmentType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::EquipmentType >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::ErnMessageType* Arena::CreateMaybeMessage< ::mead101::avs::ErnMessageType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::ErnMessageType >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::ErnTestMessageType* Arena::CreateMaybeMessage< ::mead101::avs::ErnTestMessageType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::ErnTestMessageType >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::ErncFileStatus* Arena::CreateMaybeMessage< ::mead101::avs::ErncFileStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::ErncFileStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::ErncProposedActionType* Arena::CreateMaybeMessage< ::mead101::avs::ErncProposedActionType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::ErncProposedActionType >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::ErrorSeverity* Arena::CreateMaybeMessage< ::mead101::avs::ErrorSeverity >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::ErrorSeverity >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::ErrorType* Arena::CreateMaybeMessage< ::mead101::avs::ErrorType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::ErrorType >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::ExceptionReason* Arena::CreateMaybeMessage< ::mead101::avs::ExceptionReason >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::ExceptionReason >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::ExpressionType* Arena::CreateMaybeMessage< ::mead101::avs::ExpressionType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::ExpressionType >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::ExternallyLinkedResourceType* Arena::CreateMaybeMessage< ::mead101::avs::ExternallyLinkedResourceType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::ExternallyLinkedResourceType >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::FileType* Arena::CreateMaybeMessage< ::mead101::avs::FileType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::FileType >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::FingerprintAlgorithmType* Arena::CreateMaybeMessage< ::mead101::avs::FingerprintAlgorithmType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::FingerprintAlgorithmType >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::Form* Arena::CreateMaybeMessage< ::mead101::avs::Form >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::Form >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::FrameRate* Arena::CreateMaybeMessage< ::mead101::avs::FrameRate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::FrameRate >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::Gender* Arena::CreateMaybeMessage< ::mead101::avs::Gender >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::Gender >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::GoverningAgreementType* Arena::CreateMaybeMessage< ::mead101::avs::GoverningAgreementType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::GoverningAgreementType >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::HashSumAlgorithmType* Arena::CreateMaybeMessage< ::mead101::avs::HashSumAlgorithmType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::HashSumAlgorithmType >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::ImageCodecType* Arena::CreateMaybeMessage< ::mead101::avs::ImageCodecType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::ImageCodecType >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::ImageType* Arena::CreateMaybeMessage< ::mead101::avs::ImageType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::ImageType >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::InstrumentType* Arena::CreateMaybeMessage< ::mead101::avs::InstrumentType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::InstrumentType >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::Iso639Part12LanguageCode* Arena::CreateMaybeMessage< ::mead101::avs::Iso639Part12LanguageCode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::Iso639Part12LanguageCode >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::Iso639Part3LanguageCode* Arena::CreateMaybeMessage< ::mead101::avs::Iso639Part3LanguageCode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::Iso639Part3LanguageCode >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::IsoCurrencyCode* Arena::CreateMaybeMessage< ::mead101::avs::IsoCurrencyCode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::IsoCurrencyCode >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::IsoLanguageCode* Arena::CreateMaybeMessage< ::mead101::avs::IsoLanguageCode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::IsoLanguageCode >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::IsoTerritoryCode* Arena::CreateMaybeMessage< ::mead101::avs::IsoTerritoryCode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::IsoTerritoryCode >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::LabelNameType* Arena::CreateMaybeMessage< ::mead101::avs::LabelNameType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::LabelNameType >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::LabelType* Arena::CreateMaybeMessage< ::mead101::avs::LabelType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::LabelType >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::LanguageLocalizationType* Arena::CreateMaybeMessage< ::mead101::avs::LanguageLocalizationType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::LanguageLocalizationType >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::LicenseRecord* Arena::CreateMaybeMessage< ::mead101::avs::LicenseRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::LicenseRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::LicenseRefusalReason* Arena::CreateMaybeMessage< ::mead101::avs::LicenseRefusalReason >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::LicenseRefusalReason >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::LicenseRejectionReason* Arena::CreateMaybeMessage< ::mead101::avs::LicenseRejectionReason >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::LicenseRejectionReason >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::LinkAcknowledgementStatus* Arena::CreateMaybeMessage< ::mead101::avs::LinkAcknowledgementStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::LinkAcknowledgementStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::LinkDescription* Arena::CreateMaybeMessage< ::mead101::avs::LinkDescription >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::LinkDescription >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::LyricsType* Arena::CreateMaybeMessage< ::mead101::avs::LyricsType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::LyricsType >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::MembershipType* Arena::CreateMaybeMessage< ::mead101::avs::MembershipType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::MembershipType >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::MessageActionType* Arena::CreateMaybeMessage< ::mead101::avs::MessageActionType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::MessageActionType >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::MessageControlType* Arena::CreateMaybeMessage< ::mead101::avs::MessageControlType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::MessageControlType >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::MessagePurpose* Arena::CreateMaybeMessage< ::mead101::avs::MessagePurpose >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::MessagePurpose >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::MessageType* Arena::CreateMaybeMessage< ::mead101::avs::MessageType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::MessageType >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::MetadataSourceType* Arena::CreateMaybeMessage< ::mead101::avs::MetadataSourceType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::MetadataSourceType >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::MissingLinkReason* Arena::CreateMaybeMessage< ::mead101::avs::MissingLinkReason >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::MissingLinkReason >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::MlcMessageType* Arena::CreateMaybeMessage< ::mead101::avs::MlcMessageType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::MlcMessageType >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::Mode* Arena::CreateMaybeMessage< ::mead101::avs::Mode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::Mode >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::MoodType* Arena::CreateMaybeMessage< ::mead101::avs::MoodType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::MoodType >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::MusicalWorkContributorRole* Arena::CreateMaybeMessage< ::mead101::avs::MusicalWorkContributorRole >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::MusicalWorkContributorRole >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::MusicalWorkType* Arena::CreateMaybeMessage< ::mead101::avs::MusicalWorkType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::MusicalWorkType >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::MwnlFileStatus* Arena::CreateMaybeMessage< ::mead101::avs::MwnlFileStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::MwnlFileStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::MwnlProposedActionType* Arena::CreateMaybeMessage< ::mead101::avs::MwnlProposedActionType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::MwnlProposedActionType >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::NewStudioRole* Arena::CreateMaybeMessage< ::mead101::avs::NewStudioRole >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::NewStudioRole >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::OperatingSystemType* Arena::CreateMaybeMessage< ::mead101::avs::OperatingSystemType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::OperatingSystemType >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::PLineType* Arena::CreateMaybeMessage< ::mead101::avs::PLineType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::PLineType >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::ParentalWarningType* Arena::CreateMaybeMessage< ::mead101::avs::ParentalWarningType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::ParentalWarningType >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::PartyRelationshipType* Arena::CreateMaybeMessage< ::mead101::avs::PartyRelationshipType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::PartyRelationshipType >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::PercentageType* Arena::CreateMaybeMessage< ::mead101::avs::PercentageType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::PercentageType >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::Period* Arena::CreateMaybeMessage< ::mead101::avs::Period >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::Period >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::PhysicalCarrierType* Arena::CreateMaybeMessage< ::mead101::avs::PhysicalCarrierType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::PhysicalCarrierType >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::PriceInformationType* Arena::CreateMaybeMessage< ::mead101::avs::PriceInformationType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::PriceInformationType >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::ProductType* Arena::CreateMaybeMessage< ::mead101::avs::ProductType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::ProductType >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::ProfileId* Arena::CreateMaybeMessage< ::mead101::avs::ProfileId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::ProfileId >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::Purpose* Arena::CreateMaybeMessage< ::mead101::avs::Purpose >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::Purpose >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::RatingAgency* Arena::CreateMaybeMessage< ::mead101::avs::RatingAgency >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::RatingAgency >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::RatingReason* Arena::CreateMaybeMessage< ::mead101::avs::RatingReason >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::RatingReason >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::RecipientRevenueType* Arena::CreateMaybeMessage< ::mead101::avs::RecipientRevenueType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::RecipientRevenueType >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::RecordingMode* Arena::CreateMaybeMessage< ::mead101::avs::RecordingMode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::RecordingMode >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::RecordingPartType* Arena::CreateMaybeMessage< ::mead101::avs::RecordingPartType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::RecordingPartType >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::ReferenceCreation* Arena::CreateMaybeMessage< ::mead101::avs::ReferenceCreation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::ReferenceCreation >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::ReferenceUnit* Arena::CreateMaybeMessage< ::mead101::avs::ReferenceUnit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::ReferenceUnit >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::RegistrationStatus* Arena::CreateMaybeMessage< ::mead101::avs::RegistrationStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::RegistrationStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::RelatedResourceType* Arena::CreateMaybeMessage< ::mead101::avs::RelatedResourceType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::RelatedResourceType >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::RelationalRelator* Arena::CreateMaybeMessage< ::mead101::avs::RelationalRelator >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::RelationalRelator >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::ReleaseProfileVariantVersionId* Arena::CreateMaybeMessage< ::mead101::avs::ReleaseProfileVariantVersionId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::ReleaseProfileVariantVersionId >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::ReleaseProfileVersionId* Arena::CreateMaybeMessage< ::mead101::avs::ReleaseProfileVersionId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::ReleaseProfileVersionId >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::ReleaseRelationshipType* Arena::CreateMaybeMessage< ::mead101::avs::ReleaseRelationshipType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::ReleaseRelationshipType >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::ReleaseResourceType* Arena::CreateMaybeMessage< ::mead101::avs::ReleaseResourceType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::ReleaseResourceType >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::ReleaseType* Arena::CreateMaybeMessage< ::mead101::avs::ReleaseType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::ReleaseType >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::ReleaseType_ERN4* Arena::CreateMaybeMessage< ::mead101::avs::ReleaseType_ERN4 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::ReleaseType_ERN4 >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::ReleaseType_MCNOTIF* Arena::CreateMaybeMessage< ::mead101::avs::ReleaseType_MCNOTIF >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::ReleaseType_MCNOTIF >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::RequestMessagePurpose* Arena::CreateMaybeMessage< ::mead101::avs::RequestMessagePurpose >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::RequestMessagePurpose >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::RequestReason* Arena::CreateMaybeMessage< ::mead101::avs::RequestReason >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::RequestReason >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::ResourceContributorRole* Arena::CreateMaybeMessage< ::mead101::avs::ResourceContributorRole >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::ResourceContributorRole >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::ResourceGroupType* Arena::CreateMaybeMessage< ::mead101::avs::ResourceGroupType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::ResourceGroupType >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::ResourceRelationshipType* Arena::CreateMaybeMessage< ::mead101::avs::ResourceRelationshipType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::ResourceRelationshipType >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::ResourceType* Arena::CreateMaybeMessage< ::mead101::avs::ResourceType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::ResourceType >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::ResourceType_MCNOTIF* Arena::CreateMaybeMessage< ::mead101::avs::ResourceType_MCNOTIF >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::ResourceType_MCNOTIF >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::ResourceWorkRelationshipType* Arena::CreateMaybeMessage< ::mead101::avs::ResourceWorkRelationshipType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::ResourceWorkRelationshipType >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::RevenueSourceType* Arena::CreateMaybeMessage< ::mead101::avs::RevenueSourceType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::RevenueSourceType >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::RightShareType* Arena::CreateMaybeMessage< ::mead101::avs::RightShareType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::RightShareType >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::RightsClaimPolicyType* Arena::CreateMaybeMessage< ::mead101::avs::RightsClaimPolicyType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::RightsClaimPolicyType >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::RightsClaimStatus* Arena::CreateMaybeMessage< ::mead101::avs::RightsClaimStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::RightsClaimStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::RightsControllerRole* Arena::CreateMaybeMessage< ::mead101::avs::RightsControllerRole >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::RightsControllerRole >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::RightsControllerType* Arena::CreateMaybeMessage< ::mead101::avs::RightsControllerType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::RightsControllerType >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::RightsCoverage* Arena::CreateMaybeMessage< ::mead101::avs::RightsCoverage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::RightsCoverage >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::RightsCoverage_MWNL* Arena::CreateMaybeMessage< ::mead101::avs::RightsCoverage_MWNL >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::RightsCoverage_MWNL >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::RightsStatementProfile* Arena::CreateMaybeMessage< ::mead101::avs::RightsStatementProfile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::RightsStatementProfile >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::RootChordNote* Arena::CreateMaybeMessage< ::mead101::avs::RootChordNote >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::RootChordNote >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::RootChordQuality* Arena::CreateMaybeMessage< ::mead101::avs::RootChordQuality >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::RootChordQuality >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::RoyaltyRateCalculationType* Arena::CreateMaybeMessage< ::mead101::avs::RoyaltyRateCalculationType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::RoyaltyRateCalculationType >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::RoyaltyRateType* Arena::CreateMaybeMessage< ::mead101::avs::RoyaltyRateType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::RoyaltyRateType >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::SessionType* Arena::CreateMaybeMessage< ::mead101::avs::SessionType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::SessionType >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::SheetMusicCodecType* Arena::CreateMaybeMessage< ::mead101::avs::SheetMusicCodecType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::SheetMusicCodecType >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::SheetMusicType* Arena::CreateMaybeMessage< ::mead101::avs::SheetMusicType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::SheetMusicType >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::SoftwareType* Arena::CreateMaybeMessage< ::mead101::avs::SoftwareType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::SoftwareType >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::SoundRecordingType* Arena::CreateMaybeMessage< ::mead101::avs::SoundRecordingType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::SoundRecordingType >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::Status* Arena::CreateMaybeMessage< ::mead101::avs::Status >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::Status >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::SubGenre* Arena::CreateMaybeMessage< ::mead101::avs::SubGenre >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::SubGenre >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::SubTitleType* Arena::CreateMaybeMessage< ::mead101::avs::SubTitleType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::SubTitleType >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::SupplyChainStatus* Arena::CreateMaybeMessage< ::mead101::avs::SupplyChainStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::SupplyChainStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::Tempo* Arena::CreateMaybeMessage< ::mead101::avs::Tempo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::Tempo >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::TerritoryCodeType* Arena::CreateMaybeMessage< ::mead101::avs::TerritoryCodeType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::TerritoryCodeType >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::TerritoryCodeTypeIncludingDeprecatedCodes* Arena::CreateMaybeMessage< ::mead101::avs::TerritoryCodeTypeIncludingDeprecatedCodes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::TerritoryCodeTypeIncludingDeprecatedCodes >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::TextCodecType* Arena::CreateMaybeMessage< ::mead101::avs::TextCodecType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::TextCodecType >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::TextType* Arena::CreateMaybeMessage< ::mead101::avs::TextType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::TextType >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::TextType_ATOM* Arena::CreateMaybeMessage< ::mead101::avs::TextType_ATOM >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::TextType_ATOM >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::Theme* Arena::CreateMaybeMessage< ::mead101::avs::Theme >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::Theme >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::ThemeType* Arena::CreateMaybeMessage< ::mead101::avs::ThemeType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::ThemeType >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::TimecodeType* Arena::CreateMaybeMessage< ::mead101::avs::TimecodeType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::TimecodeType >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::TisTerritoryCode* Arena::CreateMaybeMessage< ::mead101::avs::TisTerritoryCode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::TisTerritoryCode >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::TitleType* Arena::CreateMaybeMessage< ::mead101::avs::TitleType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::TitleType >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::TransferCategory* Arena::CreateMaybeMessage< ::mead101::avs::TransferCategory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::TransferCategory >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::TransferType* Arena::CreateMaybeMessage< ::mead101::avs::TransferType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::TransferType >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::UnitOfBitRate* Arena::CreateMaybeMessage< ::mead101::avs::UnitOfBitRate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::UnitOfBitRate >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::UnitOfConditionValue* Arena::CreateMaybeMessage< ::mead101::avs::UnitOfConditionValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::UnitOfConditionValue >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::UnitOfCuePoints* Arena::CreateMaybeMessage< ::mead101::avs::UnitOfCuePoints >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::UnitOfCuePoints >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::UnitOfDuration* Arena::CreateMaybeMessage< ::mead101::avs::UnitOfDuration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::UnitOfDuration >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::UnitOfExtent* Arena::CreateMaybeMessage< ::mead101::avs::UnitOfExtent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::UnitOfExtent >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::UnitOfFrameRate* Arena::CreateMaybeMessage< ::mead101::avs::UnitOfFrameRate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::UnitOfFrameRate >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::UnitOfFrequency* Arena::CreateMaybeMessage< ::mead101::avs::UnitOfFrequency >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::UnitOfFrequency >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::UseType* Arena::CreateMaybeMessage< ::mead101::avs::UseType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::UseType >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::UseType_MLC* Arena::CreateMaybeMessage< ::mead101::avs::UseType_MLC >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::UseType_MLC >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::UseType_MWNL* Arena::CreateMaybeMessage< ::mead101::avs::UseType_MWNL >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::UseType_MWNL >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::UserInterfaceType* Arena::CreateMaybeMessage< ::mead101::avs::UserInterfaceType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::UserInterfaceType >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::VersionType* Arena::CreateMaybeMessage< ::mead101::avs::VersionType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::VersionType >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::VideoCodecType* Arena::CreateMaybeMessage< ::mead101::avs::VideoCodecType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::VideoCodecType >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::VideoDefinitionType* Arena::CreateMaybeMessage< ::mead101::avs::VideoDefinitionType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::VideoDefinitionType >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::VideoType* Arena::CreateMaybeMessage< ::mead101::avs::VideoType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::VideoType >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::VideoType_DSRF* Arena::CreateMaybeMessage< ::mead101::avs::VideoType_DSRF >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::VideoType_DSRF >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::VisualPerceptionType* Arena::CreateMaybeMessage< ::mead101::avs::VisualPerceptionType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::VisualPerceptionType >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::VocalRegister* Arena::CreateMaybeMessage< ::mead101::avs::VocalRegister >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::VocalRegister >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::VocalType* Arena::CreateMaybeMessage< ::mead101::avs::VocalType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::VocalType >(arena);
}
template<> PROTOBUF_NOINLINE ::mead101::avs::WorkRelationshipType* Arena::CreateMaybeMessage< ::mead101::avs::WorkRelationshipType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mead101::avs::WorkRelationshipType >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
